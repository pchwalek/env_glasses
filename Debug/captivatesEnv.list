
captivatesEnv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000122a4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  080123e4  080123e4  000223e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080126cc  080126cc  000226cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080126d4  080126d4  000226d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000004  080126d8  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000054c4  200001f0  080128c4  000301f0  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200056b4  080128c4  000356b4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
  9 .debug_info   000554b3  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000093bd  00000000  00000000  000856d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000032a8  00000000  00000000  0008ea90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00002f38  00000000  00000000  00091d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038170  00000000  00000000  00094c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0004001f  00000000  00000000  000ccde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0011da95  00000000  00000000  0010cdff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0022a894  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000d5fc  00000000  00000000  0022a8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	080123cc 	.word	0x080123cc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	080123cc 	.word	0x080123cc

08000180 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800018c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4313      	orrs	r3, r2
 8000196:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800019c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	4013      	ands	r3, r2
 80001a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a4:	68fb      	ldr	r3, [r7, #12]
}
 80001a6:	bf00      	nop
 80001a8:	3714      	adds	r7, #20
 80001aa:	46bd      	mov	sp, r7
 80001ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001b0:	4770      	bx	lr
	...

080001b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ba:	463b      	mov	r3, r7
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
 80001c0:	605a      	str	r2, [r3, #4]
 80001c2:	609a      	str	r2, [r3, #8]
 80001c4:	60da      	str	r2, [r3, #12]
 80001c6:	611a      	str	r2, [r3, #16]
 80001c8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ca:	4b29      	ldr	r3, [pc, #164]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001cc:	4a29      	ldr	r2, [pc, #164]	; (8000274 <MX_ADC1_Init+0xc0>)
 80001ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001d0:	4b27      	ldr	r3, [pc, #156]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001d6:	4b26      	ldr	r3, [pc, #152]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001d8:	2200      	movs	r2, #0
 80001da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001dc:	4b24      	ldr	r3, [pc, #144]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001de:	2200      	movs	r2, #0
 80001e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001e2:	4b23      	ldr	r3, [pc, #140]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80001e8:	4b21      	ldr	r3, [pc, #132]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001ea:	2204      	movs	r2, #4
 80001ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80001ee:	4b20      	ldr	r3, [pc, #128]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80001f4:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80001fa:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000200:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000202:	2200      	movs	r2, #0
 8000204:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000208:	4b19      	ldr	r3, [pc, #100]	; (8000270 <MX_ADC1_Init+0xbc>)
 800020a:	2200      	movs	r2, #0
 800020c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800020e:	4b18      	ldr	r3, [pc, #96]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000210:	2200      	movs	r2, #0
 8000212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000214:	4b16      	ldr	r3, [pc, #88]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000216:	2200      	movs	r2, #0
 8000218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <MX_ADC1_Init+0xbc>)
 800021e:	2200      	movs	r2, #0
 8000220:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000222:	4b13      	ldr	r3, [pc, #76]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000224:	2200      	movs	r2, #0
 8000226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800022a:	4811      	ldr	r0, [pc, #68]	; (8000270 <MX_ADC1_Init+0xbc>)
 800022c:	f001 fe46 	bl	8001ebc <HAL_ADC_Init>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000236:	f000 fe01 	bl	8000e3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <MX_ADC1_Init+0xc4>)
 800023c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800023e:	2306      	movs	r3, #6
 8000240:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000246:	237f      	movs	r3, #127	; 0x7f
 8000248:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800024a:	2304      	movs	r3, #4
 800024c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000252:	463b      	mov	r3, r7
 8000254:	4619      	mov	r1, r3
 8000256:	4806      	ldr	r0, [pc, #24]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000258:	f001 ff7c 	bl	8002154 <HAL_ADC_ConfigChannel>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000262:	f000 fdeb 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000266:	bf00      	nop
 8000268:	3718      	adds	r7, #24
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20003b18 	.word	0x20003b18
 8000274:	50040000 	.word	0x50040000
 8000278:	19200040 	.word	0x19200040

0800027c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	f107 030c 	add.w	r3, r7, #12
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <HAL_ADC_MspInit+0x54>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d113      	bne.n	80002c6 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800029e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80002a2:	f7ff ff6d 	bl	8000180 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	2001      	movs	r0, #1
 80002a8:	f7ff ff6a 	bl	8000180 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002b0:	2303      	movs	r3, #3
 80002b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b4:	2300      	movs	r3, #0
 80002b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 80002b8:	f107 030c 	add.w	r3, r7, #12
 80002bc:	4619      	mov	r1, r3
 80002be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c2:	f002 fbed 	bl	8002aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002c6:	bf00      	nop
 80002c8:	3720      	adds	r7, #32
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	50040000 	.word	0x50040000

080002d4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80002dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002e0:	4a0a      	ldr	r2, [pc, #40]	; (800030c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80002e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80002e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80002ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	021b      	lsls	r3, r3, #8
 80002f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002fa:	4313      	orrs	r3, r2
 80002fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	cafecafe 	.word	0xcafecafe

08000310 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800031c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800033a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800033e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800035c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000364:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000368:	d101      	bne.n	800036e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800036a:	2301      	movs	r3, #1
 800036c:	e000      	b.n	8000370 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800036e:	2300      	movs	r3, #0
}
 8000370:	4618      	mov	r0, r3
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800037e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800038e:	d101      	bne.n	8000394 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000390:	2301      	movs	r3, #1
 8000392:	e000      	b.n	8000396 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000394:	2300      	movs	r3, #0
}
 8000396:	4618      	mov	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80003a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80003b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4013      	ands	r3, r2
 80003c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003c4:	68fb      	ldr	r3, [r7, #12]
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685a      	ldr	r2, [r3, #4]
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	041b      	lsls	r3, r3, #16
 80003e4:	431a      	orrs	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	685a      	ldr	r2, [r3, #4]
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	431a      	orrs	r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	605a      	str	r2, [r3, #4]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	041b      	lsls	r3, r3, #16
 800042a:	431a      	orrs	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	615a      	str	r2, [r3, #20]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	431a      	orrs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	615a      	str	r2, [r3, #20]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	609a      	str	r2, [r3, #8]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	619a      	str	r2, [r3, #24]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <LL_LPM_EnableSleep+0x1c>)
 800049e:	691b      	ldr	r3, [r3, #16]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <LL_LPM_EnableSleep+0x1c>)
 80004a2:	f023 0304 	bic.w	r3, r3, #4
 80004a6:	6113      	str	r3, [r2, #16]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e000ed00 	.word	0xe000ed00

080004b8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <MX_APPE_Config+0x18>)
 80004be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004c2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 80004c4:	f000 f806 	bl	80004d4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80004c8:	f000 f846 	bl	8000558 <Config_HSE>

  return;
 80004cc:	bf00      	nop
}
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	58004000 	.word	0x58004000

080004d4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80004d8:	f000 f804 	bl	80004e4 <Reset_BackupDomain>

  Reset_IPCC();
 80004dc:	f000 f81a 	bl	8000514 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 80004e0:	bf00      	nop
}
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80004e8:	f7ff ff34 	bl	8000354 <LL_RCC_IsActiveFlag_PINRST>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d00d      	beq.n	800050e <Reset_BackupDomain+0x2a>
 80004f2:	f7ff ff42 	bl	800037a <LL_RCC_IsActiveFlag_SFTRST>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d108      	bne.n	800050e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80004fc:	f004 fff6 	bl	80054ec <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000500:	f004 fff4 	bl	80054ec <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000504:	f7ff ff04 	bl	8000310 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000508:	f7ff ff13 	bl	8000332 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800050c:	bf00      	nop
 800050e:	bf00      	nop
}
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000518:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800051c:	f7ff ff40 	bl	80003a0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000520:	213f      	movs	r1, #63	; 0x3f
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <Reset_IPCC+0x40>)
 8000524:	f7ff ff9b 	bl	800045e <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000528:	213f      	movs	r1, #63	; 0x3f
 800052a:	480a      	ldr	r0, [pc, #40]	; (8000554 <Reset_IPCC+0x40>)
 800052c:	f7ff ffa5 	bl	800047a <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000530:	213f      	movs	r1, #63	; 0x3f
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <Reset_IPCC+0x40>)
 8000534:	f7ff ff4d 	bl	80003d2 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000538:	213f      	movs	r1, #63	; 0x3f
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <Reset_IPCC+0x40>)
 800053c:	f7ff ff6c 	bl	8000418 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000540:	213f      	movs	r1, #63	; 0x3f
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <Reset_IPCC+0x40>)
 8000544:	f7ff ff57 	bl	80003f6 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000548:	213f      	movs	r1, #63	; 0x3f
 800054a:	4802      	ldr	r0, [pc, #8]	; (8000554 <Reset_IPCC+0x40>)
 800054c:	f7ff ff76 	bl	800043c <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000550:	bf00      	nop
}
 8000552:	bd80      	pop	{r7, pc}
 8000554:	58000c00 	.word	0x58000c00

08000558 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800055e:	2000      	movs	r0, #0
 8000560:	f00c fde4 	bl	800d12c <OTP_Read>
 8000564:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d005      	beq.n	8000578 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	799b      	ldrb	r3, [r3, #6]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff feaf 	bl	80002d4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000576:	bf00      	nop
 8000578:	bf00      	nop
}
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000588:	f001 fae8 	bl	8001b5c <HAL_GetTick>
 800058c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000598:	d00a      	beq.n	80005b0 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800059a:	f001 faf7 	bl	8001b8c <HAL_GetTickFreq>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005a8:	e002      	b.n	80005b0 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80005aa:	f7ff ff75 	bl	8000498 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 80005ae:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80005b0:	f001 fad4 	bl	8001b5c <HAL_GetTick>
 80005b4:	4602      	mov	r2, r0
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d8f4      	bhi.n	80005aa <HAL_Delay+0x2a>
  }
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osMutexNew(&messageI2C_Lock_attributes);
 80005d0:	480f      	ldr	r0, [pc, #60]	; (8000610 <_Z16MX_FREERTOS_Initv+0x44>)
 80005d2:	f00d fb89 	bl	800dce8 <osMutexNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <_Z16MX_FREERTOS_Initv+0x48>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	/* creation of lightsSimpleQueue */
	lightsComplexQueueHandle = osMessageQueueNew(3, sizeof(union ColorComplex),
 80005dc:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <_Z16MX_FREERTOS_Initv+0x4c>)
 80005de:	2112      	movs	r1, #18
 80005e0:	2003      	movs	r0, #3
 80005e2:	f00d fc07 	bl	800ddf4 <osMessageQueueNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <_Z16MX_FREERTOS_Initv+0x50>)
 80005ea:	6013      	str	r3, [r2, #0]
			&lightsComplexQueue_attributes);
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ec:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <_Z16MX_FREERTOS_Initv+0x54>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <_Z16MX_FREERTOS_Initv+0x58>)
 80005f2:	f00d f909 	bl	800d808 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <_Z16MX_FREERTOS_Initv+0x5c>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of frontLightsThre */
//  frontLightsThreHandle = osThreadNew(ThreadFrontLightsComplexTask, NULL, &frontLightsThre_attributes);

  /* creation of thermopileTask */
  thermopileTaskHandle = osThreadNew(Thermopile_Task, NULL, &thermopileTask_attributes);
 80005fc:	4a0b      	ldr	r2, [pc, #44]	; (800062c <_Z16MX_FREERTOS_Initv+0x60>)
 80005fe:	2100      	movs	r1, #0
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <_Z16MX_FREERTOS_Initv+0x64>)
 8000602:	f00d f901 	bl	800d808 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <_Z16MX_FREERTOS_Initv+0x68>)
 800060a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	08012524 	.word	0x08012524
 8000614:	20000218 	.word	0x20000218
 8000618:	080124c4 	.word	0x080124c4
 800061c:	2000020c 	.word	0x2000020c
 8000620:	080124dc 	.word	0x080124dc
 8000624:	08000639 	.word	0x08000639
 8000628:	20000210 	.word	0x20000210
 800062c:	08012500 	.word	0x08012500
 8000630:	080015c1 	.word	0x080015c1
 8000634:	20000214 	.word	0x20000214

08000638 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000644:	f00d fa41 	bl	800daca <osDelay>

	while(1){
		ledStartupSequence();
 8000648:	f000 f9e2 	bl	8000a10 <ledStartupSequence>
		osDelay(1500);
 800064c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000650:	f00d fa3b 	bl	800daca <osDelay>
		ledStartupSequence();
 8000654:	e7f8      	b.n	8000648 <_Z16StartDefaultTaskPv+0x10>

08000656 <LL_AHB2_GRP1_EnableClock>:
{
 8000656:	b480      	push	{r7}
 8000658:	b085      	sub	sp, #20
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800065e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000664:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4313      	orrs	r3, r2
 800066c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800066e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4013      	ands	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <MX_GPIO_Init>:

/** Configure pins
     PA1   ------> SharedAnalog_PA1
*/
void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ffda 	bl	8000656 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	2004      	movs	r0, #4
 80006a4:	f7ff ffd7 	bl	8000656 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a8:	2002      	movs	r0, #2
 80006aa:	f7ff ffd4 	bl	8000656 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ae:	2008      	movs	r0, #8
 80006b0:	f7ff ffd1 	bl	8000656 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_1_8V_Pin|MEM_WP_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80006ba:	481d      	ldr	r0, [pc, #116]	; (8000730 <MX_GPIO_Init+0xa8>)
 80006bc:	f002 fb60 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 80006c0:	2302      	movs	r3, #2
 80006c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c4:	2303      	movs	r3, #3
 80006c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d4:	f002 f9e4 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EN_1_8V_Pin|MEM_WP_Pin;
 80006d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	4810      	ldr	r0, [pc, #64]	; (8000730 <MX_GPIO_Init+0xa8>)
 80006f0:	f002 f9d6 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA9_Pin;
 80006f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(PA9_GPIO_Port, &GPIO_InitStruct);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4619      	mov	r1, r3
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f002 f9c9 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = PD4_Pin|PD9_Pin;
 800070e:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000712:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	4619      	mov	r1, r3
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_GPIO_Init+0xac>)
 8000722:	f002 f9bd 	bl	8002aa0 <HAL_GPIO_Init>

}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	48000800 	.word	0x48000800
 8000734:	48000c00 	.word	0x48000c00

08000738 <LL_AHB2_GRP1_EnableClock>:
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4013      	ands	r3, r2
 800075a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800075c:	68fb      	ldr	r3, [r7, #12]
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800076a:	b480      	push	{r7}
 800076c:	b085      	sub	sp, #20
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000776:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4313      	orrs	r3, r2
 8000780:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000786:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4013      	ands	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_I2C1_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_I2C1_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_I2C1_Init+0x74>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d8:	f002 fb0e 	bl	8002df8 <HAL_I2C_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007e2:	f000 fb2b 	bl	8000e3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ea:	f003 f82d 	bl	8003848 <HAL_I2CEx_ConfigAnalogFilter>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f000 fb22 	bl	8000e3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_I2C1_Init+0x74>)
 80007fc:	f003 f86f 	bl	80038de <HAL_I2CEx_ConfigDigitalFilter>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000806:	f000 fb19 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20003bc8 	.word	0x20003bc8
 8000814:	40005400 	.word	0x40005400
 8000818:	10707dbc 	.word	0x10707dbc

0800081c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_I2C3_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_I2C3_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_I2C3_Init+0x74>)
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <MX_I2C3_Init+0x7c>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_I2C3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_I2C3_Init+0x74>)
 8000834:	2201      	movs	r2, #1
 8000836:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_I2C3_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_I2C3_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_I2C3_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_I2C3_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_I2C3_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000856:	480e      	ldr	r0, [pc, #56]	; (8000890 <MX_I2C3_Init+0x74>)
 8000858:	f002 face 	bl	8002df8 <HAL_I2C_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000862:	f000 faeb 	bl	8000e3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000866:	2100      	movs	r1, #0
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <MX_I2C3_Init+0x74>)
 800086a:	f002 ffed 	bl	8003848 <HAL_I2CEx_ConfigAnalogFilter>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000874:	f000 fae2 	bl	8000e3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000878:	2100      	movs	r1, #0
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_I2C3_Init+0x74>)
 800087c:	f003 f82f 	bl	80038de <HAL_I2CEx_ConfigDigitalFilter>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000886:	f000 fad9 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20003b7c 	.word	0x20003b7c
 8000894:	40005c00 	.word	0x40005c00
 8000898:	10707dbc 	.word	0x10707dbc

0800089c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09c      	sub	sp, #112	; 0x70
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2250      	movs	r2, #80	; 0x50
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f011 fd7d 	bl	80123bc <memset>
  if(i2cHandle->Instance==I2C1)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a2d      	ldr	r2, [pc, #180]	; (800097c <HAL_I2C_MspInit+0xe0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d127      	bne.n	800091c <HAL_I2C_MspInit+0x80>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008cc:	2304      	movs	r3, #4
 80008ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008d0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f006 fb9c 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008e6:	f000 faa9 	bl	8000e3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2002      	movs	r0, #2
 80008ec:	f7ff ff24 	bl	8000738 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 80008f0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f6:	2312      	movs	r3, #18
 80008f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000902:	2304      	movs	r3, #4
 8000904:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800090a:	4619      	mov	r1, r3
 800090c:	481c      	ldr	r0, [pc, #112]	; (8000980 <HAL_I2C_MspInit+0xe4>)
 800090e:	f002 f8c7 	bl	8002aa0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000912:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000916:	f7ff ff28 	bl	800076a <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800091a:	e02a      	b.n	8000972 <HAL_I2C_MspInit+0xd6>
  else if(i2cHandle->Instance==I2C3)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a18      	ldr	r2, [pc, #96]	; (8000984 <HAL_I2C_MspInit+0xe8>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d125      	bne.n	8000972 <HAL_I2C_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000926:	2308      	movs	r3, #8
 8000928:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800092a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4618      	mov	r0, r3
 8000936:	f006 fb6f 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8000940:	f000 fa7c 	bl	8000e3c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000944:	2004      	movs	r0, #4
 8000946:	f7ff fef7 	bl	8000738 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800094a:	2303      	movs	r3, #3
 800094c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094e:	2312      	movs	r3, #18
 8000950:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800095a:	2304      	movs	r3, #4
 800095c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000962:	4619      	mov	r1, r3
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <HAL_I2C_MspInit+0xec>)
 8000966:	f002 f89b 	bl	8002aa0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800096a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800096e:	f7ff fefc 	bl	800076a <LL_APB1_GRP1_EnableClock>
}
 8000972:	bf00      	nop
 8000974:	3770      	adds	r7, #112	; 0x70
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40005400 	.word	0x40005400
 8000980:	48000400 	.word	0x48000400
 8000984:	40005c00 	.word	0x40005c00
 8000988:	48000800 	.word	0x48000800

0800098c <LL_AHB3_GRP1_EnableClock>:
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800099a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80009a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009b0:	68fb      	ldr	r3, [r7, #12]
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_IPCC_Init+0x20>)
 80009c6:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <MX_IPCC_Init+0x24>)
 80009c8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_IPCC_Init+0x20>)
 80009cc:	f002 ffd4 	bl	8003978 <HAL_IPCC_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80009d6:	f000 fa31 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20003c14 	.word	0x20003c14
 80009e4:	58000c00 	.word	0x58000c00

080009e8 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <HAL_IPCC_MspInit+0x24>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d103      	bne.n	8000a02 <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80009fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009fe:	f7ff ffc5 	bl	800098c <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	58000c00 	.word	0x58000c00

08000a10 <ledStartupSequence>:
{
  HAL_GPIO_TogglePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led]);
}
#endif

void ledStartupSequence(void){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	resetColor(&receivedColor);
 8000a14:	4864      	ldr	r0, [pc, #400]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a16:	f000 f8ed 	bl	8000bf4 <resetColor>

	receivedColor.colors_indiv.left_front_b = 255;
 8000a1a:	4b63      	ldr	r3, [pc, #396]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a1c:	22ff      	movs	r2, #255	; 0xff
 8000a1e:	705a      	strb	r2, [r3, #1]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000a20:	4b62      	ldr	r3, [pc, #392]	; (8000bac <ledStartupSequence+0x19c>)
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	2300      	movs	r3, #0
 8000a26:	2200      	movs	r2, #0
 8000a28:	495f      	ldr	r1, [pc, #380]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a2a:	f00d fa57 	bl	800dedc <osMessageQueuePut>
//	FrontLightsSet(&receivedColor););
	osDelay(LED_START_SEQ_INTERVAL);
 8000a2e:	20c8      	movs	r0, #200	; 0xc8
 8000a30:	f00d f84b 	bl	800daca <osDelay>

	receivedColor.colors_indiv.left_front_b = 0;
 8000a34:	4b5c      	ldr	r3, [pc, #368]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	705a      	strb	r2, [r3, #1]
	receivedColor.colors_indiv.left_front_g = 255;
 8000a3a:	4b5b      	ldr	r3, [pc, #364]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a3c:	22ff      	movs	r2, #255	; 0xff
 8000a3e:	701a      	strb	r2, [r3, #0]

	receivedColor.colors_indiv.left_top_b = 255;
 8000a40:	4b59      	ldr	r3, [pc, #356]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a42:	22ff      	movs	r2, #255	; 0xff
 8000a44:	709a      	strb	r2, [r3, #2]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000a46:	4b59      	ldr	r3, [pc, #356]	; (8000bac <ledStartupSequence+0x19c>)
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4956      	ldr	r1, [pc, #344]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a50:	f00d fa44 	bl	800dedc <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000a54:	20c8      	movs	r0, #200	; 0xc8
 8000a56:	f00d f838 	bl	800daca <osDelay>

	receivedColor.colors_indiv.left_front_g = 0;
 8000a5a:	4b53      	ldr	r3, [pc, #332]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
	receivedColor.colors_indiv.left_front_r = 255;
 8000a60:	4b51      	ldr	r3, [pc, #324]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a62:	22ff      	movs	r2, #255	; 0xff
 8000a64:	719a      	strb	r2, [r3, #6]

	receivedColor.colors_indiv.left_top_b = 0;
 8000a66:	4b50      	ldr	r3, [pc, #320]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	709a      	strb	r2, [r3, #2]
	receivedColor.colors_indiv.left_top_g = 255;
 8000a6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a6e:	22ff      	movs	r2, #255	; 0xff
 8000a70:	70da      	strb	r2, [r3, #3]

	receivedColor.colors_indiv.left_side_b = 255;
 8000a72:	4b4d      	ldr	r3, [pc, #308]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a74:	22ff      	movs	r2, #255	; 0xff
 8000a76:	711a      	strb	r2, [r3, #4]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000a78:	4b4c      	ldr	r3, [pc, #304]	; (8000bac <ledStartupSequence+0x19c>)
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4949      	ldr	r1, [pc, #292]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a82:	f00d fa2b 	bl	800dedc <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000a86:	20c8      	movs	r0, #200	; 0xc8
 8000a88:	f00d f81f 	bl	800daca <osDelay>

	receivedColor.colors_indiv.left_front_r = 0;
 8000a8c:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	719a      	strb	r2, [r3, #6]

	receivedColor.colors_indiv.left_top_g = 0;
 8000a92:	4b45      	ldr	r3, [pc, #276]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	70da      	strb	r2, [r3, #3]
	receivedColor.colors_indiv.left_top_r = 255;
 8000a98:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	71da      	strb	r2, [r3, #7]

	receivedColor.colors_indiv.left_side_b = 0;
 8000a9e:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <ledStartupSequence+0x198>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	711a      	strb	r2, [r3, #4]
	receivedColor.colors_indiv.left_side_g = 255;
 8000aa4:	4b40      	ldr	r3, [pc, #256]	; (8000ba8 <ledStartupSequence+0x198>)
 8000aa6:	22ff      	movs	r2, #255	; 0xff
 8000aa8:	715a      	strb	r2, [r3, #5]

	receivedColor.colors_indiv.right_side_b = 255;
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <ledStartupSequence+0x198>)
 8000aac:	22ff      	movs	r2, #255	; 0xff
 8000aae:	735a      	strb	r2, [r3, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <ledStartupSequence+0x19c>)
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	493b      	ldr	r1, [pc, #236]	; (8000ba8 <ledStartupSequence+0x198>)
 8000aba:	f00d fa0f 	bl	800dedc <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000abe:	20c8      	movs	r0, #200	; 0xc8
 8000ac0:	f00d f803 	bl	800daca <osDelay>

	receivedColor.colors_indiv.left_top_r = 0;
 8000ac4:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <ledStartupSequence+0x198>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	71da      	strb	r2, [r3, #7]

	receivedColor.colors_indiv.left_side_g = 0;
 8000aca:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <ledStartupSequence+0x198>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	715a      	strb	r2, [r3, #5]
	receivedColor.colors_indiv.left_side_r = 255;
 8000ad0:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <ledStartupSequence+0x198>)
 8000ad2:	22ff      	movs	r2, #255	; 0xff
 8000ad4:	721a      	strb	r2, [r3, #8]

	receivedColor.colors_indiv.right_side_b = 0;
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <ledStartupSequence+0x198>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	735a      	strb	r2, [r3, #13]
	receivedColor.colors_indiv.right_side_g = 255;
 8000adc:	4b32      	ldr	r3, [pc, #200]	; (8000ba8 <ledStartupSequence+0x198>)
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	739a      	strb	r2, [r3, #14]

	receivedColor.colors_indiv.right_top_b = 255;
 8000ae2:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <ledStartupSequence+0x198>)
 8000ae4:	22ff      	movs	r2, #255	; 0xff
 8000ae6:	72da      	strb	r2, [r3, #11]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000ae8:	4b30      	ldr	r3, [pc, #192]	; (8000bac <ledStartupSequence+0x19c>)
 8000aea:	6818      	ldr	r0, [r3, #0]
 8000aec:	2300      	movs	r3, #0
 8000aee:	2200      	movs	r2, #0
 8000af0:	492d      	ldr	r1, [pc, #180]	; (8000ba8 <ledStartupSequence+0x198>)
 8000af2:	f00d f9f3 	bl	800dedc <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000af6:	20c8      	movs	r0, #200	; 0xc8
 8000af8:	f00c ffe7 	bl	800daca <osDelay>

	receivedColor.colors_indiv.left_side_r = 0;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <ledStartupSequence+0x198>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	721a      	strb	r2, [r3, #8]

	receivedColor.colors_indiv.right_side_g = 0;
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	739a      	strb	r2, [r3, #14]
	receivedColor.colors_indiv.right_side_r = 255;
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b0a:	22ff      	movs	r2, #255	; 0xff
 8000b0c:	745a      	strb	r2, [r3, #17]

	receivedColor.colors_indiv.right_top_b = 0;
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	72da      	strb	r2, [r3, #11]
	receivedColor.colors_indiv.right_top_g = 255;
 8000b14:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b16:	22ff      	movs	r2, #255	; 0xff
 8000b18:	731a      	strb	r2, [r3, #12]

	receivedColor.colors_indiv.right_front_b = 255;
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b1c:	22ff      	movs	r2, #255	; 0xff
 8000b1e:	729a      	strb	r2, [r3, #10]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <ledStartupSequence+0x19c>)
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	2300      	movs	r3, #0
 8000b26:	2200      	movs	r2, #0
 8000b28:	491f      	ldr	r1, [pc, #124]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b2a:	f00d f9d7 	bl	800dedc <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000b2e:	20c8      	movs	r0, #200	; 0xc8
 8000b30:	f00c ffcb 	bl	800daca <osDelay>

	receivedColor.colors_indiv.right_side_r = 0;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	745a      	strb	r2, [r3, #17]

	receivedColor.colors_indiv.right_top_g = 0;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	731a      	strb	r2, [r3, #12]
	receivedColor.colors_indiv.right_top_r = 255;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b42:	22ff      	movs	r2, #255	; 0xff
 8000b44:	741a      	strb	r2, [r3, #16]

	receivedColor.colors_indiv.right_front_b = 0;
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	729a      	strb	r2, [r3, #10]
	receivedColor.colors_indiv.right_front_g = 255;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b4e:	22ff      	movs	r2, #255	; 0xff
 8000b50:	725a      	strb	r2, [r3, #9]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <ledStartupSequence+0x19c>)
 8000b54:	6818      	ldr	r0, [r3, #0]
 8000b56:	2300      	movs	r3, #0
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4913      	ldr	r1, [pc, #76]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b5c:	f00d f9be 	bl	800dedc <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000b60:	20c8      	movs	r0, #200	; 0xc8
 8000b62:	f00c ffb2 	bl	800daca <osDelay>

	receivedColor.colors_indiv.right_top_r = 0;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	741a      	strb	r2, [r3, #16]

	receivedColor.colors_indiv.right_front_g = 0;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	725a      	strb	r2, [r3, #9]
	receivedColor.colors_indiv.right_front_r = 255;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b74:	22ff      	movs	r2, #255	; 0xff
 8000b76:	73da      	strb	r2, [r3, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <ledStartupSequence+0x19c>)
 8000b7a:	6818      	ldr	r0, [r3, #0]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4909      	ldr	r1, [pc, #36]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b82:	f00d f9ab 	bl	800dedc <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000b86:	20c8      	movs	r0, #200	; 0xc8
 8000b88:	f00c ff9f 	bl	800daca <osDelay>

	receivedColor.colors_indiv.right_front_r = 0;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	73da      	strb	r2, [r3, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <ledStartupSequence+0x19c>)
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	2300      	movs	r3, #0
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4903      	ldr	r1, [pc, #12]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b9c:	f00d f99e 	bl	800dedc <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);

	ledDisconnectNotification();
 8000ba0:	f000 f806 	bl	8000bb0 <ledDisconnectNotification>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20003c68 	.word	0x20003c68
 8000bac:	2000020c 	.word	0x2000020c

08000bb0 <ledDisconnectNotification>:

void ledDisconnectNotification(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	resetColor(&receivedColor);
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <ledDisconnectNotification+0x3c>)
 8000bb6:	f000 f81d 	bl	8000bf4 <resetColor>

	receivedColor.colors_indiv.left_side_g = 0;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <ledDisconnectNotification+0x3c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	715a      	strb	r2, [r3, #5]
	receivedColor.colors_indiv.right_side_g = 0;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <ledDisconnectNotification+0x3c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	739a      	strb	r2, [r3, #14]
	receivedColor.colors_indiv.left_side_b = 50;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <ledDisconnectNotification+0x3c>)
 8000bc8:	2232      	movs	r2, #50	; 0x32
 8000bca:	711a      	strb	r2, [r3, #4]
	receivedColor.colors_indiv.right_side_b = 50;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <ledDisconnectNotification+0x3c>)
 8000bce:	2232      	movs	r2, #50	; 0x32
 8000bd0:	735a      	strb	r2, [r3, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <ledDisconnectNotification+0x40>)
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4904      	ldr	r1, [pc, #16]	; (8000bec <ledDisconnectNotification+0x3c>)
 8000bdc:	f00d f97e 	bl	800dedc <osMessageQueuePut>
	osDelay(10);
 8000be0:	200a      	movs	r0, #10
 8000be2:	f00c ff72 	bl	800daca <osDelay>
//	FrontLightsSet(&receivedColor);
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20003c68 	.word	0x20003c68
 8000bf0:	2000020c 	.word	0x2000020c

08000bf4 <resetColor>:
	receivedColor.colors_indiv.left_front_r = 255;
	receivedColor.colors_indiv.right_front_r = 255;
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
}

void resetColor(union ColorComplex * colorComplex){
 8000bf4:	b4b0      	push	{r4, r5, r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	memcpy(colorComplex,&EmptyColorComplex,sizeof(union ColorComplex));;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <resetColor+0x28>)
 8000c00:	461d      	mov	r5, r3
 8000c02:	4614      	mov	r4, r2
 8000c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c06:	6028      	str	r0, [r5, #0]
 8000c08:	6069      	str	r1, [r5, #4]
 8000c0a:	60aa      	str	r2, [r5, #8]
 8000c0c:	60eb      	str	r3, [r5, #12]
 8000c0e:	8823      	ldrh	r3, [r4, #0]
 8000c10:	822b      	strh	r3, [r5, #16]
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bcb0      	pop	{r4, r5, r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	08012534 	.word	0x08012534

08000c20 <LL_RCC_LSE_SetDriveCapability>:
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c30:	f023 0218 	bic.w	r2, r3, #24
 8000c34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c50:	f000 ff50 	bl	8001af4 <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 8000c54:	f7ff fc30 	bl	80004b8 <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c58:	f000 f822 	bl	8000ca0 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000c5c:	f000 f8a0 	bl	8000da0 <_Z24PeriphCommonClock_Configv>

	/* IPCC initialisation */
	MX_IPCC_Init();
 8000c60:	f7ff feae 	bl	80009c0 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c64:	f7ff fd10 	bl	8000688 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000c68:	f7ff faa4 	bl	80001b4 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000c6c:	f7ff fd96 	bl	800079c <MX_I2C1_Init>
	MX_I2C3_Init();
 8000c70:	f7ff fdd4 	bl	800081c <MX_I2C3_Init>
	MX_RF_Init();
 8000c74:	f000 f916 	bl	8000ea4 <MX_RF_Init>
	MX_RTC_Init();
 8000c78:	f000 f946 	bl	8000f08 <MX_RTC_Init>
	MX_SAI1_Init();
 8000c7c:	f000 f9b4 	bl	8000fe8 <MX_SAI1_Init>
	MX_SPI1_Init();
 8000c80:	f000 fa7c 	bl	800117c <MX_SPI1_Init>
	MX_SPI2_Init();
 8000c84:	f000 fab8 	bl	80011f8 <MX_SPI2_Init>
	MX_TIM16_Init();
 8000c88:	f000 fe38 	bl	80018fc <MX_TIM16_Init>
	MX_USB_Device_Init();
 8000c8c:	f010 f9ee 	bl	801106c <MX_USB_Device_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 8000c90:	f00c fd70 	bl	800d774 <osKernelInitialize>
	MX_FREERTOS_Init();
 8000c94:	f7ff fc9a 	bl	80005cc <_Z16MX_FREERTOS_Initv>
	/* Start scheduler */
	osKernelStart();
 8000c98:	f00c fd90 	bl	800d7bc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c9c:	e7fe      	b.n	8000c9c <main+0x50>
	...

08000ca0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
extern "C" void SystemClock_Config(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b09a      	sub	sp, #104	; 0x68
 8000ca4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	2248      	movs	r2, #72	; 0x48
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f011 fb84 	bl	80123bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]
 8000cc2:	615a      	str	r2, [r3, #20]
 8000cc4:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000cc6:	f004 fc11 	bl	80054ec <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff ffa8 	bl	8000c20 <LL_RCC_LSE_SetDriveCapability>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd0:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <SystemClock_Config+0xfc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cd8:	4a30      	ldr	r2, [pc, #192]	; (8000d9c <SystemClock_Config+0xfc>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <SystemClock_Config+0xfc>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000cec:	232f      	movs	r3, #47	; 0x2f
 8000cee:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI1 | RCC_OSCILLATORTYPE_HSE
			| RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d00:	2301      	movs	r3, #1
 8000d02:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d04:	2340      	movs	r3, #64	; 0x40
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d0c:	2360      	movs	r3, #96	; 0x60
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d10:	2305      	movs	r3, #5
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d14:	2302      	movs	r3, #2
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 32;
 8000d20:	2320      	movs	r3, #32
 8000d22:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d28:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d2a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d2e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d34:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f004 ff86 	bl	8005c4c <HAL_RCC_OscConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bf14      	ite	ne
 8000d46:	2301      	movne	r3, #1
 8000d48:	2300      	moveq	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0xb4>
		Error_Handler();
 8000d50:	f000 f874 	bl	8000e3c <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 8000d54:	236f      	movs	r3, #111	; 0x6f
 8000d56:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2103      	movs	r1, #3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f005 faf5 	bl	8006364 <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	bf14      	ite	ne
 8000d80:	2301      	movne	r3, #1
 8000d82:	2300      	moveq	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xee>
		Error_Handler();
 8000d8a:	f000 f857 	bl	8000e3c <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000d8e:	f006 fed0 	bl	8007b32 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d92:	bf00      	nop
 8000d94:	3768      	adds	r7, #104	; 0x68
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	58000400 	.word	0x58000400

08000da0 <_Z24PeriphCommonClock_Configv>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b094      	sub	sp, #80	; 0x50
 8000da4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000da6:	463b      	mov	r3, r7
 8000da8:	2250      	movs	r2, #80	; 0x50
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f011 fb05 	bl	80123bc <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS
 8000db2:	f44f 5355 	mov.w	r3, #13632	; 0x3540
 8000db6:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_RFWAKEUP | RCC_PERIPHCLK_SAI1 | RCC_PERIPHCLK_USB
			| RCC_PERIPHCLK_ADC;
	PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000db8:	2318      	movs	r3, #24
 8000dba:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc0:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dc6:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000dc8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000dcc:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_Z24PeriphCommonClock_Configv+0x74>)
 8000dd0:	617b      	str	r3, [r7, #20]
			| RCC_PLLSAI1_USBCLK | RCC_PLLSAI1_ADCCLK;
	PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000dd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000de0:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000de2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000de6:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000de8:	2300      	movs	r3, #0
 8000dea:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000dec:	2310      	movs	r3, #16
 8000dee:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000df0:	463b      	mov	r3, r7
 8000df2:	4618      	mov	r0, r3
 8000df4:	f006 f910 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	bf14      	ite	ne
 8000dfe:	2301      	movne	r3, #1
 8000e00:	2300      	moveq	r3, #0
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <_Z24PeriphCommonClock_Configv+0x6c>
		Error_Handler();
 8000e08:	f000 f818 	bl	8000e3c <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8000e0c:	bf00      	nop
 8000e0e:	3750      	adds	r7, #80	; 0x50
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	11010000 	.word	0x11010000

08000e18 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d101      	bne.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000e2a:	f000 fe83 	bl	8001b34 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40012c00 	.word	0x40012c00

08000e3c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>
	...

08000e48 <grabPacket>:
osThreadId_t senderTaskHandle;
static SensorPacket packets[MAX_PACKET_QUEUE_SIZE];

static SensorPacket *packetPtr[MAX_PACKET_QUEUE_SIZE];

SensorPacket* grabPacket(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	SensorPacket *packet;
	// grab available memory for packet creation
	if (osOK != osMessageQueueGet(packetAvail_QueueHandle, &packet, 0U, 0)) {
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <grabPacket+0x34>)
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	1d39      	adds	r1, r7, #4
 8000e54:	2300      	movs	r3, #0
 8000e56:	2200      	movs	r2, #0
 8000e58:	f00d f8a0 	bl	800df9c <osMessageQueueGet>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf14      	ite	ne
 8000e62:	2301      	movne	r3, #1
 8000e64:	2300      	moveq	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <grabPacket+0x28>
		return NULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	e000      	b.n	8000e72 <grabPacket+0x2a>
	}
	return packet;
 8000e70:	687b      	ldr	r3, [r7, #4]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000021c 	.word	0x2000021c

08000e80 <queueUpPacket>:

void queueUpPacket(SensorPacket *packet) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	// put into queue
	osMessageQueuePut(packet_QueueHandle, &packet, 0U, 0);
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <queueUpPacket+0x20>)
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	1d39      	adds	r1, r7, #4
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2200      	movs	r2, #0
 8000e92:	f00d f823 	bl	800dedc <osMessageQueuePut>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000220 	.word	0x20000220

08000ea4 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <LL_RCC_EnableRTC>:
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_APB1_GRP1_EnableClock>:
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_RTC_Init+0x4c>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <MX_RTC_Init+0x50>)
 8000f10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_RTC_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_RTC_Init+0x4c>)
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <MX_RTC_Init+0x4c>)
 8000f20:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000f24:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_RTC_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_RTC_Init+0x4c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_RTC_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_RTC_Init+0x4c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_RTC_Init+0x4c>)
 8000f40:	f007 f8bc 	bl	80080bc <HAL_RTC_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000f4a:	f7ff ff77 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20003c90 	.word	0x20003c90
 8000f58:	40002800 	.word	0x40002800

08000f5c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b096      	sub	sp, #88	; 0x58
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	2250      	movs	r2, #80	; 0x50
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f011 fa25 	bl	80123bc <memset>
  if(rtcHandle->Instance==RTC)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_RTC_MspInit+0x54>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d115      	bne.n	8000fa8 <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f80:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f006 f843 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f98:	f7ff ff50 	bl	8000e3c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f9c:	f7ff ff89 	bl	8000eb2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000fa0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fa4:	f7ff ff96 	bl	8000ed4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3758      	adds	r7, #88	; 0x58
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40002800 	.word	0x40002800

08000fb4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MX_SAI1_Init+0x68>)
 8000fee:	4a19      	ldr	r2, [pc, #100]	; (8001054 <MX_SAI1_Init+0x6c>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_SAI1_Init+0x68>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_SAI1_Init+0x68>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_SAI1_Init+0x68>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_SAI1_Init+0x68>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_SAI1_Init+0x68>)
 800100c:	2200      	movs	r2, #0
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_SAI1_Init+0x68>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_SAI1_Init+0x68>)
 8001018:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <MX_SAI1_Init+0x70>)
 800101a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_SAI1_Init+0x68>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_SAI1_Init+0x68>)
 8001024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_SAI1_Init+0x68>)
 800102c:	2200      	movs	r2, #0
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <MX_SAI1_Init+0x68>)
 8001032:	2200      	movs	r2, #0
 8001034:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001036:	2302      	movs	r3, #2
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_SAI1_Init+0x68>)
 800103e:	f007 f92b 	bl	8008298 <HAL_SAI_InitProtocol>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_SAI1_Init+0x64>
  {
    Error_Handler();
 8001048:	f7ff fef8 	bl	8000e3c <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20003cb4 	.word	0x20003cb4
 8001054:	40015404 	.word	0x40015404
 8001058:	0002ee00 	.word	0x0002ee00

0800105c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <HAL_SAI_MspInit+0x78>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12d      	bne.n	80010ca <HAL_SAI_MspInit+0x6e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_SAI_MspInit+0x7c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d103      	bne.n	800107e <HAL_SAI_MspInit+0x22>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001076:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800107a:	f7ff ff9b 	bl	8000fb4 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_SAI_MspInit+0x7c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_SAI_MspInit+0x7c>)
 8001086:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB13     ------> SAI1_SCK_A
    PB12     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001088:	2308      	movs	r3, #8
 800108a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001098:	230d      	movs	r3, #13
 800109a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	480e      	ldr	r0, [pc, #56]	; (80010dc <HAL_SAI_MspInit+0x80>)
 80010a4:	f001 fcfc 	bl	8002aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80010a8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80010ba:	230d      	movs	r3, #13
 80010bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	4619      	mov	r1, r3
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <HAL_SAI_MspInit+0x84>)
 80010c6:	f001 fceb 	bl	8002aa0 <HAL_GPIO_Init>

    }
}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40015404 	.word	0x40015404
 80010d8:	20000224 	.word	0x20000224
 80010dc:	48000800 	.word	0x48000800
 80010e0:	48000400 	.word	0x48000400

080010e4 <LL_AHB2_GRP1_EnableClock>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001100:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4013      	ands	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001108:	68fb      	ldr	r3, [r7, #12]
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_APB1_GRP1_EnableClock>:
{
 8001116:	b480      	push	{r7}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800111e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001122:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4313      	orrs	r3, r2
 800112c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800112e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001132:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4013      	ands	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <LL_APB2_GRP1_EnableClock>:
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001154:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4313      	orrs	r3, r2
 800115e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001164:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4013      	ands	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800116c:	68fb      	ldr	r3, [r7, #12]
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_SPI1_Init+0x74>)
 8001182:	4a1c      	ldr	r2, [pc, #112]	; (80011f4 <MX_SPI1_Init+0x78>)
 8001184:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_SPI1_Init+0x74>)
 8001188:	f44f 7282 	mov.w	r2, #260	; 0x104
 800118c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_SPI1_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_SPI1_Init+0x74>)
 8001196:	f44f 7240 	mov.w	r2, #768	; 0x300
 800119a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_SPI1_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_SPI1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_SPI1_Init+0x74>)
 80011aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_SPI1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_SPI1_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_SPI1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_SPI1_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_SPI1_Init+0x74>)
 80011ca:	2207      	movs	r2, #7
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_SPI1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_SPI1_Init+0x74>)
 80011d6:	2208      	movs	r2, #8
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_SPI1_Init+0x74>)
 80011dc:	f007 fb8e 	bl	80088fc <HAL_SPI_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011e6:	f7ff fe29 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20003db0 	.word	0x20003db0
 80011f4:	40013000 	.word	0x40013000

080011f8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_SPI2_Init+0x74>)
 80011fe:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <MX_SPI2_Init+0x78>)
 8001200:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_SPI2_Init+0x74>)
 8001204:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001208:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_SPI2_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_SPI2_Init+0x74>)
 8001212:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001216:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_SPI2_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_SPI2_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_SPI2_Init+0x74>)
 8001226:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800122a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_SPI2_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_SPI2_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_SPI2_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_SPI2_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_SPI2_Init+0x74>)
 8001246:	2207      	movs	r2, #7
 8001248:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_SPI2_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_SPI2_Init+0x74>)
 8001252:	2208      	movs	r2, #8
 8001254:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_SPI2_Init+0x74>)
 8001258:	f007 fb50 	bl	80088fc <HAL_SPI_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001262:	f7ff fdeb 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20003d4c 	.word	0x20003d4c
 8001270:	40003800 	.word	0x40003800

08001274 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a31      	ldr	r2, [pc, #196]	; (8001358 <HAL_SPI_MspInit+0xe4>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d12c      	bne.n	80012f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001296:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800129a:	f7ff ff55 	bl	8001148 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	2002      	movs	r0, #2
 80012a0:	f7ff ff20 	bl	80010e4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff ff1d 	bl	80010e4 <LL_AHB2_GRP1_EnableClock>
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 80012aa:	2338      	movs	r3, #56	; 0x38
 80012ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ba:	2305      	movs	r3, #5
 80012bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	4825      	ldr	r0, [pc, #148]	; (800135c <HAL_SPI_MspInit+0xe8>)
 80012c6:	f001 fbeb 	bl	8002aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012dc:	2305      	movs	r3, #5
 80012de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f001 fbd9 	bl	8002aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012ee:	e02f      	b.n	8001350 <HAL_SPI_MspInit+0xdc>
  else if(spiHandle->Instance==SPI2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <HAL_SPI_MspInit+0xec>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d12a      	bne.n	8001350 <HAL_SPI_MspInit+0xdc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012fe:	f7ff ff0a 	bl	8001116 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	2008      	movs	r0, #8
 8001304:	f7ff feee 	bl	80010e4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	2002      	movs	r0, #2
 800130a:	f7ff feeb 	bl	80010e4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800130e:	2303      	movs	r3, #3
 8001310:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800131e:	2305      	movs	r3, #5
 8001320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4619      	mov	r1, r3
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <HAL_SPI_MspInit+0xf0>)
 800132a:	f001 fbb9 	bl	8002aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800132e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001332:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001340:	2305      	movs	r3, #5
 8001342:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4619      	mov	r1, r3
 800134a:	4804      	ldr	r0, [pc, #16]	; (800135c <HAL_SPI_MspInit+0xe8>)
 800134c:	f001 fba8 	bl	8002aa0 <HAL_GPIO_Init>
}
 8001350:	bf00      	nop
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40013000 	.word	0x40013000
 800135c:	48000400 	.word	0x48000400
 8001360:	40003800 	.word	0x40003800
 8001364:	48000c00 	.word	0x48000c00

08001368 <LL_AHB3_GRP1_EnableClock>:
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4313      	orrs	r3, r2
 800137e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001384:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800138c:	68fb      	ldr	r3, [r7, #12]
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800139e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80013a2:	f7ff ffe1 	bl	8001368 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	210f      	movs	r1, #15
 80013aa:	f06f 0001 	mvn.w	r0, #1
 80013ae:	f001 fb4f 	bl	8002a50 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2105      	movs	r1, #5
 80013b6:	202e      	movs	r0, #46	; 0x2e
 80013b8:	f001 fb4a 	bl	8002a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80013bc:	202e      	movs	r0, #46	; 0x2e
 80013be:	f001 fb61 	bl	8002a84 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <LL_APB2_GRP1_EnableClock>:
{
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80013ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4313      	orrs	r3, r2
 80013dc:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4013      	ands	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	2019      	movs	r0, #25
 800140e:	f001 fb1f 	bl	8002a50 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001412:	2019      	movs	r0, #25
 8001414:	f001 fb36 	bl	8002a84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001418:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800141c:	f7ff ffd3 	bl	80013c6 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001420:	f107 0208 	add.w	r2, r7, #8
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f005 f970 	bl	8006710 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001430:	f005 f958 	bl	80066e4 <HAL_RCC_GetPCLK2Freq>
 8001434:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001438:	4a12      	ldr	r2, [pc, #72]	; (8001484 <HAL_InitTick+0x8c>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	0c9b      	lsrs	r3, r3, #18
 8001440:	3b01      	subs	r3, #1
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_InitTick+0x90>)
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_InitTick+0x94>)
 8001448:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_InitTick+0x90>)
 800144c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001450:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001452:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <HAL_InitTick+0x90>)
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_InitTick+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_InitTick+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <HAL_InitTick+0x90>)
 8001466:	f007 faec 	bl	8008a42 <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d104      	bne.n	800147a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <HAL_InitTick+0x90>)
 8001472:	f007 fb3d 	bl	8008af0 <HAL_TIM_Base_Start_IT>
 8001476:	4603      	mov	r3, r0
 8001478:	e000      	b.n	800147c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3730      	adds	r7, #48	; 0x30
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	431bde83 	.word	0x431bde83
 8001488:	20003e14 	.word	0x20003e14
 800148c:	40012c00 	.word	0x40012c00

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <USB_LP_IRQHandler+0x10>)
 80014c2:	f002 fbe6 	bl	8003c92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200053c0 	.word	0x200053c0

080014d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80014d6:	f007 fbba 	bl	8008c4e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80014dc:	f007 fbb7 	bl	8008c4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20003e14 	.word	0x20003e14
 80014e8:	20003e60 	.word	0x20003e60

080014ec <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80014f0:	f001 fc5e 	bl	8002db0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <SystemInit+0x98>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001502:	4a23      	ldr	r2, [pc, #140]	; (8001590 <SystemInit+0x98>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800150c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800151c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001520:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001524:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <SystemInit+0x9c>)
 8001532:	4013      	ands	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001542:	f023 0305 	bic.w	r3, r3, #5
 8001546:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800154a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <SystemInit+0xa0>)
 8001564:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <SystemInit+0xa0>)
 800156c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800156e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800157e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00
 8001594:	faf6fefb 	.word	0xfaf6fefb
 8001598:	22041000 	.word	0x22041000

0800159c <_ZN8CALIPILEC1Ev>:
#define cycTime_60ms  0x01
#define cycTime_120ms 0x02
#define cycTime_140ms 0x03


class CALIPILE
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	721a      	strb	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <Thermopile_Task>:
void grabThermopileSamples(thermopile_packet *data, CALIPILE *tp);

uint16_t thermIdx;
uint32_t thermID;

void Thermopile_Task(void *argument) {
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	b08d      	sub	sp, #52	; 0x34
 80015c4:	af08      	add	r7, sp, #32
 80015c6:	6078      	str	r0, [r7, #4]
	SensorPacket *packet = NULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
	uint32_t flags;

//	initThermopiles(tp_nose_tip,	THERMOPLE_NOSE_TIP,			&hi2c1,	THERMOPLE_NOSE_TIP_ID);
	initThermopiles(tp_nose_bridge,	THERMOPLE_NOSE_BRIDGE,		&hi2c1, THERMOPLE_NOSE_BRIDGE_ID);
 80015cc:	4e33      	ldr	r6, [pc, #204]	; (800169c <Thermopile_Task+0xdc>)
 80015ce:	2302      	movs	r3, #2
 80015d0:	9307      	str	r3, [sp, #28]
 80015d2:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <Thermopile_Task+0xe0>)
 80015d4:	9306      	str	r3, [sp, #24]
 80015d6:	230d      	movs	r3, #13
 80015d8:	9305      	str	r3, [sp, #20]
 80015da:	466d      	mov	r5, sp
 80015dc:	f106 0410 	add.w	r4, r6, #16
 80015e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	602b      	str	r3, [r5, #0]
 80015e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015ec:	f000 f866 	bl	80016bc <_Z15initThermopiles8CALIPILEhP19__I2C_HandleTypeDefh>
//	initThermopiles(tp_temple_front,THERMOPLE_TEMPLE_FRONT_ADDR,&hi2c3, THERMOPLE_TEMPLE_FRONT_ADDR_ID);
//	initThermopiles(tp_temple_mid,	THERMOPLE_TEMPLE_MID_ADDR,	&hi2c3, THERMOPLE_TEMPLE_MID_ADDR_ID);
//	initThermopiles(tp_temple_back,	THERMOPLE_TEMPLE_BACK_ADDR,	&hi2c3, THERMOPLE_TEMPLE_BACK_ADDR_ID);

	header.payloadLength = MAX_THERMOPILE_SAMPLES_PACKET
 80015f0:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <Thermopile_Task+0xe4>)
 80015f2:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 80015f6:	60da      	str	r2, [r3, #12]
			* sizeof(thermopile_packet);
	header.reserved[0] = THERMOPILE_SAMPLE_PERIOD_MS;
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <Thermopile_Task+0xe4>)
 80015fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015fe:	611a      	str	r2, [r3, #16]
	header.reserved[1] = THERMOPILE_CNT;
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <Thermopile_Task+0xe4>)
 8001602:	2202      	movs	r2, #2
 8001604:	615a      	str	r2, [r3, #20]

	thermIdx = 0;
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <Thermopile_Task+0xe8>)
 8001608:	2200      	movs	r2, #0
 800160a:	801a      	strh	r2, [r3, #0]
	thermID = 0;
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <Thermopile_Task+0xec>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]

	periodicThermopileTimer_id = osTimerNew(triggerThermopileSample,
 8001612:	2300      	movs	r3, #0
 8001614:	2200      	movs	r2, #0
 8001616:	2101      	movs	r1, #1
 8001618:	4825      	ldr	r0, [pc, #148]	; (80016b0 <Thermopile_Task+0xf0>)
 800161a:	f00c fa87 	bl	800db2c <osTimerNew>
 800161e:	4603      	mov	r3, r0
 8001620:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <Thermopile_Task+0xf4>)
 8001622:	6013      	str	r3, [r2, #0]
			osTimerPeriodic, NULL, NULL);
	osTimerStart(periodicThermopileTimer_id, THERMOPILE_SAMPLE_PERIOD_MS);
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <Thermopile_Task+0xf4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800162c:	4618      	mov	r0, r3
 800162e:	f00c faf9 	bl	800dc24 <osTimerStart>

	while (1) {

		flags = osThreadFlagsWait(GRAB_SAMPLE_BIT | TERMINATE_THREAD_BIT,
 8001632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001636:	2100      	movs	r1, #0
 8001638:	f44f 7040 	mov.w	r0, #768	; 0x300
 800163c:	f00c f9c4 	bl	800d9c8 <osThreadFlagsWait>
 8001640:	60b8      	str	r0, [r7, #8]
				osFlagsWaitAny, osWaitForever);

		if ((flags & GRAB_SAMPLE_BIT) == GRAB_SAMPLE_BIT) {
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d018      	beq.n	800167e <Thermopile_Task+0xbe>

			// sample nose
//			grabThermopileSamples(&thermopileData[thermIdx], &tp_nose_tip);
//			queueThermopilePkt(&thermopileData[thermIdx]);

			grabThermopileSamples(&thermopileData[thermIdx], &tp_nose_bridge);
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <Thermopile_Task+0xe8>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <Thermopile_Task+0xf8>)
 800165c:	4413      	add	r3, r2
 800165e:	490f      	ldr	r1, [pc, #60]	; (800169c <Thermopile_Task+0xdc>)
 8001660:	4618      	mov	r0, r3
 8001662:	f000 f89b 	bl	800179c <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
			queueThermopilePkt(&thermopileData[thermIdx]);
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <Thermopile_Task+0xe8>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <Thermopile_Task+0xf8>)
 8001676:	4413      	add	r3, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f849 	bl	8001710 <_Z18queueThermopilePktP18thermopile_packets>
//
//			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_back);
//			queueThermopilePkt(&thermopileData[thermIdx]);
		}

		if ((flags & TERMINATE_THREAD_BIT) == TERMINATE_THREAD_BIT) {
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0d4      	beq.n	8001632 <Thermopile_Task+0x72>
			osTimerDelete(periodicThermopileTimer_id);
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <Thermopile_Task+0xf4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f00c faf7 	bl	800dc80 <osTimerDelete>
			break;
 8001692:	bf00      	nop
		}
	}

}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800169c:	2000043c 	.word	0x2000043c
 80016a0:	20003bc8 	.word	0x20003bc8
 80016a4:	200003f0 	.word	0x200003f0
 80016a8:	200004cc 	.word	0x200004cc
 80016ac:	200004d0 	.word	0x200004d0
 80016b0:	08001811 	.word	0x08001811
 80016b4:	20000414 	.word	0x20000414
 80016b8:	20000228 	.word	0x20000228

080016bc <_Z15initThermopiles8CALIPILEhP19__I2C_HandleTypeDefh>:

void initThermopiles(CALIPILE tp, uint8_t address, I2C_HandleTypeDef* i2c_handle, uint8_t descriptor){
 80016bc:	b084      	sub	sp, #16
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	f107 0c10 	add.w	ip, r7, #16
 80016c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint16_t Tcounts = 0x83; // set threshold for over temperature interrupt, 0x83 == 67072 counts
 80016cc:	2383      	movs	r3, #131	; 0x83
 80016ce:	80fb      	strh	r3, [r7, #6]
	uint32_t flags = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	603b      	str	r3, [r7, #0]
	//	uint8_t intStatus;


	tp.setup((uint8_t) address, i2c_handle, descriptor);
 80016d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80016d8:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 80016dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016de:	f107 0010 	add.w	r0, r7, #16
 80016e2:	f00b fd4b 	bl	800d17c <_ZN8CALIPILE5setupEhP19__I2C_HandleTypeDefh>
	tp.wake();
 80016e6:	f107 0010 	add.w	r0, r7, #16
 80016ea:	f00b fd62 	bl	800d1b2 <_ZN8CALIPILE4wakeEv>
	tp.readEEPROM(); // Verify protocol number and checksum and get calibration constants
 80016ee:	f107 0010 	add.w	r0, r7, #16
 80016f2:	f00b fd6f 	bl	800d1d4 <_ZN8CALIPILE10readEEPROMEv>
	//  tp_outer.initMotion(tcLP1, tcLP2, LPsource, cycTime); // configure presence and motion interrupts
	tp.initTempThr(Tcounts);  // choose something ~5% above TPAMB
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f107 0010 	add.w	r0, r7, #16
 80016fe:	f00b fe67 	bl	800d3d0 <_ZN8CALIPILE11initTempThrEt>
	// read interrupt status register(s) to unlatch interrupt before entering main loop
//	intStatus  = tp.checkIntStatus(); //dont do if not using interrupts

}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800170c:	b004      	add	sp, #16
 800170e:	4770      	bx	lr

08001710 <_Z18queueThermopilePktP18thermopile_packets>:

void queueThermopilePkt(thermopile_packet *sample){
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	SensorPacket *packet = NULL;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
	thermIdx++;
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <_Z18queueThermopilePktP18thermopile_packets+0x80>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	b29a      	uxth	r2, r3
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <_Z18queueThermopilePktP18thermopile_packets+0x80>)
 8001726:	801a      	strh	r2, [r3, #0]

	if (thermIdx >= MAX_THERMOPILE_SAMPLES_PACKET) {
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <_Z18queueThermopilePktP18thermopile_packets+0x80>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	2b12      	cmp	r3, #18
 800172e:	d92b      	bls.n	8001788 <_Z18queueThermopilePktP18thermopile_packets+0x78>
		header.packetType = THERMOPILE;
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <_Z18queueThermopilePktP18thermopile_packets+0x84>)
 8001732:	2207      	movs	r2, #7
 8001734:	701a      	strb	r2, [r3, #0]
		header.packetID = thermID;
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <_Z18queueThermopilePktP18thermopile_packets+0x88>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29a      	uxth	r2, r3
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <_Z18queueThermopilePktP18thermopile_packets+0x84>)
 800173e:	805a      	strh	r2, [r3, #2]
		header.msFromStart = HAL_GetTick();
 8001740:	f000 fa0c 	bl	8001b5c <HAL_GetTick>
 8001744:	4603      	mov	r3, r0
 8001746:	4a13      	ldr	r2, [pc, #76]	; (8001794 <_Z18queueThermopilePktP18thermopile_packets+0x84>)
 8001748:	6053      	str	r3, [r2, #4]
		packet = grabPacket();
 800174a:	f7ff fb7d 	bl	8000e48 <grabPacket>
 800174e:	60f8      	str	r0, [r7, #12]
		if (packet != NULL) {
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d010      	beq.n	8001778 <_Z18queueThermopilePktP18thermopile_packets+0x68>
			memcpy(&(packet->header), &header, sizeof(PacketHeader));
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2224      	movs	r2, #36	; 0x24
 800175a:	490e      	ldr	r1, [pc, #56]	; (8001794 <_Z18queueThermopilePktP18thermopile_packets+0x84>)
 800175c:	4618      	mov	r0, r3
 800175e:	f010 fe1f 	bl	80123a0 <memcpy>
			memcpy(packet->payload, sample, header.payloadLength);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3324      	adds	r3, #36	; 0x24
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <_Z18queueThermopilePktP18thermopile_packets+0x84>)
 8001768:	68d2      	ldr	r2, [r2, #12]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4618      	mov	r0, r3
 800176e:	f010 fe17 	bl	80123a0 <memcpy>
			queueUpPacket(packet);
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f7ff fb84 	bl	8000e80 <queueUpPacket>
		}
		thermID++;
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <_Z18queueThermopilePktP18thermopile_packets+0x88>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4a06      	ldr	r2, [pc, #24]	; (8001798 <_Z18queueThermopilePktP18thermopile_packets+0x88>)
 8001780:	6013      	str	r3, [r2, #0]
		thermIdx = 0;
 8001782:	4b03      	ldr	r3, [pc, #12]	; (8001790 <_Z18queueThermopilePktP18thermopile_packets+0x80>)
 8001784:	2200      	movs	r2, #0
 8001786:	801a      	strh	r2, [r3, #0]
	}
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200004cc 	.word	0x200004cc
 8001794:	200003f0 	.word	0x200003f0
 8001798:	200004d0 	.word	0x200004d0

0800179c <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>:

void grabThermopileSamples(thermopile_packet *data, CALIPILE *tp) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
	data->descriptor = tp->descriptor;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	701a      	strb	r2, [r3, #0]
	data->timestamp = HAL_GetTick();
 80017ae:	f000 f9d5 	bl	8001b5c <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	605a      	str	r2, [r3, #4]
	data->ambientRaw = tp->getTPAMB();
 80017b8:	6838      	ldr	r0, [r7, #0]
 80017ba:	f00b fe49 	bl	800d450 <_ZN8CALIPILE8getTPAMBEv>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	811a      	strh	r2, [r3, #8]
	data->objectRaw = tp->getTPOBJ();
 80017c6:	6838      	ldr	r0, [r7, #0]
 80017c8:	f00b fe62 	bl	800d490 <_ZN8CALIPILE8getTPOBJEv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60da      	str	r2, [r3, #12]
	data->ambientTemp = tp->getTamb(data->ambientRaw);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	891b      	ldrh	r3, [r3, #8]
 80017d6:	4619      	mov	r1, r3
 80017d8:	6838      	ldr	r0, [r7, #0]
 80017da:	f00b fe81 	bl	800d4e0 <_ZN8CALIPILE7getTambEt>
 80017de:	eef0 7a40 	vmov.f32	s15, s0
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	edc3 7a04 	vstr	s15, [r3, #16]
	data->objectTemp = tp->getTobj(data->objectRaw, data->ambientTemp);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80017f2:	eeb0 0a67 	vmov.f32	s0, s15
 80017f6:	4611      	mov	r1, r2
 80017f8:	6838      	ldr	r0, [r7, #0]
 80017fa:	f00b fea3 	bl	800d544 <_ZN8CALIPILE7getTobjEmf>
 80017fe:	eef0 7a40 	vmov.f32	s15, s0
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <triggerThermopileSample>:

static void triggerThermopileSample(void *argument) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(thermopileTaskHandle, GRAB_SAMPLE_BIT);
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <triggerThermopileSample+0x20>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001820:	4618      	mov	r0, r3
 8001822:	f00c f883 	bl	800d92c <osThreadFlagsSet>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000214 	.word	0x20000214

08001834 <_Z41__static_initialization_and_destruction_0ii>:
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d113      	bne.n	800186c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800184a:	4293      	cmp	r3, r2
 800184c:	d10e      	bne.n	800186c <_Z41__static_initialization_and_destruction_0ii+0x38>
CALIPILE tp_nose_tip;
 800184e:	4809      	ldr	r0, [pc, #36]	; (8001874 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001850:	f7ff fea4 	bl	800159c <_ZN8CALIPILEC1Ev>
CALIPILE tp_nose_bridge;
 8001854:	4808      	ldr	r0, [pc, #32]	; (8001878 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001856:	f7ff fea1 	bl	800159c <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_front;
 800185a:	4808      	ldr	r0, [pc, #32]	; (800187c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800185c:	f7ff fe9e 	bl	800159c <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_mid;
 8001860:	4807      	ldr	r0, [pc, #28]	; (8001880 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001862:	f7ff fe9b 	bl	800159c <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_back;
 8001866:	4807      	ldr	r0, [pc, #28]	; (8001884 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001868:	f7ff fe98 	bl	800159c <_ZN8CALIPILEC1Ev>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000418 	.word	0x20000418
 8001878:	2000043c 	.word	0x2000043c
 800187c:	20000460 	.word	0x20000460
 8001880:	20000484 	.word	0x20000484
 8001884:	200004a8 	.word	0x200004a8

08001888 <_GLOBAL__sub_I_periodicThermopileTimer_id>:
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
 800188c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff ffcf 	bl	8001834 <_Z41__static_initialization_and_destruction_0ii>
 8001896:	bd80      	pop	{r7, pc}

08001898 <LL_AHB2_GRP1_EnableClock>:
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018bc:	68fb      	ldr	r3, [r7, #12]
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_APB2_GRP1_EnableClock>:
{
 80018ca:	b480      	push	{r7}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80018d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4313      	orrs	r3, r2
 80018e0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4013      	ands	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b094      	sub	sp, #80	; 0x50
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001902:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]
 8001912:	615a      	str	r2, [r3, #20]
 8001914:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001916:	463b      	mov	r3, r7
 8001918:	2234      	movs	r2, #52	; 0x34
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f010 fd4d 	bl	80123bc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001922:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <MX_TIM16_Init+0xec>)
 8001924:	4a31      	ldr	r2, [pc, #196]	; (80019ec <MX_TIM16_Init+0xf0>)
 8001926:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <MX_TIM16_Init+0xec>)
 800192a:	2200      	movs	r2, #0
 800192c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <MX_TIM16_Init+0xec>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001934:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <MX_TIM16_Init+0xec>)
 8001936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193c:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <MX_TIM16_Init+0xec>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <MX_TIM16_Init+0xec>)
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <MX_TIM16_Init+0xec>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800194e:	4826      	ldr	r0, [pc, #152]	; (80019e8 <MX_TIM16_Init+0xec>)
 8001950:	f007 f877 	bl	8008a42 <HAL_TIM_Base_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800195a:	f7ff fa6f 	bl	8000e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800195e:	4822      	ldr	r0, [pc, #136]	; (80019e8 <MX_TIM16_Init+0xec>)
 8001960:	f007 f914 	bl	8008b8c <HAL_TIM_PWM_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800196a:	f7ff fa67 	bl	8000e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196e:	2360      	movs	r3, #96	; 0x60
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001976:	2300      	movs	r3, #0
 8001978:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800197a:	2300      	movs	r3, #0
 800197c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800198a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	4815      	ldr	r0, [pc, #84]	; (80019e8 <MX_TIM16_Init+0xec>)
 8001994:	f007 fa7a 	bl	8008e8c <HAL_TIM_PWM_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800199e:	f7ff fa4d 	bl	8000e3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	4619      	mov	r1, r3
 80019c8:	4807      	ldr	r0, [pc, #28]	; (80019e8 <MX_TIM16_Init+0xec>)
 80019ca:	f007 fe7d 	bl	80096c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80019d4:	f7ff fa32 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <MX_TIM16_Init+0xec>)
 80019da:	f000 f825 	bl	8001a28 <HAL_TIM_MspPostInit>

}
 80019de:	bf00      	nop
 80019e0:	3750      	adds	r7, #80	; 0x50
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20003e60 	.word	0x20003e60
 80019ec:	40014400 	.word	0x40014400

080019f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <HAL_TIM_Base_MspInit+0x34>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d10b      	bne.n	8001a1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a02:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a06:	f7ff ff60 	bl	80018ca <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	210f      	movs	r1, #15
 8001a0e:	2019      	movs	r0, #25
 8001a10:	f001 f81e 	bl	8002a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a14:	2019      	movs	r0, #25
 8001a16:	f001 f835 	bl	8002a84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40014400 	.word	0x40014400

08001a28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <HAL_TIM_MspPostInit+0x54>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d113      	bne.n	8001a72 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f7ff ff24 	bl	8001898 <LL_AHB2_GRP1_EnableClock>
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BLINK_PWM_Pin;
 8001a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001a62:	230e      	movs	r3, #14
 8001a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLINK_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <HAL_TIM_MspPostInit+0x58>)
 8001a6e:	f001 f817 	bl	8002aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40014400 	.word	0x40014400
 8001a80:	48000400 	.word	0x48000400

08001a84 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001a84:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a86:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a88:	3304      	adds	r3, #4

08001a8a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a8a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001a8e:	d3f9      	bcc.n	8001a84 <CopyDataInit>
  bx lr
 8001a90:	4770      	bx	lr

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001a92:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001a94:	3004      	adds	r0, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001a96:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>
  bx lr
 8001a9a:	4770      	bx	lr

08001a9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a9c:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001a9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aa0:	f7ff fd2a 	bl	80014f8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001aa4:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <LoopForever+0x8>)
 8001aa6:	490c      	ldr	r1, [pc, #48]	; (8001ad8 <LoopForever+0xc>)
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <LoopForever+0x10>)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f7ff ffed 	bl	8001a8a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001ab0:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <LoopForever+0x14>)
 8001ab2:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <LoopForever+0x18>)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f7ff ffee 	bl	8001a96 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001aba:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <LoopForever+0x1c>)
 8001abc:	490b      	ldr	r1, [pc, #44]	; (8001aec <LoopForever+0x20>)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f7ff ffe9 	bl	8001a96 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ac4:	f010 fc48 	bl	8012358 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001ac8:	f7ff f8c0 	bl	8000c4c <main>

08001acc <LoopForever>:

LoopForever:
  b LoopForever
 8001acc:	e7fe      	b.n	8001acc <LoopForever>
 8001ace:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001ad0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001ad4:	20000004 	.word	0x20000004
 8001ad8:	200001f0 	.word	0x200001f0
 8001adc:	080126d8 	.word	0x080126d8
  INIT_BSS _sbss, _ebss
 8001ae0:	200001f0 	.word	0x200001f0
 8001ae4:	200056b4 	.word	0x200056b4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001ae8:	20030000 	.word	0x20030000
 8001aec:	20030000 	.word	0x20030000

08001af0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC1_IRQHandler>
	...

08001af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_Init+0x3c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <HAL_Init+0x3c>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	f000 ff95 	bl	8002a3a <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b10:	200f      	movs	r0, #15
 8001b12:	f7ff fc71 	bl	80013f8 <HAL_InitTick>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	e001      	b.n	8001b26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b22:	f7ff fc3a 	bl	800139a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b26:	79fb      	ldrb	r3, [r7, #7]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	58004000 	.word	0x58004000

08001b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_IncTick+0x20>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_IncTick+0x24>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <HAL_IncTick+0x24>)
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	2000000c 	.word	0x2000000c
 8001b58:	20003eac 	.word	0x20003eac

08001b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_GetTick+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20003eac 	.word	0x20003eac

08001b74 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_GetTickPrio+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000008 	.word	0x20000008

08001b8c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_GetTickFreq+0x14>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	2000000c 	.word	0x2000000c

08001ba4 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3360      	adds	r3, #96	; 0x60
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <LL_ADC_SetOffset+0x44>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c44:	bf00      	nop
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	03fff000 	.word	0x03fff000

08001c54 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3360      	adds	r3, #96	; 0x60
 8001c62:	461a      	mov	r2, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3360      	adds	r3, #96	; 0x60
 8001c90:	461a      	mov	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001caa:	bf00      	nop
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b087      	sub	sp, #28
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3330      	adds	r3, #48	; 0x30
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	4413      	add	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	211f      	movs	r1, #31
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	401a      	ands	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	0e9b      	lsrs	r3, r3, #26
 8001cee:	f003 011f 	and.w	r1, r3, #31
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b087      	sub	sp, #28
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3314      	adds	r3, #20
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	0e5b      	lsrs	r3, r3, #25
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	4413      	add	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	0d1b      	lsrs	r3, r3, #20
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	2107      	movs	r1, #7
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	401a      	ands	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	0d1b      	lsrs	r3, r3, #20
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	431a      	orrs	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	401a      	ands	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0318 	and.w	r3, r3, #24
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d88:	40d9      	lsrs	r1, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	400b      	ands	r3, r1
 8001d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d92:	431a      	orrs	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	0007ffff 	.word	0x0007ffff

08001dac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001dbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6093      	str	r3, [r2, #8]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001de4:	d101      	bne.n	8001dea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e34:	d101      	bne.n	8001e3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <LL_ADC_IsEnabled+0x18>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <LL_ADC_IsEnabled+0x1a>
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d101      	bne.n	8001e86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d101      	bne.n	8001eac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e12e      	b.n	8002138 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7fe f9c7 	bl	800027c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff65 	bl	8001dd0 <LL_ADC_IsDeepPowerDownEnabled>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d004      	beq.n	8001f16 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff4b 	bl	8001dac <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff80 	bl	8001e20 <LL_ADC_IsInternalRegulatorEnabled>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d115      	bne.n	8001f52 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff64 	bl	8001df8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f30:	4b83      	ldr	r3, [pc, #524]	; (8002140 <HAL_ADC_Init+0x284>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	099b      	lsrs	r3, r3, #6
 8001f36:	4a83      	ldr	r2, [pc, #524]	; (8002144 <HAL_ADC_Init+0x288>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	3301      	adds	r3, #1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f44:	e002      	b.n	8001f4c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f9      	bne.n	8001f46 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff62 	bl	8001e20 <LL_ADC_IsInternalRegulatorEnabled>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10d      	bne.n	8001f7e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f66:	f043 0210 	orr.w	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff73 	bl	8001e6e <LL_ADC_REG_IsConversionOngoing>
 8001f88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 80c7 	bne.w	8002126 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 80c3 	bne.w	8002126 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fa8:	f043 0202 	orr.w	r2, r3, #2
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff47 	bl	8001e48 <LL_ADC_IsEnabled>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10b      	bne.n	8001fd8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fc0:	4861      	ldr	r0, [pc, #388]	; (8002148 <HAL_ADC_Init+0x28c>)
 8001fc2:	f7ff ff41 	bl	8001e48 <LL_ADC_IsEnabled>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	485e      	ldr	r0, [pc, #376]	; (800214c <HAL_ADC_Init+0x290>)
 8001fd4:	f7ff fde6 	bl	8001ba4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7e5b      	ldrb	r3, [r3, #25]
 8001fdc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fe8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001ff8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d106      	bne.n	8002018 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	3b01      	subs	r3, #1
 8002010:	045b      	lsls	r3, r3, #17
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	4b45      	ldr	r3, [pc, #276]	; (8002150 <HAL_ADC_Init+0x294>)
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	69b9      	ldr	r1, [r7, #24]
 8002044:	430b      	orrs	r3, r1
 8002046:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff0e 	bl	8001e6e <LL_ADC_REG_IsConversionOngoing>
 8002052:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff1b 	bl	8001e94 <LL_ADC_INJ_IsConversionOngoing>
 800205e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d13d      	bne.n	80020e2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d13a      	bne.n	80020e2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002070:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002078:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002088:	f023 0302 	bic.w	r3, r3, #2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	69b9      	ldr	r1, [r7, #24]
 8002092:	430b      	orrs	r3, r1
 8002094:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800209c:	2b01      	cmp	r3, #1
 800209e:	d118      	bne.n	80020d2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020aa:	f023 0304 	bic.w	r3, r3, #4
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020b6:	4311      	orrs	r1, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020bc:	4311      	orrs	r1, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020c2:	430a      	orrs	r2, r1
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	611a      	str	r2, [r3, #16]
 80020d0:	e007      	b.n	80020e2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d10c      	bne.n	8002104 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f023 010f 	bic.w	r1, r3, #15
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	1e5a      	subs	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
 8002102:	e007      	b.n	8002114 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 020f 	bic.w	r2, r2, #15
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	f023 0303 	bic.w	r3, r3, #3
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
 8002124:	e007      	b.n	8002136 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212a:	f043 0210 	orr.w	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002136:	7ffb      	ldrb	r3, [r7, #31]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000004 	.word	0x20000004
 8002144:	053e2d63 	.word	0x053e2d63
 8002148:	50040000 	.word	0x50040000
 800214c:	50040300 	.word	0x50040300
 8002150:	fff0c007 	.word	0xfff0c007

08002154 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b0b6      	sub	sp, #216	; 0xd8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x22>
 8002172:	2302      	movs	r3, #2
 8002174:	e39f      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x762>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fe73 	bl	8001e6e <LL_ADC_REG_IsConversionOngoing>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 8384 	bne.w	8002898 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	f7ff fd8a 	bl	8001cb6 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fe61 	bl	8001e6e <LL_ADC_REG_IsConversionOngoing>
 80021ac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fe6d 	bl	8001e94 <LL_ADC_INJ_IsConversionOngoing>
 80021ba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 81a6 	bne.w	8002514 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f040 81a1 	bne.w	8002514 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6819      	ldr	r1, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	461a      	mov	r2, r3
 80021e0:	f7ff fd95 	bl	8001d0e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	08db      	lsrs	r3, r3, #3
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b04      	cmp	r3, #4
 8002204:	d00a      	beq.n	800221c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6919      	ldr	r1, [r3, #16]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002216:	f7ff fcf9 	bl	8001c0c <LL_ADC_SetOffset>
 800221a:	e17b      	b.n	8002514 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fd16 	bl	8001c54 <LL_ADC_GetOffsetChannel>
 8002228:	4603      	mov	r3, r0
 800222a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10a      	bne.n	8002248 <HAL_ADC_ConfigChannel+0xf4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fd0b 	bl	8001c54 <LL_ADC_GetOffsetChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	0e9b      	lsrs	r3, r3, #26
 8002242:	f003 021f 	and.w	r2, r3, #31
 8002246:	e01e      	b.n	8002286 <HAL_ADC_ConfigChannel+0x132>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fd00 	bl	8001c54 <LL_ADC_GetOffsetChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800226a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800226e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002276:	2320      	movs	r3, #32
 8002278:	e004      	b.n	8002284 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800227a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228e:	2b00      	cmp	r3, #0
 8002290:	d105      	bne.n	800229e <HAL_ADC_ConfigChannel+0x14a>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0e9b      	lsrs	r3, r3, #26
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	e018      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x17c>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80022c2:	2320      	movs	r3, #32
 80022c4:	e004      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80022c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d106      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2200      	movs	r2, #0
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fccf 	bl	8001c80 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2101      	movs	r1, #1
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fcb3 	bl	8001c54 <LL_ADC_GetOffsetChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10a      	bne.n	800230e <HAL_ADC_ConfigChannel+0x1ba>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fca8 	bl	8001c54 <LL_ADC_GetOffsetChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	0e9b      	lsrs	r3, r3, #26
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	e01e      	b.n	800234c <HAL_ADC_ConfigChannel+0x1f8>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2101      	movs	r1, #1
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fc9d 	bl	8001c54 <LL_ADC_GetOffsetChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800232c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e004      	b.n	800234a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002340:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002354:	2b00      	cmp	r3, #0
 8002356:	d105      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x210>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0e9b      	lsrs	r3, r3, #26
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	e018      	b.n	8002396 <HAL_ADC_ConfigChannel+0x242>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002378:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800237c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002388:	2320      	movs	r3, #32
 800238a:	e004      	b.n	8002396 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800238c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	429a      	cmp	r2, r3
 8002398:	d106      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2200      	movs	r2, #0
 80023a0:	2101      	movs	r1, #1
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fc6c 	bl	8001c80 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2102      	movs	r1, #2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fc50 	bl	8001c54 <LL_ADC_GetOffsetChannel>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x280>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2102      	movs	r1, #2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fc45 	bl	8001c54 <LL_ADC_GetOffsetChannel>
 80023ca:	4603      	mov	r3, r0
 80023cc:	0e9b      	lsrs	r3, r3, #26
 80023ce:	f003 021f 	and.w	r2, r3, #31
 80023d2:	e01e      	b.n	8002412 <HAL_ADC_ConfigChannel+0x2be>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2102      	movs	r1, #2
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fc3a 	bl	8001c54 <LL_ADC_GetOffsetChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80023fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002402:	2320      	movs	r3, #32
 8002404:	e004      	b.n	8002410 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002406:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241a:	2b00      	cmp	r3, #0
 800241c:	d105      	bne.n	800242a <HAL_ADC_ConfigChannel+0x2d6>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0e9b      	lsrs	r3, r3, #26
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	e016      	b.n	8002458 <HAL_ADC_ConfigChannel+0x304>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800243c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800243e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002442:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e004      	b.n	8002458 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800244e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	429a      	cmp	r2, r3
 800245a:	d106      	bne.n	800246a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2200      	movs	r2, #0
 8002462:	2102      	movs	r1, #2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fc0b 	bl	8001c80 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2103      	movs	r1, #3
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fbef 	bl	8001c54 <LL_ADC_GetOffsetChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x342>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2103      	movs	r1, #3
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fbe4 	bl	8001c54 <LL_ADC_GetOffsetChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	0e9b      	lsrs	r3, r3, #26
 8002490:	f003 021f 	and.w	r2, r3, #31
 8002494:	e017      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x372>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2103      	movs	r1, #3
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fbd9 	bl	8001c54 <LL_ADC_GetOffsetChannel>
 80024a2:	4603      	mov	r3, r0
 80024a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024b0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e003      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80024bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d105      	bne.n	80024de <HAL_ADC_ConfigChannel+0x38a>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	0e9b      	lsrs	r3, r3, #26
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	e011      	b.n	8002502 <HAL_ADC_ConfigChannel+0x3ae>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e003      	b.n	8002502 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80024fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	429a      	cmp	r2, r3
 8002504:	d106      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2200      	movs	r2, #0
 800250c:	2103      	movs	r1, #3
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fbb6 	bl	8001c80 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fc95 	bl	8001e48 <LL_ADC_IsEnabled>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	f040 81c2 	bne.w	80028aa <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	461a      	mov	r2, r3
 8002534:	f7ff fc16 	bl	8001d64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a8e      	ldr	r2, [pc, #568]	; (8002778 <HAL_ADC_ConfigChannel+0x624>)
 800253e:	4293      	cmp	r3, r2
 8002540:	f040 8130 	bne.w	80027a4 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10b      	bne.n	800256c <HAL_ADC_ConfigChannel+0x418>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	0e9b      	lsrs	r3, r3, #26
 800255a:	3301      	adds	r3, #1
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	2b09      	cmp	r3, #9
 8002562:	bf94      	ite	ls
 8002564:	2301      	movls	r3, #1
 8002566:	2300      	movhi	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	e019      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x44c>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800257a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800257c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800257e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002584:	2320      	movs	r3, #32
 8002586:	e003      	b.n	8002590 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	2b09      	cmp	r3, #9
 8002598:	bf94      	ite	ls
 800259a:	2301      	movls	r3, #1
 800259c:	2300      	movhi	r3, #0
 800259e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d079      	beq.n	8002698 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d107      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x46c>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	3301      	adds	r3, #1
 80025b8:	069b      	lsls	r3, r3, #26
 80025ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025be:	e015      	b.n	80025ec <HAL_ADC_ConfigChannel+0x498>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e003      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80025dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	3301      	adds	r3, #1
 80025e6:	069b      	lsls	r3, r3, #26
 80025e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_ADC_ConfigChannel+0x4b8>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	3301      	adds	r3, #1
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	e017      	b.n	800263c <HAL_ADC_ConfigChannel+0x4e8>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800261a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800261c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800261e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002624:	2320      	movs	r3, #32
 8002626:	e003      	b.n	8002630 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	3301      	adds	r3, #1
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	ea42 0103 	orr.w	r1, r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x50e>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0e9b      	lsrs	r3, r3, #26
 8002652:	3301      	adds	r3, #1
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	051b      	lsls	r3, r3, #20
 8002660:	e018      	b.n	8002694 <HAL_ADC_ConfigChannel+0x540>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800267a:	2320      	movs	r3, #32
 800267c:	e003      	b.n	8002686 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800267e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	3301      	adds	r3, #1
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002694:	430b      	orrs	r3, r1
 8002696:	e080      	b.n	800279a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x560>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0e9b      	lsrs	r3, r3, #26
 80026aa:	3301      	adds	r3, #1
 80026ac:	069b      	lsls	r3, r3, #26
 80026ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026b2:	e015      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x58c>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80026cc:	2320      	movs	r3, #32
 80026ce:	e003      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	069b      	lsls	r3, r3, #26
 80026dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x5ac>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	3301      	adds	r3, #1
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2101      	movs	r1, #1
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	e017      	b.n	8002730 <HAL_ADC_ConfigChannel+0x5dc>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	61fb      	str	r3, [r7, #28]
  return result;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002718:	2320      	movs	r3, #32
 800271a:	e003      	b.n	8002724 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	ea42 0103 	orr.w	r1, r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10d      	bne.n	800275c <HAL_ADC_ConfigChannel+0x608>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	0e9b      	lsrs	r3, r3, #26
 8002746:	3301      	adds	r3, #1
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	3b1e      	subs	r3, #30
 8002754:	051b      	lsls	r3, r3, #20
 8002756:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800275a:	e01d      	b.n	8002798 <HAL_ADC_ConfigChannel+0x644>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	613b      	str	r3, [r7, #16]
  return result;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d103      	bne.n	800277c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002774:	2320      	movs	r3, #32
 8002776:	e005      	b.n	8002784 <HAL_ADC_ConfigChannel+0x630>
 8002778:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3301      	adds	r3, #1
 8002786:	f003 021f 	and.w	r2, r3, #31
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	3b1e      	subs	r3, #30
 8002792:	051b      	lsls	r3, r3, #20
 8002794:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002798:	430b      	orrs	r3, r1
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	6892      	ldr	r2, [r2, #8]
 800279e:	4619      	mov	r1, r3
 80027a0:	f7ff fab5 	bl	8001d0e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b45      	ldr	r3, [pc, #276]	; (80028c0 <HAL_ADC_ConfigChannel+0x76c>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d07c      	beq.n	80028aa <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027b0:	4844      	ldr	r0, [pc, #272]	; (80028c4 <HAL_ADC_ConfigChannel+0x770>)
 80027b2:	f7ff fa1d 	bl	8001bf0 <LL_ADC_GetCommonPathInternalCh>
 80027b6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027ba:	4843      	ldr	r0, [pc, #268]	; (80028c8 <HAL_ADC_ConfigChannel+0x774>)
 80027bc:	f7ff fb44 	bl	8001e48 <LL_ADC_IsEnabled>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d15e      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a40      	ldr	r2, [pc, #256]	; (80028cc <HAL_ADC_ConfigChannel+0x778>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d127      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x6cc>
 80027d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d121      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a39      	ldr	r2, [pc, #228]	; (80028c8 <HAL_ADC_ConfigChannel+0x774>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d161      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027ee:	4619      	mov	r1, r3
 80027f0:	4834      	ldr	r0, [pc, #208]	; (80028c4 <HAL_ADC_ConfigChannel+0x770>)
 80027f2:	f7ff f9ea 	bl	8001bca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f6:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <HAL_ADC_ConfigChannel+0x77c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	099b      	lsrs	r3, r3, #6
 80027fc:	4a35      	ldr	r2, [pc, #212]	; (80028d4 <HAL_ADC_ConfigChannel+0x780>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	099b      	lsrs	r3, r3, #6
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002810:	e002      	b.n	8002818 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3b01      	subs	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f9      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800281e:	e044      	b.n	80028aa <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a2c      	ldr	r2, [pc, #176]	; (80028d8 <HAL_ADC_ConfigChannel+0x784>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d113      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x6fe>
 800282a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800282e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <HAL_ADC_ConfigChannel+0x774>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d134      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002840:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002848:	4619      	mov	r1, r3
 800284a:	481e      	ldr	r0, [pc, #120]	; (80028c4 <HAL_ADC_ConfigChannel+0x770>)
 800284c:	f7ff f9bd 	bl	8001bca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002850:	e02b      	b.n	80028aa <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a21      	ldr	r2, [pc, #132]	; (80028dc <HAL_ADC_ConfigChannel+0x788>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d126      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x756>
 800285c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d120      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a16      	ldr	r2, [pc, #88]	; (80028c8 <HAL_ADC_ConfigChannel+0x774>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d11b      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002872:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002876:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800287a:	4619      	mov	r1, r3
 800287c:	4811      	ldr	r0, [pc, #68]	; (80028c4 <HAL_ADC_ConfigChannel+0x770>)
 800287e:	f7ff f9a4 	bl	8001bca <LL_ADC_SetCommonPathInternalCh>
 8002882:	e012      	b.n	80028aa <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	f043 0220 	orr.w	r2, r3, #32
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002896:	e008      	b.n	80028aa <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80028b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	37d8      	adds	r7, #216	; 0xd8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	80080000 	.word	0x80080000
 80028c4:	50040300 	.word	0x50040300
 80028c8:	50040000 	.word	0x50040000
 80028cc:	c7520000 	.word	0xc7520000
 80028d0:	20000004 	.word	0x20000004
 80028d4:	053e2d63 	.word	0x053e2d63
 80028d8:	cb840000 	.word	0xcb840000
 80028dc:	80000001 	.word	0x80000001

080028e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028fc:	4013      	ands	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800290c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002912:	4a04      	ldr	r2, [pc, #16]	; (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	60d3      	str	r3, [r2, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <__NVIC_GetPriorityGrouping+0x18>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	f003 0307 	and.w	r3, r3, #7
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	2b00      	cmp	r3, #0
 8002954:	db0b      	blt.n	800296e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	f003 021f 	and.w	r2, r3, #31
 800295c:	4907      	ldr	r1, [pc, #28]	; (800297c <__NVIC_EnableIRQ+0x38>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	2001      	movs	r0, #1
 8002966:	fa00 f202 	lsl.w	r2, r0, r2
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000e100 	.word	0xe000e100

08002980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db0a      	blt.n	80029aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	490c      	ldr	r1, [pc, #48]	; (80029cc <__NVIC_SetPriority+0x4c>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	440b      	add	r3, r1
 80029a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a8:	e00a      	b.n	80029c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4908      	ldr	r1, [pc, #32]	; (80029d0 <__NVIC_SetPriority+0x50>)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	440b      	add	r3, r1
 80029be:	761a      	strb	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	; 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f1c3 0307 	rsb	r3, r3, #7
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf28      	it	cs
 80029f2:	2304      	movcs	r3, #4
 80029f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d902      	bls.n	8002a04 <NVIC_EncodePriority+0x30>
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3b03      	subs	r3, #3
 8002a02:	e000      	b.n	8002a06 <NVIC_EncodePriority+0x32>
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43d9      	mvns	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	4313      	orrs	r3, r2
         );
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ff4c 	bl	80028e0 <__NVIC_SetPriorityGrouping>
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a5e:	f7ff ff63 	bl	8002928 <__NVIC_GetPriorityGrouping>
 8002a62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	6978      	ldr	r0, [r7, #20]
 8002a6a:	f7ff ffb3 	bl	80029d4 <NVIC_EncodePriority>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff82 	bl	8002980 <__NVIC_SetPriority>
}
 8002a7c:	bf00      	nop
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ff56 	bl	8002944 <__NVIC_EnableIRQ>
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aae:	e14c      	b.n	8002d4a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	4013      	ands	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 813e 	beq.w	8002d44 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d005      	beq.n	8002ae0 <HAL_GPIO_Init+0x40>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d130      	bne.n	8002b42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b16:	2201      	movs	r2, #1
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 0201 	and.w	r2, r3, #1
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d017      	beq.n	8002b7e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d123      	bne.n	8002bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	08da      	lsrs	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3208      	adds	r2, #8
 8002b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	08da      	lsrs	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3208      	adds	r2, #8
 8002bcc:	6939      	ldr	r1, [r7, #16]
 8002bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0203 	and.w	r2, r3, #3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8098 	beq.w	8002d44 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c14:	4a54      	ldr	r2, [pc, #336]	; (8002d68 <HAL_GPIO_Init+0x2c8>)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c3e:	d019      	beq.n	8002c74 <HAL_GPIO_Init+0x1d4>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a4a      	ldr	r2, [pc, #296]	; (8002d6c <HAL_GPIO_Init+0x2cc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d013      	beq.n	8002c70 <HAL_GPIO_Init+0x1d0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a49      	ldr	r2, [pc, #292]	; (8002d70 <HAL_GPIO_Init+0x2d0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00d      	beq.n	8002c6c <HAL_GPIO_Init+0x1cc>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a48      	ldr	r2, [pc, #288]	; (8002d74 <HAL_GPIO_Init+0x2d4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <HAL_GPIO_Init+0x1c8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a47      	ldr	r2, [pc, #284]	; (8002d78 <HAL_GPIO_Init+0x2d8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_GPIO_Init+0x1c4>
 8002c60:	2304      	movs	r3, #4
 8002c62:	e008      	b.n	8002c76 <HAL_GPIO_Init+0x1d6>
 8002c64:	2307      	movs	r3, #7
 8002c66:	e006      	b.n	8002c76 <HAL_GPIO_Init+0x1d6>
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e004      	b.n	8002c76 <HAL_GPIO_Init+0x1d6>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e002      	b.n	8002c76 <HAL_GPIO_Init+0x1d6>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <HAL_GPIO_Init+0x1d6>
 8002c74:	2300      	movs	r3, #0
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	f002 0203 	and.w	r2, r2, #3
 8002c7c:	0092      	lsls	r2, r2, #2
 8002c7e:	4093      	lsls	r3, r2
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c86:	4938      	ldr	r1, [pc, #224]	; (8002d68 <HAL_GPIO_Init+0x2c8>)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c94:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cb8:	4a30      	ldr	r2, [pc, #192]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ce2:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ce8:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d0e:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002d16:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d3c:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	3301      	adds	r3, #1
 8002d48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f47f aeab 	bne.w	8002ab0 <HAL_GPIO_Init+0x10>
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	371c      	adds	r7, #28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	40010000 	.word	0x40010000
 8002d6c:	48000400 	.word	0x48000400
 8002d70:	48000800 	.word	0x48000800
 8002d74:	48000c00 	.word	0x48000c00
 8002d78:	48001000 	.word	0x48001000
 8002d7c:	58000800 	.word	0x58000800

08002d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d90:	787b      	ldrb	r3, [r7, #1]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d9c:	e002      	b.n	8002da4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d9e:	887a      	ldrh	r2, [r7, #2]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_HSEM_IRQHandler+0x30>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_HSEM_IRQHandler+0x30>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	4906      	ldr	r1, [pc, #24]	; (8002de0 <HAL_HSEM_IRQHandler+0x30>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002dca:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <HAL_HSEM_IRQHandler+0x30>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f807 	bl	8002de4 <HAL_HSEM_FreeCallback>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	58001500 	.word	0x58001500

08002de4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e081      	b.n	8002f0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fd fd3c 	bl	800089c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2224      	movs	r2, #36	; 0x24
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d107      	bne.n	8002e72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	e006      	b.n	8002e80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d104      	bne.n	8002e92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69d9      	ldr	r1, [r3, #28]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1a      	ldr	r2, [r3, #32]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	4608      	mov	r0, r1
 8002f22:	4611      	mov	r1, r2
 8002f24:	461a      	mov	r2, r3
 8002f26:	4603      	mov	r3, r0
 8002f28:	817b      	strh	r3, [r7, #10]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	813b      	strh	r3, [r7, #8]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	f040 80f9 	bne.w	8003132 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_I2C_Mem_Write+0x34>
 8002f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0ed      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_I2C_Mem_Write+0x4e>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e0e6      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f6e:	f7fe fdf5 	bl	8001b5c <HAL_GetTick>
 8002f72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2319      	movs	r3, #25
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fac3 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0d1      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2221      	movs	r2, #33	; 0x21
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2240      	movs	r2, #64	; 0x40
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a3a      	ldr	r2, [r7, #32]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fb8:	88f8      	ldrh	r0, [r7, #6]
 8002fba:	893a      	ldrh	r2, [r7, #8]
 8002fbc:	8979      	ldrh	r1, [r7, #10]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f9d3 	bl	8003374 <I2C_RequestMemoryWrite>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0a9      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2bff      	cmp	r3, #255	; 0xff
 8002fe8:	d90e      	bls.n	8003008 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	22ff      	movs	r2, #255	; 0xff
 8002fee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	8979      	ldrh	r1, [r7, #10]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fbef 	bl	80037e4 <I2C_TransferConfig>
 8003006:	e00f      	b.n	8003028 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	b2da      	uxtb	r2, r3
 8003018:	8979      	ldrh	r1, [r7, #10]
 800301a:	2300      	movs	r3, #0
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fbde 	bl	80037e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 faad 	bl	800358c <I2C_WaitOnTXISFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e07b      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d034      	beq.n	80030e0 <HAL_I2C_Mem_Write+0x1c8>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307a:	2b00      	cmp	r3, #0
 800307c:	d130      	bne.n	80030e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	2200      	movs	r2, #0
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fa3f 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e04d      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2bff      	cmp	r3, #255	; 0xff
 80030a0:	d90e      	bls.n	80030c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	22ff      	movs	r2, #255	; 0xff
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	8979      	ldrh	r1, [r7, #10]
 80030b0:	2300      	movs	r3, #0
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fb93 	bl	80037e4 <I2C_TransferConfig>
 80030be:	e00f      	b.n	80030e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	8979      	ldrh	r1, [r7, #10]
 80030d2:	2300      	movs	r3, #0
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fb82 	bl	80037e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d19e      	bne.n	8003028 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa8c 	bl	800360c <I2C_WaitOnSTOPFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e01a      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2220      	movs	r2, #32
 8003104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_I2C_Mem_Write+0x224>)
 8003112:	400b      	ands	r3, r1
 8003114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003132:	2302      	movs	r3, #2
  }
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	fe00e800 	.word	0xfe00e800

08003140 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	4603      	mov	r3, r0
 8003150:	817b      	strh	r3, [r7, #10]
 8003152:	460b      	mov	r3, r1
 8003154:	813b      	strh	r3, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b20      	cmp	r3, #32
 8003164:	f040 80fd 	bne.w	8003362 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_I2C_Mem_Read+0x34>
 800316e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0f1      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_I2C_Mem_Read+0x4e>
 800318a:	2302      	movs	r3, #2
 800318c:	e0ea      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003196:	f7fe fce1 	bl	8001b5c <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2319      	movs	r3, #25
 80031a2:	2201      	movs	r2, #1
 80031a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f9af 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0d5      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2222      	movs	r2, #34	; 0x22
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2240      	movs	r2, #64	; 0x40
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031e0:	88f8      	ldrh	r0, [r7, #6]
 80031e2:	893a      	ldrh	r2, [r7, #8]
 80031e4:	8979      	ldrh	r1, [r7, #10]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	4603      	mov	r3, r0
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f913 	bl	800341c <I2C_RequestMemoryRead>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0ad      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2bff      	cmp	r3, #255	; 0xff
 8003210:	d90e      	bls.n	8003230 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	22ff      	movs	r2, #255	; 0xff
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	b2da      	uxtb	r2, r3
 800321e:	8979      	ldrh	r1, [r7, #10]
 8003220:	4b52      	ldr	r3, [pc, #328]	; (800336c <HAL_I2C_Mem_Read+0x22c>)
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fadb 	bl	80037e4 <I2C_TransferConfig>
 800322e:	e00f      	b.n	8003250 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	b2da      	uxtb	r2, r3
 8003240:	8979      	ldrh	r1, [r7, #10]
 8003242:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_I2C_Mem_Read+0x22c>)
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 faca 	bl	80037e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	2200      	movs	r2, #0
 8003258:	2104      	movs	r1, #4
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f956 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e07c      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d034      	beq.n	8003310 <HAL_I2C_Mem_Read+0x1d0>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d130      	bne.n	8003310 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	2200      	movs	r2, #0
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f927 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e04d      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2bff      	cmp	r3, #255	; 0xff
 80032d0:	d90e      	bls.n	80032f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	22ff      	movs	r2, #255	; 0xff
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	8979      	ldrh	r1, [r7, #10]
 80032e0:	2300      	movs	r3, #0
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 fa7b 	bl	80037e4 <I2C_TransferConfig>
 80032ee:	e00f      	b.n	8003310 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	8979      	ldrh	r1, [r7, #10]
 8003302:	2300      	movs	r3, #0
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fa6a 	bl	80037e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d19a      	bne.n	8003250 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f974 	bl	800360c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e01a      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2220      	movs	r2, #32
 8003334:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_I2C_Mem_Read+0x230>)
 8003342:	400b      	ands	r3, r1
 8003344:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	e000      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003362:	2302      	movs	r3, #2
  }
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	80002400 	.word	0x80002400
 8003370:	fe00e800 	.word	0xfe00e800

08003374 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4603      	mov	r3, r0
 8003384:	817b      	strh	r3, [r7, #10]
 8003386:	460b      	mov	r3, r1
 8003388:	813b      	strh	r3, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	8979      	ldrh	r1, [r7, #10]
 8003394:	4b20      	ldr	r3, [pc, #128]	; (8003418 <I2C_RequestMemoryWrite+0xa4>)
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fa21 	bl	80037e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	69b9      	ldr	r1, [r7, #24]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f8f0 	bl	800358c <I2C_WaitOnTXISFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e02c      	b.n	8003410 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033bc:	893b      	ldrh	r3, [r7, #8]
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	629a      	str	r2, [r3, #40]	; 0x28
 80033c6:	e015      	b.n	80033f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033c8:	893b      	ldrh	r3, [r7, #8]
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	69b9      	ldr	r1, [r7, #24]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f8d6 	bl	800358c <I2C_WaitOnTXISFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e012      	b.n	8003410 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033ea:	893b      	ldrh	r3, [r7, #8]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2200      	movs	r2, #0
 80033fc:	2180      	movs	r1, #128	; 0x80
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f884 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	80002000 	.word	0x80002000

0800341c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	4608      	mov	r0, r1
 8003426:	4611      	mov	r1, r2
 8003428:	461a      	mov	r2, r3
 800342a:	4603      	mov	r3, r0
 800342c:	817b      	strh	r3, [r7, #10]
 800342e:	460b      	mov	r3, r1
 8003430:	813b      	strh	r3, [r7, #8]
 8003432:	4613      	mov	r3, r2
 8003434:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	8979      	ldrh	r1, [r7, #10]
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <I2C_RequestMemoryRead+0xa4>)
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2300      	movs	r3, #0
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f9ce 	bl	80037e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	69b9      	ldr	r1, [r7, #24]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f89d 	bl	800358c <I2C_WaitOnTXISFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e02c      	b.n	80034b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003462:	893b      	ldrh	r3, [r7, #8]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
 800346c:	e015      	b.n	800349a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800346e:	893b      	ldrh	r3, [r7, #8]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	b29b      	uxth	r3, r3
 8003474:	b2da      	uxtb	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	69b9      	ldr	r1, [r7, #24]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f883 	bl	800358c <I2C_WaitOnTXISFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e012      	b.n	80034b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003490:	893b      	ldrh	r3, [r7, #8]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2200      	movs	r2, #0
 80034a2:	2140      	movs	r1, #64	; 0x40
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f831 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	80002000 	.word	0x80002000

080034c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d103      	bne.n	80034e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2200      	movs	r2, #0
 80034e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d007      	beq.n	8003500 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	619a      	str	r2, [r3, #24]
  }
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800351c:	e022      	b.n	8003564 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003524:	d01e      	beq.n	8003564 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fe fb19 	bl	8001b5c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d113      	bne.n	8003564 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e00f      	b.n	8003584 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4013      	ands	r3, r2
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	429a      	cmp	r2, r3
 8003580:	d0cd      	beq.n	800351e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003598:	e02c      	b.n	80035f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f870 	bl	8003684 <I2C_IsErrorOccurred>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e02a      	b.n	8003604 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035b4:	d01e      	beq.n	80035f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b6:	f7fe fad1 	bl	8001b5c <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d302      	bcc.n	80035cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d113      	bne.n	80035f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e007      	b.n	8003604 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d1cb      	bne.n	800359a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003618:	e028      	b.n	800366c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f830 	bl	8003684 <I2C_IsErrorOccurred>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e026      	b.n	800367c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362e:	f7fe fa95 	bl	8001b5c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d113      	bne.n	800366c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e007      	b.n	800367c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b20      	cmp	r3, #32
 8003678:	d1cf      	bne.n	800361a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d040      	beq.n	800372c <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036b8:	d01d      	beq.n	80036f6 <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036c8:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ca:	e014      	b.n	80036f6 <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036d2:	d010      	beq.n	80036f6 <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d4:	f7fe fa42 	bl	8001b5c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d302      	bcc.n	80036ea <I2C_IsErrorOccurred+0x66>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d105      	bne.n	80036f6 <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f043 0320 	orr.w	r3, r3, #32
 80036f0:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b20      	cmp	r3, #32
 8003702:	d002      	beq.n	800370a <I2C_IsErrorOccurred+0x86>
 8003704:	7ffb      	ldrb	r3, [r7, #31]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0e0      	beq.n	80036cc <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800370a:	7ffb      	ldrb	r3, [r7, #31]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d103      	bne.n	8003718 <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2220      	movs	r2, #32
 8003716:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2210      	movs	r2, #16
 800371e:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f043 0304 	orr.w	r3, r3, #4
 8003726:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800374e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f043 0308 	orr.w	r3, r3, #8
 8003764:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800376e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 8003794:	7ffb      	ldrb	r3, [r7, #31]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d01c      	beq.n	80037d4 <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7ff fe92 	bl	80034c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <I2C_IsErrorOccurred+0x15c>)
 80037ac:	400b      	ands	r3, r1
 80037ae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	fe00e800 	.word	0xfe00e800

080037e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	817b      	strh	r3, [r7, #10]
 80037f2:	4613      	mov	r3, r2
 80037f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f6:	897b      	ldrh	r3, [r7, #10]
 80037f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037fc:	7a7b      	ldrb	r3, [r7, #9]
 80037fe:	041b      	lsls	r3, r3, #16
 8003800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003804:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	4313      	orrs	r3, r2
 800380e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003812:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	0d5b      	lsrs	r3, r3, #21
 800381e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <I2C_TransferConfig+0x60>)
 8003824:	430b      	orrs	r3, r1
 8003826:	43db      	mvns	r3, r3
 8003828:	ea02 0103 	and.w	r1, r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	03ff63ff 	.word	0x03ff63ff

08003848 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b20      	cmp	r3, #32
 800385c:	d138      	bne.n	80038d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003868:	2302      	movs	r3, #2
 800386a:	e032      	b.n	80038d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	; 0x24
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800389a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d139      	bne.n	8003968 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038fe:	2302      	movs	r3, #2
 8003900:	e033      	b.n	800396a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2224      	movs	r2, #36	; 0x24
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003930:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01e      	beq.n	80039c8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <HAL_IPCC_Init+0x60>)
 800398c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd f824 	bl	80009e8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80039a0:	68b8      	ldr	r0, [r7, #8]
 80039a2:	f000 f85b 	bl	8003a5c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f82c 	bl	8003a10 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80039c6:	e001      	b.n	80039cc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	58000c00 	.word	0x58000c00

080039dc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	4613      	mov	r3, r2
 80039e8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b085      	sub	sp, #20
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	4613      	mov	r3, r2
 8003a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e00f      	b.n	8003a3e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	4a0b      	ldr	r2, [pc, #44]	; (8003a54 <IPCC_SetDefaultCallbacks+0x44>)
 8003a28:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3306      	adds	r3, #6
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <IPCC_SetDefaultCallbacks+0x48>)
 8003a36:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d9ec      	bls.n	8003a1e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	080039dd 	.word	0x080039dd
 8003a58:	080039f7 	.word	0x080039f7

08003a5c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003a70:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	223f      	movs	r2, #63	; 0x3f
 8003a76:	609a      	str	r2, [r3, #8]
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a86:	b08b      	sub	sp, #44	; 0x2c
 8003a88:	af06      	add	r7, sp, #24
 8003a8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0d7      	b.n	8003c46 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f00d fcf0 	bl	8011490 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f005 fec8 	bl	8009852 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	e04c      	b.n	8003b62 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	440b      	add	r3, r1
 8003ad8:	3301      	adds	r3, #1
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	440b      	add	r3, r1
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003af2:	7bfa      	ldrb	r2, [r7, #15]
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	b298      	uxth	r0, r3
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	440b      	add	r3, r1
 8003b04:	3336      	adds	r3, #54	; 0x36
 8003b06:	4602      	mov	r2, r0
 8003b08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	440b      	add	r3, r1
 8003b1a:	3303      	adds	r3, #3
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b20:	7bfa      	ldrb	r2, [r7, #15]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	440b      	add	r3, r1
 8003b2e:	3338      	adds	r3, #56	; 0x38
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	440b      	add	r3, r1
 8003b42:	333c      	adds	r3, #60	; 0x3c
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	440b      	add	r3, r1
 8003b56:	3340      	adds	r3, #64	; 0x40
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
 8003b62:	7bfa      	ldrb	r2, [r7, #15]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d3ad      	bcc.n	8003ac8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]
 8003b70:	e044      	b.n	8003bfc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	440b      	add	r3, r1
 8003b80:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	440b      	add	r3, r1
 8003b96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	440b      	add	r3, r1
 8003bac:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bca:	7bfa      	ldrb	r2, [r7, #15]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	440b      	add	r3, r1
 8003bd8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	440b      	add	r3, r1
 8003bee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d3b5      	bcc.n	8003b72 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	687e      	ldr	r6, [r7, #4]
 8003c0e:	466d      	mov	r5, sp
 8003c10:	f106 0410 	add.w	r4, r6, #16
 8003c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	602b      	str	r3, [r5, #0]
 8003c1c:	1d33      	adds	r3, r6, #4
 8003c1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c20:	6838      	ldr	r0, [r7, #0]
 8003c22:	f005 fe31 	bl	8009888 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d102      	bne.n	8003c44 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f001 fc29 	bl	8005496 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_PCD_Start+0x16>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e012      	b.n	8003c8a <HAL_PCD_Start+0x3c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f005 fdd7 	bl	8009824 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f007 fd8c 	bl	800b798 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f007 fd91 	bl	800b7c6 <USB_ReadInterrupts>
 8003ca4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fb26 	bl	8004302 <PCD_EP_ISR_Handler>

    return;
 8003cb6:	e110      	b.n	8003eda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d013      	beq.n	8003cea <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	b292      	uxth	r2, r2
 8003cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f00d fc7b 	bl	80115d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f8fc 	bl	8003ee0 <HAL_PCD_SetAddress>

    return;
 8003ce8:	e0f7      	b.n	8003eda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00c      	beq.n	8003d0e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d06:	b292      	uxth	r2, r2
 8003d08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003d0c:	e0e5      	b.n	8003eda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00c      	beq.n	8003d32 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d2a:	b292      	uxth	r2, r2
 8003d2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003d30:	e0d3      	b.n	8003eda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d034      	beq.n	8003da6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0204 	bic.w	r2, r2, #4
 8003d4e:	b292      	uxth	r2, r2
 8003d50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0208 	bic.w	r2, r2, #8
 8003d66:	b292      	uxth	r2, r2
 8003d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d107      	bne.n	8003d86 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d7e:	2100      	movs	r1, #0
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f00d fe1f 	bl	80119c4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f00d fc5e 	bl	8011648 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d9e:	b292      	uxth	r2, r2
 8003da0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003da4:	e099      	b.n	8003eda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d027      	beq.n	8003e00 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0208 	orr.w	r2, r2, #8
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dda:	b292      	uxth	r2, r2
 8003ddc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0204 	orr.w	r2, r2, #4
 8003df2:	b292      	uxth	r2, r2
 8003df4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f00d fc0b 	bl	8011614 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003dfe:	e06c      	b.n	8003eda <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d040      	beq.n	8003e8c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e1c:	b292      	uxth	r2, r2
 8003e1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d12b      	bne.n	8003e84 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0204 	orr.w	r2, r2, #4
 8003e3e:	b292      	uxth	r2, r2
 8003e40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0208 	orr.w	r2, r2, #8
 8003e56:	b292      	uxth	r2, r2
 8003e58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	089b      	lsrs	r3, r3, #2
 8003e70:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f00d fda1 	bl	80119c4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003e82:	e02a      	b.n	8003eda <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f00d fbc5 	bl	8011614 <HAL_PCD_SuspendCallback>
    return;
 8003e8a:	e026      	b.n	8003eda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00f      	beq.n	8003eb6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ea8:	b292      	uxth	r2, r2
 8003eaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f00d fb83 	bl	80115ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003eb4:	e011      	b.n	8003eda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00c      	beq.n	8003eda <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003ed8:	bf00      	nop
  }
}
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_PCD_SetAddress+0x1a>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e013      	b.n	8003f22 <HAL_PCD_SetAddress+0x42>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f007 fc2c 	bl	800b770 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	4608      	mov	r0, r1
 8003f34:	4611      	mov	r1, r2
 8003f36:	461a      	mov	r2, r3
 8003f38:	4603      	mov	r3, r0
 8003f3a:	70fb      	strb	r3, [r7, #3]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	803b      	strh	r3, [r7, #0]
 8003f40:	4613      	mov	r3, r2
 8003f42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	da0e      	bge.n	8003f6e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	4413      	add	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	705a      	strb	r2, [r3, #1]
 8003f6c:	e00e      	b.n	8003f8c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	f003 0207 	and.w	r2, r3, #7
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4413      	add	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f98:	883a      	ldrh	r2, [r7, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	78ba      	ldrb	r2, [r7, #2]
 8003fa2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	785b      	ldrb	r3, [r3, #1]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fb6:	78bb      	ldrb	r3, [r7, #2]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d102      	bne.n	8003fc2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_PCD_EP_Open+0xa6>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e00e      	b.n	8003fee <HAL_PCD_EP_Open+0xc4>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68f9      	ldr	r1, [r7, #12]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f005 fc74 	bl	80098cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003fec:	7afb      	ldrb	r3, [r7, #11]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	460b      	mov	r3, r1
 8004000:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004002:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004006:	2b00      	cmp	r3, #0
 8004008:	da0e      	bge.n	8004028 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800400a:	78fb      	ldrb	r3, [r7, #3]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	4413      	add	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	705a      	strb	r2, [r3, #1]
 8004026:	e00e      	b.n	8004046 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	f003 0207 	and.w	r2, r3, #7
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	b2da      	uxtb	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_PCD_EP_Close+0x6a>
 800405c:	2302      	movs	r3, #2
 800405e:	e00e      	b.n	800407e <HAL_PCD_EP_Close+0x88>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68f9      	ldr	r1, [r7, #12]
 800406e:	4618      	mov	r0, r3
 8004070:	f005 ffc0 	bl	8009ff4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b086      	sub	sp, #24
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	460b      	mov	r3, r1
 8004094:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004096:	7afb      	ldrb	r3, [r7, #11]
 8004098:	f003 0207 	and.w	r2, r3, #7
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2200      	movs	r2, #0
 80040c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c6:	7afb      	ldrb	r3, [r7, #11]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040d2:	7afb      	ldrb	r3, [r7, #11]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d106      	bne.n	80040ea <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6979      	ldr	r1, [r7, #20]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f006 f973 	bl	800a3ce <USB_EPStartXfer>
 80040e8:	e005      	b.n	80040f6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6979      	ldr	r1, [r7, #20]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f006 f96c 	bl	800a3ce <USB_EPStartXfer>
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	f003 0207 	and.w	r2, r3, #7
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	440b      	add	r3, r1
 800411e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	460b      	mov	r3, r1
 800413e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004140:	7afb      	ldrb	r3, [r7, #11]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2200      	movs	r2, #0
 8004174:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2201      	movs	r2, #1
 800417a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800417c:	7afb      	ldrb	r3, [r7, #11]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	b2da      	uxtb	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004188:	7afb      	ldrb	r3, [r7, #11]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6979      	ldr	r1, [r7, #20]
 8004198:	4618      	mov	r0, r3
 800419a:	f006 f918 	bl	800a3ce <USB_EPStartXfer>
 800419e:	e005      	b.n	80041ac <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6979      	ldr	r1, [r7, #20]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f006 f911 	bl	800a3ce <USB_EPStartXfer>
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	f003 0207 	and.w	r2, r3, #7
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d901      	bls.n	80041d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e03e      	b.n	8004252 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	da0e      	bge.n	80041fa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4413      	add	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	705a      	strb	r2, [r3, #1]
 80041f8:	e00c      	b.n	8004214 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	4413      	add	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	b2da      	uxtb	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_PCD_EP_SetStall+0x7e>
 8004230:	2302      	movs	r3, #2
 8004232:	e00e      	b.n	8004252 <HAL_PCD_EP_SetStall+0x9c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68f9      	ldr	r1, [r7, #12]
 8004242:	4618      	mov	r0, r3
 8004244:	f007 f995 	bl	800b572 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	460b      	mov	r3, r1
 8004264:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	f003 020f 	and.w	r2, r3, #15
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d901      	bls.n	8004278 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e040      	b.n	80042fa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800427c:	2b00      	cmp	r3, #0
 800427e:	da0e      	bge.n	800429e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	4413      	add	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	705a      	strb	r2, [r3, #1]
 800429c:	e00e      	b.n	80042bc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	f003 0207 	and.w	r2, r3, #7
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	4413      	add	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_PCD_EP_ClrStall+0x82>
 80042d8:	2302      	movs	r3, #2
 80042da:	e00e      	b.n	80042fa <HAL_PCD_EP_ClrStall+0xa0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f007 f992 	bl	800b614 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b096      	sub	sp, #88	; 0x58
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800430a:	e39c      	b.n	8004a46 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004314:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004318:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004326:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800432a:	2b00      	cmp	r3, #0
 800432c:	f040 815e 	bne.w	80045ec <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004330:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b00      	cmp	r3, #0
 800433a:	d150      	bne.n	80043de <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434c:	81fb      	strh	r3, [r7, #14]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	89fb      	ldrh	r3, [r7, #14]
 8004354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800435c:	b29b      	uxth	r3, r3
 800435e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3328      	adds	r3, #40	; 0x28
 8004364:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436e:	b29b      	uxth	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4413      	add	r3, r2
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	4413      	add	r3, r2
 8004380:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800438a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800438e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	441a      	add	r2, r3
 8004398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800439c:	2100      	movs	r1, #0
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f00d f8f1 	bl	8011586 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 834a 	beq.w	8004a46 <PCD_EP_ISR_Handler+0x744>
 80043b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f040 8345 	bne.w	8004a46 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	b292      	uxth	r2, r2
 80043d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043dc:	e333      	b.n	8004a46 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043e4:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80043f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80043f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d032      	beq.n	8004462 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004404:	b29b      	uxth	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4413      	add	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	4413      	add	r3, r2
 8004416:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004422:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800442e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004430:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004434:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004436:	b29b      	uxth	r3, r3
 8004438:	f007 fa17 	bl	800b86a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	b29a      	uxth	r2, r3
 8004444:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004448:	4013      	ands	r3, r2
 800444a:	823b      	strh	r3, [r7, #16]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	8a3a      	ldrh	r2, [r7, #16]
 8004452:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004456:	b292      	uxth	r2, r2
 8004458:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f00d f866 	bl	801152c <HAL_PCD_SetupStageCallback>
 8004460:	e2f1      	b.n	8004a46 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004462:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004466:	2b00      	cmp	r3, #0
 8004468:	f280 82ed 	bge.w	8004a46 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29a      	uxth	r2, r3
 8004474:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004478:	4013      	ands	r3, r2
 800447a:	83fb      	strh	r3, [r7, #30]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	8bfa      	ldrh	r2, [r7, #30]
 8004482:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004486:	b292      	uxth	r2, r2
 8004488:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004492:	b29b      	uxth	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	4413      	add	r3, r2
 80044a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80044b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d019      	beq.n	80044ee <PCD_EP_ISR_Handler+0x1ec>
 80044ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d015      	beq.n	80044ee <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c8:	6959      	ldr	r1, [r3, #20]
 80044ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044cc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80044ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	f007 f9c9 	bl	800b86a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80044d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	441a      	add	r2, r3
 80044e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80044e6:	2100      	movs	r1, #0
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f00d f831 	bl	8011550 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f040 82a3 	bne.w	8004a46 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800450e:	b29b      	uxth	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	4413      	add	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	2b3e      	cmp	r3, #62	; 0x3e
 8004526:	d918      	bls.n	800455a <PCD_EP_ISR_Handler+0x258>
 8004528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	647b      	str	r3, [r7, #68]	; 0x44
 8004530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <PCD_EP_ISR_Handler+0x240>
 800453c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453e:	3b01      	subs	r3, #1
 8004540:	647b      	str	r3, [r7, #68]	; 0x44
 8004542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004544:	b29b      	uxth	r3, r3
 8004546:	029b      	lsls	r3, r3, #10
 8004548:	b29b      	uxth	r3, r3
 800454a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800454e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004552:	b29a      	uxth	r2, r3
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	801a      	strh	r2, [r3, #0]
 8004558:	e029      	b.n	80045ae <PCD_EP_ISR_Handler+0x2ac>
 800455a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d112      	bne.n	8004588 <PCD_EP_ISR_Handler+0x286>
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800456c:	b29a      	uxth	r2, r3
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800457c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004580:	b29a      	uxth	r2, r3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	e012      	b.n	80045ae <PCD_EP_ISR_Handler+0x2ac>
 8004588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	647b      	str	r3, [r7, #68]	; 0x44
 8004590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <PCD_EP_ISR_Handler+0x2a0>
 800459c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459e:	3301      	adds	r3, #1
 80045a0:	647b      	str	r3, [r7, #68]	; 0x44
 80045a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	029b      	lsls	r3, r3, #10
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	827b      	strh	r3, [r7, #18]
 80045c0:	8a7b      	ldrh	r3, [r7, #18]
 80045c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045c6:	827b      	strh	r3, [r7, #18]
 80045c8:	8a7b      	ldrh	r3, [r7, #18]
 80045ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045ce:	827b      	strh	r3, [r7, #18]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	8a7b      	ldrh	r3, [r7, #18]
 80045d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	8013      	strh	r3, [r2, #0]
 80045ea:	e22c      	b.n	8004a46 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004600:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004604:	2b00      	cmp	r3, #0
 8004606:	f280 80f6 	bge.w	80047f6 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29a      	uxth	r2, r3
 800461c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004620:	4013      	ands	r3, r2
 8004622:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004638:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800463c:	b292      	uxth	r2, r2
 800463e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004640:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	4413      	add	r3, r2
 8004654:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004658:	7b1b      	ldrb	r3, [r3, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d123      	bne.n	80046a6 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004666:	b29b      	uxth	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4413      	add	r3, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	4413      	add	r3, r2
 8004678:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004682:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8004686:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 808e 	beq.w	80047ac <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004696:	6959      	ldr	r1, [r3, #20]
 8004698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469a:	88da      	ldrh	r2, [r3, #6]
 800469c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046a0:	f007 f8e3 	bl	800b86a <USB_ReadPMA>
 80046a4:	e082      	b.n	80047ac <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80046a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a8:	78db      	ldrb	r3, [r3, #3]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d10a      	bne.n	80046c4 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80046ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80046b2:	461a      	mov	r2, r3
 80046b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f9d3 	bl	8004a62 <HAL_PCD_EP_DB_Receive>
 80046bc:	4603      	mov	r3, r0
 80046be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80046c2:	e073      	b.n	80047ac <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	441a      	add	r2, r3
 80046f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004700:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004704:	b29b      	uxth	r3, r3
 8004706:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d022      	beq.n	8004768 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800472a:	b29b      	uxth	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4413      	add	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	4413      	add	r3, r2
 800473c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004746:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800474a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800474e:	2b00      	cmp	r3, #0
 8004750:	d02c      	beq.n	80047ac <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004758:	6959      	ldr	r1, [r3, #20]
 800475a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475c:	891a      	ldrh	r2, [r3, #8]
 800475e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004762:	f007 f882 	bl	800b86a <USB_ReadPMA>
 8004766:	e021      	b.n	80047ac <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004770:	b29b      	uxth	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4413      	add	r3, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	4413      	add	r3, r2
 8004782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800478c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004790:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479e:	6959      	ldr	r1, [r3, #20]
 80047a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a2:	895a      	ldrh	r2, [r3, #10]
 80047a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047a8:	f007 f85f 	bl	800b86a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80047ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047b4:	441a      	add	r2, r3
 80047b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80047ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047c2:	441a      	add	r2, r3
 80047c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80047c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <PCD_EP_ISR_Handler+0x4da>
 80047d0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80047d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d206      	bcs.n	80047ea <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80047dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	4619      	mov	r1, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f00c feb4 	bl	8011550 <HAL_PCD_DataOutStageCallback>
 80047e8:	e005      	b.n	80047f6 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80047f0:	4618      	mov	r0, r3
 80047f2:	f005 fdec 	bl	800a3ce <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80047f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80047fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 8121 	beq.w	8004a46 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8004804:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	4413      	add	r3, r2
 8004816:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	441a      	add	r2, r3
 8004844:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800484c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004850:	b29b      	uxth	r3, r3
 8004852:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8004854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004856:	78db      	ldrb	r3, [r3, #3]
 8004858:	2b02      	cmp	r3, #2
 800485a:	f000 80a2 	beq.w	80049a2 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800485e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004860:	2200      	movs	r2, #0
 8004862:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004866:	7b1b      	ldrb	r3, [r3, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 8093 	beq.w	8004994 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800486e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d046      	beq.n	8004908 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800487a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487c:	785b      	ldrb	r3, [r3, #1]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d126      	bne.n	80048d0 <PCD_EP_ISR_Handler+0x5ce>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004890:	b29b      	uxth	r3, r3
 8004892:	461a      	mov	r2, r3
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	4413      	add	r3, r2
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
 800489a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	00da      	lsls	r2, r3, #3
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	4413      	add	r3, r2
 80048a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048a8:	623b      	str	r3, [r7, #32]
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	801a      	strh	r2, [r3, #0]
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	801a      	strh	r2, [r3, #0]
 80048ce:	e061      	b.n	8004994 <PCD_EP_ISR_Handler+0x692>
 80048d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d15d      	bne.n	8004994 <PCD_EP_ISR_Handler+0x692>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ec:	4413      	add	r3, r2
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	00da      	lsls	r2, r3, #3
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	4413      	add	r3, r2
 80048fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	2200      	movs	r2, #0
 8004904:	801a      	strh	r2, [r3, #0]
 8004906:	e045      	b.n	8004994 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800490e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004910:	785b      	ldrb	r3, [r3, #1]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d126      	bne.n	8004964 <PCD_EP_ISR_Handler+0x662>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	637b      	str	r3, [r7, #52]	; 0x34
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004924:	b29b      	uxth	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492a:	4413      	add	r3, r2
 800492c:	637b      	str	r3, [r7, #52]	; 0x34
 800492e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	00da      	lsls	r2, r3, #3
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	4413      	add	r3, r2
 8004938:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800493c:	633b      	str	r3, [r7, #48]	; 0x30
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004948:	b29a      	uxth	r2, r3
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	801a      	strh	r2, [r3, #0]
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800495c:	b29a      	uxth	r2, r3
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	e017      	b.n	8004994 <PCD_EP_ISR_Handler+0x692>
 8004964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004966:	785b      	ldrb	r3, [r3, #1]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d113      	bne.n	8004994 <PCD_EP_ISR_Handler+0x692>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800497a:	4413      	add	r3, r2
 800497c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800497e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	00da      	lsls	r2, r3, #3
 8004984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004986:	4413      	add	r3, r2
 8004988:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800498c:	63bb      	str	r3, [r7, #56]	; 0x38
 800498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004990:	2200      	movs	r2, #0
 8004992:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f00c fdf3 	bl	8011586 <HAL_PCD_DataInStageCallback>
 80049a0:	e051      	b.n	8004a46 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80049a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d144      	bne.n	8004a38 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	461a      	mov	r2, r3
 80049ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	4413      	add	r3, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	4413      	add	r3, r2
 80049c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80049d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80049de:	429a      	cmp	r2, r3
 80049e0:	d907      	bls.n	80049f2 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80049e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80049ea:	1ad2      	subs	r2, r2, r3
 80049ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ee:	619a      	str	r2, [r3, #24]
 80049f0:	e002      	b.n	80049f8 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80049f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f4:	2200      	movs	r2, #0
 80049f6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80049f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	4619      	mov	r1, r3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f00c fdbd 	bl	8011586 <HAL_PCD_DataInStageCallback>
 8004a0c:	e01b      	b.n	8004a46 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a10:	695a      	ldr	r2, [r3, #20]
 8004a12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a16:	441a      	add	r2, r3
 8004a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a1a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a1e:	69da      	ldr	r2, [r3, #28]
 8004a20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a24:	441a      	add	r2, r3
 8004a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a28:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004a30:	4618      	mov	r0, r3
 8004a32:	f005 fccc 	bl	800a3ce <USB_EPStartXfer>
 8004a36:	e006      	b.n	8004a46 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004a38:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f917 	bl	8004c74 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	b21b      	sxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f6ff ac5a 	blt.w	800430c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3758      	adds	r7, #88	; 0x58
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b088      	sub	sp, #32
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d07c      	beq.n	8004b74 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	4413      	add	r3, r2
 8004a94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a9e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	8b7b      	ldrh	r3, [r7, #26]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d306      	bcc.n	8004ab8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	8b7b      	ldrh	r3, [r7, #26]
 8004ab0:	1ad2      	subs	r2, r2, r3
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	619a      	str	r2, [r3, #24]
 8004ab6:	e002      	b.n	8004abe <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2200      	movs	r2, #0
 8004abc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d123      	bne.n	8004b0e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae0:	833b      	strh	r3, [r7, #24]
 8004ae2:	8b3b      	ldrh	r3, [r7, #24]
 8004ae4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ae8:	833b      	strh	r3, [r7, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	441a      	add	r2, r3
 8004af8:	8b3b      	ldrh	r3, [r7, #24]
 8004afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01f      	beq.n	8004b58 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b32:	82fb      	strh	r3, [r7, #22]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	8afb      	ldrh	r3, [r7, #22]
 8004b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b58:	8b7b      	ldrh	r3, [r7, #26]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 8085 	beq.w	8004c6a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	6959      	ldr	r1, [r3, #20]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	891a      	ldrh	r2, [r3, #8]
 8004b6c:	8b7b      	ldrh	r3, [r7, #26]
 8004b6e:	f006 fe7c 	bl	800b86a <USB_ReadPMA>
 8004b72:	e07a      	b.n	8004c6a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	4413      	add	r3, r2
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b98:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	8b7b      	ldrh	r3, [r7, #26]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d306      	bcc.n	8004bb2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	699a      	ldr	r2, [r3, #24]
 8004ba8:	8b7b      	ldrh	r3, [r7, #26]
 8004baa:	1ad2      	subs	r2, r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	619a      	str	r2, [r3, #24]
 8004bb0:	e002      	b.n	8004bb8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d123      	bne.n	8004c08 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bda:	83fb      	strh	r3, [r7, #30]
 8004bdc:	8bfb      	ldrh	r3, [r7, #30]
 8004bde:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004be2:	83fb      	strh	r3, [r7, #30]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	441a      	add	r2, r3
 8004bf2:	8bfb      	ldrh	r3, [r7, #30]
 8004bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d11f      	bne.n	8004c52 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2c:	83bb      	strh	r3, [r7, #28]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	441a      	add	r2, r3
 8004c3c:	8bbb      	ldrh	r3, [r7, #28]
 8004c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004c52:	8b7b      	ldrh	r3, [r7, #26]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6959      	ldr	r1, [r3, #20]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	895a      	ldrh	r2, [r3, #10]
 8004c64:	8b7b      	ldrh	r3, [r7, #26]
 8004c66:	f006 fe00 	bl	800b86a <USB_ReadPMA>
    }
  }

  return count;
 8004c6a:	8b7b      	ldrh	r3, [r7, #26]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3720      	adds	r7, #32
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b0a2      	sub	sp, #136	; 0x88
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 81c5 	beq.w	8005018 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d907      	bls.n	8004cd2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cca:	1ad2      	subs	r2, r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	619a      	str	r2, [r3, #24]
 8004cd0:	e002      	b.n	8004cd8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f040 80b9 	bne.w	8004e54 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	785b      	ldrb	r3, [r3, #1]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d126      	bne.n	8004d38 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	4413      	add	r3, r2
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	00da      	lsls	r2, r3, #3
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	801a      	strh	r2, [r3, #0]
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	e01a      	b.n	8004d6e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d116      	bne.n	8004d6e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	633b      	str	r3, [r7, #48]	; 0x30
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	4413      	add	r3, r2
 8004d56:	633b      	str	r3, [r7, #48]	; 0x30
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	00da      	lsls	r2, r3, #3
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	4413      	add	r3, r2
 8004d62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	623b      	str	r3, [r7, #32]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	785b      	ldrb	r3, [r3, #1]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d126      	bne.n	8004dca <HAL_PCD_EP_DB_Transmit+0x156>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	4413      	add	r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	00da      	lsls	r2, r3, #3
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	801a      	strh	r2, [r3, #0]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	801a      	strh	r2, [r3, #0]
 8004dc8:	e017      	b.n	8004dfa <HAL_PCD_EP_DB_Transmit+0x186>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	785b      	ldrb	r3, [r3, #1]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d113      	bne.n	8004dfa <HAL_PCD_EP_DB_Transmit+0x186>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	4413      	add	r3, r2
 8004de2:	623b      	str	r3, [r7, #32]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	00da      	lsls	r2, r3, #3
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	4413      	add	r3, r2
 8004dee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	2200      	movs	r2, #0
 8004df8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	4619      	mov	r1, r3
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f00c fbc0 	bl	8011586 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 82d2 	beq.w	80053b6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2c:	827b      	strh	r3, [r7, #18]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	441a      	add	r2, r3
 8004e3c:	8a7b      	ldrh	r3, [r7, #18]
 8004e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	8013      	strh	r3, [r2, #0]
 8004e52:	e2b0      	b.n	80053b6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d021      	beq.n	8004ea2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e78:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	461a      	mov	r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	441a      	add	r2, r3
 8004e8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	f040 8284 	bne.w	80053b6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004eb6:	441a      	add	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ec4:	441a      	add	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6a1a      	ldr	r2, [r3, #32]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d309      	bcc.n	8004eea <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	6a1a      	ldr	r2, [r3, #32]
 8004ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee2:	1ad2      	subs	r2, r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	621a      	str	r2, [r3, #32]
 8004ee8:	e015      	b.n	8004f16 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d107      	bne.n	8004f02 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004ef2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ef6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f00:	e009      	b.n	8004f16 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2200      	movs	r2, #0
 8004f14:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d155      	bne.n	8004fca <HAL_PCD_EP_DB_Transmit+0x356>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	4413      	add	r3, r2
 8004f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	00da      	lsls	r2, r3, #3
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	4413      	add	r3, r2
 8004f40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
 8004f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f48:	2b3e      	cmp	r3, #62	; 0x3e
 8004f4a:	d916      	bls.n	8004f7a <HAL_PCD_EP_DB_Transmit+0x306>
 8004f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f54:	f003 031f 	and.w	r3, r3, #31
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	029b      	lsls	r3, r3, #10
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f76:	801a      	strh	r2, [r3, #0]
 8004f78:	e043      	b.n	8005002 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d112      	bne.n	8004fa6 <HAL_PCD_EP_DB_Transmit+0x332>
 8004f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8e:	801a      	strh	r2, [r3, #0]
 8004f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	e02d      	b.n	8005002 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_PCD_EP_DB_Transmit+0x348>
 8004fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb8:	3301      	adds	r3, #1
 8004fba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	029b      	lsls	r3, r3, #10
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc6:	801a      	strh	r2, [r3, #0]
 8004fc8:	e01b      	b.n	8005002 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	785b      	ldrb	r3, [r3, #1]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d117      	bne.n	8005002 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe6:	4413      	add	r3, r2
 8004fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	00da      	lsls	r2, r3, #3
 8004ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005000:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	6959      	ldr	r1, [r3, #20]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	891a      	ldrh	r2, [r3, #8]
 800500e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005010:	b29b      	uxth	r3, r3
 8005012:	f006 fbe8 	bl	800b7e6 <USB_WritePMA>
 8005016:	e1ce      	b.n	80053b6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005020:	b29b      	uxth	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4413      	add	r3, r2
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	4413      	add	r3, r2
 8005032:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800503c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	699a      	ldr	r2, [r3, #24]
 8005044:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005048:	429a      	cmp	r2, r3
 800504a:	d307      	bcc.n	800505c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	699a      	ldr	r2, [r3, #24]
 8005050:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005054:	1ad2      	subs	r2, r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	619a      	str	r2, [r3, #24]
 800505a:	e002      	b.n	8005062 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2200      	movs	r2, #0
 8005060:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f040 80c4 	bne.w	80051f4 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	785b      	ldrb	r3, [r3, #1]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d126      	bne.n	80050c2 <HAL_PCD_EP_DB_Transmit+0x44e>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	66bb      	str	r3, [r7, #104]	; 0x68
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005082:	b29b      	uxth	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005088:	4413      	add	r3, r2
 800508a:	66bb      	str	r3, [r7, #104]	; 0x68
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	00da      	lsls	r2, r3, #3
 8005092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005094:	4413      	add	r3, r2
 8005096:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800509a:	667b      	str	r3, [r7, #100]	; 0x64
 800509c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050be:	801a      	strh	r2, [r3, #0]
 80050c0:	e01a      	b.n	80050f8 <HAL_PCD_EP_DB_Transmit+0x484>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d116      	bne.n	80050f8 <HAL_PCD_EP_DB_Transmit+0x484>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	673b      	str	r3, [r7, #112]	; 0x70
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d8:	b29b      	uxth	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050de:	4413      	add	r3, r2
 80050e0:	673b      	str	r3, [r7, #112]	; 0x70
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	00da      	lsls	r2, r3, #3
 80050e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050ea:	4413      	add	r3, r2
 80050ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f4:	2200      	movs	r2, #0
 80050f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d12f      	bne.n	8005166 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005116:	b29b      	uxth	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800511e:	4413      	add	r3, r2
 8005120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	00da      	lsls	r2, r3, #3
 800512a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800512e:	4413      	add	r3, r2
 8005130:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005138:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005144:	b29a      	uxth	r2, r3
 8005146:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800514a:	801a      	strh	r2, [r3, #0]
 800514c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515c:	b29a      	uxth	r2, r3
 800515e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005162:	801a      	strh	r2, [r3, #0]
 8005164:	e017      	b.n	8005196 <HAL_PCD_EP_DB_Transmit+0x522>
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	785b      	ldrb	r3, [r3, #1]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d113      	bne.n	8005196 <HAL_PCD_EP_DB_Transmit+0x522>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005176:	b29b      	uxth	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800517c:	4413      	add	r3, r2
 800517e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	00da      	lsls	r2, r3, #3
 8005186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005188:	4413      	add	r3, r2
 800518a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800518e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005192:	2200      	movs	r2, #0
 8005194:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	4619      	mov	r1, r3
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f00c f9f2 	bl	8011586 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80051a2:	88fb      	ldrh	r3, [r7, #6]
 80051a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f040 8104 	bne.w	80053b6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]
 80051f2:	e0e0      	b.n	80053b6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d121      	bne.n	8005242 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005218:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	441a      	add	r2, r3
 800522a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800522e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800523a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523e:	b29b      	uxth	r3, r3
 8005240:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005248:	2b01      	cmp	r3, #1
 800524a:	f040 80b4 	bne.w	80053b6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005256:	441a      	add	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005264:	441a      	add	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	429a      	cmp	r2, r3
 8005274:	d309      	bcc.n	800528a <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	6a1a      	ldr	r2, [r3, #32]
 8005280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005282:	1ad2      	subs	r2, r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	621a      	str	r2, [r3, #32]
 8005288:	e015      	b.n	80052b6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d107      	bne.n	80052a2 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8005292:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005296:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80052a0:	e009      	b.n	80052b6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2200      	movs	r2, #0
 80052ac:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	663b      	str	r3, [r7, #96]	; 0x60
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	785b      	ldrb	r3, [r3, #1]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d155      	bne.n	8005370 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052d8:	4413      	add	r3, r2
 80052da:	65bb      	str	r3, [r7, #88]	; 0x58
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	00da      	lsls	r2, r3, #3
 80052e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052e4:	4413      	add	r3, r2
 80052e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052ea:	657b      	str	r3, [r7, #84]	; 0x54
 80052ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ee:	2b3e      	cmp	r3, #62	; 0x3e
 80052f0:	d916      	bls.n	8005320 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80052f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	677b      	str	r3, [r7, #116]	; 0x74
 80052f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <HAL_PCD_EP_DB_Transmit+0x694>
 8005302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005304:	3b01      	subs	r3, #1
 8005306:	677b      	str	r3, [r7, #116]	; 0x74
 8005308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800530a:	b29b      	uxth	r3, r3
 800530c:	029b      	lsls	r3, r3, #10
 800530e:	b29b      	uxth	r3, r3
 8005310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005318:	b29a      	uxth	r2, r3
 800531a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800531c:	801a      	strh	r2, [r3, #0]
 800531e:	e040      	b.n	80053a2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005322:	2b00      	cmp	r3, #0
 8005324:	d112      	bne.n	800534c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005330:	b29a      	uxth	r2, r3
 8005332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005344:	b29a      	uxth	r2, r3
 8005346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005348:	801a      	strh	r2, [r3, #0]
 800534a:	e02a      	b.n	80053a2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800534c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	677b      	str	r3, [r7, #116]	; 0x74
 8005352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800535c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800535e:	3301      	adds	r3, #1
 8005360:	677b      	str	r3, [r7, #116]	; 0x74
 8005362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005364:	b29b      	uxth	r3, r3
 8005366:	029b      	lsls	r3, r3, #10
 8005368:	b29a      	uxth	r2, r3
 800536a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800536c:	801a      	strh	r2, [r3, #0]
 800536e:	e018      	b.n	80053a2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d114      	bne.n	80053a2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005380:	b29b      	uxth	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005386:	4413      	add	r3, r2
 8005388:	663b      	str	r3, [r7, #96]	; 0x60
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	00da      	lsls	r2, r3, #3
 8005390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005392:	4413      	add	r3, r2
 8005394:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800539a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539c:	b29a      	uxth	r2, r3
 800539e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053a0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	6959      	ldr	r1, [r3, #20]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	895a      	ldrh	r2, [r3, #10]
 80053ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f006 fa18 	bl	800b7e6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d0:	823b      	strh	r3, [r7, #16]
 80053d2:	8a3b      	ldrh	r3, [r7, #16]
 80053d4:	f083 0310 	eor.w	r3, r3, #16
 80053d8:	823b      	strh	r3, [r7, #16]
 80053da:	8a3b      	ldrh	r3, [r7, #16]
 80053dc:	f083 0320 	eor.w	r3, r3, #32
 80053e0:	823b      	strh	r3, [r7, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	441a      	add	r2, r3
 80053f0:	8a3b      	ldrh	r3, [r7, #16]
 80053f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005402:	b29b      	uxth	r3, r3
 8005404:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3788      	adds	r7, #136	; 0x88
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	607b      	str	r3, [r7, #4]
 800541a:	460b      	mov	r3, r1
 800541c:	817b      	strh	r3, [r7, #10]
 800541e:	4613      	mov	r3, r2
 8005420:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005422:	897b      	ldrh	r3, [r7, #10]
 8005424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4413      	add	r3, r2
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e009      	b.n	800545a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005446:	897a      	ldrh	r2, [r7, #10]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800545a:	893b      	ldrh	r3, [r7, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d107      	bne.n	8005470 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2200      	movs	r2, #0
 8005464:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	b29a      	uxth	r2, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	80da      	strh	r2, [r3, #6]
 800546e:	e00b      	b.n	8005488 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2201      	movs	r2, #1
 8005474:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	b29a      	uxth	r2, r3
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	b29a      	uxth	r2, r3
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005496:	b480      	push	{r7}
 8005498:	b085      	sub	sp, #20
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	f043 0302 	orr.w	r3, r3, #2
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a04      	ldr	r2, [pc, #16]	; (8005508 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054fa:	6013      	str	r3, [r2, #0]
}
 80054fc:	bf00      	nop
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	58000400 	.word	0x58000400

0800550c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005510:	4b04      	ldr	r3, [pc, #16]	; (8005524 <HAL_PWREx_GetVoltageRange+0x18>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005518:	4618      	mov	r0, r3
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	58000400 	.word	0x58000400

08005528 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800552c:	4b05      	ldr	r3, [pc, #20]	; (8005544 <HAL_PWREx_EnableVddUSB+0x1c>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a04      	ldr	r2, [pc, #16]	; (8005544 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005536:	6053      	str	r3, [r2, #4]
}
 8005538:	bf00      	nop
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	58000400 	.word	0x58000400

08005548 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800554c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800555a:	d101      	bne.n	8005560 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800555c:	2301      	movs	r3, #1
 800555e:	e000      	b.n	8005562 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <LL_RCC_HSE_Enable>:
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800557a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557e:	6013      	str	r3, [r2, #0]
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <LL_RCC_HSE_Disable>:
{
 800558a:	b480      	push	{r7}
 800558c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800558e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559c:	6013      	str	r3, [r2, #0]
}
 800559e:	bf00      	nop
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_RCC_HSE_IsReady>:
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80055ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ba:	d101      	bne.n	80055c0 <LL_RCC_HSE_IsReady+0x18>
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <LL_RCC_HSE_IsReady+0x1a>
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <LL_RCC_HSI_Enable>:
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80055d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055de:	6013      	str	r3, [r2, #0]
}
 80055e0:	bf00      	nop
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <LL_RCC_HSI_Disable>:
{
 80055ea:	b480      	push	{r7}
 80055ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80055ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055fc:	6013      	str	r3, [r2, #0]
}
 80055fe:	bf00      	nop
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <LL_RCC_HSI_IsReady>:
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800560c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561a:	d101      	bne.n	8005620 <LL_RCC_HSI_IsReady+0x18>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <LL_RCC_HSI_IsReady+0x1a>
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <LL_RCC_HSI_SetCalibTrimming>:
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	061b      	lsls	r3, r3, #24
 8005642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005646:	4313      	orrs	r3, r2
 8005648:	604b      	str	r3, [r1, #4]
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <LL_RCC_HSI48_Enable>:
{
 8005656:	b480      	push	{r7}
 8005658:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800565a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800566e:	bf00      	nop
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <LL_RCC_HSI48_Disable>:
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800567c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005690:	bf00      	nop
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <LL_RCC_HSI48_IsReady>:
{
 800569a:	b480      	push	{r7}
 800569c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800569e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d101      	bne.n	80056b2 <LL_RCC_HSI48_IsReady+0x18>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <LL_RCC_HSI48_IsReady+0x1a>
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <LL_RCC_LSE_Enable>:
{
 80056be:	b480      	push	{r7}
 80056c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80056c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056ce:	f043 0301 	orr.w	r3, r3, #1
 80056d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80056d6:	bf00      	nop
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <LL_RCC_LSE_Disable>:
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80056e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <LL_RCC_LSE_EnableBypass>:
{
 8005702:	b480      	push	{r7}
 8005704:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005712:	f043 0304 	orr.w	r3, r3, #4
 8005716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800571a:	bf00      	nop
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <LL_RCC_LSE_DisableBypass>:
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005734:	f023 0304 	bic.w	r3, r3, #4
 8005738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800573c:	bf00      	nop
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <LL_RCC_LSE_IsReady>:
{
 8005746:	b480      	push	{r7}
 8005748:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800574a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b02      	cmp	r3, #2
 8005758:	d101      	bne.n	800575e <LL_RCC_LSE_IsReady+0x18>
 800575a:	2301      	movs	r3, #1
 800575c:	e000      	b.n	8005760 <LL_RCC_LSE_IsReady+0x1a>
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <LL_RCC_LSI1_Enable>:
{
 800576a:	b480      	push	{r7}
 800576c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800576e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005782:	bf00      	nop
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <LL_RCC_LSI1_Disable>:
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800579c:	f023 0301 	bic.w	r3, r3, #1
 80057a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <LL_RCC_LSI1_IsReady>:
{
 80057ae:	b480      	push	{r7}
 80057b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80057b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d101      	bne.n	80057c6 <LL_RCC_LSI1_IsReady+0x18>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <LL_RCC_LSI1_IsReady+0x1a>
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <LL_RCC_LSI2_Enable>:
{
 80057d2:	b480      	push	{r7}
 80057d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80057d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057e2:	f043 0304 	orr.w	r3, r3, #4
 80057e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80057ea:	bf00      	nop
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <LL_RCC_LSI2_Disable>:
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80057f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005804:	f023 0304 	bic.w	r3, r3, #4
 8005808:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800580c:	bf00      	nop
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <LL_RCC_LSI2_IsReady>:
{
 8005816:	b480      	push	{r7}
 8005818:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800581a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b08      	cmp	r3, #8
 8005828:	d101      	bne.n	800582e <LL_RCC_LSI2_IsReady+0x18>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <LL_RCC_LSI2_IsReady+0x1a>
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <LL_RCC_LSI2_SetTrimming>:
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <LL_RCC_MSI_Enable>:
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800586c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005876:	f043 0301 	orr.w	r3, r3, #1
 800587a:	6013      	str	r3, [r2, #0]
}
 800587c:	bf00      	nop
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <LL_RCC_MSI_Disable>:
{
 8005886:	b480      	push	{r7}
 8005888:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800588a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005894:	f023 0301 	bic.w	r3, r3, #1
 8005898:	6013      	str	r3, [r2, #0]
}
 800589a:	bf00      	nop
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <LL_RCC_MSI_IsReady>:
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80058a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d101      	bne.n	80058ba <LL_RCC_MSI_IsReady+0x16>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <LL_RCC_MSI_IsReady+0x18>
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <LL_RCC_MSI_SetRange>:
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80058ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4313      	orrs	r3, r2
 80058e0:	600b      	str	r3, [r1, #0]
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <LL_RCC_MSI_GetRange>:
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80058f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058fe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2bb0      	cmp	r3, #176	; 0xb0
 8005904:	d901      	bls.n	800590a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005906:	23b0      	movs	r3, #176	; 0xb0
 8005908:	607b      	str	r3, [r7, #4]
  return msiRange;
 800590a:	687b      	ldr	r3, [r7, #4]
}
 800590c:	4618      	mov	r0, r3
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005932:	4313      	orrs	r3, r2
 8005934:	604b      	str	r3, [r1, #4]
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <LL_RCC_SetSysClkSource>:
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800594a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f023 0203 	bic.w	r2, r3, #3
 8005954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4313      	orrs	r3, r2
 800595c:	608b      	str	r3, [r1, #8]
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <LL_RCC_GetSysClkSource>:
{
 800596a:	b480      	push	{r7}
 800596c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800596e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 030c 	and.w	r3, r3, #12
}
 8005978:	4618      	mov	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <LL_RCC_SetAHBPrescaler>:
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800598a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4313      	orrs	r3, r2
 800599c:	608b      	str	r3, [r1, #8]
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <LL_C2_RCC_SetAHBPrescaler>:
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80059ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <LL_RCC_SetAHB4Prescaler>:
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80059de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80059e6:	f023 020f 	bic.w	r2, r3, #15
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <LL_RCC_SetAPB1Prescaler>:
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	608b      	str	r3, [r1, #8]
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <LL_RCC_SetAPB2Prescaler>:
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	608b      	str	r3, [r1, #8]
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <LL_RCC_GetAHBPrescaler>:
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <LL_C2_RCC_GetAHBPrescaler>:
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a74:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <LL_RCC_GetAHB4Prescaler>:
{
 8005a86:	b480      	push	{r7}
 8005a88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <LL_RCC_GetAPB1Prescaler>:
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <LL_RCC_GetAPB2Prescaler>:
{
 8005aba:	b480      	push	{r7}
 8005abc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <LL_RCC_PLL_Enable>:
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ae4:	6013      	str	r3, [r2, #0]
}
 8005ae6:	bf00      	nop
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <LL_RCC_PLL_Disable>:
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b02:	6013      	str	r3, [r2, #0]
}
 8005b04:	bf00      	nop
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <LL_RCC_PLL_IsReady>:
{
 8005b0e:	b480      	push	{r7}
 8005b10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b20:	d101      	bne.n	8005b26 <LL_RCC_PLL_IsReady+0x18>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <LL_RCC_PLL_IsReady+0x1a>
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <LL_RCC_PLL_GetN>:
{
 8005b32:	b480      	push	{r7}
 8005b34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	0a1b      	lsrs	r3, r3, #8
 8005b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <LL_RCC_PLL_GetR>:
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <LL_RCC_PLL_GetDivider>:
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <LL_RCC_PLL_GetMainSource>:
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0303 	and.w	r3, r3, #3
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <LL_RCC_IsActiveFlag_HPRE>:
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba6:	d101      	bne.n	8005bac <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bcc:	d101      	bne.n	8005bd2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005bde:	b480      	push	{r7}
 8005be0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf2:	d101      	bne.n	8005bf8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c16:	d101      	bne.n	8005c1c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c3a:	d101      	bne.n	8005c40 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b08d      	sub	sp, #52	; 0x34
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e37e      	b.n	800635c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8092 	beq.w	8005d90 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c6c:	f7ff fe7d 	bl	800596a <LL_RCC_GetSysClkSource>
 8005c70:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c72:	f7ff ff83 	bl	8005b7c <LL_RCC_PLL_GetMainSource>
 8005c76:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <HAL_RCC_OscConfig+0x3e>
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	2b0c      	cmp	r3, #12
 8005c82:	d14c      	bne.n	8005d1e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d149      	bne.n	8005d1e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c8a:	f7ff fe0b 	bl	80058a4 <LL_RCC_MSI_IsReady>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x54>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e35d      	b.n	800635c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005ca4:	f7ff fe23 	bl	80058ee <LL_RCC_MSI_GetRange>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	429c      	cmp	r4, r3
 8005cac:	d914      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fd5e 	bl	8006774 <RCC_SetFlashLatencyFromMSIRange>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e34c      	b.n	800635c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fdfd 	bl	80058c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fe21 	bl	8005918 <LL_RCC_MSI_SetCalibTrimming>
 8005cd6:	e013      	b.n	8005d00 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fdf2 	bl	80058c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fe16 	bl	8005918 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fd3f 	bl	8006774 <RCC_SetFlashLatencyFromMSIRange>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e32d      	b.n	800635c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d00:	f000 fcdc 	bl	80066bc <HAL_RCC_GetHCLKFreq>
 8005d04:	4603      	mov	r3, r0
 8005d06:	4ab3      	ldr	r2, [pc, #716]	; (8005fd4 <HAL_RCC_OscConfig+0x388>)
 8005d08:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d0a:	4bb3      	ldr	r3, [pc, #716]	; (8005fd8 <HAL_RCC_OscConfig+0x38c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fb fb72 	bl	80013f8 <HAL_InitTick>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d039      	beq.n	8005d8e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e31e      	b.n	800635c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01e      	beq.n	8005d64 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d26:	f7ff fd9f 	bl	8005868 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d2a:	f7fb ff17 	bl	8001b5c <HAL_GetTick>
 8005d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d32:	f7fb ff13 	bl	8001b5c <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e30b      	b.n	800635c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d44:	f7ff fdae 	bl	80058a4 <LL_RCC_MSI_IsReady>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0f1      	beq.n	8005d32 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fdb7 	bl	80058c6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff fddb 	bl	8005918 <LL_RCC_MSI_SetCalibTrimming>
 8005d62:	e015      	b.n	8005d90 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d64:	f7ff fd8f 	bl	8005886 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d68:	f7fb fef8 	bl	8001b5c <HAL_GetTick>
 8005d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d70:	f7fb fef4 	bl	8001b5c <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e2ec      	b.n	800635c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d82:	f7ff fd8f 	bl	80058a4 <LL_RCC_MSI_IsReady>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f1      	bne.n	8005d70 <HAL_RCC_OscConfig+0x124>
 8005d8c:	e000      	b.n	8005d90 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d8e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d04e      	beq.n	8005e3a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d9c:	f7ff fde5 	bl	800596a <LL_RCC_GetSysClkSource>
 8005da0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005da2:	f7ff feeb 	bl	8005b7c <LL_RCC_PLL_GetMainSource>
 8005da6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	d005      	beq.n	8005dba <HAL_RCC_OscConfig+0x16e>
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	2b0c      	cmp	r3, #12
 8005db2:	d10d      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d10a      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dba:	f7ff fbf5 	bl	80055a8 <LL_RCC_HSE_IsReady>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d039      	beq.n	8005e38 <HAL_RCC_OscConfig+0x1ec>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d135      	bne.n	8005e38 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e2c5      	b.n	800635c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd8:	d102      	bne.n	8005de0 <HAL_RCC_OscConfig+0x194>
 8005dda:	f7ff fbc7 	bl	800556c <LL_RCC_HSE_Enable>
 8005dde:	e001      	b.n	8005de4 <HAL_RCC_OscConfig+0x198>
 8005de0:	f7ff fbd3 	bl	800558a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d012      	beq.n	8005e12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dec:	f7fb feb6 	bl	8001b5c <HAL_GetTick>
 8005df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df4:	f7fb feb2 	bl	8001b5c <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b64      	cmp	r3, #100	; 0x64
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e2aa      	b.n	800635c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005e06:	f7ff fbcf 	bl	80055a8 <LL_RCC_HSE_IsReady>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0f1      	beq.n	8005df4 <HAL_RCC_OscConfig+0x1a8>
 8005e10:	e013      	b.n	8005e3a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e12:	f7fb fea3 	bl	8001b5c <HAL_GetTick>
 8005e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e1a:	f7fb fe9f 	bl	8001b5c <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b64      	cmp	r3, #100	; 0x64
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e297      	b.n	800635c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e2c:	f7ff fbbc 	bl	80055a8 <LL_RCC_HSE_IsReady>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1f1      	bne.n	8005e1a <HAL_RCC_OscConfig+0x1ce>
 8005e36:	e000      	b.n	8005e3a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e38:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d051      	beq.n	8005eea <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e46:	f7ff fd90 	bl	800596a <LL_RCC_GetSysClkSource>
 8005e4a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e4c:	f7ff fe96 	bl	8005b7c <LL_RCC_PLL_GetMainSource>
 8005e50:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d005      	beq.n	8005e64 <HAL_RCC_OscConfig+0x218>
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b0c      	cmp	r3, #12
 8005e5c:	d113      	bne.n	8005e86 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d110      	bne.n	8005e86 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e64:	f7ff fbd0 	bl	8005608 <LL_RCC_HSI_IsReady>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_RCC_OscConfig+0x22e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e270      	b.n	800635c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff fbd4 	bl	800562c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e84:	e031      	b.n	8005eea <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d019      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e8e:	f7ff fb9d 	bl	80055cc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e92:	f7fb fe63 	bl	8001b5c <HAL_GetTick>
 8005e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e9a:	f7fb fe5f 	bl	8001b5c <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e257      	b.n	800635c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005eac:	f7ff fbac 	bl	8005608 <LL_RCC_HSI_IsReady>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f1      	beq.n	8005e9a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fbb6 	bl	800562c <LL_RCC_HSI_SetCalibTrimming>
 8005ec0:	e013      	b.n	8005eea <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ec2:	f7ff fb92 	bl	80055ea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec6:	f7fb fe49 	bl	8001b5c <HAL_GetTick>
 8005eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ece:	f7fb fe45 	bl	8001b5c <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e23d      	b.n	800635c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ee0:	f7ff fb92 	bl	8005608 <LL_RCC_HSI_IsReady>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f1      	bne.n	8005ece <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 80a3 	beq.w	800604a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d076      	beq.n	8005ffa <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d046      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005f18:	f7ff fc49 	bl	80057ae <LL_RCC_LSI1_IsReady>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d113      	bne.n	8005f4a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005f22:	f7ff fc22 	bl	800576a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f26:	f7fb fe19 	bl	8001b5c <HAL_GetTick>
 8005f2a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005f2e:	f7fb fe15 	bl	8001b5c <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e20d      	b.n	800635c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005f40:	f7ff fc35 	bl	80057ae <LL_RCC_LSI1_IsReady>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0f1      	beq.n	8005f2e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005f4a:	f7ff fc42 	bl	80057d2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4e:	f7fb fe05 	bl	8001b5c <HAL_GetTick>
 8005f52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005f56:	f7fb fe01 	bl	8001b5c <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e1f9      	b.n	800635c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005f68:	f7ff fc55 	bl	8005816 <LL_RCC_LSI2_IsReady>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f1      	beq.n	8005f56 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff fc5f 	bl	800583a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005f7c:	f7ff fc06 	bl	800578c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f80:	f7fb fdec 	bl	8001b5c <HAL_GetTick>
 8005f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005f88:	f7fb fde8 	bl	8001b5c <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e1e0      	b.n	800635c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005f9a:	f7ff fc08 	bl	80057ae <LL_RCC_LSI1_IsReady>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1f1      	bne.n	8005f88 <HAL_RCC_OscConfig+0x33c>
 8005fa4:	e051      	b.n	800604a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005fa6:	f7ff fbe0 	bl	800576a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005faa:	f7fb fdd7 	bl	8001b5c <HAL_GetTick>
 8005fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005fb2:	f7fb fdd3 	bl	8001b5c <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e1cb      	b.n	800635c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005fc4:	f7ff fbf3 	bl	80057ae <LL_RCC_LSI1_IsReady>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f1      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005fce:	f7ff fc11 	bl	80057f4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005fd2:	e00c      	b.n	8005fee <HAL_RCC_OscConfig+0x3a2>
 8005fd4:	20000004 	.word	0x20000004
 8005fd8:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005fdc:	f7fb fdbe 	bl	8001b5c <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e1b6      	b.n	800635c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005fee:	f7ff fc12 	bl	8005816 <LL_RCC_LSI2_IsReady>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1f1      	bne.n	8005fdc <HAL_RCC_OscConfig+0x390>
 8005ff8:	e027      	b.n	800604a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005ffa:	f7ff fbfb 	bl	80057f4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffe:	f7fb fdad 	bl	8001b5c <HAL_GetTick>
 8006002:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006004:	e008      	b.n	8006018 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006006:	f7fb fda9 	bl	8001b5c <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b03      	cmp	r3, #3
 8006012:	d901      	bls.n	8006018 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e1a1      	b.n	800635c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006018:	f7ff fbfd 	bl	8005816 <LL_RCC_LSI2_IsReady>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f1      	bne.n	8006006 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006022:	f7ff fbb3 	bl	800578c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006026:	f7fb fd99 	bl	8001b5c <HAL_GetTick>
 800602a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800602e:	f7fb fd95 	bl	8001b5c <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e18d      	b.n	800635c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006040:	f7ff fbb5 	bl	80057ae <LL_RCC_LSI1_IsReady>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f1      	bne.n	800602e <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	d05b      	beq.n	800610e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006056:	4bb5      	ldr	r3, [pc, #724]	; (800632c <HAL_RCC_OscConfig+0x6e0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605e:	2b00      	cmp	r3, #0
 8006060:	d114      	bne.n	800608c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006062:	f7ff fa43 	bl	80054ec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006066:	f7fb fd79 	bl	8001b5c <HAL_GetTick>
 800606a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606e:	f7fb fd75 	bl	8001b5c <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e16d      	b.n	800635c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006080:	4baa      	ldr	r3, [pc, #680]	; (800632c <HAL_RCC_OscConfig+0x6e0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0f0      	beq.n	800606e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d102      	bne.n	800609a <HAL_RCC_OscConfig+0x44e>
 8006094:	f7ff fb13 	bl	80056be <LL_RCC_LSE_Enable>
 8006098:	e00c      	b.n	80060b4 <HAL_RCC_OscConfig+0x468>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b05      	cmp	r3, #5
 80060a0:	d104      	bne.n	80060ac <HAL_RCC_OscConfig+0x460>
 80060a2:	f7ff fb2e 	bl	8005702 <LL_RCC_LSE_EnableBypass>
 80060a6:	f7ff fb0a 	bl	80056be <LL_RCC_LSE_Enable>
 80060aa:	e003      	b.n	80060b4 <HAL_RCC_OscConfig+0x468>
 80060ac:	f7ff fb18 	bl	80056e0 <LL_RCC_LSE_Disable>
 80060b0:	f7ff fb38 	bl	8005724 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d014      	beq.n	80060e6 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060bc:	f7fb fd4e 	bl	8001b5c <HAL_GetTick>
 80060c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80060c2:	e00a      	b.n	80060da <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c4:	f7fb fd4a 	bl	8001b5c <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e140      	b.n	800635c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80060da:	f7ff fb34 	bl	8005746 <LL_RCC_LSE_IsReady>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0ef      	beq.n	80060c4 <HAL_RCC_OscConfig+0x478>
 80060e4:	e013      	b.n	800610e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e6:	f7fb fd39 	bl	8001b5c <HAL_GetTick>
 80060ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80060ec:	e00a      	b.n	8006104 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ee:	f7fb fd35 	bl	8001b5c <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e12b      	b.n	800635c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006104:	f7ff fb1f 	bl	8005746 <LL_RCC_LSE_IsReady>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1ef      	bne.n	80060ee <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d02c      	beq.n	8006174 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d014      	beq.n	800614c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006122:	f7ff fa98 	bl	8005656 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006126:	f7fb fd19 	bl	8001b5c <HAL_GetTick>
 800612a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800612c:	e008      	b.n	8006140 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800612e:	f7fb fd15 	bl	8001b5c <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e10d      	b.n	800635c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006140:	f7ff faab 	bl	800569a <LL_RCC_HSI48_IsReady>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f1      	beq.n	800612e <HAL_RCC_OscConfig+0x4e2>
 800614a:	e013      	b.n	8006174 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800614c:	f7ff fa94 	bl	8005678 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006150:	f7fb fd04 	bl	8001b5c <HAL_GetTick>
 8006154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006158:	f7fb fd00 	bl	8001b5c <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e0f8      	b.n	800635c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800616a:	f7ff fa96 	bl	800569a <LL_RCC_HSI48_IsReady>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f1      	bne.n	8006158 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 80ee 	beq.w	800635a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800617e:	f7ff fbf4 	bl	800596a <LL_RCC_GetSysClkSource>
 8006182:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	2b02      	cmp	r3, #2
 8006192:	f040 80af 	bne.w	80062f4 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f003 0203 	and.w	r2, r3, #3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d123      	bne.n	80061ec <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d11c      	bne.n	80061ec <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	0a1b      	lsrs	r3, r3, #8
 80061b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061be:	429a      	cmp	r2, r3
 80061c0:	d114      	bne.n	80061ec <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d10d      	bne.n	80061ec <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061da:	429a      	cmp	r2, r3
 80061dc:	d106      	bne.n	80061ec <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d05d      	beq.n	80062a8 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	2b0c      	cmp	r3, #12
 80061f0:	d058      	beq.n	80062a4 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80061f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e0ab      	b.n	800635c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006204:	f7ff fc74 	bl	8005af0 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006208:	f7fb fca8 	bl	8001b5c <HAL_GetTick>
 800620c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800620e:	e008      	b.n	8006222 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006210:	f7fb fca4 	bl	8001b5c <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e09c      	b.n	800635c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1ef      	bne.n	8006210 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	4b3e      	ldr	r3, [pc, #248]	; (8006330 <HAL_RCC_OscConfig+0x6e4>)
 8006238:	4013      	ands	r3, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006242:	4311      	orrs	r1, r2
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006248:	0212      	lsls	r2, r2, #8
 800624a:	4311      	orrs	r1, r2
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006250:	4311      	orrs	r1, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006256:	4311      	orrs	r1, r2
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800625c:	430a      	orrs	r2, r1
 800625e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006262:	4313      	orrs	r3, r2
 8006264:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006266:	f7ff fc34 	bl	8005ad2 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800626a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006278:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800627a:	f7fb fc6f 	bl	8001b5c <HAL_GetTick>
 800627e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006282:	f7fb fc6b 	bl	8001b5c <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e063      	b.n	800635c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0ef      	beq.n	8006282 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062a2:	e05a      	b.n	800635a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e059      	b.n	800635c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d151      	bne.n	800635a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80062b6:	f7ff fc0c 	bl	8005ad2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062c8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062ca:	f7fb fc47 	bl	8001b5c <HAL_GetTick>
 80062ce:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062d0:	e008      	b.n	80062e4 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d2:	f7fb fc43 	bl	8001b5c <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e03b      	b.n	800635c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0ef      	beq.n	80062d2 <HAL_RCC_OscConfig+0x686>
 80062f2:	e032      	b.n	800635a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b0c      	cmp	r3, #12
 80062f8:	d02d      	beq.n	8006356 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062fa:	f7ff fbf9 	bl	8005af0 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80062fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006308:	f023 0303 	bic.w	r3, r3, #3
 800630c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800630e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006318:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800631c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006320:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006322:	f7fb fc1b 	bl	8001b5c <HAL_GetTick>
 8006326:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006328:	e00d      	b.n	8006346 <HAL_RCC_OscConfig+0x6fa>
 800632a:	bf00      	nop
 800632c:	58000400 	.word	0x58000400
 8006330:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006334:	f7fb fc12 	bl	8001b5c <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e00a      	b.n	800635c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1ef      	bne.n	8006334 <HAL_RCC_OscConfig+0x6e8>
 8006354:	e001      	b.n	800635a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3734      	adds	r7, #52	; 0x34
 8006360:	46bd      	mov	sp, r7
 8006362:	bd90      	pop	{r4, r7, pc}

08006364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e12d      	b.n	80065d4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006378:	4b98      	ldr	r3, [pc, #608]	; (80065dc <HAL_RCC_ClockConfig+0x278>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d91b      	bls.n	80063be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006386:	4b95      	ldr	r3, [pc, #596]	; (80065dc <HAL_RCC_ClockConfig+0x278>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f023 0207 	bic.w	r2, r3, #7
 800638e:	4993      	ldr	r1, [pc, #588]	; (80065dc <HAL_RCC_ClockConfig+0x278>)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	4313      	orrs	r3, r2
 8006394:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006396:	f7fb fbe1 	bl	8001b5c <HAL_GetTick>
 800639a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800639c:	e008      	b.n	80063b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800639e:	f7fb fbdd 	bl	8001b5c <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e111      	b.n	80065d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b0:	4b8a      	ldr	r3, [pc, #552]	; (80065dc <HAL_RCC_ClockConfig+0x278>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d1ef      	bne.n	800639e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff fad7 	bl	8005982 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063d4:	f7fb fbc2 	bl	8001b5c <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063dc:	f7fb fbbe 	bl	8001b5c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e0f2      	b.n	80065d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063ee:	f7ff fbd1 	bl	8005b94 <LL_RCC_IsActiveFlag_HPRE>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0f1      	beq.n	80063dc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0320 	and.w	r3, r3, #32
 8006400:	2b00      	cmp	r3, #0
 8006402:	d016      	beq.n	8006432 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff face 	bl	80059aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800640e:	f7fb fba5 	bl	8001b5c <HAL_GetTick>
 8006412:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006414:	e008      	b.n	8006428 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006416:	f7fb fba1 	bl	8001b5c <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e0d5      	b.n	80065d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006428:	f7ff fbc6 	bl	8005bb8 <LL_RCC_IsActiveFlag_C2HPRE>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f1      	beq.n	8006416 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d016      	beq.n	800646c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff fac7 	bl	80059d6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006448:	f7fb fb88 	bl	8001b5c <HAL_GetTick>
 800644c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800644e:	e008      	b.n	8006462 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006450:	f7fb fb84 	bl	8001b5c <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e0b8      	b.n	80065d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006462:	f7ff fbbc 	bl	8005bde <LL_RCC_IsActiveFlag_SHDHPRE>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0f1      	beq.n	8006450 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d016      	beq.n	80064a6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fac1 	bl	8005a04 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006482:	f7fb fb6b 	bl	8001b5c <HAL_GetTick>
 8006486:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006488:	e008      	b.n	800649c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800648a:	f7fb fb67 	bl	8001b5c <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e09b      	b.n	80065d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800649c:	f7ff fbb2 	bl	8005c04 <LL_RCC_IsActiveFlag_PPRE1>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0f1      	beq.n	800648a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d017      	beq.n	80064e2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff fab7 	bl	8005a2c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064be:	f7fb fb4d 	bl	8001b5c <HAL_GetTick>
 80064c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80064c4:	e008      	b.n	80064d8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064c6:	f7fb fb49 	bl	8001b5c <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d901      	bls.n	80064d8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e07d      	b.n	80065d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80064d8:	f7ff fba6 	bl	8005c28 <LL_RCC_IsActiveFlag_PPRE2>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0f1      	beq.n	80064c6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d043      	beq.n	8006576 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d106      	bne.n	8006504 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80064f6:	f7ff f857 	bl	80055a8 <LL_RCC_HSE_IsReady>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d11e      	bne.n	800653e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e067      	b.n	80065d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d106      	bne.n	800651a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800650c:	f7ff faff 	bl	8005b0e <LL_RCC_PLL_IsReady>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d113      	bne.n	800653e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e05c      	b.n	80065d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006522:	f7ff f9bf 	bl	80058a4 <LL_RCC_MSI_IsReady>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d108      	bne.n	800653e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e051      	b.n	80065d4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006530:	f7ff f86a 	bl	8005608 <LL_RCC_HSI_IsReady>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e04a      	b.n	80065d4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff f9fd 	bl	8005942 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006548:	f7fb fb08 	bl	8001b5c <HAL_GetTick>
 800654c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654e:	e00a      	b.n	8006566 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006550:	f7fb fb04 	bl	8001b5c <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f241 3288 	movw	r2, #5000	; 0x1388
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e036      	b.n	80065d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006566:	f7ff fa00 	bl	800596a <LL_RCC_GetSysClkSource>
 800656a:	4602      	mov	r2, r0
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	429a      	cmp	r2, r3
 8006574:	d1ec      	bne.n	8006550 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006576:	4b19      	ldr	r3, [pc, #100]	; (80065dc <HAL_RCC_ClockConfig+0x278>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	429a      	cmp	r2, r3
 8006582:	d21b      	bcs.n	80065bc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006584:	4b15      	ldr	r3, [pc, #84]	; (80065dc <HAL_RCC_ClockConfig+0x278>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f023 0207 	bic.w	r2, r3, #7
 800658c:	4913      	ldr	r1, [pc, #76]	; (80065dc <HAL_RCC_ClockConfig+0x278>)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	4313      	orrs	r3, r2
 8006592:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006594:	f7fb fae2 	bl	8001b5c <HAL_GetTick>
 8006598:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800659a:	e008      	b.n	80065ae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800659c:	f7fb fade 	bl	8001b5c <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e012      	b.n	80065d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ae:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <HAL_RCC_ClockConfig+0x278>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d1ef      	bne.n	800659c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80065bc:	f000 f87e 	bl	80066bc <HAL_RCC_GetHCLKFreq>
 80065c0:	4603      	mov	r3, r0
 80065c2:	4a07      	ldr	r2, [pc, #28]	; (80065e0 <HAL_RCC_ClockConfig+0x27c>)
 80065c4:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80065c6:	f7fb fad5 	bl	8001b74 <HAL_GetTickPrio>
 80065ca:	4603      	mov	r3, r0
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fa ff13 	bl	80013f8 <HAL_InitTick>
 80065d2:	4603      	mov	r3, r0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	58004000 	.word	0x58004000
 80065e0:	20000004 	.word	0x20000004

080065e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065e4:	b590      	push	{r4, r7, lr}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ea:	f7ff f9be 	bl	800596a <LL_RCC_GetSysClkSource>
 80065ee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10a      	bne.n	800660c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80065f6:	f7ff f97a 	bl	80058ee <LL_RCC_MSI_GetRange>
 80065fa:	4603      	mov	r3, r0
 80065fc:	091b      	lsrs	r3, r3, #4
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	4a2b      	ldr	r2, [pc, #172]	; (80066b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	e04b      	b.n	80066a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b04      	cmp	r3, #4
 8006610:	d102      	bne.n	8006618 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006612:	4b28      	ldr	r3, [pc, #160]	; (80066b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	e045      	b.n	80066a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b08      	cmp	r3, #8
 800661c:	d10a      	bne.n	8006634 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800661e:	f7fe ff93 	bl	8005548 <LL_RCC_HSE_IsEnabledDiv2>
 8006622:	4603      	mov	r3, r0
 8006624:	2b01      	cmp	r3, #1
 8006626:	d102      	bne.n	800662e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006628:	4b22      	ldr	r3, [pc, #136]	; (80066b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	e03a      	b.n	80066a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800662e:	4b22      	ldr	r3, [pc, #136]	; (80066b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	e037      	b.n	80066a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006634:	f7ff faa2 	bl	8005b7c <LL_RCC_PLL_GetMainSource>
 8006638:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d003      	beq.n	8006648 <HAL_RCC_GetSysClockFreq+0x64>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b03      	cmp	r3, #3
 8006644:	d003      	beq.n	800664e <HAL_RCC_GetSysClockFreq+0x6a>
 8006646:	e00d      	b.n	8006664 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006648:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800664a:	60bb      	str	r3, [r7, #8]
        break;
 800664c:	e015      	b.n	800667a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800664e:	f7fe ff7b 	bl	8005548 <LL_RCC_HSE_IsEnabledDiv2>
 8006652:	4603      	mov	r3, r0
 8006654:	2b01      	cmp	r3, #1
 8006656:	d102      	bne.n	800665e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006658:	4b16      	ldr	r3, [pc, #88]	; (80066b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800665a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800665c:	e00d      	b.n	800667a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800665e:	4b16      	ldr	r3, [pc, #88]	; (80066b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006660:	60bb      	str	r3, [r7, #8]
        break;
 8006662:	e00a      	b.n	800667a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006664:	f7ff f943 	bl	80058ee <LL_RCC_MSI_GetRange>
 8006668:	4603      	mov	r3, r0
 800666a:	091b      	lsrs	r3, r3, #4
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	4a0f      	ldr	r2, [pc, #60]	; (80066b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006676:	60bb      	str	r3, [r7, #8]
        break;
 8006678:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800667a:	f7ff fa5a 	bl	8005b32 <LL_RCC_PLL_GetN>
 800667e:	4602      	mov	r2, r0
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	fb03 f402 	mul.w	r4, r3, r2
 8006686:	f7ff fa6d 	bl	8005b64 <LL_RCC_PLL_GetDivider>
 800668a:	4603      	mov	r3, r0
 800668c:	091b      	lsrs	r3, r3, #4
 800668e:	3301      	adds	r3, #1
 8006690:	fbb4 f4f3 	udiv	r4, r4, r3
 8006694:	f7ff fa5a 	bl	8005b4c <LL_RCC_PLL_GetR>
 8006698:	4603      	mov	r3, r0
 800669a:	0f5b      	lsrs	r3, r3, #29
 800669c:	3301      	adds	r3, #1
 800669e:	fbb4 f3f3 	udiv	r3, r4, r3
 80066a2:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80066a4:	68fb      	ldr	r3, [r7, #12]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd90      	pop	{r4, r7, pc}
 80066ae:	bf00      	nop
 80066b0:	080125a8 	.word	0x080125a8
 80066b4:	00f42400 	.word	0x00f42400
 80066b8:	01e84800 	.word	0x01e84800

080066bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066bc:	b598      	push	{r3, r4, r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80066c0:	f7ff ff90 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 80066c4:	4604      	mov	r4, r0
 80066c6:	f7ff f9c5 	bl	8005a54 <LL_RCC_GetAHBPrescaler>
 80066ca:	4603      	mov	r3, r0
 80066cc:	091b      	lsrs	r3, r3, #4
 80066ce:	f003 030f 	and.w	r3, r3, #15
 80066d2:	4a03      	ldr	r2, [pc, #12]	; (80066e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80066d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80066dc:	4618      	mov	r0, r3
 80066de:	bd98      	pop	{r3, r4, r7, pc}
 80066e0:	08012548 	.word	0x08012548

080066e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066e4:	b598      	push	{r3, r4, r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80066e8:	f7ff ffe8 	bl	80066bc <HAL_RCC_GetHCLKFreq>
 80066ec:	4604      	mov	r4, r0
 80066ee:	f7ff f9e4 	bl	8005aba <LL_RCC_GetAPB2Prescaler>
 80066f2:	4603      	mov	r3, r0
 80066f4:	0adb      	lsrs	r3, r3, #11
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	4a04      	ldr	r2, [pc, #16]	; (800670c <HAL_RCC_GetPCLK2Freq+0x28>)
 80066fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006700:	f003 031f 	and.w	r3, r3, #31
 8006704:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006708:	4618      	mov	r0, r3
 800670a:	bd98      	pop	{r3, r4, r7, pc}
 800670c:	08012588 	.word	0x08012588

08006710 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	226f      	movs	r2, #111	; 0x6f
 800671e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8006720:	f7ff f923 	bl	800596a <LL_RCC_GetSysClkSource>
 8006724:	4602      	mov	r2, r0
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800672a:	f7ff f993 	bl	8005a54 <LL_RCC_GetAHBPrescaler>
 800672e:	4602      	mov	r2, r0
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8006734:	f7ff f9b5 	bl	8005aa2 <LL_RCC_GetAPB1Prescaler>
 8006738:	4602      	mov	r2, r0
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800673e:	f7ff f9bc 	bl	8005aba <LL_RCC_GetAPB2Prescaler>
 8006742:	4602      	mov	r2, r0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006748:	f7ff f990 	bl	8005a6c <LL_C2_RCC_GetAHBPrescaler>
 800674c:	4602      	mov	r2, r0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8006752:	f7ff f998 	bl	8005a86 <LL_RCC_GetAHB4Prescaler>
 8006756:	4602      	mov	r2, r0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800675c:	4b04      	ldr	r3, [pc, #16]	; (8006770 <HAL_RCC_GetClockConfig+0x60>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0207 	and.w	r2, r3, #7
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	601a      	str	r2, [r3, #0]
}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	58004000 	.word	0x58004000

08006774 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006774:	b590      	push	{r4, r7, lr}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2bb0      	cmp	r3, #176	; 0xb0
 8006780:	d903      	bls.n	800678a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	e007      	b.n	800679a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	091b      	lsrs	r3, r3, #4
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	4a11      	ldr	r2, [pc, #68]	; (80067d8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006798:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800679a:	f7ff f974 	bl	8005a86 <LL_RCC_GetAHB4Prescaler>
 800679e:	4603      	mov	r3, r0
 80067a0:	091b      	lsrs	r3, r3, #4
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	4a0d      	ldr	r2, [pc, #52]	; (80067dc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80067a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4a0a      	ldr	r2, [pc, #40]	; (80067e0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	0c9c      	lsrs	r4, r3, #18
 80067be:	f7fe fea5 	bl	800550c <HAL_PWREx_GetVoltageRange>
 80067c2:	4603      	mov	r3, r0
 80067c4:	4619      	mov	r1, r3
 80067c6:	4620      	mov	r0, r4
 80067c8:	f000 f80c 	bl	80067e4 <RCC_SetFlashLatency>
 80067cc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd90      	pop	{r4, r7, pc}
 80067d6:	bf00      	nop
 80067d8:	080125a8 	.word	0x080125a8
 80067dc:	08012548 	.word	0x08012548
 80067e0:	431bde83 	.word	0x431bde83

080067e4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80067e4:	b590      	push	{r4, r7, lr}
 80067e6:	b093      	sub	sp, #76	; 0x4c
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80067ee:	4b39      	ldr	r3, [pc, #228]	; (80068d4 <RCC_SetFlashLatency+0xf0>)
 80067f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80067f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80067fa:	4a37      	ldr	r2, [pc, #220]	; (80068d8 <RCC_SetFlashLatency+0xf4>)
 80067fc:	f107 031c 	add.w	r3, r7, #28
 8006800:	ca07      	ldmia	r2, {r0, r1, r2}
 8006802:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006806:	4b35      	ldr	r3, [pc, #212]	; (80068dc <RCC_SetFlashLatency+0xf8>)
 8006808:	f107 040c 	add.w	r4, r7, #12
 800680c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800680e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006812:	2300      	movs	r3, #0
 8006814:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800681c:	d11c      	bne.n	8006858 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800681e:	2300      	movs	r3, #0
 8006820:	643b      	str	r3, [r7, #64]	; 0x40
 8006822:	e015      	b.n	8006850 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800682c:	4413      	add	r3, r2
 800682e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	d808      	bhi.n	800684a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006840:	4413      	add	r3, r2
 8006842:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006846:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006848:	e022      	b.n	8006890 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800684a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800684c:	3301      	adds	r3, #1
 800684e:	643b      	str	r3, [r7, #64]	; 0x40
 8006850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006852:	2b03      	cmp	r3, #3
 8006854:	d9e6      	bls.n	8006824 <RCC_SetFlashLatency+0x40>
 8006856:	e01b      	b.n	8006890 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006858:	2300      	movs	r3, #0
 800685a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800685c:	e015      	b.n	800688a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800685e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006866:	4413      	add	r3, r2
 8006868:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	429a      	cmp	r2, r3
 8006870:	d808      	bhi.n	8006884 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800687a:	4413      	add	r3, r2
 800687c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006880:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006882:	e005      	b.n	8006890 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006886:	3301      	adds	r3, #1
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800688a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688c:	2b02      	cmp	r3, #2
 800688e:	d9e6      	bls.n	800685e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006890:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <RCC_SetFlashLatency+0xfc>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f023 0207 	bic.w	r2, r3, #7
 8006898:	4911      	ldr	r1, [pc, #68]	; (80068e0 <RCC_SetFlashLatency+0xfc>)
 800689a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800689c:	4313      	orrs	r3, r2
 800689e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80068a0:	f7fb f95c 	bl	8001b5c <HAL_GetTick>
 80068a4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80068a6:	e008      	b.n	80068ba <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80068a8:	f7fb f958 	bl	8001b5c <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e007      	b.n	80068ca <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80068ba:	4b09      	ldr	r3, [pc, #36]	; (80068e0 <RCC_SetFlashLatency+0xfc>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d1ef      	bne.n	80068a8 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	374c      	adds	r7, #76	; 0x4c
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd90      	pop	{r4, r7, pc}
 80068d2:	bf00      	nop
 80068d4:	08012434 	.word	0x08012434
 80068d8:	08012444 	.word	0x08012444
 80068dc:	08012450 	.word	0x08012450
 80068e0:	58004000 	.word	0x58004000

080068e4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80068e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068f6:	d101      	bne.n	80068fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <LL_RCC_HSE_IsReady>:
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800690c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800691a:	d101      	bne.n	8006920 <LL_RCC_HSE_IsReady+0x18>
 800691c:	2301      	movs	r3, #1
 800691e:	e000      	b.n	8006922 <LL_RCC_HSE_IsReady+0x1a>
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <LL_RCC_HSI_IsReady>:
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800693a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800693e:	d101      	bne.n	8006944 <LL_RCC_HSI_IsReady+0x18>
 8006940:	2301      	movs	r3, #1
 8006942:	e000      	b.n	8006946 <LL_RCC_HSI_IsReady+0x1a>
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <LL_RCC_HSI48_IsReady>:
{
 8006950:	b480      	push	{r7}
 8006952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006958:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b02      	cmp	r3, #2
 8006962:	d101      	bne.n	8006968 <LL_RCC_HSI48_IsReady+0x18>
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <LL_RCC_HSI48_IsReady+0x1a>
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <LL_RCC_LSE_IsEnabled>:
{
 8006974:	b480      	push	{r7}
 8006976:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800697c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b01      	cmp	r3, #1
 8006986:	d101      	bne.n	800698c <LL_RCC_LSE_IsEnabled+0x18>
 8006988:	2301      	movs	r3, #1
 800698a:	e000      	b.n	800698e <LL_RCC_LSE_IsEnabled+0x1a>
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <LL_RCC_LSE_IsReady>:
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800699c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d101      	bne.n	80069b0 <LL_RCC_LSE_IsReady+0x18>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <LL_RCC_LSE_IsReady+0x1a>
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <LL_RCC_LSI1_IsReady>:
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80069c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d101      	bne.n	80069d4 <LL_RCC_LSI1_IsReady+0x18>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <LL_RCC_LSI1_IsReady+0x1a>
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <LL_RCC_LSI2_IsReady>:
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80069e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069ec:	f003 0308 	and.w	r3, r3, #8
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d101      	bne.n	80069f8 <LL_RCC_LSI2_IsReady+0x18>
 80069f4:	2301      	movs	r3, #1
 80069f6:	e000      	b.n	80069fa <LL_RCC_LSI2_IsReady+0x1a>
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <LL_RCC_MSI_IsReady>:
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d101      	bne.n	8006a1a <LL_RCC_MSI_IsReady+0x16>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <LL_RCC_MSI_IsReady+0x18>
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <LL_RCC_MSI_EnablePLLMode>:
{
 8006a26:	b480      	push	{r7}
 8006a28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8006a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a34:	f043 0304 	orr.w	r3, r3, #4
 8006a38:	6013      	str	r3, [r2, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <LL_RCC_MSI_GetRange>:
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a54:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2bb0      	cmp	r3, #176	; 0xb0
 8006a5a:	d901      	bls.n	8006a60 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006a5c:	23b0      	movs	r3, #176	; 0xb0
 8006a5e:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006a60:	687b      	ldr	r3, [r7, #4]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <LL_RCC_SetRFWKPClockSource>:
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <LL_RCC_GetRFWKPClockSource>:
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 8006a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <LL_RCC_GetAHBPrescaler>:
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <LL_RCC_GetAPB1Prescaler>:
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <LL_RCC_GetAPB2Prescaler>:
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <LL_RCC_SetSMPSClockSource>:
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	f023 0203 	bic.w	r2, r3, #3
 8006b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <LL_RCC_GetSMPSClockSource>:
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8006b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <LL_RCC_SetSMPSPrescaler>:
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <LL_RCC_GetSMPSPrescaler>:
{
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 8006b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <LL_RCC_SetUSARTClockSource>:
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8c:	f023 0203 	bic.w	r2, r3, #3
 8006b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <LL_RCC_SetLPUARTClockSource>:
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <LL_RCC_SetI2CClockSource>:
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	091b      	lsrs	r3, r3, #4
 8006be8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006bec:	43db      	mvns	r3, r3
 8006bee:	401a      	ands	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006bf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <LL_RCC_SetLPTIMClockSource>:
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	0c1b      	lsrs	r3, r3, #16
 8006c22:	041b      	lsls	r3, r3, #16
 8006c24:	43db      	mvns	r3, r3
 8006c26:	401a      	ands	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	041b      	lsls	r3, r3, #16
 8006c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <LL_RCC_SetSAIClockSource>:
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <LL_RCC_SetRNGClockSource>:
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <LL_RCC_SetCLK48ClockSource>:
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <LL_RCC_SetUSBClockSource>:
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff ffe3 	bl	8006c9a <LL_RCC_SetCLK48ClockSource>
}
 8006cd4:	bf00      	nop
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <LL_RCC_SetADCClockSource>:
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006cf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <LL_RCC_GetUSARTClockSource>:
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4013      	ands	r3, r2
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <LL_RCC_GetLPUARTClockSource>:
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4013      	ands	r3, r2
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <LL_RCC_GetI2CClockSource>:
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8006d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	091a      	lsrs	r2, r3, #4
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	4313      	orrs	r3, r2
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <LL_RCC_GetLPTIMClockSource>:
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8006d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4013      	ands	r3, r2
 8006d84:	0c1a      	lsrs	r2, r3, #16
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4313      	orrs	r3, r2
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <LL_RCC_GetSAIClockSource>:
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 8006d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4013      	ands	r3, r2
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <LL_RCC_GetRNGClockSource>:
{
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 8006dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4013      	ands	r3, r2
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <LL_RCC_GetCLK48ClockSource>:
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8006dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4013      	ands	r3, r2
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <LL_RCC_GetUSBClockSource>:
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff ffe9 	bl	8006dd6 <LL_RCC_GetCLK48ClockSource>
 8006e04:	4603      	mov	r3, r0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <LL_RCC_GetADCClockSource>:
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8006e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4013      	ands	r3, r2
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <LL_RCC_SetRTCClockSource>:
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <LL_RCC_GetRTCClockSource>:
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <LL_RCC_ForceBackupDomainReset>:
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006e8c:	bf00      	nop
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006e96:	b480      	push	{r7}
 8006e98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006eae:	bf00      	nop
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <LL_RCC_PLL_IsReady>:
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eca:	d101      	bne.n	8006ed0 <LL_RCC_PLL_IsReady+0x18>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e000      	b.n	8006ed2 <LL_RCC_PLL_IsReady+0x1a>
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <LL_RCC_PLL_GetN>:
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	0a1b      	lsrs	r3, r3, #8
 8006ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <LL_RCC_PLL_GetP>:
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <LL_RCC_PLL_GetQ>:
{
 8006f0e:	b480      	push	{r7}
 8006f10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8006f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <LL_RCC_PLL_GetDivider>:
{
 8006f26:	b480      	push	{r7}
 8006f28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <LL_RCC_PLLSAI1_Enable>:
{
 8006f3e:	b480      	push	{r7}
 8006f40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f50:	6013      	str	r3, [r2, #0]
}
 8006f52:	bf00      	nop
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <LL_RCC_PLLSAI1_Disable>:
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f6e:	6013      	str	r3, [r2, #0]
}
 8006f70:	bf00      	nop
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <LL_RCC_PLLSAI1_IsReady>:
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f8c:	d101      	bne.n	8006f92 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <LL_RCC_PLLSAI1_GetN>:
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8006fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	0a1b      	lsrs	r3, r3, #8
 8006faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <LL_RCC_PLLSAI1_GetP>:
{
 8006fb8:	b480      	push	{r7}
 8006fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8006fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <LL_RCC_PLLSAI1_GetQ>:
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8006fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <LL_RCC_PLLSAI1_GetR>:
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8006fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <LL_RCC_PLL_GetMainSource>:
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f003 0303 	and.w	r3, r3, #3
}
 800700e:	4618      	mov	r0, r3
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007020:	2300      	movs	r3, #0
 8007022:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007024:	2300      	movs	r3, #0
 8007026:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	d034      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007038:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800703c:	d021      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800703e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007042:	d81b      	bhi.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007044:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007048:	d01d      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800704a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800704e:	d815      	bhi.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00b      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007058:	d110      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800705a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007068:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800706a:	e00d      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3304      	adds	r3, #4
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fd64 	bl	8007b3e <RCCEx_PLLSAI1_ConfigNP>
 8007076:	4603      	mov	r3, r0
 8007078:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800707a:	e005      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	77fb      	strb	r3, [r7, #31]
        break;
 8007080:	e002      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007082:	bf00      	nop
 8007084:	e000      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007088:	7ffb      	ldrb	r3, [r7, #31]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d105      	bne.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff fdd5 	bl	8006c42 <LL_RCC_SetSAIClockSource>
 8007098:	e001      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709a:	7ffb      	ldrb	r3, [r7, #31]
 800709c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d046      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80070aa:	f7ff fed6 	bl	8006e5a <LL_RCC_GetRTCClockSource>
 80070ae:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d03c      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80070ba:	f7fe fa17 	bl	80054ec <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d105      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff feb0 	bl	8006e2e <LL_RCC_SetRTCClockSource>
 80070ce:	e02e      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80070d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80070da:	f7ff fecb 	bl	8006e74 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80070de:	f7ff feda 	bl	8006e96 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	4313      	orrs	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80070f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80070fa:	f7ff fc3b 	bl	8006974 <LL_RCC_LSE_IsEnabled>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b01      	cmp	r3, #1
 8007102:	d114      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007104:	f7fa fd2a 	bl	8001b5c <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800710a:	e00b      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800710c:	f7fa fd26 	bl	8001b5c <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	f241 3288 	movw	r2, #5000	; 0x1388
 800711a:	4293      	cmp	r3, r2
 800711c:	d902      	bls.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	77fb      	strb	r3, [r7, #31]
              break;
 8007122:	e004      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007124:	f7ff fc38 	bl	8006998 <LL_RCC_LSE_IsReady>
 8007128:	4603      	mov	r3, r0
 800712a:	2b01      	cmp	r3, #1
 800712c:	d1ee      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800712e:	7ffb      	ldrb	r3, [r7, #31]
 8007130:	77bb      	strb	r3, [r7, #30]
 8007132:	e001      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007134:	7ffb      	ldrb	r3, [r7, #31]
 8007136:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d004      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff fd17 	bl	8006b7c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff fd22 	bl	8006ba8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0310 	and.w	r3, r3, #16
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff fd4a 	bl	8006c0e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff fd3f 	bl	8006c0e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d004      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff fd17 	bl	8006bd4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d004      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff fd0c 	bl	8006bd4 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d022      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff fd7a 	bl	8006cc6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071da:	d107      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80071dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071ea:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071f4:	d10b      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3304      	adds	r3, #4
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fcfa 	bl	8007bf4 <RCCEx_PLLSAI1_ConfigNQ>
 8007200:	4603      	mov	r3, r0
 8007202:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007204:	7ffb      	ldrb	r3, [r7, #31]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800720a:	7ffb      	ldrb	r3, [r7, #31]
 800720c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007216:	2b00      	cmp	r3, #0
 8007218:	d02b      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007222:	d008      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800722c:	d003      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	2b00      	cmp	r3, #0
 8007234:	d105      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff fd17 	bl	8006c6e <LL_RCC_SetRNGClockSource>
 8007240:	e00a      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	2000      	movs	r0, #0
 800724e:	f7ff fd0e 	bl	8006c6e <LL_RCC_SetRNGClockSource>
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff fd21 	bl	8006c9a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007260:	d107      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800726c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007270:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800727a:	2b00      	cmp	r3, #0
 800727c:	d022      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fd2a 	bl	8006cdc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007290:	d107      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800729c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072aa:	d10b      	bne.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fcfa 	bl	8007caa <RCCEx_PLLSAI1_ConfigNR>
 80072b6:	4603      	mov	r3, r0
 80072b8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80072ba:	7ffb      	ldrb	r3, [r7, #31]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80072c0:	7ffb      	ldrb	r3, [r7, #31]
 80072c2:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7ff fbca 	bl	8006a6e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d009      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff fc26 	bl	8006b3c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff fc01 	bl	8006afc <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80072fa:	7fbb      	ldrb	r3, [r7, #30]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3720      	adds	r7, #32
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007304:	b590      	push	{r4, r7, lr}
 8007306:	b093      	sub	sp, #76	; 0x4c
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	647b      	str	r3, [r7, #68]	; 0x44
  
#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 8007310:	f7ff fc28 	bl	8006b64 <LL_RCC_GetSMPSPrescaler>
 8007314:	4603      	mov	r3, r0
 8007316:	091b      	lsrs	r3, r3, #4
 8007318:	643b      	str	r3, [r7, #64]	; 0x40
#endif
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007320:	d12d      	bne.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 8007322:	f7ff fd9a 	bl	8006e5a <LL_RCC_GetRTCClockSource>
 8007326:	6138      	str	r0, [r7, #16]
    
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800732e:	d109      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007330:	f7ff fb32 	bl	8006998 <LL_RCC_LSE_IsReady>
 8007334:	4603      	mov	r3, r0
 8007336:	2b01      	cmp	r3, #1
 8007338:	f040 83d8 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800733c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007340:	647b      	str	r3, [r7, #68]	; 0x44
 8007342:	e3d3      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800734a:	d110      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800734c:	f7ff fb36 	bl	80069bc <LL_RCC_LSI1_IsReady>
 8007350:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007352:	f7ff fb45 	bl	80069e0 <LL_RCC_LSI2_IsReady>
 8007356:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d003      	beq.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2b01      	cmp	r3, #1
 8007362:	f040 83c3 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8007366:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800736a:	647b      	str	r3, [r7, #68]	; 0x44
 800736c:	e3be      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007374:	f040 83ba 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 32U;
 8007378:	4bba      	ldr	r3, [pc, #744]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 800737a:	647b      	str	r3, [r7, #68]	; 0x44
 800737c:	e3b6      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b40      	cmp	r3, #64	; 0x40
 8007382:	d130      	bne.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 8007384:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8007388:	f7ff fd05 	bl	8006d96 <LL_RCC_GetSAIClockSource>
 800738c:	4603      	mov	r3, r0
 800738e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007392:	d008      	beq.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8007394:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007398:	d822      	bhi.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00c      	beq.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800739e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073a2:	d013      	beq.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80073a4:	e01c      	b.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
    case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
      if (LL_RCC_HSI_IsReady() == 1U)
 80073a6:	f7ff fac1 	bl	800692c <LL_RCC_HSI_IsReady>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	f040 837e 	bne.w	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      {
        frequency = HSI_VALUE;
 80073b2:	4bad      	ldr	r3, [pc, #692]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80073b4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80073b6:	e37a      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      
#if defined(SAI1)
    case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80073b8:	f7ff fddf 	bl	8006f7a <LL_RCC_PLLSAI1_IsReady>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b01      	cmp	r3, #1
 80073c0:	f040 8377 	bne.w	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_P();
 80073c4:	f000 fdce 	bl	8007f64 <RCC_PLLSAI1_GetFreqDomain_P>
 80073c8:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80073ca:	e372      	b.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
#endif
      
    case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 80073cc:	f7ff fd74 	bl	8006eb8 <LL_RCC_PLL_IsReady>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	f040 836f 	bne.w	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      {
        frequency = RCC_PLL_GetFreqDomain_P();
 80073d8:	f000 fcc2 	bl	8007d60 <RCC_PLL_GetFreqDomain_P>
 80073dc:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80073de:	e36a      	b.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      
    default: /* External input clock used as SAI1 clock source */
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80073e0:	4ba2      	ldr	r3, [pc, #648]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 80073e2:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 80073e4:	e382      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ec:	d168      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 80073ee:	f000 fb87 	bl	8007b00 <HAL_RCCEx_GetRngCLKSource>
 80073f2:	61f8      	str	r0, [r7, #28]
    
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fa:	d110      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80073fc:	f7ff fade 	bl	80069bc <LL_RCC_LSI1_IsReady>
 8007400:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007402:	f7ff faed 	bl	80069e0 <LL_RCC_LSI2_IsReady>
 8007406:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d003      	beq.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b01      	cmp	r3, #1
 8007412:	f040 836b 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8007416:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800741a:	647b      	str	r3, [r7, #68]	; 0x44
 800741c:	e366      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007424:	d109      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007426:	f7ff fab7 	bl	8006998 <LL_RCC_LSE_IsReady>
 800742a:	4603      	mov	r3, r0
 800742c:	2b01      	cmp	r3, #1
 800742e:	f040 835d 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8007432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007436:	647b      	str	r3, [r7, #68]	; 0x44
 8007438:	e358      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007440:	d10e      	bne.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 8007442:	f7ff fd39 	bl	8006eb8 <LL_RCC_PLL_IsReady>
 8007446:	4603      	mov	r3, r0
 8007448:	2b01      	cmp	r3, #1
 800744a:	f040 834f 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 800744e:	f000 fcdd 	bl	8007e0c <RCC_PLL_GetFreqDomain_Q>
 8007452:	4603      	mov	r3, r0
 8007454:	4a86      	ldr	r2, [pc, #536]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007456:	fba2 2303 	umull	r2, r3, r2, r3
 800745a:	085b      	lsrs	r3, r3, #1
 800745c:	647b      	str	r3, [r7, #68]	; 0x44
 800745e:	e345      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 8007466:	d114      	bne.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 8007468:	f7ff facc 	bl	8006a04 <LL_RCC_MSI_IsReady>
 800746c:	4603      	mov	r3, r0
 800746e:	2b01      	cmp	r3, #1
 8007470:	f040 833c 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 8007474:	f7ff fae6 	bl	8006a44 <LL_RCC_MSI_GetRange>
 8007478:	4603      	mov	r3, r0
 800747a:	091b      	lsrs	r3, r3, #4
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	4a7c      	ldr	r2, [pc, #496]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8007482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007486:	4a7a      	ldr	r2, [pc, #488]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007488:	fba2 2303 	umull	r2, r3, r2, r3
 800748c:	085b      	lsrs	r3, r3, #1
 800748e:	647b      	str	r3, [r7, #68]	; 0x44
 8007490:	e32c      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 8007498:	d109      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800749a:	f7ff fd6e 	bl	8006f7a <LL_RCC_PLLSAI1_IsReady>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	f040 8323 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 80074a6:	f000 fdb3 	bl	8008010 <RCC_PLLSAI1_GetFreqDomain_Q>
 80074aa:	6478      	str	r0, [r7, #68]	; 0x44
 80074ac:	e31e      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 80074ae:	f7ff fa4f 	bl	8006950 <LL_RCC_HSI48_IsReady>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	f040 8319 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI48_VALUE / 3U;
 80074ba:	4b6b      	ldr	r3, [pc, #428]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80074bc:	647b      	str	r3, [r7, #68]	; 0x44
 80074be:	e315      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      /* Nothing to do as frequency already initialized to 0U */
#endif
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c6:	d13f      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 80074c8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 80074cc:	f7ff fc93 	bl	8006df6 <LL_RCC_GetUSBClockSource>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074d6:	d01d      	beq.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80074d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074dc:	d82b      	bhi.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 80074de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074e2:	d003      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 80074e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074e8:	d00a      	beq.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80074ea:	e024      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
    case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80074ec:	f7ff fd45 	bl	8006f7a <LL_RCC_PLLSAI1_IsReady>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	f040 82e1 	bne.w	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 80074f8:	f000 fd8a 	bl	8008010 <RCC_PLLSAI1_GetFreqDomain_Q>
 80074fc:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80074fe:	e2dc      	b.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
#endif
      
    case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8007500:	f7ff fcda 	bl	8006eb8 <LL_RCC_PLL_IsReady>
 8007504:	4603      	mov	r3, r0
 8007506:	2b01      	cmp	r3, #1
 8007508:	f040 82d9 	bne.w	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      {
        frequency = RCC_PLL_GetFreqDomain_Q();
 800750c:	f000 fc7e 	bl	8007e0c <RCC_PLL_GetFreqDomain_Q>
 8007510:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007512:	e2d4      	b.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      
    case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
      if (LL_RCC_MSI_IsReady() == 1U)
 8007514:	f7ff fa76 	bl	8006a04 <LL_RCC_MSI_IsReady>
 8007518:	4603      	mov	r3, r0
 800751a:	2b01      	cmp	r3, #1
 800751c:	f040 82d1 	bne.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007520:	f7ff fa90 	bl	8006a44 <LL_RCC_MSI_GetRange>
 8007524:	4603      	mov	r3, r0
 8007526:	091b      	lsrs	r3, r3, #4
 8007528:	f003 030f 	and.w	r3, r3, #15
 800752c:	4a51      	ldr	r2, [pc, #324]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800752e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007532:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007534:	e2c5      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      
    default: /* HSI48 clock used as USB clock source */
      if (LL_RCC_HSI48_IsReady() == 1U)
 8007536:	f7ff fa0b 	bl	8006950 <LL_RCC_HSI48_IsReady>
 800753a:	4603      	mov	r3, r0
 800753c:	2b01      	cmp	r3, #1
 800753e:	f040 82c2 	bne.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
      {
        frequency = HSI48_VALUE;
 8007542:	4b4d      	ldr	r3, [pc, #308]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8007544:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007546:	e2be      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d140      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 800754e:	2003      	movs	r0, #3
 8007550:	f7ff fbda 	bl	8006d08 <LL_RCC_GetUSARTClockSource>
 8007554:	4603      	mov	r3, r0
 8007556:	2b03      	cmp	r3, #3
 8007558:	d013      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 800755a:	2b03      	cmp	r3, #3
 800755c:	d81b      	bhi.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800755e:	2b01      	cmp	r3, #1
 8007560:	d002      	beq.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007562:	2b02      	cmp	r3, #2
 8007564:	d004      	beq.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8007566:	e016      	b.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8007568:	f7ff f83c 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 800756c:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800756e:	e2bd      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8007570:	f7ff f9dc 	bl	800692c <LL_RCC_HSI_IsReady>
 8007574:	4603      	mov	r3, r0
 8007576:	2b01      	cmp	r3, #1
 8007578:	f040 82a7 	bne.w	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      {
        frequency = HSI_VALUE;
 800757c:	4b3a      	ldr	r3, [pc, #232]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800757e:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007580:	e2a3      	b.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      
    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8007582:	f7ff fa09 	bl	8006998 <LL_RCC_LSE_IsReady>
 8007586:	4603      	mov	r3, r0
 8007588:	2b01      	cmp	r3, #1
 800758a:	f040 82a0 	bne.w	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      {
        frequency = LSE_VALUE;
 800758e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007592:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007594:	e29b      	b.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      
    default: /* USART1 Clock is PCLK2 */
      frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8007596:	f7ff f825 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 800759a:	4604      	mov	r4, r0
 800759c:	f7ff fa8a 	bl	8006ab4 <LL_RCC_GetAHBPrescaler>
 80075a0:	4603      	mov	r3, r0
 80075a2:	091b      	lsrs	r3, r3, #4
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	4a34      	ldr	r2, [pc, #208]	; (800767c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80075aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ae:	fbb4 f4f3 	udiv	r4, r4, r3
 80075b2:	f7ff fa97 	bl	8006ae4 <LL_RCC_GetAPB2Prescaler>
 80075b6:	4603      	mov	r3, r0
 80075b8:	0adb      	lsrs	r3, r3, #11
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	4a30      	ldr	r2, [pc, #192]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 80075c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075c4:	f003 031f 	and.w	r3, r3, #31
 80075c8:	fa24 f303 	lsr.w	r3, r4, r3
 80075cc:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB2Prescaler());
      break;
 80075ce:	e28d      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d156      	bne.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 80075d6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80075da:	f7ff fba5 	bl	8006d28 <LL_RCC_GetLPUARTClockSource>
 80075de:	4603      	mov	r3, r0
 80075e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075e4:	d016      	beq.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80075e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075ea:	d81d      	bhi.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80075ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f0:	d003      	beq.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80075f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075f6:	d004      	beq.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 80075f8:	e016      	b.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80075fa:	f7fe fff3 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 80075fe:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007600:	e274      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8007602:	f7ff f993 	bl	800692c <LL_RCC_HSI_IsReady>
 8007606:	4603      	mov	r3, r0
 8007608:	2b01      	cmp	r3, #1
 800760a:	f040 8262 	bne.w	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      {
        frequency = HSI_VALUE;
 800760e:	4b16      	ldr	r3, [pc, #88]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8007610:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007612:	e25e      	b.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      
    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8007614:	f7ff f9c0 	bl	8006998 <LL_RCC_LSE_IsReady>
 8007618:	4603      	mov	r3, r0
 800761a:	2b01      	cmp	r3, #1
 800761c:	f040 825b 	bne.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = LSE_VALUE;
 8007620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007624:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007626:	e256      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      
    default: /* LPUART1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8007628:	f7fe ffdc 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 800762c:	4604      	mov	r4, r0
 800762e:	f7ff fa41 	bl	8006ab4 <LL_RCC_GetAHBPrescaler>
 8007632:	4603      	mov	r3, r0
 8007634:	091b      	lsrs	r3, r3, #4
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	4a10      	ldr	r2, [pc, #64]	; (800767c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800763c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007640:	fbb4 f4f3 	udiv	r4, r4, r3
 8007644:	f7ff fa42 	bl	8006acc <LL_RCC_GetAPB1Prescaler>
 8007648:	4603      	mov	r3, r0
 800764a:	0a1b      	lsrs	r3, r3, #8
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	4a0b      	ldr	r2, [pc, #44]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8007652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	fa24 f303 	lsr.w	r3, r4, r3
 800765e:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8007660:	e244      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8007662:	bf00      	nop
 8007664:	000f4240 	.word	0x000f4240
 8007668:	00f42400 	.word	0x00f42400
 800766c:	001fff68 	.word	0x001fff68
 8007670:	aaaaaaab 	.word	0xaaaaaaab
 8007674:	080125a8 	.word	0x080125a8
 8007678:	02dc6c00 	.word	0x02dc6c00
 800767c:	08012548 	.word	0x08012548
 8007680:	08012588 	.word	0x08012588
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800768a:	d12a      	bne.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 800768c:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8007690:	f7ff fbbd 	bl	8006e0e <LL_RCC_GetADCClockSource>
 8007694:	4603      	mov	r3, r0
 8007696:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800769a:	d014      	beq.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800769c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076a0:	f200 821b 	bhi.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 80076a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076a8:	d003      	beq.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80076aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ae:	d00e      	beq.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
      
    default: /* No clock used as ADC clock source */
      break;
 80076b0:	e213      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80076b2:	f7ff fc62 	bl	8006f7a <LL_RCC_PLLSAI1_IsReady>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	f040 8210 	bne.w	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        frequency = RCC_PLLSAI1_GetFreqDomain_R();
 80076be:	f000 fbfb 	bl	8007eb8 <RCC_PLLSAI1_GetFreqDomain_R>
 80076c2:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80076c4:	e20b      	b.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      frequency = HAL_RCC_GetSysClockFreq();
 80076c6:	f7fe ff8d 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 80076ca:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80076cc:	e20e      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      if (LL_RCC_PLL_IsReady() == 1U)
 80076ce:	f7ff fbf3 	bl	8006eb8 <LL_RCC_PLL_IsReady>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	f040 8204 	bne.w	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
        frequency = RCC_PLL_GetFreqDomain_P();
 80076da:	f000 fb41 	bl	8007d60 <RCC_PLL_GetFreqDomain_P>
 80076de:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80076e0:	e1ff      	b.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d135      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 80076e8:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80076ec:	f7ff fb2c 	bl	8006d48 <LL_RCC_GetI2CClockSource>
 80076f0:	4603      	mov	r3, r0
 80076f2:	4ab7      	ldr	r2, [pc, #732]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d003      	beq.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80076f8:	4ab6      	ldr	r2, [pc, #728]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d004      	beq.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 80076fe:	e00c      	b.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
    case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8007700:	f7fe ff70 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 8007704:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007706:	e1f1      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8007708:	f7ff f910 	bl	800692c <LL_RCC_HSI_IsReady>
 800770c:	4603      	mov	r3, r0
 800770e:	2b01      	cmp	r3, #1
 8007710:	f040 81e9 	bne.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      {
        frequency = HSI_VALUE;
 8007714:	4bb0      	ldr	r3, [pc, #704]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8007716:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007718:	e1e5      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      
    default: /* I2C1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800771a:	f7fe ff63 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 800771e:	4604      	mov	r4, r0
 8007720:	f7ff f9c8 	bl	8006ab4 <LL_RCC_GetAHBPrescaler>
 8007724:	4603      	mov	r3, r0
 8007726:	091b      	lsrs	r3, r3, #4
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	4aab      	ldr	r2, [pc, #684]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800772e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007732:	fbb4 f4f3 	udiv	r4, r4, r3
 8007736:	f7ff f9c9 	bl	8006acc <LL_RCC_GetAPB1Prescaler>
 800773a:	4603      	mov	r3, r0
 800773c:	0a1b      	lsrs	r3, r3, #8
 800773e:	f003 0307 	and.w	r3, r3, #7
 8007742:	4aa7      	ldr	r2, [pc, #668]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8007744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007748:	f003 031f 	and.w	r3, r3, #31
 800774c:	fa24 f303 	lsr.w	r3, r4, r3
 8007750:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8007752:	e1cb      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b08      	cmp	r3, #8
 8007758:	d135      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 800775a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800775e:	f7ff faf3 	bl	8006d48 <LL_RCC_GetI2CClockSource>
 8007762:	4603      	mov	r3, r0
 8007764:	4a9f      	ldr	r2, [pc, #636]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d003      	beq.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800776a:	4a9f      	ldr	r2, [pc, #636]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d004      	beq.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007770:	e00c      	b.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
    {
    case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8007772:	f7fe ff37 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 8007776:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007778:	e1b8      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 800777a:	f7ff f8d7 	bl	800692c <LL_RCC_HSI_IsReady>
 800777e:	4603      	mov	r3, r0
 8007780:	2b01      	cmp	r3, #1
 8007782:	f040 81b2 	bne.w	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      {
        frequency = HSI_VALUE;
 8007786:	4b94      	ldr	r3, [pc, #592]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8007788:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800778a:	e1ae      	b.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      
    default: /* I2C3 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800778c:	f7fe ff2a 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 8007790:	4604      	mov	r4, r0
 8007792:	f7ff f98f 	bl	8006ab4 <LL_RCC_GetAHBPrescaler>
 8007796:	4603      	mov	r3, r0
 8007798:	091b      	lsrs	r3, r3, #4
 800779a:	f003 030f 	and.w	r3, r3, #15
 800779e:	4a8f      	ldr	r2, [pc, #572]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80077a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077a4:	fbb4 f4f3 	udiv	r4, r4, r3
 80077a8:	f7ff f990 	bl	8006acc <LL_RCC_GetAPB1Prescaler>
 80077ac:	4603      	mov	r3, r0
 80077ae:	0a1b      	lsrs	r3, r3, #8
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	4a8a      	ldr	r2, [pc, #552]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80077b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ba:	f003 031f 	and.w	r3, r3, #31
 80077be:	fa24 f303 	lsr.w	r3, r4, r3
 80077c2:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80077c4:	e192      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d151      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 80077cc:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80077d0:	f7ff face 	bl	8006d70 <LL_RCC_GetLPTIMClockSource>
 80077d4:	62b8      	str	r0, [r7, #40]	; 0x28
    
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	4a84      	ldr	r2, [pc, #528]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d110      	bne.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80077de:	f7ff f8ed 	bl	80069bc <LL_RCC_LSI1_IsReady>
 80077e2:	6278      	str	r0, [r7, #36]	; 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80077e4:	f7ff f8fc 	bl	80069e0 <LL_RCC_LSI2_IsReady>
 80077e8:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d003      	beq.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	f040 817a 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 80077f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80077fc:	647b      	str	r3, [r7, #68]	; 0x44
 80077fe:	e175      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	4a7b      	ldr	r2, [pc, #492]	; (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d108      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8007808:	f7ff f890 	bl	800692c <LL_RCC_HSI_IsReady>
 800780c:	4603      	mov	r3, r0
 800780e:	2b01      	cmp	r3, #1
 8007810:	f040 816c 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 8007814:	4b70      	ldr	r3, [pc, #448]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8007816:	647b      	str	r3, [r7, #68]	; 0x44
 8007818:	e168      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8007820:	d109      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x532>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007822:	f7ff f8b9 	bl	8006998 <LL_RCC_LSE_IsReady>
 8007826:	4603      	mov	r3, r0
 8007828:	2b01      	cmp	r3, #1
 800782a:	f040 815f 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800782e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007832:	647b      	str	r3, [r7, #68]	; 0x44
 8007834:	e15a      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 8007836:	f7fe fed5 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 800783a:	4604      	mov	r4, r0
 800783c:	f7ff f93a 	bl	8006ab4 <LL_RCC_GetAHBPrescaler>
 8007840:	4603      	mov	r3, r0
 8007842:	091b      	lsrs	r3, r3, #4
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	4a64      	ldr	r2, [pc, #400]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800784a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800784e:	fbb4 f4f3 	udiv	r4, r4, r3
 8007852:	f7ff f93b 	bl	8006acc <LL_RCC_GetAPB1Prescaler>
 8007856:	4603      	mov	r3, r0
 8007858:	0a1b      	lsrs	r3, r3, #8
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	4a60      	ldr	r2, [pc, #384]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8007860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007864:	f003 031f 	and.w	r3, r3, #31
 8007868:	fa24 f303 	lsr.w	r3, r4, r3
 800786c:	647b      	str	r3, [r7, #68]	; 0x44
 800786e:	e13d      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b20      	cmp	r3, #32
 8007874:	d151      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 8007876:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800787a:	f7ff fa79 	bl	8006d70 <LL_RCC_GetLPTIMClockSource>
 800787e:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 8007880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007882:	4a5c      	ldr	r2, [pc, #368]	; (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d110      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8007888:	f7ff f898 	bl	80069bc <LL_RCC_LSI1_IsReady>
 800788c:	6338      	str	r0, [r7, #48]	; 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 800788e:	f7ff f8a7 	bl	80069e0 <LL_RCC_LSI2_IsReady>
 8007892:	62f8      	str	r0, [r7, #44]	; 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	2b01      	cmp	r3, #1
 8007898:	d003      	beq.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789c:	2b01      	cmp	r3, #1
 800789e:	f040 8125 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 80078a2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80078a6:	647b      	str	r3, [r7, #68]	; 0x44
 80078a8:	e120      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	4a52      	ldr	r2, [pc, #328]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d108      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 80078b2:	f7ff f83b 	bl	800692c <LL_RCC_HSI_IsReady>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	f040 8117 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 80078be:	4b46      	ldr	r3, [pc, #280]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80078c0:	647b      	str	r3, [r7, #68]	; 0x44
 80078c2:	e113      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 80078c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c6:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80078ca:	d109      	bne.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80078cc:	f7ff f864 	bl	8006998 <LL_RCC_LSE_IsReady>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	f040 810a 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80078d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078dc:	647b      	str	r3, [r7, #68]	; 0x44
 80078de:	e105      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 80078e0:	f7fe fe80 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 80078e4:	4604      	mov	r4, r0
 80078e6:	f7ff f8e5 	bl	8006ab4 <LL_RCC_GetAHBPrescaler>
 80078ea:	4603      	mov	r3, r0
 80078ec:	091b      	lsrs	r3, r3, #4
 80078ee:	f003 030f 	and.w	r3, r3, #15
 80078f2:	4a3a      	ldr	r2, [pc, #232]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80078f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f8:	fbb4 f4f3 	udiv	r4, r4, r3
 80078fc:	f7ff f8e6 	bl	8006acc <LL_RCC_GetAPB1Prescaler>
 8007900:	4603      	mov	r3, r0
 8007902:	0a1b      	lsrs	r3, r3, #8
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	4a35      	ldr	r2, [pc, #212]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800790a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800790e:	f003 031f 	and.w	r3, r3, #31
 8007912:	fa24 f303 	lsr.w	r3, r4, r3
 8007916:	647b      	str	r3, [r7, #68]	; 0x44
 8007918:	e0e8      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007920:	d119      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 8007922:	f7ff f8ba 	bl	8006a9a <LL_RCC_GetRFWKPClockSource>
 8007926:	63b8      	str	r0, [r7, #56]	; 0x38
    
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 8007928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800792e:	d109      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007930:	f7ff f832 	bl	8006998 <LL_RCC_LSE_IsReady>
 8007934:	4603      	mov	r3, r0
 8007936:	2b01      	cmp	r3, #1
 8007938:	f040 80d8 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800793c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007940:	647b      	str	r3, [r7, #68]	; 0x44
 8007942:	e0d3      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 8007944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007946:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800794a:	f040 80cf 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 1024U;
 800794e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007952:	647b      	str	r3, [r7, #68]	; 0x44
 8007954:	e0ca      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800795c:	f040 80c6 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 8007960:	f7ff f8e0 	bl	8006b24 <LL_RCC_GetSMPSClockSource>
 8007964:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 8007966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d115      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 800796c:	f7fe ffde 	bl	800692c <LL_RCC_HSI_IsReady>
 8007970:	4603      	mov	r3, r0
 8007972:	2b01      	cmp	r3, #1
 8007974:	f040 80ba 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 8007978:	4920      	ldr	r1, [pc, #128]	; (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 800797a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800797c:	4613      	mov	r3, r2
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	4413      	add	r3, r2
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	440b      	add	r3, r1
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a13      	ldr	r2, [pc, #76]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800798a:	fbb2 f3f3 	udiv	r3, r2, r3
 800798e:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8007990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	647b      	str	r3, [r7, #68]	; 0x44
 8007996:	e0a9      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8007998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800799e:	d131      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 80079a0:	f7fe ffb2 	bl	8006908 <LL_RCC_HSE_IsReady>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	f040 80a0 	bne.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 80079ac:	4913      	ldr	r1, [pc, #76]	; (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 80079ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079b0:	4613      	mov	r3, r2
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	4413      	add	r3, r2
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	440b      	add	r3, r1
 80079ba:	3314      	adds	r3, #20
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a10      	ldr	r2, [pc, #64]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 80079c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c4:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 80079c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079c8:	085b      	lsrs	r3, r3, #1
 80079ca:	647b      	str	r3, [r7, #68]	; 0x44
 80079cc:	e08e      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 80079ce:	bf00      	nop
 80079d0:	00030100 	.word	0x00030100
 80079d4:	00030200 	.word	0x00030200
 80079d8:	00f42400 	.word	0x00f42400
 80079dc:	08012548 	.word	0x08012548
 80079e0:	08012588 	.word	0x08012588
 80079e4:	00301000 	.word	0x00301000
 80079e8:	00302000 	.word	0x00302000
 80079ec:	000c0004 	.word	0x000c0004
 80079f0:	000c0008 	.word	0x000c0008
 80079f4:	00300010 	.word	0x00300010
 80079f8:	00300020 	.word	0x00300020
 80079fc:	080125e8 	.word	0x080125e8
 8007a00:	01e84800 	.word	0x01e84800
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8007a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a0a:	d16f      	bne.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      switch (LL_RCC_MSI_GetRange())
 8007a0c:	f7ff f81a 	bl	8006a44 <LL_RCC_MSI_GetRange>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2bb0      	cmp	r3, #176	; 0xb0
 8007a14:	d037      	beq.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007a16:	2bb0      	cmp	r3, #176	; 0xb0
 8007a18:	d844      	bhi.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8007a1a:	2ba0      	cmp	r3, #160	; 0xa0
 8007a1c:	d024      	beq.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 8007a1e:	2ba0      	cmp	r3, #160	; 0xa0
 8007a20:	d840      	bhi.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8007a22:	2b80      	cmp	r3, #128	; 0x80
 8007a24:	d002      	beq.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007a26:	2b90      	cmp	r3, #144	; 0x90
 8007a28:	d00f      	beq.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        break;
      case LL_RCC_MSIRANGE_11:
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
        break;
      default:
        break;
 8007a2a:	e03b      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 8007a2c:	4b32      	ldr	r3, [pc, #200]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007a2e:	6a19      	ldr	r1, [r3, #32]
 8007a30:	4832      	ldr	r0, [pc, #200]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8007a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a34:	4613      	mov	r3, r2
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	4413      	add	r3, r2
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	4403      	add	r3, r0
 8007a3e:	3310      	adds	r3, #16
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a46:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007a48:	e02d      	b.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 8007a4a:	4b2b      	ldr	r3, [pc, #172]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007a4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007a4e:	482b      	ldr	r0, [pc, #172]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8007a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a52:	4613      	mov	r3, r2
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	4413      	add	r3, r2
 8007a58:	00db      	lsls	r3, r3, #3
 8007a5a:	4403      	add	r3, r0
 8007a5c:	330c      	adds	r3, #12
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a64:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007a66:	e01e      	b.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 8007a68:	4b23      	ldr	r3, [pc, #140]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007a6a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007a6c:	4823      	ldr	r0, [pc, #140]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8007a6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a70:	4613      	mov	r3, r2
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	4413      	add	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	4403      	add	r3, r0
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a82:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007a84:	e00f      	b.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8007a86:	4b1c      	ldr	r3, [pc, #112]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007a88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a8a:	481c      	ldr	r0, [pc, #112]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8007a8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a8e:	4613      	mov	r3, r2
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	4413      	add	r3, r2
 8007a94:	00db      	lsls	r3, r3, #3
 8007a96:	4403      	add	r3, r0
 8007a98:	3304      	adds	r3, #4
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007aa0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007aa2:	e000      	b.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        break;
 8007aa4:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 8007aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aa8:	085b      	lsrs	r3, r3, #1
 8007aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8007aac:	e01e      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007aae:	bf00      	nop
 8007ab0:	e01c      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007ab2:	bf00      	nop
 8007ab4:	e01a      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007ab6:	bf00      	nop
 8007ab8:	e018      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007aba:	bf00      	nop
 8007abc:	e016      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007abe:	bf00      	nop
 8007ac0:	e014      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007ac2:	bf00      	nop
 8007ac4:	e012      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007ac6:	bf00      	nop
 8007ac8:	e010      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007aca:	bf00      	nop
 8007acc:	e00e      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007ace:	bf00      	nop
 8007ad0:	e00c      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007ad2:	bf00      	nop
 8007ad4:	e00a      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007ad6:	bf00      	nop
 8007ad8:	e008      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007ada:	bf00      	nop
 8007adc:	e006      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007ade:	bf00      	nop
 8007ae0:	e004      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007ae2:	bf00      	nop
 8007ae4:	e002      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007ae6:	bf00      	nop
 8007ae8:	e000      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007aea:	bf00      	nop
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif
  return (frequency);
 8007aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	374c      	adds	r7, #76	; 0x4c
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd90      	pop	{r4, r7, pc}
 8007af6:	bf00      	nop
 8007af8:	080125a8 	.word	0x080125a8
 8007afc:	080125e8 	.word	0x080125e8

08007b00 <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 8007b06:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8007b0a:	f7ff f954 	bl	8006db6 <LL_RCC_GetRNGClockSource>
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d108      	bne.n	8007b28 <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 8007b16:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 8007b1a:	f7ff f95c 	bl	8006dd6 <LL_RCC_GetCLK48ClockSource>
 8007b1e:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b26:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 8007b28:	687b      	ldr	r3, [r7, #4]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007b36:	f7fe ff76 	bl	8006a26 <LL_RCC_MSI_EnablePLLMode>
}
 8007b3a:	bf00      	nop
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007b4a:	f7ff fa07 	bl	8006f5c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b4e:	f7fa f805 	bl	8001b5c <HAL_GetTick>
 8007b52:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b54:	e009      	b.n	8007b6a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b56:	f7fa f801 	bl	8001b5c <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d902      	bls.n	8007b6a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	73fb      	strb	r3, [r7, #15]
      break;
 8007b68:	e004      	b.n	8007b74 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b6a:	f7ff fa06 	bl	8006f7a <LL_RCC_PLLSAI1_IsReady>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1f0      	bne.n	8007b56 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d137      	bne.n	8007bea <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	021b      	lsls	r3, r3, #8
 8007b8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007ba8:	f7ff f9c9 	bl	8006f3e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bac:	f7f9 ffd6 	bl	8001b5c <HAL_GetTick>
 8007bb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007bb2:	e009      	b.n	8007bc8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007bb4:	f7f9 ffd2 	bl	8001b5c <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d902      	bls.n	8007bc8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	73fb      	strb	r3, [r7, #15]
        break;
 8007bc6:	e004      	b.n	8007bd2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007bc8:	f7ff f9d7 	bl	8006f7a <LL_RCC_PLLSAI1_IsReady>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d1f0      	bne.n	8007bb4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d108      	bne.n	8007bea <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bdc:	691a      	ldr	r2, [r3, #16]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007be6:	4313      	orrs	r3, r2
 8007be8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007c00:	f7ff f9ac 	bl	8006f5c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c04:	f7f9 ffaa 	bl	8001b5c <HAL_GetTick>
 8007c08:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007c0a:	e009      	b.n	8007c20 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c0c:	f7f9 ffa6 	bl	8001b5c <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d902      	bls.n	8007c20 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c1e:	e004      	b.n	8007c2a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007c20:	f7ff f9ab 	bl	8006f7a <LL_RCC_PLLSAI1_IsReady>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1f0      	bne.n	8007c0c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d137      	bne.n	8007ca0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c44:	4313      	orrs	r3, r2
 8007c46:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007c5e:	f7ff f96e 	bl	8006f3e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c62:	f7f9 ff7b 	bl	8001b5c <HAL_GetTick>
 8007c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007c68:	e009      	b.n	8007c7e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c6a:	f7f9 ff77 	bl	8001b5c <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d902      	bls.n	8007c7e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	73fb      	strb	r3, [r7, #15]
        break;
 8007c7c:	e004      	b.n	8007c88 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007c7e:	f7ff f97c 	bl	8006f7a <LL_RCC_PLLSAI1_IsReady>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d1f0      	bne.n	8007c6a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d108      	bne.n	8007ca0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c92:	691a      	ldr	r2, [r3, #16]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007cb6:	f7ff f951 	bl	8006f5c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007cba:	f7f9 ff4f 	bl	8001b5c <HAL_GetTick>
 8007cbe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007cc0:	e009      	b.n	8007cd6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007cc2:	f7f9 ff4b 	bl	8001b5c <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d902      	bls.n	8007cd6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd4:	e004      	b.n	8007ce0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007cd6:	f7ff f950 	bl	8006f7a <LL_RCC_PLLSAI1_IsReady>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1f0      	bne.n	8007cc2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d137      	bne.n	8007d56 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d10:	4313      	orrs	r3, r2
 8007d12:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007d14:	f7ff f913 	bl	8006f3e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d18:	f7f9 ff20 	bl	8001b5c <HAL_GetTick>
 8007d1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007d1e:	e009      	b.n	8007d34 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d20:	f7f9 ff1c 	bl	8001b5c <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d902      	bls.n	8007d34 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	73fb      	strb	r3, [r7, #15]
        break;
 8007d32:	e004      	b.n	8007d3e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007d34:	f7ff f921 	bl	8006f7a <LL_RCC_PLLSAI1_IsReady>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d1f0      	bne.n	8007d20 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d108      	bne.n	8007d56 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d48:	691a      	ldr	r2, [r3, #16]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d52:	4313      	orrs	r3, r2
 8007d54:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 8007d60:	b590      	push	{r4, r7, lr}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007d66:	f7ff f94b 	bl	8007000 <LL_RCC_PLL_GetMainSource>
 8007d6a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d017      	beq.n	8007da2 <RCC_PLL_GetFreqDomain_P+0x42>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d81f      	bhi.n	8007db8 <RCC_PLL_GetFreqDomain_P+0x58>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d003      	beq.n	8007d86 <RCC_PLL_GetFreqDomain_P+0x26>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d00b      	beq.n	8007d9c <RCC_PLL_GetFreqDomain_P+0x3c>
 8007d84:	e018      	b.n	8007db8 <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007d86:	f7fe fe5d 	bl	8006a44 <LL_RCC_MSI_GetRange>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	091b      	lsrs	r3, r3, #4
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	4a1b      	ldr	r2, [pc, #108]	; (8007e00 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8007d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d98:	607b      	str	r3, [r7, #4]
      break;
 8007d9a:	e018      	b.n	8007dce <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007d9c:	4b19      	ldr	r3, [pc, #100]	; (8007e04 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8007d9e:	607b      	str	r3, [r7, #4]
      break;
 8007da0:	e015      	b.n	8007dce <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007da2:	f7fe fd9f 	bl	80068e4 <LL_RCC_HSE_IsEnabledDiv2>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d102      	bne.n	8007db2 <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007dac:	4b15      	ldr	r3, [pc, #84]	; (8007e04 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8007dae:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007db0:	e00d      	b.n	8007dce <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <RCC_PLL_GetFreqDomain_P+0xa8>)
 8007db4:	607b      	str	r3, [r7, #4]
      break;
 8007db6:	e00a      	b.n	8007dce <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007db8:	f7fe fe44 	bl	8006a44 <LL_RCC_MSI_GetRange>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	091b      	lsrs	r3, r3, #4
 8007dc0:	f003 030f 	and.w	r3, r3, #15
 8007dc4:	4a0e      	ldr	r2, [pc, #56]	; (8007e00 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8007dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dca:	607b      	str	r3, [r7, #4]
      break;
 8007dcc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007dce:	f7ff f885 	bl	8006edc <LL_RCC_PLL_GetN>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	fb03 f402 	mul.w	r4, r3, r2
 8007dda:	f7ff f8a4 	bl	8006f26 <LL_RCC_PLL_GetDivider>
 8007dde:	4603      	mov	r3, r0
 8007de0:	091b      	lsrs	r3, r3, #4
 8007de2:	3301      	adds	r3, #1
 8007de4:	fbb4 f4f3 	udiv	r4, r4, r3
 8007de8:	f7ff f885 	bl	8006ef6 <LL_RCC_PLL_GetP>
 8007dec:	4603      	mov	r3, r0
 8007dee:	0c5b      	lsrs	r3, r3, #17
 8007df0:	3301      	adds	r3, #1
 8007df2:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd90      	pop	{r4, r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	080125a8 	.word	0x080125a8
 8007e04:	00f42400 	.word	0x00f42400
 8007e08:	01e84800 	.word	0x01e84800

08007e0c <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 8007e0c:	b590      	push	{r4, r7, lr}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007e12:	f7ff f8f5 	bl	8007000 <LL_RCC_PLL_GetMainSource>
 8007e16:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d017      	beq.n	8007e4e <RCC_PLL_GetFreqDomain_Q+0x42>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d81f      	bhi.n	8007e64 <RCC_PLL_GetFreqDomain_Q+0x58>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d003      	beq.n	8007e32 <RCC_PLL_GetFreqDomain_Q+0x26>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d00b      	beq.n	8007e48 <RCC_PLL_GetFreqDomain_Q+0x3c>
 8007e30:	e018      	b.n	8007e64 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007e32:	f7fe fe07 	bl	8006a44 <LL_RCC_MSI_GetRange>
 8007e36:	4603      	mov	r3, r0
 8007e38:	091b      	lsrs	r3, r3, #4
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	4a1b      	ldr	r2, [pc, #108]	; (8007eac <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8007e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e44:	607b      	str	r3, [r7, #4]
      break;
 8007e46:	e018      	b.n	8007e7a <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007e48:	4b19      	ldr	r3, [pc, #100]	; (8007eb0 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8007e4a:	607b      	str	r3, [r7, #4]
      break;
 8007e4c:	e015      	b.n	8007e7a <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007e4e:	f7fe fd49 	bl	80068e4 <LL_RCC_HSE_IsEnabledDiv2>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d102      	bne.n	8007e5e <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007e58:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8007e5a:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 8007e5c:	e00d      	b.n	8007e7a <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8007e5e:	4b15      	ldr	r3, [pc, #84]	; (8007eb4 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 8007e60:	607b      	str	r3, [r7, #4]
      break;
 8007e62:	e00a      	b.n	8007e7a <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007e64:	f7fe fdee 	bl	8006a44 <LL_RCC_MSI_GetRange>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	091b      	lsrs	r3, r3, #4
 8007e6c:	f003 030f 	and.w	r3, r3, #15
 8007e70:	4a0e      	ldr	r2, [pc, #56]	; (8007eac <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8007e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e76:	607b      	str	r3, [r7, #4]
      break;
 8007e78:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007e7a:	f7ff f82f 	bl	8006edc <LL_RCC_PLL_GetN>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	fb03 f402 	mul.w	r4, r3, r2
 8007e86:	f7ff f84e 	bl	8006f26 <LL_RCC_PLL_GetDivider>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	091b      	lsrs	r3, r3, #4
 8007e8e:	3301      	adds	r3, #1
 8007e90:	fbb4 f4f3 	udiv	r4, r4, r3
 8007e94:	f7ff f83b 	bl	8006f0e <LL_RCC_PLL_GetQ>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	0e5b      	lsrs	r3, r3, #25
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd90      	pop	{r4, r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	080125a8 	.word	0x080125a8
 8007eb0:	00f42400 	.word	0x00f42400
 8007eb4:	01e84800 	.word	0x01e84800

08007eb8 <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 8007eb8:	b590      	push	{r4, r7, lr}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007ebe:	f7ff f89f 	bl	8007000 <LL_RCC_PLL_GetMainSource>
 8007ec2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d017      	beq.n	8007efa <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d81f      	bhi.n	8007f10 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d003      	beq.n	8007ede <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d00b      	beq.n	8007ef4 <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 8007edc:	e018      	b.n	8007f10 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007ede:	f7fe fdb1 	bl	8006a44 <LL_RCC_MSI_GetRange>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	091b      	lsrs	r3, r3, #4
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	4a1b      	ldr	r2, [pc, #108]	; (8007f58 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8007eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef0:	607b      	str	r3, [r7, #4]
      break;
 8007ef2:	e018      	b.n	8007f26 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8007ef4:	4b19      	ldr	r3, [pc, #100]	; (8007f5c <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8007ef6:	607b      	str	r3, [r7, #4]
      break;
 8007ef8:	e015      	b.n	8007f26 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007efa:	f7fe fcf3 	bl	80068e4 <LL_RCC_HSE_IsEnabledDiv2>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d102      	bne.n	8007f0a <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007f04:	4b15      	ldr	r3, [pc, #84]	; (8007f5c <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8007f06:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007f08:	e00d      	b.n	8007f26 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 8007f0a:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 8007f0c:	607b      	str	r3, [r7, #4]
      break;
 8007f0e:	e00a      	b.n	8007f26 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007f10:	f7fe fd98 	bl	8006a44 <LL_RCC_MSI_GetRange>
 8007f14:	4603      	mov	r3, r0
 8007f16:	091b      	lsrs	r3, r3, #4
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	4a0e      	ldr	r2, [pc, #56]	; (8007f58 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8007f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f22:	607b      	str	r3, [r7, #4]
      break;
 8007f24:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007f26:	f7ff f83a 	bl	8006f9e <LL_RCC_PLLSAI1_GetN>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	fb03 f402 	mul.w	r4, r3, r2
 8007f32:	f7fe fff8 	bl	8006f26 <LL_RCC_PLL_GetDivider>
 8007f36:	4603      	mov	r3, r0
 8007f38:	091b      	lsrs	r3, r3, #4
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	fbb4 f4f3 	udiv	r4, r4, r3
 8007f40:	f7ff f852 	bl	8006fe8 <LL_RCC_PLLSAI1_GetR>
 8007f44:	4603      	mov	r3, r0
 8007f46:	0f5b      	lsrs	r3, r3, #29
 8007f48:	3301      	adds	r3, #1
 8007f4a:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd90      	pop	{r4, r7, pc}
 8007f56:	bf00      	nop
 8007f58:	080125a8 	.word	0x080125a8
 8007f5c:	00f42400 	.word	0x00f42400
 8007f60:	01e84800 	.word	0x01e84800

08007f64 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 8007f64:	b590      	push	{r4, r7, lr}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007f6a:	f7ff f849 	bl	8007000 <LL_RCC_PLL_GetMainSource>
 8007f6e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d017      	beq.n	8007fa6 <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d81f      	bhi.n	8007fbc <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d003      	beq.n	8007f8a <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d00b      	beq.n	8007fa0 <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 8007f88:	e018      	b.n	8007fbc <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007f8a:	f7fe fd5b 	bl	8006a44 <LL_RCC_MSI_GetRange>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	091b      	lsrs	r3, r3, #4
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	4a1b      	ldr	r2, [pc, #108]	; (8008004 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8007f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f9c:	607b      	str	r3, [r7, #4]
      break;
 8007f9e:	e018      	b.n	8007fd2 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8007fa0:	4b19      	ldr	r3, [pc, #100]	; (8008008 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8007fa2:	607b      	str	r3, [r7, #4]
      break;
 8007fa4:	e015      	b.n	8007fd2 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007fa6:	f7fe fc9d 	bl	80068e4 <LL_RCC_HSE_IsEnabledDiv2>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d102      	bne.n	8007fb6 <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007fb0:	4b15      	ldr	r3, [pc, #84]	; (8008008 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8007fb2:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007fb4:	e00d      	b.n	8007fd2 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8007fb6:	4b15      	ldr	r3, [pc, #84]	; (800800c <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 8007fb8:	607b      	str	r3, [r7, #4]
      break;
 8007fba:	e00a      	b.n	8007fd2 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007fbc:	f7fe fd42 	bl	8006a44 <LL_RCC_MSI_GetRange>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	091b      	lsrs	r3, r3, #4
 8007fc4:	f003 030f 	and.w	r3, r3, #15
 8007fc8:	4a0e      	ldr	r2, [pc, #56]	; (8008004 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8007fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fce:	607b      	str	r3, [r7, #4]
      break;
 8007fd0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007fd2:	f7fe ffe4 	bl	8006f9e <LL_RCC_PLLSAI1_GetN>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	fb03 f402 	mul.w	r4, r3, r2
 8007fde:	f7fe ffa2 	bl	8006f26 <LL_RCC_PLL_GetDivider>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	091b      	lsrs	r3, r3, #4
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	fbb4 f4f3 	udiv	r4, r4, r3
 8007fec:	f7fe ffe4 	bl	8006fb8 <LL_RCC_PLLSAI1_GetP>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	0c5b      	lsrs	r3, r3, #17
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd90      	pop	{r4, r7, pc}
 8008002:	bf00      	nop
 8008004:	080125a8 	.word	0x080125a8
 8008008:	00f42400 	.word	0x00f42400
 800800c:	01e84800 	.word	0x01e84800

08008010 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8008010:	b590      	push	{r4, r7, lr}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 8008016:	f7fe fff3 	bl	8007000 <LL_RCC_PLL_GetMainSource>
 800801a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b03      	cmp	r3, #3
 8008020:	d017      	beq.n	8008052 <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b03      	cmp	r3, #3
 8008026:	d81f      	bhi.n	8008068 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d003      	beq.n	8008036 <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b02      	cmp	r3, #2
 8008032:	d00b      	beq.n	800804c <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 8008034:	e018      	b.n	8008068 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008036:	f7fe fd05 	bl	8006a44 <LL_RCC_MSI_GetRange>
 800803a:	4603      	mov	r3, r0
 800803c:	091b      	lsrs	r3, r3, #4
 800803e:	f003 030f 	and.w	r3, r3, #15
 8008042:	4a1b      	ldr	r2, [pc, #108]	; (80080b0 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8008044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008048:	607b      	str	r3, [r7, #4]
      break;
 800804a:	e018      	b.n	800807e <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 800804c:	4b19      	ldr	r3, [pc, #100]	; (80080b4 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 800804e:	607b      	str	r3, [r7, #4]
      break;
 8008050:	e015      	b.n	800807e <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008052:	f7fe fc47 	bl	80068e4 <LL_RCC_HSE_IsEnabledDiv2>
 8008056:	4603      	mov	r3, r0
 8008058:	2b01      	cmp	r3, #1
 800805a:	d102      	bne.n	8008062 <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800805c:	4b15      	ldr	r3, [pc, #84]	; (80080b4 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 800805e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8008060:	e00d      	b.n	800807e <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8008062:	4b15      	ldr	r3, [pc, #84]	; (80080b8 <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 8008064:	607b      	str	r3, [r7, #4]
      break;
 8008066:	e00a      	b.n	800807e <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008068:	f7fe fcec 	bl	8006a44 <LL_RCC_MSI_GetRange>
 800806c:	4603      	mov	r3, r0
 800806e:	091b      	lsrs	r3, r3, #4
 8008070:	f003 030f 	and.w	r3, r3, #15
 8008074:	4a0e      	ldr	r2, [pc, #56]	; (80080b0 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8008076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800807a:	607b      	str	r3, [r7, #4]
      break;
 800807c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800807e:	f7fe ff8e 	bl	8006f9e <LL_RCC_PLLSAI1_GetN>
 8008082:	4602      	mov	r2, r0
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	fb03 f402 	mul.w	r4, r3, r2
 800808a:	f7fe ff4c 	bl	8006f26 <LL_RCC_PLL_GetDivider>
 800808e:	4603      	mov	r3, r0
 8008090:	091b      	lsrs	r3, r3, #4
 8008092:	3301      	adds	r3, #1
 8008094:	fbb4 f4f3 	udiv	r4, r4, r3
 8008098:	f7fe ff9a 	bl	8006fd0 <LL_RCC_PLLSAI1_GetQ>
 800809c:	4603      	mov	r3, r0
 800809e:	0e5b      	lsrs	r3, r3, #25
 80080a0:	3301      	adds	r3, #1
 80080a2:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd90      	pop	{r4, r7, pc}
 80080ae:	bf00      	nop
 80080b0:	080125a8 	.word	0x080125a8
 80080b4:	00f42400 	.word	0x00f42400
 80080b8:	01e84800 	.word	0x01e84800

080080bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e090      	b.n	80081f0 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d106      	bne.n	80080e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7f8 ff3a 	bl	8000f5c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	22ca      	movs	r2, #202	; 0xca
 80080f6:	625a      	str	r2, [r3, #36]	; 0x24
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2253      	movs	r2, #83	; 0x53
 80080fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f89f 	bl	8008244 <RTC_EnterInitMode>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d009      	beq.n	8008120 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	22ff      	movs	r2, #255	; 0xff
 8008112:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2204      	movs	r2, #4
 8008118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e067      	b.n	80081f0 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	6812      	ldr	r2, [r2, #0]
 800812a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800812e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008132:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6899      	ldr	r1, [r3, #8]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	431a      	orrs	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	431a      	orrs	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	68d2      	ldr	r2, [r2, #12]
 800815a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6919      	ldr	r1, [r3, #16]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	041a      	lsls	r2, r3, #16
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800817e:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 0203 	bic.w	r2, r2, #3
 800818e:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69da      	ldr	r2, [r3, #28]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	431a      	orrs	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d113      	bne.n	80081de <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f81e 	bl	80081f8 <HAL_RTC_WaitForSynchro>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00d      	beq.n	80081de <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	22ff      	movs	r2, #255	; 0xff
 80081c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2204      	movs	r2, #4
 80081ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e008      	b.n	80081f0 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	22ff      	movs	r2, #255	; 0xff
 80081e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80081ee:	2300      	movs	r3, #0
  }
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800820e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008210:	f7f9 fca4 	bl	8001b5c <HAL_GetTick>
 8008214:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008216:	e009      	b.n	800822c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008218:	f7f9 fca0 	bl	8001b5c <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008226:	d901      	bls.n	800822c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e007      	b.n	800823c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0ee      	beq.n	8008218 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008256:	2b00      	cmp	r3, #0
 8008258:	d119      	bne.n	800828e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008262:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008264:	f7f9 fc7a 	bl	8001b5c <HAL_GetTick>
 8008268:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800826a:	e009      	b.n	8008280 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800826c:	f7f9 fc76 	bl	8001b5c <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800827a:	d901      	bls.n	8008280 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e007      	b.n	8008290 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0ee      	beq.n	800826c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d904      	bls.n	80082b6 <HAL_SAI_InitProtocol+0x1e>
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	3b03      	subs	r3, #3
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d812      	bhi.n	80082da <HAL_SAI_InitProtocol+0x42>
 80082b4:	e008      	b.n	80082c8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 f9af 	bl	8008620 <SAI_InitI2S>
 80082c2:	4603      	mov	r3, r0
 80082c4:	75fb      	strb	r3, [r7, #23]
      break;
 80082c6:	e00b      	b.n	80082e0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f000 fa58 	bl	8008784 <SAI_InitPCM>
 80082d4:	4603      	mov	r3, r0
 80082d6:	75fb      	strb	r3, [r7, #23]
      break;
 80082d8:	e002      	b.n	80082e0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	75fb      	strb	r3, [r7, #23]
      break;
 80082de:	bf00      	nop
  }

  if (status == HAL_OK)
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d104      	bne.n	80082f0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 f808 	bl	80082fc <HAL_SAI_Init>
 80082ec:	4603      	mov	r3, r0
 80082ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e17c      	b.n	8008608 <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008314:	2b01      	cmp	r3, #1
 8008316:	d10e      	bne.n	8008336 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a5c      	ldr	r2, [pc, #368]	; (8008490 <HAL_SAI_Init+0x194>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d107      	bne.n	8008332 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8008326:	2b01      	cmp	r3, #1
 8008328:	d103      	bne.n	8008332 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e168      	b.n	8008608 <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7f8 fe86 	bl	800105c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fa99 	bl	8008888 <SAI_Disable>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e153      	b.n	8008608 <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <HAL_SAI_Init+0x7a>
 8008370:	2b01      	cmp	r3, #1
 8008372:	d003      	beq.n	800837c <HAL_SAI_Init+0x80>
 8008374:	e006      	b.n	8008384 <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	61bb      	str	r3, [r7, #24]
      break;
 800837a:	e006      	b.n	800838a <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800837c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008380:	61bb      	str	r3, [r7, #24]
      break;
 8008382:	e002      	b.n	800838a <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	61bb      	str	r3, [r7, #24]
      break;
 8008388:	bf00      	nop
  }

  SAI1->GCR = 0;
 800838a:	4b42      	ldr	r3, [pc, #264]	; (8008494 <HAL_SAI_Init+0x198>)
 800838c:	2200      	movs	r2, #0
 800838e:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d062      	beq.n	800845e <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008398:	2040      	movs	r0, #64	; 0x40
 800839a:	f7fe ffb3 	bl	8007304 <HAL_RCCEx_GetPeriphCLKFreq>
 800839e:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083a8:	d120      	bne.n	80083ec <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d102      	bne.n	80083b8 <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80083b2:	2340      	movs	r3, #64	; 0x40
 80083b4:	613b      	str	r3, [r7, #16]
 80083b6:	e00a      	b.n	80083ce <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d103      	bne.n	80083c8 <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80083c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083c4:	613b      	str	r3, [r7, #16]
 80083c6:	e002      	b.n	80083ce <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083cc:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	4619      	mov	r1, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	fb02 f303 	mul.w	r3, r2, r3
 80083e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	e017      	b.n	800841c <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083f4:	d101      	bne.n	80083fa <HAL_SAI_Init+0xfe>
 80083f6:	2302      	movs	r3, #2
 80083f8:	e000      	b.n	80083fc <HAL_SAI_Init+0x100>
 80083fa:	2301      	movs	r3, #1
 80083fc:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	4619      	mov	r1, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	fb02 f303 	mul.w	r3, r2, r3
 8008414:	021b      	lsls	r3, r3, #8
 8008416:	fbb1 f3f3 	udiv	r3, r1, r3
 800841a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	4a1e      	ldr	r2, [pc, #120]	; (8008498 <HAL_SAI_Init+0x19c>)
 8008420:	fba2 2303 	umull	r2, r3, r2, r3
 8008424:	08da      	lsrs	r2, r3, #3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800842a:	6979      	ldr	r1, [r7, #20]
 800842c:	4b1a      	ldr	r3, [pc, #104]	; (8008498 <HAL_SAI_Init+0x19c>)
 800842e:	fba3 2301 	umull	r2, r3, r3, r1
 8008432:	08da      	lsrs	r2, r3, #3
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	1aca      	subs	r2, r1, r3
 800843e:	2a08      	cmp	r2, #8
 8008440:	d904      	bls.n	800844c <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008450:	2b04      	cmp	r3, #4
 8008452:	d104      	bne.n	800845e <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	085a      	lsrs	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <HAL_SAI_Init+0x172>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d109      	bne.n	8008482 <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008472:	2b01      	cmp	r3, #1
 8008474:	d101      	bne.n	800847a <HAL_SAI_Init+0x17e>
 8008476:	2300      	movs	r3, #0
 8008478:	e001      	b.n	800847e <HAL_SAI_Init+0x182>
 800847a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800847e:	61fb      	str	r3, [r7, #28]
 8008480:	e00e      	b.n	80084a0 <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008486:	2b01      	cmp	r3, #1
 8008488:	d108      	bne.n	800849c <HAL_SAI_Init+0x1a0>
 800848a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800848e:	e006      	b.n	800849e <HAL_SAI_Init+0x1a2>
 8008490:	40015404 	.word	0x40015404
 8008494:	40015400 	.word	0x40015400
 8008498:	cccccccd 	.word	0xcccccccd
 800849c:	2300      	movs	r3, #0
 800849e:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6819      	ldr	r1, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	4b59      	ldr	r3, [pc, #356]	; (8008610 <HAL_SAI_Init+0x314>)
 80084ac:	400b      	ands	r3, r1
 80084ae:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6819      	ldr	r1, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084be:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80084c4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ca:	431a      	orrs	r2, r3
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 80084d8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80084e4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	051b      	lsls	r3, r3, #20
 80084ec:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80084f2:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6812      	ldr	r2, [r2, #0]
 800850c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008510:	f023 030f 	bic.w	r3, r3, #15
 8008514:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6859      	ldr	r1, [r3, #4]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	69da      	ldr	r2, [r3, #28]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852a:	431a      	orrs	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6899      	ldr	r1, [r3, #8]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	4b35      	ldr	r3, [pc, #212]	; (8008614 <HAL_SAI_Init+0x318>)
 8008540:	400b      	ands	r3, r1
 8008542:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6899      	ldr	r1, [r3, #8]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008554:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800855a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008560:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008566:	3b01      	subs	r3, #1
 8008568:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800856a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68d9      	ldr	r1, [r3, #12]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008582:	400b      	ands	r3, r1
 8008584:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68d9      	ldr	r1, [r3, #12]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008594:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800859a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800859c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a2:	3b01      	subs	r3, #1
 80085a4:	021b      	lsls	r3, r3, #8
 80085a6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a18      	ldr	r2, [pc, #96]	; (8008618 <HAL_SAI_Init+0x31c>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d119      	bne.n	80085ee <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80085ba:	4b18      	ldr	r3, [pc, #96]	; (800861c <HAL_SAI_Init+0x320>)
 80085bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085be:	4a17      	ldr	r2, [pc, #92]	; (800861c <HAL_SAI_Init+0x320>)
 80085c0:	f023 0301 	bic.w	r3, r3, #1
 80085c4:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d10e      	bne.n	80085ee <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d8:	3b01      	subs	r3, #1
 80085da:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80085dc:	490f      	ldr	r1, [pc, #60]	; (800861c <HAL_SAI_Init+0x320>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80085e2:	4b0e      	ldr	r3, [pc, #56]	; (800861c <HAL_SAI_Init+0x320>)
 80085e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085e6:	4a0d      	ldr	r2, [pc, #52]	; (800861c <HAL_SAI_Init+0x320>)
 80085e8:	f043 0301 	orr.w	r3, r3, #1
 80085ec:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3720      	adds	r7, #32
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	f005c010 	.word	0xf005c010
 8008614:	fff88000 	.word	0xfff88000
 8008618:	40015404 	.word	0x40015404
 800861c:	40015400 	.word	0x40015400

08008620 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <SAI_InitI2S+0x2e>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	2b02      	cmp	r3, #2
 800864c:	d103      	bne.n	8008656 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	651a      	str	r2, [r3, #80]	; 0x50
 8008654:	e002      	b.n	800865c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2201      	movs	r2, #1
 800865a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008662:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800866a:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e077      	b.n	8008776 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d107      	bne.n	800869c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008698:	665a      	str	r2, [r3, #100]	; 0x64
 800869a:	e006      	b.n	80086aa <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80086a2:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	665a      	str	r2, [r3, #100]	; 0x64
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d84f      	bhi.n	8008750 <SAI_InitI2S+0x130>
 80086b0:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <SAI_InitI2S+0x98>)
 80086b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b6:	bf00      	nop
 80086b8:	080086c9 	.word	0x080086c9
 80086bc:	080086eb 	.word	0x080086eb
 80086c0:	0800870d 	.word	0x0800870d
 80086c4:	0800872f 	.word	0x0800872f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2280      	movs	r2, #128	; 0x80
 80086cc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	085b      	lsrs	r3, r3, #1
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	085b      	lsrs	r3, r3, #1
 80086dc:	011a      	lsls	r2, r3, #4
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2240      	movs	r2, #64	; 0x40
 80086e6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80086e8:	e035      	b.n	8008756 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2280      	movs	r2, #128	; 0x80
 80086ee:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	085b      	lsrs	r3, r3, #1
 80086f4:	019a      	lsls	r2, r3, #6
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	085b      	lsrs	r3, r3, #1
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2280      	movs	r2, #128	; 0x80
 8008708:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800870a:	e024      	b.n	8008756 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	22c0      	movs	r2, #192	; 0xc0
 8008710:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	019a      	lsls	r2, r3, #6
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	085b      	lsrs	r3, r3, #1
 8008720:	015a      	lsls	r2, r3, #5
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2280      	movs	r2, #128	; 0x80
 800872a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800872c:	e013      	b.n	8008756 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	22e0      	movs	r2, #224	; 0xe0
 8008732:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	085b      	lsrs	r3, r3, #1
 8008738:	019a      	lsls	r2, r3, #6
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2280      	movs	r2, #128	; 0x80
 800874c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800874e:	e002      	b.n	8008756 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	75fb      	strb	r3, [r7, #23]
      break;
 8008754:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d10b      	bne.n	8008774 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d102      	bne.n	8008768 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2210      	movs	r2, #16
 8008766:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d102      	bne.n	8008774 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2208      	movs	r2, #8
 8008772:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8008774:	7dfb      	ldrb	r3, [r7, #23]
}
 8008776:	4618      	mov	r0, r3
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop

08008784 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <SAI_InitPCM+0x2e>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d103      	bne.n	80087ba <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2201      	movs	r2, #1
 80087b6:	651a      	str	r2, [r3, #80]	; 0x50
 80087b8:	e002      	b.n	80087c0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80087cc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80087d4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087e8:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	d103      	bne.n	80087f8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2201      	movs	r2, #1
 80087f4:	659a      	str	r2, [r3, #88]	; 0x58
 80087f6:	e002      	b.n	80087fe <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	220d      	movs	r2, #13
 80087fc:	659a      	str	r2, [r3, #88]	; 0x58
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b03      	cmp	r3, #3
 8008802:	d837      	bhi.n	8008874 <SAI_InitPCM+0xf0>
 8008804:	a201      	add	r2, pc, #4	; (adr r2, 800880c <SAI_InitPCM+0x88>)
 8008806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880a:	bf00      	nop
 800880c:	0800881d 	.word	0x0800881d
 8008810:	08008833 	.word	0x08008833
 8008814:	08008849 	.word	0x08008849
 8008818:	0800885f 	.word	0x0800885f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2280      	movs	r2, #128	; 0x80
 8008820:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	011a      	lsls	r2, r3, #4
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2240      	movs	r2, #64	; 0x40
 800882e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008830:	e023      	b.n	800887a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2280      	movs	r2, #128	; 0x80
 8008836:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2280      	movs	r2, #128	; 0x80
 8008844:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008846:	e018      	b.n	800887a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	22c0      	movs	r2, #192	; 0xc0
 800884c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2280      	movs	r2, #128	; 0x80
 800885a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800885c:	e00d      	b.n	800887a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	22e0      	movs	r2, #224	; 0xe0
 8008862:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2280      	movs	r2, #128	; 0x80
 8008870:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008872:	e002      	b.n	800887a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	75fb      	strb	r3, [r7, #23]
      break;
 8008878:	bf00      	nop
  }

  return status;
 800887a:	7dfb      	ldrb	r3, [r7, #23]
}
 800887c:	4618      	mov	r0, r3
 800887e:	371c      	adds	r7, #28
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008890:	4b18      	ldr	r3, [pc, #96]	; (80088f4 <SAI_Disable+0x6c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a18      	ldr	r2, [pc, #96]	; (80088f8 <SAI_Disable+0x70>)
 8008896:	fba2 2303 	umull	r2, r3, r2, r3
 800889a:	0b1b      	lsrs	r3, r3, #12
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80088b2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10a      	bne.n	80088d0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	72fb      	strb	r3, [r7, #11]
      break;
 80088ce:	e009      	b.n	80088e4 <SAI_Disable+0x5c>
    }
    count--;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e7      	bne.n	80088b4 <SAI_Disable+0x2c>

  return status;
 80088e4:	7afb      	ldrb	r3, [r7, #11]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3714      	adds	r7, #20
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20000004 	.word	0x20000004
 80088f8:	95cbec1b 	.word	0x95cbec1b

080088fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e095      	b.n	8008a3a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	2b00      	cmp	r3, #0
 8008914:	d108      	bne.n	8008928 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800891e:	d009      	beq.n	8008934 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	61da      	str	r2, [r3, #28]
 8008926:	e005      	b.n	8008934 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d106      	bne.n	8008954 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7f8 fc90 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800896a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008974:	d902      	bls.n	800897c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008976:	2300      	movs	r3, #0
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	e002      	b.n	8008982 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800897c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008980:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800898a:	d007      	beq.n	800899c <HAL_SPI_Init+0xa0>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008994:	d002      	beq.n	800899c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089ac:	431a      	orrs	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	431a      	orrs	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	431a      	orrs	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089d4:	431a      	orrs	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089de:	ea42 0103 	orr.w	r1, r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	0c1b      	lsrs	r3, r3, #16
 80089f8:	f003 0204 	and.w	r2, r3, #4
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	f003 0310 	and.w	r3, r3, #16
 8008a04:	431a      	orrs	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008a18:	ea42 0103 	orr.w	r1, r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e049      	b.n	8008ae8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7f8 ffc1 	bl	80019f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2202      	movs	r2, #2
 8008a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	4619      	mov	r1, r3
 8008a80:	4610      	mov	r0, r2
 8008a82:	f000 fb3f 	bl	8009104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d001      	beq.n	8008b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e036      	b.n	8008b76 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f042 0201 	orr.w	r2, r2, #1
 8008b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a17      	ldr	r2, [pc, #92]	; (8008b84 <HAL_TIM_Base_Start_IT+0x94>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d004      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x44>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b32:	d115      	bne.n	8008b60 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	4b13      	ldr	r3, [pc, #76]	; (8008b88 <HAL_TIM_Base_Start_IT+0x98>)
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b06      	cmp	r3, #6
 8008b44:	d015      	beq.n	8008b72 <HAL_TIM_Base_Start_IT+0x82>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b4c:	d011      	beq.n	8008b72 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f042 0201 	orr.w	r2, r2, #1
 8008b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b5e:	e008      	b.n	8008b72 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0201 	orr.w	r2, r2, #1
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	e000      	b.n	8008b74 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	40012c00 	.word	0x40012c00
 8008b88:	00010007 	.word	0x00010007

08008b8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e049      	b.n	8008c32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d106      	bne.n	8008bb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f841 	bl	8008c3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	f000 fa9a 	bl	8009104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b083      	sub	sp, #12
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c42:	bf00      	nop
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d122      	bne.n	8008caa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d11b      	bne.n	8008caa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f06f 0202 	mvn.w	r2, #2
 8008c7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	f003 0303 	and.w	r3, r3, #3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fa19 	bl	80090c8 <HAL_TIM_IC_CaptureCallback>
 8008c96:	e005      	b.n	8008ca4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fa0b 	bl	80090b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fa1c 	bl	80090dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	f003 0304 	and.w	r3, r3, #4
 8008cb4:	2b04      	cmp	r3, #4
 8008cb6:	d122      	bne.n	8008cfe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f003 0304 	and.w	r3, r3, #4
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d11b      	bne.n	8008cfe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f06f 0204 	mvn.w	r2, #4
 8008cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f9ef 	bl	80090c8 <HAL_TIM_IC_CaptureCallback>
 8008cea:	e005      	b.n	8008cf8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f9e1 	bl	80090b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f9f2 	bl	80090dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	f003 0308 	and.w	r3, r3, #8
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	d122      	bne.n	8008d52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	f003 0308 	and.w	r3, r3, #8
 8008d16:	2b08      	cmp	r3, #8
 8008d18:	d11b      	bne.n	8008d52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f06f 0208 	mvn.w	r2, #8
 8008d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2204      	movs	r2, #4
 8008d28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	f003 0303 	and.w	r3, r3, #3
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d003      	beq.n	8008d40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f9c5 	bl	80090c8 <HAL_TIM_IC_CaptureCallback>
 8008d3e:	e005      	b.n	8008d4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f9b7 	bl	80090b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f9c8 	bl	80090dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	f003 0310 	and.w	r3, r3, #16
 8008d5c:	2b10      	cmp	r3, #16
 8008d5e:	d122      	bne.n	8008da6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	f003 0310 	and.w	r3, r3, #16
 8008d6a:	2b10      	cmp	r3, #16
 8008d6c:	d11b      	bne.n	8008da6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f06f 0210 	mvn.w	r2, #16
 8008d76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2208      	movs	r2, #8
 8008d7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f99b 	bl	80090c8 <HAL_TIM_IC_CaptureCallback>
 8008d92:	e005      	b.n	8008da0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f98d 	bl	80090b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f99e 	bl	80090dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d10e      	bne.n	8008dd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d107      	bne.n	8008dd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f06f 0201 	mvn.w	r2, #1
 8008dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7f8 f823 	bl	8000e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ddc:	2b80      	cmp	r3, #128	; 0x80
 8008dde:	d10e      	bne.n	8008dfe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dea:	2b80      	cmp	r3, #128	; 0x80
 8008dec:	d107      	bne.n	8008dfe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fcff 	bl	80097fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e0c:	d10e      	bne.n	8008e2c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e18:	2b80      	cmp	r3, #128	; 0x80
 8008e1a:	d107      	bne.n	8008e2c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fcf2 	bl	8009810 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e36:	2b40      	cmp	r3, #64	; 0x40
 8008e38:	d10e      	bne.n	8008e58 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e44:	2b40      	cmp	r3, #64	; 0x40
 8008e46:	d107      	bne.n	8008e58 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f94c 	bl	80090f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f003 0320 	and.w	r3, r3, #32
 8008e62:	2b20      	cmp	r3, #32
 8008e64:	d10e      	bne.n	8008e84 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f003 0320 	and.w	r3, r3, #32
 8008e70:	2b20      	cmp	r3, #32
 8008e72:	d107      	bne.n	8008e84 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f06f 0220 	mvn.w	r2, #32
 8008e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fcb2 	bl	80097e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d101      	bne.n	8008eaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	e0ff      	b.n	80090aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b14      	cmp	r3, #20
 8008eb6:	f200 80f0 	bhi.w	800909a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008eba:	a201      	add	r2, pc, #4	; (adr r2, 8008ec0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec0:	08008f15 	.word	0x08008f15
 8008ec4:	0800909b 	.word	0x0800909b
 8008ec8:	0800909b 	.word	0x0800909b
 8008ecc:	0800909b 	.word	0x0800909b
 8008ed0:	08008f55 	.word	0x08008f55
 8008ed4:	0800909b 	.word	0x0800909b
 8008ed8:	0800909b 	.word	0x0800909b
 8008edc:	0800909b 	.word	0x0800909b
 8008ee0:	08008f97 	.word	0x08008f97
 8008ee4:	0800909b 	.word	0x0800909b
 8008ee8:	0800909b 	.word	0x0800909b
 8008eec:	0800909b 	.word	0x0800909b
 8008ef0:	08008fd7 	.word	0x08008fd7
 8008ef4:	0800909b 	.word	0x0800909b
 8008ef8:	0800909b 	.word	0x0800909b
 8008efc:	0800909b 	.word	0x0800909b
 8008f00:	08009019 	.word	0x08009019
 8008f04:	0800909b 	.word	0x0800909b
 8008f08:	0800909b 	.word	0x0800909b
 8008f0c:	0800909b 	.word	0x0800909b
 8008f10:	08009059 	.word	0x08009059
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68b9      	ldr	r1, [r7, #8]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 f956 	bl	80091cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	699a      	ldr	r2, [r3, #24]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f042 0208 	orr.w	r2, r2, #8
 8008f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	699a      	ldr	r2, [r3, #24]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f022 0204 	bic.w	r2, r2, #4
 8008f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6999      	ldr	r1, [r3, #24]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	691a      	ldr	r2, [r3, #16]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	619a      	str	r2, [r3, #24]
      break;
 8008f52:	e0a5      	b.n	80090a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68b9      	ldr	r1, [r7, #8]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 f9b2 	bl	80092c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	699a      	ldr	r2, [r3, #24]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699a      	ldr	r2, [r3, #24]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6999      	ldr	r1, [r3, #24]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	021a      	lsls	r2, r3, #8
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	430a      	orrs	r2, r1
 8008f92:	619a      	str	r2, [r3, #24]
      break;
 8008f94:	e084      	b.n	80090a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68b9      	ldr	r1, [r7, #8]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 fa0b 	bl	80093b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	69da      	ldr	r2, [r3, #28]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f042 0208 	orr.w	r2, r2, #8
 8008fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69da      	ldr	r2, [r3, #28]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f022 0204 	bic.w	r2, r2, #4
 8008fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	69d9      	ldr	r1, [r3, #28]
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	691a      	ldr	r2, [r3, #16]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	61da      	str	r2, [r3, #28]
      break;
 8008fd4:	e064      	b.n	80090a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68b9      	ldr	r1, [r7, #8]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fa63 	bl	80094a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	69da      	ldr	r2, [r3, #28]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	69da      	ldr	r2, [r3, #28]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69d9      	ldr	r1, [r3, #28]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	021a      	lsls	r2, r3, #8
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	61da      	str	r2, [r3, #28]
      break;
 8009016:	e043      	b.n	80090a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 faa0 	bl	8009564 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f042 0208 	orr.w	r2, r2, #8
 8009032:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0204 	bic.w	r2, r2, #4
 8009042:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	691a      	ldr	r2, [r3, #16]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009056:	e023      	b.n	80090a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68b9      	ldr	r1, [r7, #8]
 800905e:	4618      	mov	r0, r3
 8009060:	f000 fad8 	bl	8009614 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009072:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009082:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	021a      	lsls	r2, r3, #8
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009098:	e002      	b.n	80090a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	75fb      	strb	r3, [r7, #23]
      break;
 800909e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3718      	adds	r7, #24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop

080090b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a2a      	ldr	r2, [pc, #168]	; (80091c0 <TIM_Base_SetConfig+0xbc>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d003      	beq.n	8009124 <TIM_Base_SetConfig+0x20>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009122:	d108      	bne.n	8009136 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a21      	ldr	r2, [pc, #132]	; (80091c0 <TIM_Base_SetConfig+0xbc>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d00b      	beq.n	8009156 <TIM_Base_SetConfig+0x52>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009144:	d007      	beq.n	8009156 <TIM_Base_SetConfig+0x52>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a1e      	ldr	r2, [pc, #120]	; (80091c4 <TIM_Base_SetConfig+0xc0>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d003      	beq.n	8009156 <TIM_Base_SetConfig+0x52>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a1d      	ldr	r2, [pc, #116]	; (80091c8 <TIM_Base_SetConfig+0xc4>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d108      	bne.n	8009168 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800915c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	4313      	orrs	r3, r2
 8009166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	4313      	orrs	r3, r2
 8009174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a0c      	ldr	r2, [pc, #48]	; (80091c0 <TIM_Base_SetConfig+0xbc>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d007      	beq.n	80091a4 <TIM_Base_SetConfig+0xa0>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a0b      	ldr	r2, [pc, #44]	; (80091c4 <TIM_Base_SetConfig+0xc0>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d003      	beq.n	80091a4 <TIM_Base_SetConfig+0xa0>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a0a      	ldr	r2, [pc, #40]	; (80091c8 <TIM_Base_SetConfig+0xc4>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d103      	bne.n	80091ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	691a      	ldr	r2, [r3, #16]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	615a      	str	r2, [r3, #20]
}
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	40012c00 	.word	0x40012c00
 80091c4:	40014400 	.word	0x40014400
 80091c8:	40014800 	.word	0x40014800

080091cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	f023 0201 	bic.w	r2, r3, #1
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 0303 	bic.w	r3, r3, #3
 8009206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f023 0302 	bic.w	r3, r3, #2
 8009218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	4313      	orrs	r3, r2
 8009222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a24      	ldr	r2, [pc, #144]	; (80092b8 <TIM_OC1_SetConfig+0xec>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d007      	beq.n	800923c <TIM_OC1_SetConfig+0x70>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a23      	ldr	r2, [pc, #140]	; (80092bc <TIM_OC1_SetConfig+0xf0>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d003      	beq.n	800923c <TIM_OC1_SetConfig+0x70>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a22      	ldr	r2, [pc, #136]	; (80092c0 <TIM_OC1_SetConfig+0xf4>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d10c      	bne.n	8009256 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f023 0308 	bic.w	r3, r3, #8
 8009242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	4313      	orrs	r3, r2
 800924c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f023 0304 	bic.w	r3, r3, #4
 8009254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a17      	ldr	r2, [pc, #92]	; (80092b8 <TIM_OC1_SetConfig+0xec>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d007      	beq.n	800926e <TIM_OC1_SetConfig+0xa2>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a17      	ldr	r2, [pc, #92]	; (80092c0 <TIM_OC1_SetConfig+0xf4>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d003      	beq.n	800926e <TIM_OC1_SetConfig+0xa2>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a14      	ldr	r2, [pc, #80]	; (80092bc <TIM_OC1_SetConfig+0xf0>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d111      	bne.n	8009292 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800927c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	4313      	orrs	r3, r2
 8009286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	4313      	orrs	r3, r2
 8009290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	621a      	str	r2, [r3, #32]
}
 80092ac:	bf00      	nop
 80092ae:	371c      	adds	r7, #28
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	40012c00 	.word	0x40012c00
 80092bc:	40014800 	.word	0x40014800
 80092c0:	40014400 	.word	0x40014400

080092c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b087      	sub	sp, #28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	f023 0210 	bic.w	r2, r3, #16
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	4313      	orrs	r3, r2
 800930a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f023 0320 	bic.w	r3, r3, #32
 8009312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	011b      	lsls	r3, r3, #4
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	4313      	orrs	r3, r2
 800931e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a22      	ldr	r2, [pc, #136]	; (80093ac <TIM_OC2_SetConfig+0xe8>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d10d      	bne.n	8009344 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800932e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	011b      	lsls	r3, r3, #4
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	4313      	orrs	r3, r2
 800933a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009342:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a19      	ldr	r2, [pc, #100]	; (80093ac <TIM_OC2_SetConfig+0xe8>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d007      	beq.n	800935c <TIM_OC2_SetConfig+0x98>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a18      	ldr	r2, [pc, #96]	; (80093b0 <TIM_OC2_SetConfig+0xec>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d003      	beq.n	800935c <TIM_OC2_SetConfig+0x98>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a17      	ldr	r2, [pc, #92]	; (80093b4 <TIM_OC2_SetConfig+0xf0>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d113      	bne.n	8009384 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800936a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	4313      	orrs	r3, r2
 8009376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	4313      	orrs	r3, r2
 8009382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	621a      	str	r2, [r3, #32]
}
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	40012c00 	.word	0x40012c00
 80093b0:	40014400 	.word	0x40014400
 80093b4:	40014800 	.word	0x40014800

080093b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a1b      	ldr	r3, [r3, #32]
 80093c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 0303 	bic.w	r3, r3, #3
 80093f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	021b      	lsls	r3, r3, #8
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	4313      	orrs	r3, r2
 8009410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a21      	ldr	r2, [pc, #132]	; (800949c <TIM_OC3_SetConfig+0xe4>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d10d      	bne.n	8009436 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4313      	orrs	r3, r2
 800942c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a18      	ldr	r2, [pc, #96]	; (800949c <TIM_OC3_SetConfig+0xe4>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d007      	beq.n	800944e <TIM_OC3_SetConfig+0x96>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a17      	ldr	r2, [pc, #92]	; (80094a0 <TIM_OC3_SetConfig+0xe8>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d003      	beq.n	800944e <TIM_OC3_SetConfig+0x96>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a16      	ldr	r2, [pc, #88]	; (80094a4 <TIM_OC3_SetConfig+0xec>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d113      	bne.n	8009476 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800945c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	011b      	lsls	r3, r3, #4
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	4313      	orrs	r3, r2
 8009468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	4313      	orrs	r3, r2
 8009474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	621a      	str	r2, [r3, #32]
}
 8009490:	bf00      	nop
 8009492:	371c      	adds	r7, #28
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	40012c00 	.word	0x40012c00
 80094a0:	40014400 	.word	0x40014400
 80094a4:	40014800 	.word	0x40014800

080094a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	021b      	lsls	r3, r3, #8
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	031b      	lsls	r3, r3, #12
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	4313      	orrs	r3, r2
 8009502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a14      	ldr	r2, [pc, #80]	; (8009558 <TIM_OC4_SetConfig+0xb0>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d007      	beq.n	800951c <TIM_OC4_SetConfig+0x74>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a13      	ldr	r2, [pc, #76]	; (800955c <TIM_OC4_SetConfig+0xb4>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d003      	beq.n	800951c <TIM_OC4_SetConfig+0x74>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a12      	ldr	r2, [pc, #72]	; (8009560 <TIM_OC4_SetConfig+0xb8>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d109      	bne.n	8009530 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	019b      	lsls	r3, r3, #6
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	4313      	orrs	r3, r2
 800952e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	621a      	str	r2, [r3, #32]
}
 800954a:	bf00      	nop
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	40012c00 	.word	0x40012c00
 800955c:	40014400 	.word	0x40014400
 8009560:	40014800 	.word	0x40014800

08009564 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009564:	b480      	push	{r7}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800958a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	4313      	orrs	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80095a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	041b      	lsls	r3, r3, #16
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a13      	ldr	r2, [pc, #76]	; (8009608 <TIM_OC5_SetConfig+0xa4>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d007      	beq.n	80095ce <TIM_OC5_SetConfig+0x6a>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a12      	ldr	r2, [pc, #72]	; (800960c <TIM_OC5_SetConfig+0xa8>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d003      	beq.n	80095ce <TIM_OC5_SetConfig+0x6a>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a11      	ldr	r2, [pc, #68]	; (8009610 <TIM_OC5_SetConfig+0xac>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d109      	bne.n	80095e2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	021b      	lsls	r3, r3, #8
 80095dc:	697a      	ldr	r2, [r7, #20]
 80095de:	4313      	orrs	r3, r2
 80095e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	685a      	ldr	r2, [r3, #4]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	621a      	str	r2, [r3, #32]
}
 80095fc:	bf00      	nop
 80095fe:	371c      	adds	r7, #28
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	40012c00 	.word	0x40012c00
 800960c:	40014400 	.word	0x40014400
 8009610:	40014800 	.word	0x40014800

08009614 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009614:	b480      	push	{r7}
 8009616:	b087      	sub	sp, #28
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	021b      	lsls	r3, r3, #8
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4313      	orrs	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800965a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	051b      	lsls	r3, r3, #20
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	4313      	orrs	r3, r2
 8009666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a14      	ldr	r2, [pc, #80]	; (80096bc <TIM_OC6_SetConfig+0xa8>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d007      	beq.n	8009680 <TIM_OC6_SetConfig+0x6c>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a13      	ldr	r2, [pc, #76]	; (80096c0 <TIM_OC6_SetConfig+0xac>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d003      	beq.n	8009680 <TIM_OC6_SetConfig+0x6c>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a12      	ldr	r2, [pc, #72]	; (80096c4 <TIM_OC6_SetConfig+0xb0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d109      	bne.n	8009694 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009686:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	029b      	lsls	r3, r3, #10
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	4313      	orrs	r3, r2
 8009692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	621a      	str	r2, [r3, #32]
}
 80096ae:	bf00      	nop
 80096b0:	371c      	adds	r7, #28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	40012c00 	.word	0x40012c00
 80096c0:	40014400 	.word	0x40014400
 80096c4:	40014800 	.word	0x40014800

080096c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d101      	bne.n	80096e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096e0:	2302      	movs	r3, #2
 80096e2:	e078      	b.n	80097d6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	4313      	orrs	r3, r2
 8009706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	4313      	orrs	r3, r2
 8009714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4313      	orrs	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	4313      	orrs	r3, r2
 8009730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	4313      	orrs	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	041b      	lsls	r3, r3, #16
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a20      	ldr	r2, [pc, #128]	; (80097e4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d106      	bne.n	8009776 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	4313      	orrs	r3, r2
 8009774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a1a      	ldr	r2, [pc, #104]	; (80097e4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d121      	bne.n	80097c4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978a:	051b      	lsls	r3, r3, #20
 800978c:	4313      	orrs	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	4313      	orrs	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	4313      	orrs	r3, r2
 80097aa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a0c      	ldr	r2, [pc, #48]	; (80097e4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d106      	bne.n	80097c4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c0:	4313      	orrs	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	40012c00 	.word	0x40012c00

080097e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009834:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009838:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	b29a      	uxth	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009852:	b480      	push	{r7}
 8009854:	b085      	sub	sp, #20
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800985a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800985e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009866:	b29a      	uxth	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	b29b      	uxth	r3, r3
 800986c:	43db      	mvns	r3, r3
 800986e:	b29b      	uxth	r3, r3
 8009870:	4013      	ands	r3, r2
 8009872:	b29a      	uxth	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009888:	b084      	sub	sp, #16
 800988a:	b480      	push	{r7}
 800988c:	b083      	sub	sp, #12
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	f107 0014 	add.w	r0, r7, #20
 8009896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	b004      	add	sp, #16
 80098c8:	4770      	bx	lr
	...

080098cc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b09d      	sub	sp, #116	; 0x74
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	881b      	ldrh	r3, [r3, #0]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80098ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	78db      	ldrb	r3, [r3, #3]
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d81f      	bhi.n	800993e <USB_ActivateEndpoint+0x72>
 80098fe:	a201      	add	r2, pc, #4	; (adr r2, 8009904 <USB_ActivateEndpoint+0x38>)
 8009900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009904:	08009915 	.word	0x08009915
 8009908:	08009931 	.word	0x08009931
 800990c:	08009947 	.word	0x08009947
 8009910:	08009923 	.word	0x08009923
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009914:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009918:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800991c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009920:	e012      	b.n	8009948 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009922:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009926:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800992a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800992e:	e00b      	b.n	8009948 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009930:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009934:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009938:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800993c:	e004      	b.n	8009948 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009944:	e000      	b.n	8009948 <USB_ActivateEndpoint+0x7c>
      break;
 8009946:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	441a      	add	r2, r3
 8009952:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800995a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800995e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009966:	b29b      	uxth	r3, r3
 8009968:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	b29b      	uxth	r3, r3
 8009978:	b21b      	sxth	r3, r3
 800997a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800997e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009982:	b21a      	sxth	r2, r3
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	b21b      	sxth	r3, r3
 800998a:	4313      	orrs	r3, r2
 800998c:	b21b      	sxth	r3, r3
 800998e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	441a      	add	r2, r3
 800999c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80099a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	7b1b      	ldrb	r3, [r3, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f040 8149 	bne.w	8009c50 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	785b      	ldrb	r3, [r3, #1]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 8084 	beq.w	8009ad0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	61bb      	str	r3, [r7, #24]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	461a      	mov	r2, r3
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	4413      	add	r3, r2
 80099da:	61bb      	str	r3, [r7, #24]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	00da      	lsls	r2, r3, #3
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	88db      	ldrh	r3, [r3, #6]
 80099f0:	085b      	lsrs	r3, r3, #1
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	827b      	strh	r3, [r7, #18]
 8009a0a:	8a7b      	ldrh	r3, [r7, #18]
 8009a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d01b      	beq.n	8009a4c <USB_ActivateEndpoint+0x180>
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a2a:	823b      	strh	r3, [r7, #16]
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	441a      	add	r2, r3
 8009a36:	8a3b      	ldrh	r3, [r7, #16]
 8009a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	78db      	ldrb	r3, [r3, #3]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d020      	beq.n	8009a96 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a6a:	81bb      	strh	r3, [r7, #12]
 8009a6c:	89bb      	ldrh	r3, [r7, #12]
 8009a6e:	f083 0320 	eor.w	r3, r3, #32
 8009a72:	81bb      	strh	r3, [r7, #12]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	441a      	add	r2, r3
 8009a7e:	89bb      	ldrh	r3, [r7, #12]
 8009a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	8013      	strh	r3, [r2, #0]
 8009a94:	e2a6      	b.n	8009fe4 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	881b      	ldrh	r3, [r3, #0]
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009aac:	81fb      	strh	r3, [r7, #14]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	441a      	add	r2, r3
 8009ab8:	89fb      	ldrh	r3, [r7, #14]
 8009aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	8013      	strh	r3, [r2, #0]
 8009ace:	e289      	b.n	8009fe4 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	461a      	mov	r2, r3
 8009ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae0:	4413      	add	r3, r2
 8009ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	00da      	lsls	r2, r3, #3
 8009aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aec:	4413      	add	r3, r2
 8009aee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	88db      	ldrh	r3, [r3, #6]
 8009af8:	085b      	lsrs	r3, r3, #1
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	005b      	lsls	r3, r3, #1
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	461a      	mov	r2, r3
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	4413      	add	r3, r2
 8009b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	00da      	lsls	r2, r3, #3
 8009b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b20:	4413      	add	r3, r2
 8009b22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b26:	627b      	str	r3, [r7, #36]	; 0x24
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	2b3e      	cmp	r3, #62	; 0x3e
 8009b2e:	d918      	bls.n	8009b62 <USB_ActivateEndpoint+0x296>
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	095b      	lsrs	r3, r3, #5
 8009b36:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	f003 031f 	and.w	r3, r3, #31
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d102      	bne.n	8009b4a <USB_ActivateEndpoint+0x27e>
 8009b44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b46:	3b01      	subs	r3, #1
 8009b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	029b      	lsls	r3, r3, #10
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	801a      	strh	r2, [r3, #0]
 8009b60:	e029      	b.n	8009bb6 <USB_ActivateEndpoint+0x2ea>
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d112      	bne.n	8009b90 <USB_ActivateEndpoint+0x2c4>
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	801a      	strh	r2, [r3, #0]
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	801a      	strh	r2, [r3, #0]
 8009b8e:	e012      	b.n	8009bb6 <USB_ActivateEndpoint+0x2ea>
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	085b      	lsrs	r3, r3, #1
 8009b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <USB_ActivateEndpoint+0x2de>
 8009ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009baa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	029b      	lsls	r3, r3, #10
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	847b      	strh	r3, [r7, #34]	; 0x22
 8009bc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d01b      	beq.n	8009c06 <USB_ActivateEndpoint+0x33a>
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009be4:	843b      	strh	r3, [r7, #32]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	441a      	add	r2, r3
 8009bf0:	8c3b      	ldrh	r3, [r7, #32]
 8009bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c1c:	83fb      	strh	r3, [r7, #30]
 8009c1e:	8bfb      	ldrh	r3, [r7, #30]
 8009c20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c24:	83fb      	strh	r3, [r7, #30]
 8009c26:	8bfb      	ldrh	r3, [r7, #30]
 8009c28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c2c:	83fb      	strh	r3, [r7, #30]
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	441a      	add	r2, r3
 8009c38:	8bfb      	ldrh	r3, [r7, #30]
 8009c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	8013      	strh	r3, [r2, #0]
 8009c4e:	e1c9      	b.n	8009fe4 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	78db      	ldrb	r3, [r3, #3]
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d11e      	bne.n	8009c96 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c6e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	441a      	add	r2, r3
 8009c7c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c88:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	8013      	strh	r3, [r2, #0]
 8009c94:	e01d      	b.n	8009cd2 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	881b      	ldrh	r3, [r3, #0]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	441a      	add	r2, r3
 8009cba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	461a      	mov	r2, r3
 8009ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ce2:	4413      	add	r3, r2
 8009ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	00da      	lsls	r2, r3, #3
 8009cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cf4:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	891b      	ldrh	r3, [r3, #8]
 8009cfa:	085b      	lsrs	r3, r3, #1
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	005b      	lsls	r3, r3, #1
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d04:	801a      	strh	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	657b      	str	r3, [r7, #84]	; 0x54
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	461a      	mov	r2, r3
 8009d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d16:	4413      	add	r3, r2
 8009d18:	657b      	str	r3, [r7, #84]	; 0x54
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	00da      	lsls	r2, r3, #3
 8009d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d22:	4413      	add	r3, r2
 8009d24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d28:	653b      	str	r3, [r7, #80]	; 0x50
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	895b      	ldrh	r3, [r3, #10]
 8009d2e:	085b      	lsrs	r3, r3, #1
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	005b      	lsls	r3, r3, #1
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d38:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	785b      	ldrb	r3, [r3, #1]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f040 8093 	bne.w	8009e6a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	881b      	ldrh	r3, [r3, #0]
 8009d50:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009d54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d01b      	beq.n	8009d98 <USB_ActivateEndpoint+0x4cc>
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d76:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	441a      	add	r2, r3
 8009d82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009da6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01b      	beq.n	8009de8 <USB_ActivateEndpoint+0x51c>
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dc6:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	441a      	add	r2, r3
 8009dd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009de0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4413      	add	r3, r2
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dfe:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e06:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e0e:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	441a      	add	r2, r3
 8009e1a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	881b      	ldrh	r3, [r3, #0]
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e46:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	441a      	add	r2, r3
 8009e52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	8013      	strh	r3, [r2, #0]
 8009e68:	e0bc      	b.n	8009fe4 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009e7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d01d      	beq.n	8009ec2 <USB_ActivateEndpoint+0x5f6>
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	4413      	add	r3, r2
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e9c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	441a      	add	r2, r3
 8009eaa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4413      	add	r3, r2
 8009ecc:	881b      	ldrh	r3, [r3, #0]
 8009ece:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009ed2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d01d      	beq.n	8009f1a <USB_ActivateEndpoint+0x64e>
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4413      	add	r3, r2
 8009ee8:	881b      	ldrh	r3, [r3, #0]
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	441a      	add	r2, r3
 8009f02:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	78db      	ldrb	r3, [r3, #3]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d024      	beq.n	8009f6c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4413      	add	r3, r2
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f38:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009f3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009f40:	f083 0320 	eor.w	r3, r3, #32
 8009f44:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	441a      	add	r2, r3
 8009f52:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	8013      	strh	r3, [r2, #0]
 8009f6a:	e01d      	b.n	8009fa8 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	441a      	add	r2, r3
 8009f90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4413      	add	r3, r2
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fbe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	441a      	add	r2, r3
 8009fcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009fe4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3774      	adds	r7, #116	; 0x74
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b08d      	sub	sp, #52	; 0x34
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	7b1b      	ldrb	r3, [r3, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	f040 808e 	bne.w	800a124 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	785b      	ldrb	r3, [r3, #1]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d044      	beq.n	800a09a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	81bb      	strh	r3, [r7, #12]
 800a01e:	89bb      	ldrh	r3, [r7, #12]
 800a020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a024:	2b00      	cmp	r3, #0
 800a026:	d01b      	beq.n	800a060 <USB_DeactivateEndpoint+0x6c>
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	b29b      	uxth	r3, r3
 800a036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a03a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a03e:	817b      	strh	r3, [r7, #10]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	441a      	add	r2, r3
 800a04a:	897b      	ldrh	r3, [r7, #10]
 800a04c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a058:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	881b      	ldrh	r3, [r3, #0]
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a076:	813b      	strh	r3, [r7, #8]
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	441a      	add	r2, r3
 800a082:	893b      	ldrh	r3, [r7, #8]
 800a084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a08c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a094:	b29b      	uxth	r3, r3
 800a096:	8013      	strh	r3, [r2, #0]
 800a098:	e192      	b.n	800a3c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	881b      	ldrh	r3, [r3, #0]
 800a0a6:	827b      	strh	r3, [r7, #18]
 800a0a8:	8a7b      	ldrh	r3, [r7, #18]
 800a0aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d01b      	beq.n	800a0ea <USB_DeactivateEndpoint+0xf6>
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4413      	add	r3, r2
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0c8:	823b      	strh	r3, [r7, #16]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	441a      	add	r2, r3
 800a0d4:	8a3b      	ldrh	r3, [r7, #16]
 800a0d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a100:	81fb      	strh	r3, [r7, #14]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	441a      	add	r2, r3
 800a10c:	89fb      	ldrh	r3, [r7, #14]
 800a10e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a11a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a11e:	b29b      	uxth	r3, r3
 800a120:	8013      	strh	r3, [r2, #0]
 800a122:	e14d      	b.n	800a3c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	785b      	ldrb	r3, [r3, #1]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f040 80a5 	bne.w	800a278 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	843b      	strh	r3, [r7, #32]
 800a13c:	8c3b      	ldrh	r3, [r7, #32]
 800a13e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d01b      	beq.n	800a17e <USB_DeactivateEndpoint+0x18a>
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4413      	add	r3, r2
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	b29b      	uxth	r3, r3
 800a154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a15c:	83fb      	strh	r3, [r7, #30]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	441a      	add	r2, r3
 800a168:	8bfb      	ldrh	r3, [r7, #30]
 800a16a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a16e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a172:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	83bb      	strh	r3, [r7, #28]
 800a18c:	8bbb      	ldrh	r3, [r7, #28]
 800a18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a192:	2b00      	cmp	r3, #0
 800a194:	d01b      	beq.n	800a1ce <USB_DeactivateEndpoint+0x1da>
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4413      	add	r3, r2
 800a1a0:	881b      	ldrh	r3, [r3, #0]
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ac:	837b      	strh	r3, [r7, #26]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	441a      	add	r2, r3
 800a1b8:	8b7b      	ldrh	r3, [r7, #26]
 800a1ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	881b      	ldrh	r3, [r3, #0]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e4:	833b      	strh	r3, [r7, #24]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	441a      	add	r2, r3
 800a1f0:	8b3b      	ldrh	r3, [r7, #24]
 800a1f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a202:	b29b      	uxth	r3, r3
 800a204:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	b29b      	uxth	r3, r3
 800a214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a21c:	82fb      	strh	r3, [r7, #22]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	441a      	add	r2, r3
 800a228:	8afb      	ldrh	r3, [r7, #22]
 800a22a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a22e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	881b      	ldrh	r3, [r3, #0]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a254:	82bb      	strh	r3, [r7, #20]
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	441a      	add	r2, r3
 800a260:	8abb      	ldrh	r3, [r7, #20]
 800a262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a26a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a26e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a272:	b29b      	uxth	r3, r3
 800a274:	8013      	strh	r3, [r2, #0]
 800a276:	e0a3      	b.n	800a3c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4413      	add	r3, r2
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a286:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d01b      	beq.n	800a2c8 <USB_DeactivateEndpoint+0x2d4>
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4413      	add	r3, r2
 800a29a:	881b      	ldrh	r3, [r3, #0]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	441a      	add	r2, r3
 800a2b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a2b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	881b      	ldrh	r3, [r3, #0]
 800a2d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a2d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a2d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d01b      	beq.n	800a318 <USB_DeactivateEndpoint+0x324>
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2f6:	853b      	strh	r3, [r7, #40]	; 0x28
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	441a      	add	r2, r3
 800a302:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a30c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a310:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a314:	b29b      	uxth	r3, r3
 800a316:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	b29b      	uxth	r3, r3
 800a326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a32a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a32e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	441a      	add	r2, r3
 800a33a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a33c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a366:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	441a      	add	r2, r3
 800a372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a37c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a384:	b29b      	uxth	r3, r3
 800a386:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	b29b      	uxth	r3, r3
 800a396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a39e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	441a      	add	r2, r3
 800a3aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a3ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3734      	adds	r7, #52	; 0x34
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b0c2      	sub	sp, #264	; 0x108
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	1d3b      	adds	r3, r7, #4
 800a3d6:	6018      	str	r0, [r3, #0]
 800a3d8:	463b      	mov	r3, r7
 800a3da:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3dc:	463b      	mov	r3, r7
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	785b      	ldrb	r3, [r3, #1]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	f040 8509 	bne.w	800adfa <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a3e8:	463b      	mov	r3, r7
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	699a      	ldr	r2, [r3, #24]
 800a3ee:	463b      	mov	r3, r7
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d905      	bls.n	800a404 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800a3f8:	463b      	mov	r3, r7
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a402:	e004      	b.n	800a40e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800a404:	463b      	mov	r3, r7
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a40e:	463b      	mov	r3, r7
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	7b1b      	ldrb	r3, [r3, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d128      	bne.n	800a46a <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a418:	463b      	mov	r3, r7
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6959      	ldr	r1, [r3, #20]
 800a41e:	463b      	mov	r3, r7
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	88da      	ldrh	r2, [r3, #6]
 800a424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a428:	b29b      	uxth	r3, r3
 800a42a:	1d38      	adds	r0, r7, #4
 800a42c:	6800      	ldr	r0, [r0, #0]
 800a42e:	f001 f9da 	bl	800b7e6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a432:	1d3b      	adds	r3, r7, #4
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	613b      	str	r3, [r7, #16]
 800a438:	1d3b      	adds	r3, r7, #4
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a440:	b29b      	uxth	r3, r3
 800a442:	461a      	mov	r2, r3
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	4413      	add	r3, r2
 800a448:	613b      	str	r3, [r7, #16]
 800a44a:	463b      	mov	r3, r7
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	00da      	lsls	r2, r3, #3
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	4413      	add	r3, r2
 800a456:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a45a:	60fb      	str	r3, [r7, #12]
 800a45c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a460:	b29a      	uxth	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	801a      	strh	r2, [r3, #0]
 800a466:	f000 bc9f 	b.w	800ada8 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a46a:	463b      	mov	r3, r7
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	78db      	ldrb	r3, [r3, #3]
 800a470:	2b02      	cmp	r3, #2
 800a472:	f040 8347 	bne.w	800ab04 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a476:	463b      	mov	r3, r7
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	6a1a      	ldr	r2, [r3, #32]
 800a47c:	463b      	mov	r3, r7
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	429a      	cmp	r2, r3
 800a484:	f240 82eb 	bls.w	800aa5e <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a488:	1d3b      	adds	r3, r7, #4
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	463b      	mov	r3, r7
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a49e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a4a6:	1d3b      	adds	r3, r7, #4
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	463b      	mov	r3, r7
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	441a      	add	r2, r3
 800a4b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a4b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4c0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a4c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6a1a      	ldr	r2, [r3, #32]
 800a4d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d6:	1ad2      	subs	r2, r2, r3
 800a4d8:	463b      	mov	r3, r7
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a4de:	1d3b      	adds	r3, r7, #4
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	463b      	mov	r3, r7
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 8159 	beq.w	800a7ac <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a4fa:	1d3b      	adds	r3, r7, #4
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	633b      	str	r3, [r7, #48]	; 0x30
 800a500:	463b      	mov	r3, r7
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	785b      	ldrb	r3, [r3, #1]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d164      	bne.n	800a5d4 <USB_EPStartXfer+0x206>
 800a50a:	1d3b      	adds	r3, r7, #4
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a510:	1d3b      	adds	r3, r7, #4
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a518:	b29b      	uxth	r3, r3
 800a51a:	461a      	mov	r2, r3
 800a51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51e:	4413      	add	r3, r2
 800a520:	62bb      	str	r3, [r7, #40]	; 0x28
 800a522:	463b      	mov	r3, r7
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	00da      	lsls	r2, r3, #3
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	4413      	add	r3, r2
 800a52e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a532:	627b      	str	r3, [r7, #36]	; 0x24
 800a534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a538:	2b3e      	cmp	r3, #62	; 0x3e
 800a53a:	d91c      	bls.n	800a576 <USB_EPStartXfer+0x1a8>
 800a53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a540:	095b      	lsrs	r3, r3, #5
 800a542:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a54a:	f003 031f 	and.w	r3, r3, #31
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d104      	bne.n	800a55c <USB_EPStartXfer+0x18e>
 800a552:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a556:	3b01      	subs	r3, #1
 800a558:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a55c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a560:	b29b      	uxth	r3, r3
 800a562:	029b      	lsls	r3, r3, #10
 800a564:	b29b      	uxth	r3, r3
 800a566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a56a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a56e:	b29a      	uxth	r2, r3
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	801a      	strh	r2, [r3, #0]
 800a574:	e04a      	b.n	800a60c <USB_EPStartXfer+0x23e>
 800a576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d112      	bne.n	800a5a4 <USB_EPStartXfer+0x1d6>
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	b29b      	uxth	r3, r3
 800a584:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a588:	b29a      	uxth	r2, r3
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	801a      	strh	r2, [r3, #0]
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	881b      	ldrh	r3, [r3, #0]
 800a592:	b29b      	uxth	r3, r3
 800a594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	801a      	strh	r2, [r3, #0]
 800a5a2:	e033      	b.n	800a60c <USB_EPStartXfer+0x23e>
 800a5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a8:	085b      	lsrs	r3, r3, #1
 800a5aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d004      	beq.n	800a5c4 <USB_EPStartXfer+0x1f6>
 800a5ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a5be:	3301      	adds	r3, #1
 800a5c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a5c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	029b      	lsls	r3, r3, #10
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d0:	801a      	strh	r2, [r3, #0]
 800a5d2:	e01b      	b.n	800a60c <USB_EPStartXfer+0x23e>
 800a5d4:	463b      	mov	r3, r7
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	785b      	ldrb	r3, [r3, #1]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d116      	bne.n	800a60c <USB_EPStartXfer+0x23e>
 800a5de:	1d3b      	adds	r3, r7, #4
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	4413      	add	r3, r2
 800a5ee:	633b      	str	r3, [r7, #48]	; 0x30
 800a5f0:	463b      	mov	r3, r7
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	00da      	lsls	r2, r3, #3
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a600:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a606:	b29a      	uxth	r2, r3
 800a608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a60c:	463b      	mov	r3, r7
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	895b      	ldrh	r3, [r3, #10]
 800a612:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a616:	463b      	mov	r3, r7
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	6959      	ldr	r1, [r3, #20]
 800a61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a620:	b29b      	uxth	r3, r3
 800a622:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a626:	1d38      	adds	r0, r7, #4
 800a628:	6800      	ldr	r0, [r0, #0]
 800a62a:	f001 f8dc 	bl	800b7e6 <USB_WritePMA>
            ep->xfer_buff += len;
 800a62e:	463b      	mov	r3, r7
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	695a      	ldr	r2, [r3, #20]
 800a634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a638:	441a      	add	r2, r3
 800a63a:	463b      	mov	r3, r7
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a640:	463b      	mov	r3, r7
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6a1a      	ldr	r2, [r3, #32]
 800a646:	463b      	mov	r3, r7
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d909      	bls.n	800a664 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800a650:	463b      	mov	r3, r7
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	6a1a      	ldr	r2, [r3, #32]
 800a656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65a:	1ad2      	subs	r2, r2, r3
 800a65c:	463b      	mov	r3, r7
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	621a      	str	r2, [r3, #32]
 800a662:	e008      	b.n	800a676 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800a664:	463b      	mov	r3, r7
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6a1b      	ldr	r3, [r3, #32]
 800a66a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a66e:	463b      	mov	r3, r7
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2200      	movs	r2, #0
 800a674:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a676:	463b      	mov	r3, r7
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	785b      	ldrb	r3, [r3, #1]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d164      	bne.n	800a74a <USB_EPStartXfer+0x37c>
 800a680:	1d3b      	adds	r3, r7, #4
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	61bb      	str	r3, [r7, #24]
 800a686:	1d3b      	adds	r3, r7, #4
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a68e:	b29b      	uxth	r3, r3
 800a690:	461a      	mov	r2, r3
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	4413      	add	r3, r2
 800a696:	61bb      	str	r3, [r7, #24]
 800a698:	463b      	mov	r3, r7
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	00da      	lsls	r2, r3, #3
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ae:	2b3e      	cmp	r3, #62	; 0x3e
 800a6b0:	d91c      	bls.n	800a6ec <USB_EPStartXfer+0x31e>
 800a6b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b6:	095b      	lsrs	r3, r3, #5
 800a6b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c0:	f003 031f 	and.w	r3, r3, #31
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d104      	bne.n	800a6d2 <USB_EPStartXfer+0x304>
 800a6c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a6d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	029b      	lsls	r3, r3, #10
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	801a      	strh	r2, [r3, #0]
 800a6ea:	e04d      	b.n	800a788 <USB_EPStartXfer+0x3ba>
 800a6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d112      	bne.n	800a71a <USB_EPStartXfer+0x34c>
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	881b      	ldrh	r3, [r3, #0]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	801a      	strh	r2, [r3, #0]
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	b29b      	uxth	r3, r3
 800a70a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a70e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a712:	b29a      	uxth	r2, r3
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	801a      	strh	r2, [r3, #0]
 800a718:	e036      	b.n	800a788 <USB_EPStartXfer+0x3ba>
 800a71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a71e:	085b      	lsrs	r3, r3, #1
 800a720:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a728:	f003 0301 	and.w	r3, r3, #1
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d004      	beq.n	800a73a <USB_EPStartXfer+0x36c>
 800a730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a734:	3301      	adds	r3, #1
 800a736:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a73a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a73e:	b29b      	uxth	r3, r3
 800a740:	029b      	lsls	r3, r3, #10
 800a742:	b29a      	uxth	r2, r3
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	801a      	strh	r2, [r3, #0]
 800a748:	e01e      	b.n	800a788 <USB_EPStartXfer+0x3ba>
 800a74a:	463b      	mov	r3, r7
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	785b      	ldrb	r3, [r3, #1]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d119      	bne.n	800a788 <USB_EPStartXfer+0x3ba>
 800a754:	1d3b      	adds	r3, r7, #4
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	623b      	str	r3, [r7, #32]
 800a75a:	1d3b      	adds	r3, r7, #4
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a762:	b29b      	uxth	r3, r3
 800a764:	461a      	mov	r2, r3
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	4413      	add	r3, r2
 800a76a:	623b      	str	r3, [r7, #32]
 800a76c:	463b      	mov	r3, r7
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	00da      	lsls	r2, r3, #3
 800a774:	6a3b      	ldr	r3, [r7, #32]
 800a776:	4413      	add	r3, r2
 800a778:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a77c:	61fb      	str	r3, [r7, #28]
 800a77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a782:	b29a      	uxth	r2, r3
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a788:	463b      	mov	r3, r7
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	891b      	ldrh	r3, [r3, #8]
 800a78e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a792:	463b      	mov	r3, r7
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	6959      	ldr	r1, [r3, #20]
 800a798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a7a2:	1d38      	adds	r0, r7, #4
 800a7a4:	6800      	ldr	r0, [r0, #0]
 800a7a6:	f001 f81e 	bl	800b7e6 <USB_WritePMA>
 800a7aa:	e2fd      	b.n	800ada8 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a7ac:	463b      	mov	r3, r7
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	785b      	ldrb	r3, [r3, #1]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d164      	bne.n	800a880 <USB_EPStartXfer+0x4b2>
 800a7b6:	1d3b      	adds	r3, r7, #4
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7bc:	1d3b      	adds	r3, r7, #4
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ca:	4413      	add	r3, r2
 800a7cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7ce:	463b      	mov	r3, r7
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	00da      	lsls	r2, r3, #3
 800a7d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7d8:	4413      	add	r3, r2
 800a7da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7de:	647b      	str	r3, [r7, #68]	; 0x44
 800a7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e4:	2b3e      	cmp	r3, #62	; 0x3e
 800a7e6:	d91c      	bls.n	800a822 <USB_EPStartXfer+0x454>
 800a7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ec:	095b      	lsrs	r3, r3, #5
 800a7ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f6:	f003 031f 	and.w	r3, r3, #31
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d104      	bne.n	800a808 <USB_EPStartXfer+0x43a>
 800a7fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a802:	3b01      	subs	r3, #1
 800a804:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a808:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	029b      	lsls	r3, r3, #10
 800a810:	b29b      	uxth	r3, r3
 800a812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a81e:	801a      	strh	r2, [r3, #0]
 800a820:	e04d      	b.n	800a8be <USB_EPStartXfer+0x4f0>
 800a822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a826:	2b00      	cmp	r3, #0
 800a828:	d112      	bne.n	800a850 <USB_EPStartXfer+0x482>
 800a82a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	b29b      	uxth	r3, r3
 800a830:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a834:	b29a      	uxth	r2, r3
 800a836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a838:	801a      	strh	r2, [r3, #0]
 800a83a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a848:	b29a      	uxth	r2, r3
 800a84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a84c:	801a      	strh	r2, [r3, #0]
 800a84e:	e036      	b.n	800a8be <USB_EPStartXfer+0x4f0>
 800a850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a854:	085b      	lsrs	r3, r3, #1
 800a856:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	2b00      	cmp	r3, #0
 800a864:	d004      	beq.n	800a870 <USB_EPStartXfer+0x4a2>
 800a866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a86a:	3301      	adds	r3, #1
 800a86c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a870:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a874:	b29b      	uxth	r3, r3
 800a876:	029b      	lsls	r3, r3, #10
 800a878:	b29a      	uxth	r2, r3
 800a87a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a87c:	801a      	strh	r2, [r3, #0]
 800a87e:	e01e      	b.n	800a8be <USB_EPStartXfer+0x4f0>
 800a880:	463b      	mov	r3, r7
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	785b      	ldrb	r3, [r3, #1]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d119      	bne.n	800a8be <USB_EPStartXfer+0x4f0>
 800a88a:	1d3b      	adds	r3, r7, #4
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	653b      	str	r3, [r7, #80]	; 0x50
 800a890:	1d3b      	adds	r3, r7, #4
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a898:	b29b      	uxth	r3, r3
 800a89a:	461a      	mov	r2, r3
 800a89c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a89e:	4413      	add	r3, r2
 800a8a0:	653b      	str	r3, [r7, #80]	; 0x50
 800a8a2:	463b      	mov	r3, r7
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	00da      	lsls	r2, r3, #3
 800a8aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a8be:	463b      	mov	r3, r7
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	891b      	ldrh	r3, [r3, #8]
 800a8c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8c8:	463b      	mov	r3, r7
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6959      	ldr	r1, [r3, #20]
 800a8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a8d8:	1d38      	adds	r0, r7, #4
 800a8da:	6800      	ldr	r0, [r0, #0]
 800a8dc:	f000 ff83 	bl	800b7e6 <USB_WritePMA>
            ep->xfer_buff += len;
 800a8e0:	463b      	mov	r3, r7
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	695a      	ldr	r2, [r3, #20]
 800a8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ea:	441a      	add	r2, r3
 800a8ec:	463b      	mov	r3, r7
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a8f2:	463b      	mov	r3, r7
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6a1a      	ldr	r2, [r3, #32]
 800a8f8:	463b      	mov	r3, r7
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d909      	bls.n	800a916 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800a902:	463b      	mov	r3, r7
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	6a1a      	ldr	r2, [r3, #32]
 800a908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a90c:	1ad2      	subs	r2, r2, r3
 800a90e:	463b      	mov	r3, r7
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	621a      	str	r2, [r3, #32]
 800a914:	e008      	b.n	800a928 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800a916:	463b      	mov	r3, r7
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	6a1b      	ldr	r3, [r3, #32]
 800a91c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a920:	463b      	mov	r3, r7
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2200      	movs	r2, #0
 800a926:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a928:	1d3b      	adds	r3, r7, #4
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	643b      	str	r3, [r7, #64]	; 0x40
 800a92e:	463b      	mov	r3, r7
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	785b      	ldrb	r3, [r3, #1]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d164      	bne.n	800aa02 <USB_EPStartXfer+0x634>
 800a938:	1d3b      	adds	r3, r7, #4
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a93e:	1d3b      	adds	r3, r7, #4
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a946:	b29b      	uxth	r3, r3
 800a948:	461a      	mov	r2, r3
 800a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94c:	4413      	add	r3, r2
 800a94e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a950:	463b      	mov	r3, r7
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	00da      	lsls	r2, r3, #3
 800a958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95a:	4413      	add	r3, r2
 800a95c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a960:	637b      	str	r3, [r7, #52]	; 0x34
 800a962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a966:	2b3e      	cmp	r3, #62	; 0x3e
 800a968:	d91c      	bls.n	800a9a4 <USB_EPStartXfer+0x5d6>
 800a96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a96e:	095b      	lsrs	r3, r3, #5
 800a970:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a978:	f003 031f 	and.w	r3, r3, #31
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d104      	bne.n	800a98a <USB_EPStartXfer+0x5bc>
 800a980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a984:	3b01      	subs	r3, #1
 800a986:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a98a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a98e:	b29b      	uxth	r3, r3
 800a990:	029b      	lsls	r3, r3, #10
 800a992:	b29b      	uxth	r3, r3
 800a994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a0:	801a      	strh	r2, [r3, #0]
 800a9a2:	e04a      	b.n	800aa3a <USB_EPStartXfer+0x66c>
 800a9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d112      	bne.n	800a9d2 <USB_EPStartXfer+0x604>
 800a9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ba:	801a      	strh	r2, [r3, #0]
 800a9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ce:	801a      	strh	r2, [r3, #0]
 800a9d0:	e033      	b.n	800aa3a <USB_EPStartXfer+0x66c>
 800a9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d6:	085b      	lsrs	r3, r3, #1
 800a9d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d004      	beq.n	800a9f2 <USB_EPStartXfer+0x624>
 800a9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	029b      	lsls	r3, r3, #10
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fe:	801a      	strh	r2, [r3, #0]
 800aa00:	e01b      	b.n	800aa3a <USB_EPStartXfer+0x66c>
 800aa02:	463b      	mov	r3, r7
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	785b      	ldrb	r3, [r3, #1]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d116      	bne.n	800aa3a <USB_EPStartXfer+0x66c>
 800aa0c:	1d3b      	adds	r3, r7, #4
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	461a      	mov	r2, r3
 800aa18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa1a:	4413      	add	r3, r2
 800aa1c:	643b      	str	r3, [r7, #64]	; 0x40
 800aa1e:	463b      	mov	r3, r7
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	00da      	lsls	r2, r3, #3
 800aa26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa28:	4413      	add	r3, r2
 800aa2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aa3a:	463b      	mov	r3, r7
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	895b      	ldrh	r3, [r3, #10]
 800aa40:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa44:	463b      	mov	r3, r7
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6959      	ldr	r1, [r3, #20]
 800aa4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa54:	1d38      	adds	r0, r7, #4
 800aa56:	6800      	ldr	r0, [r0, #0]
 800aa58:	f000 fec5 	bl	800b7e6 <USB_WritePMA>
 800aa5c:	e1a4      	b.n	800ada8 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aa5e:	463b      	mov	r3, r7
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aa68:	1d3b      	adds	r3, r7, #4
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	463b      	mov	r3, r7
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4413      	add	r3, r2
 800aa76:	881b      	ldrh	r3, [r3, #0]
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aa7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa82:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aa86:	1d3b      	adds	r3, r7, #4
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	463b      	mov	r3, r7
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	441a      	add	r2, r3
 800aa94:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aa98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aaac:	1d3b      	adds	r3, r7, #4
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aab2:	1d3b      	adds	r3, r7, #4
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	461a      	mov	r2, r3
 800aabe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aac0:	4413      	add	r3, r2
 800aac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aac4:	463b      	mov	r3, r7
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	00da      	lsls	r2, r3, #3
 800aacc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aace:	4413      	add	r3, r2
 800aad0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aad4:	65bb      	str	r3, [r7, #88]	; 0x58
 800aad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aada:	b29a      	uxth	r2, r3
 800aadc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aade:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aae0:	463b      	mov	r3, r7
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	891b      	ldrh	r3, [r3, #8]
 800aae6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aaea:	463b      	mov	r3, r7
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6959      	ldr	r1, [r3, #20]
 800aaf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aafa:	1d38      	adds	r0, r7, #4
 800aafc:	6800      	ldr	r0, [r0, #0]
 800aafe:	f000 fe72 	bl	800b7e6 <USB_WritePMA>
 800ab02:	e151      	b.n	800ada8 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ab04:	463b      	mov	r3, r7
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6a1a      	ldr	r2, [r3, #32]
 800ab0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab0e:	1ad2      	subs	r2, r2, r3
 800ab10:	463b      	mov	r3, r7
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab16:	1d3b      	adds	r3, r7, #4
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	463b      	mov	r3, r7
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 809b 	beq.w	800ac68 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab32:	1d3b      	adds	r3, r7, #4
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	673b      	str	r3, [r7, #112]	; 0x70
 800ab38:	463b      	mov	r3, r7
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	785b      	ldrb	r3, [r3, #1]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d164      	bne.n	800ac0c <USB_EPStartXfer+0x83e>
 800ab42:	1d3b      	adds	r3, r7, #4
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab48:	1d3b      	adds	r3, r7, #4
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	461a      	mov	r2, r3
 800ab54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab56:	4413      	add	r3, r2
 800ab58:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab5a:	463b      	mov	r3, r7
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	00da      	lsls	r2, r3, #3
 800ab62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab64:	4413      	add	r3, r2
 800ab66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab6a:	667b      	str	r3, [r7, #100]	; 0x64
 800ab6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab70:	2b3e      	cmp	r3, #62	; 0x3e
 800ab72:	d91c      	bls.n	800abae <USB_EPStartXfer+0x7e0>
 800ab74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab78:	095b      	lsrs	r3, r3, #5
 800ab7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab82:	f003 031f 	and.w	r3, r3, #31
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d104      	bne.n	800ab94 <USB_EPStartXfer+0x7c6>
 800ab8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	029b      	lsls	r3, r3, #10
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abaa:	801a      	strh	r2, [r3, #0]
 800abac:	e04a      	b.n	800ac44 <USB_EPStartXfer+0x876>
 800abae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d112      	bne.n	800abdc <USB_EPStartXfer+0x80e>
 800abb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	b29b      	uxth	r3, r3
 800abbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abc4:	801a      	strh	r2, [r3, #0]
 800abc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	b29b      	uxth	r3, r3
 800abcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abd8:	801a      	strh	r2, [r3, #0]
 800abda:	e033      	b.n	800ac44 <USB_EPStartXfer+0x876>
 800abdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe0:	085b      	lsrs	r3, r3, #1
 800abe2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d004      	beq.n	800abfc <USB_EPStartXfer+0x82e>
 800abf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abf6:	3301      	adds	r3, #1
 800abf8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	029b      	lsls	r3, r3, #10
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac08:	801a      	strh	r2, [r3, #0]
 800ac0a:	e01b      	b.n	800ac44 <USB_EPStartXfer+0x876>
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	785b      	ldrb	r3, [r3, #1]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d116      	bne.n	800ac44 <USB_EPStartXfer+0x876>
 800ac16:	1d3b      	adds	r3, r7, #4
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	461a      	mov	r2, r3
 800ac22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac24:	4413      	add	r3, r2
 800ac26:	673b      	str	r3, [r7, #112]	; 0x70
 800ac28:	463b      	mov	r3, r7
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	00da      	lsls	r2, r3, #3
 800ac30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac32:	4413      	add	r3, r2
 800ac34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac38:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ac44:	463b      	mov	r3, r7
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	895b      	ldrh	r3, [r3, #10]
 800ac4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac4e:	463b      	mov	r3, r7
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	6959      	ldr	r1, [r3, #20]
 800ac54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac5e:	1d38      	adds	r0, r7, #4
 800ac60:	6800      	ldr	r0, [r0, #0]
 800ac62:	f000 fdc0 	bl	800b7e6 <USB_WritePMA>
 800ac66:	e09f      	b.n	800ada8 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ac68:	463b      	mov	r3, r7
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	785b      	ldrb	r3, [r3, #1]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d164      	bne.n	800ad3c <USB_EPStartXfer+0x96e>
 800ac72:	1d3b      	adds	r3, r7, #4
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac78:	1d3b      	adds	r3, r7, #4
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	461a      	mov	r2, r3
 800ac84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac86:	4413      	add	r3, r2
 800ac88:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac8a:	463b      	mov	r3, r7
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	00da      	lsls	r2, r3, #3
 800ac92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac94:	4413      	add	r3, r2
 800ac96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac9a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca0:	2b3e      	cmp	r3, #62	; 0x3e
 800aca2:	d91c      	bls.n	800acde <USB_EPStartXfer+0x910>
 800aca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca8:	095b      	lsrs	r3, r3, #5
 800acaa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800acae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb2:	f003 031f 	and.w	r3, r3, #31
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d104      	bne.n	800acc4 <USB_EPStartXfer+0x8f6>
 800acba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800acbe:	3b01      	subs	r3, #1
 800acc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800acc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800acc8:	b29b      	uxth	r3, r3
 800acca:	029b      	lsls	r3, r3, #10
 800accc:	b29b      	uxth	r3, r3
 800acce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acda:	801a      	strh	r2, [r3, #0]
 800acdc:	e053      	b.n	800ad86 <USB_EPStartXfer+0x9b8>
 800acde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d112      	bne.n	800ad0c <USB_EPStartXfer+0x93e>
 800ace6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ace8:	881b      	ldrh	r3, [r3, #0]
 800acea:	b29b      	uxth	r3, r3
 800acec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acf4:	801a      	strh	r2, [r3, #0]
 800acf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad08:	801a      	strh	r2, [r3, #0]
 800ad0a:	e03c      	b.n	800ad86 <USB_EPStartXfer+0x9b8>
 800ad0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad10:	085b      	lsrs	r3, r3, #1
 800ad12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad1a:	f003 0301 	and.w	r3, r3, #1
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d004      	beq.n	800ad2c <USB_EPStartXfer+0x95e>
 800ad22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad26:	3301      	adds	r3, #1
 800ad28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	029b      	lsls	r3, r3, #10
 800ad34:	b29a      	uxth	r2, r3
 800ad36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad38:	801a      	strh	r2, [r3, #0]
 800ad3a:	e024      	b.n	800ad86 <USB_EPStartXfer+0x9b8>
 800ad3c:	463b      	mov	r3, r7
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	785b      	ldrb	r3, [r3, #1]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d11f      	bne.n	800ad86 <USB_EPStartXfer+0x9b8>
 800ad46:	1d3b      	adds	r3, r7, #4
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad4e:	1d3b      	adds	r3, r7, #4
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	461a      	mov	r2, r3
 800ad5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad5e:	4413      	add	r3, r2
 800ad60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad64:	463b      	mov	r3, r7
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	00da      	lsls	r2, r3, #3
 800ad6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad70:	4413      	add	r3, r2
 800ad72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7e:	b29a      	uxth	r2, r3
 800ad80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ad84:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ad86:	463b      	mov	r3, r7
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	891b      	ldrh	r3, [r3, #8]
 800ad8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad90:	463b      	mov	r3, r7
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	6959      	ldr	r1, [r3, #20]
 800ad96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ada0:	1d38      	adds	r0, r7, #4
 800ada2:	6800      	ldr	r0, [r0, #0]
 800ada4:	f000 fd1f 	bl	800b7e6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ada8:	1d3b      	adds	r3, r7, #4
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	463b      	mov	r3, r7
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	881b      	ldrh	r3, [r3, #0]
 800adb8:	b29b      	uxth	r3, r3
 800adba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adc2:	817b      	strh	r3, [r7, #10]
 800adc4:	897b      	ldrh	r3, [r7, #10]
 800adc6:	f083 0310 	eor.w	r3, r3, #16
 800adca:	817b      	strh	r3, [r7, #10]
 800adcc:	897b      	ldrh	r3, [r7, #10]
 800adce:	f083 0320 	eor.w	r3, r3, #32
 800add2:	817b      	strh	r3, [r7, #10]
 800add4:	1d3b      	adds	r3, r7, #4
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	463b      	mov	r3, r7
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	441a      	add	r2, r3
 800ade2:	897b      	ldrh	r3, [r7, #10]
 800ade4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ade8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	8013      	strh	r3, [r2, #0]
 800adf8:	e3b5      	b.n	800b566 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800adfa:	463b      	mov	r3, r7
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	7b1b      	ldrb	r3, [r3, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f040 8090 	bne.w	800af26 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ae06:	463b      	mov	r3, r7
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	699a      	ldr	r2, [r3, #24]
 800ae0c:	463b      	mov	r3, r7
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d90e      	bls.n	800ae34 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800ae16:	463b      	mov	r3, r7
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800ae20:	463b      	mov	r3, r7
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	699a      	ldr	r2, [r3, #24]
 800ae26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2a:	1ad2      	subs	r2, r2, r3
 800ae2c:	463b      	mov	r3, r7
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	619a      	str	r2, [r3, #24]
 800ae32:	e008      	b.n	800ae46 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800ae34:	463b      	mov	r3, r7
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800ae3e:	463b      	mov	r3, r7
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2200      	movs	r2, #0
 800ae44:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ae46:	1d3b      	adds	r3, r7, #4
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ae4e:	1d3b      	adds	r3, r7, #4
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	461a      	mov	r2, r3
 800ae5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae5e:	4413      	add	r3, r2
 800ae60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ae64:	463b      	mov	r3, r7
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	00da      	lsls	r2, r3, #3
 800ae6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae70:	4413      	add	r3, r2
 800ae72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ae7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7e:	2b3e      	cmp	r3, #62	; 0x3e
 800ae80:	d91d      	bls.n	800aebe <USB_EPStartXfer+0xaf0>
 800ae82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae86:	095b      	lsrs	r3, r3, #5
 800ae88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae90:	f003 031f 	and.w	r3, r3, #31
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d104      	bne.n	800aea2 <USB_EPStartXfer+0xad4>
 800ae98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aea2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	029b      	lsls	r3, r3, #10
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aeb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aeba:	801a      	strh	r2, [r3, #0]
 800aebc:	e325      	b.n	800b50a <USB_EPStartXfer+0x113c>
 800aebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d116      	bne.n	800aef4 <USB_EPStartXfer+0xb26>
 800aec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aeca:	881b      	ldrh	r3, [r3, #0]
 800aecc:	b29b      	uxth	r3, r3
 800aece:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aed8:	801a      	strh	r2, [r3, #0]
 800aeda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aede:	881b      	ldrh	r3, [r3, #0]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aef0:	801a      	strh	r2, [r3, #0]
 800aef2:	e30a      	b.n	800b50a <USB_EPStartXfer+0x113c>
 800aef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef8:	085b      	lsrs	r3, r3, #1
 800aefa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aefe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d004      	beq.n	800af14 <USB_EPStartXfer+0xb46>
 800af0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af0e:	3301      	adds	r3, #1
 800af10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af18:	b29b      	uxth	r3, r3
 800af1a:	029b      	lsls	r3, r3, #10
 800af1c:	b29a      	uxth	r2, r3
 800af1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af22:	801a      	strh	r2, [r3, #0]
 800af24:	e2f1      	b.n	800b50a <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800af26:	463b      	mov	r3, r7
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	78db      	ldrb	r3, [r3, #3]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	f040 818f 	bne.w	800b250 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800af32:	463b      	mov	r3, r7
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	785b      	ldrb	r3, [r3, #1]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d175      	bne.n	800b028 <USB_EPStartXfer+0xc5a>
 800af3c:	1d3b      	adds	r3, r7, #4
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af44:	1d3b      	adds	r3, r7, #4
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	461a      	mov	r2, r3
 800af50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af54:	4413      	add	r3, r2
 800af56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af5a:	463b      	mov	r3, r7
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	00da      	lsls	r2, r3, #3
 800af62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af66:	4413      	add	r3, r2
 800af68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800af6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800af70:	463b      	mov	r3, r7
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	2b3e      	cmp	r3, #62	; 0x3e
 800af78:	d91f      	bls.n	800afba <USB_EPStartXfer+0xbec>
 800af7a:	463b      	mov	r3, r7
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	095b      	lsrs	r3, r3, #5
 800af82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af86:	463b      	mov	r3, r7
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	f003 031f 	and.w	r3, r3, #31
 800af90:	2b00      	cmp	r3, #0
 800af92:	d104      	bne.n	800af9e <USB_EPStartXfer+0xbd0>
 800af94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af98:	3b01      	subs	r3, #1
 800af9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	029b      	lsls	r3, r3, #10
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afb6:	801a      	strh	r2, [r3, #0]
 800afb8:	e05c      	b.n	800b074 <USB_EPStartXfer+0xca6>
 800afba:	463b      	mov	r3, r7
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d116      	bne.n	800aff2 <USB_EPStartXfer+0xc24>
 800afc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afc8:	881b      	ldrh	r3, [r3, #0]
 800afca:	b29b      	uxth	r3, r3
 800afcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afd6:	801a      	strh	r2, [r3, #0]
 800afd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	b29b      	uxth	r3, r3
 800afe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afe8:	b29a      	uxth	r2, r3
 800afea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afee:	801a      	strh	r2, [r3, #0]
 800aff0:	e040      	b.n	800b074 <USB_EPStartXfer+0xca6>
 800aff2:	463b      	mov	r3, r7
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	085b      	lsrs	r3, r3, #1
 800affa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800affe:	463b      	mov	r3, r7
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d004      	beq.n	800b016 <USB_EPStartXfer+0xc48>
 800b00c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b010:	3301      	adds	r3, #1
 800b012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	029b      	lsls	r3, r3, #10
 800b01e:	b29a      	uxth	r2, r3
 800b020:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b024:	801a      	strh	r2, [r3, #0]
 800b026:	e025      	b.n	800b074 <USB_EPStartXfer+0xca6>
 800b028:	463b      	mov	r3, r7
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	785b      	ldrb	r3, [r3, #1]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d120      	bne.n	800b074 <USB_EPStartXfer+0xca6>
 800b032:	1d3b      	adds	r3, r7, #4
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b03a:	1d3b      	adds	r3, r7, #4
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b042:	b29b      	uxth	r3, r3
 800b044:	461a      	mov	r2, r3
 800b046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b04a:	4413      	add	r3, r2
 800b04c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b050:	463b      	mov	r3, r7
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	00da      	lsls	r2, r3, #3
 800b058:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b05c:	4413      	add	r3, r2
 800b05e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b066:	463b      	mov	r3, r7
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b072:	801a      	strh	r2, [r3, #0]
 800b074:	1d3b      	adds	r3, r7, #4
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b07c:	463b      	mov	r3, r7
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	785b      	ldrb	r3, [r3, #1]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d175      	bne.n	800b172 <USB_EPStartXfer+0xda4>
 800b086:	1d3b      	adds	r3, r7, #4
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b08e:	1d3b      	adds	r3, r7, #4
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b096:	b29b      	uxth	r3, r3
 800b098:	461a      	mov	r2, r3
 800b09a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b09e:	4413      	add	r3, r2
 800b0a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b0a4:	463b      	mov	r3, r7
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	00da      	lsls	r2, r3, #3
 800b0ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b0b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b0ba:	463b      	mov	r3, r7
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	2b3e      	cmp	r3, #62	; 0x3e
 800b0c2:	d91f      	bls.n	800b104 <USB_EPStartXfer+0xd36>
 800b0c4:	463b      	mov	r3, r7
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	095b      	lsrs	r3, r3, #5
 800b0cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0d0:	463b      	mov	r3, r7
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	f003 031f 	and.w	r3, r3, #31
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d104      	bne.n	800b0e8 <USB_EPStartXfer+0xd1a>
 800b0de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	029b      	lsls	r3, r3, #10
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b100:	801a      	strh	r2, [r3, #0]
 800b102:	e058      	b.n	800b1b6 <USB_EPStartXfer+0xde8>
 800b104:	463b      	mov	r3, r7
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d116      	bne.n	800b13c <USB_EPStartXfer+0xd6e>
 800b10e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b112:	881b      	ldrh	r3, [r3, #0]
 800b114:	b29b      	uxth	r3, r3
 800b116:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b120:	801a      	strh	r2, [r3, #0]
 800b122:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b126:	881b      	ldrh	r3, [r3, #0]
 800b128:	b29b      	uxth	r3, r3
 800b12a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b12e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b132:	b29a      	uxth	r2, r3
 800b134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b138:	801a      	strh	r2, [r3, #0]
 800b13a:	e03c      	b.n	800b1b6 <USB_EPStartXfer+0xde8>
 800b13c:	463b      	mov	r3, r7
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	085b      	lsrs	r3, r3, #1
 800b144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b148:	463b      	mov	r3, r7
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	691b      	ldr	r3, [r3, #16]
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	2b00      	cmp	r3, #0
 800b154:	d004      	beq.n	800b160 <USB_EPStartXfer+0xd92>
 800b156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b15a:	3301      	adds	r3, #1
 800b15c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b164:	b29b      	uxth	r3, r3
 800b166:	029b      	lsls	r3, r3, #10
 800b168:	b29a      	uxth	r2, r3
 800b16a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b16e:	801a      	strh	r2, [r3, #0]
 800b170:	e021      	b.n	800b1b6 <USB_EPStartXfer+0xde8>
 800b172:	463b      	mov	r3, r7
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	785b      	ldrb	r3, [r3, #1]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d11c      	bne.n	800b1b6 <USB_EPStartXfer+0xde8>
 800b17c:	1d3b      	adds	r3, r7, #4
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b184:	b29b      	uxth	r3, r3
 800b186:	461a      	mov	r2, r3
 800b188:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b18c:	4413      	add	r3, r2
 800b18e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b192:	463b      	mov	r3, r7
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	00da      	lsls	r2, r3, #3
 800b19a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b19e:	4413      	add	r3, r2
 800b1a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b1a8:	463b      	mov	r3, r7
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b1b4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b1b6:	463b      	mov	r3, r7
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	69db      	ldr	r3, [r3, #28]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 81a4 	beq.w	800b50a <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b1c2:	1d3b      	adds	r3, r7, #4
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	463b      	mov	r3, r7
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	4413      	add	r3, r2
 800b1d0:	881b      	ldrh	r3, [r3, #0]
 800b1d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b1d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b1da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d005      	beq.n	800b1ee <USB_EPStartXfer+0xe20>
 800b1e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10d      	bne.n	800b20a <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b1ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b1f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f040 8187 	bne.w	800b50a <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b1fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b204:	2b00      	cmp	r3, #0
 800b206:	f040 8180 	bne.w	800b50a <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b20a:	1d3b      	adds	r3, r7, #4
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	463b      	mov	r3, r7
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4413      	add	r3, r2
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b224:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b228:	1d3b      	adds	r3, r7, #4
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	463b      	mov	r3, r7
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	441a      	add	r2, r3
 800b236:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b23a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b23e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b246:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	8013      	strh	r3, [r2, #0]
 800b24e:	e15c      	b.n	800b50a <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b250:	463b      	mov	r3, r7
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	78db      	ldrb	r3, [r3, #3]
 800b256:	2b01      	cmp	r3, #1
 800b258:	f040 8155 	bne.w	800b506 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b25c:	463b      	mov	r3, r7
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	699a      	ldr	r2, [r3, #24]
 800b262:	463b      	mov	r3, r7
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d90e      	bls.n	800b28a <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 800b26c:	463b      	mov	r3, r7
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b276:	463b      	mov	r3, r7
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	699a      	ldr	r2, [r3, #24]
 800b27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b280:	1ad2      	subs	r2, r2, r3
 800b282:	463b      	mov	r3, r7
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	619a      	str	r2, [r3, #24]
 800b288:	e008      	b.n	800b29c <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800b28a:	463b      	mov	r3, r7
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b294:	463b      	mov	r3, r7
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2200      	movs	r2, #0
 800b29a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b29c:	463b      	mov	r3, r7
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	785b      	ldrb	r3, [r3, #1]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d16f      	bne.n	800b386 <USB_EPStartXfer+0xfb8>
 800b2a6:	1d3b      	adds	r3, r7, #4
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2ae:	1d3b      	adds	r3, r7, #4
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b2be:	4413      	add	r3, r2
 800b2c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2c4:	463b      	mov	r3, r7
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	00da      	lsls	r2, r3, #3
 800b2cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b2d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2de:	2b3e      	cmp	r3, #62	; 0x3e
 800b2e0:	d91d      	bls.n	800b31e <USB_EPStartXfer+0xf50>
 800b2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e6:	095b      	lsrs	r3, r3, #5
 800b2e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f0:	f003 031f 	and.w	r3, r3, #31
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d104      	bne.n	800b302 <USB_EPStartXfer+0xf34>
 800b2f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b306:	b29b      	uxth	r3, r3
 800b308:	029b      	lsls	r3, r3, #10
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b314:	b29a      	uxth	r2, r3
 800b316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b31a:	801a      	strh	r2, [r3, #0]
 800b31c:	e058      	b.n	800b3d0 <USB_EPStartXfer+0x1002>
 800b31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b322:	2b00      	cmp	r3, #0
 800b324:	d116      	bne.n	800b354 <USB_EPStartXfer+0xf86>
 800b326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b32a:	881b      	ldrh	r3, [r3, #0]
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b332:	b29a      	uxth	r2, r3
 800b334:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b338:	801a      	strh	r2, [r3, #0]
 800b33a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b33e:	881b      	ldrh	r3, [r3, #0]
 800b340:	b29b      	uxth	r3, r3
 800b342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b350:	801a      	strh	r2, [r3, #0]
 800b352:	e03d      	b.n	800b3d0 <USB_EPStartXfer+0x1002>
 800b354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b358:	085b      	lsrs	r3, r3, #1
 800b35a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b362:	f003 0301 	and.w	r3, r3, #1
 800b366:	2b00      	cmp	r3, #0
 800b368:	d004      	beq.n	800b374 <USB_EPStartXfer+0xfa6>
 800b36a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b36e:	3301      	adds	r3, #1
 800b370:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b378:	b29b      	uxth	r3, r3
 800b37a:	029b      	lsls	r3, r3, #10
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b382:	801a      	strh	r2, [r3, #0]
 800b384:	e024      	b.n	800b3d0 <USB_EPStartXfer+0x1002>
 800b386:	463b      	mov	r3, r7
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	785b      	ldrb	r3, [r3, #1]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d11f      	bne.n	800b3d0 <USB_EPStartXfer+0x1002>
 800b390:	1d3b      	adds	r3, r7, #4
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b398:	1d3b      	adds	r3, r7, #4
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b3ae:	463b      	mov	r3, r7
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	00da      	lsls	r2, r3, #3
 800b3b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b3ba:	4413      	add	r3, r2
 800b3bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b3c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b3ce:	801a      	strh	r2, [r3, #0]
 800b3d0:	1d3b      	adds	r3, r7, #4
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3d8:	463b      	mov	r3, r7
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	785b      	ldrb	r3, [r3, #1]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d16f      	bne.n	800b4c2 <USB_EPStartXfer+0x10f4>
 800b3e2:	1d3b      	adds	r3, r7, #4
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b3ea:	1d3b      	adds	r3, r7, #4
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b400:	463b      	mov	r3, r7
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	00da      	lsls	r2, r3, #3
 800b408:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b40c:	4413      	add	r3, r2
 800b40e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b412:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b41a:	2b3e      	cmp	r3, #62	; 0x3e
 800b41c:	d91d      	bls.n	800b45a <USB_EPStartXfer+0x108c>
 800b41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b422:	095b      	lsrs	r3, r3, #5
 800b424:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42c:	f003 031f 	and.w	r3, r3, #31
 800b430:	2b00      	cmp	r3, #0
 800b432:	d104      	bne.n	800b43e <USB_EPStartXfer+0x1070>
 800b434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b438:	3b01      	subs	r3, #1
 800b43a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b43e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b442:	b29b      	uxth	r3, r3
 800b444:	029b      	lsls	r3, r3, #10
 800b446:	b29b      	uxth	r3, r3
 800b448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b44c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b450:	b29a      	uxth	r2, r3
 800b452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b456:	801a      	strh	r2, [r3, #0]
 800b458:	e057      	b.n	800b50a <USB_EPStartXfer+0x113c>
 800b45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d116      	bne.n	800b490 <USB_EPStartXfer+0x10c2>
 800b462:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b466:	881b      	ldrh	r3, [r3, #0]
 800b468:	b29b      	uxth	r3, r3
 800b46a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b46e:	b29a      	uxth	r2, r3
 800b470:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b474:	801a      	strh	r2, [r3, #0]
 800b476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b47a:	881b      	ldrh	r3, [r3, #0]
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b486:	b29a      	uxth	r2, r3
 800b488:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b48c:	801a      	strh	r2, [r3, #0]
 800b48e:	e03c      	b.n	800b50a <USB_EPStartXfer+0x113c>
 800b490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b494:	085b      	lsrs	r3, r3, #1
 800b496:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b49e:	f003 0301 	and.w	r3, r3, #1
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d004      	beq.n	800b4b0 <USB_EPStartXfer+0x10e2>
 800b4a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	029b      	lsls	r3, r3, #10
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4be:	801a      	strh	r2, [r3, #0]
 800b4c0:	e023      	b.n	800b50a <USB_EPStartXfer+0x113c>
 800b4c2:	463b      	mov	r3, r7
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	785b      	ldrb	r3, [r3, #1]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d11e      	bne.n	800b50a <USB_EPStartXfer+0x113c>
 800b4cc:	1d3b      	adds	r3, r7, #4
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b4dc:	4413      	add	r3, r2
 800b4de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4e2:	463b      	mov	r3, r7
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	00da      	lsls	r2, r3, #3
 800b4ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b4ee:	4413      	add	r3, r2
 800b4f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b502:	801a      	strh	r2, [r3, #0]
 800b504:	e001      	b.n	800b50a <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e02e      	b.n	800b568 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b50a:	1d3b      	adds	r3, r7, #4
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	463b      	mov	r3, r7
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	4413      	add	r3, r2
 800b518:	881b      	ldrh	r3, [r3, #0]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b524:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b528:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b52c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b530:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b534:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b538:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b53c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b540:	1d3b      	adds	r3, r7, #4
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	463b      	mov	r3, r7
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	441a      	add	r2, r3
 800b54e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b55a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b55e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b562:	b29b      	uxth	r3, r3
 800b564:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b572:	b480      	push	{r7}
 800b574:	b085      	sub	sp, #20
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	785b      	ldrb	r3, [r3, #1]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d020      	beq.n	800b5c6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	4413      	add	r3, r2
 800b58e:	881b      	ldrh	r3, [r3, #0]
 800b590:	b29b      	uxth	r3, r3
 800b592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b59a:	81bb      	strh	r3, [r7, #12]
 800b59c:	89bb      	ldrh	r3, [r7, #12]
 800b59e:	f083 0310 	eor.w	r3, r3, #16
 800b5a2:	81bb      	strh	r3, [r7, #12]
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	441a      	add	r2, r3
 800b5ae:	89bb      	ldrh	r3, [r7, #12]
 800b5b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	8013      	strh	r3, [r2, #0]
 800b5c4:	e01f      	b.n	800b606 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	4413      	add	r3, r2
 800b5d0:	881b      	ldrh	r3, [r3, #0]
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5dc:	81fb      	strh	r3, [r7, #14]
 800b5de:	89fb      	ldrh	r3, [r7, #14]
 800b5e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b5e4:	81fb      	strh	r3, [r7, #14]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	441a      	add	r2, r3
 800b5f0:	89fb      	ldrh	r3, [r7, #14]
 800b5f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b602:	b29b      	uxth	r3, r3
 800b604:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3714      	adds	r7, #20
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b614:	b480      	push	{r7}
 800b616:	b087      	sub	sp, #28
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	7b1b      	ldrb	r3, [r3, #12]
 800b622:	2b00      	cmp	r3, #0
 800b624:	f040 809d 	bne.w	800b762 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	785b      	ldrb	r3, [r3, #1]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d04c      	beq.n	800b6ca <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	881b      	ldrh	r3, [r3, #0]
 800b63c:	823b      	strh	r3, [r7, #16]
 800b63e:	8a3b      	ldrh	r3, [r7, #16]
 800b640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b644:	2b00      	cmp	r3, #0
 800b646:	d01b      	beq.n	800b680 <USB_EPClearStall+0x6c>
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	b29b      	uxth	r3, r3
 800b656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b65a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b65e:	81fb      	strh	r3, [r7, #14]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	441a      	add	r2, r3
 800b66a:	89fb      	ldrh	r3, [r7, #14]
 800b66c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b678:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	78db      	ldrb	r3, [r3, #3]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d06c      	beq.n	800b762 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	4413      	add	r3, r2
 800b692:	881b      	ldrh	r3, [r3, #0]
 800b694:	b29b      	uxth	r3, r3
 800b696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b69a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b69e:	81bb      	strh	r3, [r7, #12]
 800b6a0:	89bb      	ldrh	r3, [r7, #12]
 800b6a2:	f083 0320 	eor.w	r3, r3, #32
 800b6a6:	81bb      	strh	r3, [r7, #12]
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	441a      	add	r2, r3
 800b6b2:	89bb      	ldrh	r3, [r7, #12]
 800b6b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	8013      	strh	r3, [r2, #0]
 800b6c8:	e04b      	b.n	800b762 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	881b      	ldrh	r3, [r3, #0]
 800b6d6:	82fb      	strh	r3, [r7, #22]
 800b6d8:	8afb      	ldrh	r3, [r7, #22]
 800b6da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d01b      	beq.n	800b71a <USB_EPClearStall+0x106>
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4413      	add	r3, r2
 800b6ec:	881b      	ldrh	r3, [r3, #0]
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6f8:	82bb      	strh	r3, [r7, #20]
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	441a      	add	r2, r3
 800b704:	8abb      	ldrh	r3, [r7, #20]
 800b706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b70a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b70e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b716:	b29b      	uxth	r3, r3
 800b718:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4413      	add	r3, r2
 800b724:	881b      	ldrh	r3, [r3, #0]
 800b726:	b29b      	uxth	r3, r3
 800b728:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b72c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b730:	827b      	strh	r3, [r7, #18]
 800b732:	8a7b      	ldrh	r3, [r7, #18]
 800b734:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b738:	827b      	strh	r3, [r7, #18]
 800b73a:	8a7b      	ldrh	r3, [r7, #18]
 800b73c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b740:	827b      	strh	r3, [r7, #18]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	441a      	add	r2, r3
 800b74c:	8a7b      	ldrh	r3, [r7, #18]
 800b74e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b75a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b75e:	b29b      	uxth	r3, r3
 800b760:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	371c      	adds	r7, #28
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	460b      	mov	r3, r1
 800b77a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b77c:	78fb      	ldrb	r3, [r7, #3]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d103      	bne.n	800b78a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2280      	movs	r2, #128	; 0x80
 800b786:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	b085      	sub	sp, #20
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3714      	adds	r7, #20
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr

0800b7e6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b7e6:	b480      	push	{r7}
 800b7e8:	b08d      	sub	sp, #52	; 0x34
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	60f8      	str	r0, [r7, #12]
 800b7ee:	60b9      	str	r1, [r7, #8]
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	80fb      	strh	r3, [r7, #6]
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b7fc:	88bb      	ldrh	r3, [r7, #4]
 800b7fe:	3301      	adds	r3, #1
 800b800:	085b      	lsrs	r3, r3, #1
 800b802:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b80c:	88fa      	ldrh	r2, [r7, #6]
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	4413      	add	r3, r2
 800b812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b816:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b81c:	e01b      	b.n	800b856 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	3301      	adds	r3, #1
 800b828:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	b29b      	uxth	r3, r3
 800b830:	021b      	lsls	r3, r3, #8
 800b832:	b29b      	uxth	r3, r3
 800b834:	461a      	mov	r2, r3
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	4313      	orrs	r3, r2
 800b83a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	b29a      	uxth	r2, r3
 800b840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b842:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	3302      	adds	r3, #2
 800b848:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84c:	3301      	adds	r3, #1
 800b84e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b852:	3b01      	subs	r3, #1
 800b854:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1e0      	bne.n	800b81e <USB_WritePMA+0x38>
  }
}
 800b85c:	bf00      	nop
 800b85e:	bf00      	nop
 800b860:	3734      	adds	r7, #52	; 0x34
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b08b      	sub	sp, #44	; 0x2c
 800b86e:	af00      	add	r7, sp, #0
 800b870:	60f8      	str	r0, [r7, #12]
 800b872:	60b9      	str	r1, [r7, #8]
 800b874:	4611      	mov	r1, r2
 800b876:	461a      	mov	r2, r3
 800b878:	460b      	mov	r3, r1
 800b87a:	80fb      	strh	r3, [r7, #6]
 800b87c:	4613      	mov	r3, r2
 800b87e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b880:	88bb      	ldrh	r3, [r7, #4]
 800b882:	085b      	lsrs	r3, r3, #1
 800b884:	b29b      	uxth	r3, r3
 800b886:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b890:	88fa      	ldrh	r2, [r7, #6]
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	4413      	add	r3, r2
 800b896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b89a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	627b      	str	r3, [r7, #36]	; 0x24
 800b8a0:	e018      	b.n	800b8d4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	881b      	ldrh	r3, [r3, #0]
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b8aa:	6a3b      	ldr	r3, [r7, #32]
 800b8ac:	3302      	adds	r3, #2
 800b8ae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	0a1b      	lsrs	r3, r3, #8
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1e3      	bne.n	800b8a2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b8da:	88bb      	ldrh	r3, [r7, #4]
 800b8dc:	f003 0301 	and.w	r3, r3, #1
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d007      	beq.n	800b8f6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	881b      	ldrh	r3, [r3, #0]
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	b2da      	uxtb	r2, r3
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	701a      	strb	r2, [r3, #0]
  }
}
 800b8f6:	bf00      	nop
 800b8f8:	372c      	adds	r7, #44	; 0x2c
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b084      	sub	sp, #16
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	460b      	mov	r3, r1
 800b90c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b90e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b912:	f006 f88d 	bl	8011a30 <USBD_static_malloc>
 800b916:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d105      	bne.n	800b92a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b926:	2302      	movs	r3, #2
 800b928:	e066      	b.n	800b9f8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	7c1b      	ldrb	r3, [r3, #16]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d119      	bne.n	800b96e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b93a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b93e:	2202      	movs	r2, #2
 800b940:	2181      	movs	r1, #129	; 0x81
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f005 ff19 	bl	801177a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b94e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b952:	2202      	movs	r2, #2
 800b954:	2101      	movs	r1, #1
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f005 ff0f 	bl	801177a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2210      	movs	r2, #16
 800b968:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b96c:	e016      	b.n	800b99c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b96e:	2340      	movs	r3, #64	; 0x40
 800b970:	2202      	movs	r2, #2
 800b972:	2181      	movs	r1, #129	; 0x81
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f005 ff00 	bl	801177a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b980:	2340      	movs	r3, #64	; 0x40
 800b982:	2202      	movs	r2, #2
 800b984:	2101      	movs	r1, #1
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f005 fef7 	bl	801177a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2210      	movs	r2, #16
 800b998:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b99c:	2308      	movs	r3, #8
 800b99e:	2203      	movs	r2, #3
 800b9a0:	2182      	movs	r1, #130	; 0x82
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f005 fee9 	bl	801177a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	7c1b      	ldrb	r3, [r3, #16]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d109      	bne.n	800b9e6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9dc:	2101      	movs	r1, #1
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f005 ffbb 	bl	801195a <USBD_LL_PrepareReceive>
 800b9e4:	e007      	b.n	800b9f6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9ec:	2340      	movs	r3, #64	; 0x40
 800b9ee:	2101      	movs	r1, #1
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f005 ffb2 	bl	801195a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ba0c:	2181      	movs	r1, #129	; 0x81
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f005 fed9 	bl	80117c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ba1a:	2101      	movs	r1, #1
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f005 fed2 	bl	80117c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ba2a:	2182      	movs	r1, #130	; 0x82
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f005 feca 	bl	80117c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00e      	beq.n	800ba6a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f005 fff5 	bl	8011a4c <USBD_static_free>
    pdev->pClassData = NULL;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ba86:	2300      	movs	r3, #0
 800ba88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ba98:	2303      	movs	r3, #3
 800ba9a:	e0af      	b.n	800bbfc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d03f      	beq.n	800bb28 <USBD_CDC_Setup+0xb4>
 800baa8:	2b20      	cmp	r3, #32
 800baaa:	f040 809f 	bne.w	800bbec <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	88db      	ldrh	r3, [r3, #6]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d02e      	beq.n	800bb14 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	b25b      	sxtb	r3, r3
 800babc:	2b00      	cmp	r3, #0
 800babe:	da16      	bge.n	800baee <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bacc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	88d2      	ldrh	r2, [r2, #6]
 800bad2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	88db      	ldrh	r3, [r3, #6]
 800bad8:	2b07      	cmp	r3, #7
 800bada:	bf28      	it	cs
 800badc:	2307      	movcs	r3, #7
 800bade:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	89fa      	ldrh	r2, [r7, #14]
 800bae4:	4619      	mov	r1, r3
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f001 fa9f 	bl	800d02a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800baec:	e085      	b.n	800bbfa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	785a      	ldrb	r2, [r3, #1]
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	88db      	ldrh	r3, [r3, #6]
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bb04:	6939      	ldr	r1, [r7, #16]
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	88db      	ldrh	r3, [r3, #6]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f001 fab8 	bl	800d082 <USBD_CtlPrepareRx>
      break;
 800bb12:	e072      	b.n	800bbfa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	683a      	ldr	r2, [r7, #0]
 800bb1e:	7850      	ldrb	r0, [r2, #1]
 800bb20:	2200      	movs	r2, #0
 800bb22:	6839      	ldr	r1, [r7, #0]
 800bb24:	4798      	blx	r3
      break;
 800bb26:	e068      	b.n	800bbfa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	785b      	ldrb	r3, [r3, #1]
 800bb2c:	2b0b      	cmp	r3, #11
 800bb2e:	d852      	bhi.n	800bbd6 <USBD_CDC_Setup+0x162>
 800bb30:	a201      	add	r2, pc, #4	; (adr r2, 800bb38 <USBD_CDC_Setup+0xc4>)
 800bb32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb36:	bf00      	nop
 800bb38:	0800bb69 	.word	0x0800bb69
 800bb3c:	0800bbe5 	.word	0x0800bbe5
 800bb40:	0800bbd7 	.word	0x0800bbd7
 800bb44:	0800bbd7 	.word	0x0800bbd7
 800bb48:	0800bbd7 	.word	0x0800bbd7
 800bb4c:	0800bbd7 	.word	0x0800bbd7
 800bb50:	0800bbd7 	.word	0x0800bbd7
 800bb54:	0800bbd7 	.word	0x0800bbd7
 800bb58:	0800bbd7 	.word	0x0800bbd7
 800bb5c:	0800bbd7 	.word	0x0800bbd7
 800bb60:	0800bb93 	.word	0x0800bb93
 800bb64:	0800bbbd 	.word	0x0800bbbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	2b03      	cmp	r3, #3
 800bb72:	d107      	bne.n	800bb84 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bb74:	f107 030a 	add.w	r3, r7, #10
 800bb78:	2202      	movs	r2, #2
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f001 fa54 	bl	800d02a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb82:	e032      	b.n	800bbea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bb84:	6839      	ldr	r1, [r7, #0]
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f001 f9de 	bl	800cf48 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb8c:	2303      	movs	r3, #3
 800bb8e:	75fb      	strb	r3, [r7, #23]
          break;
 800bb90:	e02b      	b.n	800bbea <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	2b03      	cmp	r3, #3
 800bb9c:	d107      	bne.n	800bbae <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bb9e:	f107 030d 	add.w	r3, r7, #13
 800bba2:	2201      	movs	r2, #1
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f001 fa3f 	bl	800d02a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bbac:	e01d      	b.n	800bbea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bbae:	6839      	ldr	r1, [r7, #0]
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f001 f9c9 	bl	800cf48 <USBD_CtlError>
            ret = USBD_FAIL;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	75fb      	strb	r3, [r7, #23]
          break;
 800bbba:	e016      	b.n	800bbea <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b03      	cmp	r3, #3
 800bbc6:	d00f      	beq.n	800bbe8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bbc8:	6839      	ldr	r1, [r7, #0]
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f001 f9bc 	bl	800cf48 <USBD_CtlError>
            ret = USBD_FAIL;
 800bbd0:	2303      	movs	r3, #3
 800bbd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bbd4:	e008      	b.n	800bbe8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f001 f9b5 	bl	800cf48 <USBD_CtlError>
          ret = USBD_FAIL;
 800bbde:	2303      	movs	r3, #3
 800bbe0:	75fb      	strb	r3, [r7, #23]
          break;
 800bbe2:	e002      	b.n	800bbea <USBD_CDC_Setup+0x176>
          break;
 800bbe4:	bf00      	nop
 800bbe6:	e008      	b.n	800bbfa <USBD_CDC_Setup+0x186>
          break;
 800bbe8:	bf00      	nop
      }
      break;
 800bbea:	e006      	b.n	800bbfa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f001 f9aa 	bl	800cf48 <USBD_CtlError>
      ret = USBD_FAIL;
 800bbf4:	2303      	movs	r3, #3
 800bbf6:	75fb      	strb	r3, [r7, #23]
      break;
 800bbf8:	bf00      	nop
  }

  return (uint8_t)ret;
 800bbfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d101      	bne.n	800bc26 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bc22:	2303      	movs	r3, #3
 800bc24:	e04f      	b.n	800bcc6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc2c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bc2e:	78fa      	ldrb	r2, [r7, #3]
 800bc30:	6879      	ldr	r1, [r7, #4]
 800bc32:	4613      	mov	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	440b      	add	r3, r1
 800bc3c:	3318      	adds	r3, #24
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d029      	beq.n	800bc98 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bc44:	78fa      	ldrb	r2, [r7, #3]
 800bc46:	6879      	ldr	r1, [r7, #4]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	4413      	add	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	440b      	add	r3, r1
 800bc52:	3318      	adds	r3, #24
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	78f9      	ldrb	r1, [r7, #3]
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	440b      	add	r3, r1
 800bc60:	00db      	lsls	r3, r3, #3
 800bc62:	4403      	add	r3, r0
 800bc64:	3338      	adds	r3, #56	; 0x38
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	fbb2 f1f3 	udiv	r1, r2, r3
 800bc6c:	fb03 f301 	mul.w	r3, r3, r1
 800bc70:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d110      	bne.n	800bc98 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bc76:	78fa      	ldrb	r2, [r7, #3]
 800bc78:	6879      	ldr	r1, [r7, #4]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	440b      	add	r3, r1
 800bc84:	3318      	adds	r3, #24
 800bc86:	2200      	movs	r2, #0
 800bc88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc8a:	78f9      	ldrb	r1, [r7, #3]
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	2200      	movs	r2, #0
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f005 fe41 	bl	8011918 <USBD_LL_Transmit>
 800bc96:	e015      	b.n	800bcc4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00b      	beq.n	800bcc4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	68ba      	ldr	r2, [r7, #8]
 800bcb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bcc0:	78fa      	ldrb	r2, [r7, #3]
 800bcc2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b084      	sub	sp, #16
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bce0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bcec:	2303      	movs	r3, #3
 800bcee:	e015      	b.n	800bd1c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f005 fe51 	bl	801199c <USBD_LL_GetRxDataSize>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bd16:	4611      	mov	r1, r2
 800bd18:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd32:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	e01b      	b.n	800bd76 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d015      	beq.n	800bd74 <USBD_CDC_EP0_RxReady+0x50>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bd4e:	2bff      	cmp	r3, #255	; 0xff
 800bd50:	d010      	beq.n	800bd74 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bd60:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bd62:	68fa      	ldr	r2, [r7, #12]
 800bd64:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bd68:	b292      	uxth	r2, r2
 800bd6a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	22ff      	movs	r2, #255	; 0xff
 800bd70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2243      	movs	r2, #67	; 0x43
 800bd8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bd8e:	4b03      	ldr	r3, [pc, #12]	; (800bd9c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	20000098 	.word	0x20000098

0800bda0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2243      	movs	r2, #67	; 0x43
 800bdac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bdae:	4b03      	ldr	r3, [pc, #12]	; (800bdbc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	20000054 	.word	0x20000054

0800bdc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2243      	movs	r2, #67	; 0x43
 800bdcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bdce:	4b03      	ldr	r3, [pc, #12]	; (800bddc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	200000dc 	.word	0x200000dc

0800bde0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	220a      	movs	r2, #10
 800bdec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bdee:	4b03      	ldr	r3, [pc, #12]	; (800bdfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	20000010 	.word	0x20000010

0800be00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d101      	bne.n	800be14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800be10:	2303      	movs	r3, #3
 800be12:	e004      	b.n	800be1e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	683a      	ldr	r2, [r7, #0]
 800be18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800be2a:	b480      	push	{r7}
 800be2c:	b087      	sub	sp, #28
 800be2e:	af00      	add	r7, sp, #0
 800be30:	60f8      	str	r0, [r7, #12]
 800be32:	60b9      	str	r1, [r7, #8]
 800be34:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be3c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d101      	bne.n	800be48 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800be44:	2303      	movs	r3, #3
 800be46:	e008      	b.n	800be5a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	371c      	adds	r7, #28
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr

0800be66 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800be66:	b480      	push	{r7}
 800be68:	b085      	sub	sp, #20
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
 800be6e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800be7e:	2303      	movs	r3, #3
 800be80:	e004      	b.n	800be8c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bea6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d101      	bne.n	800beb6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e016      	b.n	800bee4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	7c1b      	ldrb	r3, [r3, #16]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d109      	bne.n	800bed2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bec8:	2101      	movs	r1, #1
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f005 fd45 	bl	801195a <USBD_LL_PrepareReceive>
 800bed0:	e007      	b.n	800bee2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bed8:	2340      	movs	r3, #64	; 0x40
 800beda:	2101      	movs	r1, #1
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f005 fd3c 	bl	801195a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	4613      	mov	r3, r2
 800bef8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d101      	bne.n	800bf04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bf00:	2303      	movs	r3, #3
 800bf02:	e01f      	b.n	800bf44 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d003      	beq.n	800bf2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	79fa      	ldrb	r2, [r7, #7]
 800bf36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bf38:	68f8      	ldr	r0, [r7, #12]
 800bf3a:	f005 fba1 	bl	8011680 <USBD_LL_Init>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bf42:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3718      	adds	r7, #24
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf56:	2300      	movs	r3, #0
 800bf58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bf60:	2303      	movs	r3, #3
 800bf62:	e016      	b.n	800bf92 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00b      	beq.n	800bf90 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf80:	f107 020e 	add.w	r2, r7, #14
 800bf84:	4610      	mov	r0, r2
 800bf86:	4798      	blx	r3
 800bf88:	4602      	mov	r2, r0
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b082      	sub	sp, #8
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f005 fbce 	bl	8011744 <USBD_LL_Start>
 800bfa8:	4603      	mov	r3, r0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3708      	adds	r7, #8
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bfb2:	b480      	push	{r7}
 800bfb4:	b083      	sub	sp, #12
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d009      	beq.n	800bff6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	78fa      	ldrb	r2, [r7, #3]
 800bfec:	4611      	mov	r1, r2
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	4798      	blx	r3
 800bff2:	4603      	mov	r3, r0
 800bff4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	460b      	mov	r3, r1
 800c00a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c012:	2b00      	cmp	r3, #0
 800c014:	d007      	beq.n	800c026 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	78fa      	ldrb	r2, [r7, #3]
 800c020:	4611      	mov	r1, r2
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	4798      	blx	r3
  }

  return USBD_OK;
 800c026:	2300      	movs	r3, #0
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	4618      	mov	r0, r3
 800c044:	f000 ff46 	bl	800ced4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c056:	461a      	mov	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c064:	f003 031f 	and.w	r3, r3, #31
 800c068:	2b02      	cmp	r3, #2
 800c06a:	d01a      	beq.n	800c0a2 <USBD_LL_SetupStage+0x72>
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	d822      	bhi.n	800c0b6 <USBD_LL_SetupStage+0x86>
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <USBD_LL_SetupStage+0x4a>
 800c074:	2b01      	cmp	r3, #1
 800c076:	d00a      	beq.n	800c08e <USBD_LL_SetupStage+0x5e>
 800c078:	e01d      	b.n	800c0b6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c080:	4619      	mov	r1, r3
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 f9ee 	bl	800c464 <USBD_StdDevReq>
 800c088:	4603      	mov	r3, r0
 800c08a:	73fb      	strb	r3, [r7, #15]
      break;
 800c08c:	e020      	b.n	800c0d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c094:	4619      	mov	r1, r3
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fa52 	bl	800c540 <USBD_StdItfReq>
 800c09c:	4603      	mov	r3, r0
 800c09e:	73fb      	strb	r3, [r7, #15]
      break;
 800c0a0:	e016      	b.n	800c0d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fa91 	bl	800c5d2 <USBD_StdEPReq>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	73fb      	strb	r3, [r7, #15]
      break;
 800c0b4:	e00c      	b.n	800c0d0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c0bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f005 fb9d 	bl	8011804 <USBD_LL_StallEP>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	73fb      	strb	r3, [r7, #15]
      break;
 800c0ce:	bf00      	nop
  }

  return ret;
 800c0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b086      	sub	sp, #24
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	60f8      	str	r0, [r7, #12]
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	607a      	str	r2, [r7, #4]
 800c0e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c0e8:	7afb      	ldrb	r3, [r7, #11]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d138      	bne.n	800c160 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c0f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	d14a      	bne.n	800c196 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	689a      	ldr	r2, [r3, #8]
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d913      	bls.n	800c134 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	689a      	ldr	r2, [r3, #8]
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	1ad2      	subs	r2, r2, r3
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	68da      	ldr	r2, [r3, #12]
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	4293      	cmp	r3, r2
 800c124:	bf28      	it	cs
 800c126:	4613      	movcs	r3, r2
 800c128:	461a      	mov	r2, r3
 800c12a:	6879      	ldr	r1, [r7, #4]
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f000 ffc5 	bl	800d0bc <USBD_CtlContinueRx>
 800c132:	e030      	b.n	800c196 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	2b03      	cmp	r3, #3
 800c13e:	d10b      	bne.n	800c158 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c146:	691b      	ldr	r3, [r3, #16]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d005      	beq.n	800c158 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c152:	691b      	ldr	r3, [r3, #16]
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f000 ffc0 	bl	800d0de <USBD_CtlSendStatus>
 800c15e:	e01a      	b.n	800c196 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c166:	b2db      	uxtb	r3, r3
 800c168:	2b03      	cmp	r3, #3
 800c16a:	d114      	bne.n	800c196 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c172:	699b      	ldr	r3, [r3, #24]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00e      	beq.n	800c196 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	7afa      	ldrb	r2, [r7, #11]
 800c182:	4611      	mov	r1, r2
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	4798      	blx	r3
 800c188:	4603      	mov	r3, r0
 800c18a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c18c:	7dfb      	ldrb	r3, [r7, #23]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d001      	beq.n	800c196 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c192:	7dfb      	ldrb	r3, [r7, #23]
 800c194:	e000      	b.n	800c198 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3718      	adds	r7, #24
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	607a      	str	r2, [r7, #4]
 800c1ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c1ae:	7afb      	ldrb	r3, [r7, #11]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d16b      	bne.n	800c28c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	3314      	adds	r3, #20
 800c1b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1c0:	2b02      	cmp	r3, #2
 800c1c2:	d156      	bne.n	800c272 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	689a      	ldr	r2, [r3, #8]
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d914      	bls.n	800c1fa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	1ad2      	subs	r2, r2, r3
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	6879      	ldr	r1, [r7, #4]
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f000 ff3a 	bl	800d060 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	f005 fbb1 	bl	801195a <USBD_LL_PrepareReceive>
 800c1f8:	e03b      	b.n	800c272 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	68da      	ldr	r2, [r3, #12]
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	429a      	cmp	r2, r3
 800c204:	d11c      	bne.n	800c240 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	685a      	ldr	r2, [r3, #4]
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c20e:	429a      	cmp	r2, r3
 800c210:	d316      	bcc.n	800c240 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d20f      	bcs.n	800c240 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c220:	2200      	movs	r2, #0
 800c222:	2100      	movs	r1, #0
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f000 ff1b 	bl	800d060 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c232:	2300      	movs	r3, #0
 800c234:	2200      	movs	r2, #0
 800c236:	2100      	movs	r1, #0
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f005 fb8e 	bl	801195a <USBD_LL_PrepareReceive>
 800c23e:	e018      	b.n	800c272 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c246:	b2db      	uxtb	r3, r3
 800c248:	2b03      	cmp	r3, #3
 800c24a:	d10b      	bne.n	800c264 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d005      	beq.n	800c264 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c264:	2180      	movs	r1, #128	; 0x80
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f005 facc 	bl	8011804 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f000 ff49 	bl	800d104 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d122      	bne.n	800c2c2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f7ff fe98 	bl	800bfb2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c28a:	e01a      	b.n	800c2c2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c292:	b2db      	uxtb	r3, r3
 800c294:	2b03      	cmp	r3, #3
 800c296:	d114      	bne.n	800c2c2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c29e:	695b      	ldr	r3, [r3, #20]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00e      	beq.n	800c2c2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2aa:	695b      	ldr	r3, [r3, #20]
 800c2ac:	7afa      	ldrb	r2, [r7, #11]
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	4798      	blx	r3
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c2b8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d001      	beq.n	800c2c2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c2be:	7dfb      	ldrb	r3, [r7, #23]
 800c2c0:	e000      	b.n	800c2c4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d101      	bne.n	800c300 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	e02f      	b.n	800c360 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00f      	beq.n	800c32a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d009      	beq.n	800c32a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	6852      	ldr	r2, [r2, #4]
 800c322:	b2d2      	uxtb	r2, r2
 800c324:	4611      	mov	r1, r2
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c32a:	2340      	movs	r3, #64	; 0x40
 800c32c:	2200      	movs	r2, #0
 800c32e:	2100      	movs	r1, #0
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f005 fa22 	bl	801177a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2201      	movs	r2, #1
 800c33a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2240      	movs	r2, #64	; 0x40
 800c342:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c346:	2340      	movs	r3, #64	; 0x40
 800c348:	2200      	movs	r2, #0
 800c34a:	2180      	movs	r1, #128	; 0x80
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f005 fa14 	bl	801177a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2201      	movs	r2, #1
 800c356:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2240      	movs	r2, #64	; 0x40
 800c35c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c35e:	2300      	movs	r3, #0
}
 800c360:	4618      	mov	r0, r3
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	460b      	mov	r3, r1
 800c372:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	78fa      	ldrb	r2, [r7, #3]
 800c378:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c396:	b2da      	uxtb	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2204      	movs	r2, #4
 800c3a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	2b04      	cmp	r3, #4
 800c3c6:	d106      	bne.n	800c3d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c3ce:	b2da      	uxtb	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d101      	bne.n	800c3fa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c3f6:	2303      	movs	r3, #3
 800c3f8:	e012      	b.n	800c420 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c400:	b2db      	uxtb	r3, r3
 800c402:	2b03      	cmp	r3, #3
 800c404:	d10b      	bne.n	800c41e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c40c:	69db      	ldr	r3, [r3, #28]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d005      	beq.n	800c41e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c418:	69db      	ldr	r3, [r3, #28]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c428:	b480      	push	{r7}
 800c42a:	b087      	sub	sp, #28
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	3301      	adds	r3, #1
 800c43e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c446:	8a3b      	ldrh	r3, [r7, #16]
 800c448:	021b      	lsls	r3, r3, #8
 800c44a:	b21a      	sxth	r2, r3
 800c44c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c450:	4313      	orrs	r3, r2
 800c452:	b21b      	sxth	r3, r3
 800c454:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c456:	89fb      	ldrh	r3, [r7, #14]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	371c      	adds	r7, #28
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c47a:	2b40      	cmp	r3, #64	; 0x40
 800c47c:	d005      	beq.n	800c48a <USBD_StdDevReq+0x26>
 800c47e:	2b40      	cmp	r3, #64	; 0x40
 800c480:	d853      	bhi.n	800c52a <USBD_StdDevReq+0xc6>
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00b      	beq.n	800c49e <USBD_StdDevReq+0x3a>
 800c486:	2b20      	cmp	r3, #32
 800c488:	d14f      	bne.n	800c52a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	6839      	ldr	r1, [r7, #0]
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	4798      	blx	r3
 800c498:	4603      	mov	r3, r0
 800c49a:	73fb      	strb	r3, [r7, #15]
      break;
 800c49c:	e04a      	b.n	800c534 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	785b      	ldrb	r3, [r3, #1]
 800c4a2:	2b09      	cmp	r3, #9
 800c4a4:	d83b      	bhi.n	800c51e <USBD_StdDevReq+0xba>
 800c4a6:	a201      	add	r2, pc, #4	; (adr r2, 800c4ac <USBD_StdDevReq+0x48>)
 800c4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ac:	0800c501 	.word	0x0800c501
 800c4b0:	0800c515 	.word	0x0800c515
 800c4b4:	0800c51f 	.word	0x0800c51f
 800c4b8:	0800c50b 	.word	0x0800c50b
 800c4bc:	0800c51f 	.word	0x0800c51f
 800c4c0:	0800c4df 	.word	0x0800c4df
 800c4c4:	0800c4d5 	.word	0x0800c4d5
 800c4c8:	0800c51f 	.word	0x0800c51f
 800c4cc:	0800c4f7 	.word	0x0800c4f7
 800c4d0:	0800c4e9 	.word	0x0800c4e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f9de 	bl	800c898 <USBD_GetDescriptor>
          break;
 800c4dc:	e024      	b.n	800c528 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c4de:	6839      	ldr	r1, [r7, #0]
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 fb6d 	bl	800cbc0 <USBD_SetAddress>
          break;
 800c4e6:	e01f      	b.n	800c528 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fbac 	bl	800cc48 <USBD_SetConfig>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	73fb      	strb	r3, [r7, #15]
          break;
 800c4f4:	e018      	b.n	800c528 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c4f6:	6839      	ldr	r1, [r7, #0]
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 fc4b 	bl	800cd94 <USBD_GetConfig>
          break;
 800c4fe:	e013      	b.n	800c528 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fc7c 	bl	800ce00 <USBD_GetStatus>
          break;
 800c508:	e00e      	b.n	800c528 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fcab 	bl	800ce68 <USBD_SetFeature>
          break;
 800c512:	e009      	b.n	800c528 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c514:	6839      	ldr	r1, [r7, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 fcba 	bl	800ce90 <USBD_ClrFeature>
          break;
 800c51c:	e004      	b.n	800c528 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fd11 	bl	800cf48 <USBD_CtlError>
          break;
 800c526:	bf00      	nop
      }
      break;
 800c528:	e004      	b.n	800c534 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c52a:	6839      	ldr	r1, [r7, #0]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 fd0b 	bl	800cf48 <USBD_CtlError>
      break;
 800c532:	bf00      	nop
  }

  return ret;
 800c534:	7bfb      	ldrb	r3, [r7, #15]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop

0800c540 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c54a:	2300      	movs	r3, #0
 800c54c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c556:	2b40      	cmp	r3, #64	; 0x40
 800c558:	d005      	beq.n	800c566 <USBD_StdItfReq+0x26>
 800c55a:	2b40      	cmp	r3, #64	; 0x40
 800c55c:	d82f      	bhi.n	800c5be <USBD_StdItfReq+0x7e>
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d001      	beq.n	800c566 <USBD_StdItfReq+0x26>
 800c562:	2b20      	cmp	r3, #32
 800c564:	d12b      	bne.n	800c5be <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	3b01      	subs	r3, #1
 800c570:	2b02      	cmp	r3, #2
 800c572:	d81d      	bhi.n	800c5b0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	889b      	ldrh	r3, [r3, #4]
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d813      	bhi.n	800c5a6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	6839      	ldr	r1, [r7, #0]
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	4798      	blx	r3
 800c58c:	4603      	mov	r3, r0
 800c58e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	88db      	ldrh	r3, [r3, #6]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d110      	bne.n	800c5ba <USBD_StdItfReq+0x7a>
 800c598:	7bfb      	ldrb	r3, [r7, #15]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10d      	bne.n	800c5ba <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fd9d 	bl	800d0de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c5a4:	e009      	b.n	800c5ba <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fccd 	bl	800cf48 <USBD_CtlError>
          break;
 800c5ae:	e004      	b.n	800c5ba <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c5b0:	6839      	ldr	r1, [r7, #0]
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 fcc8 	bl	800cf48 <USBD_CtlError>
          break;
 800c5b8:	e000      	b.n	800c5bc <USBD_StdItfReq+0x7c>
          break;
 800c5ba:	bf00      	nop
      }
      break;
 800c5bc:	e004      	b.n	800c5c8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c5be:	6839      	ldr	r1, [r7, #0]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fcc1 	bl	800cf48 <USBD_CtlError>
      break;
 800c5c6:	bf00      	nop
  }

  return ret;
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	889b      	ldrh	r3, [r3, #4]
 800c5e4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c5ee:	2b40      	cmp	r3, #64	; 0x40
 800c5f0:	d007      	beq.n	800c602 <USBD_StdEPReq+0x30>
 800c5f2:	2b40      	cmp	r3, #64	; 0x40
 800c5f4:	f200 8145 	bhi.w	800c882 <USBD_StdEPReq+0x2b0>
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00c      	beq.n	800c616 <USBD_StdEPReq+0x44>
 800c5fc:	2b20      	cmp	r3, #32
 800c5fe:	f040 8140 	bne.w	800c882 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	6839      	ldr	r1, [r7, #0]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	4798      	blx	r3
 800c610:	4603      	mov	r3, r0
 800c612:	73fb      	strb	r3, [r7, #15]
      break;
 800c614:	e13a      	b.n	800c88c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	785b      	ldrb	r3, [r3, #1]
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d007      	beq.n	800c62e <USBD_StdEPReq+0x5c>
 800c61e:	2b03      	cmp	r3, #3
 800c620:	f300 8129 	bgt.w	800c876 <USBD_StdEPReq+0x2a4>
 800c624:	2b00      	cmp	r3, #0
 800c626:	d07f      	beq.n	800c728 <USBD_StdEPReq+0x156>
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d03c      	beq.n	800c6a6 <USBD_StdEPReq+0xd4>
 800c62c:	e123      	b.n	800c876 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c634:	b2db      	uxtb	r3, r3
 800c636:	2b02      	cmp	r3, #2
 800c638:	d002      	beq.n	800c640 <USBD_StdEPReq+0x6e>
 800c63a:	2b03      	cmp	r3, #3
 800c63c:	d016      	beq.n	800c66c <USBD_StdEPReq+0x9a>
 800c63e:	e02c      	b.n	800c69a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c640:	7bbb      	ldrb	r3, [r7, #14]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00d      	beq.n	800c662 <USBD_StdEPReq+0x90>
 800c646:	7bbb      	ldrb	r3, [r7, #14]
 800c648:	2b80      	cmp	r3, #128	; 0x80
 800c64a:	d00a      	beq.n	800c662 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c64c:	7bbb      	ldrb	r3, [r7, #14]
 800c64e:	4619      	mov	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f005 f8d7 	bl	8011804 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c656:	2180      	movs	r1, #128	; 0x80
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f005 f8d3 	bl	8011804 <USBD_LL_StallEP>
 800c65e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c660:	e020      	b.n	800c6a4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fc6f 	bl	800cf48 <USBD_CtlError>
              break;
 800c66a:	e01b      	b.n	800c6a4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	885b      	ldrh	r3, [r3, #2]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10e      	bne.n	800c692 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c674:	7bbb      	ldrb	r3, [r7, #14]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00b      	beq.n	800c692 <USBD_StdEPReq+0xc0>
 800c67a:	7bbb      	ldrb	r3, [r7, #14]
 800c67c:	2b80      	cmp	r3, #128	; 0x80
 800c67e:	d008      	beq.n	800c692 <USBD_StdEPReq+0xc0>
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	88db      	ldrh	r3, [r3, #6]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d104      	bne.n	800c692 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c688:	7bbb      	ldrb	r3, [r7, #14]
 800c68a:	4619      	mov	r1, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f005 f8b9 	bl	8011804 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 fd23 	bl	800d0de <USBD_CtlSendStatus>

              break;
 800c698:	e004      	b.n	800c6a4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c69a:	6839      	ldr	r1, [r7, #0]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 fc53 	bl	800cf48 <USBD_CtlError>
              break;
 800c6a2:	bf00      	nop
          }
          break;
 800c6a4:	e0ec      	b.n	800c880 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	d002      	beq.n	800c6b8 <USBD_StdEPReq+0xe6>
 800c6b2:	2b03      	cmp	r3, #3
 800c6b4:	d016      	beq.n	800c6e4 <USBD_StdEPReq+0x112>
 800c6b6:	e030      	b.n	800c71a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6b8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00d      	beq.n	800c6da <USBD_StdEPReq+0x108>
 800c6be:	7bbb      	ldrb	r3, [r7, #14]
 800c6c0:	2b80      	cmp	r3, #128	; 0x80
 800c6c2:	d00a      	beq.n	800c6da <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6c4:	7bbb      	ldrb	r3, [r7, #14]
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f005 f89b 	bl	8011804 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6ce:	2180      	movs	r1, #128	; 0x80
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f005 f897 	bl	8011804 <USBD_LL_StallEP>
 800c6d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c6d8:	e025      	b.n	800c726 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c6da:	6839      	ldr	r1, [r7, #0]
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 fc33 	bl	800cf48 <USBD_CtlError>
              break;
 800c6e2:	e020      	b.n	800c726 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	885b      	ldrh	r3, [r3, #2]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d11b      	bne.n	800c724 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c6ec:	7bbb      	ldrb	r3, [r7, #14]
 800c6ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d004      	beq.n	800c700 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c6f6:	7bbb      	ldrb	r3, [r7, #14]
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f005 f8a1 	bl	8011842 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 fcec 	bl	800d0de <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	4798      	blx	r3
 800c714:	4603      	mov	r3, r0
 800c716:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c718:	e004      	b.n	800c724 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c71a:	6839      	ldr	r1, [r7, #0]
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 fc13 	bl	800cf48 <USBD_CtlError>
              break;
 800c722:	e000      	b.n	800c726 <USBD_StdEPReq+0x154>
              break;
 800c724:	bf00      	nop
          }
          break;
 800c726:	e0ab      	b.n	800c880 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	2b02      	cmp	r3, #2
 800c732:	d002      	beq.n	800c73a <USBD_StdEPReq+0x168>
 800c734:	2b03      	cmp	r3, #3
 800c736:	d032      	beq.n	800c79e <USBD_StdEPReq+0x1cc>
 800c738:	e097      	b.n	800c86a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c73a:	7bbb      	ldrb	r3, [r7, #14]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d007      	beq.n	800c750 <USBD_StdEPReq+0x17e>
 800c740:	7bbb      	ldrb	r3, [r7, #14]
 800c742:	2b80      	cmp	r3, #128	; 0x80
 800c744:	d004      	beq.n	800c750 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fbfd 	bl	800cf48 <USBD_CtlError>
                break;
 800c74e:	e091      	b.n	800c874 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c750:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c754:	2b00      	cmp	r3, #0
 800c756:	da0b      	bge.n	800c770 <USBD_StdEPReq+0x19e>
 800c758:	7bbb      	ldrb	r3, [r7, #14]
 800c75a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c75e:	4613      	mov	r3, r2
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	4413      	add	r3, r2
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	3310      	adds	r3, #16
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	4413      	add	r3, r2
 800c76c:	3304      	adds	r3, #4
 800c76e:	e00b      	b.n	800c788 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c770:	7bbb      	ldrb	r3, [r7, #14]
 800c772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c776:	4613      	mov	r3, r2
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	4413      	add	r3, r2
 800c786:	3304      	adds	r3, #4
 800c788:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	2200      	movs	r2, #0
 800c78e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	2202      	movs	r2, #2
 800c794:	4619      	mov	r1, r3
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 fc47 	bl	800d02a <USBD_CtlSendData>
              break;
 800c79c:	e06a      	b.n	800c874 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c79e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	da11      	bge.n	800c7ca <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c7a6:	7bbb      	ldrb	r3, [r7, #14]
 800c7a8:	f003 020f 	and.w	r2, r3, #15
 800c7ac:	6879      	ldr	r1, [r7, #4]
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	4413      	add	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	440b      	add	r3, r1
 800c7b8:	3324      	adds	r3, #36	; 0x24
 800c7ba:	881b      	ldrh	r3, [r3, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d117      	bne.n	800c7f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c7c0:	6839      	ldr	r1, [r7, #0]
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 fbc0 	bl	800cf48 <USBD_CtlError>
                  break;
 800c7c8:	e054      	b.n	800c874 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c7ca:	7bbb      	ldrb	r3, [r7, #14]
 800c7cc:	f003 020f 	and.w	r2, r3, #15
 800c7d0:	6879      	ldr	r1, [r7, #4]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	440b      	add	r3, r1
 800c7dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c7e0:	881b      	ldrh	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d104      	bne.n	800c7f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c7e6:	6839      	ldr	r1, [r7, #0]
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 fbad 	bl	800cf48 <USBD_CtlError>
                  break;
 800c7ee:	e041      	b.n	800c874 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	da0b      	bge.n	800c810 <USBD_StdEPReq+0x23e>
 800c7f8:	7bbb      	ldrb	r3, [r7, #14]
 800c7fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c7fe:	4613      	mov	r3, r2
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	4413      	add	r3, r2
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	3310      	adds	r3, #16
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	4413      	add	r3, r2
 800c80c:	3304      	adds	r3, #4
 800c80e:	e00b      	b.n	800c828 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c810:	7bbb      	ldrb	r3, [r7, #14]
 800c812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c816:	4613      	mov	r3, r2
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	4413      	add	r3, r2
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	4413      	add	r3, r2
 800c826:	3304      	adds	r3, #4
 800c828:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c82a:	7bbb      	ldrb	r3, [r7, #14]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d002      	beq.n	800c836 <USBD_StdEPReq+0x264>
 800c830:	7bbb      	ldrb	r3, [r7, #14]
 800c832:	2b80      	cmp	r3, #128	; 0x80
 800c834:	d103      	bne.n	800c83e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2200      	movs	r2, #0
 800c83a:	601a      	str	r2, [r3, #0]
 800c83c:	e00e      	b.n	800c85c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c83e:	7bbb      	ldrb	r3, [r7, #14]
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f005 f81c 	bl	8011880 <USBD_LL_IsStallEP>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d003      	beq.n	800c856 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	2201      	movs	r2, #1
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	e002      	b.n	800c85c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	2200      	movs	r2, #0
 800c85a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	2202      	movs	r2, #2
 800c860:	4619      	mov	r1, r3
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 fbe1 	bl	800d02a <USBD_CtlSendData>
              break;
 800c868:	e004      	b.n	800c874 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 fb6b 	bl	800cf48 <USBD_CtlError>
              break;
 800c872:	bf00      	nop
          }
          break;
 800c874:	e004      	b.n	800c880 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c876:	6839      	ldr	r1, [r7, #0]
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 fb65 	bl	800cf48 <USBD_CtlError>
          break;
 800c87e:	bf00      	nop
      }
      break;
 800c880:	e004      	b.n	800c88c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c882:	6839      	ldr	r1, [r7, #0]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 fb5f 	bl	800cf48 <USBD_CtlError>
      break;
 800c88a:	bf00      	nop
  }

  return ret;
 800c88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
	...

0800c898 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	885b      	ldrh	r3, [r3, #2]
 800c8b2:	0a1b      	lsrs	r3, r3, #8
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	3b01      	subs	r3, #1
 800c8b8:	2b0e      	cmp	r3, #14
 800c8ba:	f200 8152 	bhi.w	800cb62 <USBD_GetDescriptor+0x2ca>
 800c8be:	a201      	add	r2, pc, #4	; (adr r2, 800c8c4 <USBD_GetDescriptor+0x2c>)
 800c8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c4:	0800c935 	.word	0x0800c935
 800c8c8:	0800c94d 	.word	0x0800c94d
 800c8cc:	0800c98d 	.word	0x0800c98d
 800c8d0:	0800cb63 	.word	0x0800cb63
 800c8d4:	0800cb63 	.word	0x0800cb63
 800c8d8:	0800cb03 	.word	0x0800cb03
 800c8dc:	0800cb2f 	.word	0x0800cb2f
 800c8e0:	0800cb63 	.word	0x0800cb63
 800c8e4:	0800cb63 	.word	0x0800cb63
 800c8e8:	0800cb63 	.word	0x0800cb63
 800c8ec:	0800cb63 	.word	0x0800cb63
 800c8f0:	0800cb63 	.word	0x0800cb63
 800c8f4:	0800cb63 	.word	0x0800cb63
 800c8f8:	0800cb63 	.word	0x0800cb63
 800c8fc:	0800c901 	.word	0x0800c901
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c906:	69db      	ldr	r3, [r3, #28]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00b      	beq.n	800c924 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c912:	69db      	ldr	r3, [r3, #28]
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	7c12      	ldrb	r2, [r2, #16]
 800c918:	f107 0108 	add.w	r1, r7, #8
 800c91c:	4610      	mov	r0, r2
 800c91e:	4798      	blx	r3
 800c920:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c922:	e126      	b.n	800cb72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c924:	6839      	ldr	r1, [r7, #0]
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fb0e 	bl	800cf48 <USBD_CtlError>
        err++;
 800c92c:	7afb      	ldrb	r3, [r7, #11]
 800c92e:	3301      	adds	r3, #1
 800c930:	72fb      	strb	r3, [r7, #11]
      break;
 800c932:	e11e      	b.n	800cb72 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	7c12      	ldrb	r2, [r2, #16]
 800c940:	f107 0108 	add.w	r1, r7, #8
 800c944:	4610      	mov	r0, r2
 800c946:	4798      	blx	r3
 800c948:	60f8      	str	r0, [r7, #12]
      break;
 800c94a:	e112      	b.n	800cb72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	7c1b      	ldrb	r3, [r3, #16]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10d      	bne.n	800c970 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95c:	f107 0208 	add.w	r2, r7, #8
 800c960:	4610      	mov	r0, r2
 800c962:	4798      	blx	r3
 800c964:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3301      	adds	r3, #1
 800c96a:	2202      	movs	r2, #2
 800c96c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c96e:	e100      	b.n	800cb72 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c978:	f107 0208 	add.w	r2, r7, #8
 800c97c:	4610      	mov	r0, r2
 800c97e:	4798      	blx	r3
 800c980:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	3301      	adds	r3, #1
 800c986:	2202      	movs	r2, #2
 800c988:	701a      	strb	r2, [r3, #0]
      break;
 800c98a:	e0f2      	b.n	800cb72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	885b      	ldrh	r3, [r3, #2]
 800c990:	b2db      	uxtb	r3, r3
 800c992:	2b05      	cmp	r3, #5
 800c994:	f200 80ac 	bhi.w	800caf0 <USBD_GetDescriptor+0x258>
 800c998:	a201      	add	r2, pc, #4	; (adr r2, 800c9a0 <USBD_GetDescriptor+0x108>)
 800c99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c99e:	bf00      	nop
 800c9a0:	0800c9b9 	.word	0x0800c9b9
 800c9a4:	0800c9ed 	.word	0x0800c9ed
 800c9a8:	0800ca21 	.word	0x0800ca21
 800c9ac:	0800ca55 	.word	0x0800ca55
 800c9b0:	0800ca89 	.word	0x0800ca89
 800c9b4:	0800cabd 	.word	0x0800cabd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00b      	beq.n	800c9dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	7c12      	ldrb	r2, [r2, #16]
 800c9d0:	f107 0108 	add.w	r1, r7, #8
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4798      	blx	r3
 800c9d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9da:	e091      	b.n	800cb00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9dc:	6839      	ldr	r1, [r7, #0]
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 fab2 	bl	800cf48 <USBD_CtlError>
            err++;
 800c9e4:	7afb      	ldrb	r3, [r7, #11]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c9ea:	e089      	b.n	800cb00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d00b      	beq.n	800ca10 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	7c12      	ldrb	r2, [r2, #16]
 800ca04:	f107 0108 	add.w	r1, r7, #8
 800ca08:	4610      	mov	r0, r2
 800ca0a:	4798      	blx	r3
 800ca0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca0e:	e077      	b.n	800cb00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca10:	6839      	ldr	r1, [r7, #0]
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 fa98 	bl	800cf48 <USBD_CtlError>
            err++;
 800ca18:	7afb      	ldrb	r3, [r7, #11]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ca1e:	e06f      	b.n	800cb00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00b      	beq.n	800ca44 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	7c12      	ldrb	r2, [r2, #16]
 800ca38:	f107 0108 	add.w	r1, r7, #8
 800ca3c:	4610      	mov	r0, r2
 800ca3e:	4798      	blx	r3
 800ca40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca42:	e05d      	b.n	800cb00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca44:	6839      	ldr	r1, [r7, #0]
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 fa7e 	bl	800cf48 <USBD_CtlError>
            err++;
 800ca4c:	7afb      	ldrb	r3, [r7, #11]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	72fb      	strb	r3, [r7, #11]
          break;
 800ca52:	e055      	b.n	800cb00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00b      	beq.n	800ca78 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca66:	691b      	ldr	r3, [r3, #16]
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	7c12      	ldrb	r2, [r2, #16]
 800ca6c:	f107 0108 	add.w	r1, r7, #8
 800ca70:	4610      	mov	r0, r2
 800ca72:	4798      	blx	r3
 800ca74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca76:	e043      	b.n	800cb00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca78:	6839      	ldr	r1, [r7, #0]
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 fa64 	bl	800cf48 <USBD_CtlError>
            err++;
 800ca80:	7afb      	ldrb	r3, [r7, #11]
 800ca82:	3301      	adds	r3, #1
 800ca84:	72fb      	strb	r3, [r7, #11]
          break;
 800ca86:	e03b      	b.n	800cb00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca8e:	695b      	ldr	r3, [r3, #20]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00b      	beq.n	800caac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca9a:	695b      	ldr	r3, [r3, #20]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	7c12      	ldrb	r2, [r2, #16]
 800caa0:	f107 0108 	add.w	r1, r7, #8
 800caa4:	4610      	mov	r0, r2
 800caa6:	4798      	blx	r3
 800caa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800caaa:	e029      	b.n	800cb00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800caac:	6839      	ldr	r1, [r7, #0]
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 fa4a 	bl	800cf48 <USBD_CtlError>
            err++;
 800cab4:	7afb      	ldrb	r3, [r7, #11]
 800cab6:	3301      	adds	r3, #1
 800cab8:	72fb      	strb	r3, [r7, #11]
          break;
 800caba:	e021      	b.n	800cb00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cac2:	699b      	ldr	r3, [r3, #24]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00b      	beq.n	800cae0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	7c12      	ldrb	r2, [r2, #16]
 800cad4:	f107 0108 	add.w	r1, r7, #8
 800cad8:	4610      	mov	r0, r2
 800cada:	4798      	blx	r3
 800cadc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cade:	e00f      	b.n	800cb00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cae0:	6839      	ldr	r1, [r7, #0]
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 fa30 	bl	800cf48 <USBD_CtlError>
            err++;
 800cae8:	7afb      	ldrb	r3, [r7, #11]
 800caea:	3301      	adds	r3, #1
 800caec:	72fb      	strb	r3, [r7, #11]
          break;
 800caee:	e007      	b.n	800cb00 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800caf0:	6839      	ldr	r1, [r7, #0]
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 fa28 	bl	800cf48 <USBD_CtlError>
          err++;
 800caf8:	7afb      	ldrb	r3, [r7, #11]
 800cafa:	3301      	adds	r3, #1
 800cafc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cafe:	bf00      	nop
      }
      break;
 800cb00:	e037      	b.n	800cb72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	7c1b      	ldrb	r3, [r3, #16]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d109      	bne.n	800cb1e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb12:	f107 0208 	add.w	r2, r7, #8
 800cb16:	4610      	mov	r0, r2
 800cb18:	4798      	blx	r3
 800cb1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb1c:	e029      	b.n	800cb72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cb1e:	6839      	ldr	r1, [r7, #0]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fa11 	bl	800cf48 <USBD_CtlError>
        err++;
 800cb26:	7afb      	ldrb	r3, [r7, #11]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	72fb      	strb	r3, [r7, #11]
      break;
 800cb2c:	e021      	b.n	800cb72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	7c1b      	ldrb	r3, [r3, #16]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d10d      	bne.n	800cb52 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb3e:	f107 0208 	add.w	r2, r7, #8
 800cb42:	4610      	mov	r0, r2
 800cb44:	4798      	blx	r3
 800cb46:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	2207      	movs	r2, #7
 800cb4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb50:	e00f      	b.n	800cb72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cb52:	6839      	ldr	r1, [r7, #0]
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f9f7 	bl	800cf48 <USBD_CtlError>
        err++;
 800cb5a:	7afb      	ldrb	r3, [r7, #11]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	72fb      	strb	r3, [r7, #11]
      break;
 800cb60:	e007      	b.n	800cb72 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 f9ef 	bl	800cf48 <USBD_CtlError>
      err++;
 800cb6a:	7afb      	ldrb	r3, [r7, #11]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	72fb      	strb	r3, [r7, #11]
      break;
 800cb70:	bf00      	nop
  }

  if (err != 0U)
 800cb72:	7afb      	ldrb	r3, [r7, #11]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d11e      	bne.n	800cbb6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	88db      	ldrh	r3, [r3, #6]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d016      	beq.n	800cbae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cb80:	893b      	ldrh	r3, [r7, #8]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00e      	beq.n	800cba4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	88da      	ldrh	r2, [r3, #6]
 800cb8a:	893b      	ldrh	r3, [r7, #8]
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	bf28      	it	cs
 800cb90:	4613      	movcs	r3, r2
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cb96:	893b      	ldrh	r3, [r7, #8]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	68f9      	ldr	r1, [r7, #12]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 fa44 	bl	800d02a <USBD_CtlSendData>
 800cba2:	e009      	b.n	800cbb8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cba4:	6839      	ldr	r1, [r7, #0]
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 f9ce 	bl	800cf48 <USBD_CtlError>
 800cbac:	e004      	b.n	800cbb8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 fa95 	bl	800d0de <USBD_CtlSendStatus>
 800cbb4:	e000      	b.n	800cbb8 <USBD_GetDescriptor+0x320>
    return;
 800cbb6:	bf00      	nop
  }
}
 800cbb8:	3710      	adds	r7, #16
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop

0800cbc0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	889b      	ldrh	r3, [r3, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d131      	bne.n	800cc36 <USBD_SetAddress+0x76>
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	88db      	ldrh	r3, [r3, #6]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d12d      	bne.n	800cc36 <USBD_SetAddress+0x76>
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	885b      	ldrh	r3, [r3, #2]
 800cbde:	2b7f      	cmp	r3, #127	; 0x7f
 800cbe0:	d829      	bhi.n	800cc36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	885b      	ldrh	r3, [r3, #2]
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b03      	cmp	r3, #3
 800cbf8:	d104      	bne.n	800cc04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cbfa:	6839      	ldr	r1, [r7, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 f9a3 	bl	800cf48 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc02:	e01d      	b.n	800cc40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	7bfa      	ldrb	r2, [r7, #15]
 800cc08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
 800cc0e:	4619      	mov	r1, r3
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f004 fe62 	bl	80118da <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fa61 	bl	800d0de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cc1c:	7bfb      	ldrb	r3, [r7, #15]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d004      	beq.n	800cc2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2202      	movs	r2, #2
 800cc26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc2a:	e009      	b.n	800cc40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc34:	e004      	b.n	800cc40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cc36:	6839      	ldr	r1, [r7, #0]
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 f985 	bl	800cf48 <USBD_CtlError>
  }
}
 800cc3e:	bf00      	nop
 800cc40:	bf00      	nop
 800cc42:	3710      	adds	r7, #16
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc52:	2300      	movs	r3, #0
 800cc54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	885b      	ldrh	r3, [r3, #2]
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	4b4c      	ldr	r3, [pc, #304]	; (800cd90 <USBD_SetConfig+0x148>)
 800cc5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc60:	4b4b      	ldr	r3, [pc, #300]	; (800cd90 <USBD_SetConfig+0x148>)
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d905      	bls.n	800cc74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cc68:	6839      	ldr	r1, [r7, #0]
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f96c 	bl	800cf48 <USBD_CtlError>
    return USBD_FAIL;
 800cc70:	2303      	movs	r3, #3
 800cc72:	e088      	b.n	800cd86 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d002      	beq.n	800cc86 <USBD_SetConfig+0x3e>
 800cc80:	2b03      	cmp	r3, #3
 800cc82:	d025      	beq.n	800ccd0 <USBD_SetConfig+0x88>
 800cc84:	e071      	b.n	800cd6a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cc86:	4b42      	ldr	r3, [pc, #264]	; (800cd90 <USBD_SetConfig+0x148>)
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d01c      	beq.n	800ccc8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cc8e:	4b40      	ldr	r3, [pc, #256]	; (800cd90 <USBD_SetConfig+0x148>)
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	461a      	mov	r2, r3
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc98:	4b3d      	ldr	r3, [pc, #244]	; (800cd90 <USBD_SetConfig+0x148>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f7ff f992 	bl	800bfc8 <USBD_SetClassConfig>
 800cca4:	4603      	mov	r3, r0
 800cca6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cca8:	7bfb      	ldrb	r3, [r7, #15]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d004      	beq.n	800ccb8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ccae:	6839      	ldr	r1, [r7, #0]
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 f949 	bl	800cf48 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ccb6:	e065      	b.n	800cd84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fa10 	bl	800d0de <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2203      	movs	r2, #3
 800ccc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ccc6:	e05d      	b.n	800cd84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 fa08 	bl	800d0de <USBD_CtlSendStatus>
      break;
 800ccce:	e059      	b.n	800cd84 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ccd0:	4b2f      	ldr	r3, [pc, #188]	; (800cd90 <USBD_SetConfig+0x148>)
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d112      	bne.n	800ccfe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2202      	movs	r2, #2
 800ccdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cce0:	4b2b      	ldr	r3, [pc, #172]	; (800cd90 <USBD_SetConfig+0x148>)
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	461a      	mov	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ccea:	4b29      	ldr	r3, [pc, #164]	; (800cd90 <USBD_SetConfig+0x148>)
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	4619      	mov	r1, r3
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f7ff f985 	bl	800c000 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 f9f1 	bl	800d0de <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ccfc:	e042      	b.n	800cd84 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ccfe:	4b24      	ldr	r3, [pc, #144]	; (800cd90 <USBD_SetConfig+0x148>)
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	461a      	mov	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d02a      	beq.n	800cd62 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	4619      	mov	r1, r3
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7ff f973 	bl	800c000 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cd1a:	4b1d      	ldr	r3, [pc, #116]	; (800cd90 <USBD_SetConfig+0x148>)
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd24:	4b1a      	ldr	r3, [pc, #104]	; (800cd90 <USBD_SetConfig+0x148>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	4619      	mov	r1, r3
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f7ff f94c 	bl	800bfc8 <USBD_SetClassConfig>
 800cd30:	4603      	mov	r3, r0
 800cd32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00f      	beq.n	800cd5a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cd3a:	6839      	ldr	r1, [r7, #0]
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 f903 	bl	800cf48 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	4619      	mov	r1, r3
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff f958 	bl	800c000 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2202      	movs	r2, #2
 800cd54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cd58:	e014      	b.n	800cd84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f9bf 	bl	800d0de <USBD_CtlSendStatus>
      break;
 800cd60:	e010      	b.n	800cd84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f9bb 	bl	800d0de <USBD_CtlSendStatus>
      break;
 800cd68:	e00c      	b.n	800cd84 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cd6a:	6839      	ldr	r1, [r7, #0]
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 f8eb 	bl	800cf48 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd72:	4b07      	ldr	r3, [pc, #28]	; (800cd90 <USBD_SetConfig+0x148>)
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	4619      	mov	r1, r3
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7ff f941 	bl	800c000 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cd7e:	2303      	movs	r3, #3
 800cd80:	73fb      	strb	r3, [r7, #15]
      break;
 800cd82:	bf00      	nop
  }

  return ret;
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	200004d4 	.word	0x200004d4

0800cd94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	88db      	ldrh	r3, [r3, #6]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d004      	beq.n	800cdb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cda6:	6839      	ldr	r1, [r7, #0]
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 f8cd 	bl	800cf48 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cdae:	e023      	b.n	800cdf8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	dc02      	bgt.n	800cdc2 <USBD_GetConfig+0x2e>
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	dc03      	bgt.n	800cdc8 <USBD_GetConfig+0x34>
 800cdc0:	e015      	b.n	800cdee <USBD_GetConfig+0x5a>
 800cdc2:	2b03      	cmp	r3, #3
 800cdc4:	d00b      	beq.n	800cdde <USBD_GetConfig+0x4a>
 800cdc6:	e012      	b.n	800cdee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	3308      	adds	r3, #8
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 f927 	bl	800d02a <USBD_CtlSendData>
        break;
 800cddc:	e00c      	b.n	800cdf8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	3304      	adds	r3, #4
 800cde2:	2201      	movs	r2, #1
 800cde4:	4619      	mov	r1, r3
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 f91f 	bl	800d02a <USBD_CtlSendData>
        break;
 800cdec:	e004      	b.n	800cdf8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cdee:	6839      	ldr	r1, [r7, #0]
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 f8a9 	bl	800cf48 <USBD_CtlError>
        break;
 800cdf6:	bf00      	nop
}
 800cdf8:	bf00      	nop
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	3b01      	subs	r3, #1
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d81e      	bhi.n	800ce56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	88db      	ldrh	r3, [r3, #6]
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d004      	beq.n	800ce2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ce20:	6839      	ldr	r1, [r7, #0]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f890 	bl	800cf48 <USBD_CtlError>
        break;
 800ce28:	e01a      	b.n	800ce60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d005      	beq.n	800ce46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	f043 0202 	orr.w	r2, r3, #2
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	330c      	adds	r3, #12
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 f8eb 	bl	800d02a <USBD_CtlSendData>
      break;
 800ce54:	e004      	b.n	800ce60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ce56:	6839      	ldr	r1, [r7, #0]
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 f875 	bl	800cf48 <USBD_CtlError>
      break;
 800ce5e:	bf00      	nop
  }
}
 800ce60:	bf00      	nop
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	885b      	ldrh	r3, [r3, #2]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d106      	bne.n	800ce88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 f92b 	bl	800d0de <USBD_CtlSendStatus>
  }
}
 800ce88:	bf00      	nop
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	3b01      	subs	r3, #1
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d80b      	bhi.n	800cec0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	885b      	ldrh	r3, [r3, #2]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d10c      	bne.n	800ceca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f000 f910 	bl	800d0de <USBD_CtlSendStatus>
      }
      break;
 800cebe:	e004      	b.n	800ceca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cec0:	6839      	ldr	r1, [r7, #0]
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 f840 	bl	800cf48 <USBD_CtlError>
      break;
 800cec8:	e000      	b.n	800cecc <USBD_ClrFeature+0x3c>
      break;
 800ceca:	bf00      	nop
  }
}
 800cecc:	bf00      	nop
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	781a      	ldrb	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	3301      	adds	r3, #1
 800ceee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	781a      	ldrb	r2, [r3, #0]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	3301      	adds	r3, #1
 800cefc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	f7ff fa92 	bl	800c428 <SWAPBYTE>
 800cf04:	4603      	mov	r3, r0
 800cf06:	461a      	mov	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	3301      	adds	r3, #1
 800cf16:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f7ff fa85 	bl	800c428 <SWAPBYTE>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	461a      	mov	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	3301      	adds	r3, #1
 800cf30:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f7ff fa78 	bl	800c428 <SWAPBYTE>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	80da      	strh	r2, [r3, #6]
}
 800cf40:	bf00      	nop
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf52:	2180      	movs	r1, #128	; 0x80
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f004 fc55 	bl	8011804 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f004 fc51 	bl	8011804 <USBD_LL_StallEP>
}
 800cf62:	bf00      	nop
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b086      	sub	sp, #24
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	60f8      	str	r0, [r7, #12]
 800cf72:	60b9      	str	r1, [r7, #8]
 800cf74:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cf76:	2300      	movs	r3, #0
 800cf78:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d036      	beq.n	800cfee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cf84:	6938      	ldr	r0, [r7, #16]
 800cf86:	f000 f836 	bl	800cff6 <USBD_GetLen>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	005b      	lsls	r3, r3, #1
 800cf92:	b29a      	uxth	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cf98:	7dfb      	ldrb	r3, [r7, #23]
 800cf9a:	68ba      	ldr	r2, [r7, #8]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	7812      	ldrb	r2, [r2, #0]
 800cfa2:	701a      	strb	r2, [r3, #0]
  idx++;
 800cfa4:	7dfb      	ldrb	r3, [r7, #23]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cfaa:	7dfb      	ldrb	r3, [r7, #23]
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	4413      	add	r3, r2
 800cfb0:	2203      	movs	r2, #3
 800cfb2:	701a      	strb	r2, [r3, #0]
  idx++;
 800cfb4:	7dfb      	ldrb	r3, [r7, #23]
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cfba:	e013      	b.n	800cfe4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cfbc:	7dfb      	ldrb	r3, [r7, #23]
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	693a      	ldr	r2, [r7, #16]
 800cfc4:	7812      	ldrb	r2, [r2, #0]
 800cfc6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	613b      	str	r3, [r7, #16]
    idx++;
 800cfce:	7dfb      	ldrb	r3, [r7, #23]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cfd4:	7dfb      	ldrb	r3, [r7, #23]
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	4413      	add	r3, r2
 800cfda:	2200      	movs	r2, #0
 800cfdc:	701a      	strb	r2, [r3, #0]
    idx++;
 800cfde:	7dfb      	ldrb	r3, [r7, #23]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1e7      	bne.n	800cfbc <USBD_GetString+0x52>
 800cfec:	e000      	b.n	800cff0 <USBD_GetString+0x86>
    return;
 800cfee:	bf00      	nop
  }
}
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}

0800cff6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cff6:	b480      	push	{r7}
 800cff8:	b085      	sub	sp, #20
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cffe:	2300      	movs	r3, #0
 800d000:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d006:	e005      	b.n	800d014 <USBD_GetLen+0x1e>
  {
    len++;
 800d008:	7bfb      	ldrb	r3, [r7, #15]
 800d00a:	3301      	adds	r3, #1
 800d00c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	3301      	adds	r3, #1
 800d012:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1f5      	bne.n	800d008 <USBD_GetLen+0x12>
  }

  return len;
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3714      	adds	r7, #20
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr

0800d02a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b084      	sub	sp, #16
 800d02e:	af00      	add	r7, sp, #0
 800d030:	60f8      	str	r0, [r7, #12]
 800d032:	60b9      	str	r1, [r7, #8]
 800d034:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2202      	movs	r2, #2
 800d03a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	2100      	movs	r1, #0
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f004 fc61 	bl	8011918 <USBD_LL_Transmit>

  return USBD_OK;
 800d056:	2300      	movs	r3, #0
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	2100      	movs	r1, #0
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f004 fc50 	bl	8011918 <USBD_LL_Transmit>

  return USBD_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b084      	sub	sp, #16
 800d086:	af00      	add	r7, sp, #0
 800d088:	60f8      	str	r0, [r7, #12]
 800d08a:	60b9      	str	r1, [r7, #8]
 800d08c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2203      	movs	r2, #3
 800d092:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f004 fc54 	bl	801195a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0b2:	2300      	movs	r3, #0
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	68f8      	ldr	r0, [r7, #12]
 800d0d0:	f004 fc43 	bl	801195a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b082      	sub	sp, #8
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2204      	movs	r2, #4
 800d0ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	2100      	movs	r1, #0
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f004 fc0f 	bl	8011918 <USBD_LL_Transmit>

  return USBD_OK;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3708      	adds	r7, #8
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2205      	movs	r2, #5
 800d110:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d114:	2300      	movs	r3, #0
 800d116:	2200      	movs	r2, #0
 800d118:	2100      	movs	r1, #0
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f004 fc1d 	bl	801195a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d120:	2300      	movs	r3, #0
}
 800d122:	4618      	mov	r0, r3
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
	...

0800d12c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	4603      	mov	r3, r0
 800d134:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800d136:	4b0f      	ldr	r3, [pc, #60]	; (800d174 <OTP_Read+0x48>)
 800d138:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d13a:	e002      	b.n	800d142 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	3b08      	subs	r3, #8
 800d140:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	3307      	adds	r3, #7
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	79fa      	ldrb	r2, [r7, #7]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d003      	beq.n	800d156 <OTP_Read+0x2a>
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	4a09      	ldr	r2, [pc, #36]	; (800d178 <OTP_Read+0x4c>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d1f2      	bne.n	800d13c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	3307      	adds	r3, #7
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	79fa      	ldrb	r2, [r7, #7]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d001      	beq.n	800d166 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800d162:	2300      	movs	r3, #0
 800d164:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800d166:	68fb      	ldr	r3, [r7, #12]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3714      	adds	r7, #20
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr
 800d174:	1fff73f8 	.word	0x1fff73f8
 800d178:	1fff7000 	.word	0x1fff7000

0800d17c <_ZN8CALIPILE5setupEhP19__I2C_HandleTypeDefh>:
#include "CaliPile.h"
#include "math.h"

#define delay			HAL_Delay

void CALIPILE::setup(uint8_t i2c_address, I2C_HandleTypeDef *i2c_handle, uint8_t identifier) {
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	607a      	str	r2, [r7, #4]
 800d186:	461a      	mov	r2, r3
 800d188:	460b      	mov	r3, r1
 800d18a:	72fb      	strb	r3, [r7, #11]
 800d18c:	4613      	mov	r3, r2
 800d18e:	72bb      	strb	r3, [r7, #10]
	i2c_han = i2c_handle;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	605a      	str	r2, [r3, #4]
	i2c_addr = i2c_address << 1;
 800d196:	7afb      	ldrb	r3, [r7, #11]
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	b2da      	uxtb	r2, r3
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	721a      	strb	r2, [r3, #8]
	descriptor = identifier;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	7aba      	ldrb	r2, [r7, #10]
 800d1a4:	701a      	strb	r2, [r3, #0]
}
 800d1a6:	bf00      	nop
 800d1a8:	3714      	adds	r7, #20
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr

0800d1b2 <_ZN8CALIPILE4wakeEv>:

void CALIPILE::wake() {
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b082      	sub	sp, #8
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
	writeByte(0x00, 0x04, 0x00);  // issue general call and reload command
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	2204      	movs	r2, #4
 800d1be:	2100      	movs	r1, #0
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 f9fd 	bl	800d5c0 <_ZN8CALIPILE9writeByteEhhh>
	delay(1);
 800d1c6:	2001      	movs	r0, #1
 800d1c8:	f7f3 f9da 	bl	8000580 <HAL_Delay>
}
 800d1cc:	bf00      	nop
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <_ZN8CALIPILE10readEEPROMEv>:

void CALIPILE::readEEPROM()
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	ed2d 8b02 	vpush	{d8}
 800d1da:	b088      	sub	sp, #32
 800d1dc:	af02      	add	r7, sp, #8
 800d1de:	6078      	str	r0, [r7, #4]

	uint8_t rawData[2] = {0, 0};
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	81bb      	strh	r3, [r7, #12]
	/* Start of EEPROM operations, just have to do once *************************************************** */
	// Check EEPROM protocol number as a test of I2C communication
	writeByte(i2c_addr, CALIPILE_EEPROM_CONTROL, 0x80);// enable EEPROM read
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	7a19      	ldrb	r1, [r3, #8]
 800d1e8:	2380      	movs	r3, #128	; 0x80
 800d1ea:	221f      	movs	r2, #31
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 f9e7 	bl	800d5c0 <_ZN8CALIPILE9writeByteEhhh>

	uint8_t c = readByte(i2c_addr, CALIPILE_EEPROM_PROTOCOL);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	7a1b      	ldrb	r3, [r3, #8]
 800d1f6:	2220      	movs	r2, #32
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f9f7 	bl	800d5ee <_ZN8CALIPILE8readByteEhh>
 800d200:	4603      	mov	r3, r0
 800d202:	73fb      	strb	r3, [r7, #15]
	//Serial.print("CaliPile EEPROM protocol number is "); //Serial.println(c);
	//Serial.println("CaliPile EEPROM protocol number should be 3");

	uint8_t d = readByte(i2c_addr, CALIPILE_SLAVE_ADDRESS);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	7a1b      	ldrb	r3, [r3, #8]
 800d208:	223f      	movs	r2, #63	; 0x3f
 800d20a:	4619      	mov	r1, r3
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f9ee 	bl	800d5ee <_ZN8CALIPILE8readByteEhh>
 800d212:	4603      	mov	r3, r0
 800d214:	73bb      	strb	r3, [r7, #14]
	//Serial.println("CaliPile EEPROM slave address should be 140");
	//Serial.println(" ");

	// Read the EEPROM calibration constants

	_LOOKUP = readByte(i2c_addr, CALIPILE_EEPROM_LOOKUPNUM);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	7a1b      	ldrb	r3, [r3, #8]
 800d21a:	2229      	movs	r2, #41	; 0x29
 800d21c:	4619      	mov	r1, r3
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 f9e5 	bl	800d5ee <_ZN8CALIPILE8readByteEhh>
 800d224:	4603      	mov	r3, r0
 800d226:	461a      	mov	r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	765a      	strb	r2, [r3, #25]
	//Serial.print("CaliPile LookUpNumber is "); //Serial.println(_LOOKUP);

	readBytes(i2c_addr, CALIPILE_EEPROM_PTAT25, 2, &rawData[0]);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	7a19      	ldrb	r1, [r3, #8]
 800d230:	f107 030c 	add.w	r3, r7, #12
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	2302      	movs	r3, #2
 800d238:	222a      	movs	r2, #42	; 0x2a
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 f9ec 	bl	800d618 <_ZN8CALIPILE9readBytesEhhhPh>
	_PTAT25 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d240:	7b3b      	ldrb	r3, [r7, #12]
 800d242:	021b      	lsls	r3, r3, #8
 800d244:	b21a      	sxth	r2, r3
 800d246:	7b7b      	ldrb	r3, [r7, #13]
 800d248:	b21b      	sxth	r3, r3
 800d24a:	4313      	orrs	r3, r2
 800d24c:	b21b      	sxth	r3, r3
 800d24e:	b29a      	uxth	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	815a      	strh	r2, [r3, #10]
	//Serial.print("CaliPile PTAT25 is "); //Serial.println(_PTAT25);

	readBytes(i2c_addr, CALIPILE_EEPROM_M, 2, &rawData[0]);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	7a19      	ldrb	r1, [r3, #8]
 800d258:	f107 030c 	add.w	r3, r7, #12
 800d25c:	9300      	str	r3, [sp, #0]
 800d25e:	2302      	movs	r3, #2
 800d260:	222c      	movs	r2, #44	; 0x2c
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 f9d8 	bl	800d618 <_ZN8CALIPILE9readBytesEhhhPh>
	_M = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d268:	7b3b      	ldrb	r3, [r7, #12]
 800d26a:	021b      	lsls	r3, r3, #8
 800d26c:	b21a      	sxth	r2, r3
 800d26e:	7b7b      	ldrb	r3, [r7, #13]
 800d270:	b21b      	sxth	r3, r3
 800d272:	4313      	orrs	r3, r2
 800d274:	b21b      	sxth	r3, r3
 800d276:	b29a      	uxth	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	819a      	strh	r2, [r3, #12]
	_M /= 100;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	899b      	ldrh	r3, [r3, #12]
 800d280:	4a4f      	ldr	r2, [pc, #316]	; (800d3c0 <_ZN8CALIPILE10readEEPROMEv+0x1ec>)
 800d282:	fba2 2303 	umull	r2, r3, r2, r3
 800d286:	095b      	lsrs	r3, r3, #5
 800d288:	b29a      	uxth	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	819a      	strh	r2, [r3, #12]
	//Serial.print("CaliPile M is "); //Serial.println(_M);

	readBytes(i2c_addr, CALIPILE_EEPROM_U0, 2, &rawData[0]);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	7a19      	ldrb	r1, [r3, #8]
 800d292:	f107 030c 	add.w	r3, r7, #12
 800d296:	9300      	str	r3, [sp, #0]
 800d298:	2302      	movs	r3, #2
 800d29a:	222e      	movs	r2, #46	; 0x2e
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f9bb 	bl	800d618 <_ZN8CALIPILE9readBytesEhhhPh>
	_U0 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d2a2:	7b3b      	ldrb	r3, [r7, #12]
 800d2a4:	021b      	lsls	r3, r3, #8
 800d2a6:	b21a      	sxth	r2, r3
 800d2a8:	7b7b      	ldrb	r3, [r7, #13]
 800d2aa:	b21b      	sxth	r3, r3
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	b21b      	sxth	r3, r3
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	81da      	strh	r2, [r3, #14]
	_U0 += 32768;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	89db      	ldrh	r3, [r3, #14]
 800d2ba:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	81da      	strh	r2, [r3, #14]
	//Serial.print("CaliPile U0 is "); //Serial.println(_U0);

	readBytes(i2c_addr, CALIPILE_EEPROM_UOUT1, 2, &rawData[0]);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	7a19      	ldrb	r1, [r3, #8]
 800d2c8:	f107 030c 	add.w	r3, r7, #12
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	2302      	movs	r3, #2
 800d2d0:	2230      	movs	r2, #48	; 0x30
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 f9a0 	bl	800d618 <_ZN8CALIPILE9readBytesEhhhPh>
	_UOUT1 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d2d8:	7b3b      	ldrb	r3, [r7, #12]
 800d2da:	021b      	lsls	r3, r3, #8
 800d2dc:	7b7a      	ldrb	r2, [r7, #13]
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	615a      	str	r2, [r3, #20]
	_UOUT1 *= 2;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	695b      	ldr	r3, [r3, #20]
 800d2ea:	005a      	lsls	r2, r3, #1
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	615a      	str	r2, [r3, #20]
	//Serial.print("CaliPile UOUT1 is "); //Serial.println(_UOUT1);

	_TOBJ1 = readByte(i2c_addr, CALIPILE_EEPROM_TOBJ1);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	7a1b      	ldrb	r3, [r3, #8]
 800d2f4:	2232      	movs	r2, #50	; 0x32
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 f978 	bl	800d5ee <_ZN8CALIPILE8readByteEhh>
 800d2fe:	4603      	mov	r3, r0
 800d300:	461a      	mov	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	761a      	strb	r2, [r3, #24]
	//Serial.print("CaliPile TOBJ1 is "); //Serial.println(_TOBJ1);

	readBytes(i2c_addr, CALIPILE_EEPROM_CHECKSUM, 2, &rawData[0]);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	7a19      	ldrb	r1, [r3, #8]
 800d30a:	f107 030c 	add.w	r3, r7, #12
 800d30e:	9300      	str	r3, [sp, #0]
 800d310:	2302      	movs	r3, #2
 800d312:	2221      	movs	r2, #33	; 0x21
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f97f 	bl	800d618 <_ZN8CALIPILE9readBytesEhhhPh>
	_CHECKSUM = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d31a:	7b3b      	ldrb	r3, [r7, #12]
 800d31c:	021b      	lsls	r3, r3, #8
 800d31e:	b21a      	sxth	r2, r3
 800d320:	7b7b      	ldrb	r3, [r7, #13]
 800d322:	b21b      	sxth	r3, r3
 800d324:	4313      	orrs	r3, r2
 800d326:	b21b      	sxth	r3, r3
 800d328:	b29a      	uxth	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	821a      	strh	r2, [r3, #16]
	//Serial.print("CaliPile CHECKSUM is supposed to be "); //Serial.println(_CHECKSUM);

	// Calculate the checksum
	uint16_t sum = 0;
 800d32e:	2300      	movs	r3, #0
 800d330:	82fb      	strh	r3, [r7, #22]
	for(int ii = 35; ii < 64; ii++)
 800d332:	2323      	movs	r3, #35	; 0x23
 800d334:	613b      	str	r3, [r7, #16]
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	2b3f      	cmp	r3, #63	; 0x3f
 800d33a:	dc10      	bgt.n	800d35e <_ZN8CALIPILE10readEEPROMEv+0x18a>
	{
		sum += readByte(i2c_addr, ii);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	7a1b      	ldrb	r3, [r3, #8]
 800d340:	693a      	ldr	r2, [r7, #16]
 800d342:	b2d2      	uxtb	r2, r2
 800d344:	4619      	mov	r1, r3
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 f951 	bl	800d5ee <_ZN8CALIPILE8readByteEhh>
 800d34c:	4603      	mov	r3, r0
 800d34e:	b29a      	uxth	r2, r3
 800d350:	8afb      	ldrh	r3, [r7, #22]
 800d352:	4413      	add	r3, r2
 800d354:	82fb      	strh	r3, [r7, #22]
	for(int ii = 35; ii < 64; ii++)
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	3301      	adds	r3, #1
 800d35a:	613b      	str	r3, [r7, #16]
 800d35c:	e7eb      	b.n	800d336 <_ZN8CALIPILE10readEEPROMEv+0x162>
	}
	//Serial.print("CaliPile CHECKSUM is "); //Serial.println(sum + c);

	writeByte(i2c_addr, CALIPILE_EEPROM_CONTROL, 0x00); // disable EEPROM read
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	7a19      	ldrb	r1, [r3, #8]
 800d362:	2300      	movs	r3, #0
 800d364:	221f      	movs	r2, #31
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f92a 	bl	800d5c0 <_ZN8CALIPILE9writeByteEhhh>
	/* End of EEPROM operations, just have to do once *************************************************** */

	// Construct needed calibration constants (just need to calculate once)
	_k = ( (float) (_UOUT1 - _U0) )/(powf((float)(_TOBJ1 + 273.15f), 3.8f) - powf(25.0f + 273.15f, 3.8f) );
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	695b      	ldr	r3, [r3, #20]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	89d2      	ldrh	r2, [r2, #14]
 800d374:	1a9b      	subs	r3, r3, r2
 800d376:	ee07 3a90 	vmov	s15, r3
 800d37a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	7e1b      	ldrb	r3, [r3, #24]
 800d382:	ee07 3a90 	vmov	s15, r3
 800d386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d38a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800d3c4 <_ZN8CALIPILE10readEEPROMEv+0x1f0>
 800d38e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d392:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d3c8 <_ZN8CALIPILE10readEEPROMEv+0x1f4>
 800d396:	eeb0 0a67 	vmov.f32	s0, s15
 800d39a:	f004 fb93 	bl	8011ac4 <powf>
 800d39e:	eef0 7a40 	vmov.f32	s15, s0
 800d3a2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800d3cc <_ZN8CALIPILE10readEEPROMEv+0x1f8>
 800d3a6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d3aa:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800d3b4:	bf00      	nop
 800d3b6:	3718      	adds	r7, #24
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	ecbd 8b02 	vpop	{d8}
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	51eb851f 	.word	0x51eb851f
 800d3c4:	43889333 	.word	0x43889333
 800d3c8:	40733333 	.word	0x40733333
 800d3cc:	4f16b4e3 	.word	0x4f16b4e3

0800d3d0 <_ZN8CALIPILE11initTempThrEt>:
	// select motion threshold
	writeByte(i2c_addr, CALIPILE_TP_PRES_THLD, 0x22);// presence threshold, set at 50 counts
	writeByte(i2c_addr, CALIPILE_TP_MOT_THLD, 0x0A);// motion threshold, set at 10 counts
}

void CALIPILE::initTempThr(uint16_t Tcounts) {
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af02      	add	r7, sp, #8
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	460b      	mov	r3, r1
 800d3da:	807b      	strh	r3, [r7, #2]
	uint8_t rawData[2] = {0, 0};
 800d3dc:	2300      	movs	r3, #0
 800d3de:	813b      	strh	r3, [r7, #8]
	// specify the over temperature interrupt threshold (2 bytes)
	writeByte(i2c_addr, CALIPILE_TPOT_THR, Tcounts);// 0x83 means 67,072 counts as threshold
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	7a19      	ldrb	r1, [r3, #8]
 800d3e4:	887b      	ldrh	r3, [r7, #2]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	221c      	movs	r2, #28
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 f8e8 	bl	800d5c0 <_ZN8CALIPILE9writeByteEhhh>
	writeByte(i2c_addr, (CALIPILE_TPOT_THR + 1), 0x00);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	7a19      	ldrb	r1, [r3, #8]
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	221d      	movs	r2, #29
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 f8e1 	bl	800d5c0 <_ZN8CALIPILE9writeByteEhhh>
	uint8_t temp = readByte(i2c_addr, CALIPILE_SRC_SELECT);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	7a1b      	ldrb	r3, [r3, #8]
 800d402:	221a      	movs	r2, #26
 800d404:	4619      	mov	r1, r3
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f8f1 	bl	800d5ee <_ZN8CALIPILE8readByteEhh>
 800d40c:	4603      	mov	r3, r0
 800d40e:	73fb      	strb	r3, [r7, #15]
	writeByte(i2c_addr, CALIPILE_SRC_SELECT, temp | 0x10);// interrupt on exceeding threshold
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	7a19      	ldrb	r1, [r3, #8]
 800d414:	7bfb      	ldrb	r3, [r7, #15]
 800d416:	f043 0310 	orr.w	r3, r3, #16
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	221a      	movs	r2, #26
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f8ce 	bl	800d5c0 <_ZN8CALIPILE9writeByteEhhh>
	// Verify threshold set
	readBytes(i2c_addr, CALIPILE_TPOT_THR, 2, &rawData[0]);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	7a19      	ldrb	r1, [r3, #8]
 800d428:	f107 0308 	add.w	r3, r7, #8
 800d42c:	9300      	str	r3, [sp, #0]
 800d42e:	2302      	movs	r3, #2
 800d430:	221c      	movs	r2, #28
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 f8f0 	bl	800d618 <_ZN8CALIPILE9readBytesEhhhPh>
	uint16_t TPOTTHR = ((uint16_t) rawData[0] << 8) | rawData[1];
 800d438:	7a3b      	ldrb	r3, [r7, #8]
 800d43a:	021b      	lsls	r3, r3, #8
 800d43c:	b21a      	sxth	r2, r3
 800d43e:	7a7b      	ldrb	r3, [r7, #9]
 800d440:	b21b      	sxth	r3, r3
 800d442:	4313      	orrs	r3, r2
 800d444:	b21b      	sxth	r3, r3
 800d446:	81bb      	strh	r3, [r7, #12]
	//Serial.print("Overtemp threshold = "); //Serial.println(TPOTTHR * 2);
}
 800d448:	bf00      	nop
 800d44a:	3710      	adds	r7, #16
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <_ZN8CALIPILE8getTPAMBEv>:

uint16_t CALIPILE::getTPAMB() {
 800d450:	b580      	push	{r7, lr}
 800d452:	b086      	sub	sp, #24
 800d454:	af02      	add	r7, sp, #8
 800d456:	6078      	str	r0, [r7, #4]
	uint8_t rawData[2] = {0, 0};
 800d458:	2300      	movs	r3, #0
 800d45a:	81bb      	strh	r3, [r7, #12]
	readBytes(i2c_addr, CALIPILE_TPAMBIENT, 2, &rawData[0]);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7a19      	ldrb	r1, [r3, #8]
 800d460:	f107 030c 	add.w	r3, r7, #12
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	2302      	movs	r3, #2
 800d468:	2203      	movs	r2, #3
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f8d4 	bl	800d618 <_ZN8CALIPILE9readBytesEhhhPh>
	uint16_t temp = ( (uint16_t)(rawData[0] & 0x7F) << 8) | rawData[1];
 800d470:	7b3b      	ldrb	r3, [r7, #12]
 800d472:	021b      	lsls	r3, r3, #8
 800d474:	b21b      	sxth	r3, r3
 800d476:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800d47a:	b21a      	sxth	r2, r3
 800d47c:	7b7b      	ldrb	r3, [r7, #13]
 800d47e:	b21b      	sxth	r3, r3
 800d480:	4313      	orrs	r3, r2
 800d482:	b21b      	sxth	r3, r3
 800d484:	81fb      	strh	r3, [r7, #14]
	return temp;
 800d486:	89fb      	ldrh	r3, [r7, #14]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <_ZN8CALIPILE8getTPOBJEv>:

uint32_t CALIPILE::getTPOBJ() {
 800d490:	b580      	push	{r7, lr}
 800d492:	b086      	sub	sp, #24
 800d494:	af02      	add	r7, sp, #8
 800d496:	6078      	str	r0, [r7, #4]
	uint8_t rawData[3] = {0, 0, 0};
 800d498:	4b10      	ldr	r3, [pc, #64]	; (800d4dc <_ZN8CALIPILE8getTPOBJEv+0x4c>)
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	723b      	strb	r3, [r7, #8]
 800d49e:	f107 0309 	add.w	r3, r7, #9
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	801a      	strh	r2, [r3, #0]
	readBytes(i2c_addr, CALIPILE_TPOBJECT, 3, &rawData[0]);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	7a19      	ldrb	r1, [r3, #8]
 800d4aa:	f107 0308 	add.w	r3, r7, #8
 800d4ae:	9300      	str	r3, [sp, #0]
 800d4b0:	2303      	movs	r3, #3
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f000 f8af 	bl	800d618 <_ZN8CALIPILE9readBytesEhhhPh>
	uint32_t temp = ( (uint32_t) ( (uint32_t)rawData[0] << 24) | ( (uint32_t)rawData[1] << 16) | ( (uint32_t)rawData[2] & 0x80) << 8) >> 15;
 800d4ba:	7a3b      	ldrb	r3, [r7, #8]
 800d4bc:	061a      	lsls	r2, r3, #24
 800d4be:	7a7b      	ldrb	r3, [r7, #9]
 800d4c0:	041b      	lsls	r3, r3, #16
 800d4c2:	431a      	orrs	r2, r3
 800d4c4:	7abb      	ldrb	r3, [r7, #10]
 800d4c6:	021b      	lsls	r3, r3, #8
 800d4c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	0bdb      	lsrs	r3, r3, #15
 800d4d0:	60fb      	str	r3, [r7, #12]
	return temp;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	08012460 	.word	0x08012460

0800d4e0 <_ZN8CALIPILE7getTambEt>:
uint8_t CALIPILE::getTPAMBSHK() {
	uint8_t temp = readByte(i2c_addr, CALIPILE_TPAMB_SHOCK);
	return temp;
}

float CALIPILE::getTamb(uint16_t TPAMB) {
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	807b      	strh	r3, [r7, #2]
	float temp = 298.15f + ((float)TPAMB - (float) _PTAT25) * (1.0f/(float) _M);
 800d4ec:	887b      	ldrh	r3, [r7, #2]
 800d4ee:	ee07 3a90 	vmov	s15, r3
 800d4f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	895b      	ldrh	r3, [r3, #10]
 800d4fa:	ee07 3a90 	vmov	s15, r3
 800d4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d502:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	899b      	ldrh	r3, [r3, #12]
 800d50a:	ee07 3a90 	vmov	s15, r3
 800d50e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d512:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d516:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800d51a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d51e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800d540 <_ZN8CALIPILE7getTambEt+0x60>
 800d522:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d526:	edc7 7a03 	vstr	s15, [r7, #12]
	return temp;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	ee07 3a90 	vmov	s15, r3
}
 800d530:	eeb0 0a67 	vmov.f32	s0, s15
 800d534:	3714      	adds	r7, #20
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	43951333 	.word	0x43951333

0800d544 <_ZN8CALIPILE7getTobjEmf>:

float CALIPILE::getTobj(uint32_t TPOBJ, float Tamb) {
 800d544:	b580      	push	{r7, lr}
 800d546:	b088      	sub	sp, #32
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	ed87 0a01 	vstr	s0, [r7, #4]
	float temp0 = powf(Tamb, 3.8f);
 800d552:	eddf 0a19 	vldr	s1, [pc, #100]	; 800d5b8 <_ZN8CALIPILE7getTobjEmf+0x74>
 800d556:	ed97 0a01 	vldr	s0, [r7, #4]
 800d55a:	f004 fab3 	bl	8011ac4 <powf>
 800d55e:	ed87 0a07 	vstr	s0, [r7, #28]
	float temp1 = ( ((float) TPOBJ) - ((float) _U0) ) / _k;
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	ee07 3a90 	vmov	s15, r3
 800d568:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	89db      	ldrh	r3, [r3, #14]
 800d570:	ee07 3a90 	vmov	s15, r3
 800d574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d578:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	ed93 7a07 	vldr	s14, [r3, #28]
 800d582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d586:	edc7 7a06 	vstr	s15, [r7, #24]
	float temp3 = powf( (temp0 + temp1), 0.2631578947f );
 800d58a:	ed97 7a07 	vldr	s14, [r7, #28]
 800d58e:	edd7 7a06 	vldr	s15, [r7, #24]
 800d592:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d596:	eddf 0a09 	vldr	s1, [pc, #36]	; 800d5bc <_ZN8CALIPILE7getTobjEmf+0x78>
 800d59a:	eeb0 0a67 	vmov.f32	s0, s15
 800d59e:	f004 fa91 	bl	8011ac4 <powf>
 800d5a2:	ed87 0a05 	vstr	s0, [r7, #20]
	return temp3;
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	ee07 3a90 	vmov	s15, r3
}
 800d5ac:	eeb0 0a67 	vmov.f32	s0, s15
 800d5b0:	3720      	adds	r7, #32
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	40733333 	.word	0x40733333
 800d5bc:	3e86bca2 	.word	0x3e86bca2

0800d5c0 <_ZN8CALIPILE9writeByteEhhh>:
//	//Serial.println("done\n");
//
//}

// I2C read/write functions for the BMP280 sensors
void CALIPILE::writeByte(uint8_t address, uint8_t subAddress, uint8_t data) {
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	4608      	mov	r0, r1
 800d5ca:	4611      	mov	r1, r2
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	70fb      	strb	r3, [r7, #3]
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	70bb      	strb	r3, [r7, #2]
 800d5d6:	4613      	mov	r3, r2
 800d5d8:	707b      	strb	r3, [r7, #1]
	writeRegister(subAddress, &data, 1);
 800d5da:	1c7a      	adds	r2, r7, #1
 800d5dc:	78b9      	ldrb	r1, [r7, #2]
 800d5de:	2301      	movs	r3, #1
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 f85a 	bl	800d69a <_ZN8CALIPILE13writeRegisterEhPht>
}
 800d5e6:	bf00      	nop
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <_ZN8CALIPILE8readByteEhh>:

uint8_t CALIPILE::readByte(uint8_t address, uint8_t subAddress) {
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b084      	sub	sp, #16
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	70fb      	strb	r3, [r7, #3]
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	70bb      	strb	r3, [r7, #2]
	uint8_t temp[1];
	readRegister(subAddress, &temp[0], 1);
 800d5fe:	78bb      	ldrb	r3, [r7, #2]
 800d600:	b299      	uxth	r1, r3
 800d602:	f107 020c 	add.w	r2, r7, #12
 800d606:	2301      	movs	r3, #1
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f81e 	bl	800d64a <_ZN8CALIPILE12readRegisterEtPht>
	return temp[0];
 800d60e:	7b3b      	ldrb	r3, [r7, #12]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <_ZN8CALIPILE9readBytesEhhhPh>:

void CALIPILE::readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest) {
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	4608      	mov	r0, r1
 800d622:	4611      	mov	r1, r2
 800d624:	461a      	mov	r2, r3
 800d626:	4603      	mov	r3, r0
 800d628:	70fb      	strb	r3, [r7, #3]
 800d62a:	460b      	mov	r3, r1
 800d62c:	70bb      	strb	r3, [r7, #2]
 800d62e:	4613      	mov	r3, r2
 800d630:	707b      	strb	r3, [r7, #1]
	readRegister(subAddress, dest, count);
 800d632:	78bb      	ldrb	r3, [r7, #2]
 800d634:	b299      	uxth	r1, r3
 800d636:	787b      	ldrb	r3, [r7, #1]
 800d638:	b29b      	uxth	r3, r3
 800d63a:	693a      	ldr	r2, [r7, #16]
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 f804 	bl	800d64a <_ZN8CALIPILE12readRegisterEtPht>
}
 800d642:	bf00      	nop
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <_ZN8CALIPILE12readRegisterEtPht>:
	} else {
		return false;
	}
}

bool CALIPILE::readRegister(uint16_t mem_addr, uint8_t *dest, uint16_t size) {
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b088      	sub	sp, #32
 800d64e:	af04      	add	r7, sp, #16
 800d650:	60f8      	str	r0, [r7, #12]
 800d652:	607a      	str	r2, [r7, #4]
 800d654:	461a      	mov	r2, r3
 800d656:	460b      	mov	r3, r1
 800d658:	817b      	strh	r3, [r7, #10]
 800d65a:	4613      	mov	r3, r2
 800d65c:	813b      	strh	r3, [r7, #8]
	if (HAL_OK
			== HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, dest, size, 10)) {
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6858      	ldr	r0, [r3, #4]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	7a1b      	ldrb	r3, [r3, #8]
 800d666:	b299      	uxth	r1, r3
 800d668:	897a      	ldrh	r2, [r7, #10]
 800d66a:	230a      	movs	r3, #10
 800d66c:	9302      	str	r3, [sp, #8]
 800d66e:	893b      	ldrh	r3, [r7, #8]
 800d670:	9301      	str	r3, [sp, #4]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	9300      	str	r3, [sp, #0]
 800d676:	2301      	movs	r3, #1
 800d678:	f7f5 fd62 	bl	8003140 <HAL_I2C_Mem_Read>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	bf0c      	ite	eq
 800d682:	2301      	moveq	r3, #1
 800d684:	2300      	movne	r3, #0
 800d686:	b2db      	uxtb	r3, r3
	if (HAL_OK
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d001      	beq.n	800d690 <_ZN8CALIPILE12readRegisterEtPht+0x46>
		return true;
 800d68c:	2301      	movs	r3, #1
 800d68e:	e000      	b.n	800d692 <_ZN8CALIPILE12readRegisterEtPht+0x48>
	} else {
		return false;
 800d690:	2300      	movs	r3, #0
	}
}
 800d692:	4618      	mov	r0, r3
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <_ZN8CALIPILE13writeRegisterEhPht>:

bool CALIPILE::writeRegister(uint8_t mem_addr, uint8_t *val, uint16_t size) {
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b088      	sub	sp, #32
 800d69e:	af04      	add	r7, sp, #16
 800d6a0:	60f8      	str	r0, [r7, #12]
 800d6a2:	607a      	str	r2, [r7, #4]
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	460b      	mov	r3, r1
 800d6a8:	72fb      	strb	r3, [r7, #11]
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	813b      	strh	r3, [r7, #8]
	if (HAL_OK
			== HAL_I2C_Mem_Write(i2c_han, i2c_addr, mem_addr, 1, val, size, 10)) {
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6858      	ldr	r0, [r3, #4]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	7a1b      	ldrb	r3, [r3, #8]
 800d6b6:	b299      	uxth	r1, r3
 800d6b8:	7afb      	ldrb	r3, [r7, #11]
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	230a      	movs	r3, #10
 800d6be:	9302      	str	r3, [sp, #8]
 800d6c0:	893b      	ldrh	r3, [r7, #8]
 800d6c2:	9301      	str	r3, [sp, #4]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	f7f5 fc25 	bl	8002f18 <HAL_I2C_Mem_Write>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	bf0c      	ite	eq
 800d6d4:	2301      	moveq	r3, #1
 800d6d6:	2300      	movne	r3, #0
 800d6d8:	b2db      	uxtb	r3, r3
	if (HAL_OK
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d001      	beq.n	800d6e2 <_ZN8CALIPILE13writeRegisterEhPht+0x48>
		return true;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e000      	b.n	800d6e4 <_ZN8CALIPILE13writeRegisterEhPht+0x4a>
	} else {
		return false;
 800d6e2:	2300      	movs	r3, #0
	}
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3710      	adds	r7, #16
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <__NVIC_SetPriority>:
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	6039      	str	r1, [r7, #0]
 800d6f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d6f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	db0a      	blt.n	800d716 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	b2da      	uxtb	r2, r3
 800d704:	490c      	ldr	r1, [pc, #48]	; (800d738 <__NVIC_SetPriority+0x4c>)
 800d706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d70a:	0112      	lsls	r2, r2, #4
 800d70c:	b2d2      	uxtb	r2, r2
 800d70e:	440b      	add	r3, r1
 800d710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d714:	e00a      	b.n	800d72c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	b2da      	uxtb	r2, r3
 800d71a:	4908      	ldr	r1, [pc, #32]	; (800d73c <__NVIC_SetPriority+0x50>)
 800d71c:	79fb      	ldrb	r3, [r7, #7]
 800d71e:	f003 030f 	and.w	r3, r3, #15
 800d722:	3b04      	subs	r3, #4
 800d724:	0112      	lsls	r2, r2, #4
 800d726:	b2d2      	uxtb	r2, r2
 800d728:	440b      	add	r3, r1
 800d72a:	761a      	strb	r2, [r3, #24]
}
 800d72c:	bf00      	nop
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr
 800d738:	e000e100 	.word	0xe000e100
 800d73c:	e000ed00 	.word	0xe000ed00

0800d740 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d740:	b580      	push	{r7, lr}
 800d742:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d744:	4b05      	ldr	r3, [pc, #20]	; (800d75c <SysTick_Handler+0x1c>)
 800d746:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d748:	f002 f97e 	bl	800fa48 <xTaskGetSchedulerState>
 800d74c:	4603      	mov	r3, r0
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d001      	beq.n	800d756 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d752:	f003 fa11 	bl	8010b78 <xPortSysTickHandler>
  }
}
 800d756:	bf00      	nop
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	e000e010 	.word	0xe000e010

0800d760 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d760:	b580      	push	{r7, lr}
 800d762:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d764:	2100      	movs	r1, #0
 800d766:	f06f 0004 	mvn.w	r0, #4
 800d76a:	f7ff ffbf 	bl	800d6ec <__NVIC_SetPriority>
#endif
}
 800d76e:	bf00      	nop
 800d770:	bd80      	pop	{r7, pc}
	...

0800d774 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d77a:	f3ef 8305 	mrs	r3, IPSR
 800d77e:	603b      	str	r3, [r7, #0]
  return(result);
 800d780:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d782:	2b00      	cmp	r3, #0
 800d784:	d003      	beq.n	800d78e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d786:	f06f 0305 	mvn.w	r3, #5
 800d78a:	607b      	str	r3, [r7, #4]
 800d78c:	e00c      	b.n	800d7a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d78e:	4b0a      	ldr	r3, [pc, #40]	; (800d7b8 <osKernelInitialize+0x44>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d105      	bne.n	800d7a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d796:	4b08      	ldr	r3, [pc, #32]	; (800d7b8 <osKernelInitialize+0x44>)
 800d798:	2201      	movs	r2, #1
 800d79a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	607b      	str	r3, [r7, #4]
 800d7a0:	e002      	b.n	800d7a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d7a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d7a8:	687b      	ldr	r3, [r7, #4]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	370c      	adds	r7, #12
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	200004d8 	.word	0x200004d8

0800d7bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7c2:	f3ef 8305 	mrs	r3, IPSR
 800d7c6:	603b      	str	r3, [r7, #0]
  return(result);
 800d7c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d003      	beq.n	800d7d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d7ce:	f06f 0305 	mvn.w	r3, #5
 800d7d2:	607b      	str	r3, [r7, #4]
 800d7d4:	e010      	b.n	800d7f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d7d6:	4b0b      	ldr	r3, [pc, #44]	; (800d804 <osKernelStart+0x48>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d109      	bne.n	800d7f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d7de:	f7ff ffbf 	bl	800d760 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d7e2:	4b08      	ldr	r3, [pc, #32]	; (800d804 <osKernelStart+0x48>)
 800d7e4:	2202      	movs	r2, #2
 800d7e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d7e8:	f001 fce6 	bl	800f1b8 <vTaskStartScheduler>
      stat = osOK;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	607b      	str	r3, [r7, #4]
 800d7f0:	e002      	b.n	800d7f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d7f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d7f8:	687b      	ldr	r3, [r7, #4]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	200004d8 	.word	0x200004d8

0800d808 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d808:	b580      	push	{r7, lr}
 800d80a:	b08e      	sub	sp, #56	; 0x38
 800d80c:	af04      	add	r7, sp, #16
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d814:	2300      	movs	r3, #0
 800d816:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d818:	f3ef 8305 	mrs	r3, IPSR
 800d81c:	617b      	str	r3, [r7, #20]
  return(result);
 800d81e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d820:	2b00      	cmp	r3, #0
 800d822:	d17e      	bne.n	800d922 <osThreadNew+0x11a>
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d07b      	beq.n	800d922 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d82a:	2380      	movs	r3, #128	; 0x80
 800d82c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d82e:	2318      	movs	r3, #24
 800d830:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d832:	2300      	movs	r3, #0
 800d834:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d83a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d045      	beq.n	800d8ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d002      	beq.n	800d850 <osThreadNew+0x48>
        name = attr->name;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	699b      	ldr	r3, [r3, #24]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d002      	beq.n	800d85e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	699b      	ldr	r3, [r3, #24]
 800d85c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d008      	beq.n	800d876 <osThreadNew+0x6e>
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	2b38      	cmp	r3, #56	; 0x38
 800d868:	d805      	bhi.n	800d876 <osThreadNew+0x6e>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	f003 0301 	and.w	r3, r3, #1
 800d872:	2b00      	cmp	r3, #0
 800d874:	d001      	beq.n	800d87a <osThreadNew+0x72>
        return (NULL);
 800d876:	2300      	movs	r3, #0
 800d878:	e054      	b.n	800d924 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	695b      	ldr	r3, [r3, #20]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d003      	beq.n	800d88a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	695b      	ldr	r3, [r3, #20]
 800d886:	089b      	lsrs	r3, r3, #2
 800d888:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00e      	beq.n	800d8b0 <osThreadNew+0xa8>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	2b5b      	cmp	r3, #91	; 0x5b
 800d898:	d90a      	bls.n	800d8b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d006      	beq.n	800d8b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d002      	beq.n	800d8b0 <osThreadNew+0xa8>
        mem = 1;
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	61bb      	str	r3, [r7, #24]
 800d8ae:	e010      	b.n	800d8d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d10c      	bne.n	800d8d2 <osThreadNew+0xca>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d108      	bne.n	800d8d2 <osThreadNew+0xca>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d104      	bne.n	800d8d2 <osThreadNew+0xca>
          mem = 0;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	61bb      	str	r3, [r7, #24]
 800d8cc:	e001      	b.n	800d8d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d110      	bne.n	800d8fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d8e0:	9202      	str	r2, [sp, #8]
 800d8e2:	9301      	str	r3, [sp, #4]
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	9300      	str	r3, [sp, #0]
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	6a3a      	ldr	r2, [r7, #32]
 800d8ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f001 fa8c 	bl	800ee0c <xTaskCreateStatic>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	613b      	str	r3, [r7, #16]
 800d8f8:	e013      	b.n	800d922 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d110      	bne.n	800d922 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d900:	6a3b      	ldr	r3, [r7, #32]
 800d902:	b29a      	uxth	r2, r3
 800d904:	f107 0310 	add.w	r3, r7, #16
 800d908:	9301      	str	r3, [sp, #4]
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d912:	68f8      	ldr	r0, [r7, #12]
 800d914:	f001 fad7 	bl	800eec6 <xTaskCreate>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d001      	beq.n	800d922 <osThreadNew+0x11a>
            hTask = NULL;
 800d91e:	2300      	movs	r3, #0
 800d920:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d922:	693b      	ldr	r3, [r7, #16]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3728      	adds	r7, #40	; 0x28
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b088      	sub	sp, #32
 800d930:	af02      	add	r7, sp, #8
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d002      	beq.n	800d946 <osThreadFlagsSet+0x1a>
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	2b00      	cmp	r3, #0
 800d944:	da03      	bge.n	800d94e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800d946:	f06f 0303 	mvn.w	r3, #3
 800d94a:	60fb      	str	r3, [r7, #12]
 800d94c:	e035      	b.n	800d9ba <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800d94e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d952:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d954:	f3ef 8305 	mrs	r3, IPSR
 800d958:	613b      	str	r3, [r7, #16]
  return(result);
 800d95a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d01f      	beq.n	800d9a0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800d960:	2300      	movs	r3, #0
 800d962:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800d964:	f107 0308 	add.w	r3, r7, #8
 800d968:	9300      	str	r3, [sp, #0]
 800d96a:	2300      	movs	r3, #0
 800d96c:	2201      	movs	r2, #1
 800d96e:	6839      	ldr	r1, [r7, #0]
 800d970:	6978      	ldr	r0, [r7, #20]
 800d972:	f002 fa07 	bl	800fd84 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800d976:	f107 030c 	add.w	r3, r7, #12
 800d97a:	2200      	movs	r2, #0
 800d97c:	9200      	str	r2, [sp, #0]
 800d97e:	2200      	movs	r2, #0
 800d980:	2100      	movs	r1, #0
 800d982:	6978      	ldr	r0, [r7, #20]
 800d984:	f002 f9fe 	bl	800fd84 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d015      	beq.n	800d9ba <osThreadFlagsSet+0x8e>
 800d98e:	4b0d      	ldr	r3, [pc, #52]	; (800d9c4 <osThreadFlagsSet+0x98>)
 800d990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d994:	601a      	str	r2, [r3, #0]
 800d996:	f3bf 8f4f 	dsb	sy
 800d99a:	f3bf 8f6f 	isb	sy
 800d99e:	e00c      	b.n	800d9ba <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	6839      	ldr	r1, [r7, #0]
 800d9a6:	6978      	ldr	r0, [r7, #20]
 800d9a8:	f002 f934 	bl	800fc14 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800d9ac:	f107 030c 	add.w	r3, r7, #12
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	6978      	ldr	r0, [r7, #20]
 800d9b6:	f002 f92d 	bl	800fc14 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3718      	adds	r7, #24
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	e000ed04 	.word	0xe000ed04

0800d9c8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b08c      	sub	sp, #48	; 0x30
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9d4:	f3ef 8305 	mrs	r3, IPSR
 800d9d8:	617b      	str	r3, [r7, #20]
  return(result);
 800d9da:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d003      	beq.n	800d9e8 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800d9e0:	f06f 0305 	mvn.w	r3, #5
 800d9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9e6:	e06b      	b.n	800dac0 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	da03      	bge.n	800d9f6 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800d9ee:	f06f 0303 	mvn.w	r3, #3
 800d9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9f4:	e064      	b.n	800dac0 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	f003 0302 	and.w	r3, r3, #2
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d002      	beq.n	800da06 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800da00:	2300      	movs	r3, #0
 800da02:	62bb      	str	r3, [r7, #40]	; 0x28
 800da04:	e001      	b.n	800da0a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800da0a:	2300      	movs	r3, #0
 800da0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800da12:	f001 fce3 	bl	800f3dc <xTaskGetTickCount>
 800da16:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800da18:	f107 0210 	add.w	r2, r7, #16
 800da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da20:	2000      	movs	r0, #0
 800da22:	f002 f89d 	bl	800fb60 <xTaskNotifyWait>
 800da26:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	d137      	bne.n	800da9e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800da2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	4013      	ands	r3, r2
 800da34:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da3a:	4313      	orrs	r3, r2
 800da3c:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	f003 0301 	and.w	r3, r3, #1
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00c      	beq.n	800da62 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4c:	4013      	ands	r3, r2
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	429a      	cmp	r2, r3
 800da52:	d032      	beq.n	800daba <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d10f      	bne.n	800da7a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800da5a:	f06f 0302 	mvn.w	r3, #2
 800da5e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800da60:	e02e      	b.n	800dac0 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800da62:	68fa      	ldr	r2, [r7, #12]
 800da64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da66:	4013      	ands	r3, r2
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d128      	bne.n	800dabe <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d103      	bne.n	800da7a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800da72:	f06f 0302 	mvn.w	r3, #2
 800da76:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800da78:	e022      	b.n	800dac0 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800da7a:	f001 fcaf 	bl	800f3dc <xTaskGetTickCount>
 800da7e:	4602      	mov	r2, r0
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800da86:	69ba      	ldr	r2, [r7, #24]
 800da88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d902      	bls.n	800da94 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800da8e:	2300      	movs	r3, #0
 800da90:	627b      	str	r3, [r7, #36]	; 0x24
 800da92:	e00e      	b.n	800dab2 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800da94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	1ad3      	subs	r3, r2, r3
 800da9a:	627b      	str	r3, [r7, #36]	; 0x24
 800da9c:	e009      	b.n	800dab2 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d103      	bne.n	800daac <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800daa4:	f06f 0302 	mvn.w	r3, #2
 800daa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800daaa:	e002      	b.n	800dab2 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800daac:	f06f 0301 	mvn.w	r3, #1
 800dab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800dab2:	69fb      	ldr	r3, [r7, #28]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d1af      	bne.n	800da18 <osThreadFlagsWait+0x50>
 800dab8:	e002      	b.n	800dac0 <osThreadFlagsWait+0xf8>
            break;
 800daba:	bf00      	nop
 800dabc:	e000      	b.n	800dac0 <osThreadFlagsWait+0xf8>
            break;
 800dabe:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800dac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3730      	adds	r7, #48	; 0x30
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800daca:	b580      	push	{r7, lr}
 800dacc:	b084      	sub	sp, #16
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dad2:	f3ef 8305 	mrs	r3, IPSR
 800dad6:	60bb      	str	r3, [r7, #8]
  return(result);
 800dad8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d003      	beq.n	800dae6 <osDelay+0x1c>
    stat = osErrorISR;
 800dade:	f06f 0305 	mvn.w	r3, #5
 800dae2:	60fb      	str	r3, [r7, #12]
 800dae4:	e007      	b.n	800daf6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dae6:	2300      	movs	r3, #0
 800dae8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f001 fb2d 	bl	800f150 <vTaskDelay>
    }
  }

  return (stat);
 800daf6:	68fb      	ldr	r3, [r7, #12]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3710      	adds	r7, #16
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f002 fe53 	bl	80107b4 <pvTimerGetTimerID>
 800db0e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d005      	beq.n	800db22 <TimerCallback+0x22>
    callb->func (callb->arg);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	6852      	ldr	r2, [r2, #4]
 800db1e:	4610      	mov	r0, r2
 800db20:	4798      	blx	r3
  }
}
 800db22:	bf00      	nop
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
	...

0800db2c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b08c      	sub	sp, #48	; 0x30
 800db30:	af02      	add	r7, sp, #8
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	607a      	str	r2, [r7, #4]
 800db36:	603b      	str	r3, [r7, #0]
 800db38:	460b      	mov	r3, r1
 800db3a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800db3c:	2300      	movs	r3, #0
 800db3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db40:	f3ef 8305 	mrs	r3, IPSR
 800db44:	613b      	str	r3, [r7, #16]
  return(result);
 800db46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d163      	bne.n	800dc14 <osTimerNew+0xe8>
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d060      	beq.n	800dc14 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800db52:	2008      	movs	r0, #8
 800db54:	f003 f8a0 	bl	8010c98 <pvPortMalloc>
 800db58:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d059      	beq.n	800dc14 <osTimerNew+0xe8>
      callb->func = func;
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800db6c:	7afb      	ldrb	r3, [r7, #11]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d102      	bne.n	800db78 <osTimerNew+0x4c>
        reload = pdFALSE;
 800db72:	2300      	movs	r3, #0
 800db74:	61fb      	str	r3, [r7, #28]
 800db76:	e001      	b.n	800db7c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800db78:	2301      	movs	r3, #1
 800db7a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800db7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db80:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800db82:	2300      	movs	r3, #0
 800db84:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d01c      	beq.n	800dbc6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d002      	beq.n	800db9a <osTimerNew+0x6e>
          name = attr->name;
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	689b      	ldr	r3, [r3, #8]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d006      	beq.n	800dbb0 <osTimerNew+0x84>
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	2b2b      	cmp	r3, #43	; 0x2b
 800dba8:	d902      	bls.n	800dbb0 <osTimerNew+0x84>
          mem = 1;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	61bb      	str	r3, [r7, #24]
 800dbae:	e00c      	b.n	800dbca <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	689b      	ldr	r3, [r3, #8]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d108      	bne.n	800dbca <osTimerNew+0x9e>
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d104      	bne.n	800dbca <osTimerNew+0x9e>
            mem = 0;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	61bb      	str	r3, [r7, #24]
 800dbc4:	e001      	b.n	800dbca <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d10c      	bne.n	800dbea <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	9301      	str	r3, [sp, #4]
 800dbd6:	4b12      	ldr	r3, [pc, #72]	; (800dc20 <osTimerNew+0xf4>)
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	69fa      	ldr	r2, [r7, #28]
 800dbde:	2101      	movs	r1, #1
 800dbe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbe2:	f002 fa68 	bl	80100b6 <xTimerCreateStatic>
 800dbe6:	6238      	str	r0, [r7, #32]
 800dbe8:	e00b      	b.n	800dc02 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d108      	bne.n	800dc02 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800dbf0:	4b0b      	ldr	r3, [pc, #44]	; (800dc20 <osTimerNew+0xf4>)
 800dbf2:	9300      	str	r3, [sp, #0]
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	69fa      	ldr	r2, [r7, #28]
 800dbf8:	2101      	movs	r1, #1
 800dbfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbfc:	f002 fa3a 	bl	8010074 <xTimerCreate>
 800dc00:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800dc02:	6a3b      	ldr	r3, [r7, #32]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d105      	bne.n	800dc14 <osTimerNew+0xe8>
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d002      	beq.n	800dc14 <osTimerNew+0xe8>
        vPortFree (callb);
 800dc0e:	6978      	ldr	r0, [r7, #20]
 800dc10:	f003 f90e 	bl	8010e30 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800dc14:	6a3b      	ldr	r3, [r7, #32]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3728      	adds	r7, #40	; 0x28
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	0800db01 	.word	0x0800db01

0800dc24 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b088      	sub	sp, #32
 800dc28:	af02      	add	r7, sp, #8
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc32:	f3ef 8305 	mrs	r3, IPSR
 800dc36:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc38:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d003      	beq.n	800dc46 <osTimerStart+0x22>
    stat = osErrorISR;
 800dc3e:	f06f 0305 	mvn.w	r3, #5
 800dc42:	617b      	str	r3, [r7, #20]
 800dc44:	e017      	b.n	800dc76 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d103      	bne.n	800dc54 <osTimerStart+0x30>
    stat = osErrorParameter;
 800dc4c:	f06f 0303 	mvn.w	r3, #3
 800dc50:	617b      	str	r3, [r7, #20]
 800dc52:	e010      	b.n	800dc76 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800dc54:	2300      	movs	r3, #0
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	2300      	movs	r3, #0
 800dc5a:	683a      	ldr	r2, [r7, #0]
 800dc5c:	2104      	movs	r1, #4
 800dc5e:	6938      	ldr	r0, [r7, #16]
 800dc60:	f002 faa2 	bl	80101a8 <xTimerGenericCommand>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d102      	bne.n	800dc70 <osTimerStart+0x4c>
      stat = osOK;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	617b      	str	r3, [r7, #20]
 800dc6e:	e002      	b.n	800dc76 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800dc70:	f06f 0302 	mvn.w	r3, #2
 800dc74:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800dc76:	697b      	ldr	r3, [r7, #20]
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3718      	adds	r7, #24
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <osTimerDelete>:
  }

  return (running);
}

osStatus_t osTimerDelete (osTimerId_t timer_id) {
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b088      	sub	sp, #32
 800dc84:	af02      	add	r7, sp, #8
 800dc86:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc8c:	f3ef 8305 	mrs	r3, IPSR
 800dc90:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  TimerCallback_t *callb;

  if (IS_IRQ()) {
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d003      	beq.n	800dca0 <osTimerDelete+0x20>
    stat = osErrorISR;
 800dc98:	f06f 0305 	mvn.w	r3, #5
 800dc9c:	617b      	str	r3, [r7, #20]
 800dc9e:	e01e      	b.n	800dcde <osTimerDelete+0x5e>
  }
  else if (hTimer == NULL) {
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d103      	bne.n	800dcae <osTimerDelete+0x2e>
    stat = osErrorParameter;
 800dca6:	f06f 0303 	mvn.w	r3, #3
 800dcaa:	617b      	str	r3, [r7, #20]
 800dcac:	e017      	b.n	800dcde <osTimerDelete+0x5e>
  }
  else {
    callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800dcae:	6938      	ldr	r0, [r7, #16]
 800dcb0:	f002 fd80 	bl	80107b4 <pvTimerGetTimerID>
 800dcb4:	60f8      	str	r0, [r7, #12]

    if (xTimerDelete (hTimer, 0) == pdPASS) {
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	2300      	movs	r3, #0
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	2105      	movs	r1, #5
 800dcc0:	6938      	ldr	r0, [r7, #16]
 800dcc2:	f002 fa71 	bl	80101a8 <xTimerGenericCommand>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d105      	bne.n	800dcd8 <osTimerDelete+0x58>
      vPortFree (callb);
 800dccc:	68f8      	ldr	r0, [r7, #12]
 800dcce:	f003 f8af 	bl	8010e30 <vPortFree>
      stat = osOK;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	617b      	str	r3, [r7, #20]
 800dcd6:	e002      	b.n	800dcde <osTimerDelete+0x5e>
    } else {
      stat = osErrorResource;
 800dcd8:	f06f 0302 	mvn.w	r3, #2
 800dcdc:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800dcde:	697b      	ldr	r3, [r7, #20]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3718      	adds	r7, #24
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b088      	sub	sp, #32
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcf4:	f3ef 8305 	mrs	r3, IPSR
 800dcf8:	60bb      	str	r3, [r7, #8]
  return(result);
 800dcfa:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d174      	bne.n	800ddea <osMutexNew+0x102>
    if (attr != NULL) {
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d003      	beq.n	800dd0e <osMutexNew+0x26>
      type = attr->attr_bits;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	61bb      	str	r3, [r7, #24]
 800dd0c:	e001      	b.n	800dd12 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	f003 0301 	and.w	r3, r3, #1
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d002      	beq.n	800dd22 <osMutexNew+0x3a>
      rmtx = 1U;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	617b      	str	r3, [r7, #20]
 800dd20:	e001      	b.n	800dd26 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800dd22:	2300      	movs	r3, #0
 800dd24:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	f003 0308 	and.w	r3, r3, #8
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d15c      	bne.n	800ddea <osMutexNew+0x102>
      mem = -1;
 800dd30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd34:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d015      	beq.n	800dd68 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d006      	beq.n	800dd52 <osMutexNew+0x6a>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	2b4f      	cmp	r3, #79	; 0x4f
 800dd4a:	d902      	bls.n	800dd52 <osMutexNew+0x6a>
          mem = 1;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	613b      	str	r3, [r7, #16]
 800dd50:	e00c      	b.n	800dd6c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	689b      	ldr	r3, [r3, #8]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d108      	bne.n	800dd6c <osMutexNew+0x84>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d104      	bne.n	800dd6c <osMutexNew+0x84>
            mem = 0;
 800dd62:	2300      	movs	r3, #0
 800dd64:	613b      	str	r3, [r7, #16]
 800dd66:	e001      	b.n	800dd6c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d112      	bne.n	800dd98 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d007      	beq.n	800dd88 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	689b      	ldr	r3, [r3, #8]
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	2004      	movs	r0, #4
 800dd80:	f000 fbc1 	bl	800e506 <xQueueCreateMutexStatic>
 800dd84:	61f8      	str	r0, [r7, #28]
 800dd86:	e016      	b.n	800ddb6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	2001      	movs	r0, #1
 800dd90:	f000 fbb9 	bl	800e506 <xQueueCreateMutexStatic>
 800dd94:	61f8      	str	r0, [r7, #28]
 800dd96:	e00e      	b.n	800ddb6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10b      	bne.n	800ddb6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d004      	beq.n	800ddae <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800dda4:	2004      	movs	r0, #4
 800dda6:	f000 fb96 	bl	800e4d6 <xQueueCreateMutex>
 800ddaa:	61f8      	str	r0, [r7, #28]
 800ddac:	e003      	b.n	800ddb6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ddae:	2001      	movs	r0, #1
 800ddb0:	f000 fb91 	bl	800e4d6 <xQueueCreateMutex>
 800ddb4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00c      	beq.n	800ddd6 <osMutexNew+0xee>
        if (attr != NULL) {
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d003      	beq.n	800ddca <osMutexNew+0xe2>
          name = attr->name;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	60fb      	str	r3, [r7, #12]
 800ddc8:	e001      	b.n	800ddce <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ddce:	68f9      	ldr	r1, [r7, #12]
 800ddd0:	69f8      	ldr	r0, [r7, #28]
 800ddd2:	f000 ffbd 	bl	800ed50 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d006      	beq.n	800ddea <osMutexNew+0x102>
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d003      	beq.n	800ddea <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	f043 0301 	orr.w	r3, r3, #1
 800dde8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ddea:	69fb      	ldr	r3, [r7, #28]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3720      	adds	r7, #32
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b08a      	sub	sp, #40	; 0x28
 800ddf8:	af02      	add	r7, sp, #8
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800de00:	2300      	movs	r3, #0
 800de02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de04:	f3ef 8305 	mrs	r3, IPSR
 800de08:	613b      	str	r3, [r7, #16]
  return(result);
 800de0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d15f      	bne.n	800ded0 <osMessageQueueNew+0xdc>
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d05c      	beq.n	800ded0 <osMessageQueueNew+0xdc>
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d059      	beq.n	800ded0 <osMessageQueueNew+0xdc>
    mem = -1;
 800de1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d029      	beq.n	800de7c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	689b      	ldr	r3, [r3, #8]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d012      	beq.n	800de56 <osMessageQueueNew+0x62>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	2b4f      	cmp	r3, #79	; 0x4f
 800de36:	d90e      	bls.n	800de56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00a      	beq.n	800de56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	695a      	ldr	r2, [r3, #20]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	68b9      	ldr	r1, [r7, #8]
 800de48:	fb01 f303 	mul.w	r3, r1, r3
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d302      	bcc.n	800de56 <osMessageQueueNew+0x62>
        mem = 1;
 800de50:	2301      	movs	r3, #1
 800de52:	61bb      	str	r3, [r7, #24]
 800de54:	e014      	b.n	800de80 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d110      	bne.n	800de80 <osMessageQueueNew+0x8c>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d10c      	bne.n	800de80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d108      	bne.n	800de80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	695b      	ldr	r3, [r3, #20]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d104      	bne.n	800de80 <osMessageQueueNew+0x8c>
          mem = 0;
 800de76:	2300      	movs	r3, #0
 800de78:	61bb      	str	r3, [r7, #24]
 800de7a:	e001      	b.n	800de80 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800de7c:	2300      	movs	r3, #0
 800de7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800de80:	69bb      	ldr	r3, [r7, #24]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d10b      	bne.n	800de9e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	691a      	ldr	r2, [r3, #16]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	689b      	ldr	r3, [r3, #8]
 800de8e:	2100      	movs	r1, #0
 800de90:	9100      	str	r1, [sp, #0]
 800de92:	68b9      	ldr	r1, [r7, #8]
 800de94:	68f8      	ldr	r0, [r7, #12]
 800de96:	f000 fa2f 	bl	800e2f8 <xQueueGenericCreateStatic>
 800de9a:	61f8      	str	r0, [r7, #28]
 800de9c:	e008      	b.n	800deb0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d105      	bne.n	800deb0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dea4:	2200      	movs	r2, #0
 800dea6:	68b9      	ldr	r1, [r7, #8]
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f000 fa9d 	bl	800e3e8 <xQueueGenericCreate>
 800deae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00c      	beq.n	800ded0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d003      	beq.n	800dec4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	617b      	str	r3, [r7, #20]
 800dec2:	e001      	b.n	800dec8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dec4:	2300      	movs	r3, #0
 800dec6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dec8:	6979      	ldr	r1, [r7, #20]
 800deca:	69f8      	ldr	r0, [r7, #28]
 800decc:	f000 ff40 	bl	800ed50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ded0:	69fb      	ldr	r3, [r7, #28]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3720      	adds	r7, #32
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
	...

0800dedc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dedc:	b580      	push	{r7, lr}
 800dede:	b088      	sub	sp, #32
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	603b      	str	r3, [r7, #0]
 800dee8:	4613      	mov	r3, r2
 800deea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800def0:	2300      	movs	r3, #0
 800def2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800def4:	f3ef 8305 	mrs	r3, IPSR
 800def8:	617b      	str	r3, [r7, #20]
  return(result);
 800defa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800defc:	2b00      	cmp	r3, #0
 800defe:	d028      	beq.n	800df52 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d005      	beq.n	800df12 <osMessageQueuePut+0x36>
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d002      	beq.n	800df12 <osMessageQueuePut+0x36>
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d003      	beq.n	800df1a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800df12:	f06f 0303 	mvn.w	r3, #3
 800df16:	61fb      	str	r3, [r7, #28]
 800df18:	e038      	b.n	800df8c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800df1a:	2300      	movs	r3, #0
 800df1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800df1e:	f107 0210 	add.w	r2, r7, #16
 800df22:	2300      	movs	r3, #0
 800df24:	68b9      	ldr	r1, [r7, #8]
 800df26:	69b8      	ldr	r0, [r7, #24]
 800df28:	f000 fc06 	bl	800e738 <xQueueGenericSendFromISR>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d003      	beq.n	800df3a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800df32:	f06f 0302 	mvn.w	r3, #2
 800df36:	61fb      	str	r3, [r7, #28]
 800df38:	e028      	b.n	800df8c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d025      	beq.n	800df8c <osMessageQueuePut+0xb0>
 800df40:	4b15      	ldr	r3, [pc, #84]	; (800df98 <osMessageQueuePut+0xbc>)
 800df42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df46:	601a      	str	r2, [r3, #0]
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	f3bf 8f6f 	isb	sy
 800df50:	e01c      	b.n	800df8c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d002      	beq.n	800df5e <osMessageQueuePut+0x82>
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d103      	bne.n	800df66 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800df5e:	f06f 0303 	mvn.w	r3, #3
 800df62:	61fb      	str	r3, [r7, #28]
 800df64:	e012      	b.n	800df8c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800df66:	2300      	movs	r3, #0
 800df68:	683a      	ldr	r2, [r7, #0]
 800df6a:	68b9      	ldr	r1, [r7, #8]
 800df6c:	69b8      	ldr	r0, [r7, #24]
 800df6e:	f000 fae5 	bl	800e53c <xQueueGenericSend>
 800df72:	4603      	mov	r3, r0
 800df74:	2b01      	cmp	r3, #1
 800df76:	d009      	beq.n	800df8c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d003      	beq.n	800df86 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800df7e:	f06f 0301 	mvn.w	r3, #1
 800df82:	61fb      	str	r3, [r7, #28]
 800df84:	e002      	b.n	800df8c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800df86:	f06f 0302 	mvn.w	r3, #2
 800df8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800df8c:	69fb      	ldr	r3, [r7, #28]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3720      	adds	r7, #32
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	e000ed04 	.word	0xe000ed04

0800df9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b088      	sub	sp, #32
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	607a      	str	r2, [r7, #4]
 800dfa8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfb2:	f3ef 8305 	mrs	r3, IPSR
 800dfb6:	617b      	str	r3, [r7, #20]
  return(result);
 800dfb8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d028      	beq.n	800e010 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dfbe:	69bb      	ldr	r3, [r7, #24]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d005      	beq.n	800dfd0 <osMessageQueueGet+0x34>
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d002      	beq.n	800dfd0 <osMessageQueueGet+0x34>
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d003      	beq.n	800dfd8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800dfd0:	f06f 0303 	mvn.w	r3, #3
 800dfd4:	61fb      	str	r3, [r7, #28]
 800dfd6:	e037      	b.n	800e048 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dfdc:	f107 0310 	add.w	r3, r7, #16
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	68b9      	ldr	r1, [r7, #8]
 800dfe4:	69b8      	ldr	r0, [r7, #24]
 800dfe6:	f000 fd23 	bl	800ea30 <xQueueReceiveFromISR>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d003      	beq.n	800dff8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800dff0:	f06f 0302 	mvn.w	r3, #2
 800dff4:	61fb      	str	r3, [r7, #28]
 800dff6:	e027      	b.n	800e048 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d024      	beq.n	800e048 <osMessageQueueGet+0xac>
 800dffe:	4b15      	ldr	r3, [pc, #84]	; (800e054 <osMessageQueueGet+0xb8>)
 800e000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e004:	601a      	str	r2, [r3, #0]
 800e006:	f3bf 8f4f 	dsb	sy
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	e01b      	b.n	800e048 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d002      	beq.n	800e01c <osMessageQueueGet+0x80>
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d103      	bne.n	800e024 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e01c:	f06f 0303 	mvn.w	r3, #3
 800e020:	61fb      	str	r3, [r7, #28]
 800e022:	e011      	b.n	800e048 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e024:	683a      	ldr	r2, [r7, #0]
 800e026:	68b9      	ldr	r1, [r7, #8]
 800e028:	69b8      	ldr	r0, [r7, #24]
 800e02a:	f000 fc21 	bl	800e870 <xQueueReceive>
 800e02e:	4603      	mov	r3, r0
 800e030:	2b01      	cmp	r3, #1
 800e032:	d009      	beq.n	800e048 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d003      	beq.n	800e042 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e03a:	f06f 0301 	mvn.w	r3, #1
 800e03e:	61fb      	str	r3, [r7, #28]
 800e040:	e002      	b.n	800e048 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e042:	f06f 0302 	mvn.w	r3, #2
 800e046:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e048:	69fb      	ldr	r3, [r7, #28]
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3720      	adds	r7, #32
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	e000ed04 	.word	0xe000ed04

0800e058 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	4a07      	ldr	r2, [pc, #28]	; (800e084 <vApplicationGetIdleTaskMemory+0x2c>)
 800e068:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	4a06      	ldr	r2, [pc, #24]	; (800e088 <vApplicationGetIdleTaskMemory+0x30>)
 800e06e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2280      	movs	r2, #128	; 0x80
 800e074:	601a      	str	r2, [r3, #0]
}
 800e076:	bf00      	nop
 800e078:	3714      	adds	r7, #20
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	200004dc 	.word	0x200004dc
 800e088:	20000538 	.word	0x20000538

0800e08c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e08c:	b480      	push	{r7}
 800e08e:	b085      	sub	sp, #20
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	4a07      	ldr	r2, [pc, #28]	; (800e0b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800e09c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	4a06      	ldr	r2, [pc, #24]	; (800e0bc <vApplicationGetTimerTaskMemory+0x30>)
 800e0a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e0aa:	601a      	str	r2, [r3, #0]
}
 800e0ac:	bf00      	nop
 800e0ae:	3714      	adds	r7, #20
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr
 800e0b8:	20000738 	.word	0x20000738
 800e0bc:	20000794 	.word	0x20000794

0800e0c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f103 0208 	add.w	r2, r3, #8
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f103 0208 	add.w	r2, r3, #8
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f103 0208 	add.w	r2, r3, #8
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e0f4:	bf00      	nop
 800e0f6:	370c      	adds	r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e10e:	bf00      	nop
 800e110:	370c      	adds	r7, #12
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr

0800e11a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e11a:	b480      	push	{r7}
 800e11c:	b085      	sub	sp, #20
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
 800e122:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	689a      	ldr	r2, [r3, #8]
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	689b      	ldr	r3, [r3, #8]
 800e13c:	683a      	ldr	r2, [r7, #0]
 800e13e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	1c5a      	adds	r2, r3, #1
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	601a      	str	r2, [r3, #0]
}
 800e156:	bf00      	nop
 800e158:	3714      	adds	r7, #20
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr

0800e162 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e162:	b480      	push	{r7}
 800e164:	b085      	sub	sp, #20
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e178:	d103      	bne.n	800e182 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	691b      	ldr	r3, [r3, #16]
 800e17e:	60fb      	str	r3, [r7, #12]
 800e180:	e00c      	b.n	800e19c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	3308      	adds	r3, #8
 800e186:	60fb      	str	r3, [r7, #12]
 800e188:	e002      	b.n	800e190 <vListInsert+0x2e>
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	60fb      	str	r3, [r7, #12]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	68ba      	ldr	r2, [r7, #8]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d2f6      	bcs.n	800e18a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	685a      	ldr	r2, [r3, #4]
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	683a      	ldr	r2, [r7, #0]
 800e1aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	683a      	ldr	r2, [r7, #0]
 800e1b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	1c5a      	adds	r2, r3, #1
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	601a      	str	r2, [r3, #0]
}
 800e1c8:	bf00      	nop
 800e1ca:	3714      	adds	r7, #20
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	691b      	ldr	r3, [r3, #16]
 800e1e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	6892      	ldr	r2, [r2, #8]
 800e1ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	6852      	ldr	r2, [r2, #4]
 800e1f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d103      	bne.n	800e208 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	689a      	ldr	r2, [r3, #8]
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	1e5a      	subs	r2, r3, #1
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3714      	adds	r7, #20
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d10a      	bne.n	800e252 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e240:	f383 8811 	msr	BASEPRI, r3
 800e244:	f3bf 8f6f 	isb	sy
 800e248:	f3bf 8f4f 	dsb	sy
 800e24c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e24e:	bf00      	nop
 800e250:	e7fe      	b.n	800e250 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e252:	f002 fbff 	bl	8010a54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e25e:	68f9      	ldr	r1, [r7, #12]
 800e260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e262:	fb01 f303 	mul.w	r3, r1, r3
 800e266:	441a      	add	r2, r3
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2200      	movs	r2, #0
 800e270:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e282:	3b01      	subs	r3, #1
 800e284:	68f9      	ldr	r1, [r7, #12]
 800e286:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e288:	fb01 f303 	mul.w	r3, r1, r3
 800e28c:	441a      	add	r2, r3
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	22ff      	movs	r2, #255	; 0xff
 800e296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	22ff      	movs	r2, #255	; 0xff
 800e29e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d114      	bne.n	800e2d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	691b      	ldr	r3, [r3, #16]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d01a      	beq.n	800e2e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	3310      	adds	r3, #16
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f001 fa09 	bl	800f6cc <xTaskRemoveFromEventList>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d012      	beq.n	800e2e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e2c0:	4b0c      	ldr	r3, [pc, #48]	; (800e2f4 <xQueueGenericReset+0xcc>)
 800e2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2c6:	601a      	str	r2, [r3, #0]
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	f3bf 8f6f 	isb	sy
 800e2d0:	e009      	b.n	800e2e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	3310      	adds	r3, #16
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7ff fef2 	bl	800e0c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	3324      	adds	r3, #36	; 0x24
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7ff feed 	bl	800e0c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e2e6:	f002 fbe5 	bl	8010ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e2ea:	2301      	movs	r3, #1
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3710      	adds	r7, #16
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	e000ed04 	.word	0xe000ed04

0800e2f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b08e      	sub	sp, #56	; 0x38
 800e2fc:	af02      	add	r7, sp, #8
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	60b9      	str	r1, [r7, #8]
 800e302:	607a      	str	r2, [r7, #4]
 800e304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d10a      	bne.n	800e322 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e310:	f383 8811 	msr	BASEPRI, r3
 800e314:	f3bf 8f6f 	isb	sy
 800e318:	f3bf 8f4f 	dsb	sy
 800e31c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e31e:	bf00      	nop
 800e320:	e7fe      	b.n	800e320 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10a      	bne.n	800e33e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32c:	f383 8811 	msr	BASEPRI, r3
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e33a:	bf00      	nop
 800e33c:	e7fe      	b.n	800e33c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d002      	beq.n	800e34a <xQueueGenericCreateStatic+0x52>
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <xQueueGenericCreateStatic+0x56>
 800e34a:	2301      	movs	r3, #1
 800e34c:	e000      	b.n	800e350 <xQueueGenericCreateStatic+0x58>
 800e34e:	2300      	movs	r3, #0
 800e350:	2b00      	cmp	r3, #0
 800e352:	d10a      	bne.n	800e36a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e358:	f383 8811 	msr	BASEPRI, r3
 800e35c:	f3bf 8f6f 	isb	sy
 800e360:	f3bf 8f4f 	dsb	sy
 800e364:	623b      	str	r3, [r7, #32]
}
 800e366:	bf00      	nop
 800e368:	e7fe      	b.n	800e368 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d102      	bne.n	800e376 <xQueueGenericCreateStatic+0x7e>
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d101      	bne.n	800e37a <xQueueGenericCreateStatic+0x82>
 800e376:	2301      	movs	r3, #1
 800e378:	e000      	b.n	800e37c <xQueueGenericCreateStatic+0x84>
 800e37a:	2300      	movs	r3, #0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d10a      	bne.n	800e396 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	61fb      	str	r3, [r7, #28]
}
 800e392:	bf00      	nop
 800e394:	e7fe      	b.n	800e394 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e396:	2350      	movs	r3, #80	; 0x50
 800e398:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	2b50      	cmp	r3, #80	; 0x50
 800e39e:	d00a      	beq.n	800e3b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	61bb      	str	r3, [r7, #24]
}
 800e3b2:	bf00      	nop
 800e3b4:	e7fe      	b.n	800e3b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e3b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d00d      	beq.n	800e3de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e3ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d0:	9300      	str	r3, [sp, #0]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	68b9      	ldr	r1, [r7, #8]
 800e3d8:	68f8      	ldr	r0, [r7, #12]
 800e3da:	f000 f83f 	bl	800e45c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3730      	adds	r7, #48	; 0x30
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b08a      	sub	sp, #40	; 0x28
 800e3ec:	af02      	add	r7, sp, #8
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d10a      	bne.n	800e412 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e400:	f383 8811 	msr	BASEPRI, r3
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	f3bf 8f4f 	dsb	sy
 800e40c:	613b      	str	r3, [r7, #16]
}
 800e40e:	bf00      	nop
 800e410:	e7fe      	b.n	800e410 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	fb02 f303 	mul.w	r3, r2, r3
 800e41a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	3350      	adds	r3, #80	; 0x50
 800e420:	4618      	mov	r0, r3
 800e422:	f002 fc39 	bl	8010c98 <pvPortMalloc>
 800e426:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d011      	beq.n	800e452 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e42e:	69bb      	ldr	r3, [r7, #24]
 800e430:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	3350      	adds	r3, #80	; 0x50
 800e436:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e438:	69bb      	ldr	r3, [r7, #24]
 800e43a:	2200      	movs	r2, #0
 800e43c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e440:	79fa      	ldrb	r2, [r7, #7]
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	9300      	str	r3, [sp, #0]
 800e446:	4613      	mov	r3, r2
 800e448:	697a      	ldr	r2, [r7, #20]
 800e44a:	68b9      	ldr	r1, [r7, #8]
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f000 f805 	bl	800e45c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e452:	69bb      	ldr	r3, [r7, #24]
	}
 800e454:	4618      	mov	r0, r3
 800e456:	3720      	adds	r7, #32
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	607a      	str	r2, [r7, #4]
 800e468:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d103      	bne.n	800e478 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	69ba      	ldr	r2, [r7, #24]
 800e474:	601a      	str	r2, [r3, #0]
 800e476:	e002      	b.n	800e47e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e478:	69bb      	ldr	r3, [r7, #24]
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	68ba      	ldr	r2, [r7, #8]
 800e488:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e48a:	2101      	movs	r1, #1
 800e48c:	69b8      	ldr	r0, [r7, #24]
 800e48e:	f7ff fecb 	bl	800e228 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	78fa      	ldrb	r2, [r7, #3]
 800e496:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e49a:	bf00      	nop
 800e49c:	3710      	adds	r7, #16
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}

0800e4a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b082      	sub	sp, #8
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00e      	beq.n	800e4ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 f837 	bl	800e53c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e4ce:	bf00      	nop
 800e4d0:	3708      	adds	r7, #8
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}

0800e4d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b086      	sub	sp, #24
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	4603      	mov	r3, r0
 800e4de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	617b      	str	r3, [r7, #20]
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e4e8:	79fb      	ldrb	r3, [r7, #7]
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	6939      	ldr	r1, [r7, #16]
 800e4ee:	6978      	ldr	r0, [r7, #20]
 800e4f0:	f7ff ff7a 	bl	800e3e8 <xQueueGenericCreate>
 800e4f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e4f6:	68f8      	ldr	r0, [r7, #12]
 800e4f8:	f7ff ffd3 	bl	800e4a2 <prvInitialiseMutex>

		return xNewQueue;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
	}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3718      	adds	r7, #24
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e506:	b580      	push	{r7, lr}
 800e508:	b088      	sub	sp, #32
 800e50a:	af02      	add	r7, sp, #8
 800e50c:	4603      	mov	r3, r0
 800e50e:	6039      	str	r1, [r7, #0]
 800e510:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e512:	2301      	movs	r3, #1
 800e514:	617b      	str	r3, [r7, #20]
 800e516:	2300      	movs	r3, #0
 800e518:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e51a:	79fb      	ldrb	r3, [r7, #7]
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	2200      	movs	r2, #0
 800e522:	6939      	ldr	r1, [r7, #16]
 800e524:	6978      	ldr	r0, [r7, #20]
 800e526:	f7ff fee7 	bl	800e2f8 <xQueueGenericCreateStatic>
 800e52a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f7ff ffb8 	bl	800e4a2 <prvInitialiseMutex>

		return xNewQueue;
 800e532:	68fb      	ldr	r3, [r7, #12]
	}
 800e534:	4618      	mov	r0, r3
 800e536:	3718      	adds	r7, #24
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b08e      	sub	sp, #56	; 0x38
 800e540:	af00      	add	r7, sp, #0
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	60b9      	str	r1, [r7, #8]
 800e546:	607a      	str	r2, [r7, #4]
 800e548:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e54a:	2300      	movs	r3, #0
 800e54c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e554:	2b00      	cmp	r3, #0
 800e556:	d10a      	bne.n	800e56e <xQueueGenericSend+0x32>
	__asm volatile
 800e558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55c:	f383 8811 	msr	BASEPRI, r3
 800e560:	f3bf 8f6f 	isb	sy
 800e564:	f3bf 8f4f 	dsb	sy
 800e568:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e56a:	bf00      	nop
 800e56c:	e7fe      	b.n	800e56c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d103      	bne.n	800e57c <xQueueGenericSend+0x40>
 800e574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d101      	bne.n	800e580 <xQueueGenericSend+0x44>
 800e57c:	2301      	movs	r3, #1
 800e57e:	e000      	b.n	800e582 <xQueueGenericSend+0x46>
 800e580:	2300      	movs	r3, #0
 800e582:	2b00      	cmp	r3, #0
 800e584:	d10a      	bne.n	800e59c <xQueueGenericSend+0x60>
	__asm volatile
 800e586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e58a:	f383 8811 	msr	BASEPRI, r3
 800e58e:	f3bf 8f6f 	isb	sy
 800e592:	f3bf 8f4f 	dsb	sy
 800e596:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e598:	bf00      	nop
 800e59a:	e7fe      	b.n	800e59a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	2b02      	cmp	r3, #2
 800e5a0:	d103      	bne.n	800e5aa <xQueueGenericSend+0x6e>
 800e5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d101      	bne.n	800e5ae <xQueueGenericSend+0x72>
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e000      	b.n	800e5b0 <xQueueGenericSend+0x74>
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d10a      	bne.n	800e5ca <xQueueGenericSend+0x8e>
	__asm volatile
 800e5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b8:	f383 8811 	msr	BASEPRI, r3
 800e5bc:	f3bf 8f6f 	isb	sy
 800e5c0:	f3bf 8f4f 	dsb	sy
 800e5c4:	623b      	str	r3, [r7, #32]
}
 800e5c6:	bf00      	nop
 800e5c8:	e7fe      	b.n	800e5c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5ca:	f001 fa3d 	bl	800fa48 <xTaskGetSchedulerState>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d102      	bne.n	800e5da <xQueueGenericSend+0x9e>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d101      	bne.n	800e5de <xQueueGenericSend+0xa2>
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e000      	b.n	800e5e0 <xQueueGenericSend+0xa4>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d10a      	bne.n	800e5fa <xQueueGenericSend+0xbe>
	__asm volatile
 800e5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e8:	f383 8811 	msr	BASEPRI, r3
 800e5ec:	f3bf 8f6f 	isb	sy
 800e5f0:	f3bf 8f4f 	dsb	sy
 800e5f4:	61fb      	str	r3, [r7, #28]
}
 800e5f6:	bf00      	nop
 800e5f8:	e7fe      	b.n	800e5f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5fa:	f002 fa2b 	bl	8010a54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e606:	429a      	cmp	r2, r3
 800e608:	d302      	bcc.n	800e610 <xQueueGenericSend+0xd4>
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	2b02      	cmp	r3, #2
 800e60e:	d129      	bne.n	800e664 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e610:	683a      	ldr	r2, [r7, #0]
 800e612:	68b9      	ldr	r1, [r7, #8]
 800e614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e616:	f000 fa8b 	bl	800eb30 <prvCopyDataToQueue>
 800e61a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e620:	2b00      	cmp	r3, #0
 800e622:	d010      	beq.n	800e646 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e626:	3324      	adds	r3, #36	; 0x24
 800e628:	4618      	mov	r0, r3
 800e62a:	f001 f84f 	bl	800f6cc <xTaskRemoveFromEventList>
 800e62e:	4603      	mov	r3, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	d013      	beq.n	800e65c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e634:	4b3f      	ldr	r3, [pc, #252]	; (800e734 <xQueueGenericSend+0x1f8>)
 800e636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e63a:	601a      	str	r2, [r3, #0]
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	f3bf 8f6f 	isb	sy
 800e644:	e00a      	b.n	800e65c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d007      	beq.n	800e65c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e64c:	4b39      	ldr	r3, [pc, #228]	; (800e734 <xQueueGenericSend+0x1f8>)
 800e64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e652:	601a      	str	r2, [r3, #0]
 800e654:	f3bf 8f4f 	dsb	sy
 800e658:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e65c:	f002 fa2a 	bl	8010ab4 <vPortExitCritical>
				return pdPASS;
 800e660:	2301      	movs	r3, #1
 800e662:	e063      	b.n	800e72c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d103      	bne.n	800e672 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e66a:	f002 fa23 	bl	8010ab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e66e:	2300      	movs	r3, #0
 800e670:	e05c      	b.n	800e72c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e674:	2b00      	cmp	r3, #0
 800e676:	d106      	bne.n	800e686 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e678:	f107 0314 	add.w	r3, r7, #20
 800e67c:	4618      	mov	r0, r3
 800e67e:	f001 f889 	bl	800f794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e682:	2301      	movs	r3, #1
 800e684:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e686:	f002 fa15 	bl	8010ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e68a:	f000 fdfb 	bl	800f284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e68e:	f002 f9e1 	bl	8010a54 <vPortEnterCritical>
 800e692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e698:	b25b      	sxtb	r3, r3
 800e69a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e69e:	d103      	bne.n	800e6a8 <xQueueGenericSend+0x16c>
 800e6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6ae:	b25b      	sxtb	r3, r3
 800e6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6b4:	d103      	bne.n	800e6be <xQueueGenericSend+0x182>
 800e6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6be:	f002 f9f9 	bl	8010ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6c2:	1d3a      	adds	r2, r7, #4
 800e6c4:	f107 0314 	add.w	r3, r7, #20
 800e6c8:	4611      	mov	r1, r2
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f001 f878 	bl	800f7c0 <xTaskCheckForTimeOut>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d124      	bne.n	800e720 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e6d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6d8:	f000 fb22 	bl	800ed20 <prvIsQueueFull>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d018      	beq.n	800e714 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e4:	3310      	adds	r3, #16
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	4611      	mov	r1, r2
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f000 ff9e 	bl	800f62c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e6f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6f2:	f000 faad 	bl	800ec50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e6f6:	f000 fdd3 	bl	800f2a0 <xTaskResumeAll>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	f47f af7c 	bne.w	800e5fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e702:	4b0c      	ldr	r3, [pc, #48]	; (800e734 <xQueueGenericSend+0x1f8>)
 800e704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e708:	601a      	str	r2, [r3, #0]
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	f3bf 8f6f 	isb	sy
 800e712:	e772      	b.n	800e5fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e716:	f000 fa9b 	bl	800ec50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e71a:	f000 fdc1 	bl	800f2a0 <xTaskResumeAll>
 800e71e:	e76c      	b.n	800e5fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e722:	f000 fa95 	bl	800ec50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e726:	f000 fdbb 	bl	800f2a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e72a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3738      	adds	r7, #56	; 0x38
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	e000ed04 	.word	0xe000ed04

0800e738 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b090      	sub	sp, #64	; 0x40
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	60b9      	str	r1, [r7, #8]
 800e742:	607a      	str	r2, [r7, #4]
 800e744:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d10a      	bne.n	800e766 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e754:	f383 8811 	msr	BASEPRI, r3
 800e758:	f3bf 8f6f 	isb	sy
 800e75c:	f3bf 8f4f 	dsb	sy
 800e760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e762:	bf00      	nop
 800e764:	e7fe      	b.n	800e764 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d103      	bne.n	800e774 <xQueueGenericSendFromISR+0x3c>
 800e76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e770:	2b00      	cmp	r3, #0
 800e772:	d101      	bne.n	800e778 <xQueueGenericSendFromISR+0x40>
 800e774:	2301      	movs	r3, #1
 800e776:	e000      	b.n	800e77a <xQueueGenericSendFromISR+0x42>
 800e778:	2300      	movs	r3, #0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d10a      	bne.n	800e794 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e790:	bf00      	nop
 800e792:	e7fe      	b.n	800e792 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	2b02      	cmp	r3, #2
 800e798:	d103      	bne.n	800e7a2 <xQueueGenericSendFromISR+0x6a>
 800e79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	d101      	bne.n	800e7a6 <xQueueGenericSendFromISR+0x6e>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e000      	b.n	800e7a8 <xQueueGenericSendFromISR+0x70>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d10a      	bne.n	800e7c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	623b      	str	r3, [r7, #32]
}
 800e7be:	bf00      	nop
 800e7c0:	e7fe      	b.n	800e7c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7c2:	f002 fa29 	bl	8010c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e7c6:	f3ef 8211 	mrs	r2, BASEPRI
 800e7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ce:	f383 8811 	msr	BASEPRI, r3
 800e7d2:	f3bf 8f6f 	isb	sy
 800e7d6:	f3bf 8f4f 	dsb	sy
 800e7da:	61fa      	str	r2, [r7, #28]
 800e7dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e7de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d302      	bcc.n	800e7f4 <xQueueGenericSendFromISR+0xbc>
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	2b02      	cmp	r3, #2
 800e7f2:	d12f      	bne.n	800e854 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e802:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e804:	683a      	ldr	r2, [r7, #0]
 800e806:	68b9      	ldr	r1, [r7, #8]
 800e808:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e80a:	f000 f991 	bl	800eb30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e80e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e816:	d112      	bne.n	800e83e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d016      	beq.n	800e84e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e822:	3324      	adds	r3, #36	; 0x24
 800e824:	4618      	mov	r0, r3
 800e826:	f000 ff51 	bl	800f6cc <xTaskRemoveFromEventList>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d00e      	beq.n	800e84e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00b      	beq.n	800e84e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2201      	movs	r2, #1
 800e83a:	601a      	str	r2, [r3, #0]
 800e83c:	e007      	b.n	800e84e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e83e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e842:	3301      	adds	r3, #1
 800e844:	b2db      	uxtb	r3, r3
 800e846:	b25a      	sxtb	r2, r3
 800e848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e84e:	2301      	movs	r3, #1
 800e850:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e852:	e001      	b.n	800e858 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e854:	2300      	movs	r3, #0
 800e856:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e85a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e862:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e866:	4618      	mov	r0, r3
 800e868:	3740      	adds	r7, #64	; 0x40
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
	...

0800e870 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b08c      	sub	sp, #48	; 0x30
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e87c:	2300      	movs	r3, #0
 800e87e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e886:	2b00      	cmp	r3, #0
 800e888:	d10a      	bne.n	800e8a0 <xQueueReceive+0x30>
	__asm volatile
 800e88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88e:	f383 8811 	msr	BASEPRI, r3
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	623b      	str	r3, [r7, #32]
}
 800e89c:	bf00      	nop
 800e89e:	e7fe      	b.n	800e89e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d103      	bne.n	800e8ae <xQueueReceive+0x3e>
 800e8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d101      	bne.n	800e8b2 <xQueueReceive+0x42>
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	e000      	b.n	800e8b4 <xQueueReceive+0x44>
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d10a      	bne.n	800e8ce <xQueueReceive+0x5e>
	__asm volatile
 800e8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8bc:	f383 8811 	msr	BASEPRI, r3
 800e8c0:	f3bf 8f6f 	isb	sy
 800e8c4:	f3bf 8f4f 	dsb	sy
 800e8c8:	61fb      	str	r3, [r7, #28]
}
 800e8ca:	bf00      	nop
 800e8cc:	e7fe      	b.n	800e8cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8ce:	f001 f8bb 	bl	800fa48 <xTaskGetSchedulerState>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d102      	bne.n	800e8de <xQueueReceive+0x6e>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d101      	bne.n	800e8e2 <xQueueReceive+0x72>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e000      	b.n	800e8e4 <xQueueReceive+0x74>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d10a      	bne.n	800e8fe <xQueueReceive+0x8e>
	__asm volatile
 800e8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ec:	f383 8811 	msr	BASEPRI, r3
 800e8f0:	f3bf 8f6f 	isb	sy
 800e8f4:	f3bf 8f4f 	dsb	sy
 800e8f8:	61bb      	str	r3, [r7, #24]
}
 800e8fa:	bf00      	nop
 800e8fc:	e7fe      	b.n	800e8fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e8fe:	f002 f8a9 	bl	8010a54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e906:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d01f      	beq.n	800e94e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e90e:	68b9      	ldr	r1, [r7, #8]
 800e910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e912:	f000 f977 	bl	800ec04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e918:	1e5a      	subs	r2, r3, #1
 800e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e920:	691b      	ldr	r3, [r3, #16]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00f      	beq.n	800e946 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e928:	3310      	adds	r3, #16
 800e92a:	4618      	mov	r0, r3
 800e92c:	f000 fece 	bl	800f6cc <xTaskRemoveFromEventList>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d007      	beq.n	800e946 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e936:	4b3d      	ldr	r3, [pc, #244]	; (800ea2c <xQueueReceive+0x1bc>)
 800e938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e93c:	601a      	str	r2, [r3, #0]
 800e93e:	f3bf 8f4f 	dsb	sy
 800e942:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e946:	f002 f8b5 	bl	8010ab4 <vPortExitCritical>
				return pdPASS;
 800e94a:	2301      	movs	r3, #1
 800e94c:	e069      	b.n	800ea22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d103      	bne.n	800e95c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e954:	f002 f8ae 	bl	8010ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e958:	2300      	movs	r3, #0
 800e95a:	e062      	b.n	800ea22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d106      	bne.n	800e970 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e962:	f107 0310 	add.w	r3, r7, #16
 800e966:	4618      	mov	r0, r3
 800e968:	f000 ff14 	bl	800f794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e96c:	2301      	movs	r3, #1
 800e96e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e970:	f002 f8a0 	bl	8010ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e974:	f000 fc86 	bl	800f284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e978:	f002 f86c 	bl	8010a54 <vPortEnterCritical>
 800e97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e982:	b25b      	sxtb	r3, r3
 800e984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e988:	d103      	bne.n	800e992 <xQueueReceive+0x122>
 800e98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98c:	2200      	movs	r2, #0
 800e98e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e998:	b25b      	sxtb	r3, r3
 800e99a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e99e:	d103      	bne.n	800e9a8 <xQueueReceive+0x138>
 800e9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9a8:	f002 f884 	bl	8010ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9ac:	1d3a      	adds	r2, r7, #4
 800e9ae:	f107 0310 	add.w	r3, r7, #16
 800e9b2:	4611      	mov	r1, r2
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f000 ff03 	bl	800f7c0 <xTaskCheckForTimeOut>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d123      	bne.n	800ea08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9c2:	f000 f997 	bl	800ecf4 <prvIsQueueEmpty>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d017      	beq.n	800e9fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ce:	3324      	adds	r3, #36	; 0x24
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	4611      	mov	r1, r2
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f000 fe29 	bl	800f62c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e9da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9dc:	f000 f938 	bl	800ec50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9e0:	f000 fc5e 	bl	800f2a0 <xTaskResumeAll>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d189      	bne.n	800e8fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e9ea:	4b10      	ldr	r3, [pc, #64]	; (800ea2c <xQueueReceive+0x1bc>)
 800e9ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9f0:	601a      	str	r2, [r3, #0]
 800e9f2:	f3bf 8f4f 	dsb	sy
 800e9f6:	f3bf 8f6f 	isb	sy
 800e9fa:	e780      	b.n	800e8fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e9fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9fe:	f000 f927 	bl	800ec50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea02:	f000 fc4d 	bl	800f2a0 <xTaskResumeAll>
 800ea06:	e77a      	b.n	800e8fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ea08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea0a:	f000 f921 	bl	800ec50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea0e:	f000 fc47 	bl	800f2a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea14:	f000 f96e 	bl	800ecf4 <prvIsQueueEmpty>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	f43f af6f 	beq.w	800e8fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3730      	adds	r7, #48	; 0x30
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	e000ed04 	.word	0xe000ed04

0800ea30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b08e      	sub	sp, #56	; 0x38
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ea40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d10a      	bne.n	800ea5c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ea46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4a:	f383 8811 	msr	BASEPRI, r3
 800ea4e:	f3bf 8f6f 	isb	sy
 800ea52:	f3bf 8f4f 	dsb	sy
 800ea56:	623b      	str	r3, [r7, #32]
}
 800ea58:	bf00      	nop
 800ea5a:	e7fe      	b.n	800ea5a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d103      	bne.n	800ea6a <xQueueReceiveFromISR+0x3a>
 800ea62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d101      	bne.n	800ea6e <xQueueReceiveFromISR+0x3e>
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	e000      	b.n	800ea70 <xQueueReceiveFromISR+0x40>
 800ea6e:	2300      	movs	r3, #0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d10a      	bne.n	800ea8a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ea74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea78:	f383 8811 	msr	BASEPRI, r3
 800ea7c:	f3bf 8f6f 	isb	sy
 800ea80:	f3bf 8f4f 	dsb	sy
 800ea84:	61fb      	str	r3, [r7, #28]
}
 800ea86:	bf00      	nop
 800ea88:	e7fe      	b.n	800ea88 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea8a:	f002 f8c5 	bl	8010c18 <vPortValidateInterruptPriority>
	__asm volatile
 800ea8e:	f3ef 8211 	mrs	r2, BASEPRI
 800ea92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea96:	f383 8811 	msr	BASEPRI, r3
 800ea9a:	f3bf 8f6f 	isb	sy
 800ea9e:	f3bf 8f4f 	dsb	sy
 800eaa2:	61ba      	str	r2, [r7, #24]
 800eaa4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eaa6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eaa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d02f      	beq.n	800eb16 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eabc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eac0:	68b9      	ldr	r1, [r7, #8]
 800eac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eac4:	f000 f89e 	bl	800ec04 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaca:	1e5a      	subs	r2, r3, #1
 800eacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eace:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ead0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ead4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ead8:	d112      	bne.n	800eb00 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eadc:	691b      	ldr	r3, [r3, #16]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d016      	beq.n	800eb10 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae4:	3310      	adds	r3, #16
 800eae6:	4618      	mov	r0, r3
 800eae8:	f000 fdf0 	bl	800f6cc <xTaskRemoveFromEventList>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d00e      	beq.n	800eb10 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d00b      	beq.n	800eb10 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2201      	movs	r2, #1
 800eafc:	601a      	str	r2, [r3, #0]
 800eafe:	e007      	b.n	800eb10 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800eb00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb04:	3301      	adds	r3, #1
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	b25a      	sxtb	r2, r3
 800eb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800eb10:	2301      	movs	r3, #1
 800eb12:	637b      	str	r3, [r7, #52]	; 0x34
 800eb14:	e001      	b.n	800eb1a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800eb16:	2300      	movs	r3, #0
 800eb18:	637b      	str	r3, [r7, #52]	; 0x34
 800eb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	f383 8811 	msr	BASEPRI, r3
}
 800eb24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3738      	adds	r7, #56	; 0x38
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b086      	sub	sp, #24
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d10d      	bne.n	800eb6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d14d      	bne.n	800ebf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	689b      	ldr	r3, [r3, #8]
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f000 ff92 	bl	800fa84 <xTaskPriorityDisinherit>
 800eb60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2200      	movs	r2, #0
 800eb66:	609a      	str	r2, [r3, #8]
 800eb68:	e043      	b.n	800ebf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d119      	bne.n	800eba4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	6858      	ldr	r0, [r3, #4]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb78:	461a      	mov	r2, r3
 800eb7a:	68b9      	ldr	r1, [r7, #8]
 800eb7c:	f003 fc10 	bl	80123a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	685a      	ldr	r2, [r3, #4]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb88:	441a      	add	r2, r3
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	685a      	ldr	r2, [r3, #4]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	689b      	ldr	r3, [r3, #8]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d32b      	bcc.n	800ebf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	605a      	str	r2, [r3, #4]
 800eba2:	e026      	b.n	800ebf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	68d8      	ldr	r0, [r3, #12]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebac:	461a      	mov	r2, r3
 800ebae:	68b9      	ldr	r1, [r7, #8]
 800ebb0:	f003 fbf6 	bl	80123a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	68da      	ldr	r2, [r3, #12]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebbc:	425b      	negs	r3, r3
 800ebbe:	441a      	add	r2, r3
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	68da      	ldr	r2, [r3, #12]
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d207      	bcs.n	800ebe0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	689a      	ldr	r2, [r3, #8]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebd8:	425b      	negs	r3, r3
 800ebda:	441a      	add	r2, r3
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2b02      	cmp	r3, #2
 800ebe4:	d105      	bne.n	800ebf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d002      	beq.n	800ebf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	3b01      	subs	r3, #1
 800ebf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	1c5a      	adds	r2, r3, #1
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ebfa:	697b      	ldr	r3, [r7, #20]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3718      	adds	r7, #24
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d018      	beq.n	800ec48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	68da      	ldr	r2, [r3, #12]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec1e:	441a      	add	r2, r3
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	68da      	ldr	r2, [r3, #12]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d303      	bcc.n	800ec38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	68d9      	ldr	r1, [r3, #12]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec40:	461a      	mov	r2, r3
 800ec42:	6838      	ldr	r0, [r7, #0]
 800ec44:	f003 fbac 	bl	80123a0 <memcpy>
	}
}
 800ec48:	bf00      	nop
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ec58:	f001 fefc 	bl	8010a54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec64:	e011      	b.n	800ec8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d012      	beq.n	800ec94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	3324      	adds	r3, #36	; 0x24
 800ec72:	4618      	mov	r0, r3
 800ec74:	f000 fd2a 	bl	800f6cc <xTaskRemoveFromEventList>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d001      	beq.n	800ec82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ec7e:	f000 fe01 	bl	800f884 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ec82:	7bfb      	ldrb	r3, [r7, #15]
 800ec84:	3b01      	subs	r3, #1
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	dce9      	bgt.n	800ec66 <prvUnlockQueue+0x16>
 800ec92:	e000      	b.n	800ec96 <prvUnlockQueue+0x46>
					break;
 800ec94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	22ff      	movs	r2, #255	; 0xff
 800ec9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ec9e:	f001 ff09 	bl	8010ab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eca2:	f001 fed7 	bl	8010a54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ecac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ecae:	e011      	b.n	800ecd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	691b      	ldr	r3, [r3, #16]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d012      	beq.n	800ecde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	3310      	adds	r3, #16
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f000 fd05 	bl	800f6cc <xTaskRemoveFromEventList>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d001      	beq.n	800eccc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ecc8:	f000 fddc 	bl	800f884 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eccc:	7bbb      	ldrb	r3, [r7, #14]
 800ecce:	3b01      	subs	r3, #1
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ecd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	dce9      	bgt.n	800ecb0 <prvUnlockQueue+0x60>
 800ecdc:	e000      	b.n	800ece0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ecde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	22ff      	movs	r2, #255	; 0xff
 800ece4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ece8:	f001 fee4 	bl	8010ab4 <vPortExitCritical>
}
 800ecec:	bf00      	nop
 800ecee:	3710      	adds	r7, #16
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ecfc:	f001 feaa 	bl	8010a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d102      	bne.n	800ed0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	60fb      	str	r3, [r7, #12]
 800ed0c:	e001      	b.n	800ed12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ed12:	f001 fecf 	bl	8010ab4 <vPortExitCritical>

	return xReturn;
 800ed16:	68fb      	ldr	r3, [r7, #12]
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ed28:	f001 fe94 	bl	8010a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d102      	bne.n	800ed3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	60fb      	str	r3, [r7, #12]
 800ed3c:	e001      	b.n	800ed42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ed42:	f001 feb7 	bl	8010ab4 <vPortExitCritical>

	return xReturn;
 800ed46:	68fb      	ldr	r3, [r7, #12]
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3710      	adds	r7, #16
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ed50:	b480      	push	{r7}
 800ed52:	b085      	sub	sp, #20
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60fb      	str	r3, [r7, #12]
 800ed5e:	e014      	b.n	800ed8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ed60:	4a0f      	ldr	r2, [pc, #60]	; (800eda0 <vQueueAddToRegistry+0x50>)
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d10b      	bne.n	800ed84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ed6c:	490c      	ldr	r1, [pc, #48]	; (800eda0 <vQueueAddToRegistry+0x50>)
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	683a      	ldr	r2, [r7, #0]
 800ed72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ed76:	4a0a      	ldr	r2, [pc, #40]	; (800eda0 <vQueueAddToRegistry+0x50>)
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	00db      	lsls	r3, r3, #3
 800ed7c:	4413      	add	r3, r2
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ed82:	e006      	b.n	800ed92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	3301      	adds	r3, #1
 800ed88:	60fb      	str	r3, [r7, #12]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2b07      	cmp	r3, #7
 800ed8e:	d9e7      	bls.n	800ed60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ed90:	bf00      	nop
 800ed92:	bf00      	nop
 800ed94:	3714      	adds	r7, #20
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop
 800eda0:	20003eb0 	.word	0x20003eb0

0800eda4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b086      	sub	sp, #24
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800edb4:	f001 fe4e 	bl	8010a54 <vPortEnterCritical>
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800edbe:	b25b      	sxtb	r3, r3
 800edc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edc4:	d103      	bne.n	800edce <vQueueWaitForMessageRestricted+0x2a>
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	2200      	movs	r2, #0
 800edca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edd4:	b25b      	sxtb	r3, r3
 800edd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edda:	d103      	bne.n	800ede4 <vQueueWaitForMessageRestricted+0x40>
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	2200      	movs	r2, #0
 800ede0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ede4:	f001 fe66 	bl	8010ab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edec:	2b00      	cmp	r3, #0
 800edee:	d106      	bne.n	800edfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	3324      	adds	r3, #36	; 0x24
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	68b9      	ldr	r1, [r7, #8]
 800edf8:	4618      	mov	r0, r3
 800edfa:	f000 fc3b 	bl	800f674 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800edfe:	6978      	ldr	r0, [r7, #20]
 800ee00:	f7ff ff26 	bl	800ec50 <prvUnlockQueue>
	}
 800ee04:	bf00      	nop
 800ee06:	3718      	adds	r7, #24
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b08e      	sub	sp, #56	; 0x38
 800ee10:	af04      	add	r7, sp, #16
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	607a      	str	r2, [r7, #4]
 800ee18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ee1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d10a      	bne.n	800ee36 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ee20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	623b      	str	r3, [r7, #32]
}
 800ee32:	bf00      	nop
 800ee34:	e7fe      	b.n	800ee34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ee36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d10a      	bne.n	800ee52 <xTaskCreateStatic+0x46>
	__asm volatile
 800ee3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee40:	f383 8811 	msr	BASEPRI, r3
 800ee44:	f3bf 8f6f 	isb	sy
 800ee48:	f3bf 8f4f 	dsb	sy
 800ee4c:	61fb      	str	r3, [r7, #28]
}
 800ee4e:	bf00      	nop
 800ee50:	e7fe      	b.n	800ee50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ee52:	235c      	movs	r3, #92	; 0x5c
 800ee54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	2b5c      	cmp	r3, #92	; 0x5c
 800ee5a:	d00a      	beq.n	800ee72 <xTaskCreateStatic+0x66>
	__asm volatile
 800ee5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee60:	f383 8811 	msr	BASEPRI, r3
 800ee64:	f3bf 8f6f 	isb	sy
 800ee68:	f3bf 8f4f 	dsb	sy
 800ee6c:	61bb      	str	r3, [r7, #24]
}
 800ee6e:	bf00      	nop
 800ee70:	e7fe      	b.n	800ee70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ee72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d01e      	beq.n	800eeb8 <xTaskCreateStatic+0xac>
 800ee7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d01b      	beq.n	800eeb8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ee8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8c:	2202      	movs	r2, #2
 800ee8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ee92:	2300      	movs	r3, #0
 800ee94:	9303      	str	r3, [sp, #12]
 800ee96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee98:	9302      	str	r3, [sp, #8]
 800ee9a:	f107 0314 	add.w	r3, r7, #20
 800ee9e:	9301      	str	r3, [sp, #4]
 800eea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea2:	9300      	str	r3, [sp, #0]
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	68b9      	ldr	r1, [r7, #8]
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	f000 f850 	bl	800ef50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eeb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eeb2:	f000 f8dd 	bl	800f070 <prvAddNewTaskToReadyList>
 800eeb6:	e001      	b.n	800eebc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eebc:	697b      	ldr	r3, [r7, #20]
	}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3728      	adds	r7, #40	; 0x28
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b08c      	sub	sp, #48	; 0x30
 800eeca:	af04      	add	r7, sp, #16
 800eecc:	60f8      	str	r0, [r7, #12]
 800eece:	60b9      	str	r1, [r7, #8]
 800eed0:	603b      	str	r3, [r7, #0]
 800eed2:	4613      	mov	r3, r2
 800eed4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eed6:	88fb      	ldrh	r3, [r7, #6]
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	4618      	mov	r0, r3
 800eedc:	f001 fedc 	bl	8010c98 <pvPortMalloc>
 800eee0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d00e      	beq.n	800ef06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eee8:	205c      	movs	r0, #92	; 0x5c
 800eeea:	f001 fed5 	bl	8010c98 <pvPortMalloc>
 800eeee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d003      	beq.n	800eefe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	697a      	ldr	r2, [r7, #20]
 800eefa:	631a      	str	r2, [r3, #48]	; 0x30
 800eefc:	e005      	b.n	800ef0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eefe:	6978      	ldr	r0, [r7, #20]
 800ef00:	f001 ff96 	bl	8010e30 <vPortFree>
 800ef04:	e001      	b.n	800ef0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ef06:	2300      	movs	r3, #0
 800ef08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ef0a:	69fb      	ldr	r3, [r7, #28]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d017      	beq.n	800ef40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	2200      	movs	r2, #0
 800ef14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ef18:	88fa      	ldrh	r2, [r7, #6]
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	9303      	str	r3, [sp, #12]
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	9302      	str	r3, [sp, #8]
 800ef22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef24:	9301      	str	r3, [sp, #4]
 800ef26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	68b9      	ldr	r1, [r7, #8]
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f000 f80e 	bl	800ef50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ef34:	69f8      	ldr	r0, [r7, #28]
 800ef36:	f000 f89b 	bl	800f070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	61bb      	str	r3, [r7, #24]
 800ef3e:	e002      	b.n	800ef46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ef40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ef46:	69bb      	ldr	r3, [r7, #24]
	}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3720      	adds	r7, #32
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b088      	sub	sp, #32
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
 800ef5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	461a      	mov	r2, r3
 800ef68:	21a5      	movs	r1, #165	; 0xa5
 800ef6a:	f003 fa27 	bl	80123bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	4413      	add	r3, r2
 800ef7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	f023 0307 	bic.w	r3, r3, #7
 800ef86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	f003 0307 	and.w	r3, r3, #7
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d00a      	beq.n	800efa8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ef92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef96:	f383 8811 	msr	BASEPRI, r3
 800ef9a:	f3bf 8f6f 	isb	sy
 800ef9e:	f3bf 8f4f 	dsb	sy
 800efa2:	617b      	str	r3, [r7, #20]
}
 800efa4:	bf00      	nop
 800efa6:	e7fe      	b.n	800efa6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d01f      	beq.n	800efee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800efae:	2300      	movs	r3, #0
 800efb0:	61fb      	str	r3, [r7, #28]
 800efb2:	e012      	b.n	800efda <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800efb4:	68ba      	ldr	r2, [r7, #8]
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	4413      	add	r3, r2
 800efba:	7819      	ldrb	r1, [r3, #0]
 800efbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efbe:	69fb      	ldr	r3, [r7, #28]
 800efc0:	4413      	add	r3, r2
 800efc2:	3334      	adds	r3, #52	; 0x34
 800efc4:	460a      	mov	r2, r1
 800efc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800efc8:	68ba      	ldr	r2, [r7, #8]
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	4413      	add	r3, r2
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d006      	beq.n	800efe2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	3301      	adds	r3, #1
 800efd8:	61fb      	str	r3, [r7, #28]
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	2b0f      	cmp	r3, #15
 800efde:	d9e9      	bls.n	800efb4 <prvInitialiseNewTask+0x64>
 800efe0:	e000      	b.n	800efe4 <prvInitialiseNewTask+0x94>
			{
				break;
 800efe2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800efe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe6:	2200      	movs	r2, #0
 800efe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800efec:	e003      	b.n	800eff6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800efee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff0:	2200      	movs	r2, #0
 800eff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff8:	2b37      	cmp	r3, #55	; 0x37
 800effa:	d901      	bls.n	800f000 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800effc:	2337      	movs	r3, #55	; 0x37
 800effe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f004:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f00a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00e:	2200      	movs	r2, #0
 800f010:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f014:	3304      	adds	r3, #4
 800f016:	4618      	mov	r0, r3
 800f018:	f7ff f872 	bl	800e100 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01e:	3318      	adds	r3, #24
 800f020:	4618      	mov	r0, r3
 800f022:	f7ff f86d 	bl	800e100 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f02a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f02e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f034:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f03a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03e:	2200      	movs	r2, #0
 800f040:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f044:	2200      	movs	r2, #0
 800f046:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f04a:	683a      	ldr	r2, [r7, #0]
 800f04c:	68f9      	ldr	r1, [r7, #12]
 800f04e:	69b8      	ldr	r0, [r7, #24]
 800f050:	f001 fbd0 	bl	80107f4 <pxPortInitialiseStack>
 800f054:	4602      	mov	r2, r0
 800f056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f058:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d002      	beq.n	800f066 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f066:	bf00      	nop
 800f068:	3720      	adds	r7, #32
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
	...

0800f070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f078:	f001 fcec 	bl	8010a54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f07c:	4b2d      	ldr	r3, [pc, #180]	; (800f134 <prvAddNewTaskToReadyList+0xc4>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	3301      	adds	r3, #1
 800f082:	4a2c      	ldr	r2, [pc, #176]	; (800f134 <prvAddNewTaskToReadyList+0xc4>)
 800f084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f086:	4b2c      	ldr	r3, [pc, #176]	; (800f138 <prvAddNewTaskToReadyList+0xc8>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d109      	bne.n	800f0a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f08e:	4a2a      	ldr	r2, [pc, #168]	; (800f138 <prvAddNewTaskToReadyList+0xc8>)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f094:	4b27      	ldr	r3, [pc, #156]	; (800f134 <prvAddNewTaskToReadyList+0xc4>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d110      	bne.n	800f0be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f09c:	f000 fc16 	bl	800f8cc <prvInitialiseTaskLists>
 800f0a0:	e00d      	b.n	800f0be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f0a2:	4b26      	ldr	r3, [pc, #152]	; (800f13c <prvAddNewTaskToReadyList+0xcc>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d109      	bne.n	800f0be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f0aa:	4b23      	ldr	r3, [pc, #140]	; (800f138 <prvAddNewTaskToReadyList+0xc8>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d802      	bhi.n	800f0be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f0b8:	4a1f      	ldr	r2, [pc, #124]	; (800f138 <prvAddNewTaskToReadyList+0xc8>)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f0be:	4b20      	ldr	r3, [pc, #128]	; (800f140 <prvAddNewTaskToReadyList+0xd0>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	4a1e      	ldr	r2, [pc, #120]	; (800f140 <prvAddNewTaskToReadyList+0xd0>)
 800f0c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f0c8:	4b1d      	ldr	r3, [pc, #116]	; (800f140 <prvAddNewTaskToReadyList+0xd0>)
 800f0ca:	681a      	ldr	r2, [r3, #0]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0d4:	4b1b      	ldr	r3, [pc, #108]	; (800f144 <prvAddNewTaskToReadyList+0xd4>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d903      	bls.n	800f0e4 <prvAddNewTaskToReadyList+0x74>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e0:	4a18      	ldr	r2, [pc, #96]	; (800f144 <prvAddNewTaskToReadyList+0xd4>)
 800f0e2:	6013      	str	r3, [r2, #0]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	4413      	add	r3, r2
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	4a15      	ldr	r2, [pc, #84]	; (800f148 <prvAddNewTaskToReadyList+0xd8>)
 800f0f2:	441a      	add	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	3304      	adds	r3, #4
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	4610      	mov	r0, r2
 800f0fc:	f7ff f80d 	bl	800e11a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f100:	f001 fcd8 	bl	8010ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f104:	4b0d      	ldr	r3, [pc, #52]	; (800f13c <prvAddNewTaskToReadyList+0xcc>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d00e      	beq.n	800f12a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f10c:	4b0a      	ldr	r3, [pc, #40]	; (800f138 <prvAddNewTaskToReadyList+0xc8>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f116:	429a      	cmp	r2, r3
 800f118:	d207      	bcs.n	800f12a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f11a:	4b0c      	ldr	r3, [pc, #48]	; (800f14c <prvAddNewTaskToReadyList+0xdc>)
 800f11c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f120:	601a      	str	r2, [r3, #0]
 800f122:	f3bf 8f4f 	dsb	sy
 800f126:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f12a:	bf00      	nop
 800f12c:	3708      	adds	r7, #8
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	20001068 	.word	0x20001068
 800f138:	20000b94 	.word	0x20000b94
 800f13c:	20001074 	.word	0x20001074
 800f140:	20001084 	.word	0x20001084
 800f144:	20001070 	.word	0x20001070
 800f148:	20000b98 	.word	0x20000b98
 800f14c:	e000ed04 	.word	0xe000ed04

0800f150 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f158:	2300      	movs	r3, #0
 800f15a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d017      	beq.n	800f192 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f162:	4b13      	ldr	r3, [pc, #76]	; (800f1b0 <vTaskDelay+0x60>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00a      	beq.n	800f180 <vTaskDelay+0x30>
	__asm volatile
 800f16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f16e:	f383 8811 	msr	BASEPRI, r3
 800f172:	f3bf 8f6f 	isb	sy
 800f176:	f3bf 8f4f 	dsb	sy
 800f17a:	60bb      	str	r3, [r7, #8]
}
 800f17c:	bf00      	nop
 800f17e:	e7fe      	b.n	800f17e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f180:	f000 f880 	bl	800f284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f184:	2100      	movs	r1, #0
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 fed8 	bl	800ff3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f18c:	f000 f888 	bl	800f2a0 <xTaskResumeAll>
 800f190:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d107      	bne.n	800f1a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f198:	4b06      	ldr	r3, [pc, #24]	; (800f1b4 <vTaskDelay+0x64>)
 800f19a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f19e:	601a      	str	r2, [r3, #0]
 800f1a0:	f3bf 8f4f 	dsb	sy
 800f1a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f1a8:	bf00      	nop
 800f1aa:	3710      	adds	r7, #16
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	20001090 	.word	0x20001090
 800f1b4:	e000ed04 	.word	0xe000ed04

0800f1b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b08a      	sub	sp, #40	; 0x28
 800f1bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f1c6:	463a      	mov	r2, r7
 800f1c8:	1d39      	adds	r1, r7, #4
 800f1ca:	f107 0308 	add.w	r3, r7, #8
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fe ff42 	bl	800e058 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f1d4:	6839      	ldr	r1, [r7, #0]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	9202      	str	r2, [sp, #8]
 800f1dc:	9301      	str	r3, [sp, #4]
 800f1de:	2300      	movs	r3, #0
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	460a      	mov	r2, r1
 800f1e6:	4921      	ldr	r1, [pc, #132]	; (800f26c <vTaskStartScheduler+0xb4>)
 800f1e8:	4821      	ldr	r0, [pc, #132]	; (800f270 <vTaskStartScheduler+0xb8>)
 800f1ea:	f7ff fe0f 	bl	800ee0c <xTaskCreateStatic>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	4a20      	ldr	r2, [pc, #128]	; (800f274 <vTaskStartScheduler+0xbc>)
 800f1f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f1f4:	4b1f      	ldr	r3, [pc, #124]	; (800f274 <vTaskStartScheduler+0xbc>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d002      	beq.n	800f202 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	617b      	str	r3, [r7, #20]
 800f200:	e001      	b.n	800f206 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f202:	2300      	movs	r3, #0
 800f204:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d102      	bne.n	800f212 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f20c:	f000 feea 	bl	800ffe4 <xTimerCreateTimerTask>
 800f210:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	2b01      	cmp	r3, #1
 800f216:	d116      	bne.n	800f246 <vTaskStartScheduler+0x8e>
	__asm volatile
 800f218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21c:	f383 8811 	msr	BASEPRI, r3
 800f220:	f3bf 8f6f 	isb	sy
 800f224:	f3bf 8f4f 	dsb	sy
 800f228:	613b      	str	r3, [r7, #16]
}
 800f22a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f22c:	4b12      	ldr	r3, [pc, #72]	; (800f278 <vTaskStartScheduler+0xc0>)
 800f22e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f232:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f234:	4b11      	ldr	r3, [pc, #68]	; (800f27c <vTaskStartScheduler+0xc4>)
 800f236:	2201      	movs	r2, #1
 800f238:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f23a:	4b11      	ldr	r3, [pc, #68]	; (800f280 <vTaskStartScheduler+0xc8>)
 800f23c:	2200      	movs	r2, #0
 800f23e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f240:	f001 fb66 	bl	8010910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f244:	e00e      	b.n	800f264 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f24c:	d10a      	bne.n	800f264 <vTaskStartScheduler+0xac>
	__asm volatile
 800f24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	60fb      	str	r3, [r7, #12]
}
 800f260:	bf00      	nop
 800f262:	e7fe      	b.n	800f262 <vTaskStartScheduler+0xaa>
}
 800f264:	bf00      	nop
 800f266:	3718      	adds	r7, #24
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	08012464 	.word	0x08012464
 800f270:	0800f89d 	.word	0x0800f89d
 800f274:	2000108c 	.word	0x2000108c
 800f278:	20001088 	.word	0x20001088
 800f27c:	20001074 	.word	0x20001074
 800f280:	2000106c 	.word	0x2000106c

0800f284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f284:	b480      	push	{r7}
 800f286:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f288:	4b04      	ldr	r3, [pc, #16]	; (800f29c <vTaskSuspendAll+0x18>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	3301      	adds	r3, #1
 800f28e:	4a03      	ldr	r2, [pc, #12]	; (800f29c <vTaskSuspendAll+0x18>)
 800f290:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f292:	bf00      	nop
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr
 800f29c:	20001090 	.word	0x20001090

0800f2a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f2ae:	4b42      	ldr	r3, [pc, #264]	; (800f3b8 <xTaskResumeAll+0x118>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d10a      	bne.n	800f2cc <xTaskResumeAll+0x2c>
	__asm volatile
 800f2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ba:	f383 8811 	msr	BASEPRI, r3
 800f2be:	f3bf 8f6f 	isb	sy
 800f2c2:	f3bf 8f4f 	dsb	sy
 800f2c6:	603b      	str	r3, [r7, #0]
}
 800f2c8:	bf00      	nop
 800f2ca:	e7fe      	b.n	800f2ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f2cc:	f001 fbc2 	bl	8010a54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f2d0:	4b39      	ldr	r3, [pc, #228]	; (800f3b8 <xTaskResumeAll+0x118>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	4a38      	ldr	r2, [pc, #224]	; (800f3b8 <xTaskResumeAll+0x118>)
 800f2d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2da:	4b37      	ldr	r3, [pc, #220]	; (800f3b8 <xTaskResumeAll+0x118>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d162      	bne.n	800f3a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f2e2:	4b36      	ldr	r3, [pc, #216]	; (800f3bc <xTaskResumeAll+0x11c>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d05e      	beq.n	800f3a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f2ea:	e02f      	b.n	800f34c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2ec:	4b34      	ldr	r3, [pc, #208]	; (800f3c0 <xTaskResumeAll+0x120>)
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	68db      	ldr	r3, [r3, #12]
 800f2f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	3318      	adds	r3, #24
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7fe ff6b 	bl	800e1d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	3304      	adds	r3, #4
 800f302:	4618      	mov	r0, r3
 800f304:	f7fe ff66 	bl	800e1d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f30c:	4b2d      	ldr	r3, [pc, #180]	; (800f3c4 <xTaskResumeAll+0x124>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	429a      	cmp	r2, r3
 800f312:	d903      	bls.n	800f31c <xTaskResumeAll+0x7c>
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f318:	4a2a      	ldr	r2, [pc, #168]	; (800f3c4 <xTaskResumeAll+0x124>)
 800f31a:	6013      	str	r3, [r2, #0]
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f320:	4613      	mov	r3, r2
 800f322:	009b      	lsls	r3, r3, #2
 800f324:	4413      	add	r3, r2
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	4a27      	ldr	r2, [pc, #156]	; (800f3c8 <xTaskResumeAll+0x128>)
 800f32a:	441a      	add	r2, r3
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	3304      	adds	r3, #4
 800f330:	4619      	mov	r1, r3
 800f332:	4610      	mov	r0, r2
 800f334:	f7fe fef1 	bl	800e11a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f33c:	4b23      	ldr	r3, [pc, #140]	; (800f3cc <xTaskResumeAll+0x12c>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f342:	429a      	cmp	r2, r3
 800f344:	d302      	bcc.n	800f34c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f346:	4b22      	ldr	r3, [pc, #136]	; (800f3d0 <xTaskResumeAll+0x130>)
 800f348:	2201      	movs	r2, #1
 800f34a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f34c:	4b1c      	ldr	r3, [pc, #112]	; (800f3c0 <xTaskResumeAll+0x120>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d1cb      	bne.n	800f2ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d001      	beq.n	800f35e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f35a:	f000 fb55 	bl	800fa08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f35e:	4b1d      	ldr	r3, [pc, #116]	; (800f3d4 <xTaskResumeAll+0x134>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d010      	beq.n	800f38c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f36a:	f000 f847 	bl	800f3fc <xTaskIncrementTick>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d002      	beq.n	800f37a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f374:	4b16      	ldr	r3, [pc, #88]	; (800f3d0 <xTaskResumeAll+0x130>)
 800f376:	2201      	movs	r2, #1
 800f378:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	3b01      	subs	r3, #1
 800f37e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d1f1      	bne.n	800f36a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f386:	4b13      	ldr	r3, [pc, #76]	; (800f3d4 <xTaskResumeAll+0x134>)
 800f388:	2200      	movs	r2, #0
 800f38a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f38c:	4b10      	ldr	r3, [pc, #64]	; (800f3d0 <xTaskResumeAll+0x130>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d009      	beq.n	800f3a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f394:	2301      	movs	r3, #1
 800f396:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f398:	4b0f      	ldr	r3, [pc, #60]	; (800f3d8 <xTaskResumeAll+0x138>)
 800f39a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f39e:	601a      	str	r2, [r3, #0]
 800f3a0:	f3bf 8f4f 	dsb	sy
 800f3a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f3a8:	f001 fb84 	bl	8010ab4 <vPortExitCritical>

	return xAlreadyYielded;
 800f3ac:	68bb      	ldr	r3, [r7, #8]
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3710      	adds	r7, #16
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	20001090 	.word	0x20001090
 800f3bc:	20001068 	.word	0x20001068
 800f3c0:	20001028 	.word	0x20001028
 800f3c4:	20001070 	.word	0x20001070
 800f3c8:	20000b98 	.word	0x20000b98
 800f3cc:	20000b94 	.word	0x20000b94
 800f3d0:	2000107c 	.word	0x2000107c
 800f3d4:	20001078 	.word	0x20001078
 800f3d8:	e000ed04 	.word	0xe000ed04

0800f3dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f3e2:	4b05      	ldr	r3, [pc, #20]	; (800f3f8 <xTaskGetTickCount+0x1c>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f3e8:	687b      	ldr	r3, [r7, #4]
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	370c      	adds	r7, #12
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	2000106c 	.word	0x2000106c

0800f3fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b086      	sub	sp, #24
 800f400:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f402:	2300      	movs	r3, #0
 800f404:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f406:	4b4f      	ldr	r3, [pc, #316]	; (800f544 <xTaskIncrementTick+0x148>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	f040 808f 	bne.w	800f52e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f410:	4b4d      	ldr	r3, [pc, #308]	; (800f548 <xTaskIncrementTick+0x14c>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	3301      	adds	r3, #1
 800f416:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f418:	4a4b      	ldr	r2, [pc, #300]	; (800f548 <xTaskIncrementTick+0x14c>)
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d120      	bne.n	800f466 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f424:	4b49      	ldr	r3, [pc, #292]	; (800f54c <xTaskIncrementTick+0x150>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00a      	beq.n	800f444 <xTaskIncrementTick+0x48>
	__asm volatile
 800f42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f432:	f383 8811 	msr	BASEPRI, r3
 800f436:	f3bf 8f6f 	isb	sy
 800f43a:	f3bf 8f4f 	dsb	sy
 800f43e:	603b      	str	r3, [r7, #0]
}
 800f440:	bf00      	nop
 800f442:	e7fe      	b.n	800f442 <xTaskIncrementTick+0x46>
 800f444:	4b41      	ldr	r3, [pc, #260]	; (800f54c <xTaskIncrementTick+0x150>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	60fb      	str	r3, [r7, #12]
 800f44a:	4b41      	ldr	r3, [pc, #260]	; (800f550 <xTaskIncrementTick+0x154>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4a3f      	ldr	r2, [pc, #252]	; (800f54c <xTaskIncrementTick+0x150>)
 800f450:	6013      	str	r3, [r2, #0]
 800f452:	4a3f      	ldr	r2, [pc, #252]	; (800f550 <xTaskIncrementTick+0x154>)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	6013      	str	r3, [r2, #0]
 800f458:	4b3e      	ldr	r3, [pc, #248]	; (800f554 <xTaskIncrementTick+0x158>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	3301      	adds	r3, #1
 800f45e:	4a3d      	ldr	r2, [pc, #244]	; (800f554 <xTaskIncrementTick+0x158>)
 800f460:	6013      	str	r3, [r2, #0]
 800f462:	f000 fad1 	bl	800fa08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f466:	4b3c      	ldr	r3, [pc, #240]	; (800f558 <xTaskIncrementTick+0x15c>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	693a      	ldr	r2, [r7, #16]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d349      	bcc.n	800f504 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f470:	4b36      	ldr	r3, [pc, #216]	; (800f54c <xTaskIncrementTick+0x150>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d104      	bne.n	800f484 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f47a:	4b37      	ldr	r3, [pc, #220]	; (800f558 <xTaskIncrementTick+0x15c>)
 800f47c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f480:	601a      	str	r2, [r3, #0]
					break;
 800f482:	e03f      	b.n	800f504 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f484:	4b31      	ldr	r3, [pc, #196]	; (800f54c <xTaskIncrementTick+0x150>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	68db      	ldr	r3, [r3, #12]
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f494:	693a      	ldr	r2, [r7, #16]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d203      	bcs.n	800f4a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f49c:	4a2e      	ldr	r2, [pc, #184]	; (800f558 <xTaskIncrementTick+0x15c>)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f4a2:	e02f      	b.n	800f504 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	3304      	adds	r3, #4
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7fe fe93 	bl	800e1d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d004      	beq.n	800f4c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	3318      	adds	r3, #24
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fe fe8a 	bl	800e1d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4c4:	4b25      	ldr	r3, [pc, #148]	; (800f55c <xTaskIncrementTick+0x160>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d903      	bls.n	800f4d4 <xTaskIncrementTick+0xd8>
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4d0:	4a22      	ldr	r2, [pc, #136]	; (800f55c <xTaskIncrementTick+0x160>)
 800f4d2:	6013      	str	r3, [r2, #0]
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4d8:	4613      	mov	r3, r2
 800f4da:	009b      	lsls	r3, r3, #2
 800f4dc:	4413      	add	r3, r2
 800f4de:	009b      	lsls	r3, r3, #2
 800f4e0:	4a1f      	ldr	r2, [pc, #124]	; (800f560 <xTaskIncrementTick+0x164>)
 800f4e2:	441a      	add	r2, r3
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	3304      	adds	r3, #4
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	4610      	mov	r0, r2
 800f4ec:	f7fe fe15 	bl	800e11a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4f4:	4b1b      	ldr	r3, [pc, #108]	; (800f564 <xTaskIncrementTick+0x168>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d3b8      	bcc.n	800f470 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f4fe:	2301      	movs	r3, #1
 800f500:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f502:	e7b5      	b.n	800f470 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f504:	4b17      	ldr	r3, [pc, #92]	; (800f564 <xTaskIncrementTick+0x168>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f50a:	4915      	ldr	r1, [pc, #84]	; (800f560 <xTaskIncrementTick+0x164>)
 800f50c:	4613      	mov	r3, r2
 800f50e:	009b      	lsls	r3, r3, #2
 800f510:	4413      	add	r3, r2
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	440b      	add	r3, r1
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d901      	bls.n	800f520 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f51c:	2301      	movs	r3, #1
 800f51e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f520:	4b11      	ldr	r3, [pc, #68]	; (800f568 <xTaskIncrementTick+0x16c>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d007      	beq.n	800f538 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f528:	2301      	movs	r3, #1
 800f52a:	617b      	str	r3, [r7, #20]
 800f52c:	e004      	b.n	800f538 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f52e:	4b0f      	ldr	r3, [pc, #60]	; (800f56c <xTaskIncrementTick+0x170>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	3301      	adds	r3, #1
 800f534:	4a0d      	ldr	r2, [pc, #52]	; (800f56c <xTaskIncrementTick+0x170>)
 800f536:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f538:	697b      	ldr	r3, [r7, #20]
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3718      	adds	r7, #24
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	20001090 	.word	0x20001090
 800f548:	2000106c 	.word	0x2000106c
 800f54c:	20001020 	.word	0x20001020
 800f550:	20001024 	.word	0x20001024
 800f554:	20001080 	.word	0x20001080
 800f558:	20001088 	.word	0x20001088
 800f55c:	20001070 	.word	0x20001070
 800f560:	20000b98 	.word	0x20000b98
 800f564:	20000b94 	.word	0x20000b94
 800f568:	2000107c 	.word	0x2000107c
 800f56c:	20001078 	.word	0x20001078

0800f570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f570:	b480      	push	{r7}
 800f572:	b085      	sub	sp, #20
 800f574:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f576:	4b28      	ldr	r3, [pc, #160]	; (800f618 <vTaskSwitchContext+0xa8>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d003      	beq.n	800f586 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f57e:	4b27      	ldr	r3, [pc, #156]	; (800f61c <vTaskSwitchContext+0xac>)
 800f580:	2201      	movs	r2, #1
 800f582:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f584:	e041      	b.n	800f60a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800f586:	4b25      	ldr	r3, [pc, #148]	; (800f61c <vTaskSwitchContext+0xac>)
 800f588:	2200      	movs	r2, #0
 800f58a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f58c:	4b24      	ldr	r3, [pc, #144]	; (800f620 <vTaskSwitchContext+0xb0>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	60fb      	str	r3, [r7, #12]
 800f592:	e010      	b.n	800f5b6 <vTaskSwitchContext+0x46>
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d10a      	bne.n	800f5b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800f59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59e:	f383 8811 	msr	BASEPRI, r3
 800f5a2:	f3bf 8f6f 	isb	sy
 800f5a6:	f3bf 8f4f 	dsb	sy
 800f5aa:	607b      	str	r3, [r7, #4]
}
 800f5ac:	bf00      	nop
 800f5ae:	e7fe      	b.n	800f5ae <vTaskSwitchContext+0x3e>
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	3b01      	subs	r3, #1
 800f5b4:	60fb      	str	r3, [r7, #12]
 800f5b6:	491b      	ldr	r1, [pc, #108]	; (800f624 <vTaskSwitchContext+0xb4>)
 800f5b8:	68fa      	ldr	r2, [r7, #12]
 800f5ba:	4613      	mov	r3, r2
 800f5bc:	009b      	lsls	r3, r3, #2
 800f5be:	4413      	add	r3, r2
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	440b      	add	r3, r1
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d0e4      	beq.n	800f594 <vTaskSwitchContext+0x24>
 800f5ca:	68fa      	ldr	r2, [r7, #12]
 800f5cc:	4613      	mov	r3, r2
 800f5ce:	009b      	lsls	r3, r3, #2
 800f5d0:	4413      	add	r3, r2
 800f5d2:	009b      	lsls	r3, r3, #2
 800f5d4:	4a13      	ldr	r2, [pc, #76]	; (800f624 <vTaskSwitchContext+0xb4>)
 800f5d6:	4413      	add	r3, r2
 800f5d8:	60bb      	str	r3, [r7, #8]
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	685a      	ldr	r2, [r3, #4]
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	605a      	str	r2, [r3, #4]
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	685a      	ldr	r2, [r3, #4]
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	3308      	adds	r3, #8
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d104      	bne.n	800f5fa <vTaskSwitchContext+0x8a>
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	685a      	ldr	r2, [r3, #4]
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	605a      	str	r2, [r3, #4]
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	4a09      	ldr	r2, [pc, #36]	; (800f628 <vTaskSwitchContext+0xb8>)
 800f602:	6013      	str	r3, [r2, #0]
 800f604:	4a06      	ldr	r2, [pc, #24]	; (800f620 <vTaskSwitchContext+0xb0>)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	6013      	str	r3, [r2, #0]
}
 800f60a:	bf00      	nop
 800f60c:	3714      	adds	r7, #20
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr
 800f616:	bf00      	nop
 800f618:	20001090 	.word	0x20001090
 800f61c:	2000107c 	.word	0x2000107c
 800f620:	20001070 	.word	0x20001070
 800f624:	20000b98 	.word	0x20000b98
 800f628:	20000b94 	.word	0x20000b94

0800f62c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b084      	sub	sp, #16
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d10a      	bne.n	800f652 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f640:	f383 8811 	msr	BASEPRI, r3
 800f644:	f3bf 8f6f 	isb	sy
 800f648:	f3bf 8f4f 	dsb	sy
 800f64c:	60fb      	str	r3, [r7, #12]
}
 800f64e:	bf00      	nop
 800f650:	e7fe      	b.n	800f650 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f652:	4b07      	ldr	r3, [pc, #28]	; (800f670 <vTaskPlaceOnEventList+0x44>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	3318      	adds	r3, #24
 800f658:	4619      	mov	r1, r3
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f7fe fd81 	bl	800e162 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f660:	2101      	movs	r1, #1
 800f662:	6838      	ldr	r0, [r7, #0]
 800f664:	f000 fc6a 	bl	800ff3c <prvAddCurrentTaskToDelayedList>
}
 800f668:	bf00      	nop
 800f66a:	3710      	adds	r7, #16
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	20000b94 	.word	0x20000b94

0800f674 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f674:	b580      	push	{r7, lr}
 800f676:	b086      	sub	sp, #24
 800f678:	af00      	add	r7, sp, #0
 800f67a:	60f8      	str	r0, [r7, #12]
 800f67c:	60b9      	str	r1, [r7, #8]
 800f67e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d10a      	bne.n	800f69c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68a:	f383 8811 	msr	BASEPRI, r3
 800f68e:	f3bf 8f6f 	isb	sy
 800f692:	f3bf 8f4f 	dsb	sy
 800f696:	617b      	str	r3, [r7, #20]
}
 800f698:	bf00      	nop
 800f69a:	e7fe      	b.n	800f69a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f69c:	4b0a      	ldr	r3, [pc, #40]	; (800f6c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	3318      	adds	r3, #24
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	68f8      	ldr	r0, [r7, #12]
 800f6a6:	f7fe fd38 	bl	800e11a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d002      	beq.n	800f6b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f6b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f6b6:	6879      	ldr	r1, [r7, #4]
 800f6b8:	68b8      	ldr	r0, [r7, #8]
 800f6ba:	f000 fc3f 	bl	800ff3c <prvAddCurrentTaskToDelayedList>
	}
 800f6be:	bf00      	nop
 800f6c0:	3718      	adds	r7, #24
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	20000b94 	.word	0x20000b94

0800f6cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b086      	sub	sp, #24
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d10a      	bne.n	800f6f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e6:	f383 8811 	msr	BASEPRI, r3
 800f6ea:	f3bf 8f6f 	isb	sy
 800f6ee:	f3bf 8f4f 	dsb	sy
 800f6f2:	60fb      	str	r3, [r7, #12]
}
 800f6f4:	bf00      	nop
 800f6f6:	e7fe      	b.n	800f6f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	3318      	adds	r3, #24
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fe fd69 	bl	800e1d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f702:	4b1e      	ldr	r3, [pc, #120]	; (800f77c <xTaskRemoveFromEventList+0xb0>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d11d      	bne.n	800f746 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	3304      	adds	r3, #4
 800f70e:	4618      	mov	r0, r3
 800f710:	f7fe fd60 	bl	800e1d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f718:	4b19      	ldr	r3, [pc, #100]	; (800f780 <xTaskRemoveFromEventList+0xb4>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d903      	bls.n	800f728 <xTaskRemoveFromEventList+0x5c>
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f724:	4a16      	ldr	r2, [pc, #88]	; (800f780 <xTaskRemoveFromEventList+0xb4>)
 800f726:	6013      	str	r3, [r2, #0]
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f72c:	4613      	mov	r3, r2
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	4413      	add	r3, r2
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	4a13      	ldr	r2, [pc, #76]	; (800f784 <xTaskRemoveFromEventList+0xb8>)
 800f736:	441a      	add	r2, r3
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	3304      	adds	r3, #4
 800f73c:	4619      	mov	r1, r3
 800f73e:	4610      	mov	r0, r2
 800f740:	f7fe fceb 	bl	800e11a <vListInsertEnd>
 800f744:	e005      	b.n	800f752 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	3318      	adds	r3, #24
 800f74a:	4619      	mov	r1, r3
 800f74c:	480e      	ldr	r0, [pc, #56]	; (800f788 <xTaskRemoveFromEventList+0xbc>)
 800f74e:	f7fe fce4 	bl	800e11a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f756:	4b0d      	ldr	r3, [pc, #52]	; (800f78c <xTaskRemoveFromEventList+0xc0>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f75c:	429a      	cmp	r2, r3
 800f75e:	d905      	bls.n	800f76c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f760:	2301      	movs	r3, #1
 800f762:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f764:	4b0a      	ldr	r3, [pc, #40]	; (800f790 <xTaskRemoveFromEventList+0xc4>)
 800f766:	2201      	movs	r2, #1
 800f768:	601a      	str	r2, [r3, #0]
 800f76a:	e001      	b.n	800f770 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f76c:	2300      	movs	r3, #0
 800f76e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f770:	697b      	ldr	r3, [r7, #20]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3718      	adds	r7, #24
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	20001090 	.word	0x20001090
 800f780:	20001070 	.word	0x20001070
 800f784:	20000b98 	.word	0x20000b98
 800f788:	20001028 	.word	0x20001028
 800f78c:	20000b94 	.word	0x20000b94
 800f790:	2000107c 	.word	0x2000107c

0800f794 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f794:	b480      	push	{r7}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f79c:	4b06      	ldr	r3, [pc, #24]	; (800f7b8 <vTaskInternalSetTimeOutState+0x24>)
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f7a4:	4b05      	ldr	r3, [pc, #20]	; (800f7bc <vTaskInternalSetTimeOutState+0x28>)
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	605a      	str	r2, [r3, #4]
}
 800f7ac:	bf00      	nop
 800f7ae:	370c      	adds	r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr
 800f7b8:	20001080 	.word	0x20001080
 800f7bc:	2000106c 	.word	0x2000106c

0800f7c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b088      	sub	sp, #32
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d10a      	bne.n	800f7e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d4:	f383 8811 	msr	BASEPRI, r3
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	613b      	str	r3, [r7, #16]
}
 800f7e2:	bf00      	nop
 800f7e4:	e7fe      	b.n	800f7e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d10a      	bne.n	800f802 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f0:	f383 8811 	msr	BASEPRI, r3
 800f7f4:	f3bf 8f6f 	isb	sy
 800f7f8:	f3bf 8f4f 	dsb	sy
 800f7fc:	60fb      	str	r3, [r7, #12]
}
 800f7fe:	bf00      	nop
 800f800:	e7fe      	b.n	800f800 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f802:	f001 f927 	bl	8010a54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f806:	4b1d      	ldr	r3, [pc, #116]	; (800f87c <xTaskCheckForTimeOut+0xbc>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	69ba      	ldr	r2, [r7, #24]
 800f812:	1ad3      	subs	r3, r2, r3
 800f814:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f81e:	d102      	bne.n	800f826 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f820:	2300      	movs	r3, #0
 800f822:	61fb      	str	r3, [r7, #28]
 800f824:	e023      	b.n	800f86e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	4b15      	ldr	r3, [pc, #84]	; (800f880 <xTaskCheckForTimeOut+0xc0>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d007      	beq.n	800f842 <xTaskCheckForTimeOut+0x82>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	69ba      	ldr	r2, [r7, #24]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d302      	bcc.n	800f842 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f83c:	2301      	movs	r3, #1
 800f83e:	61fb      	str	r3, [r7, #28]
 800f840:	e015      	b.n	800f86e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	697a      	ldr	r2, [r7, #20]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d20b      	bcs.n	800f864 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	1ad2      	subs	r2, r2, r3
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f7ff ff9b 	bl	800f794 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f85e:	2300      	movs	r3, #0
 800f860:	61fb      	str	r3, [r7, #28]
 800f862:	e004      	b.n	800f86e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	2200      	movs	r2, #0
 800f868:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f86a:	2301      	movs	r3, #1
 800f86c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f86e:	f001 f921 	bl	8010ab4 <vPortExitCritical>

	return xReturn;
 800f872:	69fb      	ldr	r3, [r7, #28]
}
 800f874:	4618      	mov	r0, r3
 800f876:	3720      	adds	r7, #32
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	2000106c 	.word	0x2000106c
 800f880:	20001080 	.word	0x20001080

0800f884 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f884:	b480      	push	{r7}
 800f886:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f888:	4b03      	ldr	r3, [pc, #12]	; (800f898 <vTaskMissedYield+0x14>)
 800f88a:	2201      	movs	r2, #1
 800f88c:	601a      	str	r2, [r3, #0]
}
 800f88e:	bf00      	nop
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr
 800f898:	2000107c 	.word	0x2000107c

0800f89c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f8a4:	f000 f852 	bl	800f94c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f8a8:	4b06      	ldr	r3, [pc, #24]	; (800f8c4 <prvIdleTask+0x28>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	d9f9      	bls.n	800f8a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f8b0:	4b05      	ldr	r3, [pc, #20]	; (800f8c8 <prvIdleTask+0x2c>)
 800f8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8b6:	601a      	str	r2, [r3, #0]
 800f8b8:	f3bf 8f4f 	dsb	sy
 800f8bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f8c0:	e7f0      	b.n	800f8a4 <prvIdleTask+0x8>
 800f8c2:	bf00      	nop
 800f8c4:	20000b98 	.word	0x20000b98
 800f8c8:	e000ed04 	.word	0xe000ed04

0800f8cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	607b      	str	r3, [r7, #4]
 800f8d6:	e00c      	b.n	800f8f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f8d8:	687a      	ldr	r2, [r7, #4]
 800f8da:	4613      	mov	r3, r2
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	4413      	add	r3, r2
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	4a12      	ldr	r2, [pc, #72]	; (800f92c <prvInitialiseTaskLists+0x60>)
 800f8e4:	4413      	add	r3, r2
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fe fbea 	bl	800e0c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	607b      	str	r3, [r7, #4]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2b37      	cmp	r3, #55	; 0x37
 800f8f6:	d9ef      	bls.n	800f8d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f8f8:	480d      	ldr	r0, [pc, #52]	; (800f930 <prvInitialiseTaskLists+0x64>)
 800f8fa:	f7fe fbe1 	bl	800e0c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f8fe:	480d      	ldr	r0, [pc, #52]	; (800f934 <prvInitialiseTaskLists+0x68>)
 800f900:	f7fe fbde 	bl	800e0c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f904:	480c      	ldr	r0, [pc, #48]	; (800f938 <prvInitialiseTaskLists+0x6c>)
 800f906:	f7fe fbdb 	bl	800e0c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f90a:	480c      	ldr	r0, [pc, #48]	; (800f93c <prvInitialiseTaskLists+0x70>)
 800f90c:	f7fe fbd8 	bl	800e0c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f910:	480b      	ldr	r0, [pc, #44]	; (800f940 <prvInitialiseTaskLists+0x74>)
 800f912:	f7fe fbd5 	bl	800e0c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f916:	4b0b      	ldr	r3, [pc, #44]	; (800f944 <prvInitialiseTaskLists+0x78>)
 800f918:	4a05      	ldr	r2, [pc, #20]	; (800f930 <prvInitialiseTaskLists+0x64>)
 800f91a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f91c:	4b0a      	ldr	r3, [pc, #40]	; (800f948 <prvInitialiseTaskLists+0x7c>)
 800f91e:	4a05      	ldr	r2, [pc, #20]	; (800f934 <prvInitialiseTaskLists+0x68>)
 800f920:	601a      	str	r2, [r3, #0]
}
 800f922:	bf00      	nop
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	20000b98 	.word	0x20000b98
 800f930:	20000ff8 	.word	0x20000ff8
 800f934:	2000100c 	.word	0x2000100c
 800f938:	20001028 	.word	0x20001028
 800f93c:	2000103c 	.word	0x2000103c
 800f940:	20001054 	.word	0x20001054
 800f944:	20001020 	.word	0x20001020
 800f948:	20001024 	.word	0x20001024

0800f94c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f952:	e019      	b.n	800f988 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f954:	f001 f87e 	bl	8010a54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f958:	4b10      	ldr	r3, [pc, #64]	; (800f99c <prvCheckTasksWaitingTermination+0x50>)
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	3304      	adds	r3, #4
 800f964:	4618      	mov	r0, r3
 800f966:	f7fe fc35 	bl	800e1d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f96a:	4b0d      	ldr	r3, [pc, #52]	; (800f9a0 <prvCheckTasksWaitingTermination+0x54>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	3b01      	subs	r3, #1
 800f970:	4a0b      	ldr	r2, [pc, #44]	; (800f9a0 <prvCheckTasksWaitingTermination+0x54>)
 800f972:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f974:	4b0b      	ldr	r3, [pc, #44]	; (800f9a4 <prvCheckTasksWaitingTermination+0x58>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	3b01      	subs	r3, #1
 800f97a:	4a0a      	ldr	r2, [pc, #40]	; (800f9a4 <prvCheckTasksWaitingTermination+0x58>)
 800f97c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f97e:	f001 f899 	bl	8010ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 f810 	bl	800f9a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f988:	4b06      	ldr	r3, [pc, #24]	; (800f9a4 <prvCheckTasksWaitingTermination+0x58>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d1e1      	bne.n	800f954 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f990:	bf00      	nop
 800f992:	bf00      	nop
 800f994:	3708      	adds	r7, #8
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	2000103c 	.word	0x2000103c
 800f9a0:	20001068 	.word	0x20001068
 800f9a4:	20001050 	.word	0x20001050

0800f9a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b084      	sub	sp, #16
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d108      	bne.n	800f9cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f001 fa36 	bl	8010e30 <vPortFree>
				vPortFree( pxTCB );
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f001 fa33 	bl	8010e30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f9ca:	e018      	b.n	800f9fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d103      	bne.n	800f9de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f001 fa2a 	bl	8010e30 <vPortFree>
	}
 800f9dc:	e00f      	b.n	800f9fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f9e4:	2b02      	cmp	r3, #2
 800f9e6:	d00a      	beq.n	800f9fe <prvDeleteTCB+0x56>
	__asm volatile
 800f9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ec:	f383 8811 	msr	BASEPRI, r3
 800f9f0:	f3bf 8f6f 	isb	sy
 800f9f4:	f3bf 8f4f 	dsb	sy
 800f9f8:	60fb      	str	r3, [r7, #12]
}
 800f9fa:	bf00      	nop
 800f9fc:	e7fe      	b.n	800f9fc <prvDeleteTCB+0x54>
	}
 800f9fe:	bf00      	nop
 800fa00:	3710      	adds	r7, #16
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
	...

0800fa08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b083      	sub	sp, #12
 800fa0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa0e:	4b0c      	ldr	r3, [pc, #48]	; (800fa40 <prvResetNextTaskUnblockTime+0x38>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d104      	bne.n	800fa22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fa18:	4b0a      	ldr	r3, [pc, #40]	; (800fa44 <prvResetNextTaskUnblockTime+0x3c>)
 800fa1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fa20:	e008      	b.n	800fa34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa22:	4b07      	ldr	r3, [pc, #28]	; (800fa40 <prvResetNextTaskUnblockTime+0x38>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	68db      	ldr	r3, [r3, #12]
 800fa2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	4a04      	ldr	r2, [pc, #16]	; (800fa44 <prvResetNextTaskUnblockTime+0x3c>)
 800fa32:	6013      	str	r3, [r2, #0]
}
 800fa34:	bf00      	nop
 800fa36:	370c      	adds	r7, #12
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr
 800fa40:	20001020 	.word	0x20001020
 800fa44:	20001088 	.word	0x20001088

0800fa48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fa4e:	4b0b      	ldr	r3, [pc, #44]	; (800fa7c <xTaskGetSchedulerState+0x34>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d102      	bne.n	800fa5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fa56:	2301      	movs	r3, #1
 800fa58:	607b      	str	r3, [r7, #4]
 800fa5a:	e008      	b.n	800fa6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa5c:	4b08      	ldr	r3, [pc, #32]	; (800fa80 <xTaskGetSchedulerState+0x38>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d102      	bne.n	800fa6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fa64:	2302      	movs	r3, #2
 800fa66:	607b      	str	r3, [r7, #4]
 800fa68:	e001      	b.n	800fa6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fa6e:	687b      	ldr	r3, [r7, #4]
	}
 800fa70:	4618      	mov	r0, r3
 800fa72:	370c      	adds	r7, #12
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr
 800fa7c:	20001074 	.word	0x20001074
 800fa80:	20001090 	.word	0x20001090

0800fa84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b086      	sub	sp, #24
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fa90:	2300      	movs	r3, #0
 800fa92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d056      	beq.n	800fb48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fa9a:	4b2e      	ldr	r3, [pc, #184]	; (800fb54 <xTaskPriorityDisinherit+0xd0>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	693a      	ldr	r2, [r7, #16]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d00a      	beq.n	800faba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800faa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa8:	f383 8811 	msr	BASEPRI, r3
 800faac:	f3bf 8f6f 	isb	sy
 800fab0:	f3bf 8f4f 	dsb	sy
 800fab4:	60fb      	str	r3, [r7, #12]
}
 800fab6:	bf00      	nop
 800fab8:	e7fe      	b.n	800fab8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d10a      	bne.n	800fad8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac6:	f383 8811 	msr	BASEPRI, r3
 800faca:	f3bf 8f6f 	isb	sy
 800face:	f3bf 8f4f 	dsb	sy
 800fad2:	60bb      	str	r3, [r7, #8]
}
 800fad4:	bf00      	nop
 800fad6:	e7fe      	b.n	800fad6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fadc:	1e5a      	subs	r2, r3, #1
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800faea:	429a      	cmp	r2, r3
 800faec:	d02c      	beq.n	800fb48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d128      	bne.n	800fb48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	3304      	adds	r3, #4
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7fe fb6a 	bl	800e1d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb18:	4b0f      	ldr	r3, [pc, #60]	; (800fb58 <xTaskPriorityDisinherit+0xd4>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d903      	bls.n	800fb28 <xTaskPriorityDisinherit+0xa4>
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb24:	4a0c      	ldr	r2, [pc, #48]	; (800fb58 <xTaskPriorityDisinherit+0xd4>)
 800fb26:	6013      	str	r3, [r2, #0]
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	4413      	add	r3, r2
 800fb32:	009b      	lsls	r3, r3, #2
 800fb34:	4a09      	ldr	r2, [pc, #36]	; (800fb5c <xTaskPriorityDisinherit+0xd8>)
 800fb36:	441a      	add	r2, r3
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	3304      	adds	r3, #4
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	4610      	mov	r0, r2
 800fb40:	f7fe faeb 	bl	800e11a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fb44:	2301      	movs	r3, #1
 800fb46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb48:	697b      	ldr	r3, [r7, #20]
	}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3718      	adds	r7, #24
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}
 800fb52:	bf00      	nop
 800fb54:	20000b94 	.word	0x20000b94
 800fb58:	20001070 	.word	0x20001070
 800fb5c:	20000b98 	.word	0x20000b98

0800fb60 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b086      	sub	sp, #24
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	607a      	str	r2, [r7, #4]
 800fb6c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800fb6e:	f000 ff71 	bl	8010a54 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fb72:	4b26      	ldr	r3, [pc, #152]	; (800fc0c <xTaskNotifyWait+0xac>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	2b02      	cmp	r3, #2
 800fb7e:	d01a      	beq.n	800fbb6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800fb80:	4b22      	ldr	r3, [pc, #136]	; (800fc0c <xTaskNotifyWait+0xac>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fb86:	68fa      	ldr	r2, [r7, #12]
 800fb88:	43d2      	mvns	r2, r2
 800fb8a:	400a      	ands	r2, r1
 800fb8c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800fb8e:	4b1f      	ldr	r3, [pc, #124]	; (800fc0c <xTaskNotifyWait+0xac>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	2201      	movs	r2, #1
 800fb94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d00b      	beq.n	800fbb6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb9e:	2101      	movs	r1, #1
 800fba0:	6838      	ldr	r0, [r7, #0]
 800fba2:	f000 f9cb 	bl	800ff3c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800fba6:	4b1a      	ldr	r3, [pc, #104]	; (800fc10 <xTaskNotifyWait+0xb0>)
 800fba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbac:	601a      	str	r2, [r3, #0]
 800fbae:	f3bf 8f4f 	dsb	sy
 800fbb2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fbb6:	f000 ff7d 	bl	8010ab4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800fbba:	f000 ff4b 	bl	8010a54 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d004      	beq.n	800fbce <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800fbc4:	4b11      	ldr	r3, [pc, #68]	; (800fc0c <xTaskNotifyWait+0xac>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fbce:	4b0f      	ldr	r3, [pc, #60]	; (800fc0c <xTaskNotifyWait+0xac>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	2b02      	cmp	r3, #2
 800fbda:	d002      	beq.n	800fbe2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	617b      	str	r3, [r7, #20]
 800fbe0:	e008      	b.n	800fbf4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800fbe2:	4b0a      	ldr	r3, [pc, #40]	; (800fc0c <xTaskNotifyWait+0xac>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fbe8:	68ba      	ldr	r2, [r7, #8]
 800fbea:	43d2      	mvns	r2, r2
 800fbec:	400a      	ands	r2, r1
 800fbee:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fbf4:	4b05      	ldr	r3, [pc, #20]	; (800fc0c <xTaskNotifyWait+0xac>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800fbfe:	f000 ff59 	bl	8010ab4 <vPortExitCritical>

		return xReturn;
 800fc02:	697b      	ldr	r3, [r7, #20]
	}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3718      	adds	r7, #24
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}
 800fc0c:	20000b94 	.word	0x20000b94
 800fc10:	e000ed04 	.word	0xe000ed04

0800fc14 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b08a      	sub	sp, #40	; 0x28
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	603b      	str	r3, [r7, #0]
 800fc20:	4613      	mov	r3, r2
 800fc22:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800fc24:	2301      	movs	r3, #1
 800fc26:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d10a      	bne.n	800fc44 <xTaskGenericNotify+0x30>
	__asm volatile
 800fc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc32:	f383 8811 	msr	BASEPRI, r3
 800fc36:	f3bf 8f6f 	isb	sy
 800fc3a:	f3bf 8f4f 	dsb	sy
 800fc3e:	61bb      	str	r3, [r7, #24]
}
 800fc40:	bf00      	nop
 800fc42:	e7fe      	b.n	800fc42 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800fc48:	f000 ff04 	bl	8010a54 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d003      	beq.n	800fc5a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fc52:	6a3b      	ldr	r3, [r7, #32]
 800fc54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fc5a:	6a3b      	ldr	r3, [r7, #32]
 800fc5c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800fc60:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fc62:	6a3b      	ldr	r3, [r7, #32]
 800fc64:	2202      	movs	r2, #2
 800fc66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800fc6a:	79fb      	ldrb	r3, [r7, #7]
 800fc6c:	2b04      	cmp	r3, #4
 800fc6e:	d828      	bhi.n	800fcc2 <xTaskGenericNotify+0xae>
 800fc70:	a201      	add	r2, pc, #4	; (adr r2, 800fc78 <xTaskGenericNotify+0x64>)
 800fc72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc76:	bf00      	nop
 800fc78:	0800fce3 	.word	0x0800fce3
 800fc7c:	0800fc8d 	.word	0x0800fc8d
 800fc80:	0800fc9b 	.word	0x0800fc9b
 800fc84:	0800fca7 	.word	0x0800fca7
 800fc88:	0800fcaf 	.word	0x0800fcaf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800fc8c:	6a3b      	ldr	r3, [r7, #32]
 800fc8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	431a      	orrs	r2, r3
 800fc94:	6a3b      	ldr	r3, [r7, #32]
 800fc96:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fc98:	e026      	b.n	800fce8 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fc9a:	6a3b      	ldr	r3, [r7, #32]
 800fc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc9e:	1c5a      	adds	r2, r3, #1
 800fca0:	6a3b      	ldr	r3, [r7, #32]
 800fca2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fca4:	e020      	b.n	800fce8 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fca6:	6a3b      	ldr	r3, [r7, #32]
 800fca8:	68ba      	ldr	r2, [r7, #8]
 800fcaa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fcac:	e01c      	b.n	800fce8 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fcae:	7ffb      	ldrb	r3, [r7, #31]
 800fcb0:	2b02      	cmp	r3, #2
 800fcb2:	d003      	beq.n	800fcbc <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fcb4:	6a3b      	ldr	r3, [r7, #32]
 800fcb6:	68ba      	ldr	r2, [r7, #8]
 800fcb8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fcba:	e015      	b.n	800fce8 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800fcc0:	e012      	b.n	800fce8 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fcc2:	6a3b      	ldr	r3, [r7, #32]
 800fcc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcca:	d00c      	beq.n	800fce6 <xTaskGenericNotify+0xd2>
	__asm volatile
 800fccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd0:	f383 8811 	msr	BASEPRI, r3
 800fcd4:	f3bf 8f6f 	isb	sy
 800fcd8:	f3bf 8f4f 	dsb	sy
 800fcdc:	617b      	str	r3, [r7, #20]
}
 800fcde:	bf00      	nop
 800fce0:	e7fe      	b.n	800fce0 <xTaskGenericNotify+0xcc>
					break;
 800fce2:	bf00      	nop
 800fce4:	e000      	b.n	800fce8 <xTaskGenericNotify+0xd4>

					break;
 800fce6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fce8:	7ffb      	ldrb	r3, [r7, #31]
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d13a      	bne.n	800fd64 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcee:	6a3b      	ldr	r3, [r7, #32]
 800fcf0:	3304      	adds	r3, #4
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7fe fa6e 	bl	800e1d4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fcf8:	6a3b      	ldr	r3, [r7, #32]
 800fcfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcfc:	4b1d      	ldr	r3, [pc, #116]	; (800fd74 <xTaskGenericNotify+0x160>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d903      	bls.n	800fd0c <xTaskGenericNotify+0xf8>
 800fd04:	6a3b      	ldr	r3, [r7, #32]
 800fd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd08:	4a1a      	ldr	r2, [pc, #104]	; (800fd74 <xTaskGenericNotify+0x160>)
 800fd0a:	6013      	str	r3, [r2, #0]
 800fd0c:	6a3b      	ldr	r3, [r7, #32]
 800fd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd10:	4613      	mov	r3, r2
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	4413      	add	r3, r2
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	4a17      	ldr	r2, [pc, #92]	; (800fd78 <xTaskGenericNotify+0x164>)
 800fd1a:	441a      	add	r2, r3
 800fd1c:	6a3b      	ldr	r3, [r7, #32]
 800fd1e:	3304      	adds	r3, #4
 800fd20:	4619      	mov	r1, r3
 800fd22:	4610      	mov	r0, r2
 800fd24:	f7fe f9f9 	bl	800e11a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fd28:	6a3b      	ldr	r3, [r7, #32]
 800fd2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d00a      	beq.n	800fd46 <xTaskGenericNotify+0x132>
	__asm volatile
 800fd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd34:	f383 8811 	msr	BASEPRI, r3
 800fd38:	f3bf 8f6f 	isb	sy
 800fd3c:	f3bf 8f4f 	dsb	sy
 800fd40:	613b      	str	r3, [r7, #16]
}
 800fd42:	bf00      	nop
 800fd44:	e7fe      	b.n	800fd44 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd46:	6a3b      	ldr	r3, [r7, #32]
 800fd48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd4a:	4b0c      	ldr	r3, [pc, #48]	; (800fd7c <xTaskGenericNotify+0x168>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d907      	bls.n	800fd64 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800fd54:	4b0a      	ldr	r3, [pc, #40]	; (800fd80 <xTaskGenericNotify+0x16c>)
 800fd56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd5a:	601a      	str	r2, [r3, #0]
 800fd5c:	f3bf 8f4f 	dsb	sy
 800fd60:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fd64:	f000 fea6 	bl	8010ab4 <vPortExitCritical>

		return xReturn;
 800fd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3728      	adds	r7, #40	; 0x28
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	20001070 	.word	0x20001070
 800fd78:	20000b98 	.word	0x20000b98
 800fd7c:	20000b94 	.word	0x20000b94
 800fd80:	e000ed04 	.word	0xe000ed04

0800fd84 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b08e      	sub	sp, #56	; 0x38
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	603b      	str	r3, [r7, #0]
 800fd90:	4613      	mov	r3, r2
 800fd92:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800fd94:	2301      	movs	r3, #1
 800fd96:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d10a      	bne.n	800fdb4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800fd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda2:	f383 8811 	msr	BASEPRI, r3
 800fda6:	f3bf 8f6f 	isb	sy
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fdb0:	bf00      	nop
 800fdb2:	e7fe      	b.n	800fdb2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fdb4:	f000 ff30 	bl	8010c18 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800fdbc:	f3ef 8211 	mrs	r2, BASEPRI
 800fdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc4:	f383 8811 	msr	BASEPRI, r3
 800fdc8:	f3bf 8f6f 	isb	sy
 800fdcc:	f3bf 8f4f 	dsb	sy
 800fdd0:	623a      	str	r2, [r7, #32]
 800fdd2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800fdd4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fdd6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d003      	beq.n	800fde6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800fdec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf2:	2202      	movs	r2, #2
 800fdf4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800fdf8:	79fb      	ldrb	r3, [r7, #7]
 800fdfa:	2b04      	cmp	r3, #4
 800fdfc:	d828      	bhi.n	800fe50 <xTaskGenericNotifyFromISR+0xcc>
 800fdfe:	a201      	add	r2, pc, #4	; (adr r2, 800fe04 <xTaskGenericNotifyFromISR+0x80>)
 800fe00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe04:	0800fe71 	.word	0x0800fe71
 800fe08:	0800fe19 	.word	0x0800fe19
 800fe0c:	0800fe27 	.word	0x0800fe27
 800fe10:	0800fe33 	.word	0x0800fe33
 800fe14:	0800fe3b 	.word	0x0800fe3b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800fe18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	431a      	orrs	r2, r3
 800fe20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe22:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fe24:	e027      	b.n	800fe76 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fe26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe2a:	1c5a      	adds	r2, r3, #1
 800fe2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe2e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fe30:	e021      	b.n	800fe76 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fe32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe34:	68ba      	ldr	r2, [r7, #8]
 800fe36:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fe38:	e01d      	b.n	800fe76 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fe3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fe3e:	2b02      	cmp	r3, #2
 800fe40:	d003      	beq.n	800fe4a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fe42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe44:	68ba      	ldr	r2, [r7, #8]
 800fe46:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fe48:	e015      	b.n	800fe76 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800fe4e:	e012      	b.n	800fe76 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fe50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe58:	d00c      	beq.n	800fe74 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800fe5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe5e:	f383 8811 	msr	BASEPRI, r3
 800fe62:	f3bf 8f6f 	isb	sy
 800fe66:	f3bf 8f4f 	dsb	sy
 800fe6a:	61bb      	str	r3, [r7, #24]
}
 800fe6c:	bf00      	nop
 800fe6e:	e7fe      	b.n	800fe6e <xTaskGenericNotifyFromISR+0xea>
					break;
 800fe70:	bf00      	nop
 800fe72:	e000      	b.n	800fe76 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800fe74:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fe76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d146      	bne.n	800ff0c <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fe7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d00a      	beq.n	800fe9c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800fe86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8a:	f383 8811 	msr	BASEPRI, r3
 800fe8e:	f3bf 8f6f 	isb	sy
 800fe92:	f3bf 8f4f 	dsb	sy
 800fe96:	617b      	str	r3, [r7, #20]
}
 800fe98:	bf00      	nop
 800fe9a:	e7fe      	b.n	800fe9a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe9c:	4b21      	ldr	r3, [pc, #132]	; (800ff24 <xTaskGenericNotifyFromISR+0x1a0>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d11d      	bne.n	800fee0 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea6:	3304      	adds	r3, #4
 800fea8:	4618      	mov	r0, r3
 800feaa:	f7fe f993 	bl	800e1d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800feae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feb2:	4b1d      	ldr	r3, [pc, #116]	; (800ff28 <xTaskGenericNotifyFromISR+0x1a4>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d903      	bls.n	800fec2 <xTaskGenericNotifyFromISR+0x13e>
 800feba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800febc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800febe:	4a1a      	ldr	r2, [pc, #104]	; (800ff28 <xTaskGenericNotifyFromISR+0x1a4>)
 800fec0:	6013      	str	r3, [r2, #0]
 800fec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec6:	4613      	mov	r3, r2
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	4413      	add	r3, r2
 800fecc:	009b      	lsls	r3, r3, #2
 800fece:	4a17      	ldr	r2, [pc, #92]	; (800ff2c <xTaskGenericNotifyFromISR+0x1a8>)
 800fed0:	441a      	add	r2, r3
 800fed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed4:	3304      	adds	r3, #4
 800fed6:	4619      	mov	r1, r3
 800fed8:	4610      	mov	r0, r2
 800feda:	f7fe f91e 	bl	800e11a <vListInsertEnd>
 800fede:	e005      	b.n	800feec <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800fee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee2:	3318      	adds	r3, #24
 800fee4:	4619      	mov	r1, r3
 800fee6:	4812      	ldr	r0, [pc, #72]	; (800ff30 <xTaskGenericNotifyFromISR+0x1ac>)
 800fee8:	f7fe f917 	bl	800e11a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800feec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fef0:	4b10      	ldr	r3, [pc, #64]	; (800ff34 <xTaskGenericNotifyFromISR+0x1b0>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d908      	bls.n	800ff0c <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800fefa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d002      	beq.n	800ff06 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ff00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff02:	2201      	movs	r2, #1
 800ff04:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ff06:	4b0c      	ldr	r3, [pc, #48]	; (800ff38 <xTaskGenericNotifyFromISR+0x1b4>)
 800ff08:	2201      	movs	r2, #1
 800ff0a:	601a      	str	r2, [r3, #0]
 800ff0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	f383 8811 	msr	BASEPRI, r3
}
 800ff16:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800ff18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3738      	adds	r7, #56	; 0x38
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	20001090 	.word	0x20001090
 800ff28:	20001070 	.word	0x20001070
 800ff2c:	20000b98 	.word	0x20000b98
 800ff30:	20001028 	.word	0x20001028
 800ff34:	20000b94 	.word	0x20000b94
 800ff38:	2000107c 	.word	0x2000107c

0800ff3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ff46:	4b21      	ldr	r3, [pc, #132]	; (800ffcc <prvAddCurrentTaskToDelayedList+0x90>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff4c:	4b20      	ldr	r3, [pc, #128]	; (800ffd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	3304      	adds	r3, #4
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7fe f93e 	bl	800e1d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff5e:	d10a      	bne.n	800ff76 <prvAddCurrentTaskToDelayedList+0x3a>
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d007      	beq.n	800ff76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ff66:	4b1a      	ldr	r3, [pc, #104]	; (800ffd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	3304      	adds	r3, #4
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	4819      	ldr	r0, [pc, #100]	; (800ffd4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ff70:	f7fe f8d3 	bl	800e11a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ff74:	e026      	b.n	800ffc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ff76:	68fa      	ldr	r2, [r7, #12]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ff7e:	4b14      	ldr	r3, [pc, #80]	; (800ffd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	68ba      	ldr	r2, [r7, #8]
 800ff84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ff86:	68ba      	ldr	r2, [r7, #8]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d209      	bcs.n	800ffa2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ff8e:	4b12      	ldr	r3, [pc, #72]	; (800ffd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	4b0f      	ldr	r3, [pc, #60]	; (800ffd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	3304      	adds	r3, #4
 800ff98:	4619      	mov	r1, r3
 800ff9a:	4610      	mov	r0, r2
 800ff9c:	f7fe f8e1 	bl	800e162 <vListInsert>
}
 800ffa0:	e010      	b.n	800ffc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffa2:	4b0e      	ldr	r3, [pc, #56]	; (800ffdc <prvAddCurrentTaskToDelayedList+0xa0>)
 800ffa4:	681a      	ldr	r2, [r3, #0]
 800ffa6:	4b0a      	ldr	r3, [pc, #40]	; (800ffd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	3304      	adds	r3, #4
 800ffac:	4619      	mov	r1, r3
 800ffae:	4610      	mov	r0, r2
 800ffb0:	f7fe f8d7 	bl	800e162 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ffb4:	4b0a      	ldr	r3, [pc, #40]	; (800ffe0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	68ba      	ldr	r2, [r7, #8]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d202      	bcs.n	800ffc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ffbe:	4a08      	ldr	r2, [pc, #32]	; (800ffe0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	6013      	str	r3, [r2, #0]
}
 800ffc4:	bf00      	nop
 800ffc6:	3710      	adds	r7, #16
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	2000106c 	.word	0x2000106c
 800ffd0:	20000b94 	.word	0x20000b94
 800ffd4:	20001054 	.word	0x20001054
 800ffd8:	20001024 	.word	0x20001024
 800ffdc:	20001020 	.word	0x20001020
 800ffe0:	20001088 	.word	0x20001088

0800ffe4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b08a      	sub	sp, #40	; 0x28
 800ffe8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ffea:	2300      	movs	r3, #0
 800ffec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ffee:	f000 fba1 	bl	8010734 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fff2:	4b1c      	ldr	r3, [pc, #112]	; (8010064 <xTimerCreateTimerTask+0x80>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d021      	beq.n	801003e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fffa:	2300      	movs	r3, #0
 800fffc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fffe:	2300      	movs	r3, #0
 8010000:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010002:	1d3a      	adds	r2, r7, #4
 8010004:	f107 0108 	add.w	r1, r7, #8
 8010008:	f107 030c 	add.w	r3, r7, #12
 801000c:	4618      	mov	r0, r3
 801000e:	f7fe f83d 	bl	800e08c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010012:	6879      	ldr	r1, [r7, #4]
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	68fa      	ldr	r2, [r7, #12]
 8010018:	9202      	str	r2, [sp, #8]
 801001a:	9301      	str	r3, [sp, #4]
 801001c:	2302      	movs	r3, #2
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	2300      	movs	r3, #0
 8010022:	460a      	mov	r2, r1
 8010024:	4910      	ldr	r1, [pc, #64]	; (8010068 <xTimerCreateTimerTask+0x84>)
 8010026:	4811      	ldr	r0, [pc, #68]	; (801006c <xTimerCreateTimerTask+0x88>)
 8010028:	f7fe fef0 	bl	800ee0c <xTaskCreateStatic>
 801002c:	4603      	mov	r3, r0
 801002e:	4a10      	ldr	r2, [pc, #64]	; (8010070 <xTimerCreateTimerTask+0x8c>)
 8010030:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010032:	4b0f      	ldr	r3, [pc, #60]	; (8010070 <xTimerCreateTimerTask+0x8c>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d001      	beq.n	801003e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801003a:	2301      	movs	r3, #1
 801003c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d10a      	bne.n	801005a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010048:	f383 8811 	msr	BASEPRI, r3
 801004c:	f3bf 8f6f 	isb	sy
 8010050:	f3bf 8f4f 	dsb	sy
 8010054:	613b      	str	r3, [r7, #16]
}
 8010056:	bf00      	nop
 8010058:	e7fe      	b.n	8010058 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801005a:	697b      	ldr	r3, [r7, #20]
}
 801005c:	4618      	mov	r0, r3
 801005e:	3718      	adds	r7, #24
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	200010c4 	.word	0x200010c4
 8010068:	0801246c 	.word	0x0801246c
 801006c:	080102dd 	.word	0x080102dd
 8010070:	200010c8 	.word	0x200010c8

08010074 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010074:	b580      	push	{r7, lr}
 8010076:	b088      	sub	sp, #32
 8010078:	af02      	add	r7, sp, #8
 801007a:	60f8      	str	r0, [r7, #12]
 801007c:	60b9      	str	r1, [r7, #8]
 801007e:	607a      	str	r2, [r7, #4]
 8010080:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010082:	202c      	movs	r0, #44	; 0x2c
 8010084:	f000 fe08 	bl	8010c98 <pvPortMalloc>
 8010088:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d00d      	beq.n	80100ac <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	2200      	movs	r2, #0
 8010094:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	9301      	str	r3, [sp, #4]
 801009c:	6a3b      	ldr	r3, [r7, #32]
 801009e:	9300      	str	r3, [sp, #0]
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	68b9      	ldr	r1, [r7, #8]
 80100a6:	68f8      	ldr	r0, [r7, #12]
 80100a8:	f000 f843 	bl	8010132 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80100ac:	697b      	ldr	r3, [r7, #20]
	}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3718      	adds	r7, #24
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}

080100b6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80100b6:	b580      	push	{r7, lr}
 80100b8:	b08a      	sub	sp, #40	; 0x28
 80100ba:	af02      	add	r7, sp, #8
 80100bc:	60f8      	str	r0, [r7, #12]
 80100be:	60b9      	str	r1, [r7, #8]
 80100c0:	607a      	str	r2, [r7, #4]
 80100c2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80100c4:	232c      	movs	r3, #44	; 0x2c
 80100c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	2b2c      	cmp	r3, #44	; 0x2c
 80100cc:	d00a      	beq.n	80100e4 <xTimerCreateStatic+0x2e>
	__asm volatile
 80100ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d2:	f383 8811 	msr	BASEPRI, r3
 80100d6:	f3bf 8f6f 	isb	sy
 80100da:	f3bf 8f4f 	dsb	sy
 80100de:	61bb      	str	r3, [r7, #24]
}
 80100e0:	bf00      	nop
 80100e2:	e7fe      	b.n	80100e2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80100e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80100e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d10a      	bne.n	8010102 <xTimerCreateStatic+0x4c>
	__asm volatile
 80100ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f0:	f383 8811 	msr	BASEPRI, r3
 80100f4:	f3bf 8f6f 	isb	sy
 80100f8:	f3bf 8f4f 	dsb	sy
 80100fc:	617b      	str	r3, [r7, #20]
}
 80100fe:	bf00      	nop
 8010100:	e7fe      	b.n	8010100 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8010102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010104:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d00d      	beq.n	8010128 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 801010c:	69fb      	ldr	r3, [r7, #28]
 801010e:	2202      	movs	r2, #2
 8010110:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	9301      	str	r3, [sp, #4]
 8010118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801011a:	9300      	str	r3, [sp, #0]
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	687a      	ldr	r2, [r7, #4]
 8010120:	68b9      	ldr	r1, [r7, #8]
 8010122:	68f8      	ldr	r0, [r7, #12]
 8010124:	f000 f805 	bl	8010132 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010128:	69fb      	ldr	r3, [r7, #28]
	}
 801012a:	4618      	mov	r0, r3
 801012c:	3720      	adds	r7, #32
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}

08010132 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010132:	b580      	push	{r7, lr}
 8010134:	b086      	sub	sp, #24
 8010136:	af00      	add	r7, sp, #0
 8010138:	60f8      	str	r0, [r7, #12]
 801013a:	60b9      	str	r1, [r7, #8]
 801013c:	607a      	str	r2, [r7, #4]
 801013e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d10a      	bne.n	801015c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8010146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014a:	f383 8811 	msr	BASEPRI, r3
 801014e:	f3bf 8f6f 	isb	sy
 8010152:	f3bf 8f4f 	dsb	sy
 8010156:	617b      	str	r3, [r7, #20]
}
 8010158:	bf00      	nop
 801015a:	e7fe      	b.n	801015a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 801015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015e:	2b00      	cmp	r3, #0
 8010160:	d01e      	beq.n	80101a0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8010162:	f000 fae7 	bl	8010734 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8010166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010168:	68fa      	ldr	r2, [r7, #12]
 801016a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801016c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016e:	68ba      	ldr	r2, [r7, #8]
 8010170:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8010172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010174:	683a      	ldr	r2, [r7, #0]
 8010176:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017a:	6a3a      	ldr	r2, [r7, #32]
 801017c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801017e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010180:	3304      	adds	r3, #4
 8010182:	4618      	mov	r0, r3
 8010184:	f7fd ffbc 	bl	800e100 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d008      	beq.n	80101a0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801018e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010194:	f043 0304 	orr.w	r3, r3, #4
 8010198:	b2da      	uxtb	r2, r3
 801019a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80101a0:	bf00      	nop
 80101a2:	3718      	adds	r7, #24
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b08a      	sub	sp, #40	; 0x28
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	60f8      	str	r0, [r7, #12]
 80101b0:	60b9      	str	r1, [r7, #8]
 80101b2:	607a      	str	r2, [r7, #4]
 80101b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80101b6:	2300      	movs	r3, #0
 80101b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d10a      	bne.n	80101d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80101c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c4:	f383 8811 	msr	BASEPRI, r3
 80101c8:	f3bf 8f6f 	isb	sy
 80101cc:	f3bf 8f4f 	dsb	sy
 80101d0:	623b      	str	r3, [r7, #32]
}
 80101d2:	bf00      	nop
 80101d4:	e7fe      	b.n	80101d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80101d6:	4b1a      	ldr	r3, [pc, #104]	; (8010240 <xTimerGenericCommand+0x98>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d02a      	beq.n	8010234 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	2b05      	cmp	r3, #5
 80101ee:	dc18      	bgt.n	8010222 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80101f0:	f7ff fc2a 	bl	800fa48 <xTaskGetSchedulerState>
 80101f4:	4603      	mov	r3, r0
 80101f6:	2b02      	cmp	r3, #2
 80101f8:	d109      	bne.n	801020e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80101fa:	4b11      	ldr	r3, [pc, #68]	; (8010240 <xTimerGenericCommand+0x98>)
 80101fc:	6818      	ldr	r0, [r3, #0]
 80101fe:	f107 0110 	add.w	r1, r7, #16
 8010202:	2300      	movs	r3, #0
 8010204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010206:	f7fe f999 	bl	800e53c <xQueueGenericSend>
 801020a:	6278      	str	r0, [r7, #36]	; 0x24
 801020c:	e012      	b.n	8010234 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801020e:	4b0c      	ldr	r3, [pc, #48]	; (8010240 <xTimerGenericCommand+0x98>)
 8010210:	6818      	ldr	r0, [r3, #0]
 8010212:	f107 0110 	add.w	r1, r7, #16
 8010216:	2300      	movs	r3, #0
 8010218:	2200      	movs	r2, #0
 801021a:	f7fe f98f 	bl	800e53c <xQueueGenericSend>
 801021e:	6278      	str	r0, [r7, #36]	; 0x24
 8010220:	e008      	b.n	8010234 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010222:	4b07      	ldr	r3, [pc, #28]	; (8010240 <xTimerGenericCommand+0x98>)
 8010224:	6818      	ldr	r0, [r3, #0]
 8010226:	f107 0110 	add.w	r1, r7, #16
 801022a:	2300      	movs	r3, #0
 801022c:	683a      	ldr	r2, [r7, #0]
 801022e:	f7fe fa83 	bl	800e738 <xQueueGenericSendFromISR>
 8010232:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010236:	4618      	mov	r0, r3
 8010238:	3728      	adds	r7, #40	; 0x28
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
 801023e:	bf00      	nop
 8010240:	200010c4 	.word	0x200010c4

08010244 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b088      	sub	sp, #32
 8010248:	af02      	add	r7, sp, #8
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801024e:	4b22      	ldr	r3, [pc, #136]	; (80102d8 <prvProcessExpiredTimer+0x94>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	68db      	ldr	r3, [r3, #12]
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	3304      	adds	r3, #4
 801025c:	4618      	mov	r0, r3
 801025e:	f7fd ffb9 	bl	800e1d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010268:	f003 0304 	and.w	r3, r3, #4
 801026c:	2b00      	cmp	r3, #0
 801026e:	d022      	beq.n	80102b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	699a      	ldr	r2, [r3, #24]
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	18d1      	adds	r1, r2, r3
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	683a      	ldr	r2, [r7, #0]
 801027c:	6978      	ldr	r0, [r7, #20]
 801027e:	f000 f8d1 	bl	8010424 <prvInsertTimerInActiveList>
 8010282:	4603      	mov	r3, r0
 8010284:	2b00      	cmp	r3, #0
 8010286:	d01f      	beq.n	80102c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010288:	2300      	movs	r3, #0
 801028a:	9300      	str	r3, [sp, #0]
 801028c:	2300      	movs	r3, #0
 801028e:	687a      	ldr	r2, [r7, #4]
 8010290:	2100      	movs	r1, #0
 8010292:	6978      	ldr	r0, [r7, #20]
 8010294:	f7ff ff88 	bl	80101a8 <xTimerGenericCommand>
 8010298:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d113      	bne.n	80102c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80102a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a4:	f383 8811 	msr	BASEPRI, r3
 80102a8:	f3bf 8f6f 	isb	sy
 80102ac:	f3bf 8f4f 	dsb	sy
 80102b0:	60fb      	str	r3, [r7, #12]
}
 80102b2:	bf00      	nop
 80102b4:	e7fe      	b.n	80102b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102bc:	f023 0301 	bic.w	r3, r3, #1
 80102c0:	b2da      	uxtb	r2, r3
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	6a1b      	ldr	r3, [r3, #32]
 80102cc:	6978      	ldr	r0, [r7, #20]
 80102ce:	4798      	blx	r3
}
 80102d0:	bf00      	nop
 80102d2:	3718      	adds	r7, #24
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	200010bc 	.word	0x200010bc

080102dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80102e4:	f107 0308 	add.w	r3, r7, #8
 80102e8:	4618      	mov	r0, r3
 80102ea:	f000 f857 	bl	801039c <prvGetNextExpireTime>
 80102ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	4619      	mov	r1, r3
 80102f4:	68f8      	ldr	r0, [r7, #12]
 80102f6:	f000 f803 	bl	8010300 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80102fa:	f000 f8d5 	bl	80104a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80102fe:	e7f1      	b.n	80102e4 <prvTimerTask+0x8>

08010300 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801030a:	f7fe ffbb 	bl	800f284 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801030e:	f107 0308 	add.w	r3, r7, #8
 8010312:	4618      	mov	r0, r3
 8010314:	f000 f866 	bl	80103e4 <prvSampleTimeNow>
 8010318:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d130      	bne.n	8010382 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d10a      	bne.n	801033c <prvProcessTimerOrBlockTask+0x3c>
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	429a      	cmp	r2, r3
 801032c:	d806      	bhi.n	801033c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801032e:	f7fe ffb7 	bl	800f2a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010332:	68f9      	ldr	r1, [r7, #12]
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7ff ff85 	bl	8010244 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801033a:	e024      	b.n	8010386 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d008      	beq.n	8010354 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010342:	4b13      	ldr	r3, [pc, #76]	; (8010390 <prvProcessTimerOrBlockTask+0x90>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d101      	bne.n	8010350 <prvProcessTimerOrBlockTask+0x50>
 801034c:	2301      	movs	r3, #1
 801034e:	e000      	b.n	8010352 <prvProcessTimerOrBlockTask+0x52>
 8010350:	2300      	movs	r3, #0
 8010352:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010354:	4b0f      	ldr	r3, [pc, #60]	; (8010394 <prvProcessTimerOrBlockTask+0x94>)
 8010356:	6818      	ldr	r0, [r3, #0]
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	1ad3      	subs	r3, r2, r3
 801035e:	683a      	ldr	r2, [r7, #0]
 8010360:	4619      	mov	r1, r3
 8010362:	f7fe fd1f 	bl	800eda4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010366:	f7fe ff9b 	bl	800f2a0 <xTaskResumeAll>
 801036a:	4603      	mov	r3, r0
 801036c:	2b00      	cmp	r3, #0
 801036e:	d10a      	bne.n	8010386 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010370:	4b09      	ldr	r3, [pc, #36]	; (8010398 <prvProcessTimerOrBlockTask+0x98>)
 8010372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010376:	601a      	str	r2, [r3, #0]
 8010378:	f3bf 8f4f 	dsb	sy
 801037c:	f3bf 8f6f 	isb	sy
}
 8010380:	e001      	b.n	8010386 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010382:	f7fe ff8d 	bl	800f2a0 <xTaskResumeAll>
}
 8010386:	bf00      	nop
 8010388:	3710      	adds	r7, #16
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	200010c0 	.word	0x200010c0
 8010394:	200010c4 	.word	0x200010c4
 8010398:	e000ed04 	.word	0xe000ed04

0801039c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801039c:	b480      	push	{r7}
 801039e:	b085      	sub	sp, #20
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80103a4:	4b0e      	ldr	r3, [pc, #56]	; (80103e0 <prvGetNextExpireTime+0x44>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d101      	bne.n	80103b2 <prvGetNextExpireTime+0x16>
 80103ae:	2201      	movs	r2, #1
 80103b0:	e000      	b.n	80103b4 <prvGetNextExpireTime+0x18>
 80103b2:	2200      	movs	r2, #0
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d105      	bne.n	80103cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80103c0:	4b07      	ldr	r3, [pc, #28]	; (80103e0 <prvGetNextExpireTime+0x44>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	68db      	ldr	r3, [r3, #12]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	60fb      	str	r3, [r7, #12]
 80103ca:	e001      	b.n	80103d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80103cc:	2300      	movs	r3, #0
 80103ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80103d0:	68fb      	ldr	r3, [r7, #12]
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3714      	adds	r7, #20
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr
 80103de:	bf00      	nop
 80103e0:	200010bc 	.word	0x200010bc

080103e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80103ec:	f7fe fff6 	bl	800f3dc <xTaskGetTickCount>
 80103f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80103f2:	4b0b      	ldr	r3, [pc, #44]	; (8010420 <prvSampleTimeNow+0x3c>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	68fa      	ldr	r2, [r7, #12]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d205      	bcs.n	8010408 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80103fc:	f000 f936 	bl	801066c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2201      	movs	r2, #1
 8010404:	601a      	str	r2, [r3, #0]
 8010406:	e002      	b.n	801040e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2200      	movs	r2, #0
 801040c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801040e:	4a04      	ldr	r2, [pc, #16]	; (8010420 <prvSampleTimeNow+0x3c>)
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010414:	68fb      	ldr	r3, [r7, #12]
}
 8010416:	4618      	mov	r0, r3
 8010418:	3710      	adds	r7, #16
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	200010cc 	.word	0x200010cc

08010424 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b086      	sub	sp, #24
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]
 8010430:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010432:	2300      	movs	r3, #0
 8010434:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	68ba      	ldr	r2, [r7, #8]
 801043a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	68fa      	ldr	r2, [r7, #12]
 8010440:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010442:	68ba      	ldr	r2, [r7, #8]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	429a      	cmp	r2, r3
 8010448:	d812      	bhi.n	8010470 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801044a:	687a      	ldr	r2, [r7, #4]
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	1ad2      	subs	r2, r2, r3
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	699b      	ldr	r3, [r3, #24]
 8010454:	429a      	cmp	r2, r3
 8010456:	d302      	bcc.n	801045e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010458:	2301      	movs	r3, #1
 801045a:	617b      	str	r3, [r7, #20]
 801045c:	e01b      	b.n	8010496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801045e:	4b10      	ldr	r3, [pc, #64]	; (80104a0 <prvInsertTimerInActiveList+0x7c>)
 8010460:	681a      	ldr	r2, [r3, #0]
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	3304      	adds	r3, #4
 8010466:	4619      	mov	r1, r3
 8010468:	4610      	mov	r0, r2
 801046a:	f7fd fe7a 	bl	800e162 <vListInsert>
 801046e:	e012      	b.n	8010496 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010470:	687a      	ldr	r2, [r7, #4]
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	429a      	cmp	r2, r3
 8010476:	d206      	bcs.n	8010486 <prvInsertTimerInActiveList+0x62>
 8010478:	68ba      	ldr	r2, [r7, #8]
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	429a      	cmp	r2, r3
 801047e:	d302      	bcc.n	8010486 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010480:	2301      	movs	r3, #1
 8010482:	617b      	str	r3, [r7, #20]
 8010484:	e007      	b.n	8010496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010486:	4b07      	ldr	r3, [pc, #28]	; (80104a4 <prvInsertTimerInActiveList+0x80>)
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	3304      	adds	r3, #4
 801048e:	4619      	mov	r1, r3
 8010490:	4610      	mov	r0, r2
 8010492:	f7fd fe66 	bl	800e162 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010496:	697b      	ldr	r3, [r7, #20]
}
 8010498:	4618      	mov	r0, r3
 801049a:	3718      	adds	r7, #24
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}
 80104a0:	200010c0 	.word	0x200010c0
 80104a4:	200010bc 	.word	0x200010bc

080104a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b08e      	sub	sp, #56	; 0x38
 80104ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80104ae:	e0ca      	b.n	8010646 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	da18      	bge.n	80104e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80104b6:	1d3b      	adds	r3, r7, #4
 80104b8:	3304      	adds	r3, #4
 80104ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80104bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d10a      	bne.n	80104d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80104c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c6:	f383 8811 	msr	BASEPRI, r3
 80104ca:	f3bf 8f6f 	isb	sy
 80104ce:	f3bf 8f4f 	dsb	sy
 80104d2:	61fb      	str	r3, [r7, #28]
}
 80104d4:	bf00      	nop
 80104d6:	e7fe      	b.n	80104d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80104d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104de:	6850      	ldr	r0, [r2, #4]
 80104e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104e2:	6892      	ldr	r2, [r2, #8]
 80104e4:	4611      	mov	r1, r2
 80104e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f2c0 80aa 	blt.w	8010644 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80104f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f6:	695b      	ldr	r3, [r3, #20]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d004      	beq.n	8010506 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80104fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fe:	3304      	adds	r3, #4
 8010500:	4618      	mov	r0, r3
 8010502:	f7fd fe67 	bl	800e1d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010506:	463b      	mov	r3, r7
 8010508:	4618      	mov	r0, r3
 801050a:	f7ff ff6b 	bl	80103e4 <prvSampleTimeNow>
 801050e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2b09      	cmp	r3, #9
 8010514:	f200 8097 	bhi.w	8010646 <prvProcessReceivedCommands+0x19e>
 8010518:	a201      	add	r2, pc, #4	; (adr r2, 8010520 <prvProcessReceivedCommands+0x78>)
 801051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801051e:	bf00      	nop
 8010520:	08010549 	.word	0x08010549
 8010524:	08010549 	.word	0x08010549
 8010528:	08010549 	.word	0x08010549
 801052c:	080105bd 	.word	0x080105bd
 8010530:	080105d1 	.word	0x080105d1
 8010534:	0801061b 	.word	0x0801061b
 8010538:	08010549 	.word	0x08010549
 801053c:	08010549 	.word	0x08010549
 8010540:	080105bd 	.word	0x080105bd
 8010544:	080105d1 	.word	0x080105d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801054e:	f043 0301 	orr.w	r3, r3, #1
 8010552:	b2da      	uxtb	r2, r3
 8010554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801055a:	68ba      	ldr	r2, [r7, #8]
 801055c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055e:	699b      	ldr	r3, [r3, #24]
 8010560:	18d1      	adds	r1, r2, r3
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010568:	f7ff ff5c 	bl	8010424 <prvInsertTimerInActiveList>
 801056c:	4603      	mov	r3, r0
 801056e:	2b00      	cmp	r3, #0
 8010570:	d069      	beq.n	8010646 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010574:	6a1b      	ldr	r3, [r3, #32]
 8010576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010578:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801057a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801057c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010580:	f003 0304 	and.w	r3, r3, #4
 8010584:	2b00      	cmp	r3, #0
 8010586:	d05e      	beq.n	8010646 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010588:	68ba      	ldr	r2, [r7, #8]
 801058a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058c:	699b      	ldr	r3, [r3, #24]
 801058e:	441a      	add	r2, r3
 8010590:	2300      	movs	r3, #0
 8010592:	9300      	str	r3, [sp, #0]
 8010594:	2300      	movs	r3, #0
 8010596:	2100      	movs	r1, #0
 8010598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801059a:	f7ff fe05 	bl	80101a8 <xTimerGenericCommand>
 801059e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80105a0:	6a3b      	ldr	r3, [r7, #32]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d14f      	bne.n	8010646 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80105a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105aa:	f383 8811 	msr	BASEPRI, r3
 80105ae:	f3bf 8f6f 	isb	sy
 80105b2:	f3bf 8f4f 	dsb	sy
 80105b6:	61bb      	str	r3, [r7, #24]
}
 80105b8:	bf00      	nop
 80105ba:	e7fe      	b.n	80105ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80105bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105c2:	f023 0301 	bic.w	r3, r3, #1
 80105c6:	b2da      	uxtb	r2, r3
 80105c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80105ce:	e03a      	b.n	8010646 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80105d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105d6:	f043 0301 	orr.w	r3, r3, #1
 80105da:	b2da      	uxtb	r2, r3
 80105dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80105e2:	68ba      	ldr	r2, [r7, #8]
 80105e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80105e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ea:	699b      	ldr	r3, [r3, #24]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d10a      	bne.n	8010606 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80105f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f4:	f383 8811 	msr	BASEPRI, r3
 80105f8:	f3bf 8f6f 	isb	sy
 80105fc:	f3bf 8f4f 	dsb	sy
 8010600:	617b      	str	r3, [r7, #20]
}
 8010602:	bf00      	nop
 8010604:	e7fe      	b.n	8010604 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010608:	699a      	ldr	r2, [r3, #24]
 801060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060c:	18d1      	adds	r1, r2, r3
 801060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010614:	f7ff ff06 	bl	8010424 <prvInsertTimerInActiveList>
					break;
 8010618:	e015      	b.n	8010646 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010620:	f003 0302 	and.w	r3, r3, #2
 8010624:	2b00      	cmp	r3, #0
 8010626:	d103      	bne.n	8010630 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801062a:	f000 fc01 	bl	8010e30 <vPortFree>
 801062e:	e00a      	b.n	8010646 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010636:	f023 0301 	bic.w	r3, r3, #1
 801063a:	b2da      	uxtb	r2, r3
 801063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010642:	e000      	b.n	8010646 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010644:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010646:	4b08      	ldr	r3, [pc, #32]	; (8010668 <prvProcessReceivedCommands+0x1c0>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	1d39      	adds	r1, r7, #4
 801064c:	2200      	movs	r2, #0
 801064e:	4618      	mov	r0, r3
 8010650:	f7fe f90e 	bl	800e870 <xQueueReceive>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	f47f af2a 	bne.w	80104b0 <prvProcessReceivedCommands+0x8>
	}
}
 801065c:	bf00      	nop
 801065e:	bf00      	nop
 8010660:	3730      	adds	r7, #48	; 0x30
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}
 8010666:	bf00      	nop
 8010668:	200010c4 	.word	0x200010c4

0801066c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b088      	sub	sp, #32
 8010670:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010672:	e048      	b.n	8010706 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010674:	4b2d      	ldr	r3, [pc, #180]	; (801072c <prvSwitchTimerLists+0xc0>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	68db      	ldr	r3, [r3, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801067e:	4b2b      	ldr	r3, [pc, #172]	; (801072c <prvSwitchTimerLists+0xc0>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	68db      	ldr	r3, [r3, #12]
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	3304      	adds	r3, #4
 801068c:	4618      	mov	r0, r3
 801068e:	f7fd fda1 	bl	800e1d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	6a1b      	ldr	r3, [r3, #32]
 8010696:	68f8      	ldr	r0, [r7, #12]
 8010698:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106a0:	f003 0304 	and.w	r3, r3, #4
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d02e      	beq.n	8010706 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	699b      	ldr	r3, [r3, #24]
 80106ac:	693a      	ldr	r2, [r7, #16]
 80106ae:	4413      	add	r3, r2
 80106b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80106b2:	68ba      	ldr	r2, [r7, #8]
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d90e      	bls.n	80106d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	68ba      	ldr	r2, [r7, #8]
 80106be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	68fa      	ldr	r2, [r7, #12]
 80106c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80106c6:	4b19      	ldr	r3, [pc, #100]	; (801072c <prvSwitchTimerLists+0xc0>)
 80106c8:	681a      	ldr	r2, [r3, #0]
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	3304      	adds	r3, #4
 80106ce:	4619      	mov	r1, r3
 80106d0:	4610      	mov	r0, r2
 80106d2:	f7fd fd46 	bl	800e162 <vListInsert>
 80106d6:	e016      	b.n	8010706 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80106d8:	2300      	movs	r3, #0
 80106da:	9300      	str	r3, [sp, #0]
 80106dc:	2300      	movs	r3, #0
 80106de:	693a      	ldr	r2, [r7, #16]
 80106e0:	2100      	movs	r1, #0
 80106e2:	68f8      	ldr	r0, [r7, #12]
 80106e4:	f7ff fd60 	bl	80101a8 <xTimerGenericCommand>
 80106e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d10a      	bne.n	8010706 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80106f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f4:	f383 8811 	msr	BASEPRI, r3
 80106f8:	f3bf 8f6f 	isb	sy
 80106fc:	f3bf 8f4f 	dsb	sy
 8010700:	603b      	str	r3, [r7, #0]
}
 8010702:	bf00      	nop
 8010704:	e7fe      	b.n	8010704 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010706:	4b09      	ldr	r3, [pc, #36]	; (801072c <prvSwitchTimerLists+0xc0>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d1b1      	bne.n	8010674 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010710:	4b06      	ldr	r3, [pc, #24]	; (801072c <prvSwitchTimerLists+0xc0>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010716:	4b06      	ldr	r3, [pc, #24]	; (8010730 <prvSwitchTimerLists+0xc4>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4a04      	ldr	r2, [pc, #16]	; (801072c <prvSwitchTimerLists+0xc0>)
 801071c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801071e:	4a04      	ldr	r2, [pc, #16]	; (8010730 <prvSwitchTimerLists+0xc4>)
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	6013      	str	r3, [r2, #0]
}
 8010724:	bf00      	nop
 8010726:	3718      	adds	r7, #24
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}
 801072c:	200010bc 	.word	0x200010bc
 8010730:	200010c0 	.word	0x200010c0

08010734 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801073a:	f000 f98b 	bl	8010a54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801073e:	4b15      	ldr	r3, [pc, #84]	; (8010794 <prvCheckForValidListAndQueue+0x60>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d120      	bne.n	8010788 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010746:	4814      	ldr	r0, [pc, #80]	; (8010798 <prvCheckForValidListAndQueue+0x64>)
 8010748:	f7fd fcba 	bl	800e0c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801074c:	4813      	ldr	r0, [pc, #76]	; (801079c <prvCheckForValidListAndQueue+0x68>)
 801074e:	f7fd fcb7 	bl	800e0c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010752:	4b13      	ldr	r3, [pc, #76]	; (80107a0 <prvCheckForValidListAndQueue+0x6c>)
 8010754:	4a10      	ldr	r2, [pc, #64]	; (8010798 <prvCheckForValidListAndQueue+0x64>)
 8010756:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010758:	4b12      	ldr	r3, [pc, #72]	; (80107a4 <prvCheckForValidListAndQueue+0x70>)
 801075a:	4a10      	ldr	r2, [pc, #64]	; (801079c <prvCheckForValidListAndQueue+0x68>)
 801075c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801075e:	2300      	movs	r3, #0
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	4b11      	ldr	r3, [pc, #68]	; (80107a8 <prvCheckForValidListAndQueue+0x74>)
 8010764:	4a11      	ldr	r2, [pc, #68]	; (80107ac <prvCheckForValidListAndQueue+0x78>)
 8010766:	2110      	movs	r1, #16
 8010768:	200a      	movs	r0, #10
 801076a:	f7fd fdc5 	bl	800e2f8 <xQueueGenericCreateStatic>
 801076e:	4603      	mov	r3, r0
 8010770:	4a08      	ldr	r2, [pc, #32]	; (8010794 <prvCheckForValidListAndQueue+0x60>)
 8010772:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010774:	4b07      	ldr	r3, [pc, #28]	; (8010794 <prvCheckForValidListAndQueue+0x60>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d005      	beq.n	8010788 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801077c:	4b05      	ldr	r3, [pc, #20]	; (8010794 <prvCheckForValidListAndQueue+0x60>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	490b      	ldr	r1, [pc, #44]	; (80107b0 <prvCheckForValidListAndQueue+0x7c>)
 8010782:	4618      	mov	r0, r3
 8010784:	f7fe fae4 	bl	800ed50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010788:	f000 f994 	bl	8010ab4 <vPortExitCritical>
}
 801078c:	bf00      	nop
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	200010c4 	.word	0x200010c4
 8010798:	20001094 	.word	0x20001094
 801079c:	200010a8 	.word	0x200010a8
 80107a0:	200010bc 	.word	0x200010bc
 80107a4:	200010c0 	.word	0x200010c0
 80107a8:	20001170 	.word	0x20001170
 80107ac:	200010d0 	.word	0x200010d0
 80107b0:	08012474 	.word	0x08012474

080107b4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b086      	sub	sp, #24
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d10a      	bne.n	80107dc <pvTimerGetTimerID+0x28>
	__asm volatile
 80107c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ca:	f383 8811 	msr	BASEPRI, r3
 80107ce:	f3bf 8f6f 	isb	sy
 80107d2:	f3bf 8f4f 	dsb	sy
 80107d6:	60fb      	str	r3, [r7, #12]
}
 80107d8:	bf00      	nop
 80107da:	e7fe      	b.n	80107da <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80107dc:	f000 f93a 	bl	8010a54 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	69db      	ldr	r3, [r3, #28]
 80107e4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80107e6:	f000 f965 	bl	8010ab4 <vPortExitCritical>

	return pvReturn;
 80107ea:	693b      	ldr	r3, [r7, #16]
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3718      	adds	r7, #24
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80107f4:	b480      	push	{r7}
 80107f6:	b085      	sub	sp, #20
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	60b9      	str	r1, [r7, #8]
 80107fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	3b04      	subs	r3, #4
 8010804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801080c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	3b04      	subs	r3, #4
 8010812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	f023 0201 	bic.w	r2, r3, #1
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	3b04      	subs	r3, #4
 8010822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010824:	4a0c      	ldr	r2, [pc, #48]	; (8010858 <pxPortInitialiseStack+0x64>)
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	3b14      	subs	r3, #20
 801082e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010830:	687a      	ldr	r2, [r7, #4]
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	3b04      	subs	r3, #4
 801083a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	f06f 0202 	mvn.w	r2, #2
 8010842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	3b20      	subs	r3, #32
 8010848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801084a:	68fb      	ldr	r3, [r7, #12]
}
 801084c:	4618      	mov	r0, r3
 801084e:	3714      	adds	r7, #20
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr
 8010858:	0801085d 	.word	0x0801085d

0801085c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801085c:	b480      	push	{r7}
 801085e:	b085      	sub	sp, #20
 8010860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010862:	2300      	movs	r3, #0
 8010864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010866:	4b12      	ldr	r3, [pc, #72]	; (80108b0 <prvTaskExitError+0x54>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801086e:	d00a      	beq.n	8010886 <prvTaskExitError+0x2a>
	__asm volatile
 8010870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010874:	f383 8811 	msr	BASEPRI, r3
 8010878:	f3bf 8f6f 	isb	sy
 801087c:	f3bf 8f4f 	dsb	sy
 8010880:	60fb      	str	r3, [r7, #12]
}
 8010882:	bf00      	nop
 8010884:	e7fe      	b.n	8010884 <prvTaskExitError+0x28>
	__asm volatile
 8010886:	f04f 0350 	mov.w	r3, #80	; 0x50
 801088a:	f383 8811 	msr	BASEPRI, r3
 801088e:	f3bf 8f6f 	isb	sy
 8010892:	f3bf 8f4f 	dsb	sy
 8010896:	60bb      	str	r3, [r7, #8]
}
 8010898:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801089a:	bf00      	nop
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d0fc      	beq.n	801089c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80108a2:	bf00      	nop
 80108a4:	bf00      	nop
 80108a6:	3714      	adds	r7, #20
 80108a8:	46bd      	mov	sp, r7
 80108aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ae:	4770      	bx	lr
 80108b0:	20000120 	.word	0x20000120
	...

080108c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80108c0:	4b07      	ldr	r3, [pc, #28]	; (80108e0 <pxCurrentTCBConst2>)
 80108c2:	6819      	ldr	r1, [r3, #0]
 80108c4:	6808      	ldr	r0, [r1, #0]
 80108c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ca:	f380 8809 	msr	PSP, r0
 80108ce:	f3bf 8f6f 	isb	sy
 80108d2:	f04f 0000 	mov.w	r0, #0
 80108d6:	f380 8811 	msr	BASEPRI, r0
 80108da:	4770      	bx	lr
 80108dc:	f3af 8000 	nop.w

080108e0 <pxCurrentTCBConst2>:
 80108e0:	20000b94 	.word	0x20000b94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80108e4:	bf00      	nop
 80108e6:	bf00      	nop

080108e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80108e8:	4808      	ldr	r0, [pc, #32]	; (801090c <prvPortStartFirstTask+0x24>)
 80108ea:	6800      	ldr	r0, [r0, #0]
 80108ec:	6800      	ldr	r0, [r0, #0]
 80108ee:	f380 8808 	msr	MSP, r0
 80108f2:	f04f 0000 	mov.w	r0, #0
 80108f6:	f380 8814 	msr	CONTROL, r0
 80108fa:	b662      	cpsie	i
 80108fc:	b661      	cpsie	f
 80108fe:	f3bf 8f4f 	dsb	sy
 8010902:	f3bf 8f6f 	isb	sy
 8010906:	df00      	svc	0
 8010908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801090a:	bf00      	nop
 801090c:	e000ed08 	.word	0xe000ed08

08010910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b086      	sub	sp, #24
 8010914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010916:	4b46      	ldr	r3, [pc, #280]	; (8010a30 <xPortStartScheduler+0x120>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	4a46      	ldr	r2, [pc, #280]	; (8010a34 <xPortStartScheduler+0x124>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d10a      	bne.n	8010936 <xPortStartScheduler+0x26>
	__asm volatile
 8010920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010924:	f383 8811 	msr	BASEPRI, r3
 8010928:	f3bf 8f6f 	isb	sy
 801092c:	f3bf 8f4f 	dsb	sy
 8010930:	613b      	str	r3, [r7, #16]
}
 8010932:	bf00      	nop
 8010934:	e7fe      	b.n	8010934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010936:	4b3e      	ldr	r3, [pc, #248]	; (8010a30 <xPortStartScheduler+0x120>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	4a3f      	ldr	r2, [pc, #252]	; (8010a38 <xPortStartScheduler+0x128>)
 801093c:	4293      	cmp	r3, r2
 801093e:	d10a      	bne.n	8010956 <xPortStartScheduler+0x46>
	__asm volatile
 8010940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010944:	f383 8811 	msr	BASEPRI, r3
 8010948:	f3bf 8f6f 	isb	sy
 801094c:	f3bf 8f4f 	dsb	sy
 8010950:	60fb      	str	r3, [r7, #12]
}
 8010952:	bf00      	nop
 8010954:	e7fe      	b.n	8010954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010956:	4b39      	ldr	r3, [pc, #228]	; (8010a3c <xPortStartScheduler+0x12c>)
 8010958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	b2db      	uxtb	r3, r3
 8010960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	22ff      	movs	r2, #255	; 0xff
 8010966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	b2db      	uxtb	r3, r3
 801096e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010970:	78fb      	ldrb	r3, [r7, #3]
 8010972:	b2db      	uxtb	r3, r3
 8010974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010978:	b2da      	uxtb	r2, r3
 801097a:	4b31      	ldr	r3, [pc, #196]	; (8010a40 <xPortStartScheduler+0x130>)
 801097c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801097e:	4b31      	ldr	r3, [pc, #196]	; (8010a44 <xPortStartScheduler+0x134>)
 8010980:	2207      	movs	r2, #7
 8010982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010984:	e009      	b.n	801099a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010986:	4b2f      	ldr	r3, [pc, #188]	; (8010a44 <xPortStartScheduler+0x134>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	3b01      	subs	r3, #1
 801098c:	4a2d      	ldr	r2, [pc, #180]	; (8010a44 <xPortStartScheduler+0x134>)
 801098e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010990:	78fb      	ldrb	r3, [r7, #3]
 8010992:	b2db      	uxtb	r3, r3
 8010994:	005b      	lsls	r3, r3, #1
 8010996:	b2db      	uxtb	r3, r3
 8010998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801099a:	78fb      	ldrb	r3, [r7, #3]
 801099c:	b2db      	uxtb	r3, r3
 801099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109a2:	2b80      	cmp	r3, #128	; 0x80
 80109a4:	d0ef      	beq.n	8010986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80109a6:	4b27      	ldr	r3, [pc, #156]	; (8010a44 <xPortStartScheduler+0x134>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f1c3 0307 	rsb	r3, r3, #7
 80109ae:	2b04      	cmp	r3, #4
 80109b0:	d00a      	beq.n	80109c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80109b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b6:	f383 8811 	msr	BASEPRI, r3
 80109ba:	f3bf 8f6f 	isb	sy
 80109be:	f3bf 8f4f 	dsb	sy
 80109c2:	60bb      	str	r3, [r7, #8]
}
 80109c4:	bf00      	nop
 80109c6:	e7fe      	b.n	80109c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80109c8:	4b1e      	ldr	r3, [pc, #120]	; (8010a44 <xPortStartScheduler+0x134>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	021b      	lsls	r3, r3, #8
 80109ce:	4a1d      	ldr	r2, [pc, #116]	; (8010a44 <xPortStartScheduler+0x134>)
 80109d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80109d2:	4b1c      	ldr	r3, [pc, #112]	; (8010a44 <xPortStartScheduler+0x134>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80109da:	4a1a      	ldr	r2, [pc, #104]	; (8010a44 <xPortStartScheduler+0x134>)
 80109dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	b2da      	uxtb	r2, r3
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80109e6:	4b18      	ldr	r3, [pc, #96]	; (8010a48 <xPortStartScheduler+0x138>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	4a17      	ldr	r2, [pc, #92]	; (8010a48 <xPortStartScheduler+0x138>)
 80109ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80109f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80109f2:	4b15      	ldr	r3, [pc, #84]	; (8010a48 <xPortStartScheduler+0x138>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	4a14      	ldr	r2, [pc, #80]	; (8010a48 <xPortStartScheduler+0x138>)
 80109f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80109fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80109fe:	f000 f8dd 	bl	8010bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010a02:	4b12      	ldr	r3, [pc, #72]	; (8010a4c <xPortStartScheduler+0x13c>)
 8010a04:	2200      	movs	r2, #0
 8010a06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010a08:	f000 f8fc 	bl	8010c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010a0c:	4b10      	ldr	r3, [pc, #64]	; (8010a50 <xPortStartScheduler+0x140>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	4a0f      	ldr	r2, [pc, #60]	; (8010a50 <xPortStartScheduler+0x140>)
 8010a12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010a16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010a18:	f7ff ff66 	bl	80108e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010a1c:	f7fe fda8 	bl	800f570 <vTaskSwitchContext>
	prvTaskExitError();
 8010a20:	f7ff ff1c 	bl	801085c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010a24:	2300      	movs	r3, #0
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3718      	adds	r7, #24
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	e000ed00 	.word	0xe000ed00
 8010a34:	410fc271 	.word	0x410fc271
 8010a38:	410fc270 	.word	0x410fc270
 8010a3c:	e000e400 	.word	0xe000e400
 8010a40:	200011c0 	.word	0x200011c0
 8010a44:	200011c4 	.word	0x200011c4
 8010a48:	e000ed20 	.word	0xe000ed20
 8010a4c:	20000120 	.word	0x20000120
 8010a50:	e000ef34 	.word	0xe000ef34

08010a54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010a54:	b480      	push	{r7}
 8010a56:	b083      	sub	sp, #12
 8010a58:	af00      	add	r7, sp, #0
	__asm volatile
 8010a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a5e:	f383 8811 	msr	BASEPRI, r3
 8010a62:	f3bf 8f6f 	isb	sy
 8010a66:	f3bf 8f4f 	dsb	sy
 8010a6a:	607b      	str	r3, [r7, #4]
}
 8010a6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010a6e:	4b0f      	ldr	r3, [pc, #60]	; (8010aac <vPortEnterCritical+0x58>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	3301      	adds	r3, #1
 8010a74:	4a0d      	ldr	r2, [pc, #52]	; (8010aac <vPortEnterCritical+0x58>)
 8010a76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010a78:	4b0c      	ldr	r3, [pc, #48]	; (8010aac <vPortEnterCritical+0x58>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	2b01      	cmp	r3, #1
 8010a7e:	d10f      	bne.n	8010aa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010a80:	4b0b      	ldr	r3, [pc, #44]	; (8010ab0 <vPortEnterCritical+0x5c>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d00a      	beq.n	8010aa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a8e:	f383 8811 	msr	BASEPRI, r3
 8010a92:	f3bf 8f6f 	isb	sy
 8010a96:	f3bf 8f4f 	dsb	sy
 8010a9a:	603b      	str	r3, [r7, #0]
}
 8010a9c:	bf00      	nop
 8010a9e:	e7fe      	b.n	8010a9e <vPortEnterCritical+0x4a>
	}
}
 8010aa0:	bf00      	nop
 8010aa2:	370c      	adds	r7, #12
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr
 8010aac:	20000120 	.word	0x20000120
 8010ab0:	e000ed04 	.word	0xe000ed04

08010ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b083      	sub	sp, #12
 8010ab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010aba:	4b12      	ldr	r3, [pc, #72]	; (8010b04 <vPortExitCritical+0x50>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d10a      	bne.n	8010ad8 <vPortExitCritical+0x24>
	__asm volatile
 8010ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac6:	f383 8811 	msr	BASEPRI, r3
 8010aca:	f3bf 8f6f 	isb	sy
 8010ace:	f3bf 8f4f 	dsb	sy
 8010ad2:	607b      	str	r3, [r7, #4]
}
 8010ad4:	bf00      	nop
 8010ad6:	e7fe      	b.n	8010ad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010ad8:	4b0a      	ldr	r3, [pc, #40]	; (8010b04 <vPortExitCritical+0x50>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	3b01      	subs	r3, #1
 8010ade:	4a09      	ldr	r2, [pc, #36]	; (8010b04 <vPortExitCritical+0x50>)
 8010ae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010ae2:	4b08      	ldr	r3, [pc, #32]	; (8010b04 <vPortExitCritical+0x50>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d105      	bne.n	8010af6 <vPortExitCritical+0x42>
 8010aea:	2300      	movs	r3, #0
 8010aec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	f383 8811 	msr	BASEPRI, r3
}
 8010af4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010af6:	bf00      	nop
 8010af8:	370c      	adds	r7, #12
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr
 8010b02:	bf00      	nop
 8010b04:	20000120 	.word	0x20000120
	...

08010b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010b10:	f3ef 8009 	mrs	r0, PSP
 8010b14:	f3bf 8f6f 	isb	sy
 8010b18:	4b15      	ldr	r3, [pc, #84]	; (8010b70 <pxCurrentTCBConst>)
 8010b1a:	681a      	ldr	r2, [r3, #0]
 8010b1c:	f01e 0f10 	tst.w	lr, #16
 8010b20:	bf08      	it	eq
 8010b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b2a:	6010      	str	r0, [r2, #0]
 8010b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010b34:	f380 8811 	msr	BASEPRI, r0
 8010b38:	f3bf 8f4f 	dsb	sy
 8010b3c:	f3bf 8f6f 	isb	sy
 8010b40:	f7fe fd16 	bl	800f570 <vTaskSwitchContext>
 8010b44:	f04f 0000 	mov.w	r0, #0
 8010b48:	f380 8811 	msr	BASEPRI, r0
 8010b4c:	bc09      	pop	{r0, r3}
 8010b4e:	6819      	ldr	r1, [r3, #0]
 8010b50:	6808      	ldr	r0, [r1, #0]
 8010b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b56:	f01e 0f10 	tst.w	lr, #16
 8010b5a:	bf08      	it	eq
 8010b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010b60:	f380 8809 	msr	PSP, r0
 8010b64:	f3bf 8f6f 	isb	sy
 8010b68:	4770      	bx	lr
 8010b6a:	bf00      	nop
 8010b6c:	f3af 8000 	nop.w

08010b70 <pxCurrentTCBConst>:
 8010b70:	20000b94 	.word	0x20000b94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010b74:	bf00      	nop
 8010b76:	bf00      	nop

08010b78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8010b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b82:	f383 8811 	msr	BASEPRI, r3
 8010b86:	f3bf 8f6f 	isb	sy
 8010b8a:	f3bf 8f4f 	dsb	sy
 8010b8e:	607b      	str	r3, [r7, #4]
}
 8010b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010b92:	f7fe fc33 	bl	800f3fc <xTaskIncrementTick>
 8010b96:	4603      	mov	r3, r0
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d003      	beq.n	8010ba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010b9c:	4b06      	ldr	r3, [pc, #24]	; (8010bb8 <xPortSysTickHandler+0x40>)
 8010b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ba2:	601a      	str	r2, [r3, #0]
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	f383 8811 	msr	BASEPRI, r3
}
 8010bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010bb0:	bf00      	nop
 8010bb2:	3708      	adds	r7, #8
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	e000ed04 	.word	0xe000ed04

08010bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010bc0:	4b0b      	ldr	r3, [pc, #44]	; (8010bf0 <vPortSetupTimerInterrupt+0x34>)
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010bc6:	4b0b      	ldr	r3, [pc, #44]	; (8010bf4 <vPortSetupTimerInterrupt+0x38>)
 8010bc8:	2200      	movs	r2, #0
 8010bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010bcc:	4b0a      	ldr	r3, [pc, #40]	; (8010bf8 <vPortSetupTimerInterrupt+0x3c>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4a0a      	ldr	r2, [pc, #40]	; (8010bfc <vPortSetupTimerInterrupt+0x40>)
 8010bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8010bd6:	099b      	lsrs	r3, r3, #6
 8010bd8:	4a09      	ldr	r2, [pc, #36]	; (8010c00 <vPortSetupTimerInterrupt+0x44>)
 8010bda:	3b01      	subs	r3, #1
 8010bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010bde:	4b04      	ldr	r3, [pc, #16]	; (8010bf0 <vPortSetupTimerInterrupt+0x34>)
 8010be0:	2207      	movs	r2, #7
 8010be2:	601a      	str	r2, [r3, #0]
}
 8010be4:	bf00      	nop
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop
 8010bf0:	e000e010 	.word	0xe000e010
 8010bf4:	e000e018 	.word	0xe000e018
 8010bf8:	20000004 	.word	0x20000004
 8010bfc:	10624dd3 	.word	0x10624dd3
 8010c00:	e000e014 	.word	0xe000e014

08010c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010c04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010c14 <vPortEnableVFP+0x10>
 8010c08:	6801      	ldr	r1, [r0, #0]
 8010c0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010c0e:	6001      	str	r1, [r0, #0]
 8010c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010c12:	bf00      	nop
 8010c14:	e000ed88 	.word	0xe000ed88

08010c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010c18:	b480      	push	{r7}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010c1e:	f3ef 8305 	mrs	r3, IPSR
 8010c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	2b0f      	cmp	r3, #15
 8010c28:	d914      	bls.n	8010c54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010c2a:	4a17      	ldr	r2, [pc, #92]	; (8010c88 <vPortValidateInterruptPriority+0x70>)
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	4413      	add	r3, r2
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010c34:	4b15      	ldr	r3, [pc, #84]	; (8010c8c <vPortValidateInterruptPriority+0x74>)
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	7afa      	ldrb	r2, [r7, #11]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d20a      	bcs.n	8010c54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c42:	f383 8811 	msr	BASEPRI, r3
 8010c46:	f3bf 8f6f 	isb	sy
 8010c4a:	f3bf 8f4f 	dsb	sy
 8010c4e:	607b      	str	r3, [r7, #4]
}
 8010c50:	bf00      	nop
 8010c52:	e7fe      	b.n	8010c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010c54:	4b0e      	ldr	r3, [pc, #56]	; (8010c90 <vPortValidateInterruptPriority+0x78>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010c5c:	4b0d      	ldr	r3, [pc, #52]	; (8010c94 <vPortValidateInterruptPriority+0x7c>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d90a      	bls.n	8010c7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c68:	f383 8811 	msr	BASEPRI, r3
 8010c6c:	f3bf 8f6f 	isb	sy
 8010c70:	f3bf 8f4f 	dsb	sy
 8010c74:	603b      	str	r3, [r7, #0]
}
 8010c76:	bf00      	nop
 8010c78:	e7fe      	b.n	8010c78 <vPortValidateInterruptPriority+0x60>
	}
 8010c7a:	bf00      	nop
 8010c7c:	3714      	adds	r7, #20
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop
 8010c88:	e000e3f0 	.word	0xe000e3f0
 8010c8c:	200011c0 	.word	0x200011c0
 8010c90:	e000ed0c 	.word	0xe000ed0c
 8010c94:	200011c4 	.word	0x200011c4

08010c98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b08a      	sub	sp, #40	; 0x28
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010ca4:	f7fe faee 	bl	800f284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010ca8:	4b5b      	ldr	r3, [pc, #364]	; (8010e18 <pvPortMalloc+0x180>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d101      	bne.n	8010cb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010cb0:	f000 f920 	bl	8010ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010cb4:	4b59      	ldr	r3, [pc, #356]	; (8010e1c <pvPortMalloc+0x184>)
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	4013      	ands	r3, r2
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	f040 8093 	bne.w	8010de8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d01d      	beq.n	8010d04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010cc8:	2208      	movs	r2, #8
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	4413      	add	r3, r2
 8010cce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f003 0307 	and.w	r3, r3, #7
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d014      	beq.n	8010d04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f023 0307 	bic.w	r3, r3, #7
 8010ce0:	3308      	adds	r3, #8
 8010ce2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f003 0307 	and.w	r3, r3, #7
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d00a      	beq.n	8010d04 <pvPortMalloc+0x6c>
	__asm volatile
 8010cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf2:	f383 8811 	msr	BASEPRI, r3
 8010cf6:	f3bf 8f6f 	isb	sy
 8010cfa:	f3bf 8f4f 	dsb	sy
 8010cfe:	617b      	str	r3, [r7, #20]
}
 8010d00:	bf00      	nop
 8010d02:	e7fe      	b.n	8010d02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d06e      	beq.n	8010de8 <pvPortMalloc+0x150>
 8010d0a:	4b45      	ldr	r3, [pc, #276]	; (8010e20 <pvPortMalloc+0x188>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	687a      	ldr	r2, [r7, #4]
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d869      	bhi.n	8010de8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010d14:	4b43      	ldr	r3, [pc, #268]	; (8010e24 <pvPortMalloc+0x18c>)
 8010d16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010d18:	4b42      	ldr	r3, [pc, #264]	; (8010e24 <pvPortMalloc+0x18c>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d1e:	e004      	b.n	8010d2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	687a      	ldr	r2, [r7, #4]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d903      	bls.n	8010d3c <pvPortMalloc+0xa4>
 8010d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d1f1      	bne.n	8010d20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010d3c:	4b36      	ldr	r3, [pc, #216]	; (8010e18 <pvPortMalloc+0x180>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d050      	beq.n	8010de8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010d46:	6a3b      	ldr	r3, [r7, #32]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	2208      	movs	r2, #8
 8010d4c:	4413      	add	r3, r2
 8010d4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	6a3b      	ldr	r3, [r7, #32]
 8010d56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5a:	685a      	ldr	r2, [r3, #4]
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	1ad2      	subs	r2, r2, r3
 8010d60:	2308      	movs	r3, #8
 8010d62:	005b      	lsls	r3, r3, #1
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d91f      	bls.n	8010da8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d70:	69bb      	ldr	r3, [r7, #24]
 8010d72:	f003 0307 	and.w	r3, r3, #7
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00a      	beq.n	8010d90 <pvPortMalloc+0xf8>
	__asm volatile
 8010d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d7e:	f383 8811 	msr	BASEPRI, r3
 8010d82:	f3bf 8f6f 	isb	sy
 8010d86:	f3bf 8f4f 	dsb	sy
 8010d8a:	613b      	str	r3, [r7, #16]
}
 8010d8c:	bf00      	nop
 8010d8e:	e7fe      	b.n	8010d8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d92:	685a      	ldr	r2, [r3, #4]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	1ad2      	subs	r2, r2, r3
 8010d98:	69bb      	ldr	r3, [r7, #24]
 8010d9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9e:	687a      	ldr	r2, [r7, #4]
 8010da0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010da2:	69b8      	ldr	r0, [r7, #24]
 8010da4:	f000 f908 	bl	8010fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010da8:	4b1d      	ldr	r3, [pc, #116]	; (8010e20 <pvPortMalloc+0x188>)
 8010daa:	681a      	ldr	r2, [r3, #0]
 8010dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dae:	685b      	ldr	r3, [r3, #4]
 8010db0:	1ad3      	subs	r3, r2, r3
 8010db2:	4a1b      	ldr	r2, [pc, #108]	; (8010e20 <pvPortMalloc+0x188>)
 8010db4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010db6:	4b1a      	ldr	r3, [pc, #104]	; (8010e20 <pvPortMalloc+0x188>)
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	4b1b      	ldr	r3, [pc, #108]	; (8010e28 <pvPortMalloc+0x190>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d203      	bcs.n	8010dca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010dc2:	4b17      	ldr	r3, [pc, #92]	; (8010e20 <pvPortMalloc+0x188>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	4a18      	ldr	r2, [pc, #96]	; (8010e28 <pvPortMalloc+0x190>)
 8010dc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dcc:	685a      	ldr	r2, [r3, #4]
 8010dce:	4b13      	ldr	r3, [pc, #76]	; (8010e1c <pvPortMalloc+0x184>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	431a      	orrs	r2, r3
 8010dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dda:	2200      	movs	r2, #0
 8010ddc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010dde:	4b13      	ldr	r3, [pc, #76]	; (8010e2c <pvPortMalloc+0x194>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	3301      	adds	r3, #1
 8010de4:	4a11      	ldr	r2, [pc, #68]	; (8010e2c <pvPortMalloc+0x194>)
 8010de6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010de8:	f7fe fa5a 	bl	800f2a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010dec:	69fb      	ldr	r3, [r7, #28]
 8010dee:	f003 0307 	and.w	r3, r3, #7
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d00a      	beq.n	8010e0c <pvPortMalloc+0x174>
	__asm volatile
 8010df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dfa:	f383 8811 	msr	BASEPRI, r3
 8010dfe:	f3bf 8f6f 	isb	sy
 8010e02:	f3bf 8f4f 	dsb	sy
 8010e06:	60fb      	str	r3, [r7, #12]
}
 8010e08:	bf00      	nop
 8010e0a:	e7fe      	b.n	8010e0a <pvPortMalloc+0x172>
	return pvReturn;
 8010e0c:	69fb      	ldr	r3, [r7, #28]
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3728      	adds	r7, #40	; 0x28
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}
 8010e16:	bf00      	nop
 8010e18:	200038e0 	.word	0x200038e0
 8010e1c:	200038f4 	.word	0x200038f4
 8010e20:	200038e4 	.word	0x200038e4
 8010e24:	200038d8 	.word	0x200038d8
 8010e28:	200038e8 	.word	0x200038e8
 8010e2c:	200038ec 	.word	0x200038ec

08010e30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b086      	sub	sp, #24
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d04d      	beq.n	8010ede <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010e42:	2308      	movs	r3, #8
 8010e44:	425b      	negs	r3, r3
 8010e46:	697a      	ldr	r2, [r7, #20]
 8010e48:	4413      	add	r3, r2
 8010e4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	685a      	ldr	r2, [r3, #4]
 8010e54:	4b24      	ldr	r3, [pc, #144]	; (8010ee8 <vPortFree+0xb8>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4013      	ands	r3, r2
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d10a      	bne.n	8010e74 <vPortFree+0x44>
	__asm volatile
 8010e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e62:	f383 8811 	msr	BASEPRI, r3
 8010e66:	f3bf 8f6f 	isb	sy
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	60fb      	str	r3, [r7, #12]
}
 8010e70:	bf00      	nop
 8010e72:	e7fe      	b.n	8010e72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d00a      	beq.n	8010e92 <vPortFree+0x62>
	__asm volatile
 8010e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e80:	f383 8811 	msr	BASEPRI, r3
 8010e84:	f3bf 8f6f 	isb	sy
 8010e88:	f3bf 8f4f 	dsb	sy
 8010e8c:	60bb      	str	r3, [r7, #8]
}
 8010e8e:	bf00      	nop
 8010e90:	e7fe      	b.n	8010e90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	685a      	ldr	r2, [r3, #4]
 8010e96:	4b14      	ldr	r3, [pc, #80]	; (8010ee8 <vPortFree+0xb8>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	4013      	ands	r3, r2
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d01e      	beq.n	8010ede <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d11a      	bne.n	8010ede <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010ea8:	693b      	ldr	r3, [r7, #16]
 8010eaa:	685a      	ldr	r2, [r3, #4]
 8010eac:	4b0e      	ldr	r3, [pc, #56]	; (8010ee8 <vPortFree+0xb8>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	43db      	mvns	r3, r3
 8010eb2:	401a      	ands	r2, r3
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010eb8:	f7fe f9e4 	bl	800f284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	685a      	ldr	r2, [r3, #4]
 8010ec0:	4b0a      	ldr	r3, [pc, #40]	; (8010eec <vPortFree+0xbc>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	4a09      	ldr	r2, [pc, #36]	; (8010eec <vPortFree+0xbc>)
 8010ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010eca:	6938      	ldr	r0, [r7, #16]
 8010ecc:	f000 f874 	bl	8010fb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010ed0:	4b07      	ldr	r3, [pc, #28]	; (8010ef0 <vPortFree+0xc0>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	4a06      	ldr	r2, [pc, #24]	; (8010ef0 <vPortFree+0xc0>)
 8010ed8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010eda:	f7fe f9e1 	bl	800f2a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010ede:	bf00      	nop
 8010ee0:	3718      	adds	r7, #24
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	200038f4 	.word	0x200038f4
 8010eec:	200038e4 	.word	0x200038e4
 8010ef0:	200038f0 	.word	0x200038f0

08010ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b085      	sub	sp, #20
 8010ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010efa:	f242 7310 	movw	r3, #10000	; 0x2710
 8010efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010f00:	4b27      	ldr	r3, [pc, #156]	; (8010fa0 <prvHeapInit+0xac>)
 8010f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	f003 0307 	and.w	r3, r3, #7
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d00c      	beq.n	8010f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	3307      	adds	r3, #7
 8010f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f023 0307 	bic.w	r3, r3, #7
 8010f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010f1c:	68ba      	ldr	r2, [r7, #8]
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	1ad3      	subs	r3, r2, r3
 8010f22:	4a1f      	ldr	r2, [pc, #124]	; (8010fa0 <prvHeapInit+0xac>)
 8010f24:	4413      	add	r3, r2
 8010f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010f2c:	4a1d      	ldr	r2, [pc, #116]	; (8010fa4 <prvHeapInit+0xb0>)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010f32:	4b1c      	ldr	r3, [pc, #112]	; (8010fa4 <prvHeapInit+0xb0>)
 8010f34:	2200      	movs	r2, #0
 8010f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	68ba      	ldr	r2, [r7, #8]
 8010f3c:	4413      	add	r3, r2
 8010f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010f40:	2208      	movs	r2, #8
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	1a9b      	subs	r3, r3, r2
 8010f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	f023 0307 	bic.w	r3, r3, #7
 8010f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	4a15      	ldr	r2, [pc, #84]	; (8010fa8 <prvHeapInit+0xb4>)
 8010f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010f56:	4b14      	ldr	r3, [pc, #80]	; (8010fa8 <prvHeapInit+0xb4>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010f5e:	4b12      	ldr	r3, [pc, #72]	; (8010fa8 <prvHeapInit+0xb4>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	2200      	movs	r2, #0
 8010f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	68fa      	ldr	r2, [r7, #12]
 8010f6e:	1ad2      	subs	r2, r2, r3
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010f74:	4b0c      	ldr	r3, [pc, #48]	; (8010fa8 <prvHeapInit+0xb4>)
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	4a0a      	ldr	r2, [pc, #40]	; (8010fac <prvHeapInit+0xb8>)
 8010f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	4a09      	ldr	r2, [pc, #36]	; (8010fb0 <prvHeapInit+0xbc>)
 8010f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010f8c:	4b09      	ldr	r3, [pc, #36]	; (8010fb4 <prvHeapInit+0xc0>)
 8010f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010f92:	601a      	str	r2, [r3, #0]
}
 8010f94:	bf00      	nop
 8010f96:	3714      	adds	r7, #20
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr
 8010fa0:	200011c8 	.word	0x200011c8
 8010fa4:	200038d8 	.word	0x200038d8
 8010fa8:	200038e0 	.word	0x200038e0
 8010fac:	200038e8 	.word	0x200038e8
 8010fb0:	200038e4 	.word	0x200038e4
 8010fb4:	200038f4 	.word	0x200038f4

08010fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010fb8:	b480      	push	{r7}
 8010fba:	b085      	sub	sp, #20
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010fc0:	4b28      	ldr	r3, [pc, #160]	; (8011064 <prvInsertBlockIntoFreeList+0xac>)
 8010fc2:	60fb      	str	r3, [r7, #12]
 8010fc4:	e002      	b.n	8010fcc <prvInsertBlockIntoFreeList+0x14>
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	60fb      	str	r3, [r7, #12]
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	687a      	ldr	r2, [r7, #4]
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d8f7      	bhi.n	8010fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	68ba      	ldr	r2, [r7, #8]
 8010fe0:	4413      	add	r3, r2
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d108      	bne.n	8010ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	685a      	ldr	r2, [r3, #4]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	441a      	add	r2, r3
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	68ba      	ldr	r2, [r7, #8]
 8011004:	441a      	add	r2, r3
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	429a      	cmp	r2, r3
 801100c:	d118      	bne.n	8011040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	681a      	ldr	r2, [r3, #0]
 8011012:	4b15      	ldr	r3, [pc, #84]	; (8011068 <prvInsertBlockIntoFreeList+0xb0>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	429a      	cmp	r2, r3
 8011018:	d00d      	beq.n	8011036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	685a      	ldr	r2, [r3, #4]
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	441a      	add	r2, r3
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	601a      	str	r2, [r3, #0]
 8011034:	e008      	b.n	8011048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011036:	4b0c      	ldr	r3, [pc, #48]	; (8011068 <prvInsertBlockIntoFreeList+0xb0>)
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	601a      	str	r2, [r3, #0]
 801103e:	e003      	b.n	8011048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	681a      	ldr	r2, [r3, #0]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011048:	68fa      	ldr	r2, [r7, #12]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	429a      	cmp	r2, r3
 801104e:	d002      	beq.n	8011056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	687a      	ldr	r2, [r7, #4]
 8011054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011056:	bf00      	nop
 8011058:	3714      	adds	r7, #20
 801105a:	46bd      	mov	sp, r7
 801105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011060:	4770      	bx	lr
 8011062:	bf00      	nop
 8011064:	200038d8 	.word	0x200038d8
 8011068:	200038e0 	.word	0x200038e0

0801106c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011070:	2200      	movs	r2, #0
 8011072:	4912      	ldr	r1, [pc, #72]	; (80110bc <MX_USB_Device_Init+0x50>)
 8011074:	4812      	ldr	r0, [pc, #72]	; (80110c0 <MX_USB_Device_Init+0x54>)
 8011076:	f7fa ff39 	bl	800beec <USBD_Init>
 801107a:	4603      	mov	r3, r0
 801107c:	2b00      	cmp	r3, #0
 801107e:	d001      	beq.n	8011084 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011080:	f7ef fedc 	bl	8000e3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011084:	490f      	ldr	r1, [pc, #60]	; (80110c4 <MX_USB_Device_Init+0x58>)
 8011086:	480e      	ldr	r0, [pc, #56]	; (80110c0 <MX_USB_Device_Init+0x54>)
 8011088:	f7fa ff60 	bl	800bf4c <USBD_RegisterClass>
 801108c:	4603      	mov	r3, r0
 801108e:	2b00      	cmp	r3, #0
 8011090:	d001      	beq.n	8011096 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011092:	f7ef fed3 	bl	8000e3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011096:	490c      	ldr	r1, [pc, #48]	; (80110c8 <MX_USB_Device_Init+0x5c>)
 8011098:	4809      	ldr	r0, [pc, #36]	; (80110c0 <MX_USB_Device_Init+0x54>)
 801109a:	f7fa feb1 	bl	800be00 <USBD_CDC_RegisterInterface>
 801109e:	4603      	mov	r3, r0
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d001      	beq.n	80110a8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80110a4:	f7ef feca 	bl	8000e3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80110a8:	4805      	ldr	r0, [pc, #20]	; (80110c0 <MX_USB_Device_Init+0x54>)
 80110aa:	f7fa ff76 	bl	800bf9a <USBD_Start>
 80110ae:	4603      	mov	r3, r0
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d001      	beq.n	80110b8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80110b4:	f7ef fec2 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80110b8:	bf00      	nop
 80110ba:	bd80      	pop	{r7, pc}
 80110bc:	20000138 	.word	0x20000138
 80110c0:	20003ef0 	.word	0x20003ef0
 80110c4:	2000001c 	.word	0x2000001c
 80110c8:	20000124 	.word	0x20000124

080110cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80110d0:	2200      	movs	r2, #0
 80110d2:	4905      	ldr	r1, [pc, #20]	; (80110e8 <CDC_Init_FS+0x1c>)
 80110d4:	4805      	ldr	r0, [pc, #20]	; (80110ec <CDC_Init_FS+0x20>)
 80110d6:	f7fa fea8 	bl	800be2a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80110da:	4905      	ldr	r1, [pc, #20]	; (80110f0 <CDC_Init_FS+0x24>)
 80110dc:	4803      	ldr	r0, [pc, #12]	; (80110ec <CDC_Init_FS+0x20>)
 80110de:	f7fa fec2 	bl	800be66 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80110e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	bd80      	pop	{r7, pc}
 80110e8:	200049c0 	.word	0x200049c0
 80110ec:	20003ef0 	.word	0x20003ef0
 80110f0:	200041c0 	.word	0x200041c0

080110f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80110f4:	b480      	push	{r7}
 80110f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80110f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr

08011104 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011104:	b480      	push	{r7}
 8011106:	b083      	sub	sp, #12
 8011108:	af00      	add	r7, sp, #0
 801110a:	4603      	mov	r3, r0
 801110c:	6039      	str	r1, [r7, #0]
 801110e:	71fb      	strb	r3, [r7, #7]
 8011110:	4613      	mov	r3, r2
 8011112:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011114:	79fb      	ldrb	r3, [r7, #7]
 8011116:	2b23      	cmp	r3, #35	; 0x23
 8011118:	d84a      	bhi.n	80111b0 <CDC_Control_FS+0xac>
 801111a:	a201      	add	r2, pc, #4	; (adr r2, 8011120 <CDC_Control_FS+0x1c>)
 801111c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011120:	080111b1 	.word	0x080111b1
 8011124:	080111b1 	.word	0x080111b1
 8011128:	080111b1 	.word	0x080111b1
 801112c:	080111b1 	.word	0x080111b1
 8011130:	080111b1 	.word	0x080111b1
 8011134:	080111b1 	.word	0x080111b1
 8011138:	080111b1 	.word	0x080111b1
 801113c:	080111b1 	.word	0x080111b1
 8011140:	080111b1 	.word	0x080111b1
 8011144:	080111b1 	.word	0x080111b1
 8011148:	080111b1 	.word	0x080111b1
 801114c:	080111b1 	.word	0x080111b1
 8011150:	080111b1 	.word	0x080111b1
 8011154:	080111b1 	.word	0x080111b1
 8011158:	080111b1 	.word	0x080111b1
 801115c:	080111b1 	.word	0x080111b1
 8011160:	080111b1 	.word	0x080111b1
 8011164:	080111b1 	.word	0x080111b1
 8011168:	080111b1 	.word	0x080111b1
 801116c:	080111b1 	.word	0x080111b1
 8011170:	080111b1 	.word	0x080111b1
 8011174:	080111b1 	.word	0x080111b1
 8011178:	080111b1 	.word	0x080111b1
 801117c:	080111b1 	.word	0x080111b1
 8011180:	080111b1 	.word	0x080111b1
 8011184:	080111b1 	.word	0x080111b1
 8011188:	080111b1 	.word	0x080111b1
 801118c:	080111b1 	.word	0x080111b1
 8011190:	080111b1 	.word	0x080111b1
 8011194:	080111b1 	.word	0x080111b1
 8011198:	080111b1 	.word	0x080111b1
 801119c:	080111b1 	.word	0x080111b1
 80111a0:	080111b1 	.word	0x080111b1
 80111a4:	080111b1 	.word	0x080111b1
 80111a8:	080111b1 	.word	0x080111b1
 80111ac:	080111b1 	.word	0x080111b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80111b0:	bf00      	nop
  }

  return (USBD_OK);
 80111b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80111b4:	4618      	mov	r0, r3
 80111b6:	370c      	adds	r7, #12
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr

080111c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80111ca:	6879      	ldr	r1, [r7, #4]
 80111cc:	4805      	ldr	r0, [pc, #20]	; (80111e4 <CDC_Receive_FS+0x24>)
 80111ce:	f7fa fe4a 	bl	800be66 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80111d2:	4804      	ldr	r0, [pc, #16]	; (80111e4 <CDC_Receive_FS+0x24>)
 80111d4:	f7fa fe60 	bl	800be98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80111d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3708      	adds	r7, #8
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	20003ef0 	.word	0x20003ef0

080111e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b087      	sub	sp, #28
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	60f8      	str	r0, [r7, #12]
 80111f0:	60b9      	str	r1, [r7, #8]
 80111f2:	4613      	mov	r3, r2
 80111f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80111f6:	2300      	movs	r3, #0
 80111f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80111fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80111fe:	4618      	mov	r0, r3
 8011200:	371c      	adds	r7, #28
 8011202:	46bd      	mov	sp, r7
 8011204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011208:	4770      	bx	lr
	...

0801120c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801120c:	b480      	push	{r7}
 801120e:	b083      	sub	sp, #12
 8011210:	af00      	add	r7, sp, #0
 8011212:	4603      	mov	r3, r0
 8011214:	6039      	str	r1, [r7, #0]
 8011216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	2212      	movs	r2, #18
 801121c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801121e:	4b03      	ldr	r3, [pc, #12]	; (801122c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011220:	4618      	mov	r0, r3
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr
 801122c:	20000158 	.word	0x20000158

08011230 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011230:	b480      	push	{r7}
 8011232:	b083      	sub	sp, #12
 8011234:	af00      	add	r7, sp, #0
 8011236:	4603      	mov	r3, r0
 8011238:	6039      	str	r1, [r7, #0]
 801123a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	2204      	movs	r2, #4
 8011240:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011242:	4b03      	ldr	r3, [pc, #12]	; (8011250 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011244:	4618      	mov	r0, r3
 8011246:	370c      	adds	r7, #12
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr
 8011250:	2000016c 	.word	0x2000016c

08011254 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
 801125a:	4603      	mov	r3, r0
 801125c:	6039      	str	r1, [r7, #0]
 801125e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011260:	79fb      	ldrb	r3, [r7, #7]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d105      	bne.n	8011272 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011266:	683a      	ldr	r2, [r7, #0]
 8011268:	4907      	ldr	r1, [pc, #28]	; (8011288 <USBD_CDC_ProductStrDescriptor+0x34>)
 801126a:	4808      	ldr	r0, [pc, #32]	; (801128c <USBD_CDC_ProductStrDescriptor+0x38>)
 801126c:	f7fb fe7d 	bl	800cf6a <USBD_GetString>
 8011270:	e004      	b.n	801127c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011272:	683a      	ldr	r2, [r7, #0]
 8011274:	4904      	ldr	r1, [pc, #16]	; (8011288 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011276:	4805      	ldr	r0, [pc, #20]	; (801128c <USBD_CDC_ProductStrDescriptor+0x38>)
 8011278:	f7fb fe77 	bl	800cf6a <USBD_GetString>
  }
  return USBD_StrDesc;
 801127c:	4b02      	ldr	r3, [pc, #8]	; (8011288 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801127e:	4618      	mov	r0, r3
 8011280:	3708      	adds	r7, #8
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	200051c0 	.word	0x200051c0
 801128c:	0801247c 	.word	0x0801247c

08011290 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	4603      	mov	r3, r0
 8011298:	6039      	str	r1, [r7, #0]
 801129a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801129c:	683a      	ldr	r2, [r7, #0]
 801129e:	4904      	ldr	r1, [pc, #16]	; (80112b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80112a0:	4804      	ldr	r0, [pc, #16]	; (80112b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80112a2:	f7fb fe62 	bl	800cf6a <USBD_GetString>
  return USBD_StrDesc;
 80112a6:	4b02      	ldr	r3, [pc, #8]	; (80112b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3708      	adds	r7, #8
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	200051c0 	.word	0x200051c0
 80112b4:	08012494 	.word	0x08012494

080112b8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
 80112be:	4603      	mov	r3, r0
 80112c0:	6039      	str	r1, [r7, #0]
 80112c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	221a      	movs	r2, #26
 80112c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80112ca:	f000 f843 	bl	8011354 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80112ce:	4b02      	ldr	r3, [pc, #8]	; (80112d8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3708      	adds	r7, #8
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}
 80112d8:	20000170 	.word	0x20000170

080112dc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b082      	sub	sp, #8
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	4603      	mov	r3, r0
 80112e4:	6039      	str	r1, [r7, #0]
 80112e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80112e8:	79fb      	ldrb	r3, [r7, #7]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d105      	bne.n	80112fa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80112ee:	683a      	ldr	r2, [r7, #0]
 80112f0:	4907      	ldr	r1, [pc, #28]	; (8011310 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80112f2:	4808      	ldr	r0, [pc, #32]	; (8011314 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80112f4:	f7fb fe39 	bl	800cf6a <USBD_GetString>
 80112f8:	e004      	b.n	8011304 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80112fa:	683a      	ldr	r2, [r7, #0]
 80112fc:	4904      	ldr	r1, [pc, #16]	; (8011310 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80112fe:	4805      	ldr	r0, [pc, #20]	; (8011314 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011300:	f7fb fe33 	bl	800cf6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011304:	4b02      	ldr	r3, [pc, #8]	; (8011310 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011306:	4618      	mov	r0, r3
 8011308:	3708      	adds	r7, #8
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	200051c0 	.word	0x200051c0
 8011314:	080124a8 	.word	0x080124a8

08011318 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b082      	sub	sp, #8
 801131c:	af00      	add	r7, sp, #0
 801131e:	4603      	mov	r3, r0
 8011320:	6039      	str	r1, [r7, #0]
 8011322:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011324:	79fb      	ldrb	r3, [r7, #7]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d105      	bne.n	8011336 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801132a:	683a      	ldr	r2, [r7, #0]
 801132c:	4907      	ldr	r1, [pc, #28]	; (801134c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801132e:	4808      	ldr	r0, [pc, #32]	; (8011350 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011330:	f7fb fe1b 	bl	800cf6a <USBD_GetString>
 8011334:	e004      	b.n	8011340 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011336:	683a      	ldr	r2, [r7, #0]
 8011338:	4904      	ldr	r1, [pc, #16]	; (801134c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801133a:	4805      	ldr	r0, [pc, #20]	; (8011350 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801133c:	f7fb fe15 	bl	800cf6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011340:	4b02      	ldr	r3, [pc, #8]	; (801134c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011342:	4618      	mov	r0, r3
 8011344:	3708      	adds	r7, #8
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}
 801134a:	bf00      	nop
 801134c:	200051c0 	.word	0x200051c0
 8011350:	080124b4 	.word	0x080124b4

08011354 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b084      	sub	sp, #16
 8011358:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801135a:	4b0f      	ldr	r3, [pc, #60]	; (8011398 <Get_SerialNum+0x44>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011360:	4b0e      	ldr	r3, [pc, #56]	; (801139c <Get_SerialNum+0x48>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011366:	4b0e      	ldr	r3, [pc, #56]	; (80113a0 <Get_SerialNum+0x4c>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801136c:	68fa      	ldr	r2, [r7, #12]
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	4413      	add	r3, r2
 8011372:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d009      	beq.n	801138e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801137a:	2208      	movs	r2, #8
 801137c:	4909      	ldr	r1, [pc, #36]	; (80113a4 <Get_SerialNum+0x50>)
 801137e:	68f8      	ldr	r0, [r7, #12]
 8011380:	f000 f814 	bl	80113ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011384:	2204      	movs	r2, #4
 8011386:	4908      	ldr	r1, [pc, #32]	; (80113a8 <Get_SerialNum+0x54>)
 8011388:	68b8      	ldr	r0, [r7, #8]
 801138a:	f000 f80f 	bl	80113ac <IntToUnicode>
  }
}
 801138e:	bf00      	nop
 8011390:	3710      	adds	r7, #16
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}
 8011396:	bf00      	nop
 8011398:	1fff7590 	.word	0x1fff7590
 801139c:	1fff7594 	.word	0x1fff7594
 80113a0:	1fff7598 	.word	0x1fff7598
 80113a4:	20000172 	.word	0x20000172
 80113a8:	20000182 	.word	0x20000182

080113ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b087      	sub	sp, #28
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	60f8      	str	r0, [r7, #12]
 80113b4:	60b9      	str	r1, [r7, #8]
 80113b6:	4613      	mov	r3, r2
 80113b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80113ba:	2300      	movs	r3, #0
 80113bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80113be:	2300      	movs	r3, #0
 80113c0:	75fb      	strb	r3, [r7, #23]
 80113c2:	e027      	b.n	8011414 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	0f1b      	lsrs	r3, r3, #28
 80113c8:	2b09      	cmp	r3, #9
 80113ca:	d80b      	bhi.n	80113e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	0f1b      	lsrs	r3, r3, #28
 80113d0:	b2da      	uxtb	r2, r3
 80113d2:	7dfb      	ldrb	r3, [r7, #23]
 80113d4:	005b      	lsls	r3, r3, #1
 80113d6:	4619      	mov	r1, r3
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	440b      	add	r3, r1
 80113dc:	3230      	adds	r2, #48	; 0x30
 80113de:	b2d2      	uxtb	r2, r2
 80113e0:	701a      	strb	r2, [r3, #0]
 80113e2:	e00a      	b.n	80113fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	0f1b      	lsrs	r3, r3, #28
 80113e8:	b2da      	uxtb	r2, r3
 80113ea:	7dfb      	ldrb	r3, [r7, #23]
 80113ec:	005b      	lsls	r3, r3, #1
 80113ee:	4619      	mov	r1, r3
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	440b      	add	r3, r1
 80113f4:	3237      	adds	r2, #55	; 0x37
 80113f6:	b2d2      	uxtb	r2, r2
 80113f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	011b      	lsls	r3, r3, #4
 80113fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011400:	7dfb      	ldrb	r3, [r7, #23]
 8011402:	005b      	lsls	r3, r3, #1
 8011404:	3301      	adds	r3, #1
 8011406:	68ba      	ldr	r2, [r7, #8]
 8011408:	4413      	add	r3, r2
 801140a:	2200      	movs	r2, #0
 801140c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801140e:	7dfb      	ldrb	r3, [r7, #23]
 8011410:	3301      	adds	r3, #1
 8011412:	75fb      	strb	r3, [r7, #23]
 8011414:	7dfa      	ldrb	r2, [r7, #23]
 8011416:	79fb      	ldrb	r3, [r7, #7]
 8011418:	429a      	cmp	r2, r3
 801141a:	d3d3      	bcc.n	80113c4 <IntToUnicode+0x18>
  }
}
 801141c:	bf00      	nop
 801141e:	bf00      	nop
 8011420:	371c      	adds	r7, #28
 8011422:	46bd      	mov	sp, r7
 8011424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011428:	4770      	bx	lr

0801142a <LL_AHB2_GRP1_EnableClock>:
{
 801142a:	b480      	push	{r7}
 801142c:	b085      	sub	sp, #20
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8011432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011436:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011438:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	4313      	orrs	r3, r2
 8011440:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8011442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	4013      	ands	r3, r2
 801144c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801144e:	68fb      	ldr	r3, [r7, #12]
}
 8011450:	bf00      	nop
 8011452:	3714      	adds	r7, #20
 8011454:	46bd      	mov	sp, r7
 8011456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145a:	4770      	bx	lr

0801145c <LL_APB1_GRP1_EnableClock>:
{
 801145c:	b480      	push	{r7}
 801145e:	b085      	sub	sp, #20
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011468:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801146a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	4313      	orrs	r3, r2
 8011472:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8011474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011478:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	4013      	ands	r3, r2
 801147e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011480:	68fb      	ldr	r3, [r7, #12]
}
 8011482:	bf00      	nop
 8011484:	3714      	adds	r7, #20
 8011486:	46bd      	mov	sp, r7
 8011488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148c:	4770      	bx	lr
	...

08011490 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b088      	sub	sp, #32
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011498:	f107 030c 	add.w	r3, r7, #12
 801149c:	2200      	movs	r2, #0
 801149e:	601a      	str	r2, [r3, #0]
 80114a0:	605a      	str	r2, [r3, #4]
 80114a2:	609a      	str	r2, [r3, #8]
 80114a4:	60da      	str	r2, [r3, #12]
 80114a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	4a1d      	ldr	r2, [pc, #116]	; (8011524 <HAL_PCD_MspInit+0x94>)
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d134      	bne.n	801151c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80114b2:	2001      	movs	r0, #1
 80114b4:	f7ff ffb9 	bl	801142a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80114b8:	2004      	movs	r0, #4
 80114ba:	f7ff ffb6 	bl	801142a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    PC9     ------> USB_NOE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80114be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80114c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80114c4:	2302      	movs	r3, #2
 80114c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114c8:	2300      	movs	r3, #0
 80114ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80114cc:	2300      	movs	r3, #0
 80114ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80114d0:	230a      	movs	r3, #10
 80114d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80114d4:	f107 030c 	add.w	r3, r7, #12
 80114d8:	4619      	mov	r1, r3
 80114da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80114de:	f7f1 fadf 	bl	8002aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80114e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80114e8:	2302      	movs	r3, #2
 80114ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114ec:	2300      	movs	r3, #0
 80114ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80114f0:	2300      	movs	r3, #0
 80114f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80114f4:	230a      	movs	r3, #10
 80114f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80114f8:	f107 030c 	add.w	r3, r7, #12
 80114fc:	4619      	mov	r1, r3
 80114fe:	480a      	ldr	r0, [pc, #40]	; (8011528 <HAL_PCD_MspInit+0x98>)
 8011500:	f7f1 face 	bl	8002aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011504:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8011508:	f7ff ffa8 	bl	801145c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801150c:	2200      	movs	r2, #0
 801150e:	2105      	movs	r1, #5
 8011510:	2014      	movs	r0, #20
 8011512:	f7f1 fa9d 	bl	8002a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011516:	2014      	movs	r0, #20
 8011518:	f7f1 fab4 	bl	8002a84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801151c:	bf00      	nop
 801151e:	3720      	adds	r7, #32
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	40006800 	.word	0x40006800
 8011528:	48000800 	.word	0x48000800

0801152c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b082      	sub	sp, #8
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8011540:	4619      	mov	r1, r3
 8011542:	4610      	mov	r0, r2
 8011544:	f7fa fd74 	bl	800c030 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011548:	bf00      	nop
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}

08011550 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b082      	sub	sp, #8
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	460b      	mov	r3, r1
 801155a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8011562:	78fa      	ldrb	r2, [r7, #3]
 8011564:	6879      	ldr	r1, [r7, #4]
 8011566:	4613      	mov	r3, r2
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	4413      	add	r3, r2
 801156c:	00db      	lsls	r3, r3, #3
 801156e:	440b      	add	r3, r1
 8011570:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011574:	681a      	ldr	r2, [r3, #0]
 8011576:	78fb      	ldrb	r3, [r7, #3]
 8011578:	4619      	mov	r1, r3
 801157a:	f7fa fdae 	bl	800c0da <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801157e:	bf00      	nop
 8011580:	3708      	adds	r7, #8
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}

08011586 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011586:	b580      	push	{r7, lr}
 8011588:	b082      	sub	sp, #8
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
 801158e:	460b      	mov	r3, r1
 8011590:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8011598:	78fa      	ldrb	r2, [r7, #3]
 801159a:	6879      	ldr	r1, [r7, #4]
 801159c:	4613      	mov	r3, r2
 801159e:	009b      	lsls	r3, r3, #2
 80115a0:	4413      	add	r3, r2
 80115a2:	00db      	lsls	r3, r3, #3
 80115a4:	440b      	add	r3, r1
 80115a6:	333c      	adds	r3, #60	; 0x3c
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	78fb      	ldrb	r3, [r7, #3]
 80115ac:	4619      	mov	r1, r3
 80115ae:	f7fa fdf7 	bl	800c1a0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80115b2:	bf00      	nop
 80115b4:	3708      	adds	r7, #8
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}

080115ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115ba:	b580      	push	{r7, lr}
 80115bc:	b082      	sub	sp, #8
 80115be:	af00      	add	r7, sp, #0
 80115c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7fa ff0b 	bl	800c3e4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80115ce:	bf00      	nop
 80115d0:	3708      	adds	r7, #8
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}

080115d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115d6:	b580      	push	{r7, lr}
 80115d8:	b084      	sub	sp, #16
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80115de:	2301      	movs	r3, #1
 80115e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	689b      	ldr	r3, [r3, #8]
 80115e6:	2b02      	cmp	r3, #2
 80115e8:	d001      	beq.n	80115ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80115ea:	f7ef fc27 	bl	8000e3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80115f4:	7bfa      	ldrb	r2, [r7, #15]
 80115f6:	4611      	mov	r1, r2
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fa feb5 	bl	800c368 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011604:	4618      	mov	r0, r3
 8011606:	f7fa fe61 	bl	800c2cc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801160a:	bf00      	nop
 801160c:	3710      	adds	r7, #16
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
	...

08011614 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b082      	sub	sp, #8
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011622:	4618      	mov	r0, r3
 8011624:	f7fa feb0 	bl	800c388 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	699b      	ldr	r3, [r3, #24]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d005      	beq.n	801163c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011630:	4b04      	ldr	r3, [pc, #16]	; (8011644 <HAL_PCD_SuspendCallback+0x30>)
 8011632:	691b      	ldr	r3, [r3, #16]
 8011634:	4a03      	ldr	r2, [pc, #12]	; (8011644 <HAL_PCD_SuspendCallback+0x30>)
 8011636:	f043 0306 	orr.w	r3, r3, #6
 801163a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801163c:	bf00      	nop
 801163e:	3708      	adds	r7, #8
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	e000ed00 	.word	0xe000ed00

08011648 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	699b      	ldr	r3, [r3, #24]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d007      	beq.n	8011668 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011658:	4b08      	ldr	r3, [pc, #32]	; (801167c <HAL_PCD_ResumeCallback+0x34>)
 801165a:	691b      	ldr	r3, [r3, #16]
 801165c:	4a07      	ldr	r2, [pc, #28]	; (801167c <HAL_PCD_ResumeCallback+0x34>)
 801165e:	f023 0306 	bic.w	r3, r3, #6
 8011662:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011664:	f000 f9fc 	bl	8011a60 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801166e:	4618      	mov	r0, r3
 8011670:	f7fa fea0 	bl	800c3b4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011674:	bf00      	nop
 8011676:	3708      	adds	r7, #8
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}
 801167c:	e000ed00 	.word	0xe000ed00

08011680 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011688:	4a2c      	ldr	r2, [pc, #176]	; (801173c <USBD_LL_Init+0xbc>)
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	4a2a      	ldr	r2, [pc, #168]	; (801173c <USBD_LL_Init+0xbc>)
 8011694:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8011698:	f7f3 ff46 	bl	8005528 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 801169c:	4b27      	ldr	r3, [pc, #156]	; (801173c <USBD_LL_Init+0xbc>)
 801169e:	4a28      	ldr	r2, [pc, #160]	; (8011740 <USBD_LL_Init+0xc0>)
 80116a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80116a2:	4b26      	ldr	r3, [pc, #152]	; (801173c <USBD_LL_Init+0xbc>)
 80116a4:	2208      	movs	r2, #8
 80116a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80116a8:	4b24      	ldr	r3, [pc, #144]	; (801173c <USBD_LL_Init+0xbc>)
 80116aa:	2202      	movs	r2, #2
 80116ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80116ae:	4b23      	ldr	r3, [pc, #140]	; (801173c <USBD_LL_Init+0xbc>)
 80116b0:	2202      	movs	r2, #2
 80116b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80116b4:	4b21      	ldr	r3, [pc, #132]	; (801173c <USBD_LL_Init+0xbc>)
 80116b6:	2200      	movs	r2, #0
 80116b8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80116ba:	4b20      	ldr	r3, [pc, #128]	; (801173c <USBD_LL_Init+0xbc>)
 80116bc:	2200      	movs	r2, #0
 80116be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80116c0:	4b1e      	ldr	r3, [pc, #120]	; (801173c <USBD_LL_Init+0xbc>)
 80116c2:	2200      	movs	r2, #0
 80116c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80116c6:	4b1d      	ldr	r3, [pc, #116]	; (801173c <USBD_LL_Init+0xbc>)
 80116c8:	2200      	movs	r2, #0
 80116ca:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80116cc:	481b      	ldr	r0, [pc, #108]	; (801173c <USBD_LL_Init+0xbc>)
 80116ce:	f7f2 f9d9 	bl	8003a84 <HAL_PCD_Init>
 80116d2:	4603      	mov	r3, r0
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d001      	beq.n	80116dc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80116d8:	f7ef fbb0 	bl	8000e3c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80116e2:	2318      	movs	r3, #24
 80116e4:	2200      	movs	r2, #0
 80116e6:	2100      	movs	r1, #0
 80116e8:	f7f3 fe92 	bl	8005410 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80116f2:	2358      	movs	r3, #88	; 0x58
 80116f4:	2200      	movs	r2, #0
 80116f6:	2180      	movs	r1, #128	; 0x80
 80116f8:	f7f3 fe8a 	bl	8005410 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011702:	23c0      	movs	r3, #192	; 0xc0
 8011704:	2200      	movs	r2, #0
 8011706:	2181      	movs	r1, #129	; 0x81
 8011708:	f7f3 fe82 	bl	8005410 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011712:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011716:	2200      	movs	r2, #0
 8011718:	2101      	movs	r1, #1
 801171a:	f7f3 fe79 	bl	8005410 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011728:	2200      	movs	r2, #0
 801172a:	2182      	movs	r1, #130	; 0x82
 801172c:	f7f3 fe70 	bl	8005410 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011730:	2300      	movs	r3, #0
}
 8011732:	4618      	mov	r0, r3
 8011734:	3708      	adds	r7, #8
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	200053c0 	.word	0x200053c0
 8011740:	40006800 	.word	0x40006800

08011744 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b084      	sub	sp, #16
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801174c:	2300      	movs	r3, #0
 801174e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011750:	2300      	movs	r3, #0
 8011752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801175a:	4618      	mov	r0, r3
 801175c:	f7f2 fa77 	bl	8003c4e <HAL_PCD_Start>
 8011760:	4603      	mov	r3, r0
 8011762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011764:	7bfb      	ldrb	r3, [r7, #15]
 8011766:	4618      	mov	r0, r3
 8011768:	f000 f980 	bl	8011a6c <USBD_Get_USB_Status>
 801176c:	4603      	mov	r3, r0
 801176e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011770:	7bbb      	ldrb	r3, [r7, #14]
}
 8011772:	4618      	mov	r0, r3
 8011774:	3710      	adds	r7, #16
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}

0801177a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801177a:	b580      	push	{r7, lr}
 801177c:	b084      	sub	sp, #16
 801177e:	af00      	add	r7, sp, #0
 8011780:	6078      	str	r0, [r7, #4]
 8011782:	4608      	mov	r0, r1
 8011784:	4611      	mov	r1, r2
 8011786:	461a      	mov	r2, r3
 8011788:	4603      	mov	r3, r0
 801178a:	70fb      	strb	r3, [r7, #3]
 801178c:	460b      	mov	r3, r1
 801178e:	70bb      	strb	r3, [r7, #2]
 8011790:	4613      	mov	r3, r2
 8011792:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011794:	2300      	movs	r3, #0
 8011796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011798:	2300      	movs	r3, #0
 801179a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80117a2:	78bb      	ldrb	r3, [r7, #2]
 80117a4:	883a      	ldrh	r2, [r7, #0]
 80117a6:	78f9      	ldrb	r1, [r7, #3]
 80117a8:	f7f2 fbbf 	bl	8003f2a <HAL_PCD_EP_Open>
 80117ac:	4603      	mov	r3, r0
 80117ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117b0:	7bfb      	ldrb	r3, [r7, #15]
 80117b2:	4618      	mov	r0, r3
 80117b4:	f000 f95a 	bl	8011a6c <USBD_Get_USB_Status>
 80117b8:	4603      	mov	r3, r0
 80117ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3710      	adds	r7, #16
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}

080117c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117c6:	b580      	push	{r7, lr}
 80117c8:	b084      	sub	sp, #16
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
 80117ce:	460b      	mov	r3, r1
 80117d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117d2:	2300      	movs	r3, #0
 80117d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117d6:	2300      	movs	r3, #0
 80117d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80117e0:	78fa      	ldrb	r2, [r7, #3]
 80117e2:	4611      	mov	r1, r2
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7f2 fc06 	bl	8003ff6 <HAL_PCD_EP_Close>
 80117ea:	4603      	mov	r3, r0
 80117ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117ee:	7bfb      	ldrb	r3, [r7, #15]
 80117f0:	4618      	mov	r0, r3
 80117f2:	f000 f93b 	bl	8011a6c <USBD_Get_USB_Status>
 80117f6:	4603      	mov	r3, r0
 80117f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	3710      	adds	r7, #16
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}

08011804 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b084      	sub	sp, #16
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	460b      	mov	r3, r1
 801180e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011810:	2300      	movs	r3, #0
 8011812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011814:	2300      	movs	r3, #0
 8011816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801181e:	78fa      	ldrb	r2, [r7, #3]
 8011820:	4611      	mov	r1, r2
 8011822:	4618      	mov	r0, r3
 8011824:	f7f2 fcc7 	bl	80041b6 <HAL_PCD_EP_SetStall>
 8011828:	4603      	mov	r3, r0
 801182a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801182c:	7bfb      	ldrb	r3, [r7, #15]
 801182e:	4618      	mov	r0, r3
 8011830:	f000 f91c 	bl	8011a6c <USBD_Get_USB_Status>
 8011834:	4603      	mov	r3, r0
 8011836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011838:	7bbb      	ldrb	r3, [r7, #14]
}
 801183a:	4618      	mov	r0, r3
 801183c:	3710      	adds	r7, #16
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}

08011842 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011842:	b580      	push	{r7, lr}
 8011844:	b084      	sub	sp, #16
 8011846:	af00      	add	r7, sp, #0
 8011848:	6078      	str	r0, [r7, #4]
 801184a:	460b      	mov	r3, r1
 801184c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801184e:	2300      	movs	r3, #0
 8011850:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011852:	2300      	movs	r3, #0
 8011854:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801185c:	78fa      	ldrb	r2, [r7, #3]
 801185e:	4611      	mov	r1, r2
 8011860:	4618      	mov	r0, r3
 8011862:	f7f2 fcfa 	bl	800425a <HAL_PCD_EP_ClrStall>
 8011866:	4603      	mov	r3, r0
 8011868:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801186a:	7bfb      	ldrb	r3, [r7, #15]
 801186c:	4618      	mov	r0, r3
 801186e:	f000 f8fd 	bl	8011a6c <USBD_Get_USB_Status>
 8011872:	4603      	mov	r3, r0
 8011874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011876:	7bbb      	ldrb	r3, [r7, #14]
}
 8011878:	4618      	mov	r0, r3
 801187a:	3710      	adds	r7, #16
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}

08011880 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011880:	b480      	push	{r7}
 8011882:	b085      	sub	sp, #20
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	460b      	mov	r3, r1
 801188a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011892:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011898:	2b00      	cmp	r3, #0
 801189a:	da0c      	bge.n	80118b6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801189c:	78fb      	ldrb	r3, [r7, #3]
 801189e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80118a2:	68f9      	ldr	r1, [r7, #12]
 80118a4:	1c5a      	adds	r2, r3, #1
 80118a6:	4613      	mov	r3, r2
 80118a8:	009b      	lsls	r3, r3, #2
 80118aa:	4413      	add	r3, r2
 80118ac:	00db      	lsls	r3, r3, #3
 80118ae:	440b      	add	r3, r1
 80118b0:	3302      	adds	r3, #2
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	e00b      	b.n	80118ce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80118b6:	78fb      	ldrb	r3, [r7, #3]
 80118b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80118bc:	68f9      	ldr	r1, [r7, #12]
 80118be:	4613      	mov	r3, r2
 80118c0:	009b      	lsls	r3, r3, #2
 80118c2:	4413      	add	r3, r2
 80118c4:	00db      	lsls	r3, r3, #3
 80118c6:	440b      	add	r3, r1
 80118c8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80118cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	3714      	adds	r7, #20
 80118d2:	46bd      	mov	sp, r7
 80118d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d8:	4770      	bx	lr

080118da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80118da:	b580      	push	{r7, lr}
 80118dc:	b084      	sub	sp, #16
 80118de:	af00      	add	r7, sp, #0
 80118e0:	6078      	str	r0, [r7, #4]
 80118e2:	460b      	mov	r3, r1
 80118e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118e6:	2300      	movs	r3, #0
 80118e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118ea:	2300      	movs	r3, #0
 80118ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80118f4:	78fa      	ldrb	r2, [r7, #3]
 80118f6:	4611      	mov	r1, r2
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7f2 faf1 	bl	8003ee0 <HAL_PCD_SetAddress>
 80118fe:	4603      	mov	r3, r0
 8011900:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011902:	7bfb      	ldrb	r3, [r7, #15]
 8011904:	4618      	mov	r0, r3
 8011906:	f000 f8b1 	bl	8011a6c <USBD_Get_USB_Status>
 801190a:	4603      	mov	r3, r0
 801190c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801190e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011910:	4618      	mov	r0, r3
 8011912:	3710      	adds	r7, #16
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b086      	sub	sp, #24
 801191c:	af00      	add	r7, sp, #0
 801191e:	60f8      	str	r0, [r7, #12]
 8011920:	607a      	str	r2, [r7, #4]
 8011922:	603b      	str	r3, [r7, #0]
 8011924:	460b      	mov	r3, r1
 8011926:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011928:	2300      	movs	r3, #0
 801192a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801192c:	2300      	movs	r3, #0
 801192e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011936:	7af9      	ldrb	r1, [r7, #11]
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	f7f2 fbf8 	bl	8004130 <HAL_PCD_EP_Transmit>
 8011940:	4603      	mov	r3, r0
 8011942:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011944:	7dfb      	ldrb	r3, [r7, #23]
 8011946:	4618      	mov	r0, r3
 8011948:	f000 f890 	bl	8011a6c <USBD_Get_USB_Status>
 801194c:	4603      	mov	r3, r0
 801194e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011950:	7dbb      	ldrb	r3, [r7, #22]
}
 8011952:	4618      	mov	r0, r3
 8011954:	3718      	adds	r7, #24
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}

0801195a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801195a:	b580      	push	{r7, lr}
 801195c:	b086      	sub	sp, #24
 801195e:	af00      	add	r7, sp, #0
 8011960:	60f8      	str	r0, [r7, #12]
 8011962:	607a      	str	r2, [r7, #4]
 8011964:	603b      	str	r3, [r7, #0]
 8011966:	460b      	mov	r3, r1
 8011968:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801196a:	2300      	movs	r3, #0
 801196c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801196e:	2300      	movs	r3, #0
 8011970:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011978:	7af9      	ldrb	r1, [r7, #11]
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	f7f2 fb82 	bl	8004086 <HAL_PCD_EP_Receive>
 8011982:	4603      	mov	r3, r0
 8011984:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011986:	7dfb      	ldrb	r3, [r7, #23]
 8011988:	4618      	mov	r0, r3
 801198a:	f000 f86f 	bl	8011a6c <USBD_Get_USB_Status>
 801198e:	4603      	mov	r3, r0
 8011990:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011992:	7dbb      	ldrb	r3, [r7, #22]
}
 8011994:	4618      	mov	r0, r3
 8011996:	3718      	adds	r7, #24
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	460b      	mov	r3, r1
 80119a6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80119ae:	78fa      	ldrb	r2, [r7, #3]
 80119b0:	4611      	mov	r1, r2
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7f2 fba4 	bl	8004100 <HAL_PCD_EP_GetRxCount>
 80119b8:	4603      	mov	r3, r0
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3708      	adds	r7, #8
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
	...

080119c4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	460b      	mov	r3, r1
 80119ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80119d0:	78fb      	ldrb	r3, [r7, #3]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d002      	beq.n	80119dc <HAL_PCDEx_LPM_Callback+0x18>
 80119d6:	2b01      	cmp	r3, #1
 80119d8:	d013      	beq.n	8011a02 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80119da:	e023      	b.n	8011a24 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	699b      	ldr	r3, [r3, #24]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d007      	beq.n	80119f4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80119e4:	f000 f83c 	bl	8011a60 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80119e8:	4b10      	ldr	r3, [pc, #64]	; (8011a2c <HAL_PCDEx_LPM_Callback+0x68>)
 80119ea:	691b      	ldr	r3, [r3, #16]
 80119ec:	4a0f      	ldr	r2, [pc, #60]	; (8011a2c <HAL_PCDEx_LPM_Callback+0x68>)
 80119ee:	f023 0306 	bic.w	r3, r3, #6
 80119f2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7fa fcda 	bl	800c3b4 <USBD_LL_Resume>
    break;
 8011a00:	e010      	b.n	8011a24 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7fa fcbd 	bl	800c388 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	699b      	ldr	r3, [r3, #24]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d005      	beq.n	8011a22 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a16:	4b05      	ldr	r3, [pc, #20]	; (8011a2c <HAL_PCDEx_LPM_Callback+0x68>)
 8011a18:	691b      	ldr	r3, [r3, #16]
 8011a1a:	4a04      	ldr	r2, [pc, #16]	; (8011a2c <HAL_PCDEx_LPM_Callback+0x68>)
 8011a1c:	f043 0306 	orr.w	r3, r3, #6
 8011a20:	6113      	str	r3, [r2, #16]
    break;
 8011a22:	bf00      	nop
}
 8011a24:	bf00      	nop
 8011a26:	3708      	adds	r7, #8
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}
 8011a2c:	e000ed00 	.word	0xe000ed00

08011a30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011a30:	b480      	push	{r7}
 8011a32:	b083      	sub	sp, #12
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011a38:	4b03      	ldr	r3, [pc, #12]	; (8011a48 <USBD_static_malloc+0x18>)
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	370c      	adds	r7, #12
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a44:	4770      	bx	lr
 8011a46:	bf00      	nop
 8011a48:	200038f8 	.word	0x200038f8

08011a4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011a4c:	b480      	push	{r7}
 8011a4e:	b083      	sub	sp, #12
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]

}
 8011a54:	bf00      	nop
 8011a56:	370c      	adds	r7, #12
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr

08011a60 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011a64:	f7ef f91c 	bl	8000ca0 <SystemClock_Config>
}
 8011a68:	bf00      	nop
 8011a6a:	bd80      	pop	{r7, pc}

08011a6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b085      	sub	sp, #20
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	4603      	mov	r3, r0
 8011a74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a76:	2300      	movs	r3, #0
 8011a78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011a7a:	79fb      	ldrb	r3, [r7, #7]
 8011a7c:	2b03      	cmp	r3, #3
 8011a7e:	d817      	bhi.n	8011ab0 <USBD_Get_USB_Status+0x44>
 8011a80:	a201      	add	r2, pc, #4	; (adr r2, 8011a88 <USBD_Get_USB_Status+0x1c>)
 8011a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a86:	bf00      	nop
 8011a88:	08011a99 	.word	0x08011a99
 8011a8c:	08011a9f 	.word	0x08011a9f
 8011a90:	08011aa5 	.word	0x08011aa5
 8011a94:	08011aab 	.word	0x08011aab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8011a9c:	e00b      	b.n	8011ab6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011a9e:	2303      	movs	r3, #3
 8011aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8011aa2:	e008      	b.n	8011ab6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8011aa8:	e005      	b.n	8011ab6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011aaa:	2303      	movs	r3, #3
 8011aac:	73fb      	strb	r3, [r7, #15]
    break;
 8011aae:	e002      	b.n	8011ab6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011ab0:	2303      	movs	r3, #3
 8011ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ab4:	bf00      	nop
  }
  return usb_status;
 8011ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	3714      	adds	r7, #20
 8011abc:	46bd      	mov	sp, r7
 8011abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac2:	4770      	bx	lr

08011ac4 <powf>:
 8011ac4:	b508      	push	{r3, lr}
 8011ac6:	ed2d 8b04 	vpush	{d8-d9}
 8011aca:	eeb0 9a40 	vmov.f32	s18, s0
 8011ace:	eef0 8a60 	vmov.f32	s17, s1
 8011ad2:	f000 f88f 	bl	8011bf4 <__ieee754_powf>
 8011ad6:	4b43      	ldr	r3, [pc, #268]	; (8011be4 <powf+0x120>)
 8011ad8:	f993 3000 	ldrsb.w	r3, [r3]
 8011adc:	3301      	adds	r3, #1
 8011ade:	eeb0 8a40 	vmov.f32	s16, s0
 8011ae2:	d012      	beq.n	8011b0a <powf+0x46>
 8011ae4:	eef4 8a68 	vcmp.f32	s17, s17
 8011ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aec:	d60d      	bvs.n	8011b0a <powf+0x46>
 8011aee:	eeb4 9a49 	vcmp.f32	s18, s18
 8011af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af6:	d70d      	bvc.n	8011b14 <powf+0x50>
 8011af8:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011b04:	bf08      	it	eq
 8011b06:	eeb0 8a67 	vmoveq.f32	s16, s15
 8011b0a:	eeb0 0a48 	vmov.f32	s0, s16
 8011b0e:	ecbd 8b04 	vpop	{d8-d9}
 8011b12:	bd08      	pop	{r3, pc}
 8011b14:	eddf 9a34 	vldr	s19, [pc, #208]	; 8011be8 <powf+0x124>
 8011b18:	eeb4 9a69 	vcmp.f32	s18, s19
 8011b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b20:	d116      	bne.n	8011b50 <powf+0x8c>
 8011b22:	eef4 8a69 	vcmp.f32	s17, s19
 8011b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b2a:	d057      	beq.n	8011bdc <powf+0x118>
 8011b2c:	eeb0 0a68 	vmov.f32	s0, s17
 8011b30:	f000 fb2a 	bl	8012188 <finitef>
 8011b34:	2800      	cmp	r0, #0
 8011b36:	d0e8      	beq.n	8011b0a <powf+0x46>
 8011b38:	eef4 8ae9 	vcmpe.f32	s17, s19
 8011b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b40:	d5e3      	bpl.n	8011b0a <powf+0x46>
 8011b42:	f000 fc03 	bl	801234c <__errno>
 8011b46:	2321      	movs	r3, #33	; 0x21
 8011b48:	6003      	str	r3, [r0, #0]
 8011b4a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8011bec <powf+0x128>
 8011b4e:	e7dc      	b.n	8011b0a <powf+0x46>
 8011b50:	f000 fb1a 	bl	8012188 <finitef>
 8011b54:	bb50      	cbnz	r0, 8011bac <powf+0xe8>
 8011b56:	eeb0 0a49 	vmov.f32	s0, s18
 8011b5a:	f000 fb15 	bl	8012188 <finitef>
 8011b5e:	b328      	cbz	r0, 8011bac <powf+0xe8>
 8011b60:	eeb0 0a68 	vmov.f32	s0, s17
 8011b64:	f000 fb10 	bl	8012188 <finitef>
 8011b68:	b300      	cbz	r0, 8011bac <powf+0xe8>
 8011b6a:	eeb4 8a48 	vcmp.f32	s16, s16
 8011b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b72:	d706      	bvc.n	8011b82 <powf+0xbe>
 8011b74:	f000 fbea 	bl	801234c <__errno>
 8011b78:	2321      	movs	r3, #33	; 0x21
 8011b7a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8011b7e:	6003      	str	r3, [r0, #0]
 8011b80:	e7c3      	b.n	8011b0a <powf+0x46>
 8011b82:	f000 fbe3 	bl	801234c <__errno>
 8011b86:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8011b8a:	2322      	movs	r3, #34	; 0x22
 8011b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b90:	6003      	str	r3, [r0, #0]
 8011b92:	d508      	bpl.n	8011ba6 <powf+0xe2>
 8011b94:	eeb0 0a68 	vmov.f32	s0, s17
 8011b98:	f000 fb0a 	bl	80121b0 <rintf>
 8011b9c:	eeb4 0a68 	vcmp.f32	s0, s17
 8011ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba4:	d1d1      	bne.n	8011b4a <powf+0x86>
 8011ba6:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8011bf0 <powf+0x12c>
 8011baa:	e7ae      	b.n	8011b0a <powf+0x46>
 8011bac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb4:	d1a9      	bne.n	8011b0a <powf+0x46>
 8011bb6:	eeb0 0a49 	vmov.f32	s0, s18
 8011bba:	f000 fae5 	bl	8012188 <finitef>
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	d0a3      	beq.n	8011b0a <powf+0x46>
 8011bc2:	eeb0 0a68 	vmov.f32	s0, s17
 8011bc6:	f000 fadf 	bl	8012188 <finitef>
 8011bca:	2800      	cmp	r0, #0
 8011bcc:	d09d      	beq.n	8011b0a <powf+0x46>
 8011bce:	f000 fbbd 	bl	801234c <__errno>
 8011bd2:	2322      	movs	r3, #34	; 0x22
 8011bd4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8011be8 <powf+0x124>
 8011bd8:	6003      	str	r3, [r0, #0]
 8011bda:	e796      	b.n	8011b0a <powf+0x46>
 8011bdc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011be0:	e793      	b.n	8011b0a <powf+0x46>
 8011be2:	bf00      	nop
 8011be4:	2000018a 	.word	0x2000018a
 8011be8:	00000000 	.word	0x00000000
 8011bec:	ff800000 	.word	0xff800000
 8011bf0:	7f800000 	.word	0x7f800000

08011bf4 <__ieee754_powf>:
 8011bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf8:	ee10 5a90 	vmov	r5, s1
 8011bfc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8011c00:	ed2d 8b02 	vpush	{d8}
 8011c04:	eeb0 8a40 	vmov.f32	s16, s0
 8011c08:	eef0 8a60 	vmov.f32	s17, s1
 8011c0c:	f000 8291 	beq.w	8012132 <__ieee754_powf+0x53e>
 8011c10:	ee10 8a10 	vmov	r8, s0
 8011c14:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8011c18:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011c1c:	dc06      	bgt.n	8011c2c <__ieee754_powf+0x38>
 8011c1e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8011c22:	dd0a      	ble.n	8011c3a <__ieee754_powf+0x46>
 8011c24:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8011c28:	f000 8283 	beq.w	8012132 <__ieee754_powf+0x53e>
 8011c2c:	ecbd 8b02 	vpop	{d8}
 8011c30:	48d8      	ldr	r0, [pc, #864]	; (8011f94 <__ieee754_powf+0x3a0>)
 8011c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c36:	f000 bab5 	b.w	80121a4 <nanf>
 8011c3a:	f1b8 0f00 	cmp.w	r8, #0
 8011c3e:	da1f      	bge.n	8011c80 <__ieee754_powf+0x8c>
 8011c40:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8011c44:	da2e      	bge.n	8011ca4 <__ieee754_powf+0xb0>
 8011c46:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8011c4a:	f2c0 827b 	blt.w	8012144 <__ieee754_powf+0x550>
 8011c4e:	15fb      	asrs	r3, r7, #23
 8011c50:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8011c54:	fa47 f603 	asr.w	r6, r7, r3
 8011c58:	fa06 f303 	lsl.w	r3, r6, r3
 8011c5c:	42bb      	cmp	r3, r7
 8011c5e:	f040 8271 	bne.w	8012144 <__ieee754_powf+0x550>
 8011c62:	f006 0601 	and.w	r6, r6, #1
 8011c66:	f1c6 0602 	rsb	r6, r6, #2
 8011c6a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8011c6e:	d120      	bne.n	8011cb2 <__ieee754_powf+0xbe>
 8011c70:	2d00      	cmp	r5, #0
 8011c72:	f280 8264 	bge.w	801213e <__ieee754_powf+0x54a>
 8011c76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011c7a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8011c7e:	e00d      	b.n	8011c9c <__ieee754_powf+0xa8>
 8011c80:	2600      	movs	r6, #0
 8011c82:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8011c86:	d1f0      	bne.n	8011c6a <__ieee754_powf+0x76>
 8011c88:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8011c8c:	f000 8251 	beq.w	8012132 <__ieee754_powf+0x53e>
 8011c90:	dd0a      	ble.n	8011ca8 <__ieee754_powf+0xb4>
 8011c92:	2d00      	cmp	r5, #0
 8011c94:	f280 8250 	bge.w	8012138 <__ieee754_powf+0x544>
 8011c98:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8011f98 <__ieee754_powf+0x3a4>
 8011c9c:	ecbd 8b02 	vpop	{d8}
 8011ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ca4:	2602      	movs	r6, #2
 8011ca6:	e7ec      	b.n	8011c82 <__ieee754_powf+0x8e>
 8011ca8:	2d00      	cmp	r5, #0
 8011caa:	daf5      	bge.n	8011c98 <__ieee754_powf+0xa4>
 8011cac:	eeb1 0a68 	vneg.f32	s0, s17
 8011cb0:	e7f4      	b.n	8011c9c <__ieee754_powf+0xa8>
 8011cb2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8011cb6:	d102      	bne.n	8011cbe <__ieee754_powf+0xca>
 8011cb8:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011cbc:	e7ee      	b.n	8011c9c <__ieee754_powf+0xa8>
 8011cbe:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8011cc2:	eeb0 0a48 	vmov.f32	s0, s16
 8011cc6:	d108      	bne.n	8011cda <__ieee754_powf+0xe6>
 8011cc8:	f1b8 0f00 	cmp.w	r8, #0
 8011ccc:	db05      	blt.n	8011cda <__ieee754_powf+0xe6>
 8011cce:	ecbd 8b02 	vpop	{d8}
 8011cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cd6:	f000 ba4d 	b.w	8012174 <__ieee754_sqrtf>
 8011cda:	f000 fa4e 	bl	801217a <fabsf>
 8011cde:	b124      	cbz	r4, 8011cea <__ieee754_powf+0xf6>
 8011ce0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8011ce4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8011ce8:	d117      	bne.n	8011d1a <__ieee754_powf+0x126>
 8011cea:	2d00      	cmp	r5, #0
 8011cec:	bfbc      	itt	lt
 8011cee:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8011cf2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011cf6:	f1b8 0f00 	cmp.w	r8, #0
 8011cfa:	dacf      	bge.n	8011c9c <__ieee754_powf+0xa8>
 8011cfc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8011d00:	ea54 0306 	orrs.w	r3, r4, r6
 8011d04:	d104      	bne.n	8011d10 <__ieee754_powf+0x11c>
 8011d06:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011d0a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011d0e:	e7c5      	b.n	8011c9c <__ieee754_powf+0xa8>
 8011d10:	2e01      	cmp	r6, #1
 8011d12:	d1c3      	bne.n	8011c9c <__ieee754_powf+0xa8>
 8011d14:	eeb1 0a40 	vneg.f32	s0, s0
 8011d18:	e7c0      	b.n	8011c9c <__ieee754_powf+0xa8>
 8011d1a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8011d1e:	3801      	subs	r0, #1
 8011d20:	ea56 0300 	orrs.w	r3, r6, r0
 8011d24:	d104      	bne.n	8011d30 <__ieee754_powf+0x13c>
 8011d26:	ee38 8a48 	vsub.f32	s16, s16, s16
 8011d2a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011d2e:	e7b5      	b.n	8011c9c <__ieee754_powf+0xa8>
 8011d30:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8011d34:	dd6b      	ble.n	8011e0e <__ieee754_powf+0x21a>
 8011d36:	4b99      	ldr	r3, [pc, #612]	; (8011f9c <__ieee754_powf+0x3a8>)
 8011d38:	429c      	cmp	r4, r3
 8011d3a:	dc06      	bgt.n	8011d4a <__ieee754_powf+0x156>
 8011d3c:	2d00      	cmp	r5, #0
 8011d3e:	daab      	bge.n	8011c98 <__ieee754_powf+0xa4>
 8011d40:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8011fa0 <__ieee754_powf+0x3ac>
 8011d44:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011d48:	e7a8      	b.n	8011c9c <__ieee754_powf+0xa8>
 8011d4a:	4b96      	ldr	r3, [pc, #600]	; (8011fa4 <__ieee754_powf+0x3b0>)
 8011d4c:	429c      	cmp	r4, r3
 8011d4e:	dd02      	ble.n	8011d56 <__ieee754_powf+0x162>
 8011d50:	2d00      	cmp	r5, #0
 8011d52:	dcf5      	bgt.n	8011d40 <__ieee754_powf+0x14c>
 8011d54:	e7a0      	b.n	8011c98 <__ieee754_powf+0xa4>
 8011d56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011d5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011d5e:	eddf 6a92 	vldr	s13, [pc, #584]	; 8011fa8 <__ieee754_powf+0x3b4>
 8011d62:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8011d66:	eee0 6a67 	vfms.f32	s13, s0, s15
 8011d6a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011d6e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8011d72:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d7a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8011fac <__ieee754_powf+0x3b8>
 8011d7e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8011d82:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8011fb0 <__ieee754_powf+0x3bc>
 8011d86:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011d8a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8011fb4 <__ieee754_powf+0x3c0>
 8011d8e:	eef0 6a67 	vmov.f32	s13, s15
 8011d92:	eee0 6a07 	vfma.f32	s13, s0, s14
 8011d96:	ee16 3a90 	vmov	r3, s13
 8011d9a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011d9e:	f023 030f 	bic.w	r3, r3, #15
 8011da2:	ee00 3a90 	vmov	s1, r3
 8011da6:	eee0 0a47 	vfms.f32	s1, s0, s14
 8011daa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011dae:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8011db2:	f025 050f 	bic.w	r5, r5, #15
 8011db6:	ee07 5a10 	vmov	s14, r5
 8011dba:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8011dbe:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8011dc2:	ee07 3a90 	vmov	s15, r3
 8011dc6:	eee7 0a27 	vfma.f32	s1, s14, s15
 8011dca:	3e01      	subs	r6, #1
 8011dcc:	ea56 0200 	orrs.w	r2, r6, r0
 8011dd0:	ee07 5a10 	vmov	s14, r5
 8011dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011dd8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011ddc:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8011de0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011de4:	ee17 4a10 	vmov	r4, s14
 8011de8:	bf08      	it	eq
 8011dea:	eeb0 8a40 	vmoveq.f32	s16, s0
 8011dee:	2c00      	cmp	r4, #0
 8011df0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011df4:	f340 8184 	ble.w	8012100 <__ieee754_powf+0x50c>
 8011df8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8011dfc:	f340 80fc 	ble.w	8011ff8 <__ieee754_powf+0x404>
 8011e00:	eddf 7a67 	vldr	s15, [pc, #412]	; 8011fa0 <__ieee754_powf+0x3ac>
 8011e04:	ee28 0a27 	vmul.f32	s0, s16, s15
 8011e08:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011e0c:	e746      	b.n	8011c9c <__ieee754_powf+0xa8>
 8011e0e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8011e12:	bf01      	itttt	eq
 8011e14:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8011fb8 <__ieee754_powf+0x3c4>
 8011e18:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8011e1c:	f06f 0217 	mvneq.w	r2, #23
 8011e20:	ee17 4a90 	vmoveq	r4, s15
 8011e24:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8011e28:	bf18      	it	ne
 8011e2a:	2200      	movne	r2, #0
 8011e2c:	3b7f      	subs	r3, #127	; 0x7f
 8011e2e:	4413      	add	r3, r2
 8011e30:	4a62      	ldr	r2, [pc, #392]	; (8011fbc <__ieee754_powf+0x3c8>)
 8011e32:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8011e36:	4294      	cmp	r4, r2
 8011e38:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8011e3c:	dd06      	ble.n	8011e4c <__ieee754_powf+0x258>
 8011e3e:	4a60      	ldr	r2, [pc, #384]	; (8011fc0 <__ieee754_powf+0x3cc>)
 8011e40:	4294      	cmp	r4, r2
 8011e42:	f340 80a4 	ble.w	8011f8e <__ieee754_powf+0x39a>
 8011e46:	3301      	adds	r3, #1
 8011e48:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011e4c:	2400      	movs	r4, #0
 8011e4e:	4a5d      	ldr	r2, [pc, #372]	; (8011fc4 <__ieee754_powf+0x3d0>)
 8011e50:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011e54:	ee07 1a90 	vmov	s15, r1
 8011e58:	ed92 7a00 	vldr	s14, [r2]
 8011e5c:	4a5a      	ldr	r2, [pc, #360]	; (8011fc8 <__ieee754_powf+0x3d4>)
 8011e5e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8011e62:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011e66:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8011e6a:	1049      	asrs	r1, r1, #1
 8011e6c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8011e70:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8011e74:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8011e78:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8011e7c:	ee06 1a10 	vmov	s12, r1
 8011e80:	ee65 4a26 	vmul.f32	s9, s10, s13
 8011e84:	ee36 7a47 	vsub.f32	s14, s12, s14
 8011e88:	ee14 7a90 	vmov	r7, s9
 8011e8c:	4017      	ands	r7, r2
 8011e8e:	ee05 7a90 	vmov	s11, r7
 8011e92:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8011e96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e9a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8011fcc <__ieee754_powf+0x3d8>
 8011e9e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8011ea2:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8011ea6:	ee25 6a26 	vmul.f32	s12, s10, s13
 8011eaa:	eddf 6a49 	vldr	s13, [pc, #292]	; 8011fd0 <__ieee754_powf+0x3dc>
 8011eae:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011eb2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8011fd4 <__ieee754_powf+0x3e0>
 8011eb6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011eba:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8011fa8 <__ieee754_powf+0x3b4>
 8011ebe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011ec2:	eddf 6a45 	vldr	s13, [pc, #276]	; 8011fd8 <__ieee754_powf+0x3e4>
 8011ec6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011eca:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8011fdc <__ieee754_powf+0x3e8>
 8011ece:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011ed2:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8011ed6:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8011eda:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011ede:	eee5 6a07 	vfma.f32	s13, s10, s14
 8011ee2:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8011ee6:	eef0 7a45 	vmov.f32	s15, s10
 8011eea:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8011eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ef2:	ee17 1a90 	vmov	r1, s15
 8011ef6:	4011      	ands	r1, r2
 8011ef8:	ee07 1a90 	vmov	s15, r1
 8011efc:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8011f00:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8011f04:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011f08:	ee27 7a24 	vmul.f32	s14, s14, s9
 8011f0c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011f10:	eeb0 6a47 	vmov.f32	s12, s14
 8011f14:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8011f18:	ee16 1a10 	vmov	r1, s12
 8011f1c:	4011      	ands	r1, r2
 8011f1e:	ee06 1a90 	vmov	s13, r1
 8011f22:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8011f26:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8011fe0 <__ieee754_powf+0x3ec>
 8011f2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8011fe4 <__ieee754_powf+0x3f0>
 8011f2e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011f32:	ee06 1a10 	vmov	s12, r1
 8011f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011f3a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8011fe8 <__ieee754_powf+0x3f4>
 8011f3e:	492b      	ldr	r1, [pc, #172]	; (8011fec <__ieee754_powf+0x3f8>)
 8011f40:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011f44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011f48:	edd1 7a00 	vldr	s15, [r1]
 8011f4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011f50:	ee07 3a90 	vmov	s15, r3
 8011f54:	4b26      	ldr	r3, [pc, #152]	; (8011ff0 <__ieee754_powf+0x3fc>)
 8011f56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011f5a:	eef0 7a47 	vmov.f32	s15, s14
 8011f5e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011f62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011f66:	edd4 0a00 	vldr	s1, [r4]
 8011f6a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f72:	ee17 3a90 	vmov	r3, s15
 8011f76:	4013      	ands	r3, r2
 8011f78:	ee07 3a90 	vmov	s15, r3
 8011f7c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011f80:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8011f84:	eee6 6a65 	vfms.f32	s13, s12, s11
 8011f88:	ee77 7a66 	vsub.f32	s15, s14, s13
 8011f8c:	e70f      	b.n	8011dae <__ieee754_powf+0x1ba>
 8011f8e:	2401      	movs	r4, #1
 8011f90:	e75d      	b.n	8011e4e <__ieee754_powf+0x25a>
 8011f92:	bf00      	nop
 8011f94:	08012648 	.word	0x08012648
 8011f98:	00000000 	.word	0x00000000
 8011f9c:	3f7ffff7 	.word	0x3f7ffff7
 8011fa0:	7149f2ca 	.word	0x7149f2ca
 8011fa4:	3f800007 	.word	0x3f800007
 8011fa8:	3eaaaaab 	.word	0x3eaaaaab
 8011fac:	3fb8aa3b 	.word	0x3fb8aa3b
 8011fb0:	36eca570 	.word	0x36eca570
 8011fb4:	3fb8aa00 	.word	0x3fb8aa00
 8011fb8:	4b800000 	.word	0x4b800000
 8011fbc:	001cc471 	.word	0x001cc471
 8011fc0:	005db3d6 	.word	0x005db3d6
 8011fc4:	0801264c 	.word	0x0801264c
 8011fc8:	fffff000 	.word	0xfffff000
 8011fcc:	3e6c3255 	.word	0x3e6c3255
 8011fd0:	3e53f142 	.word	0x3e53f142
 8011fd4:	3e8ba305 	.word	0x3e8ba305
 8011fd8:	3edb6db7 	.word	0x3edb6db7
 8011fdc:	3f19999a 	.word	0x3f19999a
 8011fe0:	3f76384f 	.word	0x3f76384f
 8011fe4:	3f763800 	.word	0x3f763800
 8011fe8:	369dc3a0 	.word	0x369dc3a0
 8011fec:	0801265c 	.word	0x0801265c
 8011ff0:	08012654 	.word	0x08012654
 8011ff4:	3338aa3c 	.word	0x3338aa3c
 8011ff8:	f040 8092 	bne.w	8012120 <__ieee754_powf+0x52c>
 8011ffc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8011ff4 <__ieee754_powf+0x400>
 8012000:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012004:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8012008:	eef4 6ac7 	vcmpe.f32	s13, s14
 801200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012010:	f73f aef6 	bgt.w	8011e00 <__ieee754_powf+0x20c>
 8012014:	15db      	asrs	r3, r3, #23
 8012016:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801201a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801201e:	4103      	asrs	r3, r0
 8012020:	4423      	add	r3, r4
 8012022:	4949      	ldr	r1, [pc, #292]	; (8012148 <__ieee754_powf+0x554>)
 8012024:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012028:	3a7f      	subs	r2, #127	; 0x7f
 801202a:	4111      	asrs	r1, r2
 801202c:	ea23 0101 	bic.w	r1, r3, r1
 8012030:	ee07 1a10 	vmov	s14, r1
 8012034:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8012038:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801203c:	f1c2 0217 	rsb	r2, r2, #23
 8012040:	4110      	asrs	r0, r2
 8012042:	2c00      	cmp	r4, #0
 8012044:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012048:	bfb8      	it	lt
 801204a:	4240      	neglt	r0, r0
 801204c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8012050:	eddf 6a3e 	vldr	s13, [pc, #248]	; 801214c <__ieee754_powf+0x558>
 8012054:	ee17 3a10 	vmov	r3, s14
 8012058:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801205c:	f023 030f 	bic.w	r3, r3, #15
 8012060:	ee07 3a10 	vmov	s14, r3
 8012064:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012068:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801206c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8012150 <__ieee754_powf+0x55c>
 8012070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012074:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8012078:	eddf 6a36 	vldr	s13, [pc, #216]	; 8012154 <__ieee754_powf+0x560>
 801207c:	eeb0 0a67 	vmov.f32	s0, s15
 8012080:	eea7 0a26 	vfma.f32	s0, s14, s13
 8012084:	eeb0 6a40 	vmov.f32	s12, s0
 8012088:	eea7 6a66 	vfms.f32	s12, s14, s13
 801208c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012090:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012094:	eddf 6a30 	vldr	s13, [pc, #192]	; 8012158 <__ieee754_powf+0x564>
 8012098:	ed9f 6a30 	vldr	s12, [pc, #192]	; 801215c <__ieee754_powf+0x568>
 801209c:	eea7 6a26 	vfma.f32	s12, s14, s13
 80120a0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8012160 <__ieee754_powf+0x56c>
 80120a4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80120a8:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8012164 <__ieee754_powf+0x570>
 80120ac:	eea6 6a87 	vfma.f32	s12, s13, s14
 80120b0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8012168 <__ieee754_powf+0x574>
 80120b4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80120b8:	eeb0 6a40 	vmov.f32	s12, s0
 80120bc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80120c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80120c4:	eeb0 7a46 	vmov.f32	s14, s12
 80120c8:	ee77 6a66 	vsub.f32	s13, s14, s13
 80120cc:	ee20 6a06 	vmul.f32	s12, s0, s12
 80120d0:	eee0 7a27 	vfma.f32	s15, s0, s15
 80120d4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80120d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80120e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80120e4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80120e8:	ee10 3a10 	vmov	r3, s0
 80120ec:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80120f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80120f4:	da1a      	bge.n	801212c <__ieee754_powf+0x538>
 80120f6:	f000 f8b7 	bl	8012268 <scalbnf>
 80120fa:	ee20 0a08 	vmul.f32	s0, s0, s16
 80120fe:	e5cd      	b.n	8011c9c <__ieee754_powf+0xa8>
 8012100:	4a1a      	ldr	r2, [pc, #104]	; (801216c <__ieee754_powf+0x578>)
 8012102:	4293      	cmp	r3, r2
 8012104:	dd02      	ble.n	801210c <__ieee754_powf+0x518>
 8012106:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8012170 <__ieee754_powf+0x57c>
 801210a:	e67b      	b.n	8011e04 <__ieee754_powf+0x210>
 801210c:	d108      	bne.n	8012120 <__ieee754_powf+0x52c>
 801210e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012112:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8012116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801211a:	f6ff af7b 	blt.w	8012014 <__ieee754_powf+0x420>
 801211e:	e7f2      	b.n	8012106 <__ieee754_powf+0x512>
 8012120:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8012124:	f73f af76 	bgt.w	8012014 <__ieee754_powf+0x420>
 8012128:	2000      	movs	r0, #0
 801212a:	e78f      	b.n	801204c <__ieee754_powf+0x458>
 801212c:	ee00 3a10 	vmov	s0, r3
 8012130:	e7e3      	b.n	80120fa <__ieee754_powf+0x506>
 8012132:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012136:	e5b1      	b.n	8011c9c <__ieee754_powf+0xa8>
 8012138:	eeb0 0a68 	vmov.f32	s0, s17
 801213c:	e5ae      	b.n	8011c9c <__ieee754_powf+0xa8>
 801213e:	eeb0 0a48 	vmov.f32	s0, s16
 8012142:	e5ab      	b.n	8011c9c <__ieee754_powf+0xa8>
 8012144:	2600      	movs	r6, #0
 8012146:	e590      	b.n	8011c6a <__ieee754_powf+0x76>
 8012148:	007fffff 	.word	0x007fffff
 801214c:	3f317218 	.word	0x3f317218
 8012150:	35bfbe8c 	.word	0x35bfbe8c
 8012154:	3f317200 	.word	0x3f317200
 8012158:	3331bb4c 	.word	0x3331bb4c
 801215c:	b5ddea0e 	.word	0xb5ddea0e
 8012160:	388ab355 	.word	0x388ab355
 8012164:	bb360b61 	.word	0xbb360b61
 8012168:	3e2aaaab 	.word	0x3e2aaaab
 801216c:	43160000 	.word	0x43160000
 8012170:	0da24260 	.word	0x0da24260

08012174 <__ieee754_sqrtf>:
 8012174:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012178:	4770      	bx	lr

0801217a <fabsf>:
 801217a:	ee10 3a10 	vmov	r3, s0
 801217e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012182:	ee00 3a10 	vmov	s0, r3
 8012186:	4770      	bx	lr

08012188 <finitef>:
 8012188:	b082      	sub	sp, #8
 801218a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801218e:	9801      	ldr	r0, [sp, #4]
 8012190:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012194:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8012198:	bfac      	ite	ge
 801219a:	2000      	movge	r0, #0
 801219c:	2001      	movlt	r0, #1
 801219e:	b002      	add	sp, #8
 80121a0:	4770      	bx	lr
	...

080121a4 <nanf>:
 80121a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80121ac <nanf+0x8>
 80121a8:	4770      	bx	lr
 80121aa:	bf00      	nop
 80121ac:	7fc00000 	.word	0x7fc00000

080121b0 <rintf>:
 80121b0:	ee10 2a10 	vmov	r2, s0
 80121b4:	b513      	push	{r0, r1, r4, lr}
 80121b6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80121ba:	397f      	subs	r1, #127	; 0x7f
 80121bc:	2916      	cmp	r1, #22
 80121be:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80121c2:	dc47      	bgt.n	8012254 <rintf+0xa4>
 80121c4:	b32b      	cbz	r3, 8012212 <rintf+0x62>
 80121c6:	2900      	cmp	r1, #0
 80121c8:	ee10 3a10 	vmov	r3, s0
 80121cc:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80121d0:	da21      	bge.n	8012216 <rintf+0x66>
 80121d2:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80121d6:	425b      	negs	r3, r3
 80121d8:	4921      	ldr	r1, [pc, #132]	; (8012260 <rintf+0xb0>)
 80121da:	0a5b      	lsrs	r3, r3, #9
 80121dc:	0d12      	lsrs	r2, r2, #20
 80121de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80121e2:	0512      	lsls	r2, r2, #20
 80121e4:	4313      	orrs	r3, r2
 80121e6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80121ea:	ee07 3a90 	vmov	s15, r3
 80121ee:	edd1 6a00 	vldr	s13, [r1]
 80121f2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80121f6:	ed8d 7a01 	vstr	s14, [sp, #4]
 80121fa:	eddd 7a01 	vldr	s15, [sp, #4]
 80121fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012202:	ee17 3a90 	vmov	r3, s15
 8012206:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801220a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801220e:	ee00 3a10 	vmov	s0, r3
 8012212:	b002      	add	sp, #8
 8012214:	bd10      	pop	{r4, pc}
 8012216:	4a13      	ldr	r2, [pc, #76]	; (8012264 <rintf+0xb4>)
 8012218:	410a      	asrs	r2, r1
 801221a:	4213      	tst	r3, r2
 801221c:	d0f9      	beq.n	8012212 <rintf+0x62>
 801221e:	0854      	lsrs	r4, r2, #1
 8012220:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8012224:	d006      	beq.n	8012234 <rintf+0x84>
 8012226:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801222a:	ea23 0304 	bic.w	r3, r3, r4
 801222e:	fa42 f101 	asr.w	r1, r2, r1
 8012232:	430b      	orrs	r3, r1
 8012234:	4a0a      	ldr	r2, [pc, #40]	; (8012260 <rintf+0xb0>)
 8012236:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801223a:	ed90 7a00 	vldr	s14, [r0]
 801223e:	ee07 3a90 	vmov	s15, r3
 8012242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012246:	edcd 7a01 	vstr	s15, [sp, #4]
 801224a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801224e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012252:	e7de      	b.n	8012212 <rintf+0x62>
 8012254:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012258:	d3db      	bcc.n	8012212 <rintf+0x62>
 801225a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801225e:	e7d8      	b.n	8012212 <rintf+0x62>
 8012260:	08012664 	.word	0x08012664
 8012264:	007fffff 	.word	0x007fffff

08012268 <scalbnf>:
 8012268:	ee10 3a10 	vmov	r3, s0
 801226c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012270:	d025      	beq.n	80122be <scalbnf+0x56>
 8012272:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012276:	d302      	bcc.n	801227e <scalbnf+0x16>
 8012278:	ee30 0a00 	vadd.f32	s0, s0, s0
 801227c:	4770      	bx	lr
 801227e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8012282:	d122      	bne.n	80122ca <scalbnf+0x62>
 8012284:	4b2a      	ldr	r3, [pc, #168]	; (8012330 <scalbnf+0xc8>)
 8012286:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012334 <scalbnf+0xcc>
 801228a:	4298      	cmp	r0, r3
 801228c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012290:	db16      	blt.n	80122c0 <scalbnf+0x58>
 8012292:	ee10 3a10 	vmov	r3, s0
 8012296:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801229a:	3a19      	subs	r2, #25
 801229c:	4402      	add	r2, r0
 801229e:	2afe      	cmp	r2, #254	; 0xfe
 80122a0:	dd15      	ble.n	80122ce <scalbnf+0x66>
 80122a2:	ee10 3a10 	vmov	r3, s0
 80122a6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8012338 <scalbnf+0xd0>
 80122aa:	eddf 6a24 	vldr	s13, [pc, #144]	; 801233c <scalbnf+0xd4>
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	eeb0 7a67 	vmov.f32	s14, s15
 80122b4:	bfb8      	it	lt
 80122b6:	eef0 7a66 	vmovlt.f32	s15, s13
 80122ba:	ee27 0a27 	vmul.f32	s0, s14, s15
 80122be:	4770      	bx	lr
 80122c0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012340 <scalbnf+0xd8>
 80122c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80122c8:	4770      	bx	lr
 80122ca:	0dd2      	lsrs	r2, r2, #23
 80122cc:	e7e6      	b.n	801229c <scalbnf+0x34>
 80122ce:	2a00      	cmp	r2, #0
 80122d0:	dd06      	ble.n	80122e0 <scalbnf+0x78>
 80122d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80122d6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80122da:	ee00 3a10 	vmov	s0, r3
 80122de:	4770      	bx	lr
 80122e0:	f112 0f16 	cmn.w	r2, #22
 80122e4:	da1a      	bge.n	801231c <scalbnf+0xb4>
 80122e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80122ea:	4298      	cmp	r0, r3
 80122ec:	ee10 3a10 	vmov	r3, s0
 80122f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80122f4:	dd0a      	ble.n	801230c <scalbnf+0xa4>
 80122f6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8012338 <scalbnf+0xd0>
 80122fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801233c <scalbnf+0xd4>
 80122fe:	eef0 7a40 	vmov.f32	s15, s0
 8012302:	2b00      	cmp	r3, #0
 8012304:	bf18      	it	ne
 8012306:	eeb0 0a47 	vmovne.f32	s0, s14
 801230a:	e7db      	b.n	80122c4 <scalbnf+0x5c>
 801230c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012340 <scalbnf+0xd8>
 8012310:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8012344 <scalbnf+0xdc>
 8012314:	eef0 7a40 	vmov.f32	s15, s0
 8012318:	2b00      	cmp	r3, #0
 801231a:	e7f3      	b.n	8012304 <scalbnf+0x9c>
 801231c:	3219      	adds	r2, #25
 801231e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012322:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012326:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012348 <scalbnf+0xe0>
 801232a:	ee07 3a10 	vmov	s14, r3
 801232e:	e7c4      	b.n	80122ba <scalbnf+0x52>
 8012330:	ffff3cb0 	.word	0xffff3cb0
 8012334:	4c000000 	.word	0x4c000000
 8012338:	7149f2ca 	.word	0x7149f2ca
 801233c:	f149f2ca 	.word	0xf149f2ca
 8012340:	0da24260 	.word	0x0da24260
 8012344:	8da24260 	.word	0x8da24260
 8012348:	33000000 	.word	0x33000000

0801234c <__errno>:
 801234c:	4b01      	ldr	r3, [pc, #4]	; (8012354 <__errno+0x8>)
 801234e:	6818      	ldr	r0, [r3, #0]
 8012350:	4770      	bx	lr
 8012352:	bf00      	nop
 8012354:	2000018c 	.word	0x2000018c

08012358 <__libc_init_array>:
 8012358:	b570      	push	{r4, r5, r6, lr}
 801235a:	4d0d      	ldr	r5, [pc, #52]	; (8012390 <__libc_init_array+0x38>)
 801235c:	4c0d      	ldr	r4, [pc, #52]	; (8012394 <__libc_init_array+0x3c>)
 801235e:	1b64      	subs	r4, r4, r5
 8012360:	10a4      	asrs	r4, r4, #2
 8012362:	2600      	movs	r6, #0
 8012364:	42a6      	cmp	r6, r4
 8012366:	d109      	bne.n	801237c <__libc_init_array+0x24>
 8012368:	4d0b      	ldr	r5, [pc, #44]	; (8012398 <__libc_init_array+0x40>)
 801236a:	4c0c      	ldr	r4, [pc, #48]	; (801239c <__libc_init_array+0x44>)
 801236c:	f000 f82e 	bl	80123cc <_init>
 8012370:	1b64      	subs	r4, r4, r5
 8012372:	10a4      	asrs	r4, r4, #2
 8012374:	2600      	movs	r6, #0
 8012376:	42a6      	cmp	r6, r4
 8012378:	d105      	bne.n	8012386 <__libc_init_array+0x2e>
 801237a:	bd70      	pop	{r4, r5, r6, pc}
 801237c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012380:	4798      	blx	r3
 8012382:	3601      	adds	r6, #1
 8012384:	e7ee      	b.n	8012364 <__libc_init_array+0xc>
 8012386:	f855 3b04 	ldr.w	r3, [r5], #4
 801238a:	4798      	blx	r3
 801238c:	3601      	adds	r6, #1
 801238e:	e7f2      	b.n	8012376 <__libc_init_array+0x1e>
 8012390:	080126cc 	.word	0x080126cc
 8012394:	080126cc 	.word	0x080126cc
 8012398:	080126cc 	.word	0x080126cc
 801239c:	080126d4 	.word	0x080126d4

080123a0 <memcpy>:
 80123a0:	440a      	add	r2, r1
 80123a2:	4291      	cmp	r1, r2
 80123a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80123a8:	d100      	bne.n	80123ac <memcpy+0xc>
 80123aa:	4770      	bx	lr
 80123ac:	b510      	push	{r4, lr}
 80123ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80123b6:	4291      	cmp	r1, r2
 80123b8:	d1f9      	bne.n	80123ae <memcpy+0xe>
 80123ba:	bd10      	pop	{r4, pc}

080123bc <memset>:
 80123bc:	4402      	add	r2, r0
 80123be:	4603      	mov	r3, r0
 80123c0:	4293      	cmp	r3, r2
 80123c2:	d100      	bne.n	80123c6 <memset+0xa>
 80123c4:	4770      	bx	lr
 80123c6:	f803 1b01 	strb.w	r1, [r3], #1
 80123ca:	e7f9      	b.n	80123c0 <memset+0x4>

080123cc <_init>:
 80123cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ce:	bf00      	nop
 80123d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123d2:	bc08      	pop	{r3}
 80123d4:	469e      	mov	lr, r3
 80123d6:	4770      	bx	lr

080123d8 <_fini>:
 80123d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123da:	bf00      	nop
 80123dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123de:	bc08      	pop	{r3}
 80123e0:	469e      	mov	lr, r3
 80123e2:	4770      	bx	lr
