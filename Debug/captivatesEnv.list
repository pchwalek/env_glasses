
captivatesEnv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d10  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08010e50  08010e50  00020e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080110ac  080110ac  000210ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080110b0  080110b0  000210b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000194  20000004  080110b4  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003728  20000198  08011248  00030198  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200038c0  08011248  000338c0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004d1f4  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00008738  00000000  00000000  0007d3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003140  00000000  00000000  00085af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00002e00  00000000  00000000  00088c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033951  00000000  00000000  0008ba38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003c6bb  00000000  00000000  000bf389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001184d9  00000000  00000000  000fba44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00213f1d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000cda4  00000000  00000000  00213f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000198 	.word	0x20000198
 800015c:	00000000 	.word	0x00000000
 8000160:	08010e38 	.word	0x08010e38

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000019c 	.word	0x2000019c
 800017c:	08010e38 	.word	0x08010e38

08000180 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800018c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4313      	orrs	r3, r2
 8000196:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800019c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	4013      	ands	r3, r2
 80001a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a4:	68fb      	ldr	r3, [r7, #12]
}
 80001a6:	bf00      	nop
 80001a8:	3714      	adds	r7, #20
 80001aa:	46bd      	mov	sp, r7
 80001ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001b0:	4770      	bx	lr
	...

080001b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ba:	463b      	mov	r3, r7
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
 80001c0:	605a      	str	r2, [r3, #4]
 80001c2:	609a      	str	r2, [r3, #8]
 80001c4:	60da      	str	r2, [r3, #12]
 80001c6:	611a      	str	r2, [r3, #16]
 80001c8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ca:	4b29      	ldr	r3, [pc, #164]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001cc:	4a29      	ldr	r2, [pc, #164]	; (8000274 <MX_ADC1_Init+0xc0>)
 80001ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001d0:	4b27      	ldr	r3, [pc, #156]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001d6:	4b26      	ldr	r3, [pc, #152]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001d8:	2200      	movs	r2, #0
 80001da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001dc:	4b24      	ldr	r3, [pc, #144]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001de:	2200      	movs	r2, #0
 80001e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001e2:	4b23      	ldr	r3, [pc, #140]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80001e8:	4b21      	ldr	r3, [pc, #132]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001ea:	2204      	movs	r2, #4
 80001ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80001ee:	4b20      	ldr	r3, [pc, #128]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80001f4:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80001fa:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000200:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000202:	2200      	movs	r2, #0
 8000204:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000208:	4b19      	ldr	r3, [pc, #100]	; (8000270 <MX_ADC1_Init+0xbc>)
 800020a:	2200      	movs	r2, #0
 800020c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800020e:	4b18      	ldr	r3, [pc, #96]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000210:	2200      	movs	r2, #0
 8000212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000214:	4b16      	ldr	r3, [pc, #88]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000216:	2200      	movs	r2, #0
 8000218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <MX_ADC1_Init+0xbc>)
 800021e:	2200      	movs	r2, #0
 8000220:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000222:	4b13      	ldr	r3, [pc, #76]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000224:	2200      	movs	r2, #0
 8000226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800022a:	4811      	ldr	r0, [pc, #68]	; (8000270 <MX_ADC1_Init+0xbc>)
 800022c:	f001 fd14 	bl	8001c58 <HAL_ADC_Init>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000236:	f000 fe89 	bl	8000f4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <MX_ADC1_Init+0xc4>)
 800023c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800023e:	2306      	movs	r3, #6
 8000240:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000246:	237f      	movs	r3, #127	; 0x7f
 8000248:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800024a:	2304      	movs	r3, #4
 800024c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000252:	463b      	mov	r3, r7
 8000254:	4619      	mov	r1, r3
 8000256:	4806      	ldr	r0, [pc, #24]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000258:	f001 fe4a 	bl	8001ef0 <HAL_ADC_ConfigChannel>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000262:	f000 fe73 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000266:	bf00      	nop
 8000268:	3718      	adds	r7, #24
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20001d10 	.word	0x20001d10
 8000274:	50040000 	.word	0x50040000
 8000278:	19200040 	.word	0x19200040

0800027c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	f107 030c 	add.w	r3, r7, #12
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <HAL_ADC_MspInit+0x54>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d113      	bne.n	80002c6 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800029e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80002a2:	f7ff ff6d 	bl	8000180 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	2001      	movs	r0, #1
 80002a8:	f7ff ff6a 	bl	8000180 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002b0:	2303      	movs	r3, #3
 80002b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b4:	2300      	movs	r3, #0
 80002b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 80002b8:	f107 030c 	add.w	r3, r7, #12
 80002bc:	4619      	mov	r1, r3
 80002be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c2:	f002 fabb 	bl	800283c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002c6:	bf00      	nop
 80002c8:	3720      	adds	r7, #32
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	50040000 	.word	0x50040000

080002d4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80002dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002e0:	4a0a      	ldr	r2, [pc, #40]	; (800030c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80002e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80002e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80002ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	021b      	lsls	r3, r3, #8
 80002f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002fa:	4313      	orrs	r3, r2
 80002fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	cafecafe 	.word	0xcafecafe

08000310 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800031c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800033a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800033e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800035c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000364:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000368:	d101      	bne.n	800036e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800036a:	2301      	movs	r3, #1
 800036c:	e000      	b.n	8000370 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800036e:	2300      	movs	r3, #0
}
 8000370:	4618      	mov	r0, r3
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800037e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800038e:	d101      	bne.n	8000394 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000390:	2301      	movs	r3, #1
 8000392:	e000      	b.n	8000396 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000394:	2300      	movs	r3, #0
}
 8000396:	4618      	mov	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80003a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80003b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4013      	ands	r3, r2
 80003c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003c4:	68fb      	ldr	r3, [r7, #12]
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685a      	ldr	r2, [r3, #4]
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	041b      	lsls	r3, r3, #16
 80003e4:	431a      	orrs	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	685a      	ldr	r2, [r3, #4]
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	431a      	orrs	r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	605a      	str	r2, [r3, #4]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	041b      	lsls	r3, r3, #16
 800042a:	431a      	orrs	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	615a      	str	r2, [r3, #20]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	431a      	orrs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	615a      	str	r2, [r3, #20]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	609a      	str	r2, [r3, #8]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	619a      	str	r2, [r3, #24]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <MX_APPE_Config+0x18>)
 800049e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004a2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 80004a4:	f000 f806 	bl	80004b4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80004a8:	f000 f846 	bl	8000538 <Config_HSE>

  return;
 80004ac:	bf00      	nop
}
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	58004000 	.word	0x58004000

080004b4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80004b8:	f000 f804 	bl	80004c4 <Reset_BackupDomain>

  Reset_IPCC();
 80004bc:	f000 f81a 	bl	80004f4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 80004c0:	bf00      	nop
}
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80004c8:	f7ff ff44 	bl	8000354 <LL_RCC_IsActiveFlag_PINRST>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d00d      	beq.n	80004ee <Reset_BackupDomain+0x2a>
 80004d2:	f7ff ff52 	bl	800037a <LL_RCC_IsActiveFlag_SFTRST>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d108      	bne.n	80004ee <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80004dc:	f004 fd66 	bl	8004fac <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80004e0:	f004 fd64 	bl	8004fac <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80004e4:	f7ff ff14 	bl	8000310 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80004e8:	f7ff ff23 	bl	8000332 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
}
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80004f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80004fc:	f7ff ff50 	bl	80003a0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000500:	213f      	movs	r1, #63	; 0x3f
 8000502:	480c      	ldr	r0, [pc, #48]	; (8000534 <Reset_IPCC+0x40>)
 8000504:	f7ff ffab 	bl	800045e <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000508:	213f      	movs	r1, #63	; 0x3f
 800050a:	480a      	ldr	r0, [pc, #40]	; (8000534 <Reset_IPCC+0x40>)
 800050c:	f7ff ffb5 	bl	800047a <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000510:	213f      	movs	r1, #63	; 0x3f
 8000512:	4808      	ldr	r0, [pc, #32]	; (8000534 <Reset_IPCC+0x40>)
 8000514:	f7ff ff5d 	bl	80003d2 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000518:	213f      	movs	r1, #63	; 0x3f
 800051a:	4806      	ldr	r0, [pc, #24]	; (8000534 <Reset_IPCC+0x40>)
 800051c:	f7ff ff7c 	bl	8000418 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000520:	213f      	movs	r1, #63	; 0x3f
 8000522:	4804      	ldr	r0, [pc, #16]	; (8000534 <Reset_IPCC+0x40>)
 8000524:	f7ff ff67 	bl	80003f6 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000528:	213f      	movs	r1, #63	; 0x3f
 800052a:	4802      	ldr	r0, [pc, #8]	; (8000534 <Reset_IPCC+0x40>)
 800052c:	f7ff ff86 	bl	800043c <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000530:	bf00      	nop
}
 8000532:	bd80      	pop	{r7, pc}
 8000534:	58000c00 	.word	0x58000c00

08000538 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800053e:	2000      	movs	r0, #0
 8000540:	f00c fb54 	bl	800cbec <OTP_Read>
 8000544:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d005      	beq.n	8000558 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	799b      	ldrb	r3, [r3, #6]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff febf 	bl	80002d4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000556:	bf00      	nop
 8000558:	bf00      	nop
}
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osMutexNew(&messageI2C_Lock_attributes);
 8000564:	480f      	ldr	r0, [pc, #60]	; (80005a4 <MX_FREERTOS_Init+0x44>)
 8000566:	f00c fca4 	bl	800ceb2 <osMutexNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <MX_FREERTOS_Init+0x48>)
 800056e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	/* creation of lightsSimpleQueue */
	lightsComplexQueueHandle = osMessageQueueNew(3, sizeof(union ColorComplex),
 8000570:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <MX_FREERTOS_Init+0x4c>)
 8000572:	2112      	movs	r1, #18
 8000574:	2003      	movs	r0, #3
 8000576:	f00c fdb9 	bl	800d0ec <osMessageQueueNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <MX_FREERTOS_Init+0x50>)
 800057e:	6013      	str	r3, [r2, #0]
			&lightsComplexQueue_attributes);
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000580:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <MX_FREERTOS_Init+0x54>)
 8000582:	2100      	movs	r1, #0
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <MX_FREERTOS_Init+0x58>)
 8000586:	f00c fbe7 	bl	800cd58 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <MX_FREERTOS_Init+0x5c>)
 800058e:	6013      	str	r3, [r2, #0]

  /* creation of frontLightsThre */
  frontLightsThreHandle = osThreadNew(ThreadFrontLightsComplexTask, NULL, &frontLightsThre_attributes);
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <MX_FREERTOS_Init+0x60>)
 8000592:	2100      	movs	r1, #0
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <MX_FREERTOS_Init+0x64>)
 8000596:	f00c fbdf 	bl	800cd58 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <MX_FREERTOS_Init+0x68>)
 800059e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	08010f7c 	.word	0x08010f7c
 80005a8:	20001d78 	.word	0x20001d78
 80005ac:	08010f1c 	.word	0x08010f1c
 80005b0:	20001d7c 	.word	0x20001d7c
 80005b4:	08010f34 	.word	0x08010f34
 80005b8:	080005cd 	.word	0x080005cd
 80005bc:	20001d74 	.word	0x20001d74
 80005c0:	08010f58 	.word	0x08010f58
 80005c4:	08000a8d 	.word	0x08000a8d
 80005c8:	20001d80 	.word	0x20001d80

080005cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d8:	f00c fc50 	bl	800ce7c <osDelay>

	while(1){
		ledStartupSequence();
 80005dc:	f000 faae 	bl	8000b3c <ledStartupSequence>
		osDelay(1500);
 80005e0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005e4:	f00c fc4a 	bl	800ce7c <osDelay>
		ledStartupSequence();
 80005e8:	e7f8      	b.n	80005dc <StartDefaultTask+0x10>

080005ea <LL_AHB2_GRP1_EnableClock>:
{
 80005ea:	b480      	push	{r7}
 80005ec:	b085      	sub	sp, #20
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4313      	orrs	r3, r2
 8000600:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <MX_GPIO_Init>:

/** Configure pins
     PA1   ------> SharedAnalog_PA1
*/
void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	2001      	movs	r0, #1
 8000632:	f7ff ffda 	bl	80005ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	2004      	movs	r0, #4
 8000638:	f7ff ffd7 	bl	80005ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	2002      	movs	r0, #2
 800063e:	f7ff ffd4 	bl	80005ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000642:	2008      	movs	r0, #8
 8000644:	f7ff ffd1 	bl	80005ea <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_1_8V_Pin|MEM_WP_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800064e:	481d      	ldr	r0, [pc, #116]	; (80006c4 <MX_GPIO_Init+0xa8>)
 8000650:	f002 fa64 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 8000654:	2302      	movs	r3, #2
 8000656:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000658:	2303      	movs	r3, #3
 800065a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f002 f8e8 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EN_1_8V_Pin|MEM_WP_Pin;
 800066c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000670:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4810      	ldr	r0, [pc, #64]	; (80006c4 <MX_GPIO_Init+0xa8>)
 8000684:	f002 f8da 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA9_Pin;
 8000688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800068c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(PA9_GPIO_Port, &GPIO_InitStruct);
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	4619      	mov	r1, r3
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f002 f8cd 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = PD4_Pin|PD9_Pin;
 80006a2:	f44f 7304 	mov.w	r3, #528	; 0x210
 80006a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_GPIO_Init+0xac>)
 80006b6:	f002 f8c1 	bl	800283c <HAL_GPIO_Init>

}
 80006ba:	bf00      	nop
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	48000800 	.word	0x48000800
 80006c8:	48000c00 	.word	0x48000c00

080006cc <LL_AHB2_GRP1_EnableClock>:
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4013      	ands	r3, r2
 80006ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006f0:	68fb      	ldr	r3, [r7, #12]
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006fe:	b480      	push	{r7}
 8000700:	b085      	sub	sp, #20
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800070a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800070c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4313      	orrs	r3, r2
 8000714:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800071a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4013      	ands	r3, r2
 8000720:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000722:	68fb      	ldr	r3, [r7, #12]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <MX_I2C1_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_I2C1_Init+0x74>)
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <MX_I2C1_Init+0x7c>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000748:	2201      	movs	r2, #1
 800074a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800076a:	480e      	ldr	r0, [pc, #56]	; (80007a4 <MX_I2C1_Init+0x74>)
 800076c:	f002 fa12 	bl	8002b94 <HAL_I2C_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000776:	f000 fbe9 	bl	8000f4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	4809      	ldr	r0, [pc, #36]	; (80007a4 <MX_I2C1_Init+0x74>)
 800077e:	f002 fdc3 	bl	8003308 <HAL_I2CEx_ConfigAnalogFilter>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000788:	f000 fbe0 	bl	8000f4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800078c:	2100      	movs	r1, #0
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000790:	f002 fe05 	bl	800339e <HAL_I2CEx_ConfigDigitalFilter>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800079a:	f000 fbd7 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20001dd4 	.word	0x20001dd4
 80007a8:	40005400 	.word	0x40005400
 80007ac:	10707dbc 	.word	0x10707dbc

080007b0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_I2C3_Init+0x74>)
 80007b6:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <MX_I2C3_Init+0x78>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_I2C3_Init+0x74>)
 80007bc:	4a1b      	ldr	r2, [pc, #108]	; (800082c <MX_I2C3_Init+0x7c>)
 80007be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_I2C3_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_I2C3_Init+0x74>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_I2C3_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_I2C3_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_I2C3_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_I2C3_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_I2C3_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007ea:	480e      	ldr	r0, [pc, #56]	; (8000824 <MX_I2C3_Init+0x74>)
 80007ec:	f002 f9d2 	bl	8002b94 <HAL_I2C_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007f6:	f000 fba9 	bl	8000f4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <MX_I2C3_Init+0x74>)
 80007fe:	f002 fd83 	bl	8003308 <HAL_I2CEx_ConfigAnalogFilter>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000808:	f000 fba0 	bl	8000f4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_I2C3_Init+0x74>)
 8000810:	f002 fdc5 	bl	800339e <HAL_I2CEx_ConfigDigitalFilter>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800081a:	f000 fb97 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20001d88 	.word	0x20001d88
 8000828:	40005c00 	.word	0x40005c00
 800082c:	10707dbc 	.word	0x10707dbc

08000830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09c      	sub	sp, #112	; 0x70
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2250      	movs	r2, #80	; 0x50
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f010 fae9 	bl	8010e28 <memset>
  if(i2cHandle->Instance==I2C1)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a2d      	ldr	r2, [pc, #180]	; (8000910 <HAL_I2C_MspInit+0xe0>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d127      	bne.n	80008b0 <HAL_I2C_MspInit+0x80>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000860:	2304      	movs	r3, #4
 8000862:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000864:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4618      	mov	r0, r3
 8000870:	f006 f932 	bl	8006ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800087a:	f000 fb67 	bl	8000f4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2002      	movs	r0, #2
 8000880:	f7ff ff24 	bl	80006cc <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8000884:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000888:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800088a:	2312      	movs	r3, #18
 800088c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000896:	2304      	movs	r3, #4
 8000898:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800089e:	4619      	mov	r1, r3
 80008a0:	481c      	ldr	r0, [pc, #112]	; (8000914 <HAL_I2C_MspInit+0xe4>)
 80008a2:	f001 ffcb 	bl	800283c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80008aa:	f7ff ff28 	bl	80006fe <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80008ae:	e02a      	b.n	8000906 <HAL_I2C_MspInit+0xd6>
  else if(i2cHandle->Instance==I2C3)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a18      	ldr	r2, [pc, #96]	; (8000918 <HAL_I2C_MspInit+0xe8>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d125      	bne.n	8000906 <HAL_I2C_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80008ba:	2308      	movs	r3, #8
 80008bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80008be:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4618      	mov	r0, r3
 80008ca:	f006 f905 	bl	8006ad8 <HAL_RCCEx_PeriphCLKConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 80008d4:	f000 fb3a 	bl	8000f4c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d8:	2004      	movs	r0, #4
 80008da:	f7ff fef7 	bl	80006cc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80008de:	2303      	movs	r3, #3
 80008e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e2:	2312      	movs	r3, #18
 80008e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008ee:	2304      	movs	r3, #4
 80008f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008f6:	4619      	mov	r1, r3
 80008f8:	4808      	ldr	r0, [pc, #32]	; (800091c <HAL_I2C_MspInit+0xec>)
 80008fa:	f001 ff9f 	bl	800283c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80008fe:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000902:	f7ff fefc 	bl	80006fe <LL_APB1_GRP1_EnableClock>
}
 8000906:	bf00      	nop
 8000908:	3770      	adds	r7, #112	; 0x70
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40005400 	.word	0x40005400
 8000914:	48000400 	.word	0x48000400
 8000918:	40005c00 	.word	0x40005c00
 800091c:	48000800 	.word	0x48000800

08000920 <LL_AHB3_GRP1_EnableClock>:
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800092c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800092e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4313      	orrs	r3, r2
 8000936:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000944:	68fb      	ldr	r3, [r7, #12]
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_IPCC_Init+0x20>)
 800095a:	4a07      	ldr	r2, [pc, #28]	; (8000978 <MX_IPCC_Init+0x24>)
 800095c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_IPCC_Init+0x20>)
 8000960:	f002 fd6a 	bl	8003438 <HAL_IPCC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800096a:	f000 faef 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20001e20 	.word	0x20001e20
 8000978:	58000c00 	.word	0x58000c00

0800097c <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <HAL_IPCC_MspInit+0x24>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d103      	bne.n	8000996 <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800098e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000992:	f7ff ffc5 	bl	8000920 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	58000c00 	.word	0x58000c00

080009a4 <setup_LP5523>:
		LOG_EN, LOG_EN, LOG_EN, LOG_EN };
uint8_t deviceAddress;
uint8_t led_PWM[9] = { 0 };
uint8_t packet;

void setup_LP5523(uint8_t ADDR) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af04      	add	r7, sp, #16
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <setup_LP5523+0xcc>)
 80009b6:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80009b8:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <setup_LP5523+0xd0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009c0:	4618      	mov	r0, r3
 80009c2:	f00c fafd 	bl	800cfc0 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 80009c6:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <setup_LP5523+0xd4>)
 80009c8:	2240      	movs	r2, #64	; 0x40
 80009ca:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG,
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <setup_LP5523+0xcc>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b299      	uxth	r1, r3
 80009d2:	2364      	movs	r3, #100	; 0x64
 80009d4:	9302      	str	r3, [sp, #8]
 80009d6:	2301      	movs	r3, #1
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <setup_LP5523+0xd4>)
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2301      	movs	r3, #1
 80009e0:	2200      	movs	r2, #0
 80009e2:	4826      	ldr	r0, [pc, #152]	; (8000a7c <setup_LP5523+0xd8>)
 80009e4:	f002 f966 	bl	8002cb4 <HAL_I2C_Mem_Write>
			1, &packet, 1, I2C_TIMEOUT);

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 80009e8:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <setup_LP5523+0xd4>)
 80009ea:	224f      	movs	r2, #79	; 0x4f
 80009ec:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1,
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <setup_LP5523+0xcc>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b299      	uxth	r1, r3
 80009f4:	2364      	movs	r3, #100	; 0x64
 80009f6:	9302      	str	r3, [sp, #8]
 80009f8:	2301      	movs	r3, #1
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <setup_LP5523+0xd4>)
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2301      	movs	r3, #1
 8000a02:	2236      	movs	r2, #54	; 0x36
 8000a04:	481d      	ldr	r0, [pc, #116]	; (8000a7c <setup_LP5523+0xd8>)
 8000a06:	f002 f955 	bl	8002cb4 <HAL_I2C_Mem_Write>
			&packet, 1, I2C_TIMEOUT);

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1,
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <setup_LP5523+0xcc>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b299      	uxth	r1, r3
 8000a10:	2364      	movs	r3, #100	; 0x64
 8000a12:	9302      	str	r3, [sp, #8]
 8000a14:	2309      	movs	r3, #9
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <setup_LP5523+0xdc>)
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	2216      	movs	r2, #22
 8000a20:	4816      	ldr	r0, [pc, #88]	; (8000a7c <setup_LP5523+0xd8>)
 8000a22:	f002 f947 	bl	8002cb4 <HAL_I2C_Mem_Write>
			led_PWM, 9, I2C_TIMEOUT);

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress,
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <setup_LP5523+0xcc>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b299      	uxth	r1, r3
 8000a2c:	2364      	movs	r3, #100	; 0x64
 8000a2e:	9302      	str	r3, [sp, #8]
 8000a30:	2309      	movs	r3, #9
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <setup_LP5523+0xe0>)
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	2226      	movs	r2, #38	; 0x26
 8000a3c:	480f      	ldr	r0, [pc, #60]	; (8000a7c <setup_LP5523+0xd8>)
 8000a3e:	f002 f939 	bl	8002cb4 <HAL_I2C_Mem_Write>
			LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1,
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <setup_LP5523+0xcc>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b299      	uxth	r1, r3
 8000a48:	2364      	movs	r3, #100	; 0x64
 8000a4a:	9302      	str	r3, [sp, #8]
 8000a4c:	2309      	movs	r3, #9
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <setup_LP5523+0xe4>)
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2301      	movs	r3, #1
 8000a56:	2206      	movs	r2, #6
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <setup_LP5523+0xd8>)
 8000a5a:	f002 f92b 	bl	8002cb4 <HAL_I2C_Mem_Write>
			packet_array, 9, I2C_TIMEOUT);

	osSemaphoreRelease(messageI2C_LockHandle);
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <setup_LP5523+0xd0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f00c fafe 	bl	800d064 <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20001e72 	.word	0x20001e72
 8000a74:	20001d78 	.word	0x20001d78
 8000a78:	20001e5c 	.word	0x20001e5c
 8000a7c:	20001dd4 	.word	0x20001dd4
 8000a80:	200001cc 	.word	0x200001cc
 8000a84:	20000004 	.word	0x20000004
 8000a88:	08010fa0 	.word	0x08010fa0

08000a8c <ThreadFrontLightsComplexTask>:
	    	}
#endif
}

union ColorComplex receivedColors;
void ThreadFrontLightsComplexTask(void *argument){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	6078      	str	r0, [r7, #4]

	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8000a94:	2034      	movs	r0, #52	; 0x34
 8000a96:	f7ff ff85 	bl	80009a4 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8000a9a:	2035      	movs	r0, #53	; 0x35
 8000a9c:	f7ff ff82 	bl	80009a4 <setup_LP5523>

	HAL_StatusTypeDef state = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]



	while (1) {
		osMessageQueueGet(lightsComplexQueueHandle, &receivedColors,
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <ThreadFrontLightsComplexTask+0x98>)
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aac:	2200      	movs	r2, #0
 8000aae:	491e      	ldr	r1, [pc, #120]	; (8000b28 <ThreadFrontLightsComplexTask+0x9c>)
 8000ab0:	f00c fbf0 	bl	800d294 <osMessageQueueGet>
						0U, osWaitForever);
		memcpy(led_left_PWM, &receivedColors, 9);
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <ThreadFrontLightsComplexTask+0xa0>)
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <ThreadFrontLightsComplexTask+0x9c>)
 8000ab8:	6810      	ldr	r0, [r2, #0]
 8000aba:	6851      	ldr	r1, [r2, #4]
 8000abc:	c303      	stmia	r3!, {r0, r1}
 8000abe:	7a12      	ldrb	r2, [r2, #8]
 8000ac0:	701a      	strb	r2, [r3, #0]
		memcpy(led_right_PWM, &(receivedColors.color[9]), 9);
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <ThreadFrontLightsComplexTask+0xa4>)
 8000ac4:	4a18      	ldr	r2, [pc, #96]	; (8000b28 <ThreadFrontLightsComplexTask+0x9c>)
 8000ac6:	3209      	adds	r2, #9
 8000ac8:	6810      	ldr	r0, [r2, #0]
 8000aca:	6851      	ldr	r1, [r2, #4]
 8000acc:	c303      	stmia	r3!, {r0, r1}
 8000ace:	7a12      	ldrb	r2, [r2, #8]
 8000ad0:	701a      	strb	r2, [r3, #0]
	#ifndef DONGLE_CODE
		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <ThreadFrontLightsComplexTask+0xa8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ada:	4618      	mov	r0, r3
 8000adc:	f00c fa70 	bl	800cfc0 <osSemaphoreAcquire>

//		HAL_I2C_Mem_Write_DMA(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1,
//				LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9);
		state = HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1,
 8000ae0:	2305      	movs	r3, #5
 8000ae2:	9302      	str	r3, [sp, #8]
 8000ae4:	2309      	movs	r3, #9
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <ThreadFrontLightsComplexTask+0xa0>)
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2301      	movs	r3, #1
 8000aee:	2216      	movs	r2, #22
 8000af0:	2168      	movs	r1, #104	; 0x68
 8000af2:	4811      	ldr	r0, [pc, #68]	; (8000b38 <ThreadFrontLightsComplexTask+0xac>)
 8000af4:	f002 f8de 	bl	8002cb4 <HAL_I2C_Mem_Write>
 8000af8:	4603      	mov	r3, r0
 8000afa:	73fb      	strb	r3, [r7, #15]
////			if(counter > 1000){
////				HAL_I2C_Master_Abort_IT(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1);
////			}
//		}

		state = HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1,
 8000afc:	2305      	movs	r3, #5
 8000afe:	9302      	str	r3, [sp, #8]
 8000b00:	2309      	movs	r3, #9
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <ThreadFrontLightsComplexTask+0xa4>)
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2301      	movs	r3, #1
 8000b0a:	2216      	movs	r2, #22
 8000b0c:	216a      	movs	r1, #106	; 0x6a
 8000b0e:	480a      	ldr	r0, [pc, #40]	; (8000b38 <ThreadFrontLightsComplexTask+0xac>)
 8000b10:	f002 f8d0 	bl	8002cb4 <HAL_I2C_Mem_Write>
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]
//			if(counter > 1000){
//				HAL_I2C_Master_Abort_IT(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1);
//			}
//		}

		osSemaphoreRelease(messageI2C_LockHandle);
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <ThreadFrontLightsComplexTask+0xa8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f00c faa1 	bl	800d064 <osSemaphoreRelease>
		osMessageQueueGet(lightsComplexQueueHandle, &receivedColors,
 8000b22:	e7bf      	b.n	8000aa4 <ThreadFrontLightsComplexTask+0x18>
 8000b24:	20001d7c 	.word	0x20001d7c
 8000b28:	20001e60 	.word	0x20001e60
 8000b2c:	200001b4 	.word	0x200001b4
 8000b30:	200001c0 	.word	0x200001c0
 8000b34:	20001d78 	.word	0x20001d78
 8000b38:	20001dd4 	.word	0x20001dd4

08000b3c <ledStartupSequence>:
{
  HAL_GPIO_TogglePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led]);
}
#endif

void ledStartupSequence(void){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	resetColor(&receivedColor);
 8000b40:	4864      	ldr	r0, [pc, #400]	; (8000cd4 <ledStartupSequence+0x198>)
 8000b42:	f000 f8ed 	bl	8000d20 <resetColor>

	receivedColor.colors_indiv.left_front_b = 255;
 8000b46:	4b63      	ldr	r3, [pc, #396]	; (8000cd4 <ledStartupSequence+0x198>)
 8000b48:	22ff      	movs	r2, #255	; 0xff
 8000b4a:	705a      	strb	r2, [r3, #1]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000b4c:	4b62      	ldr	r3, [pc, #392]	; (8000cd8 <ledStartupSequence+0x19c>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
 8000b50:	2300      	movs	r3, #0
 8000b52:	2200      	movs	r2, #0
 8000b54:	495f      	ldr	r1, [pc, #380]	; (8000cd4 <ledStartupSequence+0x198>)
 8000b56:	f00c fb3d 	bl	800d1d4 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor););
	osDelay(LED_START_SEQ_INTERVAL);
 8000b5a:	20c8      	movs	r0, #200	; 0xc8
 8000b5c:	f00c f98e 	bl	800ce7c <osDelay>

	receivedColor.colors_indiv.left_front_b = 0;
 8000b60:	4b5c      	ldr	r3, [pc, #368]	; (8000cd4 <ledStartupSequence+0x198>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	705a      	strb	r2, [r3, #1]
	receivedColor.colors_indiv.left_front_g = 255;
 8000b66:	4b5b      	ldr	r3, [pc, #364]	; (8000cd4 <ledStartupSequence+0x198>)
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	701a      	strb	r2, [r3, #0]

	receivedColor.colors_indiv.left_top_b = 255;
 8000b6c:	4b59      	ldr	r3, [pc, #356]	; (8000cd4 <ledStartupSequence+0x198>)
 8000b6e:	22ff      	movs	r2, #255	; 0xff
 8000b70:	709a      	strb	r2, [r3, #2]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000b72:	4b59      	ldr	r3, [pc, #356]	; (8000cd8 <ledStartupSequence+0x19c>)
 8000b74:	6818      	ldr	r0, [r3, #0]
 8000b76:	2300      	movs	r3, #0
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4956      	ldr	r1, [pc, #344]	; (8000cd4 <ledStartupSequence+0x198>)
 8000b7c:	f00c fb2a 	bl	800d1d4 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000b80:	20c8      	movs	r0, #200	; 0xc8
 8000b82:	f00c f97b 	bl	800ce7c <osDelay>

	receivedColor.colors_indiv.left_front_g = 0;
 8000b86:	4b53      	ldr	r3, [pc, #332]	; (8000cd4 <ledStartupSequence+0x198>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
	receivedColor.colors_indiv.left_front_r = 255;
 8000b8c:	4b51      	ldr	r3, [pc, #324]	; (8000cd4 <ledStartupSequence+0x198>)
 8000b8e:	22ff      	movs	r2, #255	; 0xff
 8000b90:	719a      	strb	r2, [r3, #6]

	receivedColor.colors_indiv.left_top_b = 0;
 8000b92:	4b50      	ldr	r3, [pc, #320]	; (8000cd4 <ledStartupSequence+0x198>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	709a      	strb	r2, [r3, #2]
	receivedColor.colors_indiv.left_top_g = 255;
 8000b98:	4b4e      	ldr	r3, [pc, #312]	; (8000cd4 <ledStartupSequence+0x198>)
 8000b9a:	22ff      	movs	r2, #255	; 0xff
 8000b9c:	70da      	strb	r2, [r3, #3]

	receivedColor.colors_indiv.left_side_b = 255;
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <ledStartupSequence+0x198>)
 8000ba0:	22ff      	movs	r2, #255	; 0xff
 8000ba2:	711a      	strb	r2, [r3, #4]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000ba4:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <ledStartupSequence+0x19c>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	2200      	movs	r2, #0
 8000bac:	4949      	ldr	r1, [pc, #292]	; (8000cd4 <ledStartupSequence+0x198>)
 8000bae:	f00c fb11 	bl	800d1d4 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000bb2:	20c8      	movs	r0, #200	; 0xc8
 8000bb4:	f00c f962 	bl	800ce7c <osDelay>

	receivedColor.colors_indiv.left_front_r = 0;
 8000bb8:	4b46      	ldr	r3, [pc, #280]	; (8000cd4 <ledStartupSequence+0x198>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	719a      	strb	r2, [r3, #6]

	receivedColor.colors_indiv.left_top_g = 0;
 8000bbe:	4b45      	ldr	r3, [pc, #276]	; (8000cd4 <ledStartupSequence+0x198>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	70da      	strb	r2, [r3, #3]
	receivedColor.colors_indiv.left_top_r = 255;
 8000bc4:	4b43      	ldr	r3, [pc, #268]	; (8000cd4 <ledStartupSequence+0x198>)
 8000bc6:	22ff      	movs	r2, #255	; 0xff
 8000bc8:	71da      	strb	r2, [r3, #7]

	receivedColor.colors_indiv.left_side_b = 0;
 8000bca:	4b42      	ldr	r3, [pc, #264]	; (8000cd4 <ledStartupSequence+0x198>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	711a      	strb	r2, [r3, #4]
	receivedColor.colors_indiv.left_side_g = 255;
 8000bd0:	4b40      	ldr	r3, [pc, #256]	; (8000cd4 <ledStartupSequence+0x198>)
 8000bd2:	22ff      	movs	r2, #255	; 0xff
 8000bd4:	715a      	strb	r2, [r3, #5]

	receivedColor.colors_indiv.right_side_b = 255;
 8000bd6:	4b3f      	ldr	r3, [pc, #252]	; (8000cd4 <ledStartupSequence+0x198>)
 8000bd8:	22ff      	movs	r2, #255	; 0xff
 8000bda:	735a      	strb	r2, [r3, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000bdc:	4b3e      	ldr	r3, [pc, #248]	; (8000cd8 <ledStartupSequence+0x19c>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	2300      	movs	r3, #0
 8000be2:	2200      	movs	r2, #0
 8000be4:	493b      	ldr	r1, [pc, #236]	; (8000cd4 <ledStartupSequence+0x198>)
 8000be6:	f00c faf5 	bl	800d1d4 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000bea:	20c8      	movs	r0, #200	; 0xc8
 8000bec:	f00c f946 	bl	800ce7c <osDelay>

	receivedColor.colors_indiv.left_top_r = 0;
 8000bf0:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <ledStartupSequence+0x198>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	71da      	strb	r2, [r3, #7]

	receivedColor.colors_indiv.left_side_g = 0;
 8000bf6:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <ledStartupSequence+0x198>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	715a      	strb	r2, [r3, #5]
	receivedColor.colors_indiv.left_side_r = 255;
 8000bfc:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <ledStartupSequence+0x198>)
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	721a      	strb	r2, [r3, #8]

	receivedColor.colors_indiv.right_side_b = 0;
 8000c02:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	735a      	strb	r2, [r3, #13]
	receivedColor.colors_indiv.right_side_g = 255;
 8000c08:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c0a:	22ff      	movs	r2, #255	; 0xff
 8000c0c:	739a      	strb	r2, [r3, #14]

	receivedColor.colors_indiv.right_top_b = 255;
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c10:	22ff      	movs	r2, #255	; 0xff
 8000c12:	72da      	strb	r2, [r3, #11]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000c14:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <ledStartupSequence+0x19c>)
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	492d      	ldr	r1, [pc, #180]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c1e:	f00c fad9 	bl	800d1d4 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000c22:	20c8      	movs	r0, #200	; 0xc8
 8000c24:	f00c f92a 	bl	800ce7c <osDelay>

	receivedColor.colors_indiv.left_side_r = 0;
 8000c28:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	721a      	strb	r2, [r3, #8]

	receivedColor.colors_indiv.right_side_g = 0;
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	739a      	strb	r2, [r3, #14]
	receivedColor.colors_indiv.right_side_r = 255;
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c36:	22ff      	movs	r2, #255	; 0xff
 8000c38:	745a      	strb	r2, [r3, #17]

	receivedColor.colors_indiv.right_top_b = 0;
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	72da      	strb	r2, [r3, #11]
	receivedColor.colors_indiv.right_top_g = 255;
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c42:	22ff      	movs	r2, #255	; 0xff
 8000c44:	731a      	strb	r2, [r3, #12]

	receivedColor.colors_indiv.right_front_b = 255;
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c48:	22ff      	movs	r2, #255	; 0xff
 8000c4a:	729a      	strb	r2, [r3, #10]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <ledStartupSequence+0x19c>)
 8000c4e:	6818      	ldr	r0, [r3, #0]
 8000c50:	2300      	movs	r3, #0
 8000c52:	2200      	movs	r2, #0
 8000c54:	491f      	ldr	r1, [pc, #124]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c56:	f00c fabd 	bl	800d1d4 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000c5a:	20c8      	movs	r0, #200	; 0xc8
 8000c5c:	f00c f90e 	bl	800ce7c <osDelay>

	receivedColor.colors_indiv.right_side_r = 0;
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	745a      	strb	r2, [r3, #17]

	receivedColor.colors_indiv.right_top_g = 0;
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	731a      	strb	r2, [r3, #12]
	receivedColor.colors_indiv.right_top_r = 255;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c6e:	22ff      	movs	r2, #255	; 0xff
 8000c70:	741a      	strb	r2, [r3, #16]

	receivedColor.colors_indiv.right_front_b = 0;
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	729a      	strb	r2, [r3, #10]
	receivedColor.colors_indiv.right_front_g = 255;
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c7a:	22ff      	movs	r2, #255	; 0xff
 8000c7c:	725a      	strb	r2, [r3, #9]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <ledStartupSequence+0x19c>)
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	2300      	movs	r3, #0
 8000c84:	2200      	movs	r2, #0
 8000c86:	4913      	ldr	r1, [pc, #76]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c88:	f00c faa4 	bl	800d1d4 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000c8c:	20c8      	movs	r0, #200	; 0xc8
 8000c8e:	f00c f8f5 	bl	800ce7c <osDelay>

	receivedColor.colors_indiv.right_top_r = 0;
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	741a      	strb	r2, [r3, #16]

	receivedColor.colors_indiv.right_front_g = 0;
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <ledStartupSequence+0x198>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	725a      	strb	r2, [r3, #9]
	receivedColor.colors_indiv.right_front_r = 255;
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <ledStartupSequence+0x198>)
 8000ca0:	22ff      	movs	r2, #255	; 0xff
 8000ca2:	73da      	strb	r2, [r3, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <ledStartupSequence+0x19c>)
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2200      	movs	r2, #0
 8000cac:	4909      	ldr	r1, [pc, #36]	; (8000cd4 <ledStartupSequence+0x198>)
 8000cae:	f00c fa91 	bl	800d1d4 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000cb2:	20c8      	movs	r0, #200	; 0xc8
 8000cb4:	f00c f8e2 	bl	800ce7c <osDelay>

	receivedColor.colors_indiv.right_front_r = 0;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <ledStartupSequence+0x198>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	73da      	strb	r2, [r3, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <ledStartupSequence+0x19c>)
 8000cc0:	6818      	ldr	r0, [r3, #0]
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4903      	ldr	r1, [pc, #12]	; (8000cd4 <ledStartupSequence+0x198>)
 8000cc8:	f00c fa84 	bl	800d1d4 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);

	ledDisconnectNotification();
 8000ccc:	f000 f806 	bl	8000cdc <ledDisconnectNotification>
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20001e74 	.word	0x20001e74
 8000cd8:	20001d7c 	.word	0x20001d7c

08000cdc <ledDisconnectNotification>:

void ledDisconnectNotification(void){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	resetColor(&receivedColor);
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <ledDisconnectNotification+0x3c>)
 8000ce2:	f000 f81d 	bl	8000d20 <resetColor>

	receivedColor.colors_indiv.left_side_g = 0;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <ledDisconnectNotification+0x3c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	715a      	strb	r2, [r3, #5]
	receivedColor.colors_indiv.right_side_g = 0;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <ledDisconnectNotification+0x3c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	739a      	strb	r2, [r3, #14]
	receivedColor.colors_indiv.left_side_b = 50;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <ledDisconnectNotification+0x3c>)
 8000cf4:	2232      	movs	r2, #50	; 0x32
 8000cf6:	711a      	strb	r2, [r3, #4]
	receivedColor.colors_indiv.right_side_b = 50;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <ledDisconnectNotification+0x3c>)
 8000cfa:	2232      	movs	r2, #50	; 0x32
 8000cfc:	735a      	strb	r2, [r3, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <ledDisconnectNotification+0x40>)
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	2300      	movs	r3, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	4904      	ldr	r1, [pc, #16]	; (8000d18 <ledDisconnectNotification+0x3c>)
 8000d08:	f00c fa64 	bl	800d1d4 <osMessageQueuePut>
	osDelay(10);
 8000d0c:	200a      	movs	r0, #10
 8000d0e:	f00c f8b5 	bl	800ce7c <osDelay>
//	FrontLightsSet(&receivedColor);
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20001e74 	.word	0x20001e74
 8000d1c:	20001d7c 	.word	0x20001d7c

08000d20 <resetColor>:
	receivedColor.colors_indiv.left_front_r = 255;
	receivedColor.colors_indiv.right_front_r = 255;
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
}

void resetColor(union ColorComplex * colorComplex){
 8000d20:	b4b0      	push	{r4, r5, r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	memcpy(colorComplex,&EmptyColorComplex,sizeof(union ColorComplex));;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <resetColor+0x28>)
 8000d2c:	461d      	mov	r5, r3
 8000d2e:	4614      	mov	r4, r2
 8000d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d32:	6028      	str	r0, [r5, #0]
 8000d34:	6069      	str	r1, [r5, #4]
 8000d36:	60aa      	str	r2, [r5, #8]
 8000d38:	60eb      	str	r3, [r5, #12]
 8000d3a:	8823      	ldrh	r3, [r4, #0]
 8000d3c:	822b      	strh	r3, [r5, #16]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bcb0      	pop	{r4, r5, r7}
 8000d46:	4770      	bx	lr
 8000d48:	08010f8c 	.word	0x08010f8c

08000d4c <LL_RCC_LSE_SetDriveCapability>:
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d5c:	f023 0218 	bic.w	r2, r3, #24
 8000d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7c:	f000 fd94 	bl	80018a8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8000d80:	f7ff fb8a 	bl	8000498 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 f822 	bl	8000dcc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d88:	f000 f896 	bl	8000eb8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8000d8c:	f7ff fde2 	bl	8000954 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d90:	f7ff fc44 	bl	800061c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d94:	f7ff fa0e 	bl	80001b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d98:	f7ff fcca 	bl	8000730 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000d9c:	f7ff fd08 	bl	80007b0 <MX_I2C3_Init>
  MX_RF_Init();
 8000da0:	f000 f8d9 	bl	8000f56 <MX_RF_Init>
  MX_RTC_Init();
 8000da4:	f000 f908 	bl	8000fb8 <MX_RTC_Init>
  MX_SAI1_Init();
 8000da8:	f000 f976 	bl	8001098 <MX_SAI1_Init>
  MX_SPI1_Init();
 8000dac:	f000 fa3e 	bl	800122c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000db0:	f000 fa7a 	bl	80012a8 <MX_SPI2_Init>
  MX_TIM16_Init();
 8000db4:	f000 fc7c 	bl	80016b0 <MX_TIM16_Init>
  MX_USB_Device_Init();
 8000db8:	f00f fad8 	bl	801036c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000dbc:	f00b ff82 	bl	800ccc4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000dc0:	f7ff fbce 	bl	8000560 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000dc4:	f00b ffa2 	bl	800cd0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <main+0x50>
	...

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b09a      	sub	sp, #104	; 0x68
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0320 	add.w	r3, r7, #32
 8000dd6:	2248      	movs	r2, #72	; 0x48
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f010 f824 	bl	8010e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]
 8000dee:	615a      	str	r2, [r3, #20]
 8000df0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000df2:	f004 f8db 	bl	8004fac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff ffa8 	bl	8000d4c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <SystemClock_Config+0xe8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e04:	4a2b      	ldr	r2, [pc, #172]	; (8000eb4 <SystemClock_Config+0xe8>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <SystemClock_Config+0xe8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000e18:	232f      	movs	r3, #47	; 0x2f
 8000e1a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e22:	2301      	movs	r3, #1
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e30:	2340      	movs	r3, #64	; 0x40
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e38:	2360      	movs	r3, #96	; 0x60
 8000e3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e40:	2302      	movs	r3, #2
 8000e42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e44:	2301      	movs	r3, #1
 8000e46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000e4c:	2320      	movs	r3, #32
 8000e4e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e56:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e5a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e60:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e62:	f107 0320 	add.w	r3, r7, #32
 8000e66:	4618      	mov	r0, r3
 8000e68:	f004 fc50 	bl	800570c <HAL_RCC_OscConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e72:	f000 f86b 	bl	8000f4c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000e76:	236f      	movs	r3, #111	; 0x6f
 8000e78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2103      	movs	r1, #3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 ffc4 	bl	8005e24 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000ea2:	f000 f853 	bl	8000f4c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ea6:	f006 fba4 	bl	80075f2 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000eaa:	bf00      	nop
 8000eac:	3768      	adds	r7, #104	; 0x68
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	58000400 	.word	0x58000400

08000eb8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	; 0x50
 8000ebc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	2250      	movs	r2, #80	; 0x50
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f00f ffaf 	bl	8010e28 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8000eca:	f44f 5355 	mov.w	r3, #13632	; 0x3540
 8000ece:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000ed0:	2318      	movs	r3, #24
 8000ed2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ede:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000ee0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ee4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_USBCLK
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <PeriphCommonClock_Config+0x6c>)
 8000ee8:	617b      	str	r3, [r7, #20]
                              |RCC_PLLSAI1_ADCCLK;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000eee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ef4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000efa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000efe:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000f00:	2300      	movs	r3, #0
 8000f02:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000f04:	2310      	movs	r3, #16
 8000f06:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 fde4 	bl	8006ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <PeriphCommonClock_Config+0x62>
  {
    Error_Handler();
 8000f16:	f000 f819 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000f1a:	bf00      	nop
 8000f1c:	3750      	adds	r7, #80	; 0x50
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	11010000 	.word	0x11010000

08000f28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f3a:	f000 fcd5 	bl	80018e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40012c00 	.word	0x40012c00

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>

08000f56 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_RCC_EnableRTC>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LL_APB1_GRP1_EnableClock>:
{
 8000f86:	b480      	push	{r7}
 8000f88:	b085      	sub	sp, #20
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_RTC_Init+0x4c>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <MX_RTC_Init+0x50>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <MX_RTC_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_RTC_Init+0x4c>)
 8000fca:	220f      	movs	r2, #15
 8000fcc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <MX_RTC_Init+0x4c>)
 8000fd0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000fd4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <MX_RTC_Init+0x4c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_RTC_Init+0x4c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <MX_RTC_Init+0x4c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_RTC_Init+0x4c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_RTC_Init+0x4c>)
 8000ff0:	f006 fdc4 	bl	8007b7c <HAL_RTC_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000ffa:	f7ff ffa7 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20001e9c 	.word	0x20001e9c
 8001008:	40002800 	.word	0x40002800

0800100c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b096      	sub	sp, #88	; 0x58
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	2250      	movs	r2, #80	; 0x50
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f00f ff03 	bl	8010e28 <memset>
  if(rtcHandle->Instance==RTC)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_RTC_MspInit+0x54>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d115      	bne.n	8001058 <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800102c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001030:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001036:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4618      	mov	r0, r3
 800103e:	f005 fd4b 	bl	8006ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001048:	f7ff ff80 	bl	8000f4c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800104c:	f7ff ff8a 	bl	8000f64 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001050:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001054:	f7ff ff97 	bl	8000f86 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001058:	bf00      	nop
 800105a:	3758      	adds	r7, #88	; 0x58
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40002800 	.word	0x40002800

08001064 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4313      	orrs	r3, r2
 800107a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800107c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001080:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001088:	68fb      	ldr	r3, [r7, #12]
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_SAI1_Init+0x68>)
 800109e:	4a19      	ldr	r2, [pc, #100]	; (8001104 <MX_SAI1_Init+0x6c>)
 80010a0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_SAI1_Init+0x68>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_SAI1_Init+0x68>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_SAI1_Init+0x68>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_SAI1_Init+0x68>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_SAI1_Init+0x68>)
 80010bc:	2200      	movs	r2, #0
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_SAI1_Init+0x68>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_SAI1_Init+0x68>)
 80010c8:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <MX_SAI1_Init+0x70>)
 80010ca:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_SAI1_Init+0x68>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_SAI1_Init+0x68>)
 80010d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_SAI1_Init+0x68>)
 80010dc:	2200      	movs	r2, #0
 80010de:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <MX_SAI1_Init+0x68>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80010e6:	2302      	movs	r3, #2
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_SAI1_Init+0x68>)
 80010ee:	f006 fe33 	bl	8007d58 <HAL_SAI_InitProtocol>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_SAI1_Init+0x64>
  {
    Error_Handler();
 80010f8:	f7ff ff28 	bl	8000f4c <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20001ec0 	.word	0x20001ec0
 8001104:	40015404 	.word	0x40015404
 8001108:	0002ee00 	.word	0x0002ee00

0800110c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <HAL_SAI_MspInit+0x78>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d12d      	bne.n	800117a <HAL_SAI_MspInit+0x6e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_SAI_MspInit+0x7c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d103      	bne.n	800112e <HAL_SAI_MspInit+0x22>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001126:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800112a:	f7ff ff9b 	bl	8001064 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_SAI_MspInit+0x7c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <HAL_SAI_MspInit+0x7c>)
 8001136:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB13     ------> SAI1_SCK_A
    PB12     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001138:	2308      	movs	r3, #8
 800113a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001148:	230d      	movs	r3, #13
 800114a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4619      	mov	r1, r3
 8001152:	480e      	ldr	r0, [pc, #56]	; (800118c <HAL_SAI_MspInit+0x80>)
 8001154:	f001 fb72 	bl	800283c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001158:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800115c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800116a:	230d      	movs	r3, #13
 800116c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	4619      	mov	r1, r3
 8001174:	4806      	ldr	r0, [pc, #24]	; (8001190 <HAL_SAI_MspInit+0x84>)
 8001176:	f001 fb61 	bl	800283c <HAL_GPIO_Init>

    }
}
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40015404 	.word	0x40015404
 8001188:	200001d8 	.word	0x200001d8
 800118c:	48000800 	.word	0x48000800
 8001190:	48000400 	.word	0x48000400

08001194 <LL_AHB2_GRP1_EnableClock>:
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b8:	68fb      	ldr	r3, [r7, #12]
}
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_APB1_GRP1_EnableClock>:
{
 80011c6:	b480      	push	{r7}
 80011c8:	b085      	sub	sp, #20
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4313      	orrs	r3, r2
 80011dc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80011de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4013      	ands	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_APB2_GRP1_EnableClock>:
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001204:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4313      	orrs	r3, r2
 800120e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001214:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800121c:	68fb      	ldr	r3, [r7, #12]
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <MX_SPI1_Init+0x78>)
 8001234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800123c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001246:	f44f 7240 	mov.w	r2, #768	; 0x300
 800124a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_SPI1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_SPI1_Init+0x74>)
 800125a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800125e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_SPI1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_SPI1_Init+0x74>)
 800127a:	2207      	movs	r2, #7
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001286:	2208      	movs	r2, #8
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_SPI1_Init+0x74>)
 800128c:	f007 f896 	bl	80083bc <HAL_SPI_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001296:	f7ff fe59 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20001fbc 	.word	0x20001fbc
 80012a4:	40013000 	.word	0x40013000

080012a8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <MX_SPI2_Init+0x74>)
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <MX_SPI2_Init+0x78>)
 80012b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_SPI2_Init+0x74>)
 80012b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_SPI2_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_SPI2_Init+0x74>)
 80012c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_SPI2_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_SPI2_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_SPI2_Init+0x74>)
 80012d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_SPI2_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_SPI2_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_SPI2_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_SPI2_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_SPI2_Init+0x74>)
 80012f6:	2207      	movs	r2, #7
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_SPI2_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_SPI2_Init+0x74>)
 8001302:	2208      	movs	r2, #8
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_SPI2_Init+0x74>)
 8001308:	f007 f858 	bl	80083bc <HAL_SPI_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001312:	f7ff fe1b 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20001f58 	.word	0x20001f58
 8001320:	40003800 	.word	0x40003800

08001324 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a31      	ldr	r2, [pc, #196]	; (8001408 <HAL_SPI_MspInit+0xe4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d12c      	bne.n	80013a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001346:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800134a:	f7ff ff55 	bl	80011f8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2002      	movs	r0, #2
 8001350:	f7ff ff20 	bl	8001194 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff ff1d 	bl	8001194 <LL_AHB2_GRP1_EnableClock>
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 800135a:	2338      	movs	r3, #56	; 0x38
 800135c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136a:	2305      	movs	r3, #5
 800136c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	4619      	mov	r1, r3
 8001374:	4825      	ldr	r0, [pc, #148]	; (800140c <HAL_SPI_MspInit+0xe8>)
 8001376:	f001 fa61 	bl	800283c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800137a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800137e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800138c:	2305      	movs	r3, #5
 800138e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f001 fa4f 	bl	800283c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800139e:	e02f      	b.n	8001400 <HAL_SPI_MspInit+0xdc>
  else if(spiHandle->Instance==SPI2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1a      	ldr	r2, [pc, #104]	; (8001410 <HAL_SPI_MspInit+0xec>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d12a      	bne.n	8001400 <HAL_SPI_MspInit+0xdc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013ae:	f7ff ff0a 	bl	80011c6 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b2:	2008      	movs	r0, #8
 80013b4:	f7ff feee 	bl	8001194 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	2002      	movs	r0, #2
 80013ba:	f7ff feeb 	bl	8001194 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013be:	2303      	movs	r3, #3
 80013c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ce:	2305      	movs	r3, #5
 80013d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	4619      	mov	r1, r3
 80013d8:	480e      	ldr	r0, [pc, #56]	; (8001414 <HAL_SPI_MspInit+0xf0>)
 80013da:	f001 fa2f 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013f0:	2305      	movs	r3, #5
 80013f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	4804      	ldr	r0, [pc, #16]	; (800140c <HAL_SPI_MspInit+0xe8>)
 80013fc:	f001 fa1e 	bl	800283c <HAL_GPIO_Init>
}
 8001400:	bf00      	nop
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40013000 	.word	0x40013000
 800140c:	48000400 	.word	0x48000400
 8001410:	40003800 	.word	0x40003800
 8001414:	48000c00 	.word	0x48000c00

08001418 <LL_AHB3_GRP1_EnableClock>:
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4313      	orrs	r3, r2
 800142e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001434:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143c:	68fb      	ldr	r3, [r7, #12]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800144e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001452:	f7ff ffe1 	bl	8001418 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	210f      	movs	r1, #15
 800145a:	f06f 0001 	mvn.w	r0, #1
 800145e:	f001 f9c5 	bl	80027ec <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2105      	movs	r1, #5
 8001466:	202e      	movs	r0, #46	; 0x2e
 8001468:	f001 f9c0 	bl	80027ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800146c:	202e      	movs	r0, #46	; 0x2e
 800146e:	f001 f9d7 	bl	8002820 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}

08001476 <LL_APB2_GRP1_EnableClock>:
{
 8001476:	b480      	push	{r7}
 8001478:	b085      	sub	sp, #20
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800147e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001482:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001484:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4313      	orrs	r3, r2
 800148c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800148e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001492:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4013      	ands	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	2019      	movs	r0, #25
 80014be:	f001 f995 	bl	80027ec <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014c2:	2019      	movs	r0, #25
 80014c4:	f001 f9ac 	bl	8002820 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014cc:	f7ff ffd3 	bl	8001476 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014d0:	f107 0208 	add.w	r2, r7, #8
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fe78 	bl	80061d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014e0:	f004 fe60 	bl	80061a4 <HAL_RCC_GetPCLK2Freq>
 80014e4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e8:	4a12      	ldr	r2, [pc, #72]	; (8001534 <HAL_InitTick+0x8c>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	0c9b      	lsrs	r3, r3, #18
 80014f0:	3b01      	subs	r3, #1
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_InitTick+0x90>)
 80014f6:	4a11      	ldr	r2, [pc, #68]	; (800153c <HAL_InitTick+0x94>)
 80014f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_InitTick+0x90>)
 80014fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001500:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001502:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <HAL_InitTick+0x90>)
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_InitTick+0x90>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_InitTick+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001514:	4808      	ldr	r0, [pc, #32]	; (8001538 <HAL_InitTick+0x90>)
 8001516:	f006 fff4 	bl	8008502 <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d104      	bne.n	800152a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <HAL_InitTick+0x90>)
 8001522:	f007 f845 	bl	80085b0 <HAL_TIM_Base_Start_IT>
 8001526:	4603      	mov	r3, r0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	3730      	adds	r7, #48	; 0x30
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	431bde83 	.word	0x431bde83
 8001538:	20002020 	.word	0x20002020
 800153c:	40012c00 	.word	0x40012c00

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <NMI_Handler+0x4>

08001546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler+0x4>

08001552 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <UsageFault_Handler+0x4>

0800155e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <USB_LP_IRQHandler+0x10>)
 8001572:	f002 f8ee 	bl	8003752 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200035cc 	.word	0x200035cc

08001580 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001586:	f007 f8c2 	bl	800870e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800158c:	f007 f8bf 	bl	800870e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20002020 	.word	0x20002020
 8001598:	2000206c 	.word	0x2000206c

0800159c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80015a0:	f001 fad4 	bl	8002b4c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <SystemInit+0x98>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <SystemInit+0x98>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80015d4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80015d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <SystemInit+0x9c>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f2:	f023 0305 	bic.w	r3, r3, #5
 80015f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80015fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001612:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <SystemInit+0xa0>)
 8001614:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <SystemInit+0xa0>)
 800161c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800162e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00
 8001644:	faf6fefb 	.word	0xfaf6fefb
 8001648:	22041000 	.word	0x22041000

0800164c <LL_AHB2_GRP1_EnableClock>:
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001658:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800165a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4313      	orrs	r3, r2
 8001662:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001668:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001670:	68fb      	ldr	r3, [r7, #12]
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <LL_APB2_GRP1_EnableClock>:
{
 800167e:	b480      	push	{r7}
 8001680:	b085      	sub	sp, #20
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800168c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4313      	orrs	r3, r2
 8001694:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4013      	ands	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b094      	sub	sp, #80	; 0x50
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
 80016c6:	615a      	str	r2, [r3, #20]
 80016c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016ca:	463b      	mov	r3, r7
 80016cc:	2234      	movs	r2, #52	; 0x34
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f00f fba9 	bl	8010e28 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016d6:	4b31      	ldr	r3, [pc, #196]	; (800179c <MX_TIM16_Init+0xec>)
 80016d8:	4a31      	ldr	r2, [pc, #196]	; (80017a0 <MX_TIM16_Init+0xf0>)
 80016da:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80016dc:	4b2f      	ldr	r3, [pc, #188]	; (800179c <MX_TIM16_Init+0xec>)
 80016de:	2200      	movs	r2, #0
 80016e0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e2:	4b2e      	ldr	r3, [pc, #184]	; (800179c <MX_TIM16_Init+0xec>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80016e8:	4b2c      	ldr	r3, [pc, #176]	; (800179c <MX_TIM16_Init+0xec>)
 80016ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ee:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <MX_TIM16_Init+0xec>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <MX_TIM16_Init+0xec>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <MX_TIM16_Init+0xec>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001702:	4826      	ldr	r0, [pc, #152]	; (800179c <MX_TIM16_Init+0xec>)
 8001704:	f006 fefd 	bl	8008502 <HAL_TIM_Base_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800170e:	f7ff fc1d 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001712:	4822      	ldr	r0, [pc, #136]	; (800179c <MX_TIM16_Init+0xec>)
 8001714:	f006 ff9a 	bl	800864c <HAL_TIM_PWM_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800171e:	f7ff fc15 	bl	8000f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001722:	2360      	movs	r3, #96	; 0x60
 8001724:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172a:	2300      	movs	r3, #0
 800172c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800172e:	2300      	movs	r3, #0
 8001730:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001742:	2200      	movs	r2, #0
 8001744:	4619      	mov	r1, r3
 8001746:	4815      	ldr	r0, [pc, #84]	; (800179c <MX_TIM16_Init+0xec>)
 8001748:	f007 f900 	bl	800894c <HAL_TIM_PWM_ConfigChannel>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001752:	f7ff fbfb 	bl	8000f4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800176a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001778:	463b      	mov	r3, r7
 800177a:	4619      	mov	r1, r3
 800177c:	4807      	ldr	r0, [pc, #28]	; (800179c <MX_TIM16_Init+0xec>)
 800177e:	f007 fd03 	bl	8009188 <HAL_TIMEx_ConfigBreakDeadTime>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001788:	f7ff fbe0 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800178c:	4803      	ldr	r0, [pc, #12]	; (800179c <MX_TIM16_Init+0xec>)
 800178e:	f000 f825 	bl	80017dc <HAL_TIM_MspPostInit>

}
 8001792:	bf00      	nop
 8001794:	3750      	adds	r7, #80	; 0x50
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000206c 	.word	0x2000206c
 80017a0:	40014400 	.word	0x40014400

080017a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_TIM_Base_MspInit+0x34>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d10b      	bne.n	80017ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80017b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80017ba:	f7ff ff60 	bl	800167e <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	210f      	movs	r1, #15
 80017c2:	2019      	movs	r0, #25
 80017c4:	f001 f812 	bl	80027ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80017c8:	2019      	movs	r0, #25
 80017ca:	f001 f829 	bl	8002820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40014400 	.word	0x40014400

080017dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_TIM_MspPostInit+0x54>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d113      	bne.n	8001826 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2002      	movs	r0, #2
 8001800:	f7ff ff24 	bl	800164c <LL_AHB2_GRP1_EnableClock>
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BLINK_PWM_Pin;
 8001804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001808:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001816:	230e      	movs	r3, #14
 8001818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLINK_PWM_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	4619      	mov	r1, r3
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <HAL_TIM_MspPostInit+0x58>)
 8001822:	f001 f80b 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40014400 	.word	0x40014400
 8001834:	48000400 	.word	0x48000400

08001838 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001838:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183c:	3304      	adds	r3, #4

0800183e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001840:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001842:	d3f9      	bcc.n	8001838 <CopyDataInit>
  bx lr
 8001844:	4770      	bx	lr

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001846:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001848:	3004      	adds	r0, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800184a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>
  bx lr
 800184e:	4770      	bx	lr

08001850 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001852:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001854:	f7ff fea8 	bl	80015a8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001858:	480b      	ldr	r0, [pc, #44]	; (8001888 <LoopForever+0x8>)
 800185a:	490c      	ldr	r1, [pc, #48]	; (800188c <LoopForever+0xc>)
 800185c:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <LoopForever+0x10>)
 800185e:	2300      	movs	r3, #0
 8001860:	f7ff ffed 	bl	800183e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001864:	480b      	ldr	r0, [pc, #44]	; (8001894 <LoopForever+0x14>)
 8001866:	490c      	ldr	r1, [pc, #48]	; (8001898 <LoopForever+0x18>)
 8001868:	2300      	movs	r3, #0
 800186a:	f7ff ffee 	bl	800184a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800186e:	480b      	ldr	r0, [pc, #44]	; (800189c <LoopForever+0x1c>)
 8001870:	490b      	ldr	r1, [pc, #44]	; (80018a0 <LoopForever+0x20>)
 8001872:	2300      	movs	r3, #0
 8001874:	f7ff ffe9 	bl	800184a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001878:	f00f faa4 	bl	8010dc4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800187c:	f7ff fa7c 	bl	8000d78 <main>

08001880 <LoopForever>:

LoopForever:
  b LoopForever
 8001880:	e7fe      	b.n	8001880 <LoopForever>
 8001882:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001884:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001888:	20000004 	.word	0x20000004
 800188c:	20000198 	.word	0x20000198
 8001890:	080110b4 	.word	0x080110b4
  INIT_BSS _sbss, _ebss
 8001894:	20000198 	.word	0x20000198
 8001898:	200038c0 	.word	0x200038c0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800189c:	20030000 	.word	0x20030000
 80018a0:	20030000 	.word	0x20030000

080018a4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC1_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_Init+0x3c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <HAL_Init+0x3c>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018be:	2003      	movs	r0, #3
 80018c0:	f000 ff89 	bl	80027d6 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018c4:	200f      	movs	r0, #15
 80018c6:	f7ff fdef 	bl	80014a8 <HAL_InitTick>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	e001      	b.n	80018da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018d6:	f7ff fdb8 	bl	800144a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018da:	79fb      	ldrb	r3, [r7, #7]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	58004000 	.word	0x58004000

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000018 	.word	0x20000018
 800190c:	200020b8 	.word	0x200020b8

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	200020b8 	.word	0x200020b8

08001928 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_GetTickPrio+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000014 	.word	0x20000014

08001940 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3360      	adds	r3, #96	; 0x60
 80019ba:	461a      	mov	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <LL_ADC_SetOffset+0x44>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	4313      	orrs	r3, r2
 80019d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019e0:	bf00      	nop
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	03fff000 	.word	0x03fff000

080019f0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3360      	adds	r3, #96	; 0x60
 80019fe:	461a      	mov	r2, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3360      	adds	r3, #96	; 0x60
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a46:	bf00      	nop
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b087      	sub	sp, #28
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3330      	adds	r3, #48	; 0x30
 8001a62:	461a      	mov	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	0a1b      	lsrs	r3, r3, #8
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	4413      	add	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	211f      	movs	r1, #31
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	401a      	ands	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0e9b      	lsrs	r3, r3, #26
 8001a8a:	f003 011f 	and.w	r1, r3, #31
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001a9e:	bf00      	nop
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b087      	sub	sp, #28
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3314      	adds	r3, #20
 8001aba:	461a      	mov	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	0e5b      	lsrs	r3, r3, #25
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	4413      	add	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	0d1b      	lsrs	r3, r3, #20
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	2107      	movs	r1, #7
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	401a      	ands	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	0d1b      	lsrs	r3, r3, #20
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	431a      	orrs	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0318 	and.w	r3, r3, #24
 8001b22:	4908      	ldr	r1, [pc, #32]	; (8001b44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b24:	40d9      	lsrs	r1, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	400b      	ands	r3, r1
 8001b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	0007ffff 	.word	0x0007ffff

08001b48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6093      	str	r3, [r2, #8]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b80:	d101      	bne.n	8001b86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ba4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ba8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bd0:	d101      	bne.n	8001bd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <LL_ADC_IsEnabled+0x18>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <LL_ADC_IsEnabled+0x1a>
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d101      	bne.n	8001c22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d101      	bne.n	8001c48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e12e      	b.n	8001ed4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7fe faf9 	bl	800027c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff65 	bl	8001b6c <LL_ADC_IsDeepPowerDownEnabled>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff4b 	bl	8001b48 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff80 	bl	8001bbc <LL_ADC_IsInternalRegulatorEnabled>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d115      	bne.n	8001cee <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff64 	bl	8001b94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ccc:	4b83      	ldr	r3, [pc, #524]	; (8001edc <HAL_ADC_Init+0x284>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	4a83      	ldr	r2, [pc, #524]	; (8001ee0 <HAL_ADC_Init+0x288>)
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	099b      	lsrs	r3, r3, #6
 8001cda:	3301      	adds	r3, #1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f9      	bne.n	8001ce2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff62 	bl	8001bbc <LL_ADC_IsInternalRegulatorEnabled>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10d      	bne.n	8001d1a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	f043 0210 	orr.w	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff73 	bl	8001c0a <LL_ADC_REG_IsConversionOngoing>
 8001d24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 80c7 	bne.w	8001ec2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 80c3 	bne.w	8001ec2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d44:	f043 0202 	orr.w	r2, r3, #2
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff47 	bl	8001be4 <LL_ADC_IsEnabled>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10b      	bne.n	8001d74 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d5c:	4861      	ldr	r0, [pc, #388]	; (8001ee4 <HAL_ADC_Init+0x28c>)
 8001d5e:	f7ff ff41 	bl	8001be4 <LL_ADC_IsEnabled>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	485e      	ldr	r0, [pc, #376]	; (8001ee8 <HAL_ADC_Init+0x290>)
 8001d70:	f7ff fde6 	bl	8001940 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7e5b      	ldrb	r3, [r3, #25]
 8001d78:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d7e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d84:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d8a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d92:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001d94:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d106      	bne.n	8001db4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	3b01      	subs	r3, #1
 8001dac:	045b      	lsls	r3, r3, #17
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d009      	beq.n	8001dd0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	4b45      	ldr	r3, [pc, #276]	; (8001eec <HAL_ADC_Init+0x294>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	69b9      	ldr	r1, [r7, #24]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff0e 	bl	8001c0a <LL_ADC_REG_IsConversionOngoing>
 8001dee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff1b 	bl	8001c30 <LL_ADC_INJ_IsConversionOngoing>
 8001dfa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d13d      	bne.n	8001e7e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d13a      	bne.n	8001e7e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e0c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e14:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e24:	f023 0302 	bic.w	r3, r3, #2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	69b9      	ldr	r1, [r7, #24]
 8001e2e:	430b      	orrs	r3, r1
 8001e30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d118      	bne.n	8001e6e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e46:	f023 0304 	bic.w	r3, r3, #4
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e52:	4311      	orrs	r1, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e58:	4311      	orrs	r1, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	611a      	str	r2, [r3, #16]
 8001e6c:	e007      	b.n	8001e7e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10c      	bne.n	8001ea0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	f023 010f 	bic.w	r1, r3, #15
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e9e:	e007      	b.n	8001eb0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 020f 	bic.w	r2, r2, #15
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb4:	f023 0303 	bic.w	r3, r3, #3
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	655a      	str	r2, [r3, #84]	; 0x54
 8001ec0:	e007      	b.n	8001ed2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f043 0210 	orr.w	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ed2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3720      	adds	r7, #32
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000010 	.word	0x20000010
 8001ee0:	053e2d63 	.word	0x053e2d63
 8001ee4:	50040000 	.word	0x50040000
 8001ee8:	50040300 	.word	0x50040300
 8001eec:	fff0c007 	.word	0xfff0c007

08001ef0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0b6      	sub	sp, #216	; 0xd8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x22>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e39f      	b.n	8002652 <HAL_ADC_ConfigChannel+0x762>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fe73 	bl	8001c0a <LL_ADC_REG_IsConversionOngoing>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 8384 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6859      	ldr	r1, [r3, #4]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f7ff fd8a 	bl	8001a52 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fe61 	bl	8001c0a <LL_ADC_REG_IsConversionOngoing>
 8001f48:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fe6d 	bl	8001c30 <LL_ADC_INJ_IsConversionOngoing>
 8001f56:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 81a6 	bne.w	80022b0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f040 81a1 	bne.w	80022b0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f7ff fd95 	bl	8001aaa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	08db      	lsrs	r3, r3, #3
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6919      	ldr	r1, [r3, #16]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fb2:	f7ff fcf9 	bl	80019a8 <LL_ADC_SetOffset>
 8001fb6:	e17b      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fd16 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10a      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0xf4>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fd0b 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	f003 021f 	and.w	r2, r3, #31
 8001fe2:	e01e      	b.n	8002022 <HAL_ADC_ConfigChannel+0x132>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fd00 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002006:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800200a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002012:	2320      	movs	r3, #32
 8002014:	e004      	b.n	8002020 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202a:	2b00      	cmp	r3, #0
 800202c:	d105      	bne.n	800203a <HAL_ADC_ConfigChannel+0x14a>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	0e9b      	lsrs	r3, r3, #26
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	e018      	b.n	800206c <HAL_ADC_ConfigChannel+0x17c>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800204e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002052:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002056:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800205e:	2320      	movs	r3, #32
 8002060:	e004      	b.n	800206c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002062:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	429a      	cmp	r2, r3
 800206e:	d106      	bne.n	800207e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2200      	movs	r2, #0
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fccf 	bl	8001a1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2101      	movs	r1, #1
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fcb3 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10a      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x1ba>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2101      	movs	r1, #1
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fca8 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	0e9b      	lsrs	r3, r3, #26
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	e01e      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x1f8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2101      	movs	r1, #1
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fc9d 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80020c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80020d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80020d8:	2320      	movs	r3, #32
 80020da:	e004      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80020dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x210>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0e9b      	lsrs	r3, r3, #26
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	e018      	b.n	8002132 <HAL_ADC_ConfigChannel+0x242>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002114:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800211c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002124:	2320      	movs	r3, #32
 8002126:	e004      	b.n	8002132 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	429a      	cmp	r2, r3
 8002134:	d106      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	2101      	movs	r1, #1
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fc6c 	bl	8001a1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2102      	movs	r1, #2
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fc50 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x280>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2102      	movs	r1, #2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fc45 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	0e9b      	lsrs	r3, r3, #26
 800216a:	f003 021f 	and.w	r2, r3, #31
 800216e:	e01e      	b.n	80021ae <HAL_ADC_ConfigChannel+0x2be>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2102      	movs	r1, #2
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fc3a 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800218e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002192:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002196:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800219e:	2320      	movs	r3, #32
 80021a0:	e004      	b.n	80021ac <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80021a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d105      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x2d6>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	0e9b      	lsrs	r3, r3, #26
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	e016      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x304>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80021d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80021de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80021e6:	2320      	movs	r3, #32
 80021e8:	e004      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80021ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d106      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	2102      	movs	r1, #2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fc0b 	bl	8001a1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2103      	movs	r1, #3
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fbef 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 8002212:	4603      	mov	r3, r0
 8002214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10a      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x342>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2103      	movs	r1, #3
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fbe4 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 8002228:	4603      	mov	r3, r0
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	e017      	b.n	8002262 <HAL_ADC_ConfigChannel+0x372>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2103      	movs	r1, #3
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fbd9 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800224a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800224c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800224e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002254:	2320      	movs	r3, #32
 8002256:	e003      	b.n	8002260 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	2b00      	cmp	r3, #0
 800226c:	d105      	bne.n	800227a <HAL_ADC_ConfigChannel+0x38a>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0e9b      	lsrs	r3, r3, #26
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	e011      	b.n	800229e <HAL_ADC_ConfigChannel+0x3ae>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800228a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800228c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002292:	2320      	movs	r3, #32
 8002294:	e003      	b.n	800229e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	429a      	cmp	r2, r3
 80022a0:	d106      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2200      	movs	r2, #0
 80022a8:	2103      	movs	r1, #3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fbb6 	bl	8001a1c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fc95 	bl	8001be4 <LL_ADC_IsEnabled>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 81c2 	bne.w	8002646 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	461a      	mov	r2, r3
 80022d0:	f7ff fc16 	bl	8001b00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4a8e      	ldr	r2, [pc, #568]	; (8002514 <HAL_ADC_ConfigChannel+0x624>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	f040 8130 	bne.w	8002540 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10b      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x418>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0e9b      	lsrs	r3, r3, #26
 80022f6:	3301      	adds	r3, #1
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2b09      	cmp	r3, #9
 80022fe:	bf94      	ite	ls
 8002300:	2301      	movls	r3, #1
 8002302:	2300      	movhi	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e019      	b.n	800233c <HAL_ADC_ConfigChannel+0x44c>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002318:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800231a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002320:	2320      	movs	r3, #32
 8002322:	e003      	b.n	800232c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002324:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	3301      	adds	r3, #1
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	2b09      	cmp	r3, #9
 8002334:	bf94      	ite	ls
 8002336:	2301      	movls	r3, #1
 8002338:	2300      	movhi	r3, #0
 800233a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233c:	2b00      	cmp	r3, #0
 800233e:	d079      	beq.n	8002434 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <HAL_ADC_ConfigChannel+0x46c>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	3301      	adds	r3, #1
 8002354:	069b      	lsls	r3, r3, #26
 8002356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235a:	e015      	b.n	8002388 <HAL_ADC_ConfigChannel+0x498>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800236a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800236e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002374:	2320      	movs	r3, #32
 8002376:	e003      	b.n	8002380 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	3301      	adds	r3, #1
 8002382:	069b      	lsls	r3, r3, #26
 8002384:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x4b8>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	3301      	adds	r3, #1
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	e017      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x4e8>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80023b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80023ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80023c0:	2320      	movs	r3, #32
 80023c2:	e003      	b.n	80023cc <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80023c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	ea42 0103 	orr.w	r1, r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x50e>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0e9b      	lsrs	r3, r3, #26
 80023ee:	3301      	adds	r3, #1
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	051b      	lsls	r3, r3, #20
 80023fc:	e018      	b.n	8002430 <HAL_ADC_ConfigChannel+0x540>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002416:	2320      	movs	r3, #32
 8002418:	e003      	b.n	8002422 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800241a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241c:	fab3 f383 	clz	r3, r3
 8002420:	b2db      	uxtb	r3, r3
 8002422:	3301      	adds	r3, #1
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002430:	430b      	orrs	r3, r1
 8002432:	e080      	b.n	8002536 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243c:	2b00      	cmp	r3, #0
 800243e:	d107      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x560>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0e9b      	lsrs	r3, r3, #26
 8002446:	3301      	adds	r3, #1
 8002448:	069b      	lsls	r3, r3, #26
 800244a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800244e:	e015      	b.n	800247c <HAL_ADC_ConfigChannel+0x58c>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002468:	2320      	movs	r3, #32
 800246a:	e003      	b.n	8002474 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	3301      	adds	r3, #1
 8002476:	069b      	lsls	r3, r3, #26
 8002478:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_ADC_ConfigChannel+0x5ac>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0e9b      	lsrs	r3, r3, #26
 800248e:	3301      	adds	r3, #1
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	e017      	b.n	80024cc <HAL_ADC_ConfigChannel+0x5dc>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	61fb      	str	r3, [r7, #28]
  return result;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80024b4:	2320      	movs	r3, #32
 80024b6:	e003      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3301      	adds	r3, #1
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	2101      	movs	r1, #1
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	ea42 0103 	orr.w	r1, r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10d      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x608>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	3301      	adds	r3, #1
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	3b1e      	subs	r3, #30
 80024f0:	051b      	lsls	r3, r3, #20
 80024f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f6:	e01d      	b.n	8002534 <HAL_ADC_ConfigChannel+0x644>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	613b      	str	r3, [r7, #16]
  return result;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d103      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e005      	b.n	8002520 <HAL_ADC_ConfigChannel+0x630>
 8002514:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f003 021f 	and.w	r2, r3, #31
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	3b1e      	subs	r3, #30
 800252e:	051b      	lsls	r3, r3, #20
 8002530:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002534:	430b      	orrs	r3, r1
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	6892      	ldr	r2, [r2, #8]
 800253a:	4619      	mov	r1, r3
 800253c:	f7ff fab5 	bl	8001aaa <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b45      	ldr	r3, [pc, #276]	; (800265c <HAL_ADC_ConfigChannel+0x76c>)
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d07c      	beq.n	8002646 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800254c:	4844      	ldr	r0, [pc, #272]	; (8002660 <HAL_ADC_ConfigChannel+0x770>)
 800254e:	f7ff fa1d 	bl	800198c <LL_ADC_GetCommonPathInternalCh>
 8002552:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002556:	4843      	ldr	r0, [pc, #268]	; (8002664 <HAL_ADC_ConfigChannel+0x774>)
 8002558:	f7ff fb44 	bl	8001be4 <LL_ADC_IsEnabled>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d15e      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a40      	ldr	r2, [pc, #256]	; (8002668 <HAL_ADC_ConfigChannel+0x778>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d127      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x6cc>
 800256c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d121      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a39      	ldr	r2, [pc, #228]	; (8002664 <HAL_ADC_ConfigChannel+0x774>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d161      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002582:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002586:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800258a:	4619      	mov	r1, r3
 800258c:	4834      	ldr	r0, [pc, #208]	; (8002660 <HAL_ADC_ConfigChannel+0x770>)
 800258e:	f7ff f9ea 	bl	8001966 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002592:	4b36      	ldr	r3, [pc, #216]	; (800266c <HAL_ADC_ConfigChannel+0x77c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	4a35      	ldr	r2, [pc, #212]	; (8002670 <HAL_ADC_ConfigChannel+0x780>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	099b      	lsrs	r3, r3, #6
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80025ac:	e002      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f9      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025ba:	e044      	b.n	8002646 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a2c      	ldr	r2, [pc, #176]	; (8002674 <HAL_ADC_ConfigChannel+0x784>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d113      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x6fe>
 80025c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10d      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a23      	ldr	r2, [pc, #140]	; (8002664 <HAL_ADC_ConfigChannel+0x774>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d134      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80025dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e4:	4619      	mov	r1, r3
 80025e6:	481e      	ldr	r0, [pc, #120]	; (8002660 <HAL_ADC_ConfigChannel+0x770>)
 80025e8:	f7ff f9bd 	bl	8001966 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025ec:	e02b      	b.n	8002646 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a21      	ldr	r2, [pc, #132]	; (8002678 <HAL_ADC_ConfigChannel+0x788>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d126      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x756>
 80025f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d120      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a16      	ldr	r2, [pc, #88]	; (8002664 <HAL_ADC_ConfigChannel+0x774>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d11b      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800260e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002612:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002616:	4619      	mov	r1, r3
 8002618:	4811      	ldr	r0, [pc, #68]	; (8002660 <HAL_ADC_ConfigChannel+0x770>)
 800261a:	f7ff f9a4 	bl	8001966 <LL_ADC_SetCommonPathInternalCh>
 800261e:	e012      	b.n	8002646 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002632:	e008      	b.n	8002646 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800264e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002652:	4618      	mov	r0, r3
 8002654:	37d8      	adds	r7, #216	; 0xd8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	80080000 	.word	0x80080000
 8002660:	50040300 	.word	0x50040300
 8002664:	50040000 	.word	0x50040000
 8002668:	c7520000 	.word	0xc7520000
 800266c:	20000010 	.word	0x20000010
 8002670:	053e2d63 	.word	0x053e2d63
 8002674:	cb840000 	.word	0xcb840000
 8002678:	80000001 	.word	0x80000001

0800267c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <__NVIC_SetPriorityGrouping+0x44>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002698:	4013      	ands	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <__NVIC_SetPriorityGrouping+0x44>)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	60d3      	str	r3, [r2, #12]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <__NVIC_GetPriorityGrouping+0x18>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	f003 0307 	and.w	r3, r3, #7
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	db0b      	blt.n	800270a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	f003 021f 	and.w	r2, r3, #31
 80026f8:	4907      	ldr	r1, [pc, #28]	; (8002718 <__NVIC_EnableIRQ+0x38>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2001      	movs	r0, #1
 8002702:	fa00 f202 	lsl.w	r2, r0, r2
 8002706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000e100 	.word	0xe000e100

0800271c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	6039      	str	r1, [r7, #0]
 8002726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	2b00      	cmp	r3, #0
 800272e:	db0a      	blt.n	8002746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	490c      	ldr	r1, [pc, #48]	; (8002768 <__NVIC_SetPriority+0x4c>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	440b      	add	r3, r1
 8002740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002744:	e00a      	b.n	800275c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4908      	ldr	r1, [pc, #32]	; (800276c <__NVIC_SetPriority+0x50>)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3b04      	subs	r3, #4
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	440b      	add	r3, r1
 800275a:	761a      	strb	r2, [r3, #24]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000e100 	.word	0xe000e100
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f1c3 0307 	rsb	r3, r3, #7
 800278a:	2b04      	cmp	r3, #4
 800278c:	bf28      	it	cs
 800278e:	2304      	movcs	r3, #4
 8002790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3304      	adds	r3, #4
 8002796:	2b06      	cmp	r3, #6
 8002798:	d902      	bls.n	80027a0 <NVIC_EncodePriority+0x30>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3b03      	subs	r3, #3
 800279e:	e000      	b.n	80027a2 <NVIC_EncodePriority+0x32>
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	401a      	ands	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	4313      	orrs	r3, r2
         );
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ff4c 	bl	800267c <__NVIC_SetPriorityGrouping>
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027fa:	f7ff ff63 	bl	80026c4 <__NVIC_GetPriorityGrouping>
 80027fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	6978      	ldr	r0, [r7, #20]
 8002806:	f7ff ffb3 	bl	8002770 <NVIC_EncodePriority>
 800280a:	4602      	mov	r2, r0
 800280c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff82 	bl	800271c <__NVIC_SetPriority>
}
 8002818:	bf00      	nop
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff56 	bl	80026e0 <__NVIC_EnableIRQ>
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800284a:	e14c      	b.n	8002ae6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2101      	movs	r1, #1
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 813e 	beq.w	8002ae0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d005      	beq.n	800287c <HAL_GPIO_Init+0x40>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d130      	bne.n	80028de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028b2:	2201      	movs	r2, #1
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	f003 0201 	and.w	r2, r3, #1
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d017      	beq.n	800291a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d123      	bne.n	800296e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	08da      	lsrs	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3208      	adds	r2, #8
 800292e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002932:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	08da      	lsrs	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3208      	adds	r2, #8
 8002968:	6939      	ldr	r1, [r7, #16]
 800296a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	2203      	movs	r2, #3
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0203 	and.w	r2, r3, #3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8098 	beq.w	8002ae0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80029b0:	4a54      	ldr	r2, [pc, #336]	; (8002b04 <HAL_GPIO_Init+0x2c8>)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	3302      	adds	r3, #2
 80029b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	220f      	movs	r2, #15
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029da:	d019      	beq.n	8002a10 <HAL_GPIO_Init+0x1d4>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a4a      	ldr	r2, [pc, #296]	; (8002b08 <HAL_GPIO_Init+0x2cc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <HAL_GPIO_Init+0x1d0>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a49      	ldr	r2, [pc, #292]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00d      	beq.n	8002a08 <HAL_GPIO_Init+0x1cc>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a48      	ldr	r2, [pc, #288]	; (8002b10 <HAL_GPIO_Init+0x2d4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <HAL_GPIO_Init+0x1c8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a47      	ldr	r2, [pc, #284]	; (8002b14 <HAL_GPIO_Init+0x2d8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_GPIO_Init+0x1c4>
 80029fc:	2304      	movs	r3, #4
 80029fe:	e008      	b.n	8002a12 <HAL_GPIO_Init+0x1d6>
 8002a00:	2307      	movs	r3, #7
 8002a02:	e006      	b.n	8002a12 <HAL_GPIO_Init+0x1d6>
 8002a04:	2303      	movs	r3, #3
 8002a06:	e004      	b.n	8002a12 <HAL_GPIO_Init+0x1d6>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e002      	b.n	8002a12 <HAL_GPIO_Init+0x1d6>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_GPIO_Init+0x1d6>
 8002a10:	2300      	movs	r3, #0
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	f002 0203 	and.w	r2, r2, #3
 8002a18:	0092      	lsls	r2, r2, #2
 8002a1a:	4093      	lsls	r3, r2
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a22:	4938      	ldr	r1, [pc, #224]	; (8002b04 <HAL_GPIO_Init+0x2c8>)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a30:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a54:	4a30      	ldr	r2, [pc, #192]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a5a:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a7e:	4a26      	ldr	r2, [pc, #152]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a84:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aaa:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002ab2:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ad8:	4a0f      	ldr	r2, [pc, #60]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f47f aeab 	bne.w	800284c <HAL_GPIO_Init+0x10>
  }
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40010000 	.word	0x40010000
 8002b08:	48000400 	.word	0x48000400
 8002b0c:	48000800 	.word	0x48000800
 8002b10:	48000c00 	.word	0x48000c00
 8002b14:	48001000 	.word	0x48001000
 8002b18:	58000800 	.word	0x58000800

08002b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b2c:	787b      	ldrb	r3, [r7, #1]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b38:	e002      	b.n	8002b40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_HSEM_IRQHandler+0x30>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <HAL_HSEM_IRQHandler+0x30>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	4906      	ldr	r1, [pc, #24]	; (8002b7c <HAL_HSEM_IRQHandler+0x30>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <HAL_HSEM_IRQHandler+0x30>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f807 	bl	8002b80 <HAL_HSEM_FreeCallback>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	58001500 	.word	0x58001500

08002b80 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e081      	b.n	8002caa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fd fe38 	bl	8000830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2224      	movs	r2, #36	; 0x24
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002be4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d107      	bne.n	8002c0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	e006      	b.n	8002c1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d104      	bne.n	8002c2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69d9      	ldr	r1, [r3, #28]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1a      	ldr	r2, [r3, #32]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	817b      	strh	r3, [r7, #10]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	813b      	strh	r3, [r7, #8]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	f040 80f9 	bne.w	8002ece <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_I2C_Mem_Write+0x34>
 8002ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d105      	bne.n	8002cf4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0ed      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_I2C_Mem_Write+0x4e>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e0e6      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d0a:	f7fe fe01 	bl	8001910 <HAL_GetTick>
 8002d0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2319      	movs	r3, #25
 8002d16:	2201      	movs	r2, #1
 8002d18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f955 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0d1      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2221      	movs	r2, #33	; 0x21
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2240      	movs	r2, #64	; 0x40
 8002d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d54:	88f8      	ldrh	r0, [r7, #6]
 8002d56:	893a      	ldrh	r2, [r7, #8]
 8002d58:	8979      	ldrh	r1, [r7, #10]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	4603      	mov	r3, r0
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f8b9 	bl	8002edc <I2C_RequestMemoryWrite>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0a9      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2bff      	cmp	r3, #255	; 0xff
 8002d84:	d90e      	bls.n	8002da4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	22ff      	movs	r2, #255	; 0xff
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	2300      	movs	r3, #0
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fa81 	bl	80032a4 <I2C_TransferConfig>
 8002da2:	e00f      	b.n	8002dc4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	8979      	ldrh	r1, [r7, #10]
 8002db6:	2300      	movs	r3, #0
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fa70 	bl	80032a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f93f 	bl	800304c <I2C_WaitOnTXISFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e07b      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d034      	beq.n	8002e7c <HAL_I2C_Mem_Write+0x1c8>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d130      	bne.n	8002e7c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	2200      	movs	r2, #0
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f8d1 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e04d      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2bff      	cmp	r3, #255	; 0xff
 8002e3c:	d90e      	bls.n	8002e5c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	22ff      	movs	r2, #255	; 0xff
 8002e42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	8979      	ldrh	r1, [r7, #10]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fa25 	bl	80032a4 <I2C_TransferConfig>
 8002e5a:	e00f      	b.n	8002e7c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	8979      	ldrh	r1, [r7, #10]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fa14 	bl	80032a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d19e      	bne.n	8002dc4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f91e 	bl	80030cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e01a      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_I2C_Mem_Write+0x224>)
 8002eae:	400b      	ands	r3, r1
 8002eb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ece:	2302      	movs	r3, #2
  }
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	fe00e800 	.word	0xfe00e800

08002edc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	817b      	strh	r3, [r7, #10]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	813b      	strh	r3, [r7, #8]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	8979      	ldrh	r1, [r7, #10]
 8002efc:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <I2C_RequestMemoryWrite+0xa4>)
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f9cd 	bl	80032a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	69b9      	ldr	r1, [r7, #24]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f89c 	bl	800304c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e02c      	b.n	8002f78 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d105      	bne.n	8002f30 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f24:	893b      	ldrh	r3, [r7, #8]
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f2e:	e015      	b.n	8002f5c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f30:	893b      	ldrh	r3, [r7, #8]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	69b9      	ldr	r1, [r7, #24]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f882 	bl	800304c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e012      	b.n	8002f78 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f52:	893b      	ldrh	r3, [r7, #8]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2200      	movs	r2, #0
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f830 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	80002000 	.word	0x80002000

08002f84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d103      	bne.n	8002fa2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d007      	beq.n	8002fc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	619a      	str	r2, [r3, #24]
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fdc:	e022      	b.n	8003024 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe4:	d01e      	beq.n	8003024 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fe fc93 	bl	8001910 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d113      	bne.n	8003024 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e00f      	b.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4013      	ands	r3, r2
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	429a      	cmp	r2, r3
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	429a      	cmp	r2, r3
 8003040:	d0cd      	beq.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003058:	e02c      	b.n	80030b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f870 	bl	8003144 <I2C_IsErrorOccurred>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e02a      	b.n	80030c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003074:	d01e      	beq.n	80030b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe fc4b 	bl	8001910 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d113      	bne.n	80030b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e007      	b.n	80030c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d1cb      	bne.n	800305a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d8:	e028      	b.n	800312c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f830 	bl	8003144 <I2C_IsErrorOccurred>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e026      	b.n	800313c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7fe fc0f 	bl	8001910 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d113      	bne.n	800312c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e007      	b.n	800313c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b20      	cmp	r3, #32
 8003138:	d1cf      	bne.n	80030da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	d040      	beq.n	80031ec <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003178:	d01d      	beq.n	80031b6 <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003188:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800318a:	e014      	b.n	80031b6 <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003192:	d010      	beq.n	80031b6 <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003194:	f7fe fbbc 	bl	8001910 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d302      	bcc.n	80031aa <I2C_IsErrorOccurred+0x66>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	f043 0320 	orr.w	r3, r3, #32
 80031b0:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d002      	beq.n	80031ca <I2C_IsErrorOccurred+0x86>
 80031c4:	7ffb      	ldrb	r3, [r7, #31]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0e0      	beq.n	800318c <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031ca:	7ffb      	ldrb	r3, [r7, #31]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2220      	movs	r2, #32
 80031d6:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2210      	movs	r2, #16
 80031de:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f043 0304 	orr.w	r3, r3, #4
 80031e6:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800320e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	f043 0308 	orr.w	r3, r3, #8
 8003224:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800322e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 8003254:	7ffb      	ldrb	r3, [r7, #31]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d01c      	beq.n	8003294 <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f7ff fe92 	bl	8002f84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <I2C_IsErrorOccurred+0x15c>)
 800326c:	400b      	ands	r3, r1
 800326e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	431a      	orrs	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003294:	7ffb      	ldrb	r3, [r7, #31]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	fe00e800 	.word	0xfe00e800

080032a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	817b      	strh	r3, [r7, #10]
 80032b2:	4613      	mov	r3, r2
 80032b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032bc:	7a7b      	ldrb	r3, [r7, #9]
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032d2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	0d5b      	lsrs	r3, r3, #21
 80032de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <I2C_TransferConfig+0x60>)
 80032e4:	430b      	orrs	r3, r1
 80032e6:	43db      	mvns	r3, r3
 80032e8:	ea02 0103 	and.w	r1, r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032f6:	bf00      	nop
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	03ff63ff 	.word	0x03ff63ff

08003308 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b20      	cmp	r3, #32
 800331c:	d138      	bne.n	8003390 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003328:	2302      	movs	r3, #2
 800332a:	e032      	b.n	8003392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800335a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6819      	ldr	r1, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d139      	bne.n	8003428 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033be:	2302      	movs	r3, #2
 80033c0:	e033      	b.n	800342a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2224      	movs	r2, #36	; 0x24
 80033ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01e      	beq.n	8003488 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800344a:	4b13      	ldr	r3, [pc, #76]	; (8003498 <HAL_IPCC_Init+0x60>)
 800344c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fd fa8e 	bl	800097c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003460:	68b8      	ldr	r0, [r7, #8]
 8003462:	f000 f85b 	bl	800351c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f82c 	bl	80034d0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003486:	e001      	b.n	800348c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	58000c00 	.word	0x58000c00

0800349c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	4613      	mov	r3, r2
 80034a8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	4613      	mov	r3, r2
 80034c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	e00f      	b.n	80034fe <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	4a0b      	ldr	r2, [pc, #44]	; (8003514 <IPCC_SetDefaultCallbacks+0x44>)
 80034e8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3306      	adds	r3, #6
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	4a08      	ldr	r2, [pc, #32]	; (8003518 <IPCC_SetDefaultCallbacks+0x48>)
 80034f6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	3301      	adds	r3, #1
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b05      	cmp	r3, #5
 8003502:	d9ec      	bls.n	80034de <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	0800349d 	.word	0x0800349d
 8003518:	080034b7 	.word	0x080034b7

0800351c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003530:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	223f      	movs	r2, #63	; 0x3f
 8003536:	609a      	str	r2, [r3, #8]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003546:	b08b      	sub	sp, #44	; 0x2c
 8003548:	af06      	add	r7, sp, #24
 800354a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e0d7      	b.n	8003706 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f00d f910 	bl	8010790 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2203      	movs	r2, #3
 8003574:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f005 fec8 	bl	8009312 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
 8003586:	e04c      	b.n	8003622 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	440b      	add	r3, r1
 8003598:	3301      	adds	r3, #1
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	440b      	add	r3, r1
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	b298      	uxth	r0, r3
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	440b      	add	r3, r1
 80035c4:	3336      	adds	r3, #54	; 0x36
 80035c6:	4602      	mov	r2, r0
 80035c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	440b      	add	r3, r1
 80035da:	3303      	adds	r3, #3
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	440b      	add	r3, r1
 80035ee:	3338      	adds	r3, #56	; 0x38
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	440b      	add	r3, r1
 8003602:	333c      	adds	r3, #60	; 0x3c
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	440b      	add	r3, r1
 8003616:	3340      	adds	r3, #64	; 0x40
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	3301      	adds	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d3ad      	bcc.n	8003588 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e044      	b.n	80036bc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	440b      	add	r3, r1
 8003656:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800365e:	7bfa      	ldrb	r2, [r7, #15]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	440b      	add	r3, r1
 800366c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	440b      	add	r3, r1
 8003682:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	440b      	add	r3, r1
 8003698:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	440b      	add	r3, r1
 80036ae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	3301      	adds	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d3b5      	bcc.n	8003632 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	687e      	ldr	r6, [r7, #4]
 80036ce:	466d      	mov	r5, sp
 80036d0:	f106 0410 	add.w	r4, r6, #16
 80036d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	602b      	str	r3, [r5, #0]
 80036dc:	1d33      	adds	r3, r6, #4
 80036de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036e0:	6838      	ldr	r0, [r7, #0]
 80036e2:	f005 fe31 	bl	8009348 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d102      	bne.n	8003704 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f001 fc29 	bl	8004f56 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800370e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_PCD_Start+0x16>
 8003720:	2302      	movs	r3, #2
 8003722:	e012      	b.n	800374a <HAL_PCD_Start+0x3c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f005 fdd7 	bl	80092e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f007 fd8c 	bl	800b258 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f007 fd91 	bl	800b286 <USB_ReadInterrupts>
 8003764:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fb26 	bl	8003dc2 <PCD_EP_ISR_Handler>

    return;
 8003776:	e110      	b.n	800399a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377e:	2b00      	cmp	r3, #0
 8003780:	d013      	beq.n	80037aa <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003794:	b292      	uxth	r2, r2
 8003796:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f00d f89b 	bl	80108d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80037a0:	2100      	movs	r1, #0
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8fc 	bl	80039a0 <HAL_PCD_SetAddress>

    return;
 80037a8:	e0f7      	b.n	800399a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00c      	beq.n	80037ce <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037bc:	b29a      	uxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037c6:	b292      	uxth	r2, r2
 80037c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80037cc:	e0e5      	b.n	800399a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00c      	beq.n	80037f2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ea:	b292      	uxth	r2, r2
 80037ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80037f0:	e0d3      	b.n	800399a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d034      	beq.n	8003866 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0204 	bic.w	r2, r2, #4
 800380e:	b292      	uxth	r2, r2
 8003810:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0208 	bic.w	r2, r2, #8
 8003826:	b292      	uxth	r2, r2
 8003828:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800383e:	2100      	movs	r1, #0
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f00d fa3f 	bl	8010cc4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f00d f87e 	bl	8010948 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003854:	b29a      	uxth	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800385e:	b292      	uxth	r2, r2
 8003860:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003864:	e099      	b.n	800399a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800386c:	2b00      	cmp	r3, #0
 800386e:	d027      	beq.n	80038c0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003878:	b29a      	uxth	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0208 	orr.w	r2, r2, #8
 8003882:	b292      	uxth	r2, r2
 8003884:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003890:	b29a      	uxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389a:	b292      	uxth	r2, r2
 800389c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0204 	orr.w	r2, r2, #4
 80038b2:	b292      	uxth	r2, r2
 80038b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f00d f82b 	bl	8010914 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038be:	e06c      	b.n	800399a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d040      	beq.n	800394c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038dc:	b292      	uxth	r2, r2
 80038de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d12b      	bne.n	8003944 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0204 	orr.w	r2, r2, #4
 80038fe:	b292      	uxth	r2, r2
 8003900:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800390c:	b29a      	uxth	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0208 	orr.w	r2, r2, #8
 8003916:	b292      	uxth	r2, r2
 8003918:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800392c:	b29b      	uxth	r3, r3
 800392e:	089b      	lsrs	r3, r3, #2
 8003930:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800393a:	2101      	movs	r1, #1
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f00d f9c1 	bl	8010cc4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003942:	e02a      	b.n	800399a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f00c ffe5 	bl	8010914 <HAL_PCD_SuspendCallback>
    return;
 800394a:	e026      	b.n	800399a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00f      	beq.n	8003976 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800395e:	b29a      	uxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003968:	b292      	uxth	r2, r2
 800396a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f00c ffa3 	bl	80108ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003974:	e011      	b.n	800399a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003988:	b29a      	uxth	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003992:	b292      	uxth	r2, r2
 8003994:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003998:	bf00      	nop
  }
}
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_PCD_SetAddress+0x1a>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e013      	b.n	80039e2 <HAL_PCD_SetAddress+0x42>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	4611      	mov	r1, r2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f007 fc2c 	bl	800b230 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	4608      	mov	r0, r1
 80039f4:	4611      	mov	r1, r2
 80039f6:	461a      	mov	r2, r3
 80039f8:	4603      	mov	r3, r0
 80039fa:	70fb      	strb	r3, [r7, #3]
 80039fc:	460b      	mov	r3, r1
 80039fe:	803b      	strh	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da0e      	bge.n	8003a2e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	705a      	strb	r2, [r3, #1]
 8003a2c:	e00e      	b.n	8003a4c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	f003 0207 	and.w	r2, r3, #7
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4413      	add	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a58:	883a      	ldrh	r2, [r7, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	78ba      	ldrb	r2, [r7, #2]
 8003a62:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	785b      	ldrb	r3, [r3, #1]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a76:	78bb      	ldrb	r3, [r7, #2]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d102      	bne.n	8003a82 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_PCD_EP_Open+0xa6>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e00e      	b.n	8003aae <HAL_PCD_EP_Open+0xc4>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68f9      	ldr	r1, [r7, #12]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f005 fc74 	bl	800938c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003aac:	7afb      	ldrb	r3, [r7, #11]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	da0e      	bge.n	8003ae8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	4413      	add	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	705a      	strb	r2, [r3, #1]
 8003ae6:	e00e      	b.n	8003b06 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	f003 0207 	and.w	r2, r3, #7
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_PCD_EP_Close+0x6a>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e00e      	b.n	8003b3e <HAL_PCD_EP_Close+0x88>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68f9      	ldr	r1, [r7, #12]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f005 ffc0 	bl	8009ab4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b086      	sub	sp, #24
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	460b      	mov	r3, r1
 8003b54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b56:	7afb      	ldrb	r3, [r7, #11]
 8003b58:	f003 0207 	and.w	r2, r3, #7
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2200      	movs	r2, #0
 8003b84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b86:	7afb      	ldrb	r3, [r7, #11]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b92:	7afb      	ldrb	r3, [r7, #11]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6979      	ldr	r1, [r7, #20]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f006 f973 	bl	8009e8e <USB_EPStartXfer>
 8003ba8:	e005      	b.n	8003bb6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6979      	ldr	r1, [r7, #20]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f006 f96c 	bl	8009e8e <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	f003 0207 	and.w	r2, r3, #7
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	440b      	add	r3, r1
 8003bde:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003be2:	681b      	ldr	r3, [r3, #0]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c00:	7afb      	ldrb	r3, [r7, #11]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2200      	movs	r2, #0
 8003c34:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3c:	7afb      	ldrb	r3, [r7, #11]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c48:	7afb      	ldrb	r3, [r7, #11]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6979      	ldr	r1, [r7, #20]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f006 f918 	bl	8009e8e <USB_EPStartXfer>
 8003c5e:	e005      	b.n	8003c6c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6979      	ldr	r1, [r7, #20]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f006 f911 	bl	8009e8e <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 0207 	and.w	r2, r3, #7
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d901      	bls.n	8003c94 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e03e      	b.n	8003d12 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	da0e      	bge.n	8003cba <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	4413      	add	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	705a      	strb	r2, [r3, #1]
 8003cb8:	e00c      	b.n	8003cd4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	4413      	add	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_PCD_EP_SetStall+0x7e>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e00e      	b.n	8003d12 <HAL_PCD_EP_SetStall+0x9c>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68f9      	ldr	r1, [r7, #12]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f007 f995 	bl	800b032 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	460b      	mov	r3, r1
 8003d24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	f003 020f 	and.w	r2, r3, #15
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d901      	bls.n	8003d38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e040      	b.n	8003dba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	da0e      	bge.n	8003d5e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	4413      	add	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	705a      	strb	r2, [r3, #1]
 8003d5c:	e00e      	b.n	8003d7c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	f003 0207 	and.w	r2, r3, #7
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_PCD_EP_ClrStall+0x82>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e00e      	b.n	8003dba <HAL_PCD_EP_ClrStall+0xa0>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68f9      	ldr	r1, [r7, #12]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f007 f992 	bl	800b0d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b096      	sub	sp, #88	; 0x58
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dca:	e39c      	b.n	8004506 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dd4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003dd8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8003de6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f040 815e 	bne.w	80040ac <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003df0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d150      	bne.n	8003e9e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0c:	81fb      	strh	r3, [r7, #14]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	89fb      	ldrh	r3, [r7, #14]
 8003e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3328      	adds	r3, #40	; 0x28
 8003e24:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e4c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	441a      	add	r2, r3
 8003e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e5a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f00c fd11 	bl	8010886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 834a 	beq.w	8004506 <PCD_EP_ISR_Handler+0x744>
 8003e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f040 8345 	bne.w	8004506 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b292      	uxth	r2, r2
 8003e90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e9c:	e333      	b.n	8004506 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003eb0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d032      	beq.n	8003f22 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4413      	add	r3, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	f007 fa17 	bl	800b32a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f08:	4013      	ands	r3, r2
 8003f0a:	823b      	strh	r3, [r7, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	8a3a      	ldrh	r2, [r7, #16]
 8003f12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f16:	b292      	uxth	r2, r2
 8003f18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f00c fc86 	bl	801082c <HAL_PCD_SetupStageCallback>
 8003f20:	e2f1      	b.n	8004506 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f22:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f280 82ed 	bge.w	8004506 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f38:	4013      	ands	r3, r2
 8003f3a:	83fb      	strh	r3, [r7, #30]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	8bfa      	ldrh	r2, [r7, #30]
 8003f42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f46:	b292      	uxth	r2, r2
 8003f48:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	4413      	add	r3, r2
 8003f64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f70:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d019      	beq.n	8003fae <PCD_EP_ISR_Handler+0x1ec>
 8003f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d015      	beq.n	8003fae <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f88:	6959      	ldr	r1, [r3, #20]
 8003f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f90:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f007 f9c9 	bl	800b32a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	441a      	add	r2, r3
 8003fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f00c fc51 	bl	8010850 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 82a3 	bne.w	8004506 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8003fe6:	d918      	bls.n	800401a <PCD_EP_ISR_Handler+0x258>
 8003fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <PCD_EP_ISR_Handler+0x240>
 8003ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ffe:	3b01      	subs	r3, #1
 8004000:	647b      	str	r3, [r7, #68]	; 0x44
 8004002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004004:	b29b      	uxth	r3, r3
 8004006:	029b      	lsls	r3, r3, #10
 8004008:	b29b      	uxth	r3, r3
 800400a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004012:	b29a      	uxth	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	801a      	strh	r2, [r3, #0]
 8004018:	e029      	b.n	800406e <PCD_EP_ISR_Handler+0x2ac>
 800401a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d112      	bne.n	8004048 <PCD_EP_ISR_Handler+0x286>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	b29b      	uxth	r3, r3
 8004028:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800402c:	b29a      	uxth	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	801a      	strh	r2, [r3, #0]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800403c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004040:	b29a      	uxth	r2, r3
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	801a      	strh	r2, [r3, #0]
 8004046:	e012      	b.n	800406e <PCD_EP_ISR_Handler+0x2ac>
 8004048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	647b      	str	r3, [r7, #68]	; 0x44
 8004050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <PCD_EP_ISR_Handler+0x2a0>
 800405c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800405e:	3301      	adds	r3, #1
 8004060:	647b      	str	r3, [r7, #68]	; 0x44
 8004062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004064:	b29b      	uxth	r3, r3
 8004066:	029b      	lsls	r3, r3, #10
 8004068:	b29a      	uxth	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	827b      	strh	r3, [r7, #18]
 8004080:	8a7b      	ldrh	r3, [r7, #18]
 8004082:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004086:	827b      	strh	r3, [r7, #18]
 8004088:	8a7b      	ldrh	r3, [r7, #18]
 800408a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800408e:	827b      	strh	r3, [r7, #18]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	8a7b      	ldrh	r3, [r7, #18]
 8004096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800409e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	8013      	strh	r3, [r2, #0]
 80040aa:	e22c      	b.n	8004506 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80040c0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f280 80f6 	bge.w	80042b6 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29a      	uxth	r2, r3
 80040dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80040e0:	4013      	ands	r3, r2
 80040e2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80040f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040fc:	b292      	uxth	r2, r2
 80040fe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004100:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	4413      	add	r3, r2
 8004114:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004118:	7b1b      	ldrb	r3, [r3, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d123      	bne.n	8004166 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004126:	b29b      	uxth	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	4413      	add	r3, r2
 8004138:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004142:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8004146:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 808e 	beq.w	800426c <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004156:	6959      	ldr	r1, [r3, #20]
 8004158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415a:	88da      	ldrh	r2, [r3, #6]
 800415c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004160:	f007 f8e3 	bl	800b32a <USB_ReadPMA>
 8004164:	e082      	b.n	800426c <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004168:	78db      	ldrb	r3, [r3, #3]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d10a      	bne.n	8004184 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800416e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004172:	461a      	mov	r2, r3
 8004174:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f9d3 	bl	8004522 <HAL_PCD_EP_DB_Receive>
 800417c:	4603      	mov	r3, r0
 800417e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004182:	e073      	b.n	800426c <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	441a      	add	r2, r3
 80041b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80041b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d022      	beq.n	8004228 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4413      	add	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	4413      	add	r3, r2
 80041fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004206:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800420a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800420e:	2b00      	cmp	r3, #0
 8004210:	d02c      	beq.n	800426c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004218:	6959      	ldr	r1, [r3, #20]
 800421a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800421c:	891a      	ldrh	r2, [r3, #8]
 800421e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004222:	f007 f882 	bl	800b32a <USB_ReadPMA>
 8004226:	e021      	b.n	800426c <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004230:	b29b      	uxth	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4413      	add	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	4413      	add	r3, r2
 8004242:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800424c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004250:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004254:	2b00      	cmp	r3, #0
 8004256:	d009      	beq.n	800426c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425e:	6959      	ldr	r1, [r3, #20]
 8004260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004262:	895a      	ldrh	r2, [r3, #10]
 8004264:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004268:	f007 f85f 	bl	800b32a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800426c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004274:	441a      	add	r2, r3
 8004276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004278:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800427a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800427c:	695a      	ldr	r2, [r3, #20]
 800427e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004282:	441a      	add	r2, r3
 8004284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004286:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <PCD_EP_ISR_Handler+0x4da>
 8004290:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	429a      	cmp	r2, r3
 800429a:	d206      	bcs.n	80042aa <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800429c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	4619      	mov	r1, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f00c fad4 	bl	8010850 <HAL_PCD_DataOutStageCallback>
 80042a8:	e005      	b.n	80042b6 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80042b0:	4618      	mov	r0, r3
 80042b2:	f005 fdec 	bl	8009e8e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80042b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8121 	beq.w	8004506 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80042c4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	4413      	add	r3, r2
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80042ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	441a      	add	r2, r3
 8004304:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004310:	b29b      	uxth	r3, r3
 8004312:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8004314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004316:	78db      	ldrb	r3, [r3, #3]
 8004318:	2b02      	cmp	r3, #2
 800431a:	f000 80a2 	beq.w	8004462 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800431e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004320:	2200      	movs	r2, #0
 8004322:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004326:	7b1b      	ldrb	r3, [r3, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8093 	beq.w	8004454 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800432e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d046      	beq.n	80043c8 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800433a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433c:	785b      	ldrb	r3, [r3, #1]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d126      	bne.n	8004390 <PCD_EP_ISR_Handler+0x5ce>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004350:	b29b      	uxth	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	4413      	add	r3, r2
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
 800435a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	00da      	lsls	r2, r3, #3
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	4413      	add	r3, r2
 8004364:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004368:	623b      	str	r3, [r7, #32]
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004374:	b29a      	uxth	r2, r3
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	801a      	strh	r2, [r3, #0]
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b29b      	uxth	r3, r3
 8004380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004388:	b29a      	uxth	r2, r3
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	801a      	strh	r2, [r3, #0]
 800438e:	e061      	b.n	8004454 <PCD_EP_ISR_Handler+0x692>
 8004390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004392:	785b      	ldrb	r3, [r3, #1]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d15d      	bne.n	8004454 <PCD_EP_ISR_Handler+0x692>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	4413      	add	r3, r2
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	00da      	lsls	r2, r3, #3
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	4413      	add	r3, r2
 80043ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	2200      	movs	r2, #0
 80043c4:	801a      	strh	r2, [r3, #0]
 80043c6:	e045      	b.n	8004454 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d0:	785b      	ldrb	r3, [r3, #1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d126      	bne.n	8004424 <PCD_EP_ISR_Handler+0x662>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	637b      	str	r3, [r7, #52]	; 0x34
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	4413      	add	r3, r2
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
 80043ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	00da      	lsls	r2, r3, #3
 80043f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f6:	4413      	add	r3, r2
 80043f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043fc:	633b      	str	r3, [r7, #48]	; 0x30
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004408:	b29a      	uxth	r2, r3
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	801a      	strh	r2, [r3, #0]
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441c:	b29a      	uxth	r2, r3
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	801a      	strh	r2, [r3, #0]
 8004422:	e017      	b.n	8004454 <PCD_EP_ISR_Handler+0x692>
 8004424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004426:	785b      	ldrb	r3, [r3, #1]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d113      	bne.n	8004454 <PCD_EP_ISR_Handler+0x692>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004434:	b29b      	uxth	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443a:	4413      	add	r3, r2
 800443c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800443e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	00da      	lsls	r2, r3, #3
 8004444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004446:	4413      	add	r3, r2
 8004448:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800444c:	63bb      	str	r3, [r7, #56]	; 0x38
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	2200      	movs	r2, #0
 8004452:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	4619      	mov	r1, r3
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f00c fa13 	bl	8010886 <HAL_PCD_DataInStageCallback>
 8004460:	e051      	b.n	8004506 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004462:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d144      	bne.n	80044f8 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004476:	b29b      	uxth	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4413      	add	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	4413      	add	r3, r2
 8004488:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004492:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800449e:	429a      	cmp	r2, r3
 80044a0:	d907      	bls.n	80044b2 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80044a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044aa:	1ad2      	subs	r2, r2, r3
 80044ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ae:	619a      	str	r2, [r3, #24]
 80044b0:	e002      	b.n	80044b8 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80044b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b4:	2200      	movs	r2, #0
 80044b6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80044b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d106      	bne.n	80044ce <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	4619      	mov	r1, r3
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f00c f9dd 	bl	8010886 <HAL_PCD_DataInStageCallback>
 80044cc:	e01b      	b.n	8004506 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80044ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044d6:	441a      	add	r2, r3
 80044d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044da:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80044dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044e4:	441a      	add	r2, r3
 80044e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80044f0:	4618      	mov	r0, r3
 80044f2:	f005 fccc 	bl	8009e8e <USB_EPStartXfer>
 80044f6:	e006      	b.n	8004506 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80044f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80044fc:	461a      	mov	r2, r3
 80044fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f917 	bl	8004734 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800450e:	b29b      	uxth	r3, r3
 8004510:	b21b      	sxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	f6ff ac5a 	blt.w	8003dcc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3758      	adds	r7, #88	; 0x58
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b088      	sub	sp, #32
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	4613      	mov	r3, r2
 800452e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d07c      	beq.n	8004634 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004542:	b29b      	uxth	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4413      	add	r3, r2
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	4413      	add	r3, r2
 8004554:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800455e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	699a      	ldr	r2, [r3, #24]
 8004564:	8b7b      	ldrh	r3, [r7, #26]
 8004566:	429a      	cmp	r2, r3
 8004568:	d306      	bcc.n	8004578 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	8b7b      	ldrh	r3, [r7, #26]
 8004570:	1ad2      	subs	r2, r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	619a      	str	r2, [r3, #24]
 8004576:	e002      	b.n	800457e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2200      	movs	r2, #0
 800457c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d123      	bne.n	80045ce <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800459c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a0:	833b      	strh	r3, [r7, #24]
 80045a2:	8b3b      	ldrh	r3, [r7, #24]
 80045a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045a8:	833b      	strh	r3, [r7, #24]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	441a      	add	r2, r3
 80045b8:	8b3b      	ldrh	r3, [r7, #24]
 80045ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01f      	beq.n	8004618 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f2:	82fb      	strh	r3, [r7, #22]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	8afb      	ldrh	r3, [r7, #22]
 8004604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004610:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004614:	b29b      	uxth	r3, r3
 8004616:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004618:	8b7b      	ldrh	r3, [r7, #26]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8085 	beq.w	800472a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	6959      	ldr	r1, [r3, #20]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	891a      	ldrh	r2, [r3, #8]
 800462c:	8b7b      	ldrh	r3, [r7, #26]
 800462e:	f006 fe7c 	bl	800b32a <USB_ReadPMA>
 8004632:	e07a      	b.n	800472a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800463c:	b29b      	uxth	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4413      	add	r3, r2
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	4413      	add	r3, r2
 800464e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004658:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	8b7b      	ldrh	r3, [r7, #26]
 8004660:	429a      	cmp	r2, r3
 8004662:	d306      	bcc.n	8004672 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	699a      	ldr	r2, [r3, #24]
 8004668:	8b7b      	ldrh	r3, [r7, #26]
 800466a:	1ad2      	subs	r2, r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	619a      	str	r2, [r3, #24]
 8004670:	e002      	b.n	8004678 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2200      	movs	r2, #0
 8004676:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d123      	bne.n	80046c8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	83fb      	strh	r3, [r7, #30]
 800469c:	8bfb      	ldrh	r3, [r7, #30]
 800469e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046a2:	83fb      	strh	r3, [r7, #30]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	8bfb      	ldrh	r3, [r7, #30]
 80046b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11f      	bne.n	8004712 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ec:	83bb      	strh	r3, [r7, #28]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	441a      	add	r2, r3
 80046fc:	8bbb      	ldrh	r3, [r7, #28]
 80046fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800470e:	b29b      	uxth	r3, r3
 8004710:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004712:	8b7b      	ldrh	r3, [r7, #26]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	6959      	ldr	r1, [r3, #20]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	895a      	ldrh	r2, [r3, #10]
 8004724:	8b7b      	ldrh	r3, [r7, #26]
 8004726:	f006 fe00 	bl	800b32a <USB_ReadPMA>
    }
  }

  return count;
 800472a:	8b7b      	ldrh	r3, [r7, #26]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b0a2      	sub	sp, #136	; 0x88
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 81c5 	beq.w	8004ad8 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004756:	b29b      	uxth	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4413      	add	r3, r2
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	4413      	add	r3, r2
 8004768:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004772:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800477e:	429a      	cmp	r2, r3
 8004780:	d907      	bls.n	8004792 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800478a:	1ad2      	subs	r2, r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	619a      	str	r2, [r3, #24]
 8004790:	e002      	b.n	8004798 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2200      	movs	r2, #0
 8004796:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f040 80b9 	bne.w	8004914 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	785b      	ldrb	r3, [r3, #1]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d126      	bne.n	80047f8 <HAL_PCD_EP_DB_Transmit+0xc4>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	4413      	add	r3, r2
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	00da      	lsls	r2, r3, #3
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	4413      	add	r3, r2
 80047cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047dc:	b29a      	uxth	r2, r3
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e01a      	b.n	800482e <HAL_PCD_EP_DB_Transmit+0xfa>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	785b      	ldrb	r3, [r3, #1]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d116      	bne.n	800482e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	633b      	str	r3, [r7, #48]	; 0x30
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480e:	b29b      	uxth	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	4413      	add	r3, r2
 8004816:	633b      	str	r3, [r7, #48]	; 0x30
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	00da      	lsls	r2, r3, #3
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	4413      	add	r3, r2
 8004822:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	2200      	movs	r2, #0
 800482c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	785b      	ldrb	r3, [r3, #1]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d126      	bne.n	800488a <HAL_PCD_EP_DB_Transmit+0x156>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484a:	b29b      	uxth	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	4413      	add	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	00da      	lsls	r2, r3, #3
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	4413      	add	r3, r2
 800485e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b29b      	uxth	r3, r3
 800486a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800486e:	b29a      	uxth	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	801a      	strh	r2, [r3, #0]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	b29b      	uxth	r3, r3
 800487a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800487e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004882:	b29a      	uxth	r2, r3
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	801a      	strh	r2, [r3, #0]
 8004888:	e017      	b.n	80048ba <HAL_PCD_EP_DB_Transmit+0x186>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	785b      	ldrb	r3, [r3, #1]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d113      	bne.n	80048ba <HAL_PCD_EP_DB_Transmit+0x186>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800489a:	b29b      	uxth	r3, r3
 800489c:	461a      	mov	r2, r3
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	4413      	add	r3, r2
 80048a2:	623b      	str	r3, [r7, #32]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	00da      	lsls	r2, r3, #3
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	4413      	add	r3, r2
 80048ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	2200      	movs	r2, #0
 80048b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	4619      	mov	r1, r3
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f00b ffe0 	bl	8010886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 82d2 	beq.w	8004e76 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ec:	827b      	strh	r3, [r7, #18]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	441a      	add	r2, r3
 80048fc:	8a7b      	ldrh	r3, [r7, #18]
 80048fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800490a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490e:	b29b      	uxth	r3, r3
 8004910:	8013      	strh	r3, [r2, #0]
 8004912:	e2b0      	b.n	8004e76 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d021      	beq.n	8004962 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004938:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	441a      	add	r2, r3
 800494a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004968:	2b01      	cmp	r3, #1
 800496a:	f040 8284 	bne.w	8004e76 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004976:	441a      	add	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004984:	441a      	add	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6a1a      	ldr	r2, [r3, #32]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	429a      	cmp	r2, r3
 8004994:	d309      	bcc.n	80049aa <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a2:	1ad2      	subs	r2, r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	621a      	str	r2, [r3, #32]
 80049a8:	e015      	b.n	80049d6 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d107      	bne.n	80049c2 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80049b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049c0:	e009      	b.n	80049d6 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2200      	movs	r2, #0
 80049d4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d155      	bne.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x356>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	4413      	add	r3, r2
 80049f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	00da      	lsls	r2, r3, #3
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	4413      	add	r3, r2
 8004a00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
 8004a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a08:	2b3e      	cmp	r3, #62	; 0x3e
 8004a0a:	d916      	bls.n	8004a3a <HAL_PCD_EP_DB_Transmit+0x306>
 8004a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	029b      	lsls	r3, r3, #10
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a36:	801a      	strh	r2, [r3, #0]
 8004a38:	e043      	b.n	8004ac2 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d112      	bne.n	8004a66 <HAL_PCD_EP_DB_Transmit+0x332>
 8004a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4e:	801a      	strh	r2, [r3, #0]
 8004a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a62:	801a      	strh	r2, [r3, #0]
 8004a64:	e02d      	b.n	8004ac2 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a68:	085b      	lsrs	r3, r3, #1
 8004a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_PCD_EP_DB_Transmit+0x348>
 8004a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a78:	3301      	adds	r3, #1
 8004a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	029b      	lsls	r3, r3, #10
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a86:	801a      	strh	r2, [r3, #0]
 8004a88:	e01b      	b.n	8004ac2 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	785b      	ldrb	r3, [r3, #1]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d117      	bne.n	8004ac2 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	643b      	str	r3, [r7, #64]	; 0x40
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa6:	4413      	add	r3, r2
 8004aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	00da      	lsls	r2, r3, #3
 8004ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	6959      	ldr	r1, [r3, #20]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	891a      	ldrh	r2, [r3, #8]
 8004ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f006 fbe8 	bl	800b2a6 <USB_WritePMA>
 8004ad6:	e1ce      	b.n	8004e76 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4413      	add	r3, r2
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	4413      	add	r3, r2
 8004af2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004afc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	699a      	ldr	r2, [r3, #24]
 8004b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d307      	bcc.n	8004b1c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	699a      	ldr	r2, [r3, #24]
 8004b10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b14:	1ad2      	subs	r2, r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	619a      	str	r2, [r3, #24]
 8004b1a:	e002      	b.n	8004b22 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f040 80c4 	bne.w	8004cb4 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d126      	bne.n	8004b82 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b48:	4413      	add	r3, r2
 8004b4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	00da      	lsls	r2, r3, #3
 8004b52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b54:	4413      	add	r3, r2
 8004b56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b5a:	667b      	str	r3, [r7, #100]	; 0x64
 8004b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b6a:	801a      	strh	r2, [r3, #0]
 8004b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	e01a      	b.n	8004bb8 <HAL_PCD_EP_DB_Transmit+0x484>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d116      	bne.n	8004bb8 <HAL_PCD_EP_DB_Transmit+0x484>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b9e:	4413      	add	r3, r2
 8004ba0:	673b      	str	r3, [r7, #112]	; 0x70
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	00da      	lsls	r2, r3, #3
 8004ba8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004baa:	4413      	add	r3, r2
 8004bac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d12f      	bne.n	8004c26 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bde:	4413      	add	r3, r2
 8004be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	00da      	lsls	r2, r3, #3
 8004bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bee:	4413      	add	r3, r2
 8004bf0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c22:	801a      	strh	r2, [r3, #0]
 8004c24:	e017      	b.n	8004c56 <HAL_PCD_EP_DB_Transmit+0x522>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d113      	bne.n	8004c56 <HAL_PCD_EP_DB_Transmit+0x522>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c3c:	4413      	add	r3, r2
 8004c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	00da      	lsls	r2, r3, #3
 8004c46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c48:	4413      	add	r3, r2
 8004c4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c52:	2200      	movs	r2, #0
 8004c54:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f00b fe12 	bl	8010886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f040 8104 	bne.w	8004e76 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	441a      	add	r2, r3
 8004c9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	8013      	strh	r3, [r2, #0]
 8004cb2:	e0e0      	b.n	8004e76 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d121      	bne.n	8004d02 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	441a      	add	r2, r3
 8004cea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	f040 80b4 	bne.w	8004e76 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	695a      	ldr	r2, [r3, #20]
 8004d12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d16:	441a      	add	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d24:	441a      	add	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6a1a      	ldr	r2, [r3, #32]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d309      	bcc.n	8004d4a <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	6a1a      	ldr	r2, [r3, #32]
 8004d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d42:	1ad2      	subs	r2, r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	621a      	str	r2, [r3, #32]
 8004d48:	e015      	b.n	8004d76 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d107      	bne.n	8004d62 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8004d52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d56:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d60:	e009      	b.n	8004d76 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d155      	bne.n	8004e30 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d98:	4413      	add	r3, r2
 8004d9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	00da      	lsls	r2, r3, #3
 8004da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004da4:	4413      	add	r3, r2
 8004da6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004daa:	657b      	str	r3, [r7, #84]	; 0x54
 8004dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dae:	2b3e      	cmp	r3, #62	; 0x3e
 8004db0:	d916      	bls.n	8004de0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	677b      	str	r3, [r7, #116]	; 0x74
 8004db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <HAL_PCD_EP_DB_Transmit+0x694>
 8004dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	677b      	str	r3, [r7, #116]	; 0x74
 8004dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	029b      	lsls	r3, r3, #10
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	e040      	b.n	8004e62 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d112      	bne.n	8004e0c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8004de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004df4:	801a      	strh	r2, [r3, #0]
 8004df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e08:	801a      	strh	r2, [r3, #0]
 8004e0a:	e02a      	b.n	8004e62 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0e:	085b      	lsrs	r3, r3, #1
 8004e10:	677b      	str	r3, [r7, #116]	; 0x74
 8004e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8004e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e1e:	3301      	adds	r3, #1
 8004e20:	677b      	str	r3, [r7, #116]	; 0x74
 8004e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	029b      	lsls	r3, r3, #10
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	e018      	b.n	8004e62 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	785b      	ldrb	r3, [r3, #1]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d114      	bne.n	8004e62 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e46:	4413      	add	r3, r2
 8004e48:	663b      	str	r3, [r7, #96]	; 0x60
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	00da      	lsls	r2, r3, #3
 8004e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e52:	4413      	add	r3, r2
 8004e54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e60:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	6959      	ldr	r1, [r3, #20]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	895a      	ldrh	r2, [r3, #10]
 8004e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f006 fa18 	bl	800b2a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e90:	823b      	strh	r3, [r7, #16]
 8004e92:	8a3b      	ldrh	r3, [r7, #16]
 8004e94:	f083 0310 	eor.w	r3, r3, #16
 8004e98:	823b      	strh	r3, [r7, #16]
 8004e9a:	8a3b      	ldrh	r3, [r7, #16]
 8004e9c:	f083 0320 	eor.w	r3, r3, #32
 8004ea0:	823b      	strh	r3, [r7, #16]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	441a      	add	r2, r3
 8004eb0:	8a3b      	ldrh	r3, [r7, #16]
 8004eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3788      	adds	r7, #136	; 0x88
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	460b      	mov	r3, r1
 8004edc:	817b      	strh	r3, [r7, #10]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004ee2:	897b      	ldrh	r3, [r7, #10]
 8004ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eee:	897b      	ldrh	r3, [r7, #10]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e009      	b.n	8004f1a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f06:	897a      	ldrh	r2, [r7, #10]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f1a:	893b      	ldrh	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d107      	bne.n	8004f30 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2200      	movs	r2, #0
 8004f24:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	80da      	strh	r2, [r3, #6]
 8004f2e:	e00b      	b.n	8004f48 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2201      	movs	r2, #1
 8004f34:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	0c1b      	lsrs	r3, r3, #16
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f043 0302 	orr.w	r3, r3, #2
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a04      	ldr	r2, [pc, #16]	; (8004fc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fba:	6013      	str	r3, [r2, #0]
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	58000400 	.word	0x58000400

08004fcc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004fd0:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	58000400 	.word	0x58000400

08004fe8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	4a04      	ldr	r2, [pc, #16]	; (8005004 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ff6:	6053      	str	r3, [r2, #4]
}
 8004ff8:	bf00      	nop
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	58000400 	.word	0x58000400

08005008 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800500c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800501a:	d101      	bne.n	8005020 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <LL_RCC_HSE_Enable>:
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800503a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503e:	6013      	str	r3, [r2, #0]
}
 8005040:	bf00      	nop
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <LL_RCC_HSE_Disable>:
{
 800504a:	b480      	push	{r7}
 800504c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800504e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505c:	6013      	str	r3, [r2, #0]
}
 800505e:	bf00      	nop
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <LL_RCC_HSE_IsReady>:
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800506c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800507a:	d101      	bne.n	8005080 <LL_RCC_HSE_IsReady+0x18>
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <LL_RCC_HSE_IsReady+0x1a>
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <LL_RCC_HSI_Enable>:
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800509a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509e:	6013      	str	r3, [r2, #0]
}
 80050a0:	bf00      	nop
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <LL_RCC_HSI_Disable>:
{
 80050aa:	b480      	push	{r7}
 80050ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80050ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050bc:	6013      	str	r3, [r2, #0]
}
 80050be:	bf00      	nop
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <LL_RCC_HSI_IsReady>:
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80050cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050da:	d101      	bne.n	80050e0 <LL_RCC_HSI_IsReady+0x18>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <LL_RCC_HSI_IsReady+0x1a>
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <LL_RCC_HSI_SetCalibTrimming>:
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80050f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	061b      	lsls	r3, r3, #24
 8005102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005106:	4313      	orrs	r3, r2
 8005108:	604b      	str	r3, [r1, #4]
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <LL_RCC_HSI48_Enable>:
{
 8005116:	b480      	push	{r7}
 8005118:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800511a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800512e:	bf00      	nop
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <LL_RCC_HSI48_Disable>:
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800513c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005140:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005150:	bf00      	nop
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <LL_RCC_HSI48_IsReady>:
{
 800515a:	b480      	push	{r7}
 800515c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005162:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b02      	cmp	r3, #2
 800516c:	d101      	bne.n	8005172 <LL_RCC_HSI48_IsReady+0x18>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <LL_RCC_HSI48_IsReady+0x1a>
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <LL_RCC_LSE_Enable>:
{
 800517e:	b480      	push	{r7}
 8005180:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005196:	bf00      	nop
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <LL_RCC_LSE_Disable>:
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80051a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b0:	f023 0301 	bic.w	r3, r3, #1
 80051b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <LL_RCC_LSE_EnableBypass>:
{
 80051c2:	b480      	push	{r7}
 80051c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80051c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051d2:	f043 0304 	orr.w	r3, r3, #4
 80051d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051da:	bf00      	nop
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <LL_RCC_LSE_DisableBypass>:
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80051e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f4:	f023 0304 	bic.w	r3, r3, #4
 80051f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <LL_RCC_LSE_IsReady>:
{
 8005206:	b480      	push	{r7}
 8005208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800520a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b02      	cmp	r3, #2
 8005218:	d101      	bne.n	800521e <LL_RCC_LSE_IsReady+0x18>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <LL_RCC_LSE_IsReady+0x1a>
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <LL_RCC_LSI1_Enable>:
{
 800522a:	b480      	push	{r7}
 800522c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005242:	bf00      	nop
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <LL_RCC_LSI1_Disable>:
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <LL_RCC_LSI1_IsReady>:
{
 800526e:	b480      	push	{r7}
 8005270:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b02      	cmp	r3, #2
 8005280:	d101      	bne.n	8005286 <LL_RCC_LSI1_IsReady+0x18>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <LL_RCC_LSI1_IsReady+0x1a>
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <LL_RCC_LSI2_Enable>:
{
 8005292:	b480      	push	{r7}
 8005294:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a2:	f043 0304 	orr.w	r3, r3, #4
 80052a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80052aa:	bf00      	nop
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <LL_RCC_LSI2_Disable>:
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80052b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80052cc:	bf00      	nop
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <LL_RCC_LSI2_IsReady>:
{
 80052d6:	b480      	push	{r7}
 80052d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80052da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d101      	bne.n	80052ee <LL_RCC_LSI2_IsReady+0x18>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <LL_RCC_LSI2_IsReady+0x1a>
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <LL_RCC_LSI2_SetTrimming>:
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800530a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <LL_RCC_MSI_Enable>:
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800532c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	6013      	str	r3, [r2, #0]
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <LL_RCC_MSI_Disable>:
{
 8005346:	b480      	push	{r7}
 8005348:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800534a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	6013      	str	r3, [r2, #0]
}
 800535a:	bf00      	nop
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <LL_RCC_MSI_IsReady>:
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b02      	cmp	r3, #2
 8005374:	d101      	bne.n	800537a <LL_RCC_MSI_IsReady+0x16>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <LL_RCC_MSI_IsReady+0x18>
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <LL_RCC_MSI_SetRange>:
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800538e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <LL_RCC_MSI_GetRange>:
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80053b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053be:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2bb0      	cmp	r3, #176	; 0xb0
 80053c4:	d901      	bls.n	80053ca <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80053c6:	23b0      	movs	r3, #176	; 0xb0
 80053c8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80053ca:	687b      	ldr	r3, [r7, #4]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80053e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053f2:	4313      	orrs	r3, r2
 80053f4:	604b      	str	r3, [r1, #4]
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <LL_RCC_SetSysClkSource>:
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800540a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f023 0203 	bic.w	r2, r3, #3
 8005414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4313      	orrs	r3, r2
 800541c:	608b      	str	r3, [r1, #8]
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <LL_RCC_GetSysClkSource>:
{
 800542a:	b480      	push	{r7}
 800542c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800542e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 030c 	and.w	r3, r3, #12
}
 8005438:	4618      	mov	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <LL_RCC_SetAHBPrescaler>:
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800544a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4313      	orrs	r3, r2
 800545c:	608b      	str	r3, [r1, #8]
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <LL_C2_RCC_SetAHBPrescaler>:
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005476:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800547a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800547e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <LL_RCC_SetAHB4Prescaler>:
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800549e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054a6:	f023 020f 	bic.w	r2, r3, #15
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <LL_RCC_SetAPB1Prescaler>:
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80054cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4313      	orrs	r3, r2
 80054de:	608b      	str	r3, [r1, #8]
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <LL_RCC_SetAPB2Prescaler>:
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80054f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4313      	orrs	r3, r2
 8005506:	608b      	str	r3, [r1, #8]
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <LL_RCC_GetAHBPrescaler>:
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005522:	4618      	mov	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <LL_C2_RCC_GetAHBPrescaler>:
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005534:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800553c:	4618      	mov	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <LL_RCC_GetAHB4Prescaler>:
{
 8005546:	b480      	push	{r7}
 8005548:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800554a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <LL_RCC_GetAPB1Prescaler>:
{
 8005562:	b480      	push	{r7}
 8005564:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005570:	4618      	mov	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <LL_RCC_GetAPB2Prescaler>:
{
 800557a:	b480      	push	{r7}
 800557c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800557e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005588:	4618      	mov	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <LL_RCC_PLL_Enable>:
{
 8005592:	b480      	push	{r7}
 8005594:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055a4:	6013      	str	r3, [r2, #0]
}
 80055a6:	bf00      	nop
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <LL_RCC_PLL_Disable>:
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80055b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c2:	6013      	str	r3, [r2, #0]
}
 80055c4:	bf00      	nop
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <LL_RCC_PLL_IsReady>:
{
 80055ce:	b480      	push	{r7}
 80055d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80055d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055e0:	d101      	bne.n	80055e6 <LL_RCC_PLL_IsReady+0x18>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <LL_RCC_PLL_IsReady+0x1a>
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <LL_RCC_PLL_GetN>:
{
 80055f2:	b480      	push	{r7}
 80055f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80055f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	0a1b      	lsrs	r3, r3, #8
 80055fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005602:	4618      	mov	r0, r3
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <LL_RCC_PLL_GetR>:
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800561a:	4618      	mov	r0, r3
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <LL_RCC_PLL_GetDivider>:
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005632:	4618      	mov	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <LL_RCC_PLL_GetMainSource>:
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f003 0303 	and.w	r3, r3, #3
}
 800564a:	4618      	mov	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <LL_RCC_IsActiveFlag_HPRE>:
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005666:	d101      	bne.n	800566c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005668:	2301      	movs	r3, #1
 800566a:	e000      	b.n	800566e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800567c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005680:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800568c:	d101      	bne.n	8005692 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800569e:	b480      	push	{r7}
 80056a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80056a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80056aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b2:	d101      	bne.n	80056b8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80056c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056d6:	d101      	bne.n	80056dc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80056ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056fa:	d101      	bne.n	8005700 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e000      	b.n	8005702 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800570c:	b590      	push	{r4, r7, lr}
 800570e:	b08d      	sub	sp, #52	; 0x34
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e37e      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 8092 	beq.w	8005850 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800572c:	f7ff fe7d 	bl	800542a <LL_RCC_GetSysClkSource>
 8005730:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005732:	f7ff ff83 	bl	800563c <LL_RCC_PLL_GetMainSource>
 8005736:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d005      	beq.n	800574a <HAL_RCC_OscConfig+0x3e>
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	2b0c      	cmp	r3, #12
 8005742:	d14c      	bne.n	80057de <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	2b01      	cmp	r3, #1
 8005748:	d149      	bne.n	80057de <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800574a:	f7ff fe0b 	bl	8005364 <LL_RCC_MSI_IsReady>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <HAL_RCC_OscConfig+0x54>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e35d      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005764:	f7ff fe23 	bl	80053ae <LL_RCC_MSI_GetRange>
 8005768:	4603      	mov	r3, r0
 800576a:	429c      	cmp	r4, r3
 800576c:	d914      	bls.n	8005798 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fd5e 	bl	8006234 <RCC_SetFlashLatencyFromMSIRange>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e34c      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fdfd 	bl	8005386 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fe21 	bl	80053d8 <LL_RCC_MSI_SetCalibTrimming>
 8005796:	e013      	b.n	80057c0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff fdf2 	bl	8005386 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fe16 	bl	80053d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fd3f 	bl	8006234 <RCC_SetFlashLatencyFromMSIRange>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e32d      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80057c0:	f000 fcdc 	bl	800617c <HAL_RCC_GetHCLKFreq>
 80057c4:	4603      	mov	r3, r0
 80057c6:	4ab3      	ldr	r2, [pc, #716]	; (8005a94 <HAL_RCC_OscConfig+0x388>)
 80057c8:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80057ca:	4bb3      	ldr	r3, [pc, #716]	; (8005a98 <HAL_RCC_OscConfig+0x38c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fb fe6a 	bl	80014a8 <HAL_InitTick>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d039      	beq.n	800584e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e31e      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01e      	beq.n	8005824 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057e6:	f7ff fd9f 	bl	8005328 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057ea:	f7fc f891 	bl	8001910 <HAL_GetTick>
 80057ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057f2:	f7fc f88d 	bl	8001910 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e30b      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005804:	f7ff fdae 	bl	8005364 <LL_RCC_MSI_IsReady>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f1      	beq.n	80057f2 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fdb7 	bl	8005386 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff fddb 	bl	80053d8 <LL_RCC_MSI_SetCalibTrimming>
 8005822:	e015      	b.n	8005850 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005824:	f7ff fd8f 	bl	8005346 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005828:	f7fc f872 	bl	8001910 <HAL_GetTick>
 800582c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005830:	f7fc f86e 	bl	8001910 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e2ec      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005842:	f7ff fd8f 	bl	8005364 <LL_RCC_MSI_IsReady>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f1      	bne.n	8005830 <HAL_RCC_OscConfig+0x124>
 800584c:	e000      	b.n	8005850 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800584e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d04e      	beq.n	80058fa <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800585c:	f7ff fde5 	bl	800542a <LL_RCC_GetSysClkSource>
 8005860:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005862:	f7ff feeb 	bl	800563c <LL_RCC_PLL_GetMainSource>
 8005866:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	2b08      	cmp	r3, #8
 800586c:	d005      	beq.n	800587a <HAL_RCC_OscConfig+0x16e>
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	2b0c      	cmp	r3, #12
 8005872:	d10d      	bne.n	8005890 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2b03      	cmp	r3, #3
 8005878:	d10a      	bne.n	8005890 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800587a:	f7ff fbf5 	bl	8005068 <LL_RCC_HSE_IsReady>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d039      	beq.n	80058f8 <HAL_RCC_OscConfig+0x1ec>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d135      	bne.n	80058f8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e2c5      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005898:	d102      	bne.n	80058a0 <HAL_RCC_OscConfig+0x194>
 800589a:	f7ff fbc7 	bl	800502c <LL_RCC_HSE_Enable>
 800589e:	e001      	b.n	80058a4 <HAL_RCC_OscConfig+0x198>
 80058a0:	f7ff fbd3 	bl	800504a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d012      	beq.n	80058d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ac:	f7fc f830 	bl	8001910 <HAL_GetTick>
 80058b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058b4:	f7fc f82c 	bl	8001910 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b64      	cmp	r3, #100	; 0x64
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e2aa      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80058c6:	f7ff fbcf 	bl	8005068 <LL_RCC_HSE_IsReady>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0f1      	beq.n	80058b4 <HAL_RCC_OscConfig+0x1a8>
 80058d0:	e013      	b.n	80058fa <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d2:	f7fc f81d 	bl	8001910 <HAL_GetTick>
 80058d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058da:	f7fc f819 	bl	8001910 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b64      	cmp	r3, #100	; 0x64
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e297      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80058ec:	f7ff fbbc 	bl	8005068 <LL_RCC_HSE_IsReady>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f1      	bne.n	80058da <HAL_RCC_OscConfig+0x1ce>
 80058f6:	e000      	b.n	80058fa <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f8:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d051      	beq.n	80059aa <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005906:	f7ff fd90 	bl	800542a <LL_RCC_GetSysClkSource>
 800590a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800590c:	f7ff fe96 	bl	800563c <LL_RCC_PLL_GetMainSource>
 8005910:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b04      	cmp	r3, #4
 8005916:	d005      	beq.n	8005924 <HAL_RCC_OscConfig+0x218>
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	2b0c      	cmp	r3, #12
 800591c:	d113      	bne.n	8005946 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2b02      	cmp	r3, #2
 8005922:	d110      	bne.n	8005946 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005924:	f7ff fbd0 	bl	80050c8 <LL_RCC_HSI_IsReady>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_RCC_OscConfig+0x22e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e270      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fbd4 	bl	80050ec <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005944:	e031      	b.n	80059aa <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d019      	beq.n	8005982 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800594e:	f7ff fb9d 	bl	800508c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005952:	f7fb ffdd 	bl	8001910 <HAL_GetTick>
 8005956:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800595a:	f7fb ffd9 	bl	8001910 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e257      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800596c:	f7ff fbac 	bl	80050c8 <LL_RCC_HSI_IsReady>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f1      	beq.n	800595a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff fbb6 	bl	80050ec <LL_RCC_HSI_SetCalibTrimming>
 8005980:	e013      	b.n	80059aa <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005982:	f7ff fb92 	bl	80050aa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005986:	f7fb ffc3 	bl	8001910 <HAL_GetTick>
 800598a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800598e:	f7fb ffbf 	bl	8001910 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e23d      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80059a0:	f7ff fb92 	bl	80050c8 <LL_RCC_HSI_IsReady>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f1      	bne.n	800598e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 80a3 	beq.w	8005b0a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d076      	beq.n	8005aba <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d046      	beq.n	8005a66 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80059d8:	f7ff fc49 	bl	800526e <LL_RCC_LSI1_IsReady>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d113      	bne.n	8005a0a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80059e2:	f7ff fc22 	bl	800522a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059e6:	f7fb ff93 	bl	8001910 <HAL_GetTick>
 80059ea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80059ee:	f7fb ff8f 	bl	8001910 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e20d      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005a00:	f7ff fc35 	bl	800526e <LL_RCC_LSI1_IsReady>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f1      	beq.n	80059ee <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005a0a:	f7ff fc42 	bl	8005292 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0e:	f7fb ff7f 	bl	8001910 <HAL_GetTick>
 8005a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005a14:	e008      	b.n	8005a28 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a16:	f7fb ff7b 	bl	8001910 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e1f9      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005a28:	f7ff fc55 	bl	80052d6 <LL_RCC_LSI2_IsReady>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f1      	beq.n	8005a16 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fc5f 	bl	80052fa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005a3c:	f7ff fc06 	bl	800524c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fb ff66 	bl	8001910 <HAL_GetTick>
 8005a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a48:	f7fb ff62 	bl	8001910 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e1e0      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005a5a:	f7ff fc08 	bl	800526e <LL_RCC_LSI1_IsReady>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1f1      	bne.n	8005a48 <HAL_RCC_OscConfig+0x33c>
 8005a64:	e051      	b.n	8005b0a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005a66:	f7ff fbe0 	bl	800522a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6a:	f7fb ff51 	bl	8001910 <HAL_GetTick>
 8005a6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a72:	f7fb ff4d 	bl	8001910 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e1cb      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005a84:	f7ff fbf3 	bl	800526e <LL_RCC_LSI1_IsReady>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0f1      	beq.n	8005a72 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005a8e:	f7ff fc11 	bl	80052b4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005a92:	e00c      	b.n	8005aae <HAL_RCC_OscConfig+0x3a2>
 8005a94:	20000010 	.word	0x20000010
 8005a98:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a9c:	f7fb ff38 	bl	8001910 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e1b6      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005aae:	f7ff fc12 	bl	80052d6 <LL_RCC_LSI2_IsReady>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1f1      	bne.n	8005a9c <HAL_RCC_OscConfig+0x390>
 8005ab8:	e027      	b.n	8005b0a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005aba:	f7ff fbfb 	bl	80052b4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005abe:	f7fb ff27 	bl	8001910 <HAL_GetTick>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005ac6:	f7fb ff23 	bl	8001910 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e1a1      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005ad8:	f7ff fbfd 	bl	80052d6 <LL_RCC_LSI2_IsReady>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f1      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005ae2:	f7ff fbb3 	bl	800524c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae6:	f7fb ff13 	bl	8001910 <HAL_GetTick>
 8005aea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005aee:	f7fb ff0f 	bl	8001910 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e18d      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005b00:	f7ff fbb5 	bl	800526e <LL_RCC_LSI1_IsReady>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f1      	bne.n	8005aee <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d05b      	beq.n	8005bce <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b16:	4bb5      	ldr	r3, [pc, #724]	; (8005dec <HAL_RCC_OscConfig+0x6e0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d114      	bne.n	8005b4c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005b22:	f7ff fa43 	bl	8004fac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b26:	f7fb fef3 	bl	8001910 <HAL_GetTick>
 8005b2a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b2e:	f7fb feef 	bl	8001910 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e16d      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b40:	4baa      	ldr	r3, [pc, #680]	; (8005dec <HAL_RCC_OscConfig+0x6e0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f0      	beq.n	8005b2e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d102      	bne.n	8005b5a <HAL_RCC_OscConfig+0x44e>
 8005b54:	f7ff fb13 	bl	800517e <LL_RCC_LSE_Enable>
 8005b58:	e00c      	b.n	8005b74 <HAL_RCC_OscConfig+0x468>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b05      	cmp	r3, #5
 8005b60:	d104      	bne.n	8005b6c <HAL_RCC_OscConfig+0x460>
 8005b62:	f7ff fb2e 	bl	80051c2 <LL_RCC_LSE_EnableBypass>
 8005b66:	f7ff fb0a 	bl	800517e <LL_RCC_LSE_Enable>
 8005b6a:	e003      	b.n	8005b74 <HAL_RCC_OscConfig+0x468>
 8005b6c:	f7ff fb18 	bl	80051a0 <LL_RCC_LSE_Disable>
 8005b70:	f7ff fb38 	bl	80051e4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d014      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fb fec8 	bl	8001910 <HAL_GetTick>
 8005b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005b82:	e00a      	b.n	8005b9a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b84:	f7fb fec4 	bl	8001910 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e140      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005b9a:	f7ff fb34 	bl	8005206 <LL_RCC_LSE_IsReady>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0ef      	beq.n	8005b84 <HAL_RCC_OscConfig+0x478>
 8005ba4:	e013      	b.n	8005bce <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba6:	f7fb feb3 	bl	8001910 <HAL_GetTick>
 8005baa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005bac:	e00a      	b.n	8005bc4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bae:	f7fb feaf 	bl	8001910 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e12b      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005bc4:	f7ff fb1f 	bl	8005206 <LL_RCC_LSE_IsReady>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1ef      	bne.n	8005bae <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d02c      	beq.n	8005c34 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d014      	beq.n	8005c0c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005be2:	f7ff fa98 	bl	8005116 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be6:	f7fb fe93 	bl	8001910 <HAL_GetTick>
 8005bea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bee:	f7fb fe8f 	bl	8001910 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e10d      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005c00:	f7ff faab 	bl	800515a <LL_RCC_HSI48_IsReady>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f1      	beq.n	8005bee <HAL_RCC_OscConfig+0x4e2>
 8005c0a:	e013      	b.n	8005c34 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c0c:	f7ff fa94 	bl	8005138 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c10:	f7fb fe7e 	bl	8001910 <HAL_GetTick>
 8005c14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c18:	f7fb fe7a 	bl	8001910 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e0f8      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005c2a:	f7ff fa96 	bl	800515a <LL_RCC_HSI48_IsReady>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1f1      	bne.n	8005c18 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 80ee 	beq.w	8005e1a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c3e:	f7ff fbf4 	bl	800542a <LL_RCC_GetSysClkSource>
 8005c42:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	f040 80af 	bne.w	8005db4 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f003 0203 	and.w	r2, r3, #3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d123      	bne.n	8005cac <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d11c      	bne.n	8005cac <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	0a1b      	lsrs	r3, r3, #8
 8005c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d114      	bne.n	8005cac <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d10d      	bne.n	8005cac <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d106      	bne.n	8005cac <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d05d      	beq.n	8005d68 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	2b0c      	cmp	r3, #12
 8005cb0:	d058      	beq.n	8005d64 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0ab      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005cc4:	f7ff fc74 	bl	80055b0 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005cc8:	f7fb fe22 	bl	8001910 <HAL_GetTick>
 8005ccc:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd0:	f7fb fe1e 	bl	8001910 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e09c      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1ef      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	4b3e      	ldr	r3, [pc, #248]	; (8005df0 <HAL_RCC_OscConfig+0x6e4>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d02:	4311      	orrs	r1, r2
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d08:	0212      	lsls	r2, r2, #8
 8005d0a:	4311      	orrs	r1, r2
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d10:	4311      	orrs	r1, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d16:	4311      	orrs	r1, r2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005d26:	f7ff fc34 	bl	8005592 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d38:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d3a:	f7fb fde9 	bl	8001910 <HAL_GetTick>
 8005d3e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d40:	e008      	b.n	8005d54 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d42:	f7fb fde5 	bl	8001910 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e063      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0ef      	beq.n	8005d42 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d62:	e05a      	b.n	8005e1a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e059      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d151      	bne.n	8005e1a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d76:	f7ff fc0c 	bl	8005592 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d88:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d8a:	f7fb fdc1 	bl	8001910 <HAL_GetTick>
 8005d8e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d90:	e008      	b.n	8005da4 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d92:	f7fb fdbd 	bl	8001910 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e03b      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0ef      	beq.n	8005d92 <HAL_RCC_OscConfig+0x686>
 8005db2:	e032      	b.n	8005e1a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b0c      	cmp	r3, #12
 8005db8:	d02d      	beq.n	8005e16 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dba:	f7ff fbf9 	bl	80055b0 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dc8:	f023 0303 	bic.w	r3, r3, #3
 8005dcc:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de2:	f7fb fd95 	bl	8001910 <HAL_GetTick>
 8005de6:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005de8:	e00d      	b.n	8005e06 <HAL_RCC_OscConfig+0x6fa>
 8005dea:	bf00      	nop
 8005dec:	58000400 	.word	0x58000400
 8005df0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df4:	f7fb fd8c 	bl	8001910 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e00a      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1ef      	bne.n	8005df4 <HAL_RCC_OscConfig+0x6e8>
 8005e14:	e001      	b.n	8005e1a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3734      	adds	r7, #52	; 0x34
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd90      	pop	{r4, r7, pc}

08005e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e12d      	b.n	8006094 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e38:	4b98      	ldr	r3, [pc, #608]	; (800609c <HAL_RCC_ClockConfig+0x278>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d91b      	bls.n	8005e7e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e46:	4b95      	ldr	r3, [pc, #596]	; (800609c <HAL_RCC_ClockConfig+0x278>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f023 0207 	bic.w	r2, r3, #7
 8005e4e:	4993      	ldr	r1, [pc, #588]	; (800609c <HAL_RCC_ClockConfig+0x278>)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e56:	f7fb fd5b 	bl	8001910 <HAL_GetTick>
 8005e5a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e5e:	f7fb fd57 	bl	8001910 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e111      	b.n	8006094 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e70:	4b8a      	ldr	r3, [pc, #552]	; (800609c <HAL_RCC_ClockConfig+0x278>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d1ef      	bne.n	8005e5e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d016      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff fad7 	bl	8005442 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e94:	f7fb fd3c 	bl	8001910 <HAL_GetTick>
 8005e98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e9c:	f7fb fd38 	bl	8001910 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e0f2      	b.n	8006094 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005eae:	f7ff fbd1 	bl	8005654 <LL_RCC_IsActiveFlag_HPRE>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0f1      	beq.n	8005e9c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d016      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff face 	bl	800546a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ece:	f7fb fd1f 	bl	8001910 <HAL_GetTick>
 8005ed2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ed6:	f7fb fd1b 	bl	8001910 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e0d5      	b.n	8006094 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005ee8:	f7ff fbc6 	bl	8005678 <LL_RCC_IsActiveFlag_C2HPRE>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0f1      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d016      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff fac7 	bl	8005496 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f08:	f7fb fd02 	bl	8001910 <HAL_GetTick>
 8005f0c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f10:	f7fb fcfe 	bl	8001910 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e0b8      	b.n	8006094 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005f22:	f7ff fbbc 	bl	800569e <LL_RCC_IsActiveFlag_SHDHPRE>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f1      	beq.n	8005f10 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d016      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff fac1 	bl	80054c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f42:	f7fb fce5 	bl	8001910 <HAL_GetTick>
 8005f46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005f48:	e008      	b.n	8005f5c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f4a:	f7fb fce1 	bl	8001910 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e09b      	b.n	8006094 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005f5c:	f7ff fbb2 	bl	80056c4 <LL_RCC_IsActiveFlag_PPRE1>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0f1      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d017      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fab7 	bl	80054ec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f7e:	f7fb fcc7 	bl	8001910 <HAL_GetTick>
 8005f82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f86:	f7fb fcc3 	bl	8001910 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e07d      	b.n	8006094 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005f98:	f7ff fba6 	bl	80056e8 <LL_RCC_IsActiveFlag_PPRE2>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f1      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d043      	beq.n	8006036 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d106      	bne.n	8005fc4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005fb6:	f7ff f857 	bl	8005068 <LL_RCC_HSE_IsReady>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d11e      	bne.n	8005ffe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e067      	b.n	8006094 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d106      	bne.n	8005fda <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005fcc:	f7ff faff 	bl	80055ce <LL_RCC_PLL_IsReady>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d113      	bne.n	8005ffe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e05c      	b.n	8006094 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005fe2:	f7ff f9bf 	bl	8005364 <LL_RCC_MSI_IsReady>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d108      	bne.n	8005ffe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e051      	b.n	8006094 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005ff0:	f7ff f86a 	bl	80050c8 <LL_RCC_HSI_IsReady>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e04a      	b.n	8006094 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff f9fd 	bl	8005402 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006008:	f7fb fc82 	bl	8001910 <HAL_GetTick>
 800600c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800600e:	e00a      	b.n	8006026 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006010:	f7fb fc7e 	bl	8001910 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	f241 3288 	movw	r2, #5000	; 0x1388
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e036      	b.n	8006094 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006026:	f7ff fa00 	bl	800542a <LL_RCC_GetSysClkSource>
 800602a:	4602      	mov	r2, r0
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	429a      	cmp	r2, r3
 8006034:	d1ec      	bne.n	8006010 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006036:	4b19      	ldr	r3, [pc, #100]	; (800609c <HAL_RCC_ClockConfig+0x278>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d21b      	bcs.n	800607c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006044:	4b15      	ldr	r3, [pc, #84]	; (800609c <HAL_RCC_ClockConfig+0x278>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f023 0207 	bic.w	r2, r3, #7
 800604c:	4913      	ldr	r1, [pc, #76]	; (800609c <HAL_RCC_ClockConfig+0x278>)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	4313      	orrs	r3, r2
 8006052:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006054:	f7fb fc5c 	bl	8001910 <HAL_GetTick>
 8006058:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800605a:	e008      	b.n	800606e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800605c:	f7fb fc58 	bl	8001910 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e012      	b.n	8006094 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800606e:	4b0b      	ldr	r3, [pc, #44]	; (800609c <HAL_RCC_ClockConfig+0x278>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d1ef      	bne.n	800605c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800607c:	f000 f87e 	bl	800617c <HAL_RCC_GetHCLKFreq>
 8006080:	4603      	mov	r3, r0
 8006082:	4a07      	ldr	r2, [pc, #28]	; (80060a0 <HAL_RCC_ClockConfig+0x27c>)
 8006084:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006086:	f7fb fc4f 	bl	8001928 <HAL_GetTickPrio>
 800608a:	4603      	mov	r3, r0
 800608c:	4618      	mov	r0, r3
 800608e:	f7fb fa0b 	bl	80014a8 <HAL_InitTick>
 8006092:	4603      	mov	r3, r0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	58004000 	.word	0x58004000
 80060a0:	20000010 	.word	0x20000010

080060a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a4:	b590      	push	{r4, r7, lr}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060aa:	f7ff f9be 	bl	800542a <LL_RCC_GetSysClkSource>
 80060ae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10a      	bne.n	80060cc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80060b6:	f7ff f97a 	bl	80053ae <LL_RCC_MSI_GetRange>
 80060ba:	4603      	mov	r3, r0
 80060bc:	091b      	lsrs	r3, r3, #4
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	4a2b      	ldr	r2, [pc, #172]	; (8006170 <HAL_RCC_GetSysClockFreq+0xcc>)
 80060c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	e04b      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d102      	bne.n	80060d8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060d2:	4b28      	ldr	r3, [pc, #160]	; (8006174 <HAL_RCC_GetSysClockFreq+0xd0>)
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e045      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b08      	cmp	r3, #8
 80060dc:	d10a      	bne.n	80060f4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80060de:	f7fe ff93 	bl	8005008 <LL_RCC_HSE_IsEnabledDiv2>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d102      	bne.n	80060ee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80060e8:	4b22      	ldr	r3, [pc, #136]	; (8006174 <HAL_RCC_GetSysClockFreq+0xd0>)
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e03a      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80060ee:	4b22      	ldr	r3, [pc, #136]	; (8006178 <HAL_RCC_GetSysClockFreq+0xd4>)
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	e037      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80060f4:	f7ff faa2 	bl	800563c <LL_RCC_PLL_GetMainSource>
 80060f8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d003      	beq.n	8006108 <HAL_RCC_GetSysClockFreq+0x64>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b03      	cmp	r3, #3
 8006104:	d003      	beq.n	800610e <HAL_RCC_GetSysClockFreq+0x6a>
 8006106:	e00d      	b.n	8006124 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006108:	4b1a      	ldr	r3, [pc, #104]	; (8006174 <HAL_RCC_GetSysClockFreq+0xd0>)
 800610a:	60bb      	str	r3, [r7, #8]
        break;
 800610c:	e015      	b.n	800613a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800610e:	f7fe ff7b 	bl	8005008 <LL_RCC_HSE_IsEnabledDiv2>
 8006112:	4603      	mov	r3, r0
 8006114:	2b01      	cmp	r3, #1
 8006116:	d102      	bne.n	800611e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006118:	4b16      	ldr	r3, [pc, #88]	; (8006174 <HAL_RCC_GetSysClockFreq+0xd0>)
 800611a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800611c:	e00d      	b.n	800613a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800611e:	4b16      	ldr	r3, [pc, #88]	; (8006178 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006120:	60bb      	str	r3, [r7, #8]
        break;
 8006122:	e00a      	b.n	800613a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006124:	f7ff f943 	bl	80053ae <LL_RCC_MSI_GetRange>
 8006128:	4603      	mov	r3, r0
 800612a:	091b      	lsrs	r3, r3, #4
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	4a0f      	ldr	r2, [pc, #60]	; (8006170 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006136:	60bb      	str	r3, [r7, #8]
        break;
 8006138:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800613a:	f7ff fa5a 	bl	80055f2 <LL_RCC_PLL_GetN>
 800613e:	4602      	mov	r2, r0
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	fb03 f402 	mul.w	r4, r3, r2
 8006146:	f7ff fa6d 	bl	8005624 <LL_RCC_PLL_GetDivider>
 800614a:	4603      	mov	r3, r0
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	3301      	adds	r3, #1
 8006150:	fbb4 f4f3 	udiv	r4, r4, r3
 8006154:	f7ff fa5a 	bl	800560c <LL_RCC_PLL_GetR>
 8006158:	4603      	mov	r3, r0
 800615a:	0f5b      	lsrs	r3, r3, #29
 800615c:	3301      	adds	r3, #1
 800615e:	fbb4 f3f3 	udiv	r3, r4, r3
 8006162:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006164:	68fb      	ldr	r3, [r7, #12]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	bd90      	pop	{r4, r7, pc}
 800616e:	bf00      	nop
 8006170:	0801100c 	.word	0x0801100c
 8006174:	00f42400 	.word	0x00f42400
 8006178:	01e84800 	.word	0x01e84800

0800617c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800617c:	b598      	push	{r3, r4, r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006180:	f7ff ff90 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 8006184:	4604      	mov	r4, r0
 8006186:	f7ff f9c5 	bl	8005514 <LL_RCC_GetAHBPrescaler>
 800618a:	4603      	mov	r3, r0
 800618c:	091b      	lsrs	r3, r3, #4
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	4a03      	ldr	r2, [pc, #12]	; (80061a0 <HAL_RCC_GetHCLKFreq+0x24>)
 8006194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006198:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800619c:	4618      	mov	r0, r3
 800619e:	bd98      	pop	{r3, r4, r7, pc}
 80061a0:	08010fac 	.word	0x08010fac

080061a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061a4:	b598      	push	{r3, r4, r7, lr}
 80061a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80061a8:	f7ff ffe8 	bl	800617c <HAL_RCC_GetHCLKFreq>
 80061ac:	4604      	mov	r4, r0
 80061ae:	f7ff f9e4 	bl	800557a <LL_RCC_GetAPB2Prescaler>
 80061b2:	4603      	mov	r3, r0
 80061b4:	0adb      	lsrs	r3, r3, #11
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	4a04      	ldr	r2, [pc, #16]	; (80061cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80061bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	bd98      	pop	{r3, r4, r7, pc}
 80061cc:	08010fec 	.word	0x08010fec

080061d0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	226f      	movs	r2, #111	; 0x6f
 80061de:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80061e0:	f7ff f923 	bl	800542a <LL_RCC_GetSysClkSource>
 80061e4:	4602      	mov	r2, r0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80061ea:	f7ff f993 	bl	8005514 <LL_RCC_GetAHBPrescaler>
 80061ee:	4602      	mov	r2, r0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80061f4:	f7ff f9b5 	bl	8005562 <LL_RCC_GetAPB1Prescaler>
 80061f8:	4602      	mov	r2, r0
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80061fe:	f7ff f9bc 	bl	800557a <LL_RCC_GetAPB2Prescaler>
 8006202:	4602      	mov	r2, r0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006208:	f7ff f990 	bl	800552c <LL_C2_RCC_GetAHBPrescaler>
 800620c:	4602      	mov	r2, r0
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8006212:	f7ff f998 	bl	8005546 <LL_RCC_GetAHB4Prescaler>
 8006216:	4602      	mov	r2, r0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800621c:	4b04      	ldr	r3, [pc, #16]	; (8006230 <HAL_RCC_GetClockConfig+0x60>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0207 	and.w	r2, r3, #7
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	601a      	str	r2, [r3, #0]
}
 8006228:	bf00      	nop
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	58004000 	.word	0x58004000

08006234 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006234:	b590      	push	{r4, r7, lr}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2bb0      	cmp	r3, #176	; 0xb0
 8006240:	d903      	bls.n	800624a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006242:	4b15      	ldr	r3, [pc, #84]	; (8006298 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	e007      	b.n	800625a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	4a11      	ldr	r2, [pc, #68]	; (8006298 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006258:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800625a:	f7ff f974 	bl	8005546 <LL_RCC_GetAHB4Prescaler>
 800625e:	4603      	mov	r3, r0
 8006260:	091b      	lsrs	r3, r3, #4
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	4a0d      	ldr	r2, [pc, #52]	; (800629c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006272:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4a0a      	ldr	r2, [pc, #40]	; (80062a0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	0c9c      	lsrs	r4, r3, #18
 800627e:	f7fe fea5 	bl	8004fcc <HAL_PWREx_GetVoltageRange>
 8006282:	4603      	mov	r3, r0
 8006284:	4619      	mov	r1, r3
 8006286:	4620      	mov	r0, r4
 8006288:	f000 f80c 	bl	80062a4 <RCC_SetFlashLatency>
 800628c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	bd90      	pop	{r4, r7, pc}
 8006296:	bf00      	nop
 8006298:	0801100c 	.word	0x0801100c
 800629c:	08010fac 	.word	0x08010fac
 80062a0:	431bde83 	.word	0x431bde83

080062a4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80062a4:	b590      	push	{r4, r7, lr}
 80062a6:	b093      	sub	sp, #76	; 0x4c
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80062ae:	4b39      	ldr	r3, [pc, #228]	; (8006394 <RCC_SetFlashLatency+0xf0>)
 80062b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80062b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80062ba:	4a37      	ldr	r2, [pc, #220]	; (8006398 <RCC_SetFlashLatency+0xf4>)
 80062bc:	f107 031c 	add.w	r3, r7, #28
 80062c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80062c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80062c6:	4b35      	ldr	r3, [pc, #212]	; (800639c <RCC_SetFlashLatency+0xf8>)
 80062c8:	f107 040c 	add.w	r4, r7, #12
 80062cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80062d2:	2300      	movs	r3, #0
 80062d4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062dc:	d11c      	bne.n	8006318 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80062de:	2300      	movs	r3, #0
 80062e0:	643b      	str	r3, [r7, #64]	; 0x40
 80062e2:	e015      	b.n	8006310 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80062e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062ec:	4413      	add	r3, r2
 80062ee:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d808      	bhi.n	800630a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80062f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006300:	4413      	add	r3, r2
 8006302:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006306:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006308:	e022      	b.n	8006350 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800630a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630c:	3301      	adds	r3, #1
 800630e:	643b      	str	r3, [r7, #64]	; 0x40
 8006310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006312:	2b03      	cmp	r3, #3
 8006314:	d9e6      	bls.n	80062e4 <RCC_SetFlashLatency+0x40>
 8006316:	e01b      	b.n	8006350 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006318:	2300      	movs	r3, #0
 800631a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800631c:	e015      	b.n	800634a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800631e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006326:	4413      	add	r3, r2
 8006328:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	429a      	cmp	r2, r3
 8006330:	d808      	bhi.n	8006344 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800633a:	4413      	add	r3, r2
 800633c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006340:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006342:	e005      	b.n	8006350 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006346:	3301      	adds	r3, #1
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800634a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634c:	2b02      	cmp	r3, #2
 800634e:	d9e6      	bls.n	800631e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006350:	4b13      	ldr	r3, [pc, #76]	; (80063a0 <RCC_SetFlashLatency+0xfc>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f023 0207 	bic.w	r2, r3, #7
 8006358:	4911      	ldr	r1, [pc, #68]	; (80063a0 <RCC_SetFlashLatency+0xfc>)
 800635a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800635c:	4313      	orrs	r3, r2
 800635e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006360:	f7fb fad6 	bl	8001910 <HAL_GetTick>
 8006364:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006366:	e008      	b.n	800637a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006368:	f7fb fad2 	bl	8001910 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d901      	bls.n	800637a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e007      	b.n	800638a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <RCC_SetFlashLatency+0xfc>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006384:	429a      	cmp	r2, r3
 8006386:	d1ef      	bne.n	8006368 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	374c      	adds	r7, #76	; 0x4c
 800638e:	46bd      	mov	sp, r7
 8006390:	bd90      	pop	{r4, r7, pc}
 8006392:	bf00      	nop
 8006394:	08010e90 	.word	0x08010e90
 8006398:	08010ea0 	.word	0x08010ea0
 800639c:	08010eac 	.word	0x08010eac
 80063a0:	58004000 	.word	0x58004000

080063a4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80063a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b6:	d101      	bne.n	80063bc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e000      	b.n	80063be <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <LL_RCC_HSE_IsReady>:
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80063cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063da:	d101      	bne.n	80063e0 <LL_RCC_HSE_IsReady+0x18>
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <LL_RCC_HSE_IsReady+0x1a>
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <LL_RCC_HSI_IsReady>:
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80063f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fe:	d101      	bne.n	8006404 <LL_RCC_HSI_IsReady+0x18>
 8006400:	2301      	movs	r3, #1
 8006402:	e000      	b.n	8006406 <LL_RCC_HSI_IsReady+0x1a>
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <LL_RCC_HSI48_IsReady>:
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b02      	cmp	r3, #2
 8006422:	d101      	bne.n	8006428 <LL_RCC_HSI48_IsReady+0x18>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <LL_RCC_HSI48_IsReady+0x1a>
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <LL_RCC_LSE_IsEnabled>:
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800643c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <LL_RCC_LSE_IsEnabled+0x18>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <LL_RCC_LSE_IsEnabled+0x1a>
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <LL_RCC_LSE_IsReady>:
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800645c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b02      	cmp	r3, #2
 800646a:	d101      	bne.n	8006470 <LL_RCC_LSE_IsReady+0x18>
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <LL_RCC_LSE_IsReady+0x1a>
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <LL_RCC_LSI1_IsReady>:
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b02      	cmp	r3, #2
 800648e:	d101      	bne.n	8006494 <LL_RCC_LSI1_IsReady+0x18>
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <LL_RCC_LSI1_IsReady+0x1a>
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <LL_RCC_LSI2_IsReady>:
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80064a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d101      	bne.n	80064b8 <LL_RCC_LSI2_IsReady+0x18>
 80064b4:	2301      	movs	r3, #1
 80064b6:	e000      	b.n	80064ba <LL_RCC_LSI2_IsReady+0x1a>
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <LL_RCC_MSI_IsReady>:
{
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80064c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d101      	bne.n	80064da <LL_RCC_MSI_IsReady+0x16>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <LL_RCC_MSI_IsReady+0x18>
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <LL_RCC_MSI_EnablePLLMode>:
{
 80064e6:	b480      	push	{r7}
 80064e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80064ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064f4:	f043 0304 	orr.w	r3, r3, #4
 80064f8:	6013      	str	r3, [r2, #0]
}
 80064fa:	bf00      	nop
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <LL_RCC_MSI_GetRange>:
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800650a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006514:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2bb0      	cmp	r3, #176	; 0xb0
 800651a:	d901      	bls.n	8006520 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800651c:	23b0      	movs	r3, #176	; 0xb0
 800651e:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006520:	687b      	ldr	r3, [r7, #4]
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <LL_RCC_SetRFWKPClockSource>:
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800653a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800653e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <LL_RCC_GetRFWKPClockSource>:
{
 800655a:	b480      	push	{r7}
 800655c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 800655e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006566:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800656a:	4618      	mov	r0, r3
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <LL_RCC_GetAHBPrescaler>:
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006582:	4618      	mov	r0, r3
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <LL_RCC_GetAPB1Prescaler>:
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800659a:	4618      	mov	r0, r3
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <LL_RCC_GetAPB2Prescaler>:
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80065a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <LL_RCC_SetSMPSClockSource>:
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80065c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	f023 0203 	bic.w	r2, r3, #3
 80065ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <LL_RCC_GetSMPSClockSource>:
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 80065e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <LL_RCC_SetSMPSPrescaler>:
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800660e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4313      	orrs	r3, r2
 8006616:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <LL_RCC_GetSMPSPrescaler>:
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 8006628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	f003 0330 	and.w	r3, r3, #48	; 0x30
}
 8006632:	4618      	mov	r0, r3
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <LL_RCC_SetUSARTClockSource>:
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664c:	f023 0203 	bic.w	r2, r3, #3
 8006650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4313      	orrs	r3, r2
 8006658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <LL_RCC_SetLPUARTClockSource>:
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006678:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800667c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <LL_RCC_SetI2CClockSource>:
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800669c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	091b      	lsrs	r3, r3, #4
 80066a8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80066ac:	43db      	mvns	r3, r3
 80066ae:	401a      	ands	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80066b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <LL_RCC_SetLPTIMClockSource>:
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80066d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	0c1b      	lsrs	r3, r3, #16
 80066e2:	041b      	lsls	r3, r3, #16
 80066e4:	43db      	mvns	r3, r3
 80066e6:	401a      	ands	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	041b      	lsls	r3, r3, #16
 80066ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066f0:	4313      	orrs	r3, r2
 80066f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066f6:	bf00      	nop
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <LL_RCC_SetSAIClockSource>:
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800670a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006712:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <LL_RCC_SetRNGClockSource>:
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006742:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4313      	orrs	r3, r2
 800674a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <LL_RCC_SetCLK48ClockSource>:
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800676e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4313      	orrs	r3, r2
 8006776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <LL_RCC_SetUSBClockSource>:
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b082      	sub	sp, #8
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff ffe3 	bl	800675a <LL_RCC_SetCLK48ClockSource>
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <LL_RCC_SetADCClockSource>:
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80067a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <LL_RCC_GetUSARTClockSource>:
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80067d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4013      	ands	r3, r2
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <LL_RCC_GetLPUARTClockSource>:
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80067f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4013      	ands	r3, r2
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <LL_RCC_GetI2CClockSource>:
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8006810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006814:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4013      	ands	r3, r2
 800681c:	091a      	lsrs	r2, r3, #4
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	4313      	orrs	r3, r2
}
 8006824:	4618      	mov	r0, r3
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <LL_RCC_GetLPTIMClockSource>:
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8006838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800683c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4013      	ands	r3, r2
 8006844:	0c1a      	lsrs	r2, r3, #16
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4313      	orrs	r3, r2
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <LL_RCC_GetSAIClockSource>:
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 800685e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006862:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4013      	ands	r3, r2
}
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <LL_RCC_GetRNGClockSource>:
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 800687e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006882:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4013      	ands	r3, r2
}
 800688a:	4618      	mov	r0, r3
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <LL_RCC_GetCLK48ClockSource>:
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 800689e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4013      	ands	r3, r2
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <LL_RCC_GetUSBClockSource>:
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b082      	sub	sp, #8
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff ffe9 	bl	8006896 <LL_RCC_GetCLK48ClockSource>
 80068c4:	4603      	mov	r3, r0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <LL_RCC_GetADCClockSource>:
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 80068d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4013      	ands	r3, r2
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <LL_RCC_SetRTCClockSource>:
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80068f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4313      	orrs	r3, r2
 800690a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <LL_RCC_GetRTCClockSource>:
{
 800691a:	b480      	push	{r7}
 800691c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800691e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006926:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800692a:	4618      	mov	r0, r3
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <LL_RCC_ForceBackupDomainReset>:
{
 8006934:	b480      	push	{r7}
 8006936:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800693c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800694c:	bf00      	nop
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006956:	b480      	push	{r7}
 8006958:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800695a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800695e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800696a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800696e:	bf00      	nop
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <LL_RCC_PLL_IsReady>:
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800697c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800698a:	d101      	bne.n	8006990 <LL_RCC_PLL_IsReady+0x18>
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <LL_RCC_PLL_IsReady+0x1a>
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <LL_RCC_PLL_GetN>:
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80069a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	0a1b      	lsrs	r3, r3, #8
 80069a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <LL_RCC_PLL_GetP>:
{
 80069b6:	b480      	push	{r7}
 80069b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80069ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <LL_RCC_PLL_GetQ>:
{
 80069ce:	b480      	push	{r7}
 80069d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 80069d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 80069dc:	4618      	mov	r0, r3
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <LL_RCC_PLL_GetDivider>:
{
 80069e6:	b480      	push	{r7}
 80069e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80069ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <LL_RCC_PLLSAI1_Enable>:
{
 80069fe:	b480      	push	{r7}
 8006a00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a10:	6013      	str	r3, [r2, #0]
}
 8006a12:	bf00      	nop
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <LL_RCC_PLLSAI1_Disable>:
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a2e:	6013      	str	r3, [r2, #0]
}
 8006a30:	bf00      	nop
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <LL_RCC_PLLSAI1_IsReady>:
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a4c:	d101      	bne.n	8006a52 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <LL_RCC_PLLSAI1_GetN>:
{
 8006a5e:	b480      	push	{r7}
 8006a60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8006a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	0a1b      	lsrs	r3, r3, #8
 8006a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <LL_RCC_PLLSAI1_GetP>:
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8006a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <LL_RCC_PLLSAI1_GetQ>:
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8006a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <LL_RCC_PLLSAI1_GetR>:
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8006aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <LL_RCC_PLL_GetMainSource>:
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f003 0303 	and.w	r3, r3, #3
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d034      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006afc:	d021      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006afe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006b02:	d81b      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b08:	d01d      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006b0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b0e:	d815      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00b      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b18:	d110      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b28:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006b2a:	e00d      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fd64 	bl	80075fe <RCCEx_PLLSAI1_ConfigNP>
 8006b36:	4603      	mov	r3, r0
 8006b38:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006b3a:	e005      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	77fb      	strb	r3, [r7, #31]
        break;
 8006b40:	e002      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006b42:	bf00      	nop
 8006b44:	e000      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b48:	7ffb      	ldrb	r3, [r7, #31]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d105      	bne.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fdd5 	bl	8006702 <LL_RCC_SetSAIClockSource>
 8006b58:	e001      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5a:	7ffb      	ldrb	r3, [r7, #31]
 8006b5c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d046      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006b6a:	f7ff fed6 	bl	800691a <LL_RCC_GetRTCClockSource>
 8006b6e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d03c      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006b7a:	f7fe fa17 	bl	8004fac <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d105      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff feb0 	bl	80068ee <LL_RCC_SetRTCClockSource>
 8006b8e:	e02e      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b98:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006b9a:	f7ff fecb 	bl	8006934 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006b9e:	f7ff feda 	bl	8006956 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006bba:	f7ff fc3b 	bl	8006434 <LL_RCC_LSE_IsEnabled>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d114      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bc4:	f7fa fea4 	bl	8001910 <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006bca:	e00b      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bcc:	f7fa fea0 	bl	8001910 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d902      	bls.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	77fb      	strb	r3, [r7, #31]
              break;
 8006be2:	e004      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006be4:	f7ff fc38 	bl	8006458 <LL_RCC_LSE_IsReady>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d1ee      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006bee:	7ffb      	ldrb	r3, [r7, #31]
 8006bf0:	77bb      	strb	r3, [r7, #30]
 8006bf2:	e001      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf4:	7ffb      	ldrb	r3, [r7, #31]
 8006bf6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d004      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff fd17 	bl	800663c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d004      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fd22 	bl	8006668 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0310 	and.w	r3, r3, #16
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff fd4a 	bl	80066ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d004      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7ff fd3f 	bl	80066ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff fd17 	bl	8006694 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0308 	and.w	r3, r3, #8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d004      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fd0c 	bl	8006694 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d022      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff fd7a 	bl	8006786 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c9a:	d107      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006caa:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cb4:	d10b      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3304      	adds	r3, #4
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fcfa 	bl	80076b4 <RCCEx_PLLSAI1_ConfigNQ>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8006cc4:	7ffb      	ldrb	r3, [r7, #31]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8006cca:	7ffb      	ldrb	r3, [r7, #31]
 8006ccc:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d02b      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce2:	d008      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cec:	d003      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d105      	bne.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fd17 	bl	800672e <LL_RCC_SetRNGClockSource>
 8006d00:	e00a      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	f7ff fd0e 	bl	800672e <LL_RCC_SetRNGClockSource>
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f7ff fd21 	bl	800675a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006d20:	d107      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d30:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d022      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff fd2a 	bl	800679c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d50:	d107      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d60:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d6a:	d10b      	bne.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fcfa 	bl	800776a <RCCEx_PLLSAI1_ConfigNR>
 8006d76:	4603      	mov	r3, r0
 8006d78:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8006d7a:	7ffb      	ldrb	r3, [r7, #31]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8006d80:	7ffb      	ldrb	r3, [r7, #31]
 8006d82:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d004      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff fbca 	bl	800652e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7ff fc26 	bl	80065fc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff fc01 	bl	80065bc <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8006dba:	7fbb      	ldrb	r3, [r7, #30]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3720      	adds	r7, #32
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006dc4:	b590      	push	{r4, r7, lr}
 8006dc6:	b093      	sub	sp, #76	; 0x4c
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	647b      	str	r3, [r7, #68]	; 0x44
  
#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 8006dd0:	f7ff fc28 	bl	8006624 <LL_RCC_GetSMPSPrescaler>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	091b      	lsrs	r3, r3, #4
 8006dd8:	643b      	str	r3, [r7, #64]	; 0x40
#endif
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de0:	d12d      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 8006de2:	f7ff fd9a 	bl	800691a <LL_RCC_GetRTCClockSource>
 8006de6:	6138      	str	r0, [r7, #16]
    
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dee:	d109      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8006df0:	f7ff fb32 	bl	8006458 <LL_RCC_LSE_IsReady>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	f040 83d8 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8006dfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e00:	647b      	str	r3, [r7, #68]	; 0x44
 8006e02:	e3d3      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e0a:	d110      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8006e0c:	f7ff fb36 	bl	800647c <LL_RCC_LSI1_IsReady>
 8006e10:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8006e12:	f7ff fb45 	bl	80064a0 <LL_RCC_LSI2_IsReady>
 8006e16:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d003      	beq.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	f040 83c3 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8006e26:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e2c:	e3be      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e34:	f040 83ba 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 32U;
 8006e38:	4bba      	ldr	r3, [pc, #744]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8006e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e3c:	e3b6      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b40      	cmp	r3, #64	; 0x40
 8006e42:	d130      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 8006e44:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8006e48:	f7ff fd05 	bl	8006856 <LL_RCC_GetSAIClockSource>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e52:	d008      	beq.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8006e54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e58:	d822      	bhi.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00c      	beq.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8006e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e62:	d013      	beq.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8006e64:	e01c      	b.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
    case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
      if (LL_RCC_HSI_IsReady() == 1U)
 8006e66:	f7ff fac1 	bl	80063ec <LL_RCC_HSI_IsReady>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	f040 837e 	bne.w	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      {
        frequency = HSI_VALUE;
 8006e72:	4bad      	ldr	r3, [pc, #692]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8006e74:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8006e76:	e37a      	b.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      
#if defined(SAI1)
    case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8006e78:	f7ff fddf 	bl	8006a3a <LL_RCC_PLLSAI1_IsReady>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	f040 8377 	bne.w	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_P();
 8006e84:	f000 fdce 	bl	8007a24 <RCC_PLLSAI1_GetFreqDomain_P>
 8006e88:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8006e8a:	e372      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
#endif
      
    case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8006e8c:	f7ff fd74 	bl	8006978 <LL_RCC_PLL_IsReady>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	f040 836f 	bne.w	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      {
        frequency = RCC_PLL_GetFreqDomain_P();
 8006e98:	f000 fcc2 	bl	8007820 <RCC_PLL_GetFreqDomain_P>
 8006e9c:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8006e9e:	e36a      	b.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      
    default: /* External input clock used as SAI1 clock source */
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006ea0:	4ba2      	ldr	r3, [pc, #648]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8006ea2:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8006ea4:	e382      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eac:	d168      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 8006eae:	f000 fb87 	bl	80075c0 <HAL_RCCEx_GetRngCLKSource>
 8006eb2:	61f8      	str	r0, [r7, #28]
    
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eba:	d110      	bne.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8006ebc:	f7ff fade 	bl	800647c <LL_RCC_LSI1_IsReady>
 8006ec0:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8006ec2:	f7ff faed 	bl	80064a0 <LL_RCC_LSI2_IsReady>
 8006ec6:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d003      	beq.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	f040 836b 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8006ed6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006eda:	647b      	str	r3, [r7, #68]	; 0x44
 8006edc:	e366      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ee4:	d109      	bne.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8006ee6:	f7ff fab7 	bl	8006458 <LL_RCC_LSE_IsReady>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	f040 835d 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8006ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ef8:	e358      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006f00:	d10e      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 8006f02:	f7ff fd39 	bl	8006978 <LL_RCC_PLL_IsReady>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	f040 834f 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 8006f0e:	f000 fcdd 	bl	80078cc <RCC_PLL_GetFreqDomain_Q>
 8006f12:	4603      	mov	r3, r0
 8006f14:	4a86      	ldr	r2, [pc, #536]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006f16:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f1e:	e345      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 8006f26:	d114      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 8006f28:	f7ff facc 	bl	80064c4 <LL_RCC_MSI_IsReady>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	f040 833c 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 8006f34:	f7ff fae6 	bl	8006504 <LL_RCC_MSI_GetRange>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	091b      	lsrs	r3, r3, #4
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	4a7c      	ldr	r2, [pc, #496]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8006f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f46:	4a7a      	ldr	r2, [pc, #488]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006f48:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f50:	e32c      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 8006f58:	d109      	bne.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8006f5a:	f7ff fd6e 	bl	8006a3a <LL_RCC_PLLSAI1_IsReady>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	f040 8323 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8006f66:	f000 fdb3 	bl	8007ad0 <RCC_PLLSAI1_GetFreqDomain_Q>
 8006f6a:	6478      	str	r0, [r7, #68]	; 0x44
 8006f6c:	e31e      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 8006f6e:	f7ff fa4f 	bl	8006410 <LL_RCC_HSI48_IsReady>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	f040 8319 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI48_VALUE / 3U;
 8006f7a:	4b6b      	ldr	r3, [pc, #428]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8006f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f7e:	e315      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      /* Nothing to do as frequency already initialized to 0U */
#endif
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f86:	d13f      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 8006f88:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 8006f8c:	f7ff fc93 	bl	80068b6 <LL_RCC_GetUSBClockSource>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f96:	d01d      	beq.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8006f98:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f9c:	d82b      	bhi.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 8006f9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fa2:	d003      	beq.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8006fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fa8:	d00a      	beq.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006faa:	e024      	b.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
    case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8006fac:	f7ff fd45 	bl	8006a3a <LL_RCC_PLLSAI1_IsReady>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	f040 82e1 	bne.w	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8006fb8:	f000 fd8a 	bl	8007ad0 <RCC_PLLSAI1_GetFreqDomain_Q>
 8006fbc:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8006fbe:	e2dc      	b.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
#endif
      
    case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8006fc0:	f7ff fcda 	bl	8006978 <LL_RCC_PLL_IsReady>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	f040 82d9 	bne.w	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      {
        frequency = RCC_PLL_GetFreqDomain_Q();
 8006fcc:	f000 fc7e 	bl	80078cc <RCC_PLL_GetFreqDomain_Q>
 8006fd0:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8006fd2:	e2d4      	b.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      
    case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
      if (LL_RCC_MSI_IsReady() == 1U)
 8006fd4:	f7ff fa76 	bl	80064c4 <LL_RCC_MSI_IsReady>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	f040 82d1 	bne.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006fe0:	f7ff fa90 	bl	8006504 <LL_RCC_MSI_GetRange>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	091b      	lsrs	r3, r3, #4
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	4a51      	ldr	r2, [pc, #324]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8006fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff2:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8006ff4:	e2c5      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      
    default: /* HSI48 clock used as USB clock source */
      if (LL_RCC_HSI48_IsReady() == 1U)
 8006ff6:	f7ff fa0b 	bl	8006410 <LL_RCC_HSI48_IsReady>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	f040 82c2 	bne.w	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
      {
        frequency = HSI48_VALUE;
 8007002:	4b4d      	ldr	r3, [pc, #308]	; (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8007004:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007006:	e2be      	b.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d140      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 800700e:	2003      	movs	r0, #3
 8007010:	f7ff fbda 	bl	80067c8 <LL_RCC_GetUSARTClockSource>
 8007014:	4603      	mov	r3, r0
 8007016:	2b03      	cmp	r3, #3
 8007018:	d013      	beq.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 800701a:	2b03      	cmp	r3, #3
 800701c:	d81b      	bhi.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800701e:	2b01      	cmp	r3, #1
 8007020:	d002      	beq.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007022:	2b02      	cmp	r3, #2
 8007024:	d004      	beq.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8007026:	e016      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8007028:	f7ff f83c 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 800702c:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800702e:	e2bd      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8007030:	f7ff f9dc 	bl	80063ec <LL_RCC_HSI_IsReady>
 8007034:	4603      	mov	r3, r0
 8007036:	2b01      	cmp	r3, #1
 8007038:	f040 82a7 	bne.w	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      {
        frequency = HSI_VALUE;
 800703c:	4b3a      	ldr	r3, [pc, #232]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800703e:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007040:	e2a3      	b.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      
    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8007042:	f7ff fa09 	bl	8006458 <LL_RCC_LSE_IsReady>
 8007046:	4603      	mov	r3, r0
 8007048:	2b01      	cmp	r3, #1
 800704a:	f040 82a0 	bne.w	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      {
        frequency = LSE_VALUE;
 800704e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007052:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007054:	e29b      	b.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      
    default: /* USART1 Clock is PCLK2 */
      frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8007056:	f7ff f825 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 800705a:	4604      	mov	r4, r0
 800705c:	f7ff fa8a 	bl	8006574 <LL_RCC_GetAHBPrescaler>
 8007060:	4603      	mov	r3, r0
 8007062:	091b      	lsrs	r3, r3, #4
 8007064:	f003 030f 	and.w	r3, r3, #15
 8007068:	4a34      	ldr	r2, [pc, #208]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800706a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800706e:	fbb4 f4f3 	udiv	r4, r4, r3
 8007072:	f7ff fa97 	bl	80065a4 <LL_RCC_GetAPB2Prescaler>
 8007076:	4603      	mov	r3, r0
 8007078:	0adb      	lsrs	r3, r3, #11
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	4a30      	ldr	r2, [pc, #192]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8007080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007084:	f003 031f 	and.w	r3, r3, #31
 8007088:	fa24 f303 	lsr.w	r3, r4, r3
 800708c:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB2Prescaler());
      break;
 800708e:	e28d      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d156      	bne.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 8007096:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800709a:	f7ff fba5 	bl	80067e8 <LL_RCC_GetLPUARTClockSource>
 800709e:	4603      	mov	r3, r0
 80070a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070a4:	d016      	beq.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80070a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070aa:	d81d      	bhi.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80070ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b0:	d003      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80070b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070b6:	d004      	beq.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 80070b8:	e016      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80070ba:	f7fe fff3 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 80070be:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80070c0:	e274      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80070c2:	f7ff f993 	bl	80063ec <LL_RCC_HSI_IsReady>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	f040 8262 	bne.w	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      {
        frequency = HSI_VALUE;
 80070ce:	4b16      	ldr	r3, [pc, #88]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80070d0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80070d2:	e25e      	b.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      
    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 80070d4:	f7ff f9c0 	bl	8006458 <LL_RCC_LSE_IsReady>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b01      	cmp	r3, #1
 80070dc:	f040 825b 	bne.w	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = LSE_VALUE;
 80070e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070e4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80070e6:	e256      	b.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      
    default: /* LPUART1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80070e8:	f7fe ffdc 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 80070ec:	4604      	mov	r4, r0
 80070ee:	f7ff fa41 	bl	8006574 <LL_RCC_GetAHBPrescaler>
 80070f2:	4603      	mov	r3, r0
 80070f4:	091b      	lsrs	r3, r3, #4
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	4a10      	ldr	r2, [pc, #64]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80070fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007100:	fbb4 f4f3 	udiv	r4, r4, r3
 8007104:	f7ff fa42 	bl	800658c <LL_RCC_GetAPB1Prescaler>
 8007108:	4603      	mov	r3, r0
 800710a:	0a1b      	lsrs	r3, r3, #8
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	4a0b      	ldr	r2, [pc, #44]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8007112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007116:	f003 031f 	and.w	r3, r3, #31
 800711a:	fa24 f303 	lsr.w	r3, r4, r3
 800711e:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8007120:	e244      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8007122:	bf00      	nop
 8007124:	000f4240 	.word	0x000f4240
 8007128:	00f42400 	.word	0x00f42400
 800712c:	001fff68 	.word	0x001fff68
 8007130:	aaaaaaab 	.word	0xaaaaaaab
 8007134:	0801100c 	.word	0x0801100c
 8007138:	02dc6c00 	.word	0x02dc6c00
 800713c:	08010fac 	.word	0x08010fac
 8007140:	08010fec 	.word	0x08010fec
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800714a:	d12a      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 800714c:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8007150:	f7ff fbbd 	bl	80068ce <LL_RCC_GetADCClockSource>
 8007154:	4603      	mov	r3, r0
 8007156:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800715a:	d014      	beq.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800715c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007160:	f200 821b 	bhi.w	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 8007164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007168:	d003      	beq.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800716a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800716e:	d00e      	beq.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
      
    default: /* No clock used as ADC clock source */
      break;
 8007170:	e213      	b.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8007172:	f7ff fc62 	bl	8006a3a <LL_RCC_PLLSAI1_IsReady>
 8007176:	4603      	mov	r3, r0
 8007178:	2b01      	cmp	r3, #1
 800717a:	f040 8210 	bne.w	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        frequency = RCC_PLLSAI1_GetFreqDomain_R();
 800717e:	f000 fbfb 	bl	8007978 <RCC_PLLSAI1_GetFreqDomain_R>
 8007182:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007184:	e20b      	b.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      frequency = HAL_RCC_GetSysClockFreq();
 8007186:	f7fe ff8d 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 800718a:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800718c:	e20e      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      if (LL_RCC_PLL_IsReady() == 1U)
 800718e:	f7ff fbf3 	bl	8006978 <LL_RCC_PLL_IsReady>
 8007192:	4603      	mov	r3, r0
 8007194:	2b01      	cmp	r3, #1
 8007196:	f040 8204 	bne.w	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
        frequency = RCC_PLL_GetFreqDomain_P();
 800719a:	f000 fb41 	bl	8007820 <RCC_PLL_GetFreqDomain_P>
 800719e:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80071a0:	e1ff      	b.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d135      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 80071a8:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80071ac:	f7ff fb2c 	bl	8006808 <LL_RCC_GetI2CClockSource>
 80071b0:	4603      	mov	r3, r0
 80071b2:	4ab7      	ldr	r2, [pc, #732]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80071b8:	4ab6      	ldr	r2, [pc, #728]	; (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d004      	beq.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 80071be:	e00c      	b.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
    case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80071c0:	f7fe ff70 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 80071c4:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80071c6:	e1f1      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80071c8:	f7ff f910 	bl	80063ec <LL_RCC_HSI_IsReady>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	f040 81e9 	bne.w	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      {
        frequency = HSI_VALUE;
 80071d4:	4bb0      	ldr	r3, [pc, #704]	; (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80071d6:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80071d8:	e1e5      	b.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      
    default: /* I2C1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80071da:	f7fe ff63 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 80071de:	4604      	mov	r4, r0
 80071e0:	f7ff f9c8 	bl	8006574 <LL_RCC_GetAHBPrescaler>
 80071e4:	4603      	mov	r3, r0
 80071e6:	091b      	lsrs	r3, r3, #4
 80071e8:	f003 030f 	and.w	r3, r3, #15
 80071ec:	4aab      	ldr	r2, [pc, #684]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80071ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f2:	fbb4 f4f3 	udiv	r4, r4, r3
 80071f6:	f7ff f9c9 	bl	800658c <LL_RCC_GetAPB1Prescaler>
 80071fa:	4603      	mov	r3, r0
 80071fc:	0a1b      	lsrs	r3, r3, #8
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	4aa7      	ldr	r2, [pc, #668]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8007204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007208:	f003 031f 	and.w	r3, r3, #31
 800720c:	fa24 f303 	lsr.w	r3, r4, r3
 8007210:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8007212:	e1cb      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b08      	cmp	r3, #8
 8007218:	d135      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 800721a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800721e:	f7ff faf3 	bl	8006808 <LL_RCC_GetI2CClockSource>
 8007222:	4603      	mov	r3, r0
 8007224:	4a9f      	ldr	r2, [pc, #636]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d003      	beq.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800722a:	4a9f      	ldr	r2, [pc, #636]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d004      	beq.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007230:	e00c      	b.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
    {
    case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8007232:	f7fe ff37 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 8007236:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007238:	e1b8      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 800723a:	f7ff f8d7 	bl	80063ec <LL_RCC_HSI_IsReady>
 800723e:	4603      	mov	r3, r0
 8007240:	2b01      	cmp	r3, #1
 8007242:	f040 81b2 	bne.w	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      {
        frequency = HSI_VALUE;
 8007246:	4b94      	ldr	r3, [pc, #592]	; (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8007248:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800724a:	e1ae      	b.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      
    default: /* I2C3 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800724c:	f7fe ff2a 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 8007250:	4604      	mov	r4, r0
 8007252:	f7ff f98f 	bl	8006574 <LL_RCC_GetAHBPrescaler>
 8007256:	4603      	mov	r3, r0
 8007258:	091b      	lsrs	r3, r3, #4
 800725a:	f003 030f 	and.w	r3, r3, #15
 800725e:	4a8f      	ldr	r2, [pc, #572]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8007260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007264:	fbb4 f4f3 	udiv	r4, r4, r3
 8007268:	f7ff f990 	bl	800658c <LL_RCC_GetAPB1Prescaler>
 800726c:	4603      	mov	r3, r0
 800726e:	0a1b      	lsrs	r3, r3, #8
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	4a8a      	ldr	r2, [pc, #552]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8007276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727a:	f003 031f 	and.w	r3, r3, #31
 800727e:	fa24 f303 	lsr.w	r3, r4, r3
 8007282:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8007284:	e192      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b10      	cmp	r3, #16
 800728a:	d151      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 800728c:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8007290:	f7ff face 	bl	8006830 <LL_RCC_GetLPTIMClockSource>
 8007294:	62b8      	str	r0, [r7, #40]	; 0x28
    
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	4a84      	ldr	r2, [pc, #528]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d110      	bne.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800729e:	f7ff f8ed 	bl	800647c <LL_RCC_LSI1_IsReady>
 80072a2:	6278      	str	r0, [r7, #36]	; 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80072a4:	f7ff f8fc 	bl	80064a0 <LL_RCC_LSI2_IsReady>
 80072a8:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d003      	beq.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	f040 817a 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 80072b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80072bc:	647b      	str	r3, [r7, #68]	; 0x44
 80072be:	e175      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	4a7b      	ldr	r2, [pc, #492]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d108      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 80072c8:	f7ff f890 	bl	80063ec <LL_RCC_HSI_IsReady>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	f040 816c 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 80072d4:	4b70      	ldr	r3, [pc, #448]	; (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80072d6:	647b      	str	r3, [r7, #68]	; 0x44
 80072d8:	e168      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 80072da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072dc:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80072e0:	d109      	bne.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x532>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80072e2:	f7ff f8b9 	bl	8006458 <LL_RCC_LSE_IsReady>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	f040 815f 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80072ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072f2:	647b      	str	r3, [r7, #68]	; 0x44
 80072f4:	e15a      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 80072f6:	f7fe fed5 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 80072fa:	4604      	mov	r4, r0
 80072fc:	f7ff f93a 	bl	8006574 <LL_RCC_GetAHBPrescaler>
 8007300:	4603      	mov	r3, r0
 8007302:	091b      	lsrs	r3, r3, #4
 8007304:	f003 030f 	and.w	r3, r3, #15
 8007308:	4a64      	ldr	r2, [pc, #400]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800730a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800730e:	fbb4 f4f3 	udiv	r4, r4, r3
 8007312:	f7ff f93b 	bl	800658c <LL_RCC_GetAPB1Prescaler>
 8007316:	4603      	mov	r3, r0
 8007318:	0a1b      	lsrs	r3, r3, #8
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	4a60      	ldr	r2, [pc, #384]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8007320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	fa24 f303 	lsr.w	r3, r4, r3
 800732c:	647b      	str	r3, [r7, #68]	; 0x44
 800732e:	e13d      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b20      	cmp	r3, #32
 8007334:	d151      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x616>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 8007336:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800733a:	f7ff fa79 	bl	8006830 <LL_RCC_GetLPTIMClockSource>
 800733e:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 8007340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007342:	4a5c      	ldr	r2, [pc, #368]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d110      	bne.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8007348:	f7ff f898 	bl	800647c <LL_RCC_LSI1_IsReady>
 800734c:	6338      	str	r0, [r7, #48]	; 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 800734e:	f7ff f8a7 	bl	80064a0 <LL_RCC_LSI2_IsReady>
 8007352:	62f8      	str	r0, [r7, #44]	; 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	2b01      	cmp	r3, #1
 8007358:	d003      	beq.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735c:	2b01      	cmp	r3, #1
 800735e:	f040 8125 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8007362:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007366:	647b      	str	r3, [r7, #68]	; 0x44
 8007368:	e120      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 800736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736c:	4a52      	ldr	r2, [pc, #328]	; (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d108      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8007372:	f7ff f83b 	bl	80063ec <LL_RCC_HSI_IsReady>
 8007376:	4603      	mov	r3, r0
 8007378:	2b01      	cmp	r3, #1
 800737a:	f040 8117 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 800737e:	4b46      	ldr	r3, [pc, #280]	; (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8007380:	647b      	str	r3, [r7, #68]	; 0x44
 8007382:	e113      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8007384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007386:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800738a:	d109      	bne.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 800738c:	f7ff f864 	bl	8006458 <LL_RCC_LSE_IsReady>
 8007390:	4603      	mov	r3, r0
 8007392:	2b01      	cmp	r3, #1
 8007394:	f040 810a 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8007398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800739c:	647b      	str	r3, [r7, #68]	; 0x44
 800739e:	e105      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 80073a0:	f7fe fe80 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 80073a4:	4604      	mov	r4, r0
 80073a6:	f7ff f8e5 	bl	8006574 <LL_RCC_GetAHBPrescaler>
 80073aa:	4603      	mov	r3, r0
 80073ac:	091b      	lsrs	r3, r3, #4
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	4a3a      	ldr	r2, [pc, #232]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80073b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b8:	fbb4 f4f3 	udiv	r4, r4, r3
 80073bc:	f7ff f8e6 	bl	800658c <LL_RCC_GetAPB1Prescaler>
 80073c0:	4603      	mov	r3, r0
 80073c2:	0a1b      	lsrs	r3, r3, #8
 80073c4:	f003 0307 	and.w	r3, r3, #7
 80073c8:	4a35      	ldr	r2, [pc, #212]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80073ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ce:	f003 031f 	and.w	r3, r3, #31
 80073d2:	fa24 f303 	lsr.w	r3, r4, r3
 80073d6:	647b      	str	r3, [r7, #68]	; 0x44
 80073d8:	e0e8      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e0:	d119      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 80073e2:	f7ff f8ba 	bl	800655a <LL_RCC_GetRFWKPClockSource>
 80073e6:	63b8      	str	r0, [r7, #56]	; 0x38
    
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073ee:	d109      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80073f0:	f7ff f832 	bl	8006458 <LL_RCC_LSE_IsReady>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	f040 80d8 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80073fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007400:	647b      	str	r3, [r7, #68]	; 0x44
 8007402:	e0d3      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800740a:	f040 80cf 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 1024U;
 800740e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007412:	647b      	str	r3, [r7, #68]	; 0x44
 8007414:	e0ca      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800741c:	f040 80c6 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 8007420:	f7ff f8e0 	bl	80065e4 <LL_RCC_GetSMPSClockSource>
 8007424:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 8007426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007428:	2b00      	cmp	r3, #0
 800742a:	d115      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 800742c:	f7fe ffde 	bl	80063ec <LL_RCC_HSI_IsReady>
 8007430:	4603      	mov	r3, r0
 8007432:	2b01      	cmp	r3, #1
 8007434:	f040 80ba 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 8007438:	4920      	ldr	r1, [pc, #128]	; (80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 800743a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800743c:	4613      	mov	r3, r2
 800743e:	005b      	lsls	r3, r3, #1
 8007440:	4413      	add	r3, r2
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	440b      	add	r3, r1
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a13      	ldr	r2, [pc, #76]	; (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800744a:	fbb2 f3f3 	udiv	r3, r2, r3
 800744e:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8007450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007452:	085b      	lsrs	r3, r3, #1
 8007454:	647b      	str	r3, [r7, #68]	; 0x44
 8007456:	e0a9      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8007458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800745a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800745e:	d131      	bne.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 8007460:	f7fe ffb2 	bl	80063c8 <LL_RCC_HSE_IsReady>
 8007464:	4603      	mov	r3, r0
 8007466:	2b01      	cmp	r3, #1
 8007468:	f040 80a0 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 800746c:	4913      	ldr	r1, [pc, #76]	; (80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 800746e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007470:	4613      	mov	r3, r2
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	4413      	add	r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	440b      	add	r3, r1
 800747a:	3314      	adds	r3, #20
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a10      	ldr	r2, [pc, #64]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8007480:	fbb2 f3f3 	udiv	r3, r2, r3
 8007484:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8007486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007488:	085b      	lsrs	r3, r3, #1
 800748a:	647b      	str	r3, [r7, #68]	; 0x44
 800748c:	e08e      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800748e:	bf00      	nop
 8007490:	00030100 	.word	0x00030100
 8007494:	00030200 	.word	0x00030200
 8007498:	00f42400 	.word	0x00f42400
 800749c:	08010fac 	.word	0x08010fac
 80074a0:	08010fec 	.word	0x08010fec
 80074a4:	00301000 	.word	0x00301000
 80074a8:	00302000 	.word	0x00302000
 80074ac:	000c0004 	.word	0x000c0004
 80074b0:	000c0008 	.word	0x000c0008
 80074b4:	00300010 	.word	0x00300010
 80074b8:	00300020 	.word	0x00300020
 80074bc:	0801104c 	.word	0x0801104c
 80074c0:	01e84800 	.word	0x01e84800
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 80074c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ca:	d16f      	bne.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      switch (LL_RCC_MSI_GetRange())
 80074cc:	f7ff f81a 	bl	8006504 <LL_RCC_MSI_GetRange>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2bb0      	cmp	r3, #176	; 0xb0
 80074d4:	d037      	beq.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80074d6:	2bb0      	cmp	r3, #176	; 0xb0
 80074d8:	d844      	bhi.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80074da:	2ba0      	cmp	r3, #160	; 0xa0
 80074dc:	d024      	beq.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 80074de:	2ba0      	cmp	r3, #160	; 0xa0
 80074e0:	d840      	bhi.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80074e2:	2b80      	cmp	r3, #128	; 0x80
 80074e4:	d002      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80074e6:	2b90      	cmp	r3, #144	; 0x90
 80074e8:	d00f      	beq.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        break;
      case LL_RCC_MSIRANGE_11:
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
        break;
      default:
        break;
 80074ea:	e03b      	b.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 80074ec:	4b32      	ldr	r3, [pc, #200]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80074ee:	6a19      	ldr	r1, [r3, #32]
 80074f0:	4832      	ldr	r0, [pc, #200]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80074f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074f4:	4613      	mov	r3, r2
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	4413      	add	r3, r2
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	4403      	add	r3, r0
 80074fe:	3310      	adds	r3, #16
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	fbb1 f3f3 	udiv	r3, r1, r3
 8007506:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007508:	e02d      	b.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 800750a:	4b2b      	ldr	r3, [pc, #172]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800750c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800750e:	482b      	ldr	r0, [pc, #172]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8007510:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007512:	4613      	mov	r3, r2
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	4413      	add	r3, r2
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	4403      	add	r3, r0
 800751c:	330c      	adds	r3, #12
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	fbb1 f3f3 	udiv	r3, r1, r3
 8007524:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007526:	e01e      	b.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 8007528:	4b23      	ldr	r3, [pc, #140]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800752a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800752c:	4823      	ldr	r0, [pc, #140]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800752e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007530:	4613      	mov	r3, r2
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	4413      	add	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	4403      	add	r3, r0
 800753a:	3308      	adds	r3, #8
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007542:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007544:	e00f      	b.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8007546:	4b1c      	ldr	r3, [pc, #112]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007548:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800754a:	481c      	ldr	r0, [pc, #112]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800754c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800754e:	4613      	mov	r3, r2
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	4413      	add	r3, r2
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	4403      	add	r3, r0
 8007558:	3304      	adds	r3, #4
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007560:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007562:	e000      	b.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        break;
 8007564:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 8007566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007568:	085b      	lsrs	r3, r3, #1
 800756a:	647b      	str	r3, [r7, #68]	; 0x44
 800756c:	e01e      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800756e:	bf00      	nop
 8007570:	e01c      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007572:	bf00      	nop
 8007574:	e01a      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007576:	bf00      	nop
 8007578:	e018      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800757a:	bf00      	nop
 800757c:	e016      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800757e:	bf00      	nop
 8007580:	e014      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007582:	bf00      	nop
 8007584:	e012      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007586:	bf00      	nop
 8007588:	e010      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800758a:	bf00      	nop
 800758c:	e00e      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800758e:	bf00      	nop
 8007590:	e00c      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007592:	bf00      	nop
 8007594:	e00a      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007596:	bf00      	nop
 8007598:	e008      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800759a:	bf00      	nop
 800759c:	e006      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800759e:	bf00      	nop
 80075a0:	e004      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80075a2:	bf00      	nop
 80075a4:	e002      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80075a6:	bf00      	nop
 80075a8:	e000      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80075aa:	bf00      	nop
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif
  return (frequency);
 80075ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	374c      	adds	r7, #76	; 0x4c
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd90      	pop	{r4, r7, pc}
 80075b6:	bf00      	nop
 80075b8:	0801100c 	.word	0x0801100c
 80075bc:	0801104c 	.word	0x0801104c

080075c0 <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 80075c6:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 80075ca:	f7ff f954 	bl	8006876 <LL_RCC_GetRNGClockSource>
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d108      	bne.n	80075e8 <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 80075d6:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 80075da:	f7ff f95c 	bl	8006896 <LL_RCC_GetCLK48ClockSource>
 80075de:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e6:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 80075e8:	687b      	ldr	r3, [r7, #4]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80075f6:	f7fe ff76 	bl	80064e6 <LL_RCC_MSI_EnablePLLMode>
}
 80075fa:	bf00      	nop
 80075fc:	bd80      	pop	{r7, pc}

080075fe <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800760a:	f7ff fa07 	bl	8006a1c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800760e:	f7fa f97f 	bl	8001910 <HAL_GetTick>
 8007612:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007614:	e009      	b.n	800762a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007616:	f7fa f97b 	bl	8001910 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b02      	cmp	r3, #2
 8007622:	d902      	bls.n	800762a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	73fb      	strb	r3, [r7, #15]
      break;
 8007628:	e004      	b.n	8007634 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800762a:	f7ff fa06 	bl	8006a3a <LL_RCC_PLLSAI1_IsReady>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1f0      	bne.n	8007616 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d137      	bne.n	80076aa <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800763a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	021b      	lsls	r3, r3, #8
 800764a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800764e:	4313      	orrs	r3, r2
 8007650:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007664:	4313      	orrs	r3, r2
 8007666:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007668:	f7ff f9c9 	bl	80069fe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800766c:	f7fa f950 	bl	8001910 <HAL_GetTick>
 8007670:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007672:	e009      	b.n	8007688 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007674:	f7fa f94c 	bl	8001910 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b02      	cmp	r3, #2
 8007680:	d902      	bls.n	8007688 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	73fb      	strb	r3, [r7, #15]
        break;
 8007686:	e004      	b.n	8007692 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007688:	f7ff f9d7 	bl	8006a3a <LL_RCC_PLLSAI1_IsReady>
 800768c:	4603      	mov	r3, r0
 800768e:	2b01      	cmp	r3, #1
 8007690:	d1f0      	bne.n	8007674 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d108      	bne.n	80076aa <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800769c:	691a      	ldr	r2, [r3, #16]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076a6:	4313      	orrs	r3, r2
 80076a8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80076c0:	f7ff f9ac 	bl	8006a1c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076c4:	f7fa f924 	bl	8001910 <HAL_GetTick>
 80076c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80076ca:	e009      	b.n	80076e0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076cc:	f7fa f920 	bl	8001910 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d902      	bls.n	80076e0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	73fb      	strb	r3, [r7, #15]
      break;
 80076de:	e004      	b.n	80076ea <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80076e0:	f7ff f9ab 	bl	8006a3a <LL_RCC_PLLSAI1_IsReady>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f0      	bne.n	80076cc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d137      	bne.n	8007760 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80076f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	021b      	lsls	r3, r3, #8
 8007700:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007704:	4313      	orrs	r3, r2
 8007706:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800771a:	4313      	orrs	r3, r2
 800771c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800771e:	f7ff f96e 	bl	80069fe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007722:	f7fa f8f5 	bl	8001910 <HAL_GetTick>
 8007726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007728:	e009      	b.n	800773e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800772a:	f7fa f8f1 	bl	8001910 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	2b02      	cmp	r3, #2
 8007736:	d902      	bls.n	800773e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	73fb      	strb	r3, [r7, #15]
        break;
 800773c:	e004      	b.n	8007748 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800773e:	f7ff f97c 	bl	8006a3a <LL_RCC_PLLSAI1_IsReady>
 8007742:	4603      	mov	r3, r0
 8007744:	2b01      	cmp	r3, #1
 8007746:	d1f0      	bne.n	800772a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d108      	bne.n	8007760 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800774e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800775c:	4313      	orrs	r3, r2
 800775e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007776:	f7ff f951 	bl	8006a1c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800777a:	f7fa f8c9 	bl	8001910 <HAL_GetTick>
 800777e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007780:	e009      	b.n	8007796 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007782:	f7fa f8c5 	bl	8001910 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d902      	bls.n	8007796 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	73fb      	strb	r3, [r7, #15]
      break;
 8007794:	e004      	b.n	80077a0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007796:	f7ff f950 	bl	8006a3a <LL_RCC_PLLSAI1_IsReady>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1f0      	bne.n	8007782 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d137      	bne.n	8007816 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80077a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077ba:	4313      	orrs	r3, r2
 80077bc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80077be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077d0:	4313      	orrs	r3, r2
 80077d2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80077d4:	f7ff f913 	bl	80069fe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d8:	f7fa f89a 	bl	8001910 <HAL_GetTick>
 80077dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80077de:	e009      	b.n	80077f4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077e0:	f7fa f896 	bl	8001910 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d902      	bls.n	80077f4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	73fb      	strb	r3, [r7, #15]
        break;
 80077f2:	e004      	b.n	80077fe <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80077f4:	f7ff f921 	bl	8006a3a <LL_RCC_PLLSAI1_IsReady>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d1f0      	bne.n	80077e0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d108      	bne.n	8007816 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007808:	691a      	ldr	r2, [r3, #16]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007812:	4313      	orrs	r3, r2
 8007814:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007816:	7bfb      	ldrb	r3, [r7, #15]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 8007820:	b590      	push	{r4, r7, lr}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007826:	f7ff f94b 	bl	8006ac0 <LL_RCC_PLL_GetMainSource>
 800782a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2b03      	cmp	r3, #3
 8007830:	d017      	beq.n	8007862 <RCC_PLL_GetFreqDomain_P+0x42>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b03      	cmp	r3, #3
 8007836:	d81f      	bhi.n	8007878 <RCC_PLL_GetFreqDomain_P+0x58>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d003      	beq.n	8007846 <RCC_PLL_GetFreqDomain_P+0x26>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d00b      	beq.n	800785c <RCC_PLL_GetFreqDomain_P+0x3c>
 8007844:	e018      	b.n	8007878 <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007846:	f7fe fe5d 	bl	8006504 <LL_RCC_MSI_GetRange>
 800784a:	4603      	mov	r3, r0
 800784c:	091b      	lsrs	r3, r3, #4
 800784e:	f003 030f 	and.w	r3, r3, #15
 8007852:	4a1b      	ldr	r2, [pc, #108]	; (80078c0 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8007854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007858:	607b      	str	r3, [r7, #4]
      break;
 800785a:	e018      	b.n	800788e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800785c:	4b19      	ldr	r3, [pc, #100]	; (80078c4 <RCC_PLL_GetFreqDomain_P+0xa4>)
 800785e:	607b      	str	r3, [r7, #4]
      break;
 8007860:	e015      	b.n	800788e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007862:	f7fe fd9f 	bl	80063a4 <LL_RCC_HSE_IsEnabledDiv2>
 8007866:	4603      	mov	r3, r0
 8007868:	2b01      	cmp	r3, #1
 800786a:	d102      	bne.n	8007872 <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800786c:	4b15      	ldr	r3, [pc, #84]	; (80078c4 <RCC_PLL_GetFreqDomain_P+0xa4>)
 800786e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007870:	e00d      	b.n	800788e <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8007872:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <RCC_PLL_GetFreqDomain_P+0xa8>)
 8007874:	607b      	str	r3, [r7, #4]
      break;
 8007876:	e00a      	b.n	800788e <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007878:	f7fe fe44 	bl	8006504 <LL_RCC_MSI_GetRange>
 800787c:	4603      	mov	r3, r0
 800787e:	091b      	lsrs	r3, r3, #4
 8007880:	f003 030f 	and.w	r3, r3, #15
 8007884:	4a0e      	ldr	r2, [pc, #56]	; (80078c0 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8007886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800788a:	607b      	str	r3, [r7, #4]
      break;
 800788c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800788e:	f7ff f885 	bl	800699c <LL_RCC_PLL_GetN>
 8007892:	4602      	mov	r2, r0
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	fb03 f402 	mul.w	r4, r3, r2
 800789a:	f7ff f8a4 	bl	80069e6 <LL_RCC_PLL_GetDivider>
 800789e:	4603      	mov	r3, r0
 80078a0:	091b      	lsrs	r3, r3, #4
 80078a2:	3301      	adds	r3, #1
 80078a4:	fbb4 f4f3 	udiv	r4, r4, r3
 80078a8:	f7ff f885 	bl	80069b6 <LL_RCC_PLL_GetP>
 80078ac:	4603      	mov	r3, r0
 80078ae:	0c5b      	lsrs	r3, r3, #17
 80078b0:	3301      	adds	r3, #1
 80078b2:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd90      	pop	{r4, r7, pc}
 80078be:	bf00      	nop
 80078c0:	0801100c 	.word	0x0801100c
 80078c4:	00f42400 	.word	0x00f42400
 80078c8:	01e84800 	.word	0x01e84800

080078cc <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 80078cc:	b590      	push	{r4, r7, lr}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80078d2:	f7ff f8f5 	bl	8006ac0 <LL_RCC_PLL_GetMainSource>
 80078d6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d017      	beq.n	800790e <RCC_PLL_GetFreqDomain_Q+0x42>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d81f      	bhi.n	8007924 <RCC_PLL_GetFreqDomain_Q+0x58>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d003      	beq.n	80078f2 <RCC_PLL_GetFreqDomain_Q+0x26>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d00b      	beq.n	8007908 <RCC_PLL_GetFreqDomain_Q+0x3c>
 80078f0:	e018      	b.n	8007924 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80078f2:	f7fe fe07 	bl	8006504 <LL_RCC_MSI_GetRange>
 80078f6:	4603      	mov	r3, r0
 80078f8:	091b      	lsrs	r3, r3, #4
 80078fa:	f003 030f 	and.w	r3, r3, #15
 80078fe:	4a1b      	ldr	r2, [pc, #108]	; (800796c <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8007900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007904:	607b      	str	r3, [r7, #4]
      break;
 8007906:	e018      	b.n	800793a <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007908:	4b19      	ldr	r3, [pc, #100]	; (8007970 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 800790a:	607b      	str	r3, [r7, #4]
      break;
 800790c:	e015      	b.n	800793a <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800790e:	f7fe fd49 	bl	80063a4 <LL_RCC_HSE_IsEnabledDiv2>
 8007912:	4603      	mov	r3, r0
 8007914:	2b01      	cmp	r3, #1
 8007916:	d102      	bne.n	800791e <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007918:	4b15      	ldr	r3, [pc, #84]	; (8007970 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 800791a:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 800791c:	e00d      	b.n	800793a <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 800791e:	4b15      	ldr	r3, [pc, #84]	; (8007974 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 8007920:	607b      	str	r3, [r7, #4]
      break;
 8007922:	e00a      	b.n	800793a <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007924:	f7fe fdee 	bl	8006504 <LL_RCC_MSI_GetRange>
 8007928:	4603      	mov	r3, r0
 800792a:	091b      	lsrs	r3, r3, #4
 800792c:	f003 030f 	and.w	r3, r3, #15
 8007930:	4a0e      	ldr	r2, [pc, #56]	; (800796c <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8007932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007936:	607b      	str	r3, [r7, #4]
      break;
 8007938:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800793a:	f7ff f82f 	bl	800699c <LL_RCC_PLL_GetN>
 800793e:	4602      	mov	r2, r0
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	fb03 f402 	mul.w	r4, r3, r2
 8007946:	f7ff f84e 	bl	80069e6 <LL_RCC_PLL_GetDivider>
 800794a:	4603      	mov	r3, r0
 800794c:	091b      	lsrs	r3, r3, #4
 800794e:	3301      	adds	r3, #1
 8007950:	fbb4 f4f3 	udiv	r4, r4, r3
 8007954:	f7ff f83b 	bl	80069ce <LL_RCC_PLL_GetQ>
 8007958:	4603      	mov	r3, r0
 800795a:	0e5b      	lsrs	r3, r3, #25
 800795c:	3301      	adds	r3, #1
 800795e:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8007962:	4618      	mov	r0, r3
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	bd90      	pop	{r4, r7, pc}
 800796a:	bf00      	nop
 800796c:	0801100c 	.word	0x0801100c
 8007970:	00f42400 	.word	0x00f42400
 8007974:	01e84800 	.word	0x01e84800

08007978 <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 8007978:	b590      	push	{r4, r7, lr}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 800797e:	f7ff f89f 	bl	8006ac0 <LL_RCC_PLL_GetMainSource>
 8007982:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2b03      	cmp	r3, #3
 8007988:	d017      	beq.n	80079ba <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b03      	cmp	r3, #3
 800798e:	d81f      	bhi.n	80079d0 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d003      	beq.n	800799e <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d00b      	beq.n	80079b4 <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 800799c:	e018      	b.n	80079d0 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800799e:	f7fe fdb1 	bl	8006504 <LL_RCC_MSI_GetRange>
 80079a2:	4603      	mov	r3, r0
 80079a4:	091b      	lsrs	r3, r3, #4
 80079a6:	f003 030f 	and.w	r3, r3, #15
 80079aa:	4a1b      	ldr	r2, [pc, #108]	; (8007a18 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 80079ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079b0:	607b      	str	r3, [r7, #4]
      break;
 80079b2:	e018      	b.n	80079e6 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 80079b4:	4b19      	ldr	r3, [pc, #100]	; (8007a1c <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 80079b6:	607b      	str	r3, [r7, #4]
      break;
 80079b8:	e015      	b.n	80079e6 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80079ba:	f7fe fcf3 	bl	80063a4 <LL_RCC_HSE_IsEnabledDiv2>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d102      	bne.n	80079ca <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 80079c4:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 80079c6:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 80079c8:	e00d      	b.n	80079e6 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 80079ca:	4b15      	ldr	r3, [pc, #84]	; (8007a20 <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 80079cc:	607b      	str	r3, [r7, #4]
      break;
 80079ce:	e00a      	b.n	80079e6 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80079d0:	f7fe fd98 	bl	8006504 <LL_RCC_MSI_GetRange>
 80079d4:	4603      	mov	r3, r0
 80079d6:	091b      	lsrs	r3, r3, #4
 80079d8:	f003 030f 	and.w	r3, r3, #15
 80079dc:	4a0e      	ldr	r2, [pc, #56]	; (8007a18 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 80079de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e2:	607b      	str	r3, [r7, #4]
      break;
 80079e4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80079e6:	f7ff f83a 	bl	8006a5e <LL_RCC_PLLSAI1_GetN>
 80079ea:	4602      	mov	r2, r0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	fb03 f402 	mul.w	r4, r3, r2
 80079f2:	f7fe fff8 	bl	80069e6 <LL_RCC_PLL_GetDivider>
 80079f6:	4603      	mov	r3, r0
 80079f8:	091b      	lsrs	r3, r3, #4
 80079fa:	3301      	adds	r3, #1
 80079fc:	fbb4 f4f3 	udiv	r4, r4, r3
 8007a00:	f7ff f852 	bl	8006aa8 <LL_RCC_PLLSAI1_GetR>
 8007a04:	4603      	mov	r3, r0
 8007a06:	0f5b      	lsrs	r3, r3, #29
 8007a08:	3301      	adds	r3, #1
 8007a0a:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd90      	pop	{r4, r7, pc}
 8007a16:	bf00      	nop
 8007a18:	0801100c 	.word	0x0801100c
 8007a1c:	00f42400 	.word	0x00f42400
 8007a20:	01e84800 	.word	0x01e84800

08007a24 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 8007a24:	b590      	push	{r4, r7, lr}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007a2a:	f7ff f849 	bl	8006ac0 <LL_RCC_PLL_GetMainSource>
 8007a2e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d017      	beq.n	8007a66 <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d81f      	bhi.n	8007a7c <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d003      	beq.n	8007a4a <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d00b      	beq.n	8007a60 <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 8007a48:	e018      	b.n	8007a7c <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007a4a:	f7fe fd5b 	bl	8006504 <LL_RCC_MSI_GetRange>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	091b      	lsrs	r3, r3, #4
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	4a1b      	ldr	r2, [pc, #108]	; (8007ac4 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8007a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a5c:	607b      	str	r3, [r7, #4]
      break;
 8007a5e:	e018      	b.n	8007a92 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8007a60:	4b19      	ldr	r3, [pc, #100]	; (8007ac8 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8007a62:	607b      	str	r3, [r7, #4]
      break;
 8007a64:	e015      	b.n	8007a92 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007a66:	f7fe fc9d 	bl	80063a4 <LL_RCC_HSE_IsEnabledDiv2>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d102      	bne.n	8007a76 <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007a70:	4b15      	ldr	r3, [pc, #84]	; (8007ac8 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8007a72:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007a74:	e00d      	b.n	8007a92 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8007a76:	4b15      	ldr	r3, [pc, #84]	; (8007acc <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 8007a78:	607b      	str	r3, [r7, #4]
      break;
 8007a7a:	e00a      	b.n	8007a92 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007a7c:	f7fe fd42 	bl	8006504 <LL_RCC_MSI_GetRange>
 8007a80:	4603      	mov	r3, r0
 8007a82:	091b      	lsrs	r3, r3, #4
 8007a84:	f003 030f 	and.w	r3, r3, #15
 8007a88:	4a0e      	ldr	r2, [pc, #56]	; (8007ac4 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8007a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a8e:	607b      	str	r3, [r7, #4]
      break;
 8007a90:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007a92:	f7fe ffe4 	bl	8006a5e <LL_RCC_PLLSAI1_GetN>
 8007a96:	4602      	mov	r2, r0
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	fb03 f402 	mul.w	r4, r3, r2
 8007a9e:	f7fe ffa2 	bl	80069e6 <LL_RCC_PLL_GetDivider>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	091b      	lsrs	r3, r3, #4
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	fbb4 f4f3 	udiv	r4, r4, r3
 8007aac:	f7fe ffe4 	bl	8006a78 <LL_RCC_PLLSAI1_GetP>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	0c5b      	lsrs	r3, r3, #17
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd90      	pop	{r4, r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	0801100c 	.word	0x0801100c
 8007ac8:	00f42400 	.word	0x00f42400
 8007acc:	01e84800 	.word	0x01e84800

08007ad0 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8007ad0:	b590      	push	{r4, r7, lr}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007ad6:	f7fe fff3 	bl	8006ac0 <LL_RCC_PLL_GetMainSource>
 8007ada:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d017      	beq.n	8007b12 <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d81f      	bhi.n	8007b28 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d003      	beq.n	8007af6 <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d00b      	beq.n	8007b0c <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 8007af4:	e018      	b.n	8007b28 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007af6:	f7fe fd05 	bl	8006504 <LL_RCC_MSI_GetRange>
 8007afa:	4603      	mov	r3, r0
 8007afc:	091b      	lsrs	r3, r3, #4
 8007afe:	f003 030f 	and.w	r3, r3, #15
 8007b02:	4a1b      	ldr	r2, [pc, #108]	; (8007b70 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8007b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b08:	607b      	str	r3, [r7, #4]
      break;
 8007b0a:	e018      	b.n	8007b3e <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8007b0c:	4b19      	ldr	r3, [pc, #100]	; (8007b74 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8007b0e:	607b      	str	r3, [r7, #4]
      break;
 8007b10:	e015      	b.n	8007b3e <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007b12:	f7fe fc47 	bl	80063a4 <LL_RCC_HSE_IsEnabledDiv2>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d102      	bne.n	8007b22 <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007b1c:	4b15      	ldr	r3, [pc, #84]	; (8007b74 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8007b1e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007b20:	e00d      	b.n	8007b3e <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8007b22:	4b15      	ldr	r3, [pc, #84]	; (8007b78 <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 8007b24:	607b      	str	r3, [r7, #4]
      break;
 8007b26:	e00a      	b.n	8007b3e <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007b28:	f7fe fcec 	bl	8006504 <LL_RCC_MSI_GetRange>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	091b      	lsrs	r3, r3, #4
 8007b30:	f003 030f 	and.w	r3, r3, #15
 8007b34:	4a0e      	ldr	r2, [pc, #56]	; (8007b70 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8007b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b3a:	607b      	str	r3, [r7, #4]
      break;
 8007b3c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007b3e:	f7fe ff8e 	bl	8006a5e <LL_RCC_PLLSAI1_GetN>
 8007b42:	4602      	mov	r2, r0
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	fb03 f402 	mul.w	r4, r3, r2
 8007b4a:	f7fe ff4c 	bl	80069e6 <LL_RCC_PLL_GetDivider>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	091b      	lsrs	r3, r3, #4
 8007b52:	3301      	adds	r3, #1
 8007b54:	fbb4 f4f3 	udiv	r4, r4, r3
 8007b58:	f7fe ff9a 	bl	8006a90 <LL_RCC_PLLSAI1_GetQ>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	0e5b      	lsrs	r3, r3, #25
 8007b60:	3301      	adds	r3, #1
 8007b62:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd90      	pop	{r4, r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	0801100c 	.word	0x0801100c
 8007b74:	00f42400 	.word	0x00f42400
 8007b78:	01e84800 	.word	0x01e84800

08007b7c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e090      	b.n	8007cb0 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d106      	bne.n	8007ba8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7f9 fa32 	bl	800100c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	22ca      	movs	r2, #202	; 0xca
 8007bb6:	625a      	str	r2, [r3, #36]	; 0x24
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2253      	movs	r2, #83	; 0x53
 8007bbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f89f 	bl	8007d04 <RTC_EnterInitMode>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d009      	beq.n	8007be0 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	22ff      	movs	r2, #255	; 0xff
 8007bd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e067      	b.n	8007cb0 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bf2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6899      	ldr	r1, [r3, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	431a      	orrs	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	68d2      	ldr	r2, [r2, #12]
 8007c1a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6919      	ldr	r1, [r3, #16]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	041a      	lsls	r2, r3, #16
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c3e:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0203 	bic.w	r2, r2, #3
 8007c4e:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	69da      	ldr	r2, [r3, #28]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d113      	bne.n	8007c9e <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f81e 	bl	8007cb8 <HAL_RTC_WaitForSynchro>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00d      	beq.n	8007c9e <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	22ff      	movs	r2, #255	; 0xff
 8007c88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e008      	b.n	8007cb0 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	22ff      	movs	r2, #255	; 0xff
 8007ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8007cae:	2300      	movs	r3, #0
  }
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007cce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007cd0:	f7f9 fe1e 	bl	8001910 <HAL_GetTick>
 8007cd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007cd6:	e009      	b.n	8007cec <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007cd8:	f7f9 fe1a 	bl	8001910 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ce6:	d901      	bls.n	8007cec <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e007      	b.n	8007cfc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0ee      	beq.n	8007cd8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d119      	bne.n	8007d4e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d22:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007d24:	f7f9 fdf4 	bl	8001910 <HAL_GetTick>
 8007d28:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d2a:	e009      	b.n	8007d40 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007d2c:	f7f9 fdf0 	bl	8001910 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d3a:	d901      	bls.n	8007d40 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e007      	b.n	8007d50 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0ee      	beq.n	8007d2c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d904      	bls.n	8007d76 <HAL_SAI_InitProtocol+0x1e>
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	3b03      	subs	r3, #3
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d812      	bhi.n	8007d9a <HAL_SAI_InitProtocol+0x42>
 8007d74:	e008      	b.n	8007d88 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	68b9      	ldr	r1, [r7, #8]
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f9af 	bl	80080e0 <SAI_InitI2S>
 8007d82:	4603      	mov	r3, r0
 8007d84:	75fb      	strb	r3, [r7, #23]
      break;
 8007d86:	e00b      	b.n	8007da0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 fa58 	bl	8008244 <SAI_InitPCM>
 8007d94:	4603      	mov	r3, r0
 8007d96:	75fb      	strb	r3, [r7, #23]
      break;
 8007d98:	e002      	b.n	8007da0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d9e:	bf00      	nop
  }

  if (status == HAL_OK)
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d104      	bne.n	8007db0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 f808 	bl	8007dbc <HAL_SAI_Init>
 8007dac:	4603      	mov	r3, r0
 8007dae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b088      	sub	sp, #32
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e17c      	b.n	80080c8 <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d10e      	bne.n	8007df6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a5c      	ldr	r2, [pc, #368]	; (8007f50 <HAL_SAI_Init+0x194>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d107      	bne.n	8007df2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d103      	bne.n	8007df2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e168      	b.n	80080c8 <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7f9 f97e 	bl	800110c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fa99 	bl	8008348 <SAI_Disable>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e153      	b.n	80080c8 <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <HAL_SAI_Init+0x7a>
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d003      	beq.n	8007e3c <HAL_SAI_Init+0x80>
 8007e34:	e006      	b.n	8007e44 <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	61bb      	str	r3, [r7, #24]
      break;
 8007e3a:	e006      	b.n	8007e4a <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e40:	61bb      	str	r3, [r7, #24]
      break;
 8007e42:	e002      	b.n	8007e4a <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	61bb      	str	r3, [r7, #24]
      break;
 8007e48:	bf00      	nop
  }

  SAI1->GCR = 0;
 8007e4a:	4b42      	ldr	r3, [pc, #264]	; (8007f54 <HAL_SAI_Init+0x198>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d062      	beq.n	8007f1e <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007e58:	2040      	movs	r0, #64	; 0x40
 8007e5a:	f7fe ffb3 	bl	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e5e:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e68:	d120      	bne.n	8007eac <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d102      	bne.n	8007e78 <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8007e72:	2340      	movs	r3, #64	; 0x40
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	e00a      	b.n	8007e8e <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d103      	bne.n	8007e88 <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8007e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e84:	613b      	str	r3, [r7, #16]
 8007e86:	e002      	b.n	8007e8e <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4613      	mov	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	005b      	lsls	r3, r3, #1
 8007e98:	4619      	mov	r1, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	fb02 f303 	mul.w	r3, r2, r3
 8007ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	e017      	b.n	8007edc <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007eb4:	d101      	bne.n	8007eba <HAL_SAI_Init+0xfe>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e000      	b.n	8007ebc <HAL_SAI_Init+0x100>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	4619      	mov	r1, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	fb02 f303 	mul.w	r3, r2, r3
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007eda:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	4a1e      	ldr	r2, [pc, #120]	; (8007f58 <HAL_SAI_Init+0x19c>)
 8007ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee4:	08da      	lsrs	r2, r3, #3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007eea:	6979      	ldr	r1, [r7, #20]
 8007eec:	4b1a      	ldr	r3, [pc, #104]	; (8007f58 <HAL_SAI_Init+0x19c>)
 8007eee:	fba3 2301 	umull	r2, r3, r3, r1
 8007ef2:	08da      	lsrs	r2, r3, #3
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	1aca      	subs	r2, r1, r3
 8007efe:	2a08      	cmp	r2, #8
 8007f00:	d904      	bls.n	8007f0c <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d104      	bne.n	8007f1e <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	085a      	lsrs	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_SAI_Init+0x172>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d109      	bne.n	8007f42 <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d101      	bne.n	8007f3a <HAL_SAI_Init+0x17e>
 8007f36:	2300      	movs	r3, #0
 8007f38:	e001      	b.n	8007f3e <HAL_SAI_Init+0x182>
 8007f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f3e:	61fb      	str	r3, [r7, #28]
 8007f40:	e00e      	b.n	8007f60 <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d108      	bne.n	8007f5c <HAL_SAI_Init+0x1a0>
 8007f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f4e:	e006      	b.n	8007f5e <HAL_SAI_Init+0x1a2>
 8007f50:	40015404 	.word	0x40015404
 8007f54:	40015400 	.word	0x40015400
 8007f58:	cccccccd 	.word	0xcccccccd
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6819      	ldr	r1, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4b59      	ldr	r3, [pc, #356]	; (80080d0 <HAL_SAI_Init+0x314>)
 8007f6c:	400b      	ands	r3, r1
 8007f6e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6819      	ldr	r1, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f84:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8007f98:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007fa4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	051b      	lsls	r3, r3, #20
 8007fac:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007fb2:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	6812      	ldr	r2, [r2, #0]
 8007fcc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007fd0:	f023 030f 	bic.w	r3, r3, #15
 8007fd4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6859      	ldr	r1, [r3, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	69da      	ldr	r2, [r3, #28]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fea:	431a      	orrs	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6899      	ldr	r1, [r3, #8]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	4b35      	ldr	r3, [pc, #212]	; (80080d4 <HAL_SAI_Init+0x318>)
 8008000:	400b      	ands	r3, r1
 8008002:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6899      	ldr	r1, [r3, #8]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008014:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800801a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008020:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008026:	3b01      	subs	r3, #1
 8008028:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800802a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68d9      	ldr	r1, [r3, #12]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008042:	400b      	ands	r3, r1
 8008044:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68d9      	ldr	r1, [r3, #12]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008054:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800805a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800805c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008062:	3b01      	subs	r3, #1
 8008064:	021b      	lsls	r3, r3, #8
 8008066:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a18      	ldr	r2, [pc, #96]	; (80080d8 <HAL_SAI_Init+0x31c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d119      	bne.n	80080ae <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800807a:	4b18      	ldr	r3, [pc, #96]	; (80080dc <HAL_SAI_Init+0x320>)
 800807c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807e:	4a17      	ldr	r2, [pc, #92]	; (80080dc <HAL_SAI_Init+0x320>)
 8008080:	f023 0301 	bic.w	r3, r3, #1
 8008084:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800808c:	2b01      	cmp	r3, #1
 800808e:	d10e      	bne.n	80080ae <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008098:	3b01      	subs	r3, #1
 800809a:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800809c:	490f      	ldr	r1, [pc, #60]	; (80080dc <HAL_SAI_Init+0x320>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80080a2:	4b0e      	ldr	r3, [pc, #56]	; (80080dc <HAL_SAI_Init+0x320>)
 80080a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a6:	4a0d      	ldr	r2, [pc, #52]	; (80080dc <HAL_SAI_Init+0x320>)
 80080a8:	f043 0301 	orr.w	r3, r3, #1
 80080ac:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3720      	adds	r7, #32
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	f005c010 	.word	0xf005c010
 80080d4:	fff88000 	.word	0xfff88000
 80080d8:	40015404 	.word	0x40015404
 80080dc:	40015400 	.word	0x40015400

080080e0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <SAI_InitI2S+0x2e>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d103      	bne.n	8008116 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	651a      	str	r2, [r3, #80]	; 0x50
 8008114:	e002      	b.n	800811c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008122:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800812a:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e077      	b.n	8008236 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d107      	bne.n	800815c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008158:	665a      	str	r2, [r3, #100]	; 0x64
 800815a:	e006      	b.n	800816a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008162:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	665a      	str	r2, [r3, #100]	; 0x64
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b03      	cmp	r3, #3
 800816e:	d84f      	bhi.n	8008210 <SAI_InitI2S+0x130>
 8008170:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <SAI_InitI2S+0x98>)
 8008172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008176:	bf00      	nop
 8008178:	08008189 	.word	0x08008189
 800817c:	080081ab 	.word	0x080081ab
 8008180:	080081cd 	.word	0x080081cd
 8008184:	080081ef 	.word	0x080081ef

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2280      	movs	r2, #128	; 0x80
 800818c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	085b      	lsrs	r3, r3, #1
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	085b      	lsrs	r3, r3, #1
 800819c:	011a      	lsls	r2, r3, #4
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2240      	movs	r2, #64	; 0x40
 80081a6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80081a8:	e035      	b.n	8008216 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2280      	movs	r2, #128	; 0x80
 80081ae:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	085b      	lsrs	r3, r3, #1
 80081b4:	019a      	lsls	r2, r3, #6
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	085b      	lsrs	r3, r3, #1
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2280      	movs	r2, #128	; 0x80
 80081c8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80081ca:	e024      	b.n	8008216 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	22c0      	movs	r2, #192	; 0xc0
 80081d0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	085b      	lsrs	r3, r3, #1
 80081d6:	019a      	lsls	r2, r3, #6
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	085b      	lsrs	r3, r3, #1
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2280      	movs	r2, #128	; 0x80
 80081ea:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80081ec:	e013      	b.n	8008216 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	22e0      	movs	r2, #224	; 0xe0
 80081f2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	085b      	lsrs	r3, r3, #1
 80081f8:	019a      	lsls	r2, r3, #6
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	085b      	lsrs	r3, r3, #1
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2280      	movs	r2, #128	; 0x80
 800820c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800820e:	e002      	b.n	8008216 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
      break;
 8008214:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d10b      	bne.n	8008234 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d102      	bne.n	8008228 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2210      	movs	r2, #16
 8008226:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d102      	bne.n	8008234 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2208      	movs	r2, #8
 8008232:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8008234:	7dfb      	ldrb	r3, [r7, #23]
}
 8008236:	4618      	mov	r0, r3
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop

08008244 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <SAI_InitPCM+0x2e>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2b02      	cmp	r3, #2
 8008270:	d103      	bne.n	800827a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2201      	movs	r2, #1
 8008276:	651a      	str	r2, [r3, #80]	; 0x50
 8008278:	e002      	b.n	8008280 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800828c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008294:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082a8:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d103      	bne.n	80082b8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2201      	movs	r2, #1
 80082b4:	659a      	str	r2, [r3, #88]	; 0x58
 80082b6:	e002      	b.n	80082be <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	220d      	movs	r2, #13
 80082bc:	659a      	str	r2, [r3, #88]	; 0x58
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d837      	bhi.n	8008334 <SAI_InitPCM+0xf0>
 80082c4:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <SAI_InitPCM+0x88>)
 80082c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ca:	bf00      	nop
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082f3 	.word	0x080082f3
 80082d4:	08008309 	.word	0x08008309
 80082d8:	0800831f 	.word	0x0800831f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2280      	movs	r2, #128	; 0x80
 80082e0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	011a      	lsls	r2, r3, #4
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2240      	movs	r2, #64	; 0x40
 80082ee:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80082f0:	e023      	b.n	800833a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2280      	movs	r2, #128	; 0x80
 80082f6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2280      	movs	r2, #128	; 0x80
 8008304:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008306:	e018      	b.n	800833a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	22c0      	movs	r2, #192	; 0xc0
 800830c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2280      	movs	r2, #128	; 0x80
 800831a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800831c:	e00d      	b.n	800833a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	22e0      	movs	r2, #224	; 0xe0
 8008322:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2280      	movs	r2, #128	; 0x80
 8008330:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008332:	e002      	b.n	800833a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	75fb      	strb	r3, [r7, #23]
      break;
 8008338:	bf00      	nop
  }

  return status;
 800833a:	7dfb      	ldrb	r3, [r7, #23]
}
 800833c:	4618      	mov	r0, r3
 800833e:	371c      	adds	r7, #28
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008350:	4b18      	ldr	r3, [pc, #96]	; (80083b4 <SAI_Disable+0x6c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a18      	ldr	r2, [pc, #96]	; (80083b8 <SAI_Disable+0x70>)
 8008356:	fba2 2303 	umull	r2, r3, r2, r3
 800835a:	0b1b      	lsrs	r3, r3, #12
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008372:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10a      	bne.n	8008390 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008380:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	72fb      	strb	r3, [r7, #11]
      break;
 800838e:	e009      	b.n	80083a4 <SAI_Disable+0x5c>
    }
    count--;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3b01      	subs	r3, #1
 8008394:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e7      	bne.n	8008374 <SAI_Disable+0x2c>

  return status;
 80083a4:	7afb      	ldrb	r3, [r7, #11]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	20000010 	.word	0x20000010
 80083b8:	95cbec1b 	.word	0x95cbec1b

080083bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e095      	b.n	80084fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d108      	bne.n	80083e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083de:	d009      	beq.n	80083f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	61da      	str	r2, [r3, #28]
 80083e6:	e005      	b.n	80083f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d106      	bne.n	8008414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7f8 ff88 	bl	8001324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800842a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008434:	d902      	bls.n	800843c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008436:	2300      	movs	r3, #0
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	e002      	b.n	8008442 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800843c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008440:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800844a:	d007      	beq.n	800845c <HAL_SPI_Init+0xa0>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008454:	d002      	beq.n	800845c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800846c:	431a      	orrs	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f003 0302 	and.w	r3, r3, #2
 8008476:	431a      	orrs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	431a      	orrs	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800848a:	431a      	orrs	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008494:	431a      	orrs	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800849e:	ea42 0103 	orr.w	r1, r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	0c1b      	lsrs	r3, r3, #16
 80084b8:	f003 0204 	and.w	r2, r3, #4
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	f003 0310 	and.w	r3, r3, #16
 80084c4:	431a      	orrs	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ca:	f003 0308 	and.w	r3, r3, #8
 80084ce:	431a      	orrs	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80084d8:	ea42 0103 	orr.w	r1, r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b082      	sub	sp, #8
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e049      	b.n	80085a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d106      	bne.n	800852e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7f9 f93b 	bl	80017a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	3304      	adds	r3, #4
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f000 fb3f 	bl	8008bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d001      	beq.n	80085c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e036      	b.n	8008636 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0201 	orr.w	r2, r2, #1
 80085de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a17      	ldr	r2, [pc, #92]	; (8008644 <HAL_TIM_Base_Start_IT+0x94>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d004      	beq.n	80085f4 <HAL_TIM_Base_Start_IT+0x44>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f2:	d115      	bne.n	8008620 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689a      	ldr	r2, [r3, #8]
 80085fa:	4b13      	ldr	r3, [pc, #76]	; (8008648 <HAL_TIM_Base_Start_IT+0x98>)
 80085fc:	4013      	ands	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2b06      	cmp	r3, #6
 8008604:	d015      	beq.n	8008632 <HAL_TIM_Base_Start_IT+0x82>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800860c:	d011      	beq.n	8008632 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f042 0201 	orr.w	r2, r2, #1
 800861c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800861e:	e008      	b.n	8008632 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f042 0201 	orr.w	r2, r2, #1
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	e000      	b.n	8008634 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008632:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	40012c00 	.word	0x40012c00
 8008648:	00010007 	.word	0x00010007

0800864c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e049      	b.n	80086f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d106      	bne.n	8008678 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f841 	bl	80086fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3304      	adds	r3, #4
 8008688:	4619      	mov	r1, r3
 800868a:	4610      	mov	r0, r2
 800868c:	f000 fa9a 	bl	8008bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008702:	bf00      	nop
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b02      	cmp	r3, #2
 8008722:	d122      	bne.n	800876a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b02      	cmp	r3, #2
 8008730:	d11b      	bne.n	800876a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f06f 0202 	mvn.w	r2, #2
 800873a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	f003 0303 	and.w	r3, r3, #3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fa19 	bl	8008b88 <HAL_TIM_IC_CaptureCallback>
 8008756:	e005      	b.n	8008764 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fa0b 	bl	8008b74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fa1c 	bl	8008b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f003 0304 	and.w	r3, r3, #4
 8008774:	2b04      	cmp	r3, #4
 8008776:	d122      	bne.n	80087be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	f003 0304 	and.w	r3, r3, #4
 8008782:	2b04      	cmp	r3, #4
 8008784:	d11b      	bne.n	80087be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f06f 0204 	mvn.w	r2, #4
 800878e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d003      	beq.n	80087ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f9ef 	bl	8008b88 <HAL_TIM_IC_CaptureCallback>
 80087aa:	e005      	b.n	80087b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f9e1 	bl	8008b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f9f2 	bl	8008b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	f003 0308 	and.w	r3, r3, #8
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d122      	bne.n	8008812 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	f003 0308 	and.w	r3, r3, #8
 80087d6:	2b08      	cmp	r3, #8
 80087d8:	d11b      	bne.n	8008812 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f06f 0208 	mvn.w	r2, #8
 80087e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2204      	movs	r2, #4
 80087e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	f003 0303 	and.w	r3, r3, #3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f9c5 	bl	8008b88 <HAL_TIM_IC_CaptureCallback>
 80087fe:	e005      	b.n	800880c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f9b7 	bl	8008b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f9c8 	bl	8008b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	f003 0310 	and.w	r3, r3, #16
 800881c:	2b10      	cmp	r3, #16
 800881e:	d122      	bne.n	8008866 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	f003 0310 	and.w	r3, r3, #16
 800882a:	2b10      	cmp	r3, #16
 800882c:	d11b      	bne.n	8008866 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f06f 0210 	mvn.w	r2, #16
 8008836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2208      	movs	r2, #8
 800883c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f99b 	bl	8008b88 <HAL_TIM_IC_CaptureCallback>
 8008852:	e005      	b.n	8008860 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f98d 	bl	8008b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f99e 	bl	8008b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b01      	cmp	r3, #1
 8008872:	d10e      	bne.n	8008892 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	2b01      	cmp	r3, #1
 8008880:	d107      	bne.n	8008892 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f06f 0201 	mvn.w	r2, #1
 800888a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7f8 fb4b 	bl	8000f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800889c:	2b80      	cmp	r3, #128	; 0x80
 800889e:	d10e      	bne.n	80088be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088aa:	2b80      	cmp	r3, #128	; 0x80
 80088ac:	d107      	bne.n	80088be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fcff 	bl	80092bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088cc:	d10e      	bne.n	80088ec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d8:	2b80      	cmp	r3, #128	; 0x80
 80088da:	d107      	bne.n	80088ec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fcf2 	bl	80092d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f6:	2b40      	cmp	r3, #64	; 0x40
 80088f8:	d10e      	bne.n	8008918 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008904:	2b40      	cmp	r3, #64	; 0x40
 8008906:	d107      	bne.n	8008918 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f94c 	bl	8008bb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	f003 0320 	and.w	r3, r3, #32
 8008922:	2b20      	cmp	r3, #32
 8008924:	d10e      	bne.n	8008944 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f003 0320 	and.w	r3, r3, #32
 8008930:	2b20      	cmp	r3, #32
 8008932:	d107      	bne.n	8008944 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f06f 0220 	mvn.w	r2, #32
 800893c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fcb2 	bl	80092a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008944:	bf00      	nop
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008962:	2b01      	cmp	r3, #1
 8008964:	d101      	bne.n	800896a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008966:	2302      	movs	r3, #2
 8008968:	e0ff      	b.n	8008b6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b14      	cmp	r3, #20
 8008976:	f200 80f0 	bhi.w	8008b5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800897a:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	080089d5 	.word	0x080089d5
 8008984:	08008b5b 	.word	0x08008b5b
 8008988:	08008b5b 	.word	0x08008b5b
 800898c:	08008b5b 	.word	0x08008b5b
 8008990:	08008a15 	.word	0x08008a15
 8008994:	08008b5b 	.word	0x08008b5b
 8008998:	08008b5b 	.word	0x08008b5b
 800899c:	08008b5b 	.word	0x08008b5b
 80089a0:	08008a57 	.word	0x08008a57
 80089a4:	08008b5b 	.word	0x08008b5b
 80089a8:	08008b5b 	.word	0x08008b5b
 80089ac:	08008b5b 	.word	0x08008b5b
 80089b0:	08008a97 	.word	0x08008a97
 80089b4:	08008b5b 	.word	0x08008b5b
 80089b8:	08008b5b 	.word	0x08008b5b
 80089bc:	08008b5b 	.word	0x08008b5b
 80089c0:	08008ad9 	.word	0x08008ad9
 80089c4:	08008b5b 	.word	0x08008b5b
 80089c8:	08008b5b 	.word	0x08008b5b
 80089cc:	08008b5b 	.word	0x08008b5b
 80089d0:	08008b19 	.word	0x08008b19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68b9      	ldr	r1, [r7, #8]
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 f956 	bl	8008c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	699a      	ldr	r2, [r3, #24]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f042 0208 	orr.w	r2, r2, #8
 80089ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	699a      	ldr	r2, [r3, #24]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f022 0204 	bic.w	r2, r2, #4
 80089fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6999      	ldr	r1, [r3, #24]
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	619a      	str	r2, [r3, #24]
      break;
 8008a12:	e0a5      	b.n	8008b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 f9b2 	bl	8008d84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699a      	ldr	r2, [r3, #24]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	699a      	ldr	r2, [r3, #24]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6999      	ldr	r1, [r3, #24]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	021a      	lsls	r2, r3, #8
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	430a      	orrs	r2, r1
 8008a52:	619a      	str	r2, [r3, #24]
      break;
 8008a54:	e084      	b.n	8008b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68b9      	ldr	r1, [r7, #8]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 fa0b 	bl	8008e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69da      	ldr	r2, [r3, #28]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f042 0208 	orr.w	r2, r2, #8
 8008a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69da      	ldr	r2, [r3, #28]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f022 0204 	bic.w	r2, r2, #4
 8008a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	69d9      	ldr	r1, [r3, #28]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	691a      	ldr	r2, [r3, #16]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	430a      	orrs	r2, r1
 8008a92:	61da      	str	r2, [r3, #28]
      break;
 8008a94:	e064      	b.n	8008b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 fa63 	bl	8008f68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69da      	ldr	r2, [r3, #28]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69da      	ldr	r2, [r3, #28]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	69d9      	ldr	r1, [r3, #28]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	021a      	lsls	r2, r3, #8
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	61da      	str	r2, [r3, #28]
      break;
 8008ad6:	e043      	b.n	8008b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68b9      	ldr	r1, [r7, #8]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 faa0 	bl	8009024 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f042 0208 	orr.w	r2, r2, #8
 8008af2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f022 0204 	bic.w	r2, r2, #4
 8008b02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	691a      	ldr	r2, [r3, #16]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b16:	e023      	b.n	8008b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68b9      	ldr	r1, [r7, #8]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 fad8 	bl	80090d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	021a      	lsls	r2, r3, #8
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b58:	e002      	b.n	8008b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop

08008b74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a2a      	ldr	r2, [pc, #168]	; (8008c80 <TIM_Base_SetConfig+0xbc>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d003      	beq.n	8008be4 <TIM_Base_SetConfig+0x20>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be2:	d108      	bne.n	8008bf6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a21      	ldr	r2, [pc, #132]	; (8008c80 <TIM_Base_SetConfig+0xbc>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d00b      	beq.n	8008c16 <TIM_Base_SetConfig+0x52>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c04:	d007      	beq.n	8008c16 <TIM_Base_SetConfig+0x52>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a1e      	ldr	r2, [pc, #120]	; (8008c84 <TIM_Base_SetConfig+0xc0>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d003      	beq.n	8008c16 <TIM_Base_SetConfig+0x52>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a1d      	ldr	r2, [pc, #116]	; (8008c88 <TIM_Base_SetConfig+0xc4>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d108      	bne.n	8008c28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	689a      	ldr	r2, [r3, #8]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a0c      	ldr	r2, [pc, #48]	; (8008c80 <TIM_Base_SetConfig+0xbc>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d007      	beq.n	8008c64 <TIM_Base_SetConfig+0xa0>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a0b      	ldr	r2, [pc, #44]	; (8008c84 <TIM_Base_SetConfig+0xc0>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d003      	beq.n	8008c64 <TIM_Base_SetConfig+0xa0>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a0a      	ldr	r2, [pc, #40]	; (8008c88 <TIM_Base_SetConfig+0xc4>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d103      	bne.n	8008c6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	691a      	ldr	r2, [r3, #16]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	615a      	str	r2, [r3, #20]
}
 8008c72:	bf00      	nop
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	40012c00 	.word	0x40012c00
 8008c84:	40014400 	.word	0x40014400
 8008c88:	40014800 	.word	0x40014800

08008c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	f023 0201 	bic.w	r2, r3, #1
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0303 	bic.w	r3, r3, #3
 8008cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f023 0302 	bic.w	r3, r3, #2
 8008cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a24      	ldr	r2, [pc, #144]	; (8008d78 <TIM_OC1_SetConfig+0xec>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d007      	beq.n	8008cfc <TIM_OC1_SetConfig+0x70>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a23      	ldr	r2, [pc, #140]	; (8008d7c <TIM_OC1_SetConfig+0xf0>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d003      	beq.n	8008cfc <TIM_OC1_SetConfig+0x70>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a22      	ldr	r2, [pc, #136]	; (8008d80 <TIM_OC1_SetConfig+0xf4>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d10c      	bne.n	8008d16 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f023 0308 	bic.w	r3, r3, #8
 8008d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f023 0304 	bic.w	r3, r3, #4
 8008d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a17      	ldr	r2, [pc, #92]	; (8008d78 <TIM_OC1_SetConfig+0xec>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d007      	beq.n	8008d2e <TIM_OC1_SetConfig+0xa2>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a17      	ldr	r2, [pc, #92]	; (8008d80 <TIM_OC1_SetConfig+0xf4>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d003      	beq.n	8008d2e <TIM_OC1_SetConfig+0xa2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a14      	ldr	r2, [pc, #80]	; (8008d7c <TIM_OC1_SetConfig+0xf0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d111      	bne.n	8008d52 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	621a      	str	r2, [r3, #32]
}
 8008d6c:	bf00      	nop
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	40012c00 	.word	0x40012c00
 8008d7c:	40014800 	.word	0x40014800
 8008d80:	40014400 	.word	0x40014400

08008d84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	f023 0210 	bic.w	r2, r3, #16
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	021b      	lsls	r3, r3, #8
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f023 0320 	bic.w	r3, r3, #32
 8008dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a22      	ldr	r2, [pc, #136]	; (8008e6c <TIM_OC2_SetConfig+0xe8>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d10d      	bne.n	8008e04 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a19      	ldr	r2, [pc, #100]	; (8008e6c <TIM_OC2_SetConfig+0xe8>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d007      	beq.n	8008e1c <TIM_OC2_SetConfig+0x98>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a18      	ldr	r2, [pc, #96]	; (8008e70 <TIM_OC2_SetConfig+0xec>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d003      	beq.n	8008e1c <TIM_OC2_SetConfig+0x98>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a17      	ldr	r2, [pc, #92]	; (8008e74 <TIM_OC2_SetConfig+0xf0>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d113      	bne.n	8008e44 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	621a      	str	r2, [r3, #32]
}
 8008e5e:	bf00      	nop
 8008e60:	371c      	adds	r7, #28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	40012c00 	.word	0x40012c00
 8008e70:	40014400 	.word	0x40014400
 8008e74:	40014800 	.word	0x40014800

08008e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 0303 	bic.w	r3, r3, #3
 8008eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	021b      	lsls	r3, r3, #8
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a21      	ldr	r2, [pc, #132]	; (8008f5c <TIM_OC3_SetConfig+0xe4>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d10d      	bne.n	8008ef6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	021b      	lsls	r3, r3, #8
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a18      	ldr	r2, [pc, #96]	; (8008f5c <TIM_OC3_SetConfig+0xe4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d007      	beq.n	8008f0e <TIM_OC3_SetConfig+0x96>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a17      	ldr	r2, [pc, #92]	; (8008f60 <TIM_OC3_SetConfig+0xe8>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d003      	beq.n	8008f0e <TIM_OC3_SetConfig+0x96>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a16      	ldr	r2, [pc, #88]	; (8008f64 <TIM_OC3_SetConfig+0xec>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d113      	bne.n	8008f36 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	011b      	lsls	r3, r3, #4
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	011b      	lsls	r3, r3, #4
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	621a      	str	r2, [r3, #32]
}
 8008f50:	bf00      	nop
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	40012c00 	.word	0x40012c00
 8008f60:	40014400 	.word	0x40014400
 8008f64:	40014800 	.word	0x40014800

08008f68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	021b      	lsls	r3, r3, #8
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	031b      	lsls	r3, r3, #12
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a14      	ldr	r2, [pc, #80]	; (8009018 <TIM_OC4_SetConfig+0xb0>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d007      	beq.n	8008fdc <TIM_OC4_SetConfig+0x74>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a13      	ldr	r2, [pc, #76]	; (800901c <TIM_OC4_SetConfig+0xb4>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d003      	beq.n	8008fdc <TIM_OC4_SetConfig+0x74>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a12      	ldr	r2, [pc, #72]	; (8009020 <TIM_OC4_SetConfig+0xb8>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d109      	bne.n	8008ff0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fe2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	019b      	lsls	r3, r3, #6
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	621a      	str	r2, [r3, #32]
}
 800900a:	bf00      	nop
 800900c:	371c      	adds	r7, #28
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	40012c00 	.word	0x40012c00
 800901c:	40014400 	.word	0x40014400
 8009020:	40014800 	.word	0x40014800

08009024 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800904a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	4313      	orrs	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009068:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	041b      	lsls	r3, r3, #16
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	4313      	orrs	r3, r2
 8009074:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a13      	ldr	r2, [pc, #76]	; (80090c8 <TIM_OC5_SetConfig+0xa4>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d007      	beq.n	800908e <TIM_OC5_SetConfig+0x6a>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a12      	ldr	r2, [pc, #72]	; (80090cc <TIM_OC5_SetConfig+0xa8>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d003      	beq.n	800908e <TIM_OC5_SetConfig+0x6a>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a11      	ldr	r2, [pc, #68]	; (80090d0 <TIM_OC5_SetConfig+0xac>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d109      	bne.n	80090a2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009094:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	021b      	lsls	r3, r3, #8
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4313      	orrs	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	621a      	str	r2, [r3, #32]
}
 80090bc:	bf00      	nop
 80090be:	371c      	adds	r7, #28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	40012c00 	.word	0x40012c00
 80090cc:	40014400 	.word	0x40014400
 80090d0:	40014800 	.word	0x40014800

080090d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	021b      	lsls	r3, r3, #8
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	4313      	orrs	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800911a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	051b      	lsls	r3, r3, #20
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	4313      	orrs	r3, r2
 8009126:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a14      	ldr	r2, [pc, #80]	; (800917c <TIM_OC6_SetConfig+0xa8>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d007      	beq.n	8009140 <TIM_OC6_SetConfig+0x6c>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a13      	ldr	r2, [pc, #76]	; (8009180 <TIM_OC6_SetConfig+0xac>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d003      	beq.n	8009140 <TIM_OC6_SetConfig+0x6c>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a12      	ldr	r2, [pc, #72]	; (8009184 <TIM_OC6_SetConfig+0xb0>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d109      	bne.n	8009154 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009146:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	029b      	lsls	r3, r3, #10
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	4313      	orrs	r3, r2
 8009152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	621a      	str	r2, [r3, #32]
}
 800916e:	bf00      	nop
 8009170:	371c      	adds	r7, #28
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	40012c00 	.word	0x40012c00
 8009180:	40014400 	.word	0x40014400
 8009184:	40014800 	.word	0x40014800

08009188 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800919c:	2b01      	cmp	r3, #1
 800919e:	d101      	bne.n	80091a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091a0:	2302      	movs	r3, #2
 80091a2:	e078      	b.n	8009296 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920a:	4313      	orrs	r3, r2
 800920c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	041b      	lsls	r3, r3, #16
 800921a:	4313      	orrs	r3, r2
 800921c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a20      	ldr	r2, [pc, #128]	; (80092a4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d106      	bne.n	8009236 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	4313      	orrs	r3, r2
 8009234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a1a      	ldr	r2, [pc, #104]	; (80092a4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d121      	bne.n	8009284 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	051b      	lsls	r3, r3, #20
 800924c:	4313      	orrs	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	4313      	orrs	r3, r2
 800925c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009268:	4313      	orrs	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a0c      	ldr	r2, [pc, #48]	; (80092a4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d106      	bne.n	8009284 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	4313      	orrs	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	40012c00 	.word	0x40012c00

080092a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80092f4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80092f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009312:	b480      	push	{r7}
 8009314:	b085      	sub	sp, #20
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800931a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800931e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009326:	b29a      	uxth	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	b29b      	uxth	r3, r3
 800932c:	43db      	mvns	r3, r3
 800932e:	b29b      	uxth	r3, r3
 8009330:	4013      	ands	r3, r2
 8009332:	b29a      	uxth	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009348:	b084      	sub	sp, #16
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	f107 0014 	add.w	r0, r7, #20
 8009356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	b004      	add	sp, #16
 8009388:	4770      	bx	lr
	...

0800938c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800938c:	b480      	push	{r7}
 800938e:	b09d      	sub	sp, #116	; 0x74
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4413      	add	r3, r2
 80093a6:	881b      	ldrh	r3, [r3, #0]
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80093ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	78db      	ldrb	r3, [r3, #3]
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d81f      	bhi.n	80093fe <USB_ActivateEndpoint+0x72>
 80093be:	a201      	add	r2, pc, #4	; (adr r2, 80093c4 <USB_ActivateEndpoint+0x38>)
 80093c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c4:	080093d5 	.word	0x080093d5
 80093c8:	080093f1 	.word	0x080093f1
 80093cc:	08009407 	.word	0x08009407
 80093d0:	080093e3 	.word	0x080093e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80093d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80093d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80093e0:	e012      	b.n	8009408 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80093e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80093e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80093ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80093ee:	e00b      	b.n	8009408 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80093f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80093f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80093f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80093fc:	e004      	b.n	8009408 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009404:	e000      	b.n	8009408 <USB_ActivateEndpoint+0x7c>
      break;
 8009406:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	441a      	add	r2, r3
 8009412:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800941a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800941e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009426:	b29b      	uxth	r3, r3
 8009428:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	b29b      	uxth	r3, r3
 8009438:	b21b      	sxth	r3, r3
 800943a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800943e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009442:	b21a      	sxth	r2, r3
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	b21b      	sxth	r3, r3
 800944a:	4313      	orrs	r3, r2
 800944c:	b21b      	sxth	r3, r3
 800944e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	441a      	add	r2, r3
 800945c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800946c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009470:	b29b      	uxth	r3, r3
 8009472:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	7b1b      	ldrb	r3, [r3, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	f040 8149 	bne.w	8009710 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	785b      	ldrb	r3, [r3, #1]
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 8084 	beq.w	8009590 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	61bb      	str	r3, [r7, #24]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009492:	b29b      	uxth	r3, r3
 8009494:	461a      	mov	r2, r3
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	4413      	add	r3, r2
 800949a:	61bb      	str	r3, [r7, #24]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	00da      	lsls	r2, r3, #3
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	88db      	ldrh	r3, [r3, #6]
 80094b0:	085b      	lsrs	r3, r3, #1
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	881b      	ldrh	r3, [r3, #0]
 80094c8:	827b      	strh	r3, [r7, #18]
 80094ca:	8a7b      	ldrh	r3, [r7, #18]
 80094cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d01b      	beq.n	800950c <USB_ActivateEndpoint+0x180>
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ea:	823b      	strh	r3, [r7, #16]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	441a      	add	r2, r3
 80094f6:	8a3b      	ldrh	r3, [r7, #16]
 80094f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009504:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009508:	b29b      	uxth	r3, r3
 800950a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	78db      	ldrb	r3, [r3, #3]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d020      	beq.n	8009556 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	b29b      	uxth	r3, r3
 8009522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800952a:	81bb      	strh	r3, [r7, #12]
 800952c:	89bb      	ldrh	r3, [r7, #12]
 800952e:	f083 0320 	eor.w	r3, r3, #32
 8009532:	81bb      	strh	r3, [r7, #12]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	441a      	add	r2, r3
 800953e:	89bb      	ldrh	r3, [r7, #12]
 8009540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800954c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009550:	b29b      	uxth	r3, r3
 8009552:	8013      	strh	r3, [r2, #0]
 8009554:	e2a6      	b.n	8009aa4 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	b29b      	uxth	r3, r3
 8009564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800956c:	81fb      	strh	r3, [r7, #14]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	441a      	add	r2, r3
 8009578:	89fb      	ldrh	r3, [r7, #14]
 800957a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800957e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800958a:	b29b      	uxth	r3, r3
 800958c:	8013      	strh	r3, [r2, #0]
 800958e:	e289      	b.n	8009aa4 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	633b      	str	r3, [r7, #48]	; 0x30
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800959a:	b29b      	uxth	r3, r3
 800959c:	461a      	mov	r2, r3
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	4413      	add	r3, r2
 80095a2:	633b      	str	r3, [r7, #48]	; 0x30
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	00da      	lsls	r2, r3, #3
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	4413      	add	r3, r2
 80095ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	88db      	ldrh	r3, [r3, #6]
 80095b8:	085b      	lsrs	r3, r3, #1
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	b29a      	uxth	r2, r3
 80095c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	461a      	mov	r2, r3
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	4413      	add	r3, r2
 80095d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	00da      	lsls	r2, r3, #3
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	4413      	add	r3, r2
 80095e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095e6:	627b      	str	r3, [r7, #36]	; 0x24
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	2b3e      	cmp	r3, #62	; 0x3e
 80095ee:	d918      	bls.n	8009622 <USB_ActivateEndpoint+0x296>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	095b      	lsrs	r3, r3, #5
 80095f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	f003 031f 	and.w	r3, r3, #31
 8009600:	2b00      	cmp	r3, #0
 8009602:	d102      	bne.n	800960a <USB_ActivateEndpoint+0x27e>
 8009604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009606:	3b01      	subs	r3, #1
 8009608:	66bb      	str	r3, [r7, #104]	; 0x68
 800960a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800960c:	b29b      	uxth	r3, r3
 800960e:	029b      	lsls	r3, r3, #10
 8009610:	b29b      	uxth	r3, r3
 8009612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800961a:	b29a      	uxth	r2, r3
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	801a      	strh	r2, [r3, #0]
 8009620:	e029      	b.n	8009676 <USB_ActivateEndpoint+0x2ea>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d112      	bne.n	8009650 <USB_ActivateEndpoint+0x2c4>
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	881b      	ldrh	r3, [r3, #0]
 800962e:	b29b      	uxth	r3, r3
 8009630:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009634:	b29a      	uxth	r2, r3
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	801a      	strh	r2, [r3, #0]
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	b29b      	uxth	r3, r3
 8009640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009648:	b29a      	uxth	r2, r3
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	801a      	strh	r2, [r3, #0]
 800964e:	e012      	b.n	8009676 <USB_ActivateEndpoint+0x2ea>
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	085b      	lsrs	r3, r3, #1
 8009656:	66bb      	str	r3, [r7, #104]	; 0x68
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <USB_ActivateEndpoint+0x2de>
 8009664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009666:	3301      	adds	r3, #1
 8009668:	66bb      	str	r3, [r7, #104]	; 0x68
 800966a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800966c:	b29b      	uxth	r3, r3
 800966e:	029b      	lsls	r3, r3, #10
 8009670:	b29a      	uxth	r2, r3
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	847b      	strh	r3, [r7, #34]	; 0x22
 8009684:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d01b      	beq.n	80096c6 <USB_ActivateEndpoint+0x33a>
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	b29b      	uxth	r3, r3
 800969c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a4:	843b      	strh	r3, [r7, #32]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	441a      	add	r2, r3
 80096b0:	8c3b      	ldrh	r3, [r7, #32]
 80096b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096dc:	83fb      	strh	r3, [r7, #30]
 80096de:	8bfb      	ldrh	r3, [r7, #30]
 80096e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80096e4:	83fb      	strh	r3, [r7, #30]
 80096e6:	8bfb      	ldrh	r3, [r7, #30]
 80096e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80096ec:	83fb      	strh	r3, [r7, #30]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	441a      	add	r2, r3
 80096f8:	8bfb      	ldrh	r3, [r7, #30]
 80096fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800970a:	b29b      	uxth	r3, r3
 800970c:	8013      	strh	r3, [r2, #0]
 800970e:	e1c9      	b.n	8009aa4 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	78db      	ldrb	r3, [r3, #3]
 8009714:	2b02      	cmp	r3, #2
 8009716:	d11e      	bne.n	8009756 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	881b      	ldrh	r3, [r3, #0]
 8009724:	b29b      	uxth	r3, r3
 8009726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800972a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	441a      	add	r2, r3
 800973c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009748:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800974c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009750:	b29b      	uxth	r3, r3
 8009752:	8013      	strh	r3, [r2, #0]
 8009754:	e01d      	b.n	8009792 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	b29b      	uxth	r3, r3
 8009764:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800976c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	441a      	add	r2, r3
 800977a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800977e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800978a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800978e:	b29b      	uxth	r3, r3
 8009790:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800979c:	b29b      	uxth	r3, r3
 800979e:	461a      	mov	r2, r3
 80097a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097a2:	4413      	add	r3, r2
 80097a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	00da      	lsls	r2, r3, #3
 80097ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	891b      	ldrh	r3, [r3, #8]
 80097ba:	085b      	lsrs	r3, r3, #1
 80097bc:	b29b      	uxth	r3, r3
 80097be:	005b      	lsls	r3, r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097c4:	801a      	strh	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	657b      	str	r3, [r7, #84]	; 0x54
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	461a      	mov	r2, r3
 80097d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097d6:	4413      	add	r3, r2
 80097d8:	657b      	str	r3, [r7, #84]	; 0x54
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	00da      	lsls	r2, r3, #3
 80097e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097e2:	4413      	add	r3, r2
 80097e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097e8:	653b      	str	r3, [r7, #80]	; 0x50
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	895b      	ldrh	r3, [r3, #10]
 80097ee:	085b      	lsrs	r3, r3, #1
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	005b      	lsls	r3, r3, #1
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097f8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	785b      	ldrb	r3, [r3, #1]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f040 8093 	bne.w	800992a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009814:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d01b      	beq.n	8009858 <USB_ActivateEndpoint+0x4cc>
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	881b      	ldrh	r3, [r3, #0]
 800982c:	b29b      	uxth	r3, r3
 800982e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009836:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	441a      	add	r2, r3
 8009842:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800984c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009854:	b29b      	uxth	r3, r3
 8009856:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009866:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986c:	2b00      	cmp	r3, #0
 800986e:	d01b      	beq.n	80098a8 <USB_ActivateEndpoint+0x51c>
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	b29b      	uxth	r3, r3
 800987e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009886:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	441a      	add	r2, r3
 8009892:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800989c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098be:	873b      	strh	r3, [r7, #56]	; 0x38
 80098c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80098c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80098c6:	873b      	strh	r3, [r7, #56]	; 0x38
 80098c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80098ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80098ce:	873b      	strh	r3, [r7, #56]	; 0x38
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	441a      	add	r2, r3
 80098da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80098dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009906:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	441a      	add	r2, r3
 8009912:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800991c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009924:	b29b      	uxth	r3, r3
 8009926:	8013      	strh	r3, [r2, #0]
 8009928:	e0bc      	b.n	8009aa4 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800993a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800993e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d01d      	beq.n	8009982 <USB_ActivateEndpoint+0x5f6>
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	b29b      	uxth	r3, r3
 8009954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800995c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	441a      	add	r2, r3
 800996a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800996e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009976:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800997a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800997e:	b29b      	uxth	r3, r3
 8009980:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009992:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999a:	2b00      	cmp	r3, #0
 800999c:	d01d      	beq.n	80099da <USB_ActivateEndpoint+0x64e>
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	881b      	ldrh	r3, [r3, #0]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	441a      	add	r2, r3
 80099c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80099c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	78db      	ldrb	r3, [r3, #3]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d024      	beq.n	8009a2c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	881b      	ldrh	r3, [r3, #0]
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80099fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009a00:	f083 0320 	eor.w	r3, r3, #32
 8009a04:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	441a      	add	r2, r3
 8009a12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	8013      	strh	r3, [r2, #0]
 8009a2a:	e01d      	b.n	8009a68 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a42:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	441a      	add	r2, r3
 8009a50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	881b      	ldrh	r3, [r3, #0]
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	441a      	add	r2, r3
 8009a8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009aa4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3774      	adds	r7, #116	; 0x74
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b08d      	sub	sp, #52	; 0x34
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	7b1b      	ldrb	r3, [r3, #12]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f040 808e 	bne.w	8009be4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	785b      	ldrb	r3, [r3, #1]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d044      	beq.n	8009b5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	81bb      	strh	r3, [r7, #12]
 8009ade:	89bb      	ldrh	r3, [r7, #12]
 8009ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d01b      	beq.n	8009b20 <USB_DeactivateEndpoint+0x6c>
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	881b      	ldrh	r3, [r3, #0]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009afe:	817b      	strh	r3, [r7, #10]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	441a      	add	r2, r3
 8009b0a:	897b      	ldrh	r3, [r7, #10]
 8009b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	881b      	ldrh	r3, [r3, #0]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b36:	813b      	strh	r3, [r7, #8]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	441a      	add	r2, r3
 8009b42:	893b      	ldrh	r3, [r7, #8]
 8009b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	8013      	strh	r3, [r2, #0]
 8009b58:	e192      	b.n	8009e80 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	827b      	strh	r3, [r7, #18]
 8009b68:	8a7b      	ldrh	r3, [r7, #18]
 8009b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d01b      	beq.n	8009baa <USB_DeactivateEndpoint+0xf6>
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b88:	823b      	strh	r3, [r7, #16]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	441a      	add	r2, r3
 8009b94:	8a3b      	ldrh	r3, [r7, #16]
 8009b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	881b      	ldrh	r3, [r3, #0]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bc0:	81fb      	strh	r3, [r7, #14]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	441a      	add	r2, r3
 8009bcc:	89fb      	ldrh	r3, [r7, #14]
 8009bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	8013      	strh	r3, [r2, #0]
 8009be2:	e14d      	b.n	8009e80 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	785b      	ldrb	r3, [r3, #1]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f040 80a5 	bne.w	8009d38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	843b      	strh	r3, [r7, #32]
 8009bfc:	8c3b      	ldrh	r3, [r7, #32]
 8009bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d01b      	beq.n	8009c3e <USB_DeactivateEndpoint+0x18a>
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c1c:	83fb      	strh	r3, [r7, #30]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	441a      	add	r2, r3
 8009c28:	8bfb      	ldrh	r3, [r7, #30]
 8009c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	881b      	ldrh	r3, [r3, #0]
 8009c4a:	83bb      	strh	r3, [r7, #28]
 8009c4c:	8bbb      	ldrh	r3, [r7, #28]
 8009c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d01b      	beq.n	8009c8e <USB_DeactivateEndpoint+0x1da>
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c6c:	837b      	strh	r3, [r7, #26]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	441a      	add	r2, r3
 8009c78:	8b7b      	ldrh	r3, [r7, #26]
 8009c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca4:	833b      	strh	r3, [r7, #24]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	441a      	add	r2, r3
 8009cb0:	8b3b      	ldrh	r3, [r7, #24]
 8009cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cdc:	82fb      	strh	r3, [r7, #22]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	441a      	add	r2, r3
 8009ce8:	8afb      	ldrh	r3, [r7, #22]
 8009cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4413      	add	r3, r2
 8009d08:	881b      	ldrh	r3, [r3, #0]
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d14:	82bb      	strh	r3, [r7, #20]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	441a      	add	r2, r3
 8009d20:	8abb      	ldrh	r3, [r7, #20]
 8009d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	8013      	strh	r3, [r2, #0]
 8009d36:	e0a3      	b.n	8009e80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	881b      	ldrh	r3, [r3, #0]
 8009d44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009d46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d01b      	beq.n	8009d88 <USB_DeactivateEndpoint+0x2d4>
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	441a      	add	r2, r3
 8009d72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009d96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01b      	beq.n	8009dd8 <USB_DeactivateEndpoint+0x324>
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db6:	853b      	strh	r3, [r7, #40]	; 0x28
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	441a      	add	r2, r3
 8009dc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	881b      	ldrh	r3, [r3, #0]
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	441a      	add	r2, r3
 8009dfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	881b      	ldrh	r3, [r3, #0]
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	441a      	add	r2, r3
 8009e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	881b      	ldrh	r3, [r3, #0]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	441a      	add	r2, r3
 8009e6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3734      	adds	r7, #52	; 0x34
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b0c2      	sub	sp, #264	; 0x108
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	1d3b      	adds	r3, r7, #4
 8009e96:	6018      	str	r0, [r3, #0]
 8009e98:	463b      	mov	r3, r7
 8009e9a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e9c:	463b      	mov	r3, r7
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	785b      	ldrb	r3, [r3, #1]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	f040 8509 	bne.w	800a8ba <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009ea8:	463b      	mov	r3, r7
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	699a      	ldr	r2, [r3, #24]
 8009eae:	463b      	mov	r3, r7
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d905      	bls.n	8009ec4 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8009eb8:	463b      	mov	r3, r7
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009ec2:	e004      	b.n	8009ece <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009ec4:	463b      	mov	r3, r7
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009ece:	463b      	mov	r3, r7
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	7b1b      	ldrb	r3, [r3, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d128      	bne.n	8009f2a <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009ed8:	463b      	mov	r3, r7
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6959      	ldr	r1, [r3, #20]
 8009ede:	463b      	mov	r3, r7
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	88da      	ldrh	r2, [r3, #6]
 8009ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	1d38      	adds	r0, r7, #4
 8009eec:	6800      	ldr	r0, [r0, #0]
 8009eee:	f001 f9da 	bl	800b2a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009ef2:	1d3b      	adds	r3, r7, #4
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	613b      	str	r3, [r7, #16]
 8009ef8:	1d3b      	adds	r3, r7, #4
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	461a      	mov	r2, r3
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	4413      	add	r3, r2
 8009f08:	613b      	str	r3, [r7, #16]
 8009f0a:	463b      	mov	r3, r7
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	00da      	lsls	r2, r3, #3
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	4413      	add	r3, r2
 8009f16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	801a      	strh	r2, [r3, #0]
 8009f26:	f000 bc9f 	b.w	800a868 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009f2a:	463b      	mov	r3, r7
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	78db      	ldrb	r3, [r3, #3]
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	f040 8347 	bne.w	800a5c4 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009f36:	463b      	mov	r3, r7
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6a1a      	ldr	r2, [r3, #32]
 8009f3c:	463b      	mov	r3, r7
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	f240 82eb 	bls.w	800a51e <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009f48:	1d3b      	adds	r3, r7, #4
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	463b      	mov	r3, r7
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4413      	add	r3, r2
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f62:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009f66:	1d3b      	adds	r3, r7, #4
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	463b      	mov	r3, r7
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	441a      	add	r2, r3
 8009f74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009f8c:	463b      	mov	r3, r7
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6a1a      	ldr	r2, [r3, #32]
 8009f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f96:	1ad2      	subs	r2, r2, r3
 8009f98:	463b      	mov	r3, r7
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009f9e:	1d3b      	adds	r3, r7, #4
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	463b      	mov	r3, r7
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	881b      	ldrh	r3, [r3, #0]
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f000 8159 	beq.w	800a26c <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009fba:	1d3b      	adds	r3, r7, #4
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8009fc0:	463b      	mov	r3, r7
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	785b      	ldrb	r3, [r3, #1]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d164      	bne.n	800a094 <USB_EPStartXfer+0x206>
 8009fca:	1d3b      	adds	r3, r7, #4
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fd0:	1d3b      	adds	r3, r7, #4
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	461a      	mov	r2, r3
 8009fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fde:	4413      	add	r3, r2
 8009fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fe2:	463b      	mov	r3, r7
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	00da      	lsls	r2, r3, #3
 8009fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fec:	4413      	add	r3, r2
 8009fee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff8:	2b3e      	cmp	r3, #62	; 0x3e
 8009ffa:	d91c      	bls.n	800a036 <USB_EPStartXfer+0x1a8>
 8009ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a000:	095b      	lsrs	r3, r3, #5
 800a002:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a00a:	f003 031f 	and.w	r3, r3, #31
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d104      	bne.n	800a01c <USB_EPStartXfer+0x18e>
 800a012:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a016:	3b01      	subs	r3, #1
 800a018:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a01c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a020:	b29b      	uxth	r3, r3
 800a022:	029b      	lsls	r3, r3, #10
 800a024:	b29b      	uxth	r3, r3
 800a026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a02a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a02e:	b29a      	uxth	r2, r3
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	801a      	strh	r2, [r3, #0]
 800a034:	e04a      	b.n	800a0cc <USB_EPStartXfer+0x23e>
 800a036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d112      	bne.n	800a064 <USB_EPStartXfer+0x1d6>
 800a03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	b29b      	uxth	r3, r3
 800a044:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a048:	b29a      	uxth	r2, r3
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	801a      	strh	r2, [r3, #0]
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	b29b      	uxth	r3, r3
 800a054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	801a      	strh	r2, [r3, #0]
 800a062:	e033      	b.n	800a0cc <USB_EPStartXfer+0x23e>
 800a064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a068:	085b      	lsrs	r3, r3, #1
 800a06a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d004      	beq.n	800a084 <USB_EPStartXfer+0x1f6>
 800a07a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a07e:	3301      	adds	r3, #1
 800a080:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a084:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a088:	b29b      	uxth	r3, r3
 800a08a:	029b      	lsls	r3, r3, #10
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	801a      	strh	r2, [r3, #0]
 800a092:	e01b      	b.n	800a0cc <USB_EPStartXfer+0x23e>
 800a094:	463b      	mov	r3, r7
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	785b      	ldrb	r3, [r3, #1]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d116      	bne.n	800a0cc <USB_EPStartXfer+0x23e>
 800a09e:	1d3b      	adds	r3, r7, #4
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ac:	4413      	add	r3, r2
 800a0ae:	633b      	str	r3, [r7, #48]	; 0x30
 800a0b0:	463b      	mov	r3, r7
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	00da      	lsls	r2, r3, #3
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a0cc:	463b      	mov	r3, r7
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	895b      	ldrh	r3, [r3, #10]
 800a0d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0d6:	463b      	mov	r3, r7
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	6959      	ldr	r1, [r3, #20]
 800a0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a0e6:	1d38      	adds	r0, r7, #4
 800a0e8:	6800      	ldr	r0, [r0, #0]
 800a0ea:	f001 f8dc 	bl	800b2a6 <USB_WritePMA>
            ep->xfer_buff += len;
 800a0ee:	463b      	mov	r3, r7
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	695a      	ldr	r2, [r3, #20]
 800a0f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0f8:	441a      	add	r2, r3
 800a0fa:	463b      	mov	r3, r7
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a100:	463b      	mov	r3, r7
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6a1a      	ldr	r2, [r3, #32]
 800a106:	463b      	mov	r3, r7
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d909      	bls.n	800a124 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800a110:	463b      	mov	r3, r7
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6a1a      	ldr	r2, [r3, #32]
 800a116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a11a:	1ad2      	subs	r2, r2, r3
 800a11c:	463b      	mov	r3, r7
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	621a      	str	r2, [r3, #32]
 800a122:	e008      	b.n	800a136 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800a124:	463b      	mov	r3, r7
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a12e:	463b      	mov	r3, r7
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2200      	movs	r2, #0
 800a134:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a136:	463b      	mov	r3, r7
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	785b      	ldrb	r3, [r3, #1]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d164      	bne.n	800a20a <USB_EPStartXfer+0x37c>
 800a140:	1d3b      	adds	r3, r7, #4
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	61bb      	str	r3, [r7, #24]
 800a146:	1d3b      	adds	r3, r7, #4
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a14e:	b29b      	uxth	r3, r3
 800a150:	461a      	mov	r2, r3
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	4413      	add	r3, r2
 800a156:	61bb      	str	r3, [r7, #24]
 800a158:	463b      	mov	r3, r7
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	00da      	lsls	r2, r3, #3
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	4413      	add	r3, r2
 800a164:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a16e:	2b3e      	cmp	r3, #62	; 0x3e
 800a170:	d91c      	bls.n	800a1ac <USB_EPStartXfer+0x31e>
 800a172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a176:	095b      	lsrs	r3, r3, #5
 800a178:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a180:	f003 031f 	and.w	r3, r3, #31
 800a184:	2b00      	cmp	r3, #0
 800a186:	d104      	bne.n	800a192 <USB_EPStartXfer+0x304>
 800a188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a18c:	3b01      	subs	r3, #1
 800a18e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a196:	b29b      	uxth	r3, r3
 800a198:	029b      	lsls	r3, r3, #10
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	801a      	strh	r2, [r3, #0]
 800a1aa:	e04d      	b.n	800a248 <USB_EPStartXfer+0x3ba>
 800a1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d112      	bne.n	800a1da <USB_EPStartXfer+0x34c>
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	881b      	ldrh	r3, [r3, #0]
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	801a      	strh	r2, [r3, #0]
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	801a      	strh	r2, [r3, #0]
 800a1d8:	e036      	b.n	800a248 <USB_EPStartXfer+0x3ba>
 800a1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1de:	085b      	lsrs	r3, r3, #1
 800a1e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d004      	beq.n	800a1fa <USB_EPStartXfer+0x36c>
 800a1f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a1fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	029b      	lsls	r3, r3, #10
 800a202:	b29a      	uxth	r2, r3
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	801a      	strh	r2, [r3, #0]
 800a208:	e01e      	b.n	800a248 <USB_EPStartXfer+0x3ba>
 800a20a:	463b      	mov	r3, r7
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	785b      	ldrb	r3, [r3, #1]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d119      	bne.n	800a248 <USB_EPStartXfer+0x3ba>
 800a214:	1d3b      	adds	r3, r7, #4
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	623b      	str	r3, [r7, #32]
 800a21a:	1d3b      	adds	r3, r7, #4
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a222:	b29b      	uxth	r3, r3
 800a224:	461a      	mov	r2, r3
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	4413      	add	r3, r2
 800a22a:	623b      	str	r3, [r7, #32]
 800a22c:	463b      	mov	r3, r7
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	00da      	lsls	r2, r3, #3
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	4413      	add	r3, r2
 800a238:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a23c:	61fb      	str	r3, [r7, #28]
 800a23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a242:	b29a      	uxth	r2, r3
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a248:	463b      	mov	r3, r7
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	891b      	ldrh	r3, [r3, #8]
 800a24e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a252:	463b      	mov	r3, r7
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6959      	ldr	r1, [r3, #20]
 800a258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a262:	1d38      	adds	r0, r7, #4
 800a264:	6800      	ldr	r0, [r0, #0]
 800a266:	f001 f81e 	bl	800b2a6 <USB_WritePMA>
 800a26a:	e2fd      	b.n	800a868 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a26c:	463b      	mov	r3, r7
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	785b      	ldrb	r3, [r3, #1]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d164      	bne.n	800a340 <USB_EPStartXfer+0x4b2>
 800a276:	1d3b      	adds	r3, r7, #4
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a27c:	1d3b      	adds	r3, r7, #4
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a284:	b29b      	uxth	r3, r3
 800a286:	461a      	mov	r2, r3
 800a288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a28a:	4413      	add	r3, r2
 800a28c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a28e:	463b      	mov	r3, r7
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	00da      	lsls	r2, r3, #3
 800a296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a298:	4413      	add	r3, r2
 800a29a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a29e:	647b      	str	r3, [r7, #68]	; 0x44
 800a2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2a4:	2b3e      	cmp	r3, #62	; 0x3e
 800a2a6:	d91c      	bls.n	800a2e2 <USB_EPStartXfer+0x454>
 800a2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ac:	095b      	lsrs	r3, r3, #5
 800a2ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b6:	f003 031f 	and.w	r3, r3, #31
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d104      	bne.n	800a2c8 <USB_EPStartXfer+0x43a>
 800a2be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	029b      	lsls	r3, r3, #10
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2de:	801a      	strh	r2, [r3, #0]
 800a2e0:	e04d      	b.n	800a37e <USB_EPStartXfer+0x4f0>
 800a2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d112      	bne.n	800a310 <USB_EPStartXfer+0x482>
 800a2ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2f8:	801a      	strh	r2, [r3, #0]
 800a2fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a308:	b29a      	uxth	r2, r3
 800a30a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a30c:	801a      	strh	r2, [r3, #0]
 800a30e:	e036      	b.n	800a37e <USB_EPStartXfer+0x4f0>
 800a310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a314:	085b      	lsrs	r3, r3, #1
 800a316:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d004      	beq.n	800a330 <USB_EPStartXfer+0x4a2>
 800a326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a32a:	3301      	adds	r3, #1
 800a32c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a330:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a334:	b29b      	uxth	r3, r3
 800a336:	029b      	lsls	r3, r3, #10
 800a338:	b29a      	uxth	r2, r3
 800a33a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a33c:	801a      	strh	r2, [r3, #0]
 800a33e:	e01e      	b.n	800a37e <USB_EPStartXfer+0x4f0>
 800a340:	463b      	mov	r3, r7
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	785b      	ldrb	r3, [r3, #1]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d119      	bne.n	800a37e <USB_EPStartXfer+0x4f0>
 800a34a:	1d3b      	adds	r3, r7, #4
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	653b      	str	r3, [r7, #80]	; 0x50
 800a350:	1d3b      	adds	r3, r7, #4
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a358:	b29b      	uxth	r3, r3
 800a35a:	461a      	mov	r2, r3
 800a35c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a35e:	4413      	add	r3, r2
 800a360:	653b      	str	r3, [r7, #80]	; 0x50
 800a362:	463b      	mov	r3, r7
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	00da      	lsls	r2, r3, #3
 800a36a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a36c:	4413      	add	r3, r2
 800a36e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a372:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a378:	b29a      	uxth	r2, r3
 800a37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a37c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a37e:	463b      	mov	r3, r7
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	891b      	ldrh	r3, [r3, #8]
 800a384:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a388:	463b      	mov	r3, r7
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6959      	ldr	r1, [r3, #20]
 800a38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a392:	b29b      	uxth	r3, r3
 800a394:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a398:	1d38      	adds	r0, r7, #4
 800a39a:	6800      	ldr	r0, [r0, #0]
 800a39c:	f000 ff83 	bl	800b2a6 <USB_WritePMA>
            ep->xfer_buff += len;
 800a3a0:	463b      	mov	r3, r7
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	695a      	ldr	r2, [r3, #20]
 800a3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3aa:	441a      	add	r2, r3
 800a3ac:	463b      	mov	r3, r7
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6a1a      	ldr	r2, [r3, #32]
 800a3b8:	463b      	mov	r3, r7
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d909      	bls.n	800a3d6 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800a3c2:	463b      	mov	r3, r7
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6a1a      	ldr	r2, [r3, #32]
 800a3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3cc:	1ad2      	subs	r2, r2, r3
 800a3ce:	463b      	mov	r3, r7
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	621a      	str	r2, [r3, #32]
 800a3d4:	e008      	b.n	800a3e8 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800a3d6:	463b      	mov	r3, r7
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a3e0:	463b      	mov	r3, r7
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a3e8:	1d3b      	adds	r3, r7, #4
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	643b      	str	r3, [r7, #64]	; 0x40
 800a3ee:	463b      	mov	r3, r7
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	785b      	ldrb	r3, [r3, #1]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d164      	bne.n	800a4c2 <USB_EPStartXfer+0x634>
 800a3f8:	1d3b      	adds	r3, r7, #4
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3fe:	1d3b      	adds	r3, r7, #4
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a406:	b29b      	uxth	r3, r3
 800a408:	461a      	mov	r2, r3
 800a40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40c:	4413      	add	r3, r2
 800a40e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a410:	463b      	mov	r3, r7
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	00da      	lsls	r2, r3, #3
 800a418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41a:	4413      	add	r3, r2
 800a41c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a420:	637b      	str	r3, [r7, #52]	; 0x34
 800a422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a426:	2b3e      	cmp	r3, #62	; 0x3e
 800a428:	d91c      	bls.n	800a464 <USB_EPStartXfer+0x5d6>
 800a42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a42e:	095b      	lsrs	r3, r3, #5
 800a430:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a438:	f003 031f 	and.w	r3, r3, #31
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d104      	bne.n	800a44a <USB_EPStartXfer+0x5bc>
 800a440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a444:	3b01      	subs	r3, #1
 800a446:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a44a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a44e:	b29b      	uxth	r3, r3
 800a450:	029b      	lsls	r3, r3, #10
 800a452:	b29b      	uxth	r3, r3
 800a454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a460:	801a      	strh	r2, [r3, #0]
 800a462:	e04a      	b.n	800a4fa <USB_EPStartXfer+0x66c>
 800a464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d112      	bne.n	800a492 <USB_EPStartXfer+0x604>
 800a46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46e:	881b      	ldrh	r3, [r3, #0]
 800a470:	b29b      	uxth	r3, r3
 800a472:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a476:	b29a      	uxth	r2, r3
 800a478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47a:	801a      	strh	r2, [r3, #0]
 800a47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	b29b      	uxth	r3, r3
 800a482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48e:	801a      	strh	r2, [r3, #0]
 800a490:	e033      	b.n	800a4fa <USB_EPStartXfer+0x66c>
 800a492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a496:	085b      	lsrs	r3, r3, #1
 800a498:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d004      	beq.n	800a4b2 <USB_EPStartXfer+0x624>
 800a4a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a4b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	029b      	lsls	r3, r3, #10
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4be:	801a      	strh	r2, [r3, #0]
 800a4c0:	e01b      	b.n	800a4fa <USB_EPStartXfer+0x66c>
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	785b      	ldrb	r3, [r3, #1]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d116      	bne.n	800a4fa <USB_EPStartXfer+0x66c>
 800a4cc:	1d3b      	adds	r3, r7, #4
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4da:	4413      	add	r3, r2
 800a4dc:	643b      	str	r3, [r7, #64]	; 0x40
 800a4de:	463b      	mov	r3, r7
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	00da      	lsls	r2, r3, #3
 800a4e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a4fa:	463b      	mov	r3, r7
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	895b      	ldrh	r3, [r3, #10]
 800a500:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a504:	463b      	mov	r3, r7
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6959      	ldr	r1, [r3, #20]
 800a50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a50e:	b29b      	uxth	r3, r3
 800a510:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a514:	1d38      	adds	r0, r7, #4
 800a516:	6800      	ldr	r0, [r0, #0]
 800a518:	f000 fec5 	bl	800b2a6 <USB_WritePMA>
 800a51c:	e1a4      	b.n	800a868 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a51e:	463b      	mov	r3, r7
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a528:	1d3b      	adds	r3, r7, #4
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	463b      	mov	r3, r7
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	881b      	ldrh	r3, [r3, #0]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a542:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a546:	1d3b      	adds	r3, r7, #4
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	463b      	mov	r3, r7
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	441a      	add	r2, r3
 800a554:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a55c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a568:	b29b      	uxth	r3, r3
 800a56a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a56c:	1d3b      	adds	r3, r7, #4
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a572:	1d3b      	adds	r3, r7, #4
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	461a      	mov	r2, r3
 800a57e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a580:	4413      	add	r3, r2
 800a582:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a584:	463b      	mov	r3, r7
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	00da      	lsls	r2, r3, #3
 800a58c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a58e:	4413      	add	r3, r2
 800a590:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a594:	65bb      	str	r3, [r7, #88]	; 0x58
 800a596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a59e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a5a0:	463b      	mov	r3, r7
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	891b      	ldrh	r3, [r3, #8]
 800a5a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5aa:	463b      	mov	r3, r7
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	6959      	ldr	r1, [r3, #20]
 800a5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a5ba:	1d38      	adds	r0, r7, #4
 800a5bc:	6800      	ldr	r0, [r0, #0]
 800a5be:	f000 fe72 	bl	800b2a6 <USB_WritePMA>
 800a5c2:	e151      	b.n	800a868 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a5c4:	463b      	mov	r3, r7
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6a1a      	ldr	r2, [r3, #32]
 800a5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ce:	1ad2      	subs	r2, r2, r3
 800a5d0:	463b      	mov	r3, r7
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a5d6:	1d3b      	adds	r3, r7, #4
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	463b      	mov	r3, r7
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4413      	add	r3, r2
 800a5e4:	881b      	ldrh	r3, [r3, #0]
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 809b 	beq.w	800a728 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a5f2:	1d3b      	adds	r3, r7, #4
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	673b      	str	r3, [r7, #112]	; 0x70
 800a5f8:	463b      	mov	r3, r7
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	785b      	ldrb	r3, [r3, #1]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d164      	bne.n	800a6cc <USB_EPStartXfer+0x83e>
 800a602:	1d3b      	adds	r3, r7, #4
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	66bb      	str	r3, [r7, #104]	; 0x68
 800a608:	1d3b      	adds	r3, r7, #4
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a610:	b29b      	uxth	r3, r3
 800a612:	461a      	mov	r2, r3
 800a614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a616:	4413      	add	r3, r2
 800a618:	66bb      	str	r3, [r7, #104]	; 0x68
 800a61a:	463b      	mov	r3, r7
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	00da      	lsls	r2, r3, #3
 800a622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a624:	4413      	add	r3, r2
 800a626:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a62a:	667b      	str	r3, [r7, #100]	; 0x64
 800a62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a630:	2b3e      	cmp	r3, #62	; 0x3e
 800a632:	d91c      	bls.n	800a66e <USB_EPStartXfer+0x7e0>
 800a634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a638:	095b      	lsrs	r3, r3, #5
 800a63a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a642:	f003 031f 	and.w	r3, r3, #31
 800a646:	2b00      	cmp	r3, #0
 800a648:	d104      	bne.n	800a654 <USB_EPStartXfer+0x7c6>
 800a64a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a64e:	3b01      	subs	r3, #1
 800a650:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a654:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a658:	b29b      	uxth	r3, r3
 800a65a:	029b      	lsls	r3, r3, #10
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a666:	b29a      	uxth	r2, r3
 800a668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a66a:	801a      	strh	r2, [r3, #0]
 800a66c:	e04a      	b.n	800a704 <USB_EPStartXfer+0x876>
 800a66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a672:	2b00      	cmp	r3, #0
 800a674:	d112      	bne.n	800a69c <USB_EPStartXfer+0x80e>
 800a676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a680:	b29a      	uxth	r2, r3
 800a682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a684:	801a      	strh	r2, [r3, #0]
 800a686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a688:	881b      	ldrh	r3, [r3, #0]
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a694:	b29a      	uxth	r2, r3
 800a696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a698:	801a      	strh	r2, [r3, #0]
 800a69a:	e033      	b.n	800a704 <USB_EPStartXfer+0x876>
 800a69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a0:	085b      	lsrs	r3, r3, #1
 800a6a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d004      	beq.n	800a6bc <USB_EPStartXfer+0x82e>
 800a6b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a6bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	029b      	lsls	r3, r3, #10
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6c8:	801a      	strh	r2, [r3, #0]
 800a6ca:	e01b      	b.n	800a704 <USB_EPStartXfer+0x876>
 800a6cc:	463b      	mov	r3, r7
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	785b      	ldrb	r3, [r3, #1]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d116      	bne.n	800a704 <USB_EPStartXfer+0x876>
 800a6d6:	1d3b      	adds	r3, r7, #4
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6e4:	4413      	add	r3, r2
 800a6e6:	673b      	str	r3, [r7, #112]	; 0x70
 800a6e8:	463b      	mov	r3, r7
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	00da      	lsls	r2, r3, #3
 800a6f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a702:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a704:	463b      	mov	r3, r7
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	895b      	ldrh	r3, [r3, #10]
 800a70a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a70e:	463b      	mov	r3, r7
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	6959      	ldr	r1, [r3, #20]
 800a714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a718:	b29b      	uxth	r3, r3
 800a71a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a71e:	1d38      	adds	r0, r7, #4
 800a720:	6800      	ldr	r0, [r0, #0]
 800a722:	f000 fdc0 	bl	800b2a6 <USB_WritePMA>
 800a726:	e09f      	b.n	800a868 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a728:	463b      	mov	r3, r7
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	785b      	ldrb	r3, [r3, #1]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d164      	bne.n	800a7fc <USB_EPStartXfer+0x96e>
 800a732:	1d3b      	adds	r3, r7, #4
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a738:	1d3b      	adds	r3, r7, #4
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a740:	b29b      	uxth	r3, r3
 800a742:	461a      	mov	r2, r3
 800a744:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a746:	4413      	add	r3, r2
 800a748:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a74a:	463b      	mov	r3, r7
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	00da      	lsls	r2, r3, #3
 800a752:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a754:	4413      	add	r3, r2
 800a756:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a75a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a760:	2b3e      	cmp	r3, #62	; 0x3e
 800a762:	d91c      	bls.n	800a79e <USB_EPStartXfer+0x910>
 800a764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a768:	095b      	lsrs	r3, r3, #5
 800a76a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a772:	f003 031f 	and.w	r3, r3, #31
 800a776:	2b00      	cmp	r3, #0
 800a778:	d104      	bne.n	800a784 <USB_EPStartXfer+0x8f6>
 800a77a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a77e:	3b01      	subs	r3, #1
 800a780:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a784:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a788:	b29b      	uxth	r3, r3
 800a78a:	029b      	lsls	r3, r3, #10
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a796:	b29a      	uxth	r2, r3
 800a798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a79a:	801a      	strh	r2, [r3, #0]
 800a79c:	e053      	b.n	800a846 <USB_EPStartXfer+0x9b8>
 800a79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d112      	bne.n	800a7cc <USB_EPStartXfer+0x93e>
 800a7a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7a8:	881b      	ldrh	r3, [r3, #0]
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7b4:	801a      	strh	r2, [r3, #0]
 800a7b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7c8:	801a      	strh	r2, [r3, #0]
 800a7ca:	e03c      	b.n	800a846 <USB_EPStartXfer+0x9b8>
 800a7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d0:	085b      	lsrs	r3, r3, #1
 800a7d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d004      	beq.n	800a7ec <USB_EPStartXfer+0x95e>
 800a7e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a7ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	029b      	lsls	r3, r3, #10
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7f8:	801a      	strh	r2, [r3, #0]
 800a7fa:	e024      	b.n	800a846 <USB_EPStartXfer+0x9b8>
 800a7fc:	463b      	mov	r3, r7
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	785b      	ldrb	r3, [r3, #1]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d11f      	bne.n	800a846 <USB_EPStartXfer+0x9b8>
 800a806:	1d3b      	adds	r3, r7, #4
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a80e:	1d3b      	adds	r3, r7, #4
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a816:	b29b      	uxth	r3, r3
 800a818:	461a      	mov	r2, r3
 800a81a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a81e:	4413      	add	r3, r2
 800a820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a824:	463b      	mov	r3, r7
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	00da      	lsls	r2, r3, #3
 800a82c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a830:	4413      	add	r3, r2
 800a832:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a836:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a83e:	b29a      	uxth	r2, r3
 800a840:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a844:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a846:	463b      	mov	r3, r7
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	891b      	ldrh	r3, [r3, #8]
 800a84c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a850:	463b      	mov	r3, r7
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6959      	ldr	r1, [r3, #20]
 800a856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a860:	1d38      	adds	r0, r7, #4
 800a862:	6800      	ldr	r0, [r0, #0]
 800a864:	f000 fd1f 	bl	800b2a6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a868:	1d3b      	adds	r3, r7, #4
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	463b      	mov	r3, r7
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4413      	add	r3, r2
 800a876:	881b      	ldrh	r3, [r3, #0]
 800a878:	b29b      	uxth	r3, r3
 800a87a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a87e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a882:	817b      	strh	r3, [r7, #10]
 800a884:	897b      	ldrh	r3, [r7, #10]
 800a886:	f083 0310 	eor.w	r3, r3, #16
 800a88a:	817b      	strh	r3, [r7, #10]
 800a88c:	897b      	ldrh	r3, [r7, #10]
 800a88e:	f083 0320 	eor.w	r3, r3, #32
 800a892:	817b      	strh	r3, [r7, #10]
 800a894:	1d3b      	adds	r3, r7, #4
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	463b      	mov	r3, r7
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	441a      	add	r2, r3
 800a8a2:	897b      	ldrh	r3, [r7, #10]
 800a8a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	8013      	strh	r3, [r2, #0]
 800a8b8:	e3b5      	b.n	800b026 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a8ba:	463b      	mov	r3, r7
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	7b1b      	ldrb	r3, [r3, #12]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f040 8090 	bne.w	800a9e6 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a8c6:	463b      	mov	r3, r7
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	699a      	ldr	r2, [r3, #24]
 800a8cc:	463b      	mov	r3, r7
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d90e      	bls.n	800a8f4 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a8e0:	463b      	mov	r3, r7
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	699a      	ldr	r2, [r3, #24]
 800a8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ea:	1ad2      	subs	r2, r2, r3
 800a8ec:	463b      	mov	r3, r7
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	619a      	str	r2, [r3, #24]
 800a8f2:	e008      	b.n	800a906 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800a8f4:	463b      	mov	r3, r7
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a8fe:	463b      	mov	r3, r7
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2200      	movs	r2, #0
 800a904:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a906:	1d3b      	adds	r3, r7, #4
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a90e:	1d3b      	adds	r3, r7, #4
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a916:	b29b      	uxth	r3, r3
 800a918:	461a      	mov	r2, r3
 800a91a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a91e:	4413      	add	r3, r2
 800a920:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a924:	463b      	mov	r3, r7
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	00da      	lsls	r2, r3, #3
 800a92c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a930:	4413      	add	r3, r2
 800a932:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a936:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a93e:	2b3e      	cmp	r3, #62	; 0x3e
 800a940:	d91d      	bls.n	800a97e <USB_EPStartXfer+0xaf0>
 800a942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a946:	095b      	lsrs	r3, r3, #5
 800a948:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a950:	f003 031f 	and.w	r3, r3, #31
 800a954:	2b00      	cmp	r3, #0
 800a956:	d104      	bne.n	800a962 <USB_EPStartXfer+0xad4>
 800a958:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a95c:	3b01      	subs	r3, #1
 800a95e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a962:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a966:	b29b      	uxth	r3, r3
 800a968:	029b      	lsls	r3, r3, #10
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a974:	b29a      	uxth	r2, r3
 800a976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a97a:	801a      	strh	r2, [r3, #0]
 800a97c:	e325      	b.n	800afca <USB_EPStartXfer+0x113c>
 800a97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a982:	2b00      	cmp	r3, #0
 800a984:	d116      	bne.n	800a9b4 <USB_EPStartXfer+0xb26>
 800a986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a992:	b29a      	uxth	r2, r3
 800a994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a998:	801a      	strh	r2, [r3, #0]
 800a99a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a99e:	881b      	ldrh	r3, [r3, #0]
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9b0:	801a      	strh	r2, [r3, #0]
 800a9b2:	e30a      	b.n	800afca <USB_EPStartXfer+0x113c>
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b8:	085b      	lsrs	r3, r3, #1
 800a9ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d004      	beq.n	800a9d4 <USB_EPStartXfer+0xb46>
 800a9ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a9d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	029b      	lsls	r3, r3, #10
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9e2:	801a      	strh	r2, [r3, #0]
 800a9e4:	e2f1      	b.n	800afca <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a9e6:	463b      	mov	r3, r7
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	78db      	ldrb	r3, [r3, #3]
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	f040 818f 	bne.w	800ad10 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a9f2:	463b      	mov	r3, r7
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	785b      	ldrb	r3, [r3, #1]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d175      	bne.n	800aae8 <USB_EPStartXfer+0xc5a>
 800a9fc:	1d3b      	adds	r3, r7, #4
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa04:	1d3b      	adds	r3, r7, #4
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa14:	4413      	add	r3, r2
 800aa16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa1a:	463b      	mov	r3, r7
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	00da      	lsls	r2, r3, #3
 800aa22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa26:	4413      	add	r3, r2
 800aa28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aa30:	463b      	mov	r3, r7
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	2b3e      	cmp	r3, #62	; 0x3e
 800aa38:	d91f      	bls.n	800aa7a <USB_EPStartXfer+0xbec>
 800aa3a:	463b      	mov	r3, r7
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	095b      	lsrs	r3, r3, #5
 800aa42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa46:	463b      	mov	r3, r7
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	f003 031f 	and.w	r3, r3, #31
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d104      	bne.n	800aa5e <USB_EPStartXfer+0xbd0>
 800aa54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	029b      	lsls	r3, r3, #10
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa76:	801a      	strh	r2, [r3, #0]
 800aa78:	e05c      	b.n	800ab34 <USB_EPStartXfer+0xca6>
 800aa7a:	463b      	mov	r3, r7
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d116      	bne.n	800aab2 <USB_EPStartXfer+0xc24>
 800aa84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa88:	881b      	ldrh	r3, [r3, #0]
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa96:	801a      	strh	r2, [r3, #0]
 800aa98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aaae:	801a      	strh	r2, [r3, #0]
 800aab0:	e040      	b.n	800ab34 <USB_EPStartXfer+0xca6>
 800aab2:	463b      	mov	r3, r7
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	085b      	lsrs	r3, r3, #1
 800aaba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aabe:	463b      	mov	r3, r7
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	f003 0301 	and.w	r3, r3, #1
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d004      	beq.n	800aad6 <USB_EPStartXfer+0xc48>
 800aacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aad0:	3301      	adds	r3, #1
 800aad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aada:	b29b      	uxth	r3, r3
 800aadc:	029b      	lsls	r3, r3, #10
 800aade:	b29a      	uxth	r2, r3
 800aae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aae4:	801a      	strh	r2, [r3, #0]
 800aae6:	e025      	b.n	800ab34 <USB_EPStartXfer+0xca6>
 800aae8:	463b      	mov	r3, r7
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	785b      	ldrb	r3, [r3, #1]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d120      	bne.n	800ab34 <USB_EPStartXfer+0xca6>
 800aaf2:	1d3b      	adds	r3, r7, #4
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aafa:	1d3b      	adds	r3, r7, #4
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	461a      	mov	r2, r3
 800ab06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab10:	463b      	mov	r3, r7
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	00da      	lsls	r2, r3, #3
 800ab18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab26:	463b      	mov	r3, r7
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	b29a      	uxth	r2, r3
 800ab2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ab32:	801a      	strh	r2, [r3, #0]
 800ab34:	1d3b      	adds	r3, r7, #4
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ab3c:	463b      	mov	r3, r7
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	785b      	ldrb	r3, [r3, #1]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d175      	bne.n	800ac32 <USB_EPStartXfer+0xda4>
 800ab46:	1d3b      	adds	r3, r7, #4
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab4e:	1d3b      	adds	r3, r7, #4
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	461a      	mov	r2, r3
 800ab5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab5e:	4413      	add	r3, r2
 800ab60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab64:	463b      	mov	r3, r7
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	00da      	lsls	r2, r3, #3
 800ab6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab70:	4413      	add	r3, r2
 800ab72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ab7a:	463b      	mov	r3, r7
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	2b3e      	cmp	r3, #62	; 0x3e
 800ab82:	d91f      	bls.n	800abc4 <USB_EPStartXfer+0xd36>
 800ab84:	463b      	mov	r3, r7
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	095b      	lsrs	r3, r3, #5
 800ab8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab90:	463b      	mov	r3, r7
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	f003 031f 	and.w	r3, r3, #31
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d104      	bne.n	800aba8 <USB_EPStartXfer+0xd1a>
 800ab9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aba2:	3b01      	subs	r3, #1
 800aba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abac:	b29b      	uxth	r3, r3
 800abae:	029b      	lsls	r3, r3, #10
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abba:	b29a      	uxth	r2, r3
 800abbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abc0:	801a      	strh	r2, [r3, #0]
 800abc2:	e058      	b.n	800ac76 <USB_EPStartXfer+0xde8>
 800abc4:	463b      	mov	r3, r7
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d116      	bne.n	800abfc <USB_EPStartXfer+0xd6e>
 800abce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abda:	b29a      	uxth	r2, r3
 800abdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abe0:	801a      	strh	r2, [r3, #0]
 800abe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abe6:	881b      	ldrh	r3, [r3, #0]
 800abe8:	b29b      	uxth	r3, r3
 800abea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abf8:	801a      	strh	r2, [r3, #0]
 800abfa:	e03c      	b.n	800ac76 <USB_EPStartXfer+0xde8>
 800abfc:	463b      	mov	r3, r7
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	085b      	lsrs	r3, r3, #1
 800ac04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac08:	463b      	mov	r3, r7
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	f003 0301 	and.w	r3, r3, #1
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d004      	beq.n	800ac20 <USB_EPStartXfer+0xd92>
 800ac16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	029b      	lsls	r3, r3, #10
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac2e:	801a      	strh	r2, [r3, #0]
 800ac30:	e021      	b.n	800ac76 <USB_EPStartXfer+0xde8>
 800ac32:	463b      	mov	r3, r7
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	785b      	ldrb	r3, [r3, #1]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d11c      	bne.n	800ac76 <USB_EPStartXfer+0xde8>
 800ac3c:	1d3b      	adds	r3, r7, #4
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	461a      	mov	r2, r3
 800ac48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ac52:	463b      	mov	r3, r7
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	00da      	lsls	r2, r3, #3
 800ac5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac5e:	4413      	add	r3, r2
 800ac60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ac68:	463b      	mov	r3, r7
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac74:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ac76:	463b      	mov	r3, r7
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	69db      	ldr	r3, [r3, #28]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 81a4 	beq.w	800afca <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ac82:	1d3b      	adds	r3, r7, #4
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	463b      	mov	r3, r7
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d005      	beq.n	800acae <USB_EPStartXfer+0xe20>
 800aca2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800aca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10d      	bne.n	800acca <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800acae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800acb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f040 8187 	bne.w	800afca <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800acbc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800acc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f040 8180 	bne.w	800afca <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800acca:	1d3b      	adds	r3, r7, #4
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	463b      	mov	r3, r7
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ace0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ace4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800ace8:	1d3b      	adds	r3, r7, #4
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	463b      	mov	r3, r7
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	441a      	add	r2, r3
 800acf6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800acfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	8013      	strh	r3, [r2, #0]
 800ad0e:	e15c      	b.n	800afca <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ad10:	463b      	mov	r3, r7
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	78db      	ldrb	r3, [r3, #3]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	f040 8155 	bne.w	800afc6 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ad1c:	463b      	mov	r3, r7
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	699a      	ldr	r2, [r3, #24]
 800ad22:	463b      	mov	r3, r7
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d90e      	bls.n	800ad4a <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 800ad2c:	463b      	mov	r3, r7
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800ad36:	463b      	mov	r3, r7
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	699a      	ldr	r2, [r3, #24]
 800ad3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad40:	1ad2      	subs	r2, r2, r3
 800ad42:	463b      	mov	r3, r7
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	619a      	str	r2, [r3, #24]
 800ad48:	e008      	b.n	800ad5c <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800ad4a:	463b      	mov	r3, r7
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ad54:	463b      	mov	r3, r7
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ad5c:	463b      	mov	r3, r7
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	785b      	ldrb	r3, [r3, #1]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d16f      	bne.n	800ae46 <USB_EPStartXfer+0xfb8>
 800ad66:	1d3b      	adds	r3, r7, #4
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ad6e:	1d3b      	adds	r3, r7, #4
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	461a      	mov	r2, r3
 800ad7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ad7e:	4413      	add	r3, r2
 800ad80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ad84:	463b      	mov	r3, r7
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	00da      	lsls	r2, r3, #3
 800ad8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ad90:	4413      	add	r3, r2
 800ad92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad9e:	2b3e      	cmp	r3, #62	; 0x3e
 800ada0:	d91d      	bls.n	800adde <USB_EPStartXfer+0xf50>
 800ada2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada6:	095b      	lsrs	r3, r3, #5
 800ada8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800adac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb0:	f003 031f 	and.w	r3, r3, #31
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d104      	bne.n	800adc2 <USB_EPStartXfer+0xf34>
 800adb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adbc:	3b01      	subs	r3, #1
 800adbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800adc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	029b      	lsls	r3, r3, #10
 800adca:	b29b      	uxth	r3, r3
 800adcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800add0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800add4:	b29a      	uxth	r2, r3
 800add6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adda:	801a      	strh	r2, [r3, #0]
 800addc:	e058      	b.n	800ae90 <USB_EPStartXfer+0x1002>
 800adde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d116      	bne.n	800ae14 <USB_EPStartXfer+0xf86>
 800ade6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adea:	881b      	ldrh	r3, [r3, #0]
 800adec:	b29b      	uxth	r3, r3
 800adee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adf8:	801a      	strh	r2, [r3, #0]
 800adfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adfe:	881b      	ldrh	r3, [r3, #0]
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae0a:	b29a      	uxth	r2, r3
 800ae0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae10:	801a      	strh	r2, [r3, #0]
 800ae12:	e03d      	b.n	800ae90 <USB_EPStartXfer+0x1002>
 800ae14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae18:	085b      	lsrs	r3, r3, #1
 800ae1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d004      	beq.n	800ae34 <USB_EPStartXfer+0xfa6>
 800ae2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae2e:	3301      	adds	r3, #1
 800ae30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	029b      	lsls	r3, r3, #10
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae42:	801a      	strh	r2, [r3, #0]
 800ae44:	e024      	b.n	800ae90 <USB_EPStartXfer+0x1002>
 800ae46:	463b      	mov	r3, r7
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	785b      	ldrb	r3, [r3, #1]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d11f      	bne.n	800ae90 <USB_EPStartXfer+0x1002>
 800ae50:	1d3b      	adds	r3, r7, #4
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae58:	1d3b      	adds	r3, r7, #4
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	461a      	mov	r2, r3
 800ae64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae68:	4413      	add	r3, r2
 800ae6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae6e:	463b      	mov	r3, r7
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	00da      	lsls	r2, r3, #3
 800ae76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ae8e:	801a      	strh	r2, [r3, #0]
 800ae90:	1d3b      	adds	r3, r7, #4
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae98:	463b      	mov	r3, r7
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	785b      	ldrb	r3, [r3, #1]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d16f      	bne.n	800af82 <USB_EPStartXfer+0x10f4>
 800aea2:	1d3b      	adds	r3, r7, #4
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800aeaa:	1d3b      	adds	r3, r7, #4
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aeba:	4413      	add	r3, r2
 800aebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800aec0:	463b      	mov	r3, r7
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	00da      	lsls	r2, r3, #3
 800aec8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aecc:	4413      	add	r3, r2
 800aece:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aed2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeda:	2b3e      	cmp	r3, #62	; 0x3e
 800aedc:	d91d      	bls.n	800af1a <USB_EPStartXfer+0x108c>
 800aede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee2:	095b      	lsrs	r3, r3, #5
 800aee4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeec:	f003 031f 	and.w	r3, r3, #31
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d104      	bne.n	800aefe <USB_EPStartXfer+0x1070>
 800aef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aef8:	3b01      	subs	r3, #1
 800aefa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aefe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af02:	b29b      	uxth	r3, r3
 800af04:	029b      	lsls	r3, r3, #10
 800af06:	b29b      	uxth	r3, r3
 800af08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af10:	b29a      	uxth	r2, r3
 800af12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af16:	801a      	strh	r2, [r3, #0]
 800af18:	e057      	b.n	800afca <USB_EPStartXfer+0x113c>
 800af1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d116      	bne.n	800af50 <USB_EPStartXfer+0x10c2>
 800af22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	b29b      	uxth	r3, r3
 800af2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af2e:	b29a      	uxth	r2, r3
 800af30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af34:	801a      	strh	r2, [r3, #0]
 800af36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af3a:	881b      	ldrh	r3, [r3, #0]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af46:	b29a      	uxth	r2, r3
 800af48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af4c:	801a      	strh	r2, [r3, #0]
 800af4e:	e03c      	b.n	800afca <USB_EPStartXfer+0x113c>
 800af50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af54:	085b      	lsrs	r3, r3, #1
 800af56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5e:	f003 0301 	and.w	r3, r3, #1
 800af62:	2b00      	cmp	r3, #0
 800af64:	d004      	beq.n	800af70 <USB_EPStartXfer+0x10e2>
 800af66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af6a:	3301      	adds	r3, #1
 800af6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af74:	b29b      	uxth	r3, r3
 800af76:	029b      	lsls	r3, r3, #10
 800af78:	b29a      	uxth	r2, r3
 800af7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af7e:	801a      	strh	r2, [r3, #0]
 800af80:	e023      	b.n	800afca <USB_EPStartXfer+0x113c>
 800af82:	463b      	mov	r3, r7
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	785b      	ldrb	r3, [r3, #1]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d11e      	bne.n	800afca <USB_EPStartXfer+0x113c>
 800af8c:	1d3b      	adds	r3, r7, #4
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af94:	b29b      	uxth	r3, r3
 800af96:	461a      	mov	r2, r3
 800af98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af9c:	4413      	add	r3, r2
 800af9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800afa2:	463b      	mov	r3, r7
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	00da      	lsls	r2, r3, #3
 800afaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800afae:	4413      	add	r3, r2
 800afb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800afb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800afb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800afc2:	801a      	strh	r2, [r3, #0]
 800afc4:	e001      	b.n	800afca <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	e02e      	b.n	800b028 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800afca:	1d3b      	adds	r3, r7, #4
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	463b      	mov	r3, r7
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4413      	add	r3, r2
 800afd8:	881b      	ldrh	r3, [r3, #0]
 800afda:	b29b      	uxth	r3, r3
 800afdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afe4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800afe8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800afec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aff0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800aff4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aff8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800affc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b000:	1d3b      	adds	r3, r7, #4
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	463b      	mov	r3, r7
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	441a      	add	r2, r3
 800b00e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b01a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b01e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b022:	b29b      	uxth	r3, r3
 800b024:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b032:	b480      	push	{r7}
 800b034:	b085      	sub	sp, #20
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	785b      	ldrb	r3, [r3, #1]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d020      	beq.n	800b086 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	881b      	ldrh	r3, [r3, #0]
 800b050:	b29b      	uxth	r3, r3
 800b052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b05a:	81bb      	strh	r3, [r7, #12]
 800b05c:	89bb      	ldrh	r3, [r7, #12]
 800b05e:	f083 0310 	eor.w	r3, r3, #16
 800b062:	81bb      	strh	r3, [r7, #12]
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	441a      	add	r2, r3
 800b06e:	89bb      	ldrh	r3, [r7, #12]
 800b070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b080:	b29b      	uxth	r3, r3
 800b082:	8013      	strh	r3, [r2, #0]
 800b084:	e01f      	b.n	800b0c6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	881b      	ldrh	r3, [r3, #0]
 800b092:	b29b      	uxth	r3, r3
 800b094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b09c:	81fb      	strh	r3, [r7, #14]
 800b09e:	89fb      	ldrh	r3, [r7, #14]
 800b0a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b0a4:	81fb      	strh	r3, [r7, #14]
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	441a      	add	r2, r3
 800b0b0:	89fb      	ldrh	r3, [r7, #14]
 800b0b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	7b1b      	ldrb	r3, [r3, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f040 809d 	bne.w	800b222 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	785b      	ldrb	r3, [r3, #1]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d04c      	beq.n	800b18a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	881b      	ldrh	r3, [r3, #0]
 800b0fc:	823b      	strh	r3, [r7, #16]
 800b0fe:	8a3b      	ldrh	r3, [r7, #16]
 800b100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b104:	2b00      	cmp	r3, #0
 800b106:	d01b      	beq.n	800b140 <USB_EPClearStall+0x6c>
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4413      	add	r3, r2
 800b112:	881b      	ldrh	r3, [r3, #0]
 800b114:	b29b      	uxth	r3, r3
 800b116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b11e:	81fb      	strh	r3, [r7, #14]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	441a      	add	r2, r3
 800b12a:	89fb      	ldrh	r3, [r7, #14]
 800b12c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b138:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	78db      	ldrb	r3, [r3, #3]
 800b144:	2b01      	cmp	r3, #1
 800b146:	d06c      	beq.n	800b222 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4413      	add	r3, r2
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	b29b      	uxth	r3, r3
 800b156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b15a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b15e:	81bb      	strh	r3, [r7, #12]
 800b160:	89bb      	ldrh	r3, [r7, #12]
 800b162:	f083 0320 	eor.w	r3, r3, #32
 800b166:	81bb      	strh	r3, [r7, #12]
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	441a      	add	r2, r3
 800b172:	89bb      	ldrh	r3, [r7, #12]
 800b174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b17c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b184:	b29b      	uxth	r3, r3
 800b186:	8013      	strh	r3, [r2, #0]
 800b188:	e04b      	b.n	800b222 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	4413      	add	r3, r2
 800b194:	881b      	ldrh	r3, [r3, #0]
 800b196:	82fb      	strh	r3, [r7, #22]
 800b198:	8afb      	ldrh	r3, [r7, #22]
 800b19a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d01b      	beq.n	800b1da <USB_EPClearStall+0x106>
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1b8:	82bb      	strh	r3, [r7, #20]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	441a      	add	r2, r3
 800b1c4:	8abb      	ldrh	r3, [r7, #20]
 800b1c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b1d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	881b      	ldrh	r3, [r3, #0]
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1f0:	827b      	strh	r3, [r7, #18]
 800b1f2:	8a7b      	ldrh	r3, [r7, #18]
 800b1f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b1f8:	827b      	strh	r3, [r7, #18]
 800b1fa:	8a7b      	ldrh	r3, [r7, #18]
 800b1fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b200:	827b      	strh	r3, [r7, #18]
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	441a      	add	r2, r3
 800b20c:	8a7b      	ldrh	r3, [r7, #18]
 800b20e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b21a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b21e:	b29b      	uxth	r3, r3
 800b220:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b222:	2300      	movs	r3, #0
}
 800b224:	4618      	mov	r0, r3
 800b226:	371c      	adds	r7, #28
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	460b      	mov	r3, r1
 800b23a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b23c:	78fb      	ldrb	r3, [r7, #3]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d103      	bne.n	800b24a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2280      	movs	r2, #128	; 0x80
 800b246:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b266:	b29b      	uxth	r3, r3
 800b268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b26c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b270:	b29a      	uxth	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b286:	b480      	push	{r7}
 800b288:	b085      	sub	sp, #20
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b294:	b29b      	uxth	r3, r3
 800b296:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b298:	68fb      	ldr	r3, [r7, #12]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3714      	adds	r7, #20
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b08d      	sub	sp, #52	; 0x34
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	60f8      	str	r0, [r7, #12]
 800b2ae:	60b9      	str	r1, [r7, #8]
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	80fb      	strh	r3, [r7, #6]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b2bc:	88bb      	ldrh	r3, [r7, #4]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	085b      	lsrs	r3, r3, #1
 800b2c2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2cc:	88fa      	ldrh	r2, [r7, #6]
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2d6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b2d8:	6a3b      	ldr	r3, [r7, #32]
 800b2da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2dc:	e01b      	b.n	800b316 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	021b      	lsls	r3, r3, #8
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b306:	3302      	adds	r3, #2
 800b308:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	3301      	adds	r3, #1
 800b30e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b312:	3b01      	subs	r3, #1
 800b314:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1e0      	bne.n	800b2de <USB_WritePMA+0x38>
  }
}
 800b31c:	bf00      	nop
 800b31e:	bf00      	nop
 800b320:	3734      	adds	r7, #52	; 0x34
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b08b      	sub	sp, #44	; 0x2c
 800b32e:	af00      	add	r7, sp, #0
 800b330:	60f8      	str	r0, [r7, #12]
 800b332:	60b9      	str	r1, [r7, #8]
 800b334:	4611      	mov	r1, r2
 800b336:	461a      	mov	r2, r3
 800b338:	460b      	mov	r3, r1
 800b33a:	80fb      	strh	r3, [r7, #6]
 800b33c:	4613      	mov	r3, r2
 800b33e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b340:	88bb      	ldrh	r3, [r7, #4]
 800b342:	085b      	lsrs	r3, r3, #1
 800b344:	b29b      	uxth	r3, r3
 800b346:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b350:	88fa      	ldrh	r2, [r7, #6]
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	4413      	add	r3, r2
 800b356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b35a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	627b      	str	r3, [r7, #36]	; 0x24
 800b360:	e018      	b.n	800b394 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b362:	6a3b      	ldr	r3, [r7, #32]
 800b364:	881b      	ldrh	r3, [r3, #0]
 800b366:	b29b      	uxth	r3, r3
 800b368:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b36a:	6a3b      	ldr	r3, [r7, #32]
 800b36c:	3302      	adds	r3, #2
 800b36e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	b2da      	uxtb	r2, r3
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	3301      	adds	r3, #1
 800b37c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	0a1b      	lsrs	r3, r3, #8
 800b382:	b2da      	uxtb	r2, r3
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	3301      	adds	r3, #1
 800b38c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b390:	3b01      	subs	r3, #1
 800b392:	627b      	str	r3, [r7, #36]	; 0x24
 800b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1e3      	bne.n	800b362 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b39a:	88bb      	ldrh	r3, [r7, #4]
 800b39c:	f003 0301 	and.w	r3, r3, #1
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d007      	beq.n	800b3b6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800b3a6:	6a3b      	ldr	r3, [r7, #32]
 800b3a8:	881b      	ldrh	r3, [r3, #0]
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	701a      	strb	r2, [r3, #0]
  }
}
 800b3b6:	bf00      	nop
 800b3b8:	372c      	adds	r7, #44	; 0x2c
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b084      	sub	sp, #16
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b3ce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b3d2:	f005 fcad 	bl	8010d30 <USBD_static_malloc>
 800b3d6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d105      	bne.n	800b3ea <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	e066      	b.n	800b4b8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	7c1b      	ldrb	r3, [r3, #16]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d119      	bne.n	800b42e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b3fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3fe:	2202      	movs	r2, #2
 800b400:	2181      	movs	r1, #129	; 0x81
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f005 fb39 	bl	8010a7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b40e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b412:	2202      	movs	r2, #2
 800b414:	2101      	movs	r1, #1
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f005 fb2f 	bl	8010a7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2210      	movs	r2, #16
 800b428:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b42c:	e016      	b.n	800b45c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b42e:	2340      	movs	r3, #64	; 0x40
 800b430:	2202      	movs	r2, #2
 800b432:	2181      	movs	r1, #129	; 0x81
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f005 fb20 	bl	8010a7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2201      	movs	r2, #1
 800b43e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b440:	2340      	movs	r3, #64	; 0x40
 800b442:	2202      	movs	r2, #2
 800b444:	2101      	movs	r1, #1
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f005 fb17 	bl	8010a7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2210      	movs	r2, #16
 800b458:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b45c:	2308      	movs	r3, #8
 800b45e:	2203      	movs	r2, #3
 800b460:	2182      	movs	r1, #130	; 0x82
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f005 fb09 	bl	8010a7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2200      	movs	r2, #0
 800b486:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	7c1b      	ldrb	r3, [r3, #16]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d109      	bne.n	800b4a6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b49c:	2101      	movs	r1, #1
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f005 fbdb 	bl	8010c5a <USBD_LL_PrepareReceive>
 800b4a4:	e007      	b.n	800b4b6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4ac:	2340      	movs	r3, #64	; 0x40
 800b4ae:	2101      	movs	r1, #1
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f005 fbd2 	bl	8010c5a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b4cc:	2181      	movs	r1, #129	; 0x81
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f005 faf9 	bl	8010ac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b4da:	2101      	movs	r1, #1
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f005 faf2 	bl	8010ac6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b4ea:	2182      	movs	r1, #130	; 0x82
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f005 faea 	bl	8010ac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00e      	beq.n	800b52a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b51c:	4618      	mov	r0, r3
 800b51e:	f005 fc15 	bl	8010d4c <USBD_static_free>
    pdev->pClassData = NULL;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b544:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b546:	2300      	movs	r3, #0
 800b548:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b54a:	2300      	movs	r3, #0
 800b54c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b54e:	2300      	movs	r3, #0
 800b550:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b558:	2303      	movs	r3, #3
 800b55a:	e0af      	b.n	800b6bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b564:	2b00      	cmp	r3, #0
 800b566:	d03f      	beq.n	800b5e8 <USBD_CDC_Setup+0xb4>
 800b568:	2b20      	cmp	r3, #32
 800b56a:	f040 809f 	bne.w	800b6ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	88db      	ldrh	r3, [r3, #6]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d02e      	beq.n	800b5d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	b25b      	sxtb	r3, r3
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	da16      	bge.n	800b5ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b58c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	88d2      	ldrh	r2, [r2, #6]
 800b592:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	88db      	ldrh	r3, [r3, #6]
 800b598:	2b07      	cmp	r3, #7
 800b59a:	bf28      	it	cs
 800b59c:	2307      	movcs	r3, #7
 800b59e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	89fa      	ldrh	r2, [r7, #14]
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f001 fa9f 	bl	800caea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b5ac:	e085      	b.n	800b6ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	785a      	ldrb	r2, [r3, #1]
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	88db      	ldrh	r3, [r3, #6]
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b5c4:	6939      	ldr	r1, [r7, #16]
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	88db      	ldrh	r3, [r3, #6]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f001 fab8 	bl	800cb42 <USBD_CtlPrepareRx>
      break;
 800b5d2:	e072      	b.n	800b6ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	683a      	ldr	r2, [r7, #0]
 800b5de:	7850      	ldrb	r0, [r2, #1]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	6839      	ldr	r1, [r7, #0]
 800b5e4:	4798      	blx	r3
      break;
 800b5e6:	e068      	b.n	800b6ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	785b      	ldrb	r3, [r3, #1]
 800b5ec:	2b0b      	cmp	r3, #11
 800b5ee:	d852      	bhi.n	800b696 <USBD_CDC_Setup+0x162>
 800b5f0:	a201      	add	r2, pc, #4	; (adr r2, 800b5f8 <USBD_CDC_Setup+0xc4>)
 800b5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f6:	bf00      	nop
 800b5f8:	0800b629 	.word	0x0800b629
 800b5fc:	0800b6a5 	.word	0x0800b6a5
 800b600:	0800b697 	.word	0x0800b697
 800b604:	0800b697 	.word	0x0800b697
 800b608:	0800b697 	.word	0x0800b697
 800b60c:	0800b697 	.word	0x0800b697
 800b610:	0800b697 	.word	0x0800b697
 800b614:	0800b697 	.word	0x0800b697
 800b618:	0800b697 	.word	0x0800b697
 800b61c:	0800b697 	.word	0x0800b697
 800b620:	0800b653 	.word	0x0800b653
 800b624:	0800b67d 	.word	0x0800b67d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	2b03      	cmp	r3, #3
 800b632:	d107      	bne.n	800b644 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b634:	f107 030a 	add.w	r3, r7, #10
 800b638:	2202      	movs	r2, #2
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f001 fa54 	bl	800caea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b642:	e032      	b.n	800b6aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b644:	6839      	ldr	r1, [r7, #0]
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f001 f9de 	bl	800ca08 <USBD_CtlError>
            ret = USBD_FAIL;
 800b64c:	2303      	movs	r3, #3
 800b64e:	75fb      	strb	r3, [r7, #23]
          break;
 800b650:	e02b      	b.n	800b6aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	2b03      	cmp	r3, #3
 800b65c:	d107      	bne.n	800b66e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b65e:	f107 030d 	add.w	r3, r7, #13
 800b662:	2201      	movs	r2, #1
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f001 fa3f 	bl	800caea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b66c:	e01d      	b.n	800b6aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f001 f9c9 	bl	800ca08 <USBD_CtlError>
            ret = USBD_FAIL;
 800b676:	2303      	movs	r3, #3
 800b678:	75fb      	strb	r3, [r7, #23]
          break;
 800b67a:	e016      	b.n	800b6aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b682:	b2db      	uxtb	r3, r3
 800b684:	2b03      	cmp	r3, #3
 800b686:	d00f      	beq.n	800b6a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f001 f9bc 	bl	800ca08 <USBD_CtlError>
            ret = USBD_FAIL;
 800b690:	2303      	movs	r3, #3
 800b692:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b694:	e008      	b.n	800b6a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f001 f9b5 	bl	800ca08 <USBD_CtlError>
          ret = USBD_FAIL;
 800b69e:	2303      	movs	r3, #3
 800b6a0:	75fb      	strb	r3, [r7, #23]
          break;
 800b6a2:	e002      	b.n	800b6aa <USBD_CDC_Setup+0x176>
          break;
 800b6a4:	bf00      	nop
 800b6a6:	e008      	b.n	800b6ba <USBD_CDC_Setup+0x186>
          break;
 800b6a8:	bf00      	nop
      }
      break;
 800b6aa:	e006      	b.n	800b6ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f001 f9aa 	bl	800ca08 <USBD_CtlError>
      ret = USBD_FAIL;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b6b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3718      	adds	r7, #24
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b6d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d101      	bne.n	800b6e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b6e2:	2303      	movs	r3, #3
 800b6e4:	e04f      	b.n	800b786 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b6ee:	78fa      	ldrb	r2, [r7, #3]
 800b6f0:	6879      	ldr	r1, [r7, #4]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4413      	add	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	440b      	add	r3, r1
 800b6fc:	3318      	adds	r3, #24
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d029      	beq.n	800b758 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b704:	78fa      	ldrb	r2, [r7, #3]
 800b706:	6879      	ldr	r1, [r7, #4]
 800b708:	4613      	mov	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	4413      	add	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	440b      	add	r3, r1
 800b712:	3318      	adds	r3, #24
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	78f9      	ldrb	r1, [r7, #3]
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	460b      	mov	r3, r1
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	440b      	add	r3, r1
 800b720:	00db      	lsls	r3, r3, #3
 800b722:	4403      	add	r3, r0
 800b724:	3338      	adds	r3, #56	; 0x38
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	fbb2 f1f3 	udiv	r1, r2, r3
 800b72c:	fb03 f301 	mul.w	r3, r3, r1
 800b730:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b732:	2b00      	cmp	r3, #0
 800b734:	d110      	bne.n	800b758 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b736:	78fa      	ldrb	r2, [r7, #3]
 800b738:	6879      	ldr	r1, [r7, #4]
 800b73a:	4613      	mov	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	440b      	add	r3, r1
 800b744:	3318      	adds	r3, #24
 800b746:	2200      	movs	r2, #0
 800b748:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b74a:	78f9      	ldrb	r1, [r7, #3]
 800b74c:	2300      	movs	r3, #0
 800b74e:	2200      	movs	r2, #0
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f005 fa61 	bl	8010c18 <USBD_LL_Transmit>
 800b756:	e015      	b.n	800b784 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b766:	691b      	ldr	r3, [r3, #16]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d00b      	beq.n	800b784 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b780:	78fa      	ldrb	r2, [r7, #3]
 800b782:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b084      	sub	sp, #16
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
 800b796:	460b      	mov	r3, r1
 800b798:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d101      	bne.n	800b7b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e015      	b.n	800b7dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b7b0:	78fb      	ldrb	r3, [r7, #3]
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f005 fa71 	bl	8010c9c <USBD_LL_GetRxDataSize>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b7d6:	4611      	mov	r1, r2
 800b7d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d101      	bne.n	800b7fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b7fa:	2303      	movs	r3, #3
 800b7fc:	e01b      	b.n	800b836 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d015      	beq.n	800b834 <USBD_CDC_EP0_RxReady+0x50>
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b80e:	2bff      	cmp	r3, #255	; 0xff
 800b810:	d010      	beq.n	800b834 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b820:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b828:	b292      	uxth	r2, r2
 800b82a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	22ff      	movs	r2, #255	; 0xff
 800b830:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
	...

0800b840 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2243      	movs	r2, #67	; 0x43
 800b84c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b84e:	4b03      	ldr	r3, [pc, #12]	; (800b85c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b850:	4618      	mov	r0, r3
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	200000a4 	.word	0x200000a4

0800b860 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2243      	movs	r2, #67	; 0x43
 800b86c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b86e:	4b03      	ldr	r3, [pc, #12]	; (800b87c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b870:	4618      	mov	r0, r3
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	20000060 	.word	0x20000060

0800b880 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2243      	movs	r2, #67	; 0x43
 800b88c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b88e:	4b03      	ldr	r3, [pc, #12]	; (800b89c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b890:	4618      	mov	r0, r3
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	200000e8 	.word	0x200000e8

0800b8a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	220a      	movs	r2, #10
 800b8ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b8ae:	4b03      	ldr	r3, [pc, #12]	; (800b8bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	2000001c 	.word	0x2000001c

0800b8c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d101      	bne.n	800b8d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b8d0:	2303      	movs	r3, #3
 800b8d2:	e004      	b.n	800b8de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	b087      	sub	sp, #28
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	60f8      	str	r0, [r7, #12]
 800b8f2:	60b9      	str	r1, [r7, #8]
 800b8f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d101      	bne.n	800b908 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b904:	2303      	movs	r3, #3
 800b906:	e008      	b.n	800b91a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	371c      	adds	r7, #28
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b926:	b480      	push	{r7}
 800b928:	b085      	sub	sp, #20
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b936:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b93e:	2303      	movs	r3, #3
 800b940:	e004      	b.n	800b94c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	683a      	ldr	r2, [r7, #0]
 800b946:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b966:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b972:	2303      	movs	r3, #3
 800b974:	e016      	b.n	800b9a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	7c1b      	ldrb	r3, [r3, #16]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d109      	bne.n	800b992 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b984:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b988:	2101      	movs	r1, #1
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f005 f965 	bl	8010c5a <USBD_LL_PrepareReceive>
 800b990:	e007      	b.n	800b9a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b998:	2340      	movs	r3, #64	; 0x40
 800b99a:	2101      	movs	r1, #1
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f005 f95c 	bl	8010c5a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d101      	bne.n	800b9c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	e01f      	b.n	800ba04 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	79fa      	ldrb	r2, [r7, #7]
 800b9f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f004 ffc1 	bl	8010980 <USBD_LL_Init>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3718      	adds	r7, #24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba16:	2300      	movs	r3, #0
 800ba18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ba20:	2303      	movs	r3, #3
 800ba22:	e016      	b.n	800ba52 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00b      	beq.n	800ba50 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba40:	f107 020e 	add.w	r2, r7, #14
 800ba44:	4610      	mov	r0, r2
 800ba46:	4798      	blx	r3
 800ba48:	4602      	mov	r2, r0
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f004 ffee 	bl	8010a44 <USBD_LL_Start>
 800ba68:	4603      	mov	r3, r0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ba72:	b480      	push	{r7}
 800ba74:	b083      	sub	sp, #12
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	460b      	mov	r3, r1
 800ba92:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ba94:	2303      	movs	r3, #3
 800ba96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d009      	beq.n	800bab6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	78fa      	ldrb	r2, [r7, #3]
 800baac:	4611      	mov	r1, r2
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	4798      	blx	r3
 800bab2:	4603      	mov	r3, r0
 800bab4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3710      	adds	r7, #16
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d007      	beq.n	800bae6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	78fa      	ldrb	r2, [r7, #3]
 800bae0:	4611      	mov	r1, r2
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	4798      	blx	r3
  }

  return USBD_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f000 ff46 	bl	800c994 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb16:	461a      	mov	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb24:	f003 031f 	and.w	r3, r3, #31
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d01a      	beq.n	800bb62 <USBD_LL_SetupStage+0x72>
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d822      	bhi.n	800bb76 <USBD_LL_SetupStage+0x86>
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d002      	beq.n	800bb3a <USBD_LL_SetupStage+0x4a>
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d00a      	beq.n	800bb4e <USBD_LL_SetupStage+0x5e>
 800bb38:	e01d      	b.n	800bb76 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb40:	4619      	mov	r1, r3
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f9ee 	bl	800bf24 <USBD_StdDevReq>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb4c:	e020      	b.n	800bb90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb54:	4619      	mov	r1, r3
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 fa52 	bl	800c000 <USBD_StdItfReq>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb60:	e016      	b.n	800bb90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fa91 	bl	800c092 <USBD_StdEPReq>
 800bb70:	4603      	mov	r3, r0
 800bb72:	73fb      	strb	r3, [r7, #15]
      break;
 800bb74:	e00c      	b.n	800bb90 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	4619      	mov	r1, r3
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f004 ffbd 	bl	8010b04 <USBD_LL_StallEP>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb8e:	bf00      	nop
  }

  return ret;
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b086      	sub	sp, #24
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	60f8      	str	r0, [r7, #12]
 800bba2:	460b      	mov	r3, r1
 800bba4:	607a      	str	r2, [r7, #4]
 800bba6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bba8:	7afb      	ldrb	r3, [r7, #11]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d138      	bne.n	800bc20 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bbb4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbbc:	2b03      	cmp	r3, #3
 800bbbe:	d14a      	bne.n	800bc56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	689a      	ldr	r2, [r3, #8]
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d913      	bls.n	800bbf4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	689a      	ldr	r2, [r3, #8]
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	1ad2      	subs	r2, r2, r3
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	68da      	ldr	r2, [r3, #12]
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	bf28      	it	cs
 800bbe6:	4613      	movcs	r3, r2
 800bbe8:	461a      	mov	r2, r3
 800bbea:	6879      	ldr	r1, [r7, #4]
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f000 ffc5 	bl	800cb7c <USBD_CtlContinueRx>
 800bbf2:	e030      	b.n	800bc56 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	d10b      	bne.n	800bc18 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d005      	beq.n	800bc18 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 ffc0 	bl	800cb9e <USBD_CtlSendStatus>
 800bc1e:	e01a      	b.n	800bc56 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b03      	cmp	r3, #3
 800bc2a:	d114      	bne.n	800bc56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00e      	beq.n	800bc56 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc3e:	699b      	ldr	r3, [r3, #24]
 800bc40:	7afa      	ldrb	r2, [r7, #11]
 800bc42:	4611      	mov	r1, r2
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	4798      	blx	r3
 800bc48:	4603      	mov	r3, r0
 800bc4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d001      	beq.n	800bc56 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bc52:	7dfb      	ldrb	r3, [r7, #23]
 800bc54:	e000      	b.n	800bc58 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	607a      	str	r2, [r7, #4]
 800bc6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bc6e:	7afb      	ldrb	r3, [r7, #11]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d16b      	bne.n	800bd4c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	3314      	adds	r3, #20
 800bc78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	d156      	bne.n	800bd32 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	689a      	ldr	r2, [r3, #8]
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d914      	bls.n	800bcba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	689a      	ldr	r2, [r3, #8]
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	1ad2      	subs	r2, r2, r3
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	461a      	mov	r2, r3
 800bca4:	6879      	ldr	r1, [r7, #4]
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f000 ff3a 	bl	800cb20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcac:	2300      	movs	r3, #0
 800bcae:	2200      	movs	r2, #0
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f004 ffd1 	bl	8010c5a <USBD_LL_PrepareReceive>
 800bcb8:	e03b      	b.n	800bd32 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	68da      	ldr	r2, [r3, #12]
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d11c      	bne.n	800bd00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	685a      	ldr	r2, [r3, #4]
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d316      	bcc.n	800bd00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	685a      	ldr	r2, [r3, #4]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d20f      	bcs.n	800bd00 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bce0:	2200      	movs	r2, #0
 800bce2:	2100      	movs	r1, #0
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f000 ff1b 	bl	800cb20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f004 ffae 	bl	8010c5a <USBD_LL_PrepareReceive>
 800bcfe:	e018      	b.n	800bd32 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	2b03      	cmp	r3, #3
 800bd0a:	d10b      	bne.n	800bd24 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d005      	beq.n	800bd24 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd24:	2180      	movs	r1, #128	; 0x80
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f004 feec 	bl	8010b04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f000 ff49 	bl	800cbc4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d122      	bne.n	800bd82 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	f7ff fe98 	bl	800ba72 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bd4a:	e01a      	b.n	800bd82 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	2b03      	cmp	r3, #3
 800bd56:	d114      	bne.n	800bd82 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd5e:	695b      	ldr	r3, [r3, #20]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00e      	beq.n	800bd82 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	7afa      	ldrb	r2, [r7, #11]
 800bd6e:	4611      	mov	r1, r2
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	4798      	blx	r3
 800bd74:	4603      	mov	r3, r0
 800bd76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bd78:	7dfb      	ldrb	r3, [r7, #23]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bd7e:	7dfb      	ldrb	r3, [r7, #23]
 800bd80:	e000      	b.n	800bd84 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3718      	adds	r7, #24
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e02f      	b.n	800be20 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00f      	beq.n	800bdea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d009      	beq.n	800bdea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	6852      	ldr	r2, [r2, #4]
 800bde2:	b2d2      	uxtb	r2, r2
 800bde4:	4611      	mov	r1, r2
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bdea:	2340      	movs	r3, #64	; 0x40
 800bdec:	2200      	movs	r2, #0
 800bdee:	2100      	movs	r1, #0
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f004 fe42 	bl	8010a7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2240      	movs	r2, #64	; 0x40
 800be02:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be06:	2340      	movs	r3, #64	; 0x40
 800be08:	2200      	movs	r2, #0
 800be0a:	2180      	movs	r1, #128	; 0x80
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f004 fe34 	bl	8010a7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2201      	movs	r2, #1
 800be16:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2240      	movs	r2, #64	; 0x40
 800be1c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3708      	adds	r7, #8
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	460b      	mov	r3, r1
 800be32:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	78fa      	ldrb	r2, [r7, #3]
 800be38:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be56:	b2da      	uxtb	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2204      	movs	r2, #4
 800be62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b04      	cmp	r3, #4
 800be86:	d106      	bne.n	800be96 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d101      	bne.n	800beba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800beb6:	2303      	movs	r3, #3
 800beb8:	e012      	b.n	800bee0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	2b03      	cmp	r3, #3
 800bec4:	d10b      	bne.n	800bede <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d005      	beq.n	800bede <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bed8:	69db      	ldr	r3, [r3, #28]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bee8:	b480      	push	{r7}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	3301      	adds	r3, #1
 800befe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bf06:	8a3b      	ldrh	r3, [r7, #16]
 800bf08:	021b      	lsls	r3, r3, #8
 800bf0a:	b21a      	sxth	r2, r3
 800bf0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf10:	4313      	orrs	r3, r2
 800bf12:	b21b      	sxth	r3, r3
 800bf14:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bf16:	89fb      	ldrh	r3, [r7, #14]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	371c      	adds	r7, #28
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf3a:	2b40      	cmp	r3, #64	; 0x40
 800bf3c:	d005      	beq.n	800bf4a <USBD_StdDevReq+0x26>
 800bf3e:	2b40      	cmp	r3, #64	; 0x40
 800bf40:	d853      	bhi.n	800bfea <USBD_StdDevReq+0xc6>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00b      	beq.n	800bf5e <USBD_StdDevReq+0x3a>
 800bf46:	2b20      	cmp	r3, #32
 800bf48:	d14f      	bne.n	800bfea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	6839      	ldr	r1, [r7, #0]
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	4798      	blx	r3
 800bf58:	4603      	mov	r3, r0
 800bf5a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf5c:	e04a      	b.n	800bff4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	785b      	ldrb	r3, [r3, #1]
 800bf62:	2b09      	cmp	r3, #9
 800bf64:	d83b      	bhi.n	800bfde <USBD_StdDevReq+0xba>
 800bf66:	a201      	add	r2, pc, #4	; (adr r2, 800bf6c <USBD_StdDevReq+0x48>)
 800bf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf6c:	0800bfc1 	.word	0x0800bfc1
 800bf70:	0800bfd5 	.word	0x0800bfd5
 800bf74:	0800bfdf 	.word	0x0800bfdf
 800bf78:	0800bfcb 	.word	0x0800bfcb
 800bf7c:	0800bfdf 	.word	0x0800bfdf
 800bf80:	0800bf9f 	.word	0x0800bf9f
 800bf84:	0800bf95 	.word	0x0800bf95
 800bf88:	0800bfdf 	.word	0x0800bfdf
 800bf8c:	0800bfb7 	.word	0x0800bfb7
 800bf90:	0800bfa9 	.word	0x0800bfa9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 f9de 	bl	800c358 <USBD_GetDescriptor>
          break;
 800bf9c:	e024      	b.n	800bfe8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf9e:	6839      	ldr	r1, [r7, #0]
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fb6d 	bl	800c680 <USBD_SetAddress>
          break;
 800bfa6:	e01f      	b.n	800bfe8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fbac 	bl	800c708 <USBD_SetConfig>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	73fb      	strb	r3, [r7, #15]
          break;
 800bfb4:	e018      	b.n	800bfe8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fc4b 	bl	800c854 <USBD_GetConfig>
          break;
 800bfbe:	e013      	b.n	800bfe8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bfc0:	6839      	ldr	r1, [r7, #0]
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 fc7c 	bl	800c8c0 <USBD_GetStatus>
          break;
 800bfc8:	e00e      	b.n	800bfe8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bfca:	6839      	ldr	r1, [r7, #0]
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 fcab 	bl	800c928 <USBD_SetFeature>
          break;
 800bfd2:	e009      	b.n	800bfe8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bfd4:	6839      	ldr	r1, [r7, #0]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fcba 	bl	800c950 <USBD_ClrFeature>
          break;
 800bfdc:	e004      	b.n	800bfe8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 fd11 	bl	800ca08 <USBD_CtlError>
          break;
 800bfe6:	bf00      	nop
      }
      break;
 800bfe8:	e004      	b.n	800bff4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fd0b 	bl	800ca08 <USBD_CtlError>
      break;
 800bff2:	bf00      	nop
  }

  return ret;
 800bff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop

0800c000 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c00a:	2300      	movs	r3, #0
 800c00c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c016:	2b40      	cmp	r3, #64	; 0x40
 800c018:	d005      	beq.n	800c026 <USBD_StdItfReq+0x26>
 800c01a:	2b40      	cmp	r3, #64	; 0x40
 800c01c:	d82f      	bhi.n	800c07e <USBD_StdItfReq+0x7e>
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d001      	beq.n	800c026 <USBD_StdItfReq+0x26>
 800c022:	2b20      	cmp	r3, #32
 800c024:	d12b      	bne.n	800c07e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	3b01      	subs	r3, #1
 800c030:	2b02      	cmp	r3, #2
 800c032:	d81d      	bhi.n	800c070 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	889b      	ldrh	r3, [r3, #4]
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d813      	bhi.n	800c066 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	4798      	blx	r3
 800c04c:	4603      	mov	r3, r0
 800c04e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	88db      	ldrh	r3, [r3, #6]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d110      	bne.n	800c07a <USBD_StdItfReq+0x7a>
 800c058:	7bfb      	ldrb	r3, [r7, #15]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10d      	bne.n	800c07a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fd9d 	bl	800cb9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c064:	e009      	b.n	800c07a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fccd 	bl	800ca08 <USBD_CtlError>
          break;
 800c06e:	e004      	b.n	800c07a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fcc8 	bl	800ca08 <USBD_CtlError>
          break;
 800c078:	e000      	b.n	800c07c <USBD_StdItfReq+0x7c>
          break;
 800c07a:	bf00      	nop
      }
      break;
 800c07c:	e004      	b.n	800c088 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c07e:	6839      	ldr	r1, [r7, #0]
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 fcc1 	bl	800ca08 <USBD_CtlError>
      break;
 800c086:	bf00      	nop
  }

  return ret;
 800c088:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b084      	sub	sp, #16
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
 800c09a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c09c:	2300      	movs	r3, #0
 800c09e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	889b      	ldrh	r3, [r3, #4]
 800c0a4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0ae:	2b40      	cmp	r3, #64	; 0x40
 800c0b0:	d007      	beq.n	800c0c2 <USBD_StdEPReq+0x30>
 800c0b2:	2b40      	cmp	r3, #64	; 0x40
 800c0b4:	f200 8145 	bhi.w	800c342 <USBD_StdEPReq+0x2b0>
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00c      	beq.n	800c0d6 <USBD_StdEPReq+0x44>
 800c0bc:	2b20      	cmp	r3, #32
 800c0be:	f040 8140 	bne.w	800c342 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	4798      	blx	r3
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	73fb      	strb	r3, [r7, #15]
      break;
 800c0d4:	e13a      	b.n	800c34c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	785b      	ldrb	r3, [r3, #1]
 800c0da:	2b03      	cmp	r3, #3
 800c0dc:	d007      	beq.n	800c0ee <USBD_StdEPReq+0x5c>
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	f300 8129 	bgt.w	800c336 <USBD_StdEPReq+0x2a4>
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d07f      	beq.n	800c1e8 <USBD_StdEPReq+0x156>
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d03c      	beq.n	800c166 <USBD_StdEPReq+0xd4>
 800c0ec:	e123      	b.n	800c336 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	d002      	beq.n	800c100 <USBD_StdEPReq+0x6e>
 800c0fa:	2b03      	cmp	r3, #3
 800c0fc:	d016      	beq.n	800c12c <USBD_StdEPReq+0x9a>
 800c0fe:	e02c      	b.n	800c15a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c100:	7bbb      	ldrb	r3, [r7, #14]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00d      	beq.n	800c122 <USBD_StdEPReq+0x90>
 800c106:	7bbb      	ldrb	r3, [r7, #14]
 800c108:	2b80      	cmp	r3, #128	; 0x80
 800c10a:	d00a      	beq.n	800c122 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c10c:	7bbb      	ldrb	r3, [r7, #14]
 800c10e:	4619      	mov	r1, r3
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f004 fcf7 	bl	8010b04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c116:	2180      	movs	r1, #128	; 0x80
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f004 fcf3 	bl	8010b04 <USBD_LL_StallEP>
 800c11e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c120:	e020      	b.n	800c164 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c122:	6839      	ldr	r1, [r7, #0]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fc6f 	bl	800ca08 <USBD_CtlError>
              break;
 800c12a:	e01b      	b.n	800c164 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	885b      	ldrh	r3, [r3, #2]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10e      	bne.n	800c152 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c134:	7bbb      	ldrb	r3, [r7, #14]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00b      	beq.n	800c152 <USBD_StdEPReq+0xc0>
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	2b80      	cmp	r3, #128	; 0x80
 800c13e:	d008      	beq.n	800c152 <USBD_StdEPReq+0xc0>
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	88db      	ldrh	r3, [r3, #6]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d104      	bne.n	800c152 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c148:	7bbb      	ldrb	r3, [r7, #14]
 800c14a:	4619      	mov	r1, r3
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f004 fcd9 	bl	8010b04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 fd23 	bl	800cb9e <USBD_CtlSendStatus>

              break;
 800c158:	e004      	b.n	800c164 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c15a:	6839      	ldr	r1, [r7, #0]
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 fc53 	bl	800ca08 <USBD_CtlError>
              break;
 800c162:	bf00      	nop
          }
          break;
 800c164:	e0ec      	b.n	800c340 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d002      	beq.n	800c178 <USBD_StdEPReq+0xe6>
 800c172:	2b03      	cmp	r3, #3
 800c174:	d016      	beq.n	800c1a4 <USBD_StdEPReq+0x112>
 800c176:	e030      	b.n	800c1da <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c178:	7bbb      	ldrb	r3, [r7, #14]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00d      	beq.n	800c19a <USBD_StdEPReq+0x108>
 800c17e:	7bbb      	ldrb	r3, [r7, #14]
 800c180:	2b80      	cmp	r3, #128	; 0x80
 800c182:	d00a      	beq.n	800c19a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c184:	7bbb      	ldrb	r3, [r7, #14]
 800c186:	4619      	mov	r1, r3
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f004 fcbb 	bl	8010b04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c18e:	2180      	movs	r1, #128	; 0x80
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f004 fcb7 	bl	8010b04 <USBD_LL_StallEP>
 800c196:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c198:	e025      	b.n	800c1e6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c19a:	6839      	ldr	r1, [r7, #0]
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 fc33 	bl	800ca08 <USBD_CtlError>
              break;
 800c1a2:	e020      	b.n	800c1e6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	885b      	ldrh	r3, [r3, #2]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d11b      	bne.n	800c1e4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
 800c1ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d004      	beq.n	800c1c0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c1b6:	7bbb      	ldrb	r3, [r7, #14]
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f004 fcc1 	bl	8010b42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fcec 	bl	800cb9e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	6839      	ldr	r1, [r7, #0]
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	4798      	blx	r3
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c1d8:	e004      	b.n	800c1e4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c1da:	6839      	ldr	r1, [r7, #0]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fc13 	bl	800ca08 <USBD_CtlError>
              break;
 800c1e2:	e000      	b.n	800c1e6 <USBD_StdEPReq+0x154>
              break;
 800c1e4:	bf00      	nop
          }
          break;
 800c1e6:	e0ab      	b.n	800c340 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d002      	beq.n	800c1fa <USBD_StdEPReq+0x168>
 800c1f4:	2b03      	cmp	r3, #3
 800c1f6:	d032      	beq.n	800c25e <USBD_StdEPReq+0x1cc>
 800c1f8:	e097      	b.n	800c32a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1fa:	7bbb      	ldrb	r3, [r7, #14]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d007      	beq.n	800c210 <USBD_StdEPReq+0x17e>
 800c200:	7bbb      	ldrb	r3, [r7, #14]
 800c202:	2b80      	cmp	r3, #128	; 0x80
 800c204:	d004      	beq.n	800c210 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c206:	6839      	ldr	r1, [r7, #0]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 fbfd 	bl	800ca08 <USBD_CtlError>
                break;
 800c20e:	e091      	b.n	800c334 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c214:	2b00      	cmp	r3, #0
 800c216:	da0b      	bge.n	800c230 <USBD_StdEPReq+0x19e>
 800c218:	7bbb      	ldrb	r3, [r7, #14]
 800c21a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c21e:	4613      	mov	r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4413      	add	r3, r2
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	3310      	adds	r3, #16
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	4413      	add	r3, r2
 800c22c:	3304      	adds	r3, #4
 800c22e:	e00b      	b.n	800c248 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c230:	7bbb      	ldrb	r3, [r7, #14]
 800c232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c236:	4613      	mov	r3, r2
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	4413      	add	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	4413      	add	r3, r2
 800c246:	3304      	adds	r3, #4
 800c248:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	2200      	movs	r2, #0
 800c24e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	2202      	movs	r2, #2
 800c254:	4619      	mov	r1, r3
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fc47 	bl	800caea <USBD_CtlSendData>
              break;
 800c25c:	e06a      	b.n	800c334 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c25e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c262:	2b00      	cmp	r3, #0
 800c264:	da11      	bge.n	800c28a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c266:	7bbb      	ldrb	r3, [r7, #14]
 800c268:	f003 020f 	and.w	r2, r3, #15
 800c26c:	6879      	ldr	r1, [r7, #4]
 800c26e:	4613      	mov	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	440b      	add	r3, r1
 800c278:	3324      	adds	r3, #36	; 0x24
 800c27a:	881b      	ldrh	r3, [r3, #0]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d117      	bne.n	800c2b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c280:	6839      	ldr	r1, [r7, #0]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fbc0 	bl	800ca08 <USBD_CtlError>
                  break;
 800c288:	e054      	b.n	800c334 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
 800c28c:	f003 020f 	and.w	r2, r3, #15
 800c290:	6879      	ldr	r1, [r7, #4]
 800c292:	4613      	mov	r3, r2
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4413      	add	r3, r2
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	440b      	add	r3, r1
 800c29c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c2a0:	881b      	ldrh	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d104      	bne.n	800c2b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 fbad 	bl	800ca08 <USBD_CtlError>
                  break;
 800c2ae:	e041      	b.n	800c334 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	da0b      	bge.n	800c2d0 <USBD_StdEPReq+0x23e>
 800c2b8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2be:	4613      	mov	r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	4413      	add	r3, r2
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	3310      	adds	r3, #16
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	3304      	adds	r3, #4
 800c2ce:	e00b      	b.n	800c2e8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c2d0:	7bbb      	ldrb	r3, [r7, #14]
 800c2d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c2ea:	7bbb      	ldrb	r3, [r7, #14]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d002      	beq.n	800c2f6 <USBD_StdEPReq+0x264>
 800c2f0:	7bbb      	ldrb	r3, [r7, #14]
 800c2f2:	2b80      	cmp	r3, #128	; 0x80
 800c2f4:	d103      	bne.n	800c2fe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	601a      	str	r2, [r3, #0]
 800c2fc:	e00e      	b.n	800c31c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c2fe:	7bbb      	ldrb	r3, [r7, #14]
 800c300:	4619      	mov	r1, r3
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f004 fc3c 	bl	8010b80 <USBD_LL_IsStallEP>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d003      	beq.n	800c316 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	2201      	movs	r2, #1
 800c312:	601a      	str	r2, [r3, #0]
 800c314:	e002      	b.n	800c31c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	2200      	movs	r2, #0
 800c31a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	2202      	movs	r2, #2
 800c320:	4619      	mov	r1, r3
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fbe1 	bl	800caea <USBD_CtlSendData>
              break;
 800c328:	e004      	b.n	800c334 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 fb6b 	bl	800ca08 <USBD_CtlError>
              break;
 800c332:	bf00      	nop
          }
          break;
 800c334:	e004      	b.n	800c340 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 fb65 	bl	800ca08 <USBD_CtlError>
          break;
 800c33e:	bf00      	nop
      }
      break;
 800c340:	e004      	b.n	800c34c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c342:	6839      	ldr	r1, [r7, #0]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 fb5f 	bl	800ca08 <USBD_CtlError>
      break;
 800c34a:	bf00      	nop
  }

  return ret;
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
	...

0800c358 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c362:	2300      	movs	r3, #0
 800c364:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c366:	2300      	movs	r3, #0
 800c368:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c36a:	2300      	movs	r3, #0
 800c36c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	885b      	ldrh	r3, [r3, #2]
 800c372:	0a1b      	lsrs	r3, r3, #8
 800c374:	b29b      	uxth	r3, r3
 800c376:	3b01      	subs	r3, #1
 800c378:	2b0e      	cmp	r3, #14
 800c37a:	f200 8152 	bhi.w	800c622 <USBD_GetDescriptor+0x2ca>
 800c37e:	a201      	add	r2, pc, #4	; (adr r2, 800c384 <USBD_GetDescriptor+0x2c>)
 800c380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c384:	0800c3f5 	.word	0x0800c3f5
 800c388:	0800c40d 	.word	0x0800c40d
 800c38c:	0800c44d 	.word	0x0800c44d
 800c390:	0800c623 	.word	0x0800c623
 800c394:	0800c623 	.word	0x0800c623
 800c398:	0800c5c3 	.word	0x0800c5c3
 800c39c:	0800c5ef 	.word	0x0800c5ef
 800c3a0:	0800c623 	.word	0x0800c623
 800c3a4:	0800c623 	.word	0x0800c623
 800c3a8:	0800c623 	.word	0x0800c623
 800c3ac:	0800c623 	.word	0x0800c623
 800c3b0:	0800c623 	.word	0x0800c623
 800c3b4:	0800c623 	.word	0x0800c623
 800c3b8:	0800c623 	.word	0x0800c623
 800c3bc:	0800c3c1 	.word	0x0800c3c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c6:	69db      	ldr	r3, [r3, #28]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00b      	beq.n	800c3e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3d2:	69db      	ldr	r3, [r3, #28]
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	7c12      	ldrb	r2, [r2, #16]
 800c3d8:	f107 0108 	add.w	r1, r7, #8
 800c3dc:	4610      	mov	r0, r2
 800c3de:	4798      	blx	r3
 800c3e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3e2:	e126      	b.n	800c632 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fb0e 	bl	800ca08 <USBD_CtlError>
        err++;
 800c3ec:	7afb      	ldrb	r3, [r7, #11]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	72fb      	strb	r3, [r7, #11]
      break;
 800c3f2:	e11e      	b.n	800c632 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	7c12      	ldrb	r2, [r2, #16]
 800c400:	f107 0108 	add.w	r1, r7, #8
 800c404:	4610      	mov	r0, r2
 800c406:	4798      	blx	r3
 800c408:	60f8      	str	r0, [r7, #12]
      break;
 800c40a:	e112      	b.n	800c632 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	7c1b      	ldrb	r3, [r3, #16]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d10d      	bne.n	800c430 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c41c:	f107 0208 	add.w	r2, r7, #8
 800c420:	4610      	mov	r0, r2
 800c422:	4798      	blx	r3
 800c424:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3301      	adds	r3, #1
 800c42a:	2202      	movs	r2, #2
 800c42c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c42e:	e100      	b.n	800c632 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c438:	f107 0208 	add.w	r2, r7, #8
 800c43c:	4610      	mov	r0, r2
 800c43e:	4798      	blx	r3
 800c440:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	3301      	adds	r3, #1
 800c446:	2202      	movs	r2, #2
 800c448:	701a      	strb	r2, [r3, #0]
      break;
 800c44a:	e0f2      	b.n	800c632 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	885b      	ldrh	r3, [r3, #2]
 800c450:	b2db      	uxtb	r3, r3
 800c452:	2b05      	cmp	r3, #5
 800c454:	f200 80ac 	bhi.w	800c5b0 <USBD_GetDescriptor+0x258>
 800c458:	a201      	add	r2, pc, #4	; (adr r2, 800c460 <USBD_GetDescriptor+0x108>)
 800c45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c45e:	bf00      	nop
 800c460:	0800c479 	.word	0x0800c479
 800c464:	0800c4ad 	.word	0x0800c4ad
 800c468:	0800c4e1 	.word	0x0800c4e1
 800c46c:	0800c515 	.word	0x0800c515
 800c470:	0800c549 	.word	0x0800c549
 800c474:	0800c57d 	.word	0x0800c57d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00b      	beq.n	800c49c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	7c12      	ldrb	r2, [r2, #16]
 800c490:	f107 0108 	add.w	r1, r7, #8
 800c494:	4610      	mov	r0, r2
 800c496:	4798      	blx	r3
 800c498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c49a:	e091      	b.n	800c5c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c49c:	6839      	ldr	r1, [r7, #0]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 fab2 	bl	800ca08 <USBD_CtlError>
            err++;
 800c4a4:	7afb      	ldrb	r3, [r7, #11]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4aa:	e089      	b.n	800c5c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00b      	beq.n	800c4d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	7c12      	ldrb	r2, [r2, #16]
 800c4c4:	f107 0108 	add.w	r1, r7, #8
 800c4c8:	4610      	mov	r0, r2
 800c4ca:	4798      	blx	r3
 800c4cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ce:	e077      	b.n	800c5c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4d0:	6839      	ldr	r1, [r7, #0]
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 fa98 	bl	800ca08 <USBD_CtlError>
            err++;
 800c4d8:	7afb      	ldrb	r3, [r7, #11]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c4de:	e06f      	b.n	800c5c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00b      	beq.n	800c504 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	7c12      	ldrb	r2, [r2, #16]
 800c4f8:	f107 0108 	add.w	r1, r7, #8
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	4798      	blx	r3
 800c500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c502:	e05d      	b.n	800c5c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c504:	6839      	ldr	r1, [r7, #0]
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa7e 	bl	800ca08 <USBD_CtlError>
            err++;
 800c50c:	7afb      	ldrb	r3, [r7, #11]
 800c50e:	3301      	adds	r3, #1
 800c510:	72fb      	strb	r3, [r7, #11]
          break;
 800c512:	e055      	b.n	800c5c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c51a:	691b      	ldr	r3, [r3, #16]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00b      	beq.n	800c538 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	7c12      	ldrb	r2, [r2, #16]
 800c52c:	f107 0108 	add.w	r1, r7, #8
 800c530:	4610      	mov	r0, r2
 800c532:	4798      	blx	r3
 800c534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c536:	e043      	b.n	800c5c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fa64 	bl	800ca08 <USBD_CtlError>
            err++;
 800c540:	7afb      	ldrb	r3, [r7, #11]
 800c542:	3301      	adds	r3, #1
 800c544:	72fb      	strb	r3, [r7, #11]
          break;
 800c546:	e03b      	b.n	800c5c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00b      	beq.n	800c56c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c55a:	695b      	ldr	r3, [r3, #20]
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	7c12      	ldrb	r2, [r2, #16]
 800c560:	f107 0108 	add.w	r1, r7, #8
 800c564:	4610      	mov	r0, r2
 800c566:	4798      	blx	r3
 800c568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c56a:	e029      	b.n	800c5c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fa4a 	bl	800ca08 <USBD_CtlError>
            err++;
 800c574:	7afb      	ldrb	r3, [r7, #11]
 800c576:	3301      	adds	r3, #1
 800c578:	72fb      	strb	r3, [r7, #11]
          break;
 800c57a:	e021      	b.n	800c5c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c582:	699b      	ldr	r3, [r3, #24]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00b      	beq.n	800c5a0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c58e:	699b      	ldr	r3, [r3, #24]
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	7c12      	ldrb	r2, [r2, #16]
 800c594:	f107 0108 	add.w	r1, r7, #8
 800c598:	4610      	mov	r0, r2
 800c59a:	4798      	blx	r3
 800c59c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c59e:	e00f      	b.n	800c5c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5a0:	6839      	ldr	r1, [r7, #0]
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 fa30 	bl	800ca08 <USBD_CtlError>
            err++;
 800c5a8:	7afb      	ldrb	r3, [r7, #11]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ae:	e007      	b.n	800c5c0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c5b0:	6839      	ldr	r1, [r7, #0]
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 fa28 	bl	800ca08 <USBD_CtlError>
          err++;
 800c5b8:	7afb      	ldrb	r3, [r7, #11]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c5be:	bf00      	nop
      }
      break;
 800c5c0:	e037      	b.n	800c632 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	7c1b      	ldrb	r3, [r3, #16]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d109      	bne.n	800c5de <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d2:	f107 0208 	add.w	r2, r7, #8
 800c5d6:	4610      	mov	r0, r2
 800c5d8:	4798      	blx	r3
 800c5da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5dc:	e029      	b.n	800c632 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c5de:	6839      	ldr	r1, [r7, #0]
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 fa11 	bl	800ca08 <USBD_CtlError>
        err++;
 800c5e6:	7afb      	ldrb	r3, [r7, #11]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	72fb      	strb	r3, [r7, #11]
      break;
 800c5ec:	e021      	b.n	800c632 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	7c1b      	ldrb	r3, [r3, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d10d      	bne.n	800c612 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5fe:	f107 0208 	add.w	r2, r7, #8
 800c602:	4610      	mov	r0, r2
 800c604:	4798      	blx	r3
 800c606:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	3301      	adds	r3, #1
 800c60c:	2207      	movs	r2, #7
 800c60e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c610:	e00f      	b.n	800c632 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c612:	6839      	ldr	r1, [r7, #0]
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 f9f7 	bl	800ca08 <USBD_CtlError>
        err++;
 800c61a:	7afb      	ldrb	r3, [r7, #11]
 800c61c:	3301      	adds	r3, #1
 800c61e:	72fb      	strb	r3, [r7, #11]
      break;
 800c620:	e007      	b.n	800c632 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f9ef 	bl	800ca08 <USBD_CtlError>
      err++;
 800c62a:	7afb      	ldrb	r3, [r7, #11]
 800c62c:	3301      	adds	r3, #1
 800c62e:	72fb      	strb	r3, [r7, #11]
      break;
 800c630:	bf00      	nop
  }

  if (err != 0U)
 800c632:	7afb      	ldrb	r3, [r7, #11]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d11e      	bne.n	800c676 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	88db      	ldrh	r3, [r3, #6]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d016      	beq.n	800c66e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c640:	893b      	ldrh	r3, [r7, #8]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00e      	beq.n	800c664 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	88da      	ldrh	r2, [r3, #6]
 800c64a:	893b      	ldrh	r3, [r7, #8]
 800c64c:	4293      	cmp	r3, r2
 800c64e:	bf28      	it	cs
 800c650:	4613      	movcs	r3, r2
 800c652:	b29b      	uxth	r3, r3
 800c654:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c656:	893b      	ldrh	r3, [r7, #8]
 800c658:	461a      	mov	r2, r3
 800c65a:	68f9      	ldr	r1, [r7, #12]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 fa44 	bl	800caea <USBD_CtlSendData>
 800c662:	e009      	b.n	800c678 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c664:	6839      	ldr	r1, [r7, #0]
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 f9ce 	bl	800ca08 <USBD_CtlError>
 800c66c:	e004      	b.n	800c678 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 fa95 	bl	800cb9e <USBD_CtlSendStatus>
 800c674:	e000      	b.n	800c678 <USBD_GetDescriptor+0x320>
    return;
 800c676:	bf00      	nop
  }
}
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop

0800c680 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	889b      	ldrh	r3, [r3, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d131      	bne.n	800c6f6 <USBD_SetAddress+0x76>
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	88db      	ldrh	r3, [r3, #6]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d12d      	bne.n	800c6f6 <USBD_SetAddress+0x76>
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	885b      	ldrh	r3, [r3, #2]
 800c69e:	2b7f      	cmp	r3, #127	; 0x7f
 800c6a0:	d829      	bhi.n	800c6f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	885b      	ldrh	r3, [r3, #2]
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	2b03      	cmp	r3, #3
 800c6b8:	d104      	bne.n	800c6c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f9a3 	bl	800ca08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6c2:	e01d      	b.n	800c700 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	7bfa      	ldrb	r2, [r7, #15]
 800c6c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f004 fa82 	bl	8010bda <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fa61 	bl	800cb9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c6dc:	7bfb      	ldrb	r3, [r7, #15]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d004      	beq.n	800c6ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2202      	movs	r2, #2
 800c6e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ea:	e009      	b.n	800c700 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6f4:	e004      	b.n	800c700 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c6f6:	6839      	ldr	r1, [r7, #0]
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 f985 	bl	800ca08 <USBD_CtlError>
  }
}
 800c6fe:	bf00      	nop
 800c700:	bf00      	nop
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c712:	2300      	movs	r3, #0
 800c714:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	885b      	ldrh	r3, [r3, #2]
 800c71a:	b2da      	uxtb	r2, r3
 800c71c:	4b4c      	ldr	r3, [pc, #304]	; (800c850 <USBD_SetConfig+0x148>)
 800c71e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c720:	4b4b      	ldr	r3, [pc, #300]	; (800c850 <USBD_SetConfig+0x148>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	2b01      	cmp	r3, #1
 800c726:	d905      	bls.n	800c734 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c728:	6839      	ldr	r1, [r7, #0]
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 f96c 	bl	800ca08 <USBD_CtlError>
    return USBD_FAIL;
 800c730:	2303      	movs	r3, #3
 800c732:	e088      	b.n	800c846 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d002      	beq.n	800c746 <USBD_SetConfig+0x3e>
 800c740:	2b03      	cmp	r3, #3
 800c742:	d025      	beq.n	800c790 <USBD_SetConfig+0x88>
 800c744:	e071      	b.n	800c82a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c746:	4b42      	ldr	r3, [pc, #264]	; (800c850 <USBD_SetConfig+0x148>)
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d01c      	beq.n	800c788 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c74e:	4b40      	ldr	r3, [pc, #256]	; (800c850 <USBD_SetConfig+0x148>)
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	461a      	mov	r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c758:	4b3d      	ldr	r3, [pc, #244]	; (800c850 <USBD_SetConfig+0x148>)
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	4619      	mov	r1, r3
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f7ff f992 	bl	800ba88 <USBD_SetClassConfig>
 800c764:	4603      	mov	r3, r0
 800c766:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c768:	7bfb      	ldrb	r3, [r7, #15]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d004      	beq.n	800c778 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c76e:	6839      	ldr	r1, [r7, #0]
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 f949 	bl	800ca08 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c776:	e065      	b.n	800c844 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fa10 	bl	800cb9e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2203      	movs	r2, #3
 800c782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c786:	e05d      	b.n	800c844 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 fa08 	bl	800cb9e <USBD_CtlSendStatus>
      break;
 800c78e:	e059      	b.n	800c844 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c790:	4b2f      	ldr	r3, [pc, #188]	; (800c850 <USBD_SetConfig+0x148>)
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d112      	bne.n	800c7be <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2202      	movs	r2, #2
 800c79c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c7a0:	4b2b      	ldr	r3, [pc, #172]	; (800c850 <USBD_SetConfig+0x148>)
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7aa:	4b29      	ldr	r3, [pc, #164]	; (800c850 <USBD_SetConfig+0x148>)
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7ff f985 	bl	800bac0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 f9f1 	bl	800cb9e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c7bc:	e042      	b.n	800c844 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c7be:	4b24      	ldr	r3, [pc, #144]	; (800c850 <USBD_SetConfig+0x148>)
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d02a      	beq.n	800c822 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7ff f973 	bl	800bac0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c7da:	4b1d      	ldr	r3, [pc, #116]	; (800c850 <USBD_SetConfig+0x148>)
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7e4:	4b1a      	ldr	r3, [pc, #104]	; (800c850 <USBD_SetConfig+0x148>)
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff f94c 	bl	800ba88 <USBD_SetClassConfig>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c7f4:	7bfb      	ldrb	r3, [r7, #15]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00f      	beq.n	800c81a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f903 	bl	800ca08 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	b2db      	uxtb	r3, r3
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7ff f958 	bl	800bac0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2202      	movs	r2, #2
 800c814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c818:	e014      	b.n	800c844 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 f9bf 	bl	800cb9e <USBD_CtlSendStatus>
      break;
 800c820:	e010      	b.n	800c844 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 f9bb 	bl	800cb9e <USBD_CtlSendStatus>
      break;
 800c828:	e00c      	b.n	800c844 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f8eb 	bl	800ca08 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c832:	4b07      	ldr	r3, [pc, #28]	; (800c850 <USBD_SetConfig+0x148>)
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	4619      	mov	r1, r3
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f7ff f941 	bl	800bac0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c83e:	2303      	movs	r3, #3
 800c840:	73fb      	strb	r3, [r7, #15]
      break;
 800c842:	bf00      	nop
  }

  return ret;
 800c844:	7bfb      	ldrb	r3, [r7, #15]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	200001dc 	.word	0x200001dc

0800c854 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	88db      	ldrh	r3, [r3, #6]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d004      	beq.n	800c870 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c866:	6839      	ldr	r1, [r7, #0]
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 f8cd 	bl	800ca08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c86e:	e023      	b.n	800c8b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c876:	b2db      	uxtb	r3, r3
 800c878:	2b02      	cmp	r3, #2
 800c87a:	dc02      	bgt.n	800c882 <USBD_GetConfig+0x2e>
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	dc03      	bgt.n	800c888 <USBD_GetConfig+0x34>
 800c880:	e015      	b.n	800c8ae <USBD_GetConfig+0x5a>
 800c882:	2b03      	cmp	r3, #3
 800c884:	d00b      	beq.n	800c89e <USBD_GetConfig+0x4a>
 800c886:	e012      	b.n	800c8ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	3308      	adds	r3, #8
 800c892:	2201      	movs	r2, #1
 800c894:	4619      	mov	r1, r3
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f927 	bl	800caea <USBD_CtlSendData>
        break;
 800c89c:	e00c      	b.n	800c8b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 f91f 	bl	800caea <USBD_CtlSendData>
        break;
 800c8ac:	e004      	b.n	800c8b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c8ae:	6839      	ldr	r1, [r7, #0]
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 f8a9 	bl	800ca08 <USBD_CtlError>
        break;
 800c8b6:	bf00      	nop
}
 800c8b8:	bf00      	nop
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d81e      	bhi.n	800c916 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	88db      	ldrh	r3, [r3, #6]
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d004      	beq.n	800c8ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c8e0:	6839      	ldr	r1, [r7, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f890 	bl	800ca08 <USBD_CtlError>
        break;
 800c8e8:	e01a      	b.n	800c920 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d005      	beq.n	800c906 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	f043 0202 	orr.w	r2, r3, #2
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	330c      	adds	r3, #12
 800c90a:	2202      	movs	r2, #2
 800c90c:	4619      	mov	r1, r3
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f8eb 	bl	800caea <USBD_CtlSendData>
      break;
 800c914:	e004      	b.n	800c920 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 f875 	bl	800ca08 <USBD_CtlError>
      break;
 800c91e:	bf00      	nop
  }
}
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	885b      	ldrh	r3, [r3, #2]
 800c936:	2b01      	cmp	r3, #1
 800c938:	d106      	bne.n	800c948 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2201      	movs	r2, #1
 800c93e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 f92b 	bl	800cb9e <USBD_CtlSendStatus>
  }
}
 800c948:	bf00      	nop
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c960:	b2db      	uxtb	r3, r3
 800c962:	3b01      	subs	r3, #1
 800c964:	2b02      	cmp	r3, #2
 800c966:	d80b      	bhi.n	800c980 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	885b      	ldrh	r3, [r3, #2]
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d10c      	bne.n	800c98a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 f910 	bl	800cb9e <USBD_CtlSendStatus>
      }
      break;
 800c97e:	e004      	b.n	800c98a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 f840 	bl	800ca08 <USBD_CtlError>
      break;
 800c988:	e000      	b.n	800c98c <USBD_ClrFeature+0x3c>
      break;
 800c98a:	bf00      	nop
  }
}
 800c98c:	bf00      	nop
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	781a      	ldrb	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	781a      	ldrb	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f7ff fa92 	bl	800bee8 <SWAPBYTE>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	f7ff fa85 	bl	800bee8 <SWAPBYTE>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f7ff fa78 	bl	800bee8 <SWAPBYTE>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	80da      	strh	r2, [r3, #6]
}
 800ca00:	bf00      	nop
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca12:	2180      	movs	r1, #128	; 0x80
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f004 f875 	bl	8010b04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f004 f871 	bl	8010b04 <USBD_LL_StallEP>
}
 800ca22:	bf00      	nop
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b086      	sub	sp, #24
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	60f8      	str	r0, [r7, #12]
 800ca32:	60b9      	str	r1, [r7, #8]
 800ca34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca36:	2300      	movs	r3, #0
 800ca38:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d036      	beq.n	800caae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ca44:	6938      	ldr	r0, [r7, #16]
 800ca46:	f000 f836 	bl	800cab6 <USBD_GetLen>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	005b      	lsls	r3, r3, #1
 800ca52:	b29a      	uxth	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca58:	7dfb      	ldrb	r3, [r7, #23]
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	7812      	ldrb	r2, [r2, #0]
 800ca62:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca64:	7dfb      	ldrb	r3, [r7, #23]
 800ca66:	3301      	adds	r3, #1
 800ca68:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca6a:	7dfb      	ldrb	r3, [r7, #23]
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	4413      	add	r3, r2
 800ca70:	2203      	movs	r2, #3
 800ca72:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca74:	7dfb      	ldrb	r3, [r7, #23]
 800ca76:	3301      	adds	r3, #1
 800ca78:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca7a:	e013      	b.n	800caa4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	4413      	add	r3, r2
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	7812      	ldrb	r2, [r2, #0]
 800ca86:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	613b      	str	r3, [r7, #16]
    idx++;
 800ca8e:	7dfb      	ldrb	r3, [r7, #23]
 800ca90:	3301      	adds	r3, #1
 800ca92:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca94:	7dfb      	ldrb	r3, [r7, #23]
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	4413      	add	r3, r2
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca9e:	7dfb      	ldrb	r3, [r7, #23]
 800caa0:	3301      	adds	r3, #1
 800caa2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1e7      	bne.n	800ca7c <USBD_GetString+0x52>
 800caac:	e000      	b.n	800cab0 <USBD_GetString+0x86>
    return;
 800caae:	bf00      	nop
  }
}
 800cab0:	3718      	adds	r7, #24
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cab6:	b480      	push	{r7}
 800cab8:	b085      	sub	sp, #20
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cabe:	2300      	movs	r3, #0
 800cac0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cac6:	e005      	b.n	800cad4 <USBD_GetLen+0x1e>
  {
    len++;
 800cac8:	7bfb      	ldrb	r3, [r7, #15]
 800caca:	3301      	adds	r3, #1
 800cacc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	3301      	adds	r3, #1
 800cad2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1f5      	bne.n	800cac8 <USBD_GetLen+0x12>
  }

  return len;
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b084      	sub	sp, #16
 800caee:	af00      	add	r7, sp, #0
 800caf0:	60f8      	str	r0, [r7, #12]
 800caf2:	60b9      	str	r1, [r7, #8]
 800caf4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2202      	movs	r2, #2
 800cafa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	2100      	movs	r1, #0
 800cb10:	68f8      	ldr	r0, [r7, #12]
 800cb12:	f004 f881 	bl	8010c18 <USBD_LL_Transmit>

  return USBD_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	2100      	movs	r1, #0
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f004 f870 	bl	8010c18 <USBD_LL_Transmit>

  return USBD_OK;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b084      	sub	sp, #16
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	60f8      	str	r0, [r7, #12]
 800cb4a:	60b9      	str	r1, [r7, #8]
 800cb4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2203      	movs	r2, #3
 800cb52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f004 f874 	bl	8010c5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb72:	2300      	movs	r3, #0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	68ba      	ldr	r2, [r7, #8]
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	f004 f863 	bl	8010c5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3710      	adds	r7, #16
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b082      	sub	sp, #8
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2204      	movs	r2, #4
 800cbaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cbae:	2300      	movs	r3, #0
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f004 f82f 	bl	8010c18 <USBD_LL_Transmit>

  return USBD_OK;
 800cbba:	2300      	movs	r3, #0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2205      	movs	r2, #5
 800cbd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	2100      	movs	r1, #0
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f004 f83d 	bl	8010c5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
	...

0800cbec <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800cbf6:	4b0f      	ldr	r3, [pc, #60]	; (800cc34 <OTP_Read+0x48>)
 800cbf8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800cbfa:	e002      	b.n	800cc02 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	3b08      	subs	r3, #8
 800cc00:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	3307      	adds	r3, #7
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	79fa      	ldrb	r2, [r7, #7]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d003      	beq.n	800cc16 <OTP_Read+0x2a>
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	4a09      	ldr	r2, [pc, #36]	; (800cc38 <OTP_Read+0x4c>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d1f2      	bne.n	800cbfc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	3307      	adds	r3, #7
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	79fa      	ldrb	r2, [r7, #7]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d001      	beq.n	800cc26 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800cc22:	2300      	movs	r3, #0
 800cc24:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800cc26:	68fb      	ldr	r3, [r7, #12]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3714      	adds	r7, #20
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr
 800cc34:	1fff73f8 	.word	0x1fff73f8
 800cc38:	1fff7000 	.word	0x1fff7000

0800cc3c <__NVIC_SetPriority>:
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b083      	sub	sp, #12
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	6039      	str	r1, [r7, #0]
 800cc46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cc48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	db0a      	blt.n	800cc66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	b2da      	uxtb	r2, r3
 800cc54:	490c      	ldr	r1, [pc, #48]	; (800cc88 <__NVIC_SetPriority+0x4c>)
 800cc56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc5a:	0112      	lsls	r2, r2, #4
 800cc5c:	b2d2      	uxtb	r2, r2
 800cc5e:	440b      	add	r3, r1
 800cc60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cc64:	e00a      	b.n	800cc7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	b2da      	uxtb	r2, r3
 800cc6a:	4908      	ldr	r1, [pc, #32]	; (800cc8c <__NVIC_SetPriority+0x50>)
 800cc6c:	79fb      	ldrb	r3, [r7, #7]
 800cc6e:	f003 030f 	and.w	r3, r3, #15
 800cc72:	3b04      	subs	r3, #4
 800cc74:	0112      	lsls	r2, r2, #4
 800cc76:	b2d2      	uxtb	r2, r2
 800cc78:	440b      	add	r3, r1
 800cc7a:	761a      	strb	r2, [r3, #24]
}
 800cc7c:	bf00      	nop
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr
 800cc88:	e000e100 	.word	0xe000e100
 800cc8c:	e000ed00 	.word	0xe000ed00

0800cc90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cc90:	b580      	push	{r7, lr}
 800cc92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cc94:	4b05      	ldr	r3, [pc, #20]	; (800ccac <SysTick_Handler+0x1c>)
 800cc96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cc98:	f002 fa02 	bl	800f0a0 <xTaskGetSchedulerState>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d001      	beq.n	800cca6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cca2:	f003 f8e9 	bl	800fe78 <xPortSysTickHandler>
  }
}
 800cca6:	bf00      	nop
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	e000e010 	.word	0xe000e010

0800ccb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	f06f 0004 	mvn.w	r0, #4
 800ccba:	f7ff ffbf 	bl	800cc3c <__NVIC_SetPriority>
#endif
}
 800ccbe:	bf00      	nop
 800ccc0:	bd80      	pop	{r7, pc}
	...

0800ccc4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccca:	f3ef 8305 	mrs	r3, IPSR
 800ccce:	603b      	str	r3, [r7, #0]
  return(result);
 800ccd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d003      	beq.n	800ccde <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ccd6:	f06f 0305 	mvn.w	r3, #5
 800ccda:	607b      	str	r3, [r7, #4]
 800ccdc:	e00c      	b.n	800ccf8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ccde:	4b0a      	ldr	r3, [pc, #40]	; (800cd08 <osKernelInitialize+0x44>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d105      	bne.n	800ccf2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cce6:	4b08      	ldr	r3, [pc, #32]	; (800cd08 <osKernelInitialize+0x44>)
 800cce8:	2201      	movs	r2, #1
 800ccea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ccec:	2300      	movs	r3, #0
 800ccee:	607b      	str	r3, [r7, #4]
 800ccf0:	e002      	b.n	800ccf8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ccf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ccf8:	687b      	ldr	r3, [r7, #4]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	370c      	adds	r7, #12
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	200001e0 	.word	0x200001e0

0800cd0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd12:	f3ef 8305 	mrs	r3, IPSR
 800cd16:	603b      	str	r3, [r7, #0]
  return(result);
 800cd18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d003      	beq.n	800cd26 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cd1e:	f06f 0305 	mvn.w	r3, #5
 800cd22:	607b      	str	r3, [r7, #4]
 800cd24:	e010      	b.n	800cd48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cd26:	4b0b      	ldr	r3, [pc, #44]	; (800cd54 <osKernelStart+0x48>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d109      	bne.n	800cd42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cd2e:	f7ff ffbf 	bl	800ccb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cd32:	4b08      	ldr	r3, [pc, #32]	; (800cd54 <osKernelStart+0x48>)
 800cd34:	2202      	movs	r2, #2
 800cd36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cd38:	f001 fd6a 	bl	800e810 <vTaskStartScheduler>
      stat = osOK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	607b      	str	r3, [r7, #4]
 800cd40:	e002      	b.n	800cd48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cd42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cd48:	687b      	ldr	r3, [r7, #4]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3708      	adds	r7, #8
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	200001e0 	.word	0x200001e0

0800cd58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b08e      	sub	sp, #56	; 0x38
 800cd5c:	af04      	add	r7, sp, #16
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cd64:	2300      	movs	r3, #0
 800cd66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd68:	f3ef 8305 	mrs	r3, IPSR
 800cd6c:	617b      	str	r3, [r7, #20]
  return(result);
 800cd6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d17e      	bne.n	800ce72 <osThreadNew+0x11a>
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d07b      	beq.n	800ce72 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cd7a:	2380      	movs	r3, #128	; 0x80
 800cd7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cd7e:	2318      	movs	r3, #24
 800cd80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cd86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d045      	beq.n	800ce1e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d002      	beq.n	800cda0 <osThreadNew+0x48>
        name = attr->name;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	699b      	ldr	r3, [r3, #24]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d002      	beq.n	800cdae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	699b      	ldr	r3, [r3, #24]
 800cdac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d008      	beq.n	800cdc6 <osThreadNew+0x6e>
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	2b38      	cmp	r3, #56	; 0x38
 800cdb8:	d805      	bhi.n	800cdc6 <osThreadNew+0x6e>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d001      	beq.n	800cdca <osThreadNew+0x72>
        return (NULL);
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	e054      	b.n	800ce74 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	695b      	ldr	r3, [r3, #20]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d003      	beq.n	800cdda <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	695b      	ldr	r3, [r3, #20]
 800cdd6:	089b      	lsrs	r3, r3, #2
 800cdd8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00e      	beq.n	800ce00 <osThreadNew+0xa8>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	2b5b      	cmp	r3, #91	; 0x5b
 800cde8:	d90a      	bls.n	800ce00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d006      	beq.n	800ce00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d002      	beq.n	800ce00 <osThreadNew+0xa8>
        mem = 1;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	61bb      	str	r3, [r7, #24]
 800cdfe:	e010      	b.n	800ce22 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10c      	bne.n	800ce22 <osThreadNew+0xca>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d108      	bne.n	800ce22 <osThreadNew+0xca>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	691b      	ldr	r3, [r3, #16]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d104      	bne.n	800ce22 <osThreadNew+0xca>
          mem = 0;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	61bb      	str	r3, [r7, #24]
 800ce1c:	e001      	b.n	800ce22 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d110      	bne.n	800ce4a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce30:	9202      	str	r2, [sp, #8]
 800ce32:	9301      	str	r3, [sp, #4]
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	6a3a      	ldr	r2, [r7, #32]
 800ce3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f001 fb10 	bl	800e464 <xTaskCreateStatic>
 800ce44:	4603      	mov	r3, r0
 800ce46:	613b      	str	r3, [r7, #16]
 800ce48:	e013      	b.n	800ce72 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ce4a:	69bb      	ldr	r3, [r7, #24]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d110      	bne.n	800ce72 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ce50:	6a3b      	ldr	r3, [r7, #32]
 800ce52:	b29a      	uxth	r2, r3
 800ce54:	f107 0310 	add.w	r3, r7, #16
 800ce58:	9301      	str	r3, [sp, #4]
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	9300      	str	r3, [sp, #0]
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f001 fb5b 	bl	800e51e <xTaskCreate>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d001      	beq.n	800ce72 <osThreadNew+0x11a>
            hTask = NULL;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ce72:	693b      	ldr	r3, [r7, #16]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3728      	adds	r7, #40	; 0x28
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce84:	f3ef 8305 	mrs	r3, IPSR
 800ce88:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d003      	beq.n	800ce98 <osDelay+0x1c>
    stat = osErrorISR;
 800ce90:	f06f 0305 	mvn.w	r3, #5
 800ce94:	60fb      	str	r3, [r7, #12]
 800ce96:	e007      	b.n	800cea8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d002      	beq.n	800cea8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f001 fc80 	bl	800e7a8 <vTaskDelay>
    }
  }

  return (stat);
 800cea8:	68fb      	ldr	r3, [r7, #12]
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b088      	sub	sp, #32
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ceba:	2300      	movs	r3, #0
 800cebc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cebe:	f3ef 8305 	mrs	r3, IPSR
 800cec2:	60bb      	str	r3, [r7, #8]
  return(result);
 800cec4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d174      	bne.n	800cfb4 <osMutexNew+0x102>
    if (attr != NULL) {
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d003      	beq.n	800ced8 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	61bb      	str	r3, [r7, #24]
 800ced6:	e001      	b.n	800cedc <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ced8:	2300      	movs	r3, #0
 800ceda:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	f003 0301 	and.w	r3, r3, #1
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d002      	beq.n	800ceec <osMutexNew+0x3a>
      rmtx = 1U;
 800cee6:	2301      	movs	r3, #1
 800cee8:	617b      	str	r3, [r7, #20]
 800ceea:	e001      	b.n	800cef0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ceec:	2300      	movs	r3, #0
 800ceee:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	f003 0308 	and.w	r3, r3, #8
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d15c      	bne.n	800cfb4 <osMutexNew+0x102>
      mem = -1;
 800cefa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cefe:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d015      	beq.n	800cf32 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d006      	beq.n	800cf1c <osMutexNew+0x6a>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	2b4f      	cmp	r3, #79	; 0x4f
 800cf14:	d902      	bls.n	800cf1c <osMutexNew+0x6a>
          mem = 1;
 800cf16:	2301      	movs	r3, #1
 800cf18:	613b      	str	r3, [r7, #16]
 800cf1a:	e00c      	b.n	800cf36 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	689b      	ldr	r3, [r3, #8]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d108      	bne.n	800cf36 <osMutexNew+0x84>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d104      	bne.n	800cf36 <osMutexNew+0x84>
            mem = 0;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	613b      	str	r3, [r7, #16]
 800cf30:	e001      	b.n	800cf36 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800cf32:	2300      	movs	r3, #0
 800cf34:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d112      	bne.n	800cf62 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d007      	beq.n	800cf52 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	4619      	mov	r1, r3
 800cf48:	2004      	movs	r0, #4
 800cf4a:	f000 fc58 	bl	800d7fe <xQueueCreateMutexStatic>
 800cf4e:	61f8      	str	r0, [r7, #28]
 800cf50:	e016      	b.n	800cf80 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	4619      	mov	r1, r3
 800cf58:	2001      	movs	r0, #1
 800cf5a:	f000 fc50 	bl	800d7fe <xQueueCreateMutexStatic>
 800cf5e:	61f8      	str	r0, [r7, #28]
 800cf60:	e00e      	b.n	800cf80 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d10b      	bne.n	800cf80 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d004      	beq.n	800cf78 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cf6e:	2004      	movs	r0, #4
 800cf70:	f000 fc2d 	bl	800d7ce <xQueueCreateMutex>
 800cf74:	61f8      	str	r0, [r7, #28]
 800cf76:	e003      	b.n	800cf80 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800cf78:	2001      	movs	r0, #1
 800cf7a:	f000 fc28 	bl	800d7ce <xQueueCreateMutex>
 800cf7e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00c      	beq.n	800cfa0 <osMutexNew+0xee>
        if (attr != NULL) {
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d003      	beq.n	800cf94 <osMutexNew+0xe2>
          name = attr->name;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	60fb      	str	r3, [r7, #12]
 800cf92:	e001      	b.n	800cf98 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800cf94:	2300      	movs	r3, #0
 800cf96:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800cf98:	68f9      	ldr	r1, [r7, #12]
 800cf9a:	69f8      	ldr	r0, [r7, #28]
 800cf9c:	f001 fa04 	bl	800e3a8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d006      	beq.n	800cfb4 <osMutexNew+0x102>
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d003      	beq.n	800cfb4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	f043 0301 	orr.w	r3, r3, #1
 800cfb2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cfb4:	69fb      	ldr	r3, [r7, #28]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3720      	adds	r7, #32
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
	...

0800cfc0 <osSemaphoreAcquire>:
  }

  return ((osSemaphoreId_t)hSemaphore);
}

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d103      	bne.n	800cfe0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800cfd8:	f06f 0303 	mvn.w	r3, #3
 800cfdc:	617b      	str	r3, [r7, #20]
 800cfde:	e039      	b.n	800d054 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfe0:	f3ef 8305 	mrs	r3, IPSR
 800cfe4:	60fb      	str	r3, [r7, #12]
  return(result);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d022      	beq.n	800d032 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d003      	beq.n	800cffa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800cff2:	f06f 0303 	mvn.w	r3, #3
 800cff6:	617b      	str	r3, [r7, #20]
 800cff8:	e02c      	b.n	800d054 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800cffa:	2300      	movs	r3, #0
 800cffc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cffe:	f107 0308 	add.w	r3, r7, #8
 800d002:	461a      	mov	r2, r3
 800d004:	2100      	movs	r1, #0
 800d006:	6938      	ldr	r0, [r7, #16]
 800d008:	f001 f826 	bl	800e058 <xQueueReceiveFromISR>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b01      	cmp	r3, #1
 800d010:	d003      	beq.n	800d01a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d012:	f06f 0302 	mvn.w	r3, #2
 800d016:	617b      	str	r3, [r7, #20]
 800d018:	e01c      	b.n	800d054 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d019      	beq.n	800d054 <osSemaphoreAcquire+0x94>
 800d020:	4b0f      	ldr	r3, [pc, #60]	; (800d060 <osSemaphoreAcquire+0xa0>)
 800d022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d026:	601a      	str	r2, [r3, #0]
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	e010      	b.n	800d054 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6938      	ldr	r0, [r7, #16]
 800d036:	f000 ff03 	bl	800de40 <xQueueSemaphoreTake>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d009      	beq.n	800d054 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d003      	beq.n	800d04e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800d046:	f06f 0301 	mvn.w	r3, #1
 800d04a:	617b      	str	r3, [r7, #20]
 800d04c:	e002      	b.n	800d054 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800d04e:	f06f 0302 	mvn.w	r3, #2
 800d052:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d054:	697b      	ldr	r3, [r7, #20]
}
 800d056:	4618      	mov	r0, r3
 800d058:	3718      	adds	r7, #24
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	e000ed04 	.word	0xe000ed04

0800d064 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d064:	b580      	push	{r7, lr}
 800d066:	b086      	sub	sp, #24
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d070:	2300      	movs	r3, #0
 800d072:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d103      	bne.n	800d082 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d07a:	f06f 0303 	mvn.w	r3, #3
 800d07e:	617b      	str	r3, [r7, #20]
 800d080:	e02c      	b.n	800d0dc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d082:	f3ef 8305 	mrs	r3, IPSR
 800d086:	60fb      	str	r3, [r7, #12]
  return(result);
 800d088:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d01a      	beq.n	800d0c4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d08e:	2300      	movs	r3, #0
 800d090:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d092:	f107 0308 	add.w	r3, r7, #8
 800d096:	4619      	mov	r1, r3
 800d098:	6938      	ldr	r0, [r7, #16]
 800d09a:	f000 fd64 	bl	800db66 <xQueueGiveFromISR>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d003      	beq.n	800d0ac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d0a4:	f06f 0302 	mvn.w	r3, #2
 800d0a8:	617b      	str	r3, [r7, #20]
 800d0aa:	e017      	b.n	800d0dc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d014      	beq.n	800d0dc <osSemaphoreRelease+0x78>
 800d0b2:	4b0d      	ldr	r3, [pc, #52]	; (800d0e8 <osSemaphoreRelease+0x84>)
 800d0b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0b8:	601a      	str	r2, [r3, #0]
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	e00b      	b.n	800d0dc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	6938      	ldr	r0, [r7, #16]
 800d0cc:	f000 fbb2 	bl	800d834 <xQueueGenericSend>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d002      	beq.n	800d0dc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d0d6:	f06f 0302 	mvn.w	r3, #2
 800d0da:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d0dc:	697b      	ldr	r3, [r7, #20]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3718      	adds	r7, #24
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	e000ed04 	.word	0xe000ed04

0800d0ec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08a      	sub	sp, #40	; 0x28
 800d0f0:	af02      	add	r7, sp, #8
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0fc:	f3ef 8305 	mrs	r3, IPSR
 800d100:	613b      	str	r3, [r7, #16]
  return(result);
 800d102:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d104:	2b00      	cmp	r3, #0
 800d106:	d15f      	bne.n	800d1c8 <osMessageQueueNew+0xdc>
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d05c      	beq.n	800d1c8 <osMessageQueueNew+0xdc>
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d059      	beq.n	800d1c8 <osMessageQueueNew+0xdc>
    mem = -1;
 800d114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d118:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d029      	beq.n	800d174 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d012      	beq.n	800d14e <osMessageQueueNew+0x62>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	2b4f      	cmp	r3, #79	; 0x4f
 800d12e:	d90e      	bls.n	800d14e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00a      	beq.n	800d14e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	695a      	ldr	r2, [r3, #20]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	68b9      	ldr	r1, [r7, #8]
 800d140:	fb01 f303 	mul.w	r3, r1, r3
 800d144:	429a      	cmp	r2, r3
 800d146:	d302      	bcc.n	800d14e <osMessageQueueNew+0x62>
        mem = 1;
 800d148:	2301      	movs	r3, #1
 800d14a:	61bb      	str	r3, [r7, #24]
 800d14c:	e014      	b.n	800d178 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d110      	bne.n	800d178 <osMessageQueueNew+0x8c>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d10c      	bne.n	800d178 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d162:	2b00      	cmp	r3, #0
 800d164:	d108      	bne.n	800d178 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	695b      	ldr	r3, [r3, #20]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d104      	bne.n	800d178 <osMessageQueueNew+0x8c>
          mem = 0;
 800d16e:	2300      	movs	r3, #0
 800d170:	61bb      	str	r3, [r7, #24]
 800d172:	e001      	b.n	800d178 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d174:	2300      	movs	r3, #0
 800d176:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d10b      	bne.n	800d196 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	691a      	ldr	r2, [r3, #16]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	2100      	movs	r1, #0
 800d188:	9100      	str	r1, [sp, #0]
 800d18a:	68b9      	ldr	r1, [r7, #8]
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f000 fa2f 	bl	800d5f0 <xQueueGenericCreateStatic>
 800d192:	61f8      	str	r0, [r7, #28]
 800d194:	e008      	b.n	800d1a8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d105      	bne.n	800d1a8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d19c:	2200      	movs	r2, #0
 800d19e:	68b9      	ldr	r1, [r7, #8]
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f000 fa9d 	bl	800d6e0 <xQueueGenericCreate>
 800d1a6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00c      	beq.n	800d1c8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d003      	beq.n	800d1bc <osMessageQueueNew+0xd0>
        name = attr->name;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	617b      	str	r3, [r7, #20]
 800d1ba:	e001      	b.n	800d1c0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d1c0:	6979      	ldr	r1, [r7, #20]
 800d1c2:	69f8      	ldr	r0, [r7, #28]
 800d1c4:	f001 f8f0 	bl	800e3a8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d1c8:	69fb      	ldr	r3, [r7, #28]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3720      	adds	r7, #32
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
	...

0800d1d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b088      	sub	sp, #32
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	603b      	str	r3, [r7, #0]
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1ec:	f3ef 8305 	mrs	r3, IPSR
 800d1f0:	617b      	str	r3, [r7, #20]
  return(result);
 800d1f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d028      	beq.n	800d24a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d005      	beq.n	800d20a <osMessageQueuePut+0x36>
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d002      	beq.n	800d20a <osMessageQueuePut+0x36>
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d20a:	f06f 0303 	mvn.w	r3, #3
 800d20e:	61fb      	str	r3, [r7, #28]
 800d210:	e038      	b.n	800d284 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d212:	2300      	movs	r3, #0
 800d214:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d216:	f107 0210 	add.w	r2, r7, #16
 800d21a:	2300      	movs	r3, #0
 800d21c:	68b9      	ldr	r1, [r7, #8]
 800d21e:	69b8      	ldr	r0, [r7, #24]
 800d220:	f000 fc06 	bl	800da30 <xQueueGenericSendFromISR>
 800d224:	4603      	mov	r3, r0
 800d226:	2b01      	cmp	r3, #1
 800d228:	d003      	beq.n	800d232 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d22a:	f06f 0302 	mvn.w	r3, #2
 800d22e:	61fb      	str	r3, [r7, #28]
 800d230:	e028      	b.n	800d284 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d025      	beq.n	800d284 <osMessageQueuePut+0xb0>
 800d238:	4b15      	ldr	r3, [pc, #84]	; (800d290 <osMessageQueuePut+0xbc>)
 800d23a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d23e:	601a      	str	r2, [r3, #0]
 800d240:	f3bf 8f4f 	dsb	sy
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	e01c      	b.n	800d284 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d002      	beq.n	800d256 <osMessageQueuePut+0x82>
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d103      	bne.n	800d25e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d256:	f06f 0303 	mvn.w	r3, #3
 800d25a:	61fb      	str	r3, [r7, #28]
 800d25c:	e012      	b.n	800d284 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d25e:	2300      	movs	r3, #0
 800d260:	683a      	ldr	r2, [r7, #0]
 800d262:	68b9      	ldr	r1, [r7, #8]
 800d264:	69b8      	ldr	r0, [r7, #24]
 800d266:	f000 fae5 	bl	800d834 <xQueueGenericSend>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d009      	beq.n	800d284 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d003      	beq.n	800d27e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d276:	f06f 0301 	mvn.w	r3, #1
 800d27a:	61fb      	str	r3, [r7, #28]
 800d27c:	e002      	b.n	800d284 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d27e:	f06f 0302 	mvn.w	r3, #2
 800d282:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d284:	69fb      	ldr	r3, [r7, #28]
}
 800d286:	4618      	mov	r0, r3
 800d288:	3720      	adds	r7, #32
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	e000ed04 	.word	0xe000ed04

0800d294 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d294:	b580      	push	{r7, lr}
 800d296:	b088      	sub	sp, #32
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
 800d2a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2aa:	f3ef 8305 	mrs	r3, IPSR
 800d2ae:	617b      	str	r3, [r7, #20]
  return(result);
 800d2b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d028      	beq.n	800d308 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d005      	beq.n	800d2c8 <osMessageQueueGet+0x34>
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d002      	beq.n	800d2c8 <osMessageQueueGet+0x34>
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d003      	beq.n	800d2d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d2c8:	f06f 0303 	mvn.w	r3, #3
 800d2cc:	61fb      	str	r3, [r7, #28]
 800d2ce:	e037      	b.n	800d340 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d2d4:	f107 0310 	add.w	r3, r7, #16
 800d2d8:	461a      	mov	r2, r3
 800d2da:	68b9      	ldr	r1, [r7, #8]
 800d2dc:	69b8      	ldr	r0, [r7, #24]
 800d2de:	f000 febb 	bl	800e058 <xQueueReceiveFromISR>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d003      	beq.n	800d2f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d2e8:	f06f 0302 	mvn.w	r3, #2
 800d2ec:	61fb      	str	r3, [r7, #28]
 800d2ee:	e027      	b.n	800d340 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d024      	beq.n	800d340 <osMessageQueueGet+0xac>
 800d2f6:	4b15      	ldr	r3, [pc, #84]	; (800d34c <osMessageQueueGet+0xb8>)
 800d2f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2fc:	601a      	str	r2, [r3, #0]
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	f3bf 8f6f 	isb	sy
 800d306:	e01b      	b.n	800d340 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d002      	beq.n	800d314 <osMessageQueueGet+0x80>
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d103      	bne.n	800d31c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d314:	f06f 0303 	mvn.w	r3, #3
 800d318:	61fb      	str	r3, [r7, #28]
 800d31a:	e011      	b.n	800d340 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d31c:	683a      	ldr	r2, [r7, #0]
 800d31e:	68b9      	ldr	r1, [r7, #8]
 800d320:	69b8      	ldr	r0, [r7, #24]
 800d322:	f000 fcad 	bl	800dc80 <xQueueReceive>
 800d326:	4603      	mov	r3, r0
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d009      	beq.n	800d340 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d003      	beq.n	800d33a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d332:	f06f 0301 	mvn.w	r3, #1
 800d336:	61fb      	str	r3, [r7, #28]
 800d338:	e002      	b.n	800d340 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d33a:	f06f 0302 	mvn.w	r3, #2
 800d33e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d340:	69fb      	ldr	r3, [r7, #28]
}
 800d342:	4618      	mov	r0, r3
 800d344:	3720      	adds	r7, #32
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	e000ed04 	.word	0xe000ed04

0800d350 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d350:	b480      	push	{r7}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	4a07      	ldr	r2, [pc, #28]	; (800d37c <vApplicationGetIdleTaskMemory+0x2c>)
 800d360:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	4a06      	ldr	r2, [pc, #24]	; (800d380 <vApplicationGetIdleTaskMemory+0x30>)
 800d366:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2280      	movs	r2, #128	; 0x80
 800d36c:	601a      	str	r2, [r3, #0]
}
 800d36e:	bf00      	nop
 800d370:	3714      	adds	r7, #20
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	200001e4 	.word	0x200001e4
 800d380:	20000240 	.word	0x20000240

0800d384 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	4a07      	ldr	r2, [pc, #28]	; (800d3b0 <vApplicationGetTimerTaskMemory+0x2c>)
 800d394:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	4a06      	ldr	r2, [pc, #24]	; (800d3b4 <vApplicationGetTimerTaskMemory+0x30>)
 800d39a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3a2:	601a      	str	r2, [r3, #0]
}
 800d3a4:	bf00      	nop
 800d3a6:	3714      	adds	r7, #20
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr
 800d3b0:	20000440 	.word	0x20000440
 800d3b4:	2000049c 	.word	0x2000049c

0800d3b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f103 0208 	add.w	r2, r3, #8
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f103 0208 	add.w	r2, r3, #8
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f103 0208 	add.w	r2, r3, #8
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d3ec:	bf00      	nop
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d406:	bf00      	nop
 800d408:	370c      	adds	r7, #12
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr

0800d412 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d412:	b480      	push	{r7}
 800d414:	b085      	sub	sp, #20
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	689a      	ldr	r2, [r3, #8]
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	683a      	ldr	r2, [r7, #0]
 800d436:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	683a      	ldr	r2, [r7, #0]
 800d43c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	1c5a      	adds	r2, r3, #1
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	601a      	str	r2, [r3, #0]
}
 800d44e:	bf00      	nop
 800d450:	3714      	adds	r7, #20
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr

0800d45a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d45a:	b480      	push	{r7}
 800d45c:	b085      	sub	sp, #20
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
 800d462:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d470:	d103      	bne.n	800d47a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	60fb      	str	r3, [r7, #12]
 800d478:	e00c      	b.n	800d494 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	3308      	adds	r3, #8
 800d47e:	60fb      	str	r3, [r7, #12]
 800d480:	e002      	b.n	800d488 <vListInsert+0x2e>
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	60fb      	str	r3, [r7, #12]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	68ba      	ldr	r2, [r7, #8]
 800d490:	429a      	cmp	r2, r3
 800d492:	d2f6      	bcs.n	800d482 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	685a      	ldr	r2, [r3, #4]
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	683a      	ldr	r2, [r7, #0]
 800d4ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	1c5a      	adds	r2, r3, #1
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	601a      	str	r2, [r3, #0]
}
 800d4c0:	bf00      	nop
 800d4c2:	3714      	adds	r7, #20
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	691b      	ldr	r3, [r3, #16]
 800d4d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	6892      	ldr	r2, [r2, #8]
 800d4e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	6852      	ldr	r2, [r2, #4]
 800d4ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d103      	bne.n	800d500 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	689a      	ldr	r2, [r3, #8]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	1e5a      	subs	r2, r3, #1
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3714      	adds	r7, #20
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d10a      	bne.n	800d54a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d546:	bf00      	nop
 800d548:	e7fe      	b.n	800d548 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d54a:	f002 fc03 	bl	800fd54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d556:	68f9      	ldr	r1, [r7, #12]
 800d558:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d55a:	fb01 f303 	mul.w	r3, r1, r3
 800d55e:	441a      	add	r2, r3
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2200      	movs	r2, #0
 800d568:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d57a:	3b01      	subs	r3, #1
 800d57c:	68f9      	ldr	r1, [r7, #12]
 800d57e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d580:	fb01 f303 	mul.w	r3, r1, r3
 800d584:	441a      	add	r2, r3
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	22ff      	movs	r2, #255	; 0xff
 800d58e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	22ff      	movs	r2, #255	; 0xff
 800d596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d114      	bne.n	800d5ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d01a      	beq.n	800d5de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	3310      	adds	r3, #16
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f001 fbb9 	bl	800ed24 <xTaskRemoveFromEventList>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d012      	beq.n	800d5de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d5b8:	4b0c      	ldr	r3, [pc, #48]	; (800d5ec <xQueueGenericReset+0xcc>)
 800d5ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5be:	601a      	str	r2, [r3, #0]
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	e009      	b.n	800d5de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	3310      	adds	r3, #16
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7ff fef2 	bl	800d3b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	3324      	adds	r3, #36	; 0x24
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7ff feed 	bl	800d3b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d5de:	f002 fbe9 	bl	800fdb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d5e2:	2301      	movs	r3, #1
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3710      	adds	r7, #16
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	e000ed04 	.word	0xe000ed04

0800d5f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b08e      	sub	sp, #56	; 0x38
 800d5f4:	af02      	add	r7, sp, #8
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	607a      	str	r2, [r7, #4]
 800d5fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d10a      	bne.n	800d61a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d608:	f383 8811 	msr	BASEPRI, r3
 800d60c:	f3bf 8f6f 	isb	sy
 800d610:	f3bf 8f4f 	dsb	sy
 800d614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d616:	bf00      	nop
 800d618:	e7fe      	b.n	800d618 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d10a      	bne.n	800d636 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d632:	bf00      	nop
 800d634:	e7fe      	b.n	800d634 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <xQueueGenericCreateStatic+0x52>
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d001      	beq.n	800d646 <xQueueGenericCreateStatic+0x56>
 800d642:	2301      	movs	r3, #1
 800d644:	e000      	b.n	800d648 <xQueueGenericCreateStatic+0x58>
 800d646:	2300      	movs	r3, #0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d10a      	bne.n	800d662 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d650:	f383 8811 	msr	BASEPRI, r3
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	623b      	str	r3, [r7, #32]
}
 800d65e:	bf00      	nop
 800d660:	e7fe      	b.n	800d660 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d102      	bne.n	800d66e <xQueueGenericCreateStatic+0x7e>
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d101      	bne.n	800d672 <xQueueGenericCreateStatic+0x82>
 800d66e:	2301      	movs	r3, #1
 800d670:	e000      	b.n	800d674 <xQueueGenericCreateStatic+0x84>
 800d672:	2300      	movs	r3, #0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10a      	bne.n	800d68e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67c:	f383 8811 	msr	BASEPRI, r3
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	f3bf 8f4f 	dsb	sy
 800d688:	61fb      	str	r3, [r7, #28]
}
 800d68a:	bf00      	nop
 800d68c:	e7fe      	b.n	800d68c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d68e:	2350      	movs	r3, #80	; 0x50
 800d690:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	2b50      	cmp	r3, #80	; 0x50
 800d696:	d00a      	beq.n	800d6ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69c:	f383 8811 	msr	BASEPRI, r3
 800d6a0:	f3bf 8f6f 	isb	sy
 800d6a4:	f3bf 8f4f 	dsb	sy
 800d6a8:	61bb      	str	r3, [r7, #24]
}
 800d6aa:	bf00      	nop
 800d6ac:	e7fe      	b.n	800d6ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d6ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00d      	beq.n	800d6d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6bc:	2201      	movs	r2, #1
 800d6be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d6c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	9300      	str	r3, [sp, #0]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	68b9      	ldr	r1, [r7, #8]
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f000 f83f 	bl	800d754 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3730      	adds	r7, #48	; 0x30
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b08a      	sub	sp, #40	; 0x28
 800d6e4:	af02      	add	r7, sp, #8
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	4613      	mov	r3, r2
 800d6ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d10a      	bne.n	800d70a <xQueueGenericCreate+0x2a>
	__asm volatile
 800d6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f8:	f383 8811 	msr	BASEPRI, r3
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	613b      	str	r3, [r7, #16]
}
 800d706:	bf00      	nop
 800d708:	e7fe      	b.n	800d708 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	fb02 f303 	mul.w	r3, r2, r3
 800d712:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	3350      	adds	r3, #80	; 0x50
 800d718:	4618      	mov	r0, r3
 800d71a:	f002 fc3d 	bl	800ff98 <pvPortMalloc>
 800d71e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d011      	beq.n	800d74a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	3350      	adds	r3, #80	; 0x50
 800d72e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	2200      	movs	r2, #0
 800d734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d738:	79fa      	ldrb	r2, [r7, #7]
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	9300      	str	r3, [sp, #0]
 800d73e:	4613      	mov	r3, r2
 800d740:	697a      	ldr	r2, [r7, #20]
 800d742:	68b9      	ldr	r1, [r7, #8]
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f000 f805 	bl	800d754 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d74a:	69bb      	ldr	r3, [r7, #24]
	}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3720      	adds	r7, #32
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d103      	bne.n	800d770 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	69ba      	ldr	r2, [r7, #24]
 800d76c:	601a      	str	r2, [r3, #0]
 800d76e:	e002      	b.n	800d776 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d782:	2101      	movs	r1, #1
 800d784:	69b8      	ldr	r0, [r7, #24]
 800d786:	f7ff fecb 	bl	800d520 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	78fa      	ldrb	r2, [r7, #3]
 800d78e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d792:	bf00      	nop
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b082      	sub	sp, #8
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d00e      	beq.n	800d7c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	2200      	movs	r2, #0
 800d7be:	2100      	movs	r1, #0
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 f837 	bl	800d834 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d7c6:	bf00      	nop
 800d7c8:	3708      	adds	r7, #8
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b086      	sub	sp, #24
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	617b      	str	r3, [r7, #20]
 800d7dc:	2300      	movs	r3, #0
 800d7de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d7e0:	79fb      	ldrb	r3, [r7, #7]
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	6939      	ldr	r1, [r7, #16]
 800d7e6:	6978      	ldr	r0, [r7, #20]
 800d7e8:	f7ff ff7a 	bl	800d6e0 <xQueueGenericCreate>
 800d7ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f7ff ffd3 	bl	800d79a <prvInitialiseMutex>

		return xNewQueue;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
	}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3718      	adds	r7, #24
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b088      	sub	sp, #32
 800d802:	af02      	add	r7, sp, #8
 800d804:	4603      	mov	r3, r0
 800d806:	6039      	str	r1, [r7, #0]
 800d808:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d80a:	2301      	movs	r3, #1
 800d80c:	617b      	str	r3, [r7, #20]
 800d80e:	2300      	movs	r3, #0
 800d810:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d812:	79fb      	ldrb	r3, [r7, #7]
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	2200      	movs	r2, #0
 800d81a:	6939      	ldr	r1, [r7, #16]
 800d81c:	6978      	ldr	r0, [r7, #20]
 800d81e:	f7ff fee7 	bl	800d5f0 <xQueueGenericCreateStatic>
 800d822:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f7ff ffb8 	bl	800d79a <prvInitialiseMutex>

		return xNewQueue;
 800d82a:	68fb      	ldr	r3, [r7, #12]
	}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3718      	adds	r7, #24
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b08e      	sub	sp, #56	; 0x38
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
 800d840:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d842:	2300      	movs	r3, #0
 800d844:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d10a      	bne.n	800d866 <xQueueGenericSend+0x32>
	__asm volatile
 800d850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d854:	f383 8811 	msr	BASEPRI, r3
 800d858:	f3bf 8f6f 	isb	sy
 800d85c:	f3bf 8f4f 	dsb	sy
 800d860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d862:	bf00      	nop
 800d864:	e7fe      	b.n	800d864 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d103      	bne.n	800d874 <xQueueGenericSend+0x40>
 800d86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d870:	2b00      	cmp	r3, #0
 800d872:	d101      	bne.n	800d878 <xQueueGenericSend+0x44>
 800d874:	2301      	movs	r3, #1
 800d876:	e000      	b.n	800d87a <xQueueGenericSend+0x46>
 800d878:	2300      	movs	r3, #0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d10a      	bne.n	800d894 <xQueueGenericSend+0x60>
	__asm volatile
 800d87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d890:	bf00      	nop
 800d892:	e7fe      	b.n	800d892 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	2b02      	cmp	r3, #2
 800d898:	d103      	bne.n	800d8a2 <xQueueGenericSend+0x6e>
 800d89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d101      	bne.n	800d8a6 <xQueueGenericSend+0x72>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e000      	b.n	800d8a8 <xQueueGenericSend+0x74>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10a      	bne.n	800d8c2 <xQueueGenericSend+0x8e>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	623b      	str	r3, [r7, #32]
}
 800d8be:	bf00      	nop
 800d8c0:	e7fe      	b.n	800d8c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8c2:	f001 fbed 	bl	800f0a0 <xTaskGetSchedulerState>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d102      	bne.n	800d8d2 <xQueueGenericSend+0x9e>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d101      	bne.n	800d8d6 <xQueueGenericSend+0xa2>
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e000      	b.n	800d8d8 <xQueueGenericSend+0xa4>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d10a      	bne.n	800d8f2 <xQueueGenericSend+0xbe>
	__asm volatile
 800d8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e0:	f383 8811 	msr	BASEPRI, r3
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	61fb      	str	r3, [r7, #28]
}
 800d8ee:	bf00      	nop
 800d8f0:	e7fe      	b.n	800d8f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8f2:	f002 fa2f 	bl	800fd54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d302      	bcc.n	800d908 <xQueueGenericSend+0xd4>
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	2b02      	cmp	r3, #2
 800d906:	d129      	bne.n	800d95c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d908:	683a      	ldr	r2, [r7, #0]
 800d90a:	68b9      	ldr	r1, [r7, #8]
 800d90c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d90e:	f000 fc3b 	bl	800e188 <prvCopyDataToQueue>
 800d912:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d010      	beq.n	800d93e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	3324      	adds	r3, #36	; 0x24
 800d920:	4618      	mov	r0, r3
 800d922:	f001 f9ff 	bl	800ed24 <xTaskRemoveFromEventList>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d013      	beq.n	800d954 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d92c:	4b3f      	ldr	r3, [pc, #252]	; (800da2c <xQueueGenericSend+0x1f8>)
 800d92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d932:	601a      	str	r2, [r3, #0]
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	e00a      	b.n	800d954 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d940:	2b00      	cmp	r3, #0
 800d942:	d007      	beq.n	800d954 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d944:	4b39      	ldr	r3, [pc, #228]	; (800da2c <xQueueGenericSend+0x1f8>)
 800d946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d94a:	601a      	str	r2, [r3, #0]
 800d94c:	f3bf 8f4f 	dsb	sy
 800d950:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d954:	f002 fa2e 	bl	800fdb4 <vPortExitCritical>
				return pdPASS;
 800d958:	2301      	movs	r3, #1
 800d95a:	e063      	b.n	800da24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d103      	bne.n	800d96a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d962:	f002 fa27 	bl	800fdb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d966:	2300      	movs	r3, #0
 800d968:	e05c      	b.n	800da24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d106      	bne.n	800d97e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d970:	f107 0314 	add.w	r3, r7, #20
 800d974:	4618      	mov	r0, r3
 800d976:	f001 fa39 	bl	800edec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d97a:	2301      	movs	r3, #1
 800d97c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d97e:	f002 fa19 	bl	800fdb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d982:	f000 ffab 	bl	800e8dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d986:	f002 f9e5 	bl	800fd54 <vPortEnterCritical>
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d990:	b25b      	sxtb	r3, r3
 800d992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d996:	d103      	bne.n	800d9a0 <xQueueGenericSend+0x16c>
 800d998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99a:	2200      	movs	r2, #0
 800d99c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9a6:	b25b      	sxtb	r3, r3
 800d9a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9ac:	d103      	bne.n	800d9b6 <xQueueGenericSend+0x182>
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9b6:	f002 f9fd 	bl	800fdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9ba:	1d3a      	adds	r2, r7, #4
 800d9bc:	f107 0314 	add.w	r3, r7, #20
 800d9c0:	4611      	mov	r1, r2
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f001 fa28 	bl	800ee18 <xTaskCheckForTimeOut>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d124      	bne.n	800da18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d9ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9d0:	f000 fcd2 	bl	800e378 <prvIsQueueFull>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d018      	beq.n	800da0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9dc:	3310      	adds	r3, #16
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	4611      	mov	r1, r2
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f001 f94e 	bl	800ec84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d9e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9ea:	f000 fc5d 	bl	800e2a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d9ee:	f000 ff83 	bl	800e8f8 <xTaskResumeAll>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f47f af7c 	bne.w	800d8f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d9fa:	4b0c      	ldr	r3, [pc, #48]	; (800da2c <xQueueGenericSend+0x1f8>)
 800d9fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da00:	601a      	str	r2, [r3, #0]
 800da02:	f3bf 8f4f 	dsb	sy
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	e772      	b.n	800d8f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da0e:	f000 fc4b 	bl	800e2a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da12:	f000 ff71 	bl	800e8f8 <xTaskResumeAll>
 800da16:	e76c      	b.n	800d8f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da1a:	f000 fc45 	bl	800e2a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da1e:	f000 ff6b 	bl	800e8f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800da22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800da24:	4618      	mov	r0, r3
 800da26:	3738      	adds	r7, #56	; 0x38
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	e000ed04 	.word	0xe000ed04

0800da30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b090      	sub	sp, #64	; 0x40
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	607a      	str	r2, [r7, #4]
 800da3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800da42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da44:	2b00      	cmp	r3, #0
 800da46:	d10a      	bne.n	800da5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800da48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4c:	f383 8811 	msr	BASEPRI, r3
 800da50:	f3bf 8f6f 	isb	sy
 800da54:	f3bf 8f4f 	dsb	sy
 800da58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800da5a:	bf00      	nop
 800da5c:	e7fe      	b.n	800da5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d103      	bne.n	800da6c <xQueueGenericSendFromISR+0x3c>
 800da64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d101      	bne.n	800da70 <xQueueGenericSendFromISR+0x40>
 800da6c:	2301      	movs	r3, #1
 800da6e:	e000      	b.n	800da72 <xQueueGenericSendFromISR+0x42>
 800da70:	2300      	movs	r3, #0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d10a      	bne.n	800da8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800da76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7a:	f383 8811 	msr	BASEPRI, r3
 800da7e:	f3bf 8f6f 	isb	sy
 800da82:	f3bf 8f4f 	dsb	sy
 800da86:	627b      	str	r3, [r7, #36]	; 0x24
}
 800da88:	bf00      	nop
 800da8a:	e7fe      	b.n	800da8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	2b02      	cmp	r3, #2
 800da90:	d103      	bne.n	800da9a <xQueueGenericSendFromISR+0x6a>
 800da92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da96:	2b01      	cmp	r3, #1
 800da98:	d101      	bne.n	800da9e <xQueueGenericSendFromISR+0x6e>
 800da9a:	2301      	movs	r3, #1
 800da9c:	e000      	b.n	800daa0 <xQueueGenericSendFromISR+0x70>
 800da9e:	2300      	movs	r3, #0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d10a      	bne.n	800daba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800daa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa8:	f383 8811 	msr	BASEPRI, r3
 800daac:	f3bf 8f6f 	isb	sy
 800dab0:	f3bf 8f4f 	dsb	sy
 800dab4:	623b      	str	r3, [r7, #32]
}
 800dab6:	bf00      	nop
 800dab8:	e7fe      	b.n	800dab8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800daba:	f002 fa2d 	bl	800ff18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dabe:	f3ef 8211 	mrs	r2, BASEPRI
 800dac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac6:	f383 8811 	msr	BASEPRI, r3
 800daca:	f3bf 8f6f 	isb	sy
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	61fa      	str	r2, [r7, #28]
 800dad4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dad6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dad8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dadc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d302      	bcc.n	800daec <xQueueGenericSendFromISR+0xbc>
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	2b02      	cmp	r3, #2
 800daea:	d12f      	bne.n	800db4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800daec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800daf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dafa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dafc:	683a      	ldr	r2, [r7, #0]
 800dafe:	68b9      	ldr	r1, [r7, #8]
 800db00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db02:	f000 fb41 	bl	800e188 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800db0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db0e:	d112      	bne.n	800db36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db14:	2b00      	cmp	r3, #0
 800db16:	d016      	beq.n	800db46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1a:	3324      	adds	r3, #36	; 0x24
 800db1c:	4618      	mov	r0, r3
 800db1e:	f001 f901 	bl	800ed24 <xTaskRemoveFromEventList>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00e      	beq.n	800db46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d00b      	beq.n	800db46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2201      	movs	r2, #1
 800db32:	601a      	str	r2, [r3, #0]
 800db34:	e007      	b.n	800db46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800db3a:	3301      	adds	r3, #1
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	b25a      	sxtb	r2, r3
 800db40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800db46:	2301      	movs	r3, #1
 800db48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800db4a:	e001      	b.n	800db50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db4c:	2300      	movs	r3, #0
 800db4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800db5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3740      	adds	r7, #64	; 0x40
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b08e      	sub	sp, #56	; 0x38
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800db74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db76:	2b00      	cmp	r3, #0
 800db78:	d10a      	bne.n	800db90 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800db7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7e:	f383 8811 	msr	BASEPRI, r3
 800db82:	f3bf 8f6f 	isb	sy
 800db86:	f3bf 8f4f 	dsb	sy
 800db8a:	623b      	str	r3, [r7, #32]
}
 800db8c:	bf00      	nop
 800db8e:	e7fe      	b.n	800db8e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db94:	2b00      	cmp	r3, #0
 800db96:	d00a      	beq.n	800dbae <xQueueGiveFromISR+0x48>
	__asm volatile
 800db98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9c:	f383 8811 	msr	BASEPRI, r3
 800dba0:	f3bf 8f6f 	isb	sy
 800dba4:	f3bf 8f4f 	dsb	sy
 800dba8:	61fb      	str	r3, [r7, #28]
}
 800dbaa:	bf00      	nop
 800dbac:	e7fe      	b.n	800dbac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d103      	bne.n	800dbbe <xQueueGiveFromISR+0x58>
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb8:	689b      	ldr	r3, [r3, #8]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d101      	bne.n	800dbc2 <xQueueGiveFromISR+0x5c>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e000      	b.n	800dbc4 <xQueueGiveFromISR+0x5e>
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d10a      	bne.n	800dbde <xQueueGiveFromISR+0x78>
	__asm volatile
 800dbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbcc:	f383 8811 	msr	BASEPRI, r3
 800dbd0:	f3bf 8f6f 	isb	sy
 800dbd4:	f3bf 8f4f 	dsb	sy
 800dbd8:	61bb      	str	r3, [r7, #24]
}
 800dbda:	bf00      	nop
 800dbdc:	e7fe      	b.n	800dbdc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbde:	f002 f99b 	bl	800ff18 <vPortValidateInterruptPriority>
	__asm volatile
 800dbe2:	f3ef 8211 	mrs	r2, BASEPRI
 800dbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbea:	f383 8811 	msr	BASEPRI, r3
 800dbee:	f3bf 8f6f 	isb	sy
 800dbf2:	f3bf 8f4f 	dsb	sy
 800dbf6:	617a      	str	r2, [r7, #20]
 800dbf8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800dbfa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d22b      	bcs.n	800dc66 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1a:	1c5a      	adds	r2, r3, #1
 800dc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dc20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dc24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc28:	d112      	bne.n	800dc50 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d016      	beq.n	800dc60 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc34:	3324      	adds	r3, #36	; 0x24
 800dc36:	4618      	mov	r0, r3
 800dc38:	f001 f874 	bl	800ed24 <xTaskRemoveFromEventList>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00e      	beq.n	800dc60 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d00b      	beq.n	800dc60 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	601a      	str	r2, [r3, #0]
 800dc4e:	e007      	b.n	800dc60 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc54:	3301      	adds	r3, #1
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	b25a      	sxtb	r2, r3
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dc60:	2301      	movs	r3, #1
 800dc62:	637b      	str	r3, [r7, #52]	; 0x34
 800dc64:	e001      	b.n	800dc6a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc66:	2300      	movs	r3, #0
 800dc68:	637b      	str	r3, [r7, #52]	; 0x34
 800dc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f383 8811 	msr	BASEPRI, r3
}
 800dc74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3738      	adds	r7, #56	; 0x38
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b08c      	sub	sp, #48	; 0x30
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10a      	bne.n	800dcb0 <xQueueReceive+0x30>
	__asm volatile
 800dc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9e:	f383 8811 	msr	BASEPRI, r3
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	623b      	str	r3, [r7, #32]
}
 800dcac:	bf00      	nop
 800dcae:	e7fe      	b.n	800dcae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d103      	bne.n	800dcbe <xQueueReceive+0x3e>
 800dcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d101      	bne.n	800dcc2 <xQueueReceive+0x42>
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e000      	b.n	800dcc4 <xQueueReceive+0x44>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d10a      	bne.n	800dcde <xQueueReceive+0x5e>
	__asm volatile
 800dcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dccc:	f383 8811 	msr	BASEPRI, r3
 800dcd0:	f3bf 8f6f 	isb	sy
 800dcd4:	f3bf 8f4f 	dsb	sy
 800dcd8:	61fb      	str	r3, [r7, #28]
}
 800dcda:	bf00      	nop
 800dcdc:	e7fe      	b.n	800dcdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dcde:	f001 f9df 	bl	800f0a0 <xTaskGetSchedulerState>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d102      	bne.n	800dcee <xQueueReceive+0x6e>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d101      	bne.n	800dcf2 <xQueueReceive+0x72>
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e000      	b.n	800dcf4 <xQueueReceive+0x74>
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d10a      	bne.n	800dd0e <xQueueReceive+0x8e>
	__asm volatile
 800dcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfc:	f383 8811 	msr	BASEPRI, r3
 800dd00:	f3bf 8f6f 	isb	sy
 800dd04:	f3bf 8f4f 	dsb	sy
 800dd08:	61bb      	str	r3, [r7, #24]
}
 800dd0a:	bf00      	nop
 800dd0c:	e7fe      	b.n	800dd0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd0e:	f002 f821 	bl	800fd54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d01f      	beq.n	800dd5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd1e:	68b9      	ldr	r1, [r7, #8]
 800dd20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd22:	f000 fa9b 	bl	800e25c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	1e5a      	subs	r2, r3, #1
 800dd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd30:	691b      	ldr	r3, [r3, #16]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d00f      	beq.n	800dd56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd38:	3310      	adds	r3, #16
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f000 fff2 	bl	800ed24 <xTaskRemoveFromEventList>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d007      	beq.n	800dd56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd46:	4b3d      	ldr	r3, [pc, #244]	; (800de3c <xQueueReceive+0x1bc>)
 800dd48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd4c:	601a      	str	r2, [r3, #0]
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd56:	f002 f82d 	bl	800fdb4 <vPortExitCritical>
				return pdPASS;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	e069      	b.n	800de32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d103      	bne.n	800dd6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dd64:	f002 f826 	bl	800fdb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	e062      	b.n	800de32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d106      	bne.n	800dd80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd72:	f107 0310 	add.w	r3, r7, #16
 800dd76:	4618      	mov	r0, r3
 800dd78:	f001 f838 	bl	800edec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd80:	f002 f818 	bl	800fdb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd84:	f000 fdaa 	bl	800e8dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd88:	f001 ffe4 	bl	800fd54 <vPortEnterCritical>
 800dd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd92:	b25b      	sxtb	r3, r3
 800dd94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd98:	d103      	bne.n	800dda2 <xQueueReceive+0x122>
 800dd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dda8:	b25b      	sxtb	r3, r3
 800ddaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddae:	d103      	bne.n	800ddb8 <xQueueReceive+0x138>
 800ddb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ddb8:	f001 fffc 	bl	800fdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ddbc:	1d3a      	adds	r2, r7, #4
 800ddbe:	f107 0310 	add.w	r3, r7, #16
 800ddc2:	4611      	mov	r1, r2
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f001 f827 	bl	800ee18 <xTaskCheckForTimeOut>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d123      	bne.n	800de18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddd2:	f000 fabb 	bl	800e34c <prvIsQueueEmpty>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d017      	beq.n	800de0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddde:	3324      	adds	r3, #36	; 0x24
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	4611      	mov	r1, r2
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 ff4d 	bl	800ec84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ddea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddec:	f000 fa5c 	bl	800e2a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ddf0:	f000 fd82 	bl	800e8f8 <xTaskResumeAll>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d189      	bne.n	800dd0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ddfa:	4b10      	ldr	r3, [pc, #64]	; (800de3c <xQueueReceive+0x1bc>)
 800ddfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de00:	601a      	str	r2, [r3, #0]
 800de02:	f3bf 8f4f 	dsb	sy
 800de06:	f3bf 8f6f 	isb	sy
 800de0a:	e780      	b.n	800dd0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800de0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de0e:	f000 fa4b 	bl	800e2a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de12:	f000 fd71 	bl	800e8f8 <xTaskResumeAll>
 800de16:	e77a      	b.n	800dd0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800de18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de1a:	f000 fa45 	bl	800e2a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de1e:	f000 fd6b 	bl	800e8f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de24:	f000 fa92 	bl	800e34c <prvIsQueueEmpty>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f43f af6f 	beq.w	800dd0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800de30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800de32:	4618      	mov	r0, r3
 800de34:	3730      	adds	r7, #48	; 0x30
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	e000ed04 	.word	0xe000ed04

0800de40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b08e      	sub	sp, #56	; 0x38
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800de4a:	2300      	movs	r3, #0
 800de4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800de52:	2300      	movs	r3, #0
 800de54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800de56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d10a      	bne.n	800de72 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800de5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de60:	f383 8811 	msr	BASEPRI, r3
 800de64:	f3bf 8f6f 	isb	sy
 800de68:	f3bf 8f4f 	dsb	sy
 800de6c:	623b      	str	r3, [r7, #32]
}
 800de6e:	bf00      	nop
 800de70:	e7fe      	b.n	800de70 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800de72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00a      	beq.n	800de90 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800de7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de7e:	f383 8811 	msr	BASEPRI, r3
 800de82:	f3bf 8f6f 	isb	sy
 800de86:	f3bf 8f4f 	dsb	sy
 800de8a:	61fb      	str	r3, [r7, #28]
}
 800de8c:	bf00      	nop
 800de8e:	e7fe      	b.n	800de8e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de90:	f001 f906 	bl	800f0a0 <xTaskGetSchedulerState>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d102      	bne.n	800dea0 <xQueueSemaphoreTake+0x60>
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d101      	bne.n	800dea4 <xQueueSemaphoreTake+0x64>
 800dea0:	2301      	movs	r3, #1
 800dea2:	e000      	b.n	800dea6 <xQueueSemaphoreTake+0x66>
 800dea4:	2300      	movs	r3, #0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10a      	bne.n	800dec0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800deaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deae:	f383 8811 	msr	BASEPRI, r3
 800deb2:	f3bf 8f6f 	isb	sy
 800deb6:	f3bf 8f4f 	dsb	sy
 800deba:	61bb      	str	r3, [r7, #24]
}
 800debc:	bf00      	nop
 800debe:	e7fe      	b.n	800debe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dec0:	f001 ff48 	bl	800fd54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800deca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800decc:	2b00      	cmp	r3, #0
 800dece:	d024      	beq.n	800df1a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ded0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded2:	1e5a      	subs	r2, r3, #1
 800ded4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ded8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d104      	bne.n	800deea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dee0:	f001 fa54 	bl	800f38c <pvTaskIncrementMutexHeldCount>
 800dee4:	4602      	mov	r2, r0
 800dee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800deea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deec:	691b      	ldr	r3, [r3, #16]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00f      	beq.n	800df12 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800def2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def4:	3310      	adds	r3, #16
 800def6:	4618      	mov	r0, r3
 800def8:	f000 ff14 	bl	800ed24 <xTaskRemoveFromEventList>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d007      	beq.n	800df12 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800df02:	4b54      	ldr	r3, [pc, #336]	; (800e054 <xQueueSemaphoreTake+0x214>)
 800df04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800df12:	f001 ff4f 	bl	800fdb4 <vPortExitCritical>
				return pdPASS;
 800df16:	2301      	movs	r3, #1
 800df18:	e097      	b.n	800e04a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d111      	bne.n	800df44 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800df20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df22:	2b00      	cmp	r3, #0
 800df24:	d00a      	beq.n	800df3c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800df26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2a:	f383 8811 	msr	BASEPRI, r3
 800df2e:	f3bf 8f6f 	isb	sy
 800df32:	f3bf 8f4f 	dsb	sy
 800df36:	617b      	str	r3, [r7, #20]
}
 800df38:	bf00      	nop
 800df3a:	e7fe      	b.n	800df3a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800df3c:	f001 ff3a 	bl	800fdb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800df40:	2300      	movs	r3, #0
 800df42:	e082      	b.n	800e04a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df46:	2b00      	cmp	r3, #0
 800df48:	d106      	bne.n	800df58 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df4a:	f107 030c 	add.w	r3, r7, #12
 800df4e:	4618      	mov	r0, r3
 800df50:	f000 ff4c 	bl	800edec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df54:	2301      	movs	r3, #1
 800df56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df58:	f001 ff2c 	bl	800fdb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df5c:	f000 fcbe 	bl	800e8dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df60:	f001 fef8 	bl	800fd54 <vPortEnterCritical>
 800df64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df6a:	b25b      	sxtb	r3, r3
 800df6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df70:	d103      	bne.n	800df7a <xQueueSemaphoreTake+0x13a>
 800df72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df74:	2200      	movs	r2, #0
 800df76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df80:	b25b      	sxtb	r3, r3
 800df82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df86:	d103      	bne.n	800df90 <xQueueSemaphoreTake+0x150>
 800df88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8a:	2200      	movs	r2, #0
 800df8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df90:	f001 ff10 	bl	800fdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df94:	463a      	mov	r2, r7
 800df96:	f107 030c 	add.w	r3, r7, #12
 800df9a:	4611      	mov	r1, r2
 800df9c:	4618      	mov	r0, r3
 800df9e:	f000 ff3b 	bl	800ee18 <xTaskCheckForTimeOut>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d132      	bne.n	800e00e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfaa:	f000 f9cf 	bl	800e34c <prvIsQueueEmpty>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d026      	beq.n	800e002 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d109      	bne.n	800dfd0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800dfbc:	f001 feca 	bl	800fd54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f001 f889 	bl	800f0dc <xTaskPriorityInherit>
 800dfca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800dfcc:	f001 fef2 	bl	800fdb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd2:	3324      	adds	r3, #36	; 0x24
 800dfd4:	683a      	ldr	r2, [r7, #0]
 800dfd6:	4611      	mov	r1, r2
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f000 fe53 	bl	800ec84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dfde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfe0:	f000 f962 	bl	800e2a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dfe4:	f000 fc88 	bl	800e8f8 <xTaskResumeAll>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	f47f af68 	bne.w	800dec0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800dff0:	4b18      	ldr	r3, [pc, #96]	; (800e054 <xQueueSemaphoreTake+0x214>)
 800dff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dff6:	601a      	str	r2, [r3, #0]
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	f3bf 8f6f 	isb	sy
 800e000:	e75e      	b.n	800dec0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e004:	f000 f950 	bl	800e2a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e008:	f000 fc76 	bl	800e8f8 <xTaskResumeAll>
 800e00c:	e758      	b.n	800dec0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e00e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e010:	f000 f94a 	bl	800e2a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e014:	f000 fc70 	bl	800e8f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e01a:	f000 f997 	bl	800e34c <prvIsQueueEmpty>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b00      	cmp	r3, #0
 800e022:	f43f af4d 	beq.w	800dec0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d00d      	beq.n	800e048 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e02c:	f001 fe92 	bl	800fd54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e032:	f000 f891 	bl	800e158 <prvGetDisinheritPriorityAfterTimeout>
 800e036:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e03e:	4618      	mov	r0, r3
 800e040:	f001 f922 	bl	800f288 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e044:	f001 feb6 	bl	800fdb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e048:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3738      	adds	r7, #56	; 0x38
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	e000ed04 	.word	0xe000ed04

0800e058 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b08e      	sub	sp, #56	; 0x38
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d10a      	bne.n	800e084 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e072:	f383 8811 	msr	BASEPRI, r3
 800e076:	f3bf 8f6f 	isb	sy
 800e07a:	f3bf 8f4f 	dsb	sy
 800e07e:	623b      	str	r3, [r7, #32]
}
 800e080:	bf00      	nop
 800e082:	e7fe      	b.n	800e082 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d103      	bne.n	800e092 <xQueueReceiveFromISR+0x3a>
 800e08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d101      	bne.n	800e096 <xQueueReceiveFromISR+0x3e>
 800e092:	2301      	movs	r3, #1
 800e094:	e000      	b.n	800e098 <xQueueReceiveFromISR+0x40>
 800e096:	2300      	movs	r3, #0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d10a      	bne.n	800e0b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a0:	f383 8811 	msr	BASEPRI, r3
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	f3bf 8f4f 	dsb	sy
 800e0ac:	61fb      	str	r3, [r7, #28]
}
 800e0ae:	bf00      	nop
 800e0b0:	e7fe      	b.n	800e0b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e0b2:	f001 ff31 	bl	800ff18 <vPortValidateInterruptPriority>
	__asm volatile
 800e0b6:	f3ef 8211 	mrs	r2, BASEPRI
 800e0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0be:	f383 8811 	msr	BASEPRI, r3
 800e0c2:	f3bf 8f6f 	isb	sy
 800e0c6:	f3bf 8f4f 	dsb	sy
 800e0ca:	61ba      	str	r2, [r7, #24]
 800e0cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e0ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d02f      	beq.n	800e13e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e0e8:	68b9      	ldr	r1, [r7, #8]
 800e0ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0ec:	f000 f8b6 	bl	800e25c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f2:	1e5a      	subs	r2, r3, #1
 800e0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e0f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e0fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e100:	d112      	bne.n	800e128 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	691b      	ldr	r3, [r3, #16]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d016      	beq.n	800e138 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10c:	3310      	adds	r3, #16
 800e10e:	4618      	mov	r0, r3
 800e110:	f000 fe08 	bl	800ed24 <xTaskRemoveFromEventList>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00e      	beq.n	800e138 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00b      	beq.n	800e138 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	601a      	str	r2, [r3, #0]
 800e126:	e007      	b.n	800e138 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e12c:	3301      	adds	r3, #1
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	b25a      	sxtb	r2, r3
 800e132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e138:	2301      	movs	r3, #1
 800e13a:	637b      	str	r3, [r7, #52]	; 0x34
 800e13c:	e001      	b.n	800e142 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e13e:	2300      	movs	r3, #0
 800e140:	637b      	str	r3, [r7, #52]	; 0x34
 800e142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e144:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	f383 8811 	msr	BASEPRI, r3
}
 800e14c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e150:	4618      	mov	r0, r3
 800e152:	3738      	adds	r7, #56	; 0x38
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e164:	2b00      	cmp	r3, #0
 800e166:	d006      	beq.n	800e176 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e172:	60fb      	str	r3, [r7, #12]
 800e174:	e001      	b.n	800e17a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e176:	2300      	movs	r3, #0
 800e178:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e17a:	68fb      	ldr	r3, [r7, #12]
	}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3714      	adds	r7, #20
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b086      	sub	sp, #24
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e194:	2300      	movs	r3, #0
 800e196:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e19c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10d      	bne.n	800e1c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d14d      	bne.n	800e24a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f000 fffa 	bl	800f1ac <xTaskPriorityDisinherit>
 800e1b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	609a      	str	r2, [r3, #8]
 800e1c0:	e043      	b.n	800e24a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d119      	bne.n	800e1fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	6858      	ldr	r0, [r3, #4]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	68b9      	ldr	r1, [r7, #8]
 800e1d4:	f002 fe1a 	bl	8010e0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	685a      	ldr	r2, [r3, #4]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1e0:	441a      	add	r2, r3
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	685a      	ldr	r2, [r3, #4]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d32b      	bcc.n	800e24a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	605a      	str	r2, [r3, #4]
 800e1fa:	e026      	b.n	800e24a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	68d8      	ldr	r0, [r3, #12]
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e204:	461a      	mov	r2, r3
 800e206:	68b9      	ldr	r1, [r7, #8]
 800e208:	f002 fe00 	bl	8010e0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	68da      	ldr	r2, [r3, #12]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e214:	425b      	negs	r3, r3
 800e216:	441a      	add	r2, r3
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	68da      	ldr	r2, [r3, #12]
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	429a      	cmp	r2, r3
 800e226:	d207      	bcs.n	800e238 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	689a      	ldr	r2, [r3, #8]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e230:	425b      	negs	r3, r3
 800e232:	441a      	add	r2, r3
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b02      	cmp	r3, #2
 800e23c:	d105      	bne.n	800e24a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d002      	beq.n	800e24a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	3b01      	subs	r3, #1
 800e248:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	1c5a      	adds	r2, r3, #1
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e252:	697b      	ldr	r3, [r7, #20]
}
 800e254:	4618      	mov	r0, r3
 800e256:	3718      	adds	r7, #24
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d018      	beq.n	800e2a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	68da      	ldr	r2, [r3, #12]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e276:	441a      	add	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	68da      	ldr	r2, [r3, #12]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	429a      	cmp	r2, r3
 800e286:	d303      	bcc.n	800e290 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	68d9      	ldr	r1, [r3, #12]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e298:	461a      	mov	r2, r3
 800e29a:	6838      	ldr	r0, [r7, #0]
 800e29c:	f002 fdb6 	bl	8010e0c <memcpy>
	}
}
 800e2a0:	bf00      	nop
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b084      	sub	sp, #16
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e2b0:	f001 fd50 	bl	800fd54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e2bc:	e011      	b.n	800e2e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d012      	beq.n	800e2ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	3324      	adds	r3, #36	; 0x24
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f000 fd2a 	bl	800ed24 <xTaskRemoveFromEventList>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d001      	beq.n	800e2da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e2d6:	f000 fe01 	bl	800eedc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e2da:	7bfb      	ldrb	r3, [r7, #15]
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e2e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	dce9      	bgt.n	800e2be <prvUnlockQueue+0x16>
 800e2ea:	e000      	b.n	800e2ee <prvUnlockQueue+0x46>
					break;
 800e2ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	22ff      	movs	r2, #255	; 0xff
 800e2f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e2f6:	f001 fd5d 	bl	800fdb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e2fa:	f001 fd2b 	bl	800fd54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e304:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e306:	e011      	b.n	800e32c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	691b      	ldr	r3, [r3, #16]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d012      	beq.n	800e336 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	3310      	adds	r3, #16
 800e314:	4618      	mov	r0, r3
 800e316:	f000 fd05 	bl	800ed24 <xTaskRemoveFromEventList>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d001      	beq.n	800e324 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e320:	f000 fddc 	bl	800eedc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e324:	7bbb      	ldrb	r3, [r7, #14]
 800e326:	3b01      	subs	r3, #1
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e32c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e330:	2b00      	cmp	r3, #0
 800e332:	dce9      	bgt.n	800e308 <prvUnlockQueue+0x60>
 800e334:	e000      	b.n	800e338 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e336:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	22ff      	movs	r2, #255	; 0xff
 800e33c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e340:	f001 fd38 	bl	800fdb4 <vPortExitCritical>
}
 800e344:	bf00      	nop
 800e346:	3710      	adds	r7, #16
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b084      	sub	sp, #16
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e354:	f001 fcfe 	bl	800fd54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d102      	bne.n	800e366 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e360:	2301      	movs	r3, #1
 800e362:	60fb      	str	r3, [r7, #12]
 800e364:	e001      	b.n	800e36a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e366:	2300      	movs	r3, #0
 800e368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e36a:	f001 fd23 	bl	800fdb4 <vPortExitCritical>

	return xReturn;
 800e36e:	68fb      	ldr	r3, [r7, #12]
}
 800e370:	4618      	mov	r0, r3
 800e372:	3710      	adds	r7, #16
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e380:	f001 fce8 	bl	800fd54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d102      	bne.n	800e396 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e390:	2301      	movs	r3, #1
 800e392:	60fb      	str	r3, [r7, #12]
 800e394:	e001      	b.n	800e39a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e396:	2300      	movs	r3, #0
 800e398:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e39a:	f001 fd0b 	bl	800fdb4 <vPortExitCritical>

	return xReturn;
 800e39e:	68fb      	ldr	r3, [r7, #12]
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	60fb      	str	r3, [r7, #12]
 800e3b6:	e014      	b.n	800e3e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e3b8:	4a0f      	ldr	r2, [pc, #60]	; (800e3f8 <vQueueAddToRegistry+0x50>)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d10b      	bne.n	800e3dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e3c4:	490c      	ldr	r1, [pc, #48]	; (800e3f8 <vQueueAddToRegistry+0x50>)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	683a      	ldr	r2, [r7, #0]
 800e3ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e3ce:	4a0a      	ldr	r2, [pc, #40]	; (800e3f8 <vQueueAddToRegistry+0x50>)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	00db      	lsls	r3, r3, #3
 800e3d4:	4413      	add	r3, r2
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e3da:	e006      	b.n	800e3ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	60fb      	str	r3, [r7, #12]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2b07      	cmp	r3, #7
 800e3e6:	d9e7      	bls.n	800e3b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e3e8:	bf00      	nop
 800e3ea:	bf00      	nop
 800e3ec:	3714      	adds	r7, #20
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr
 800e3f6:	bf00      	nop
 800e3f8:	200020bc 	.word	0x200020bc

0800e3fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b086      	sub	sp, #24
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e40c:	f001 fca2 	bl	800fd54 <vPortEnterCritical>
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e416:	b25b      	sxtb	r3, r3
 800e418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e41c:	d103      	bne.n	800e426 <vQueueWaitForMessageRestricted+0x2a>
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	2200      	movs	r2, #0
 800e422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e42c:	b25b      	sxtb	r3, r3
 800e42e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e432:	d103      	bne.n	800e43c <vQueueWaitForMessageRestricted+0x40>
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	2200      	movs	r2, #0
 800e438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e43c:	f001 fcba 	bl	800fdb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e444:	2b00      	cmp	r3, #0
 800e446:	d106      	bne.n	800e456 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	3324      	adds	r3, #36	; 0x24
 800e44c:	687a      	ldr	r2, [r7, #4]
 800e44e:	68b9      	ldr	r1, [r7, #8]
 800e450:	4618      	mov	r0, r3
 800e452:	f000 fc3b 	bl	800eccc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e456:	6978      	ldr	r0, [r7, #20]
 800e458:	f7ff ff26 	bl	800e2a8 <prvUnlockQueue>
	}
 800e45c:	bf00      	nop
 800e45e:	3718      	adds	r7, #24
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e464:	b580      	push	{r7, lr}
 800e466:	b08e      	sub	sp, #56	; 0x38
 800e468:	af04      	add	r7, sp, #16
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
 800e470:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e474:	2b00      	cmp	r3, #0
 800e476:	d10a      	bne.n	800e48e <xTaskCreateStatic+0x2a>
	__asm volatile
 800e478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47c:	f383 8811 	msr	BASEPRI, r3
 800e480:	f3bf 8f6f 	isb	sy
 800e484:	f3bf 8f4f 	dsb	sy
 800e488:	623b      	str	r3, [r7, #32]
}
 800e48a:	bf00      	nop
 800e48c:	e7fe      	b.n	800e48c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e490:	2b00      	cmp	r3, #0
 800e492:	d10a      	bne.n	800e4aa <xTaskCreateStatic+0x46>
	__asm volatile
 800e494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e498:	f383 8811 	msr	BASEPRI, r3
 800e49c:	f3bf 8f6f 	isb	sy
 800e4a0:	f3bf 8f4f 	dsb	sy
 800e4a4:	61fb      	str	r3, [r7, #28]
}
 800e4a6:	bf00      	nop
 800e4a8:	e7fe      	b.n	800e4a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e4aa:	235c      	movs	r3, #92	; 0x5c
 800e4ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	2b5c      	cmp	r3, #92	; 0x5c
 800e4b2:	d00a      	beq.n	800e4ca <xTaskCreateStatic+0x66>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	61bb      	str	r3, [r7, #24]
}
 800e4c6:	bf00      	nop
 800e4c8:	e7fe      	b.n	800e4c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e4ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d01e      	beq.n	800e510 <xTaskCreateStatic+0xac>
 800e4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d01b      	beq.n	800e510 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e4:	2202      	movs	r2, #2
 800e4e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	9303      	str	r3, [sp, #12]
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f0:	9302      	str	r3, [sp, #8]
 800e4f2:	f107 0314 	add.w	r3, r7, #20
 800e4f6:	9301      	str	r3, [sp, #4]
 800e4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fa:	9300      	str	r3, [sp, #0]
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	68b9      	ldr	r1, [r7, #8]
 800e502:	68f8      	ldr	r0, [r7, #12]
 800e504:	f000 f850 	bl	800e5a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e50a:	f000 f8dd 	bl	800e6c8 <prvAddNewTaskToReadyList>
 800e50e:	e001      	b.n	800e514 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e510:	2300      	movs	r3, #0
 800e512:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e514:	697b      	ldr	r3, [r7, #20]
	}
 800e516:	4618      	mov	r0, r3
 800e518:	3728      	adds	r7, #40	; 0x28
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}

0800e51e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e51e:	b580      	push	{r7, lr}
 800e520:	b08c      	sub	sp, #48	; 0x30
 800e522:	af04      	add	r7, sp, #16
 800e524:	60f8      	str	r0, [r7, #12]
 800e526:	60b9      	str	r1, [r7, #8]
 800e528:	603b      	str	r3, [r7, #0]
 800e52a:	4613      	mov	r3, r2
 800e52c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e52e:	88fb      	ldrh	r3, [r7, #6]
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4618      	mov	r0, r3
 800e534:	f001 fd30 	bl	800ff98 <pvPortMalloc>
 800e538:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d00e      	beq.n	800e55e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e540:	205c      	movs	r0, #92	; 0x5c
 800e542:	f001 fd29 	bl	800ff98 <pvPortMalloc>
 800e546:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d003      	beq.n	800e556 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e54e:	69fb      	ldr	r3, [r7, #28]
 800e550:	697a      	ldr	r2, [r7, #20]
 800e552:	631a      	str	r2, [r3, #48]	; 0x30
 800e554:	e005      	b.n	800e562 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e556:	6978      	ldr	r0, [r7, #20]
 800e558:	f001 fdea 	bl	8010130 <vPortFree>
 800e55c:	e001      	b.n	800e562 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e55e:	2300      	movs	r3, #0
 800e560:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e562:	69fb      	ldr	r3, [r7, #28]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d017      	beq.n	800e598 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	2200      	movs	r2, #0
 800e56c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e570:	88fa      	ldrh	r2, [r7, #6]
 800e572:	2300      	movs	r3, #0
 800e574:	9303      	str	r3, [sp, #12]
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	9302      	str	r3, [sp, #8]
 800e57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57c:	9301      	str	r3, [sp, #4]
 800e57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e580:	9300      	str	r3, [sp, #0]
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	68b9      	ldr	r1, [r7, #8]
 800e586:	68f8      	ldr	r0, [r7, #12]
 800e588:	f000 f80e 	bl	800e5a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e58c:	69f8      	ldr	r0, [r7, #28]
 800e58e:	f000 f89b 	bl	800e6c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e592:	2301      	movs	r3, #1
 800e594:	61bb      	str	r3, [r7, #24]
 800e596:	e002      	b.n	800e59e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e59c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e59e:	69bb      	ldr	r3, [r7, #24]
	}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3720      	adds	r7, #32
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b088      	sub	sp, #32
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	60f8      	str	r0, [r7, #12]
 800e5b0:	60b9      	str	r1, [r7, #8]
 800e5b2:	607a      	str	r2, [r7, #4]
 800e5b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	461a      	mov	r2, r3
 800e5c0:	21a5      	movs	r1, #165	; 0xa5
 800e5c2:	f002 fc31 	bl	8010e28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	4413      	add	r3, r2
 800e5d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	f023 0307 	bic.w	r3, r3, #7
 800e5de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	f003 0307 	and.w	r3, r3, #7
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d00a      	beq.n	800e600 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	617b      	str	r3, [r7, #20]
}
 800e5fc:	bf00      	nop
 800e5fe:	e7fe      	b.n	800e5fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d01f      	beq.n	800e646 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e606:	2300      	movs	r3, #0
 800e608:	61fb      	str	r3, [r7, #28]
 800e60a:	e012      	b.n	800e632 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e60c:	68ba      	ldr	r2, [r7, #8]
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	4413      	add	r3, r2
 800e612:	7819      	ldrb	r1, [r3, #0]
 800e614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	4413      	add	r3, r2
 800e61a:	3334      	adds	r3, #52	; 0x34
 800e61c:	460a      	mov	r2, r1
 800e61e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e620:	68ba      	ldr	r2, [r7, #8]
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	4413      	add	r3, r2
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d006      	beq.n	800e63a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	3301      	adds	r3, #1
 800e630:	61fb      	str	r3, [r7, #28]
 800e632:	69fb      	ldr	r3, [r7, #28]
 800e634:	2b0f      	cmp	r3, #15
 800e636:	d9e9      	bls.n	800e60c <prvInitialiseNewTask+0x64>
 800e638:	e000      	b.n	800e63c <prvInitialiseNewTask+0x94>
			{
				break;
 800e63a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e644:	e003      	b.n	800e64e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e648:	2200      	movs	r2, #0
 800e64a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e650:	2b37      	cmp	r3, #55	; 0x37
 800e652:	d901      	bls.n	800e658 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e654:	2337      	movs	r3, #55	; 0x37
 800e656:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e65c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e662:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e666:	2200      	movs	r2, #0
 800e668:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66c:	3304      	adds	r3, #4
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fe fec2 	bl	800d3f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e676:	3318      	adds	r3, #24
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fe febd 	bl	800d3f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e682:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e686:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e692:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e696:	2200      	movs	r2, #0
 800e698:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69c:	2200      	movs	r2, #0
 800e69e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e6a2:	683a      	ldr	r2, [r7, #0]
 800e6a4:	68f9      	ldr	r1, [r7, #12]
 800e6a6:	69b8      	ldr	r0, [r7, #24]
 800e6a8:	f001 fa26 	bl	800faf8 <pxPortInitialiseStack>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d002      	beq.n	800e6be <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e6be:	bf00      	nop
 800e6c0:	3720      	adds	r7, #32
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
	...

0800e6c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e6d0:	f001 fb40 	bl	800fd54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e6d4:	4b2d      	ldr	r3, [pc, #180]	; (800e78c <prvAddNewTaskToReadyList+0xc4>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	4a2c      	ldr	r2, [pc, #176]	; (800e78c <prvAddNewTaskToReadyList+0xc4>)
 800e6dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e6de:	4b2c      	ldr	r3, [pc, #176]	; (800e790 <prvAddNewTaskToReadyList+0xc8>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d109      	bne.n	800e6fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e6e6:	4a2a      	ldr	r2, [pc, #168]	; (800e790 <prvAddNewTaskToReadyList+0xc8>)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e6ec:	4b27      	ldr	r3, [pc, #156]	; (800e78c <prvAddNewTaskToReadyList+0xc4>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d110      	bne.n	800e716 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e6f4:	f000 fc16 	bl	800ef24 <prvInitialiseTaskLists>
 800e6f8:	e00d      	b.n	800e716 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e6fa:	4b26      	ldr	r3, [pc, #152]	; (800e794 <prvAddNewTaskToReadyList+0xcc>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d109      	bne.n	800e716 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e702:	4b23      	ldr	r3, [pc, #140]	; (800e790 <prvAddNewTaskToReadyList+0xc8>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d802      	bhi.n	800e716 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e710:	4a1f      	ldr	r2, [pc, #124]	; (800e790 <prvAddNewTaskToReadyList+0xc8>)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e716:	4b20      	ldr	r3, [pc, #128]	; (800e798 <prvAddNewTaskToReadyList+0xd0>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	3301      	adds	r3, #1
 800e71c:	4a1e      	ldr	r2, [pc, #120]	; (800e798 <prvAddNewTaskToReadyList+0xd0>)
 800e71e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e720:	4b1d      	ldr	r3, [pc, #116]	; (800e798 <prvAddNewTaskToReadyList+0xd0>)
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e72c:	4b1b      	ldr	r3, [pc, #108]	; (800e79c <prvAddNewTaskToReadyList+0xd4>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	429a      	cmp	r2, r3
 800e732:	d903      	bls.n	800e73c <prvAddNewTaskToReadyList+0x74>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e738:	4a18      	ldr	r2, [pc, #96]	; (800e79c <prvAddNewTaskToReadyList+0xd4>)
 800e73a:	6013      	str	r3, [r2, #0]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e740:	4613      	mov	r3, r2
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	4413      	add	r3, r2
 800e746:	009b      	lsls	r3, r3, #2
 800e748:	4a15      	ldr	r2, [pc, #84]	; (800e7a0 <prvAddNewTaskToReadyList+0xd8>)
 800e74a:	441a      	add	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	3304      	adds	r3, #4
 800e750:	4619      	mov	r1, r3
 800e752:	4610      	mov	r0, r2
 800e754:	f7fe fe5d 	bl	800d412 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e758:	f001 fb2c 	bl	800fdb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e75c:	4b0d      	ldr	r3, [pc, #52]	; (800e794 <prvAddNewTaskToReadyList+0xcc>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d00e      	beq.n	800e782 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e764:	4b0a      	ldr	r3, [pc, #40]	; (800e790 <prvAddNewTaskToReadyList+0xc8>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e76e:	429a      	cmp	r2, r3
 800e770:	d207      	bcs.n	800e782 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e772:	4b0c      	ldr	r3, [pc, #48]	; (800e7a4 <prvAddNewTaskToReadyList+0xdc>)
 800e774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e778:	601a      	str	r2, [r3, #0]
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e782:	bf00      	nop
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	20000d70 	.word	0x20000d70
 800e790:	2000089c 	.word	0x2000089c
 800e794:	20000d7c 	.word	0x20000d7c
 800e798:	20000d8c 	.word	0x20000d8c
 800e79c:	20000d78 	.word	0x20000d78
 800e7a0:	200008a0 	.word	0x200008a0
 800e7a4:	e000ed04 	.word	0xe000ed04

0800e7a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d017      	beq.n	800e7ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e7ba:	4b13      	ldr	r3, [pc, #76]	; (800e808 <vTaskDelay+0x60>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d00a      	beq.n	800e7d8 <vTaskDelay+0x30>
	__asm volatile
 800e7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c6:	f383 8811 	msr	BASEPRI, r3
 800e7ca:	f3bf 8f6f 	isb	sy
 800e7ce:	f3bf 8f4f 	dsb	sy
 800e7d2:	60bb      	str	r3, [r7, #8]
}
 800e7d4:	bf00      	nop
 800e7d6:	e7fe      	b.n	800e7d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e7d8:	f000 f880 	bl	800e8dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e7dc:	2100      	movs	r1, #0
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 fde8 	bl	800f3b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e7e4:	f000 f888 	bl	800e8f8 <xTaskResumeAll>
 800e7e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d107      	bne.n	800e800 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e7f0:	4b06      	ldr	r3, [pc, #24]	; (800e80c <vTaskDelay+0x64>)
 800e7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7f6:	601a      	str	r2, [r3, #0]
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e800:	bf00      	nop
 800e802:	3710      	adds	r7, #16
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}
 800e808:	20000d98 	.word	0x20000d98
 800e80c:	e000ed04 	.word	0xe000ed04

0800e810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b08a      	sub	sp, #40	; 0x28
 800e814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e816:	2300      	movs	r3, #0
 800e818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e81a:	2300      	movs	r3, #0
 800e81c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e81e:	463a      	mov	r2, r7
 800e820:	1d39      	adds	r1, r7, #4
 800e822:	f107 0308 	add.w	r3, r7, #8
 800e826:	4618      	mov	r0, r3
 800e828:	f7fe fd92 	bl	800d350 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e82c:	6839      	ldr	r1, [r7, #0]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	68ba      	ldr	r2, [r7, #8]
 800e832:	9202      	str	r2, [sp, #8]
 800e834:	9301      	str	r3, [sp, #4]
 800e836:	2300      	movs	r3, #0
 800e838:	9300      	str	r3, [sp, #0]
 800e83a:	2300      	movs	r3, #0
 800e83c:	460a      	mov	r2, r1
 800e83e:	4921      	ldr	r1, [pc, #132]	; (800e8c4 <vTaskStartScheduler+0xb4>)
 800e840:	4821      	ldr	r0, [pc, #132]	; (800e8c8 <vTaskStartScheduler+0xb8>)
 800e842:	f7ff fe0f 	bl	800e464 <xTaskCreateStatic>
 800e846:	4603      	mov	r3, r0
 800e848:	4a20      	ldr	r2, [pc, #128]	; (800e8cc <vTaskStartScheduler+0xbc>)
 800e84a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e84c:	4b1f      	ldr	r3, [pc, #124]	; (800e8cc <vTaskStartScheduler+0xbc>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d002      	beq.n	800e85a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e854:	2301      	movs	r3, #1
 800e856:	617b      	str	r3, [r7, #20]
 800e858:	e001      	b.n	800e85e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e85a:	2300      	movs	r3, #0
 800e85c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	2b01      	cmp	r3, #1
 800e862:	d102      	bne.n	800e86a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e864:	f000 fdfa 	bl	800f45c <xTimerCreateTimerTask>
 800e868:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d116      	bne.n	800e89e <vTaskStartScheduler+0x8e>
	__asm volatile
 800e870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e874:	f383 8811 	msr	BASEPRI, r3
 800e878:	f3bf 8f6f 	isb	sy
 800e87c:	f3bf 8f4f 	dsb	sy
 800e880:	613b      	str	r3, [r7, #16]
}
 800e882:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e884:	4b12      	ldr	r3, [pc, #72]	; (800e8d0 <vTaskStartScheduler+0xc0>)
 800e886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e88a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e88c:	4b11      	ldr	r3, [pc, #68]	; (800e8d4 <vTaskStartScheduler+0xc4>)
 800e88e:	2201      	movs	r2, #1
 800e890:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e892:	4b11      	ldr	r3, [pc, #68]	; (800e8d8 <vTaskStartScheduler+0xc8>)
 800e894:	2200      	movs	r2, #0
 800e896:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e898:	f001 f9ba 	bl	800fc10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e89c:	e00e      	b.n	800e8bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8a4:	d10a      	bne.n	800e8bc <vTaskStartScheduler+0xac>
	__asm volatile
 800e8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8aa:	f383 8811 	msr	BASEPRI, r3
 800e8ae:	f3bf 8f6f 	isb	sy
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	60fb      	str	r3, [r7, #12]
}
 800e8b8:	bf00      	nop
 800e8ba:	e7fe      	b.n	800e8ba <vTaskStartScheduler+0xaa>
}
 800e8bc:	bf00      	nop
 800e8be:	3718      	adds	r7, #24
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	08010ebc 	.word	0x08010ebc
 800e8c8:	0800eef5 	.word	0x0800eef5
 800e8cc:	20000d94 	.word	0x20000d94
 800e8d0:	20000d90 	.word	0x20000d90
 800e8d4:	20000d7c 	.word	0x20000d7c
 800e8d8:	20000d74 	.word	0x20000d74

0800e8dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e8dc:	b480      	push	{r7}
 800e8de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e8e0:	4b04      	ldr	r3, [pc, #16]	; (800e8f4 <vTaskSuspendAll+0x18>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	4a03      	ldr	r2, [pc, #12]	; (800e8f4 <vTaskSuspendAll+0x18>)
 800e8e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e8ea:	bf00      	nop
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f2:	4770      	bx	lr
 800e8f4:	20000d98 	.word	0x20000d98

0800e8f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e8fe:	2300      	movs	r3, #0
 800e900:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e902:	2300      	movs	r3, #0
 800e904:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e906:	4b42      	ldr	r3, [pc, #264]	; (800ea10 <xTaskResumeAll+0x118>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d10a      	bne.n	800e924 <xTaskResumeAll+0x2c>
	__asm volatile
 800e90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	603b      	str	r3, [r7, #0]
}
 800e920:	bf00      	nop
 800e922:	e7fe      	b.n	800e922 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e924:	f001 fa16 	bl	800fd54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e928:	4b39      	ldr	r3, [pc, #228]	; (800ea10 <xTaskResumeAll+0x118>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	3b01      	subs	r3, #1
 800e92e:	4a38      	ldr	r2, [pc, #224]	; (800ea10 <xTaskResumeAll+0x118>)
 800e930:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e932:	4b37      	ldr	r3, [pc, #220]	; (800ea10 <xTaskResumeAll+0x118>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d162      	bne.n	800ea00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e93a:	4b36      	ldr	r3, [pc, #216]	; (800ea14 <xTaskResumeAll+0x11c>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d05e      	beq.n	800ea00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e942:	e02f      	b.n	800e9a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e944:	4b34      	ldr	r3, [pc, #208]	; (800ea18 <xTaskResumeAll+0x120>)
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	3318      	adds	r3, #24
 800e950:	4618      	mov	r0, r3
 800e952:	f7fe fdbb 	bl	800d4cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	3304      	adds	r3, #4
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fe fdb6 	bl	800d4cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e964:	4b2d      	ldr	r3, [pc, #180]	; (800ea1c <xTaskResumeAll+0x124>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d903      	bls.n	800e974 <xTaskResumeAll+0x7c>
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e970:	4a2a      	ldr	r2, [pc, #168]	; (800ea1c <xTaskResumeAll+0x124>)
 800e972:	6013      	str	r3, [r2, #0]
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e978:	4613      	mov	r3, r2
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	4413      	add	r3, r2
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	4a27      	ldr	r2, [pc, #156]	; (800ea20 <xTaskResumeAll+0x128>)
 800e982:	441a      	add	r2, r3
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	3304      	adds	r3, #4
 800e988:	4619      	mov	r1, r3
 800e98a:	4610      	mov	r0, r2
 800e98c:	f7fe fd41 	bl	800d412 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e994:	4b23      	ldr	r3, [pc, #140]	; (800ea24 <xTaskResumeAll+0x12c>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d302      	bcc.n	800e9a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e99e:	4b22      	ldr	r3, [pc, #136]	; (800ea28 <xTaskResumeAll+0x130>)
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e9a4:	4b1c      	ldr	r3, [pc, #112]	; (800ea18 <xTaskResumeAll+0x120>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d1cb      	bne.n	800e944 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d001      	beq.n	800e9b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e9b2:	f000 fb55 	bl	800f060 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e9b6:	4b1d      	ldr	r3, [pc, #116]	; (800ea2c <xTaskResumeAll+0x134>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d010      	beq.n	800e9e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e9c2:	f000 f847 	bl	800ea54 <xTaskIncrementTick>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d002      	beq.n	800e9d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e9cc:	4b16      	ldr	r3, [pc, #88]	; (800ea28 <xTaskResumeAll+0x130>)
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d1f1      	bne.n	800e9c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e9de:	4b13      	ldr	r3, [pc, #76]	; (800ea2c <xTaskResumeAll+0x134>)
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e9e4:	4b10      	ldr	r3, [pc, #64]	; (800ea28 <xTaskResumeAll+0x130>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d009      	beq.n	800ea00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e9f0:	4b0f      	ldr	r3, [pc, #60]	; (800ea30 <xTaskResumeAll+0x138>)
 800e9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9f6:	601a      	str	r2, [r3, #0]
 800e9f8:	f3bf 8f4f 	dsb	sy
 800e9fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea00:	f001 f9d8 	bl	800fdb4 <vPortExitCritical>

	return xAlreadyYielded;
 800ea04:	68bb      	ldr	r3, [r7, #8]
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3710      	adds	r7, #16
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	20000d98 	.word	0x20000d98
 800ea14:	20000d70 	.word	0x20000d70
 800ea18:	20000d30 	.word	0x20000d30
 800ea1c:	20000d78 	.word	0x20000d78
 800ea20:	200008a0 	.word	0x200008a0
 800ea24:	2000089c 	.word	0x2000089c
 800ea28:	20000d84 	.word	0x20000d84
 800ea2c:	20000d80 	.word	0x20000d80
 800ea30:	e000ed04 	.word	0xe000ed04

0800ea34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ea3a:	4b05      	ldr	r3, [pc, #20]	; (800ea50 <xTaskGetTickCount+0x1c>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ea40:	687b      	ldr	r3, [r7, #4]
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	370c      	adds	r7, #12
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop
 800ea50:	20000d74 	.word	0x20000d74

0800ea54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b086      	sub	sp, #24
 800ea58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea5e:	4b4f      	ldr	r3, [pc, #316]	; (800eb9c <xTaskIncrementTick+0x148>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	f040 808f 	bne.w	800eb86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ea68:	4b4d      	ldr	r3, [pc, #308]	; (800eba0 <xTaskIncrementTick+0x14c>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ea70:	4a4b      	ldr	r2, [pc, #300]	; (800eba0 <xTaskIncrementTick+0x14c>)
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d120      	bne.n	800eabe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ea7c:	4b49      	ldr	r3, [pc, #292]	; (800eba4 <xTaskIncrementTick+0x150>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d00a      	beq.n	800ea9c <xTaskIncrementTick+0x48>
	__asm volatile
 800ea86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8a:	f383 8811 	msr	BASEPRI, r3
 800ea8e:	f3bf 8f6f 	isb	sy
 800ea92:	f3bf 8f4f 	dsb	sy
 800ea96:	603b      	str	r3, [r7, #0]
}
 800ea98:	bf00      	nop
 800ea9a:	e7fe      	b.n	800ea9a <xTaskIncrementTick+0x46>
 800ea9c:	4b41      	ldr	r3, [pc, #260]	; (800eba4 <xTaskIncrementTick+0x150>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	60fb      	str	r3, [r7, #12]
 800eaa2:	4b41      	ldr	r3, [pc, #260]	; (800eba8 <xTaskIncrementTick+0x154>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4a3f      	ldr	r2, [pc, #252]	; (800eba4 <xTaskIncrementTick+0x150>)
 800eaa8:	6013      	str	r3, [r2, #0]
 800eaaa:	4a3f      	ldr	r2, [pc, #252]	; (800eba8 <xTaskIncrementTick+0x154>)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	6013      	str	r3, [r2, #0]
 800eab0:	4b3e      	ldr	r3, [pc, #248]	; (800ebac <xTaskIncrementTick+0x158>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	3301      	adds	r3, #1
 800eab6:	4a3d      	ldr	r2, [pc, #244]	; (800ebac <xTaskIncrementTick+0x158>)
 800eab8:	6013      	str	r3, [r2, #0]
 800eaba:	f000 fad1 	bl	800f060 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eabe:	4b3c      	ldr	r3, [pc, #240]	; (800ebb0 <xTaskIncrementTick+0x15c>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	693a      	ldr	r2, [r7, #16]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d349      	bcc.n	800eb5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eac8:	4b36      	ldr	r3, [pc, #216]	; (800eba4 <xTaskIncrementTick+0x150>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d104      	bne.n	800eadc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ead2:	4b37      	ldr	r3, [pc, #220]	; (800ebb0 <xTaskIncrementTick+0x15c>)
 800ead4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ead8:	601a      	str	r2, [r3, #0]
					break;
 800eada:	e03f      	b.n	800eb5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eadc:	4b31      	ldr	r3, [pc, #196]	; (800eba4 <xTaskIncrementTick+0x150>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	68db      	ldr	r3, [r3, #12]
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eaec:	693a      	ldr	r2, [r7, #16]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d203      	bcs.n	800eafc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eaf4:	4a2e      	ldr	r2, [pc, #184]	; (800ebb0 <xTaskIncrementTick+0x15c>)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eafa:	e02f      	b.n	800eb5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	3304      	adds	r3, #4
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fe fce3 	bl	800d4cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d004      	beq.n	800eb18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	3318      	adds	r3, #24
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7fe fcda 	bl	800d4cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb1c:	4b25      	ldr	r3, [pc, #148]	; (800ebb4 <xTaskIncrementTick+0x160>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d903      	bls.n	800eb2c <xTaskIncrementTick+0xd8>
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb28:	4a22      	ldr	r2, [pc, #136]	; (800ebb4 <xTaskIncrementTick+0x160>)
 800eb2a:	6013      	str	r3, [r2, #0]
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb30:	4613      	mov	r3, r2
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	4413      	add	r3, r2
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	4a1f      	ldr	r2, [pc, #124]	; (800ebb8 <xTaskIncrementTick+0x164>)
 800eb3a:	441a      	add	r2, r3
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	3304      	adds	r3, #4
 800eb40:	4619      	mov	r1, r3
 800eb42:	4610      	mov	r0, r2
 800eb44:	f7fe fc65 	bl	800d412 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb4c:	4b1b      	ldr	r3, [pc, #108]	; (800ebbc <xTaskIncrementTick+0x168>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d3b8      	bcc.n	800eac8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eb56:	2301      	movs	r3, #1
 800eb58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb5a:	e7b5      	b.n	800eac8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eb5c:	4b17      	ldr	r3, [pc, #92]	; (800ebbc <xTaskIncrementTick+0x168>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb62:	4915      	ldr	r1, [pc, #84]	; (800ebb8 <xTaskIncrementTick+0x164>)
 800eb64:	4613      	mov	r3, r2
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	4413      	add	r3, r2
 800eb6a:	009b      	lsls	r3, r3, #2
 800eb6c:	440b      	add	r3, r1
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d901      	bls.n	800eb78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800eb74:	2301      	movs	r3, #1
 800eb76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eb78:	4b11      	ldr	r3, [pc, #68]	; (800ebc0 <xTaskIncrementTick+0x16c>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d007      	beq.n	800eb90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800eb80:	2301      	movs	r3, #1
 800eb82:	617b      	str	r3, [r7, #20]
 800eb84:	e004      	b.n	800eb90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800eb86:	4b0f      	ldr	r3, [pc, #60]	; (800ebc4 <xTaskIncrementTick+0x170>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	4a0d      	ldr	r2, [pc, #52]	; (800ebc4 <xTaskIncrementTick+0x170>)
 800eb8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800eb90:	697b      	ldr	r3, [r7, #20]
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3718      	adds	r7, #24
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	20000d98 	.word	0x20000d98
 800eba0:	20000d74 	.word	0x20000d74
 800eba4:	20000d28 	.word	0x20000d28
 800eba8:	20000d2c 	.word	0x20000d2c
 800ebac:	20000d88 	.word	0x20000d88
 800ebb0:	20000d90 	.word	0x20000d90
 800ebb4:	20000d78 	.word	0x20000d78
 800ebb8:	200008a0 	.word	0x200008a0
 800ebbc:	2000089c 	.word	0x2000089c
 800ebc0:	20000d84 	.word	0x20000d84
 800ebc4:	20000d80 	.word	0x20000d80

0800ebc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b085      	sub	sp, #20
 800ebcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ebce:	4b28      	ldr	r3, [pc, #160]	; (800ec70 <vTaskSwitchContext+0xa8>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d003      	beq.n	800ebde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ebd6:	4b27      	ldr	r3, [pc, #156]	; (800ec74 <vTaskSwitchContext+0xac>)
 800ebd8:	2201      	movs	r2, #1
 800ebda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ebdc:	e041      	b.n	800ec62 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ebde:	4b25      	ldr	r3, [pc, #148]	; (800ec74 <vTaskSwitchContext+0xac>)
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebe4:	4b24      	ldr	r3, [pc, #144]	; (800ec78 <vTaskSwitchContext+0xb0>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	60fb      	str	r3, [r7, #12]
 800ebea:	e010      	b.n	800ec0e <vTaskSwitchContext+0x46>
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d10a      	bne.n	800ec08 <vTaskSwitchContext+0x40>
	__asm volatile
 800ebf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf6:	f383 8811 	msr	BASEPRI, r3
 800ebfa:	f3bf 8f6f 	isb	sy
 800ebfe:	f3bf 8f4f 	dsb	sy
 800ec02:	607b      	str	r3, [r7, #4]
}
 800ec04:	bf00      	nop
 800ec06:	e7fe      	b.n	800ec06 <vTaskSwitchContext+0x3e>
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	3b01      	subs	r3, #1
 800ec0c:	60fb      	str	r3, [r7, #12]
 800ec0e:	491b      	ldr	r1, [pc, #108]	; (800ec7c <vTaskSwitchContext+0xb4>)
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	4613      	mov	r3, r2
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	4413      	add	r3, r2
 800ec18:	009b      	lsls	r3, r3, #2
 800ec1a:	440b      	add	r3, r1
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d0e4      	beq.n	800ebec <vTaskSwitchContext+0x24>
 800ec22:	68fa      	ldr	r2, [r7, #12]
 800ec24:	4613      	mov	r3, r2
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	4413      	add	r3, r2
 800ec2a:	009b      	lsls	r3, r3, #2
 800ec2c:	4a13      	ldr	r2, [pc, #76]	; (800ec7c <vTaskSwitchContext+0xb4>)
 800ec2e:	4413      	add	r3, r2
 800ec30:	60bb      	str	r3, [r7, #8]
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	685a      	ldr	r2, [r3, #4]
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	605a      	str	r2, [r3, #4]
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	685a      	ldr	r2, [r3, #4]
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	3308      	adds	r3, #8
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d104      	bne.n	800ec52 <vTaskSwitchContext+0x8a>
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	685a      	ldr	r2, [r3, #4]
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	605a      	str	r2, [r3, #4]
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	4a09      	ldr	r2, [pc, #36]	; (800ec80 <vTaskSwitchContext+0xb8>)
 800ec5a:	6013      	str	r3, [r2, #0]
 800ec5c:	4a06      	ldr	r2, [pc, #24]	; (800ec78 <vTaskSwitchContext+0xb0>)
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	6013      	str	r3, [r2, #0]
}
 800ec62:	bf00      	nop
 800ec64:	3714      	adds	r7, #20
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	20000d98 	.word	0x20000d98
 800ec74:	20000d84 	.word	0x20000d84
 800ec78:	20000d78 	.word	0x20000d78
 800ec7c:	200008a0 	.word	0x200008a0
 800ec80:	2000089c 	.word	0x2000089c

0800ec84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d10a      	bne.n	800ecaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ec94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec98:	f383 8811 	msr	BASEPRI, r3
 800ec9c:	f3bf 8f6f 	isb	sy
 800eca0:	f3bf 8f4f 	dsb	sy
 800eca4:	60fb      	str	r3, [r7, #12]
}
 800eca6:	bf00      	nop
 800eca8:	e7fe      	b.n	800eca8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ecaa:	4b07      	ldr	r3, [pc, #28]	; (800ecc8 <vTaskPlaceOnEventList+0x44>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	3318      	adds	r3, #24
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f7fe fbd1 	bl	800d45a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ecb8:	2101      	movs	r1, #1
 800ecba:	6838      	ldr	r0, [r7, #0]
 800ecbc:	f000 fb7a 	bl	800f3b4 <prvAddCurrentTaskToDelayedList>
}
 800ecc0:	bf00      	nop
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	2000089c 	.word	0x2000089c

0800eccc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b086      	sub	sp, #24
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d10a      	bne.n	800ecf4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ecde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece2:	f383 8811 	msr	BASEPRI, r3
 800ece6:	f3bf 8f6f 	isb	sy
 800ecea:	f3bf 8f4f 	dsb	sy
 800ecee:	617b      	str	r3, [r7, #20]
}
 800ecf0:	bf00      	nop
 800ecf2:	e7fe      	b.n	800ecf2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ecf4:	4b0a      	ldr	r3, [pc, #40]	; (800ed20 <vTaskPlaceOnEventListRestricted+0x54>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	3318      	adds	r3, #24
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	68f8      	ldr	r0, [r7, #12]
 800ecfe:	f7fe fb88 	bl	800d412 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d002      	beq.n	800ed0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ed08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ed0e:	6879      	ldr	r1, [r7, #4]
 800ed10:	68b8      	ldr	r0, [r7, #8]
 800ed12:	f000 fb4f 	bl	800f3b4 <prvAddCurrentTaskToDelayedList>
	}
 800ed16:	bf00      	nop
 800ed18:	3718      	adds	r7, #24
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	2000089c 	.word	0x2000089c

0800ed24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b086      	sub	sp, #24
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	68db      	ldr	r3, [r3, #12]
 800ed30:	68db      	ldr	r3, [r3, #12]
 800ed32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d10a      	bne.n	800ed50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ed3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3e:	f383 8811 	msr	BASEPRI, r3
 800ed42:	f3bf 8f6f 	isb	sy
 800ed46:	f3bf 8f4f 	dsb	sy
 800ed4a:	60fb      	str	r3, [r7, #12]
}
 800ed4c:	bf00      	nop
 800ed4e:	e7fe      	b.n	800ed4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	3318      	adds	r3, #24
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7fe fbb9 	bl	800d4cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed5a:	4b1e      	ldr	r3, [pc, #120]	; (800edd4 <xTaskRemoveFromEventList+0xb0>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d11d      	bne.n	800ed9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	3304      	adds	r3, #4
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7fe fbb0 	bl	800d4cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed70:	4b19      	ldr	r3, [pc, #100]	; (800edd8 <xTaskRemoveFromEventList+0xb4>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d903      	bls.n	800ed80 <xTaskRemoveFromEventList+0x5c>
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7c:	4a16      	ldr	r2, [pc, #88]	; (800edd8 <xTaskRemoveFromEventList+0xb4>)
 800ed7e:	6013      	str	r3, [r2, #0]
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed84:	4613      	mov	r3, r2
 800ed86:	009b      	lsls	r3, r3, #2
 800ed88:	4413      	add	r3, r2
 800ed8a:	009b      	lsls	r3, r3, #2
 800ed8c:	4a13      	ldr	r2, [pc, #76]	; (800eddc <xTaskRemoveFromEventList+0xb8>)
 800ed8e:	441a      	add	r2, r3
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	3304      	adds	r3, #4
 800ed94:	4619      	mov	r1, r3
 800ed96:	4610      	mov	r0, r2
 800ed98:	f7fe fb3b 	bl	800d412 <vListInsertEnd>
 800ed9c:	e005      	b.n	800edaa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	3318      	adds	r3, #24
 800eda2:	4619      	mov	r1, r3
 800eda4:	480e      	ldr	r0, [pc, #56]	; (800ede0 <xTaskRemoveFromEventList+0xbc>)
 800eda6:	f7fe fb34 	bl	800d412 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edae:	4b0d      	ldr	r3, [pc, #52]	; (800ede4 <xTaskRemoveFromEventList+0xc0>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d905      	bls.n	800edc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800edb8:	2301      	movs	r3, #1
 800edba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800edbc:	4b0a      	ldr	r3, [pc, #40]	; (800ede8 <xTaskRemoveFromEventList+0xc4>)
 800edbe:	2201      	movs	r2, #1
 800edc0:	601a      	str	r2, [r3, #0]
 800edc2:	e001      	b.n	800edc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800edc4:	2300      	movs	r3, #0
 800edc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800edc8:	697b      	ldr	r3, [r7, #20]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3718      	adds	r7, #24
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	20000d98 	.word	0x20000d98
 800edd8:	20000d78 	.word	0x20000d78
 800eddc:	200008a0 	.word	0x200008a0
 800ede0:	20000d30 	.word	0x20000d30
 800ede4:	2000089c 	.word	0x2000089c
 800ede8:	20000d84 	.word	0x20000d84

0800edec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800edf4:	4b06      	ldr	r3, [pc, #24]	; (800ee10 <vTaskInternalSetTimeOutState+0x24>)
 800edf6:	681a      	ldr	r2, [r3, #0]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800edfc:	4b05      	ldr	r3, [pc, #20]	; (800ee14 <vTaskInternalSetTimeOutState+0x28>)
 800edfe:	681a      	ldr	r2, [r3, #0]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	605a      	str	r2, [r3, #4]
}
 800ee04:	bf00      	nop
 800ee06:	370c      	adds	r7, #12
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr
 800ee10:	20000d88 	.word	0x20000d88
 800ee14:	20000d74 	.word	0x20000d74

0800ee18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b088      	sub	sp, #32
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d10a      	bne.n	800ee3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ee28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2c:	f383 8811 	msr	BASEPRI, r3
 800ee30:	f3bf 8f6f 	isb	sy
 800ee34:	f3bf 8f4f 	dsb	sy
 800ee38:	613b      	str	r3, [r7, #16]
}
 800ee3a:	bf00      	nop
 800ee3c:	e7fe      	b.n	800ee3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d10a      	bne.n	800ee5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ee44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee48:	f383 8811 	msr	BASEPRI, r3
 800ee4c:	f3bf 8f6f 	isb	sy
 800ee50:	f3bf 8f4f 	dsb	sy
 800ee54:	60fb      	str	r3, [r7, #12]
}
 800ee56:	bf00      	nop
 800ee58:	e7fe      	b.n	800ee58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ee5a:	f000 ff7b 	bl	800fd54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ee5e:	4b1d      	ldr	r3, [pc, #116]	; (800eed4 <xTaskCheckForTimeOut+0xbc>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	685b      	ldr	r3, [r3, #4]
 800ee68:	69ba      	ldr	r2, [r7, #24]
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee76:	d102      	bne.n	800ee7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	61fb      	str	r3, [r7, #28]
 800ee7c:	e023      	b.n	800eec6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	4b15      	ldr	r3, [pc, #84]	; (800eed8 <xTaskCheckForTimeOut+0xc0>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d007      	beq.n	800ee9a <xTaskCheckForTimeOut+0x82>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	69ba      	ldr	r2, [r7, #24]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d302      	bcc.n	800ee9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ee94:	2301      	movs	r3, #1
 800ee96:	61fb      	str	r3, [r7, #28]
 800ee98:	e015      	b.n	800eec6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	697a      	ldr	r2, [r7, #20]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d20b      	bcs.n	800eebc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	681a      	ldr	r2, [r3, #0]
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	1ad2      	subs	r2, r2, r3
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7ff ff9b 	bl	800edec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	61fb      	str	r3, [r7, #28]
 800eeba:	e004      	b.n	800eec6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	2200      	movs	r2, #0
 800eec0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eec2:	2301      	movs	r3, #1
 800eec4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eec6:	f000 ff75 	bl	800fdb4 <vPortExitCritical>

	return xReturn;
 800eeca:	69fb      	ldr	r3, [r7, #28]
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3720      	adds	r7, #32
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}
 800eed4:	20000d74 	.word	0x20000d74
 800eed8:	20000d88 	.word	0x20000d88

0800eedc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eedc:	b480      	push	{r7}
 800eede:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eee0:	4b03      	ldr	r3, [pc, #12]	; (800eef0 <vTaskMissedYield+0x14>)
 800eee2:	2201      	movs	r2, #1
 800eee4:	601a      	str	r2, [r3, #0]
}
 800eee6:	bf00      	nop
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr
 800eef0:	20000d84 	.word	0x20000d84

0800eef4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eefc:	f000 f852 	bl	800efa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ef00:	4b06      	ldr	r3, [pc, #24]	; (800ef1c <prvIdleTask+0x28>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d9f9      	bls.n	800eefc <prvIdleTask+0x8>
			{
				taskYIELD();
 800ef08:	4b05      	ldr	r3, [pc, #20]	; (800ef20 <prvIdleTask+0x2c>)
 800ef0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef0e:	601a      	str	r2, [r3, #0]
 800ef10:	f3bf 8f4f 	dsb	sy
 800ef14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ef18:	e7f0      	b.n	800eefc <prvIdleTask+0x8>
 800ef1a:	bf00      	nop
 800ef1c:	200008a0 	.word	0x200008a0
 800ef20:	e000ed04 	.word	0xe000ed04

0800ef24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	607b      	str	r3, [r7, #4]
 800ef2e:	e00c      	b.n	800ef4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	4613      	mov	r3, r2
 800ef34:	009b      	lsls	r3, r3, #2
 800ef36:	4413      	add	r3, r2
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	4a12      	ldr	r2, [pc, #72]	; (800ef84 <prvInitialiseTaskLists+0x60>)
 800ef3c:	4413      	add	r3, r2
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fe fa3a 	bl	800d3b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	3301      	adds	r3, #1
 800ef48:	607b      	str	r3, [r7, #4]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2b37      	cmp	r3, #55	; 0x37
 800ef4e:	d9ef      	bls.n	800ef30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ef50:	480d      	ldr	r0, [pc, #52]	; (800ef88 <prvInitialiseTaskLists+0x64>)
 800ef52:	f7fe fa31 	bl	800d3b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ef56:	480d      	ldr	r0, [pc, #52]	; (800ef8c <prvInitialiseTaskLists+0x68>)
 800ef58:	f7fe fa2e 	bl	800d3b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ef5c:	480c      	ldr	r0, [pc, #48]	; (800ef90 <prvInitialiseTaskLists+0x6c>)
 800ef5e:	f7fe fa2b 	bl	800d3b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ef62:	480c      	ldr	r0, [pc, #48]	; (800ef94 <prvInitialiseTaskLists+0x70>)
 800ef64:	f7fe fa28 	bl	800d3b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ef68:	480b      	ldr	r0, [pc, #44]	; (800ef98 <prvInitialiseTaskLists+0x74>)
 800ef6a:	f7fe fa25 	bl	800d3b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ef6e:	4b0b      	ldr	r3, [pc, #44]	; (800ef9c <prvInitialiseTaskLists+0x78>)
 800ef70:	4a05      	ldr	r2, [pc, #20]	; (800ef88 <prvInitialiseTaskLists+0x64>)
 800ef72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ef74:	4b0a      	ldr	r3, [pc, #40]	; (800efa0 <prvInitialiseTaskLists+0x7c>)
 800ef76:	4a05      	ldr	r2, [pc, #20]	; (800ef8c <prvInitialiseTaskLists+0x68>)
 800ef78:	601a      	str	r2, [r3, #0]
}
 800ef7a:	bf00      	nop
 800ef7c:	3708      	adds	r7, #8
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	200008a0 	.word	0x200008a0
 800ef88:	20000d00 	.word	0x20000d00
 800ef8c:	20000d14 	.word	0x20000d14
 800ef90:	20000d30 	.word	0x20000d30
 800ef94:	20000d44 	.word	0x20000d44
 800ef98:	20000d5c 	.word	0x20000d5c
 800ef9c:	20000d28 	.word	0x20000d28
 800efa0:	20000d2c 	.word	0x20000d2c

0800efa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efaa:	e019      	b.n	800efe0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800efac:	f000 fed2 	bl	800fd54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efb0:	4b10      	ldr	r3, [pc, #64]	; (800eff4 <prvCheckTasksWaitingTermination+0x50>)
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	3304      	adds	r3, #4
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7fe fa85 	bl	800d4cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800efc2:	4b0d      	ldr	r3, [pc, #52]	; (800eff8 <prvCheckTasksWaitingTermination+0x54>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	3b01      	subs	r3, #1
 800efc8:	4a0b      	ldr	r2, [pc, #44]	; (800eff8 <prvCheckTasksWaitingTermination+0x54>)
 800efca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800efcc:	4b0b      	ldr	r3, [pc, #44]	; (800effc <prvCheckTasksWaitingTermination+0x58>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	3b01      	subs	r3, #1
 800efd2:	4a0a      	ldr	r2, [pc, #40]	; (800effc <prvCheckTasksWaitingTermination+0x58>)
 800efd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800efd6:	f000 feed 	bl	800fdb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f000 f810 	bl	800f000 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efe0:	4b06      	ldr	r3, [pc, #24]	; (800effc <prvCheckTasksWaitingTermination+0x58>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d1e1      	bne.n	800efac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800efe8:	bf00      	nop
 800efea:	bf00      	nop
 800efec:	3708      	adds	r7, #8
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	20000d44 	.word	0x20000d44
 800eff8:	20000d70 	.word	0x20000d70
 800effc:	20000d58 	.word	0x20000d58

0800f000 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f000:	b580      	push	{r7, lr}
 800f002:	b084      	sub	sp, #16
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d108      	bne.n	800f024 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f016:	4618      	mov	r0, r3
 800f018:	f001 f88a 	bl	8010130 <vPortFree>
				vPortFree( pxTCB );
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f001 f887 	bl	8010130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f022:	e018      	b.n	800f056 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d103      	bne.n	800f036 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f001 f87e 	bl	8010130 <vPortFree>
	}
 800f034:	e00f      	b.n	800f056 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f03c:	2b02      	cmp	r3, #2
 800f03e:	d00a      	beq.n	800f056 <prvDeleteTCB+0x56>
	__asm volatile
 800f040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f044:	f383 8811 	msr	BASEPRI, r3
 800f048:	f3bf 8f6f 	isb	sy
 800f04c:	f3bf 8f4f 	dsb	sy
 800f050:	60fb      	str	r3, [r7, #12]
}
 800f052:	bf00      	nop
 800f054:	e7fe      	b.n	800f054 <prvDeleteTCB+0x54>
	}
 800f056:	bf00      	nop
 800f058:	3710      	adds	r7, #16
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
	...

0800f060 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f066:	4b0c      	ldr	r3, [pc, #48]	; (800f098 <prvResetNextTaskUnblockTime+0x38>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d104      	bne.n	800f07a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f070:	4b0a      	ldr	r3, [pc, #40]	; (800f09c <prvResetNextTaskUnblockTime+0x3c>)
 800f072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f076:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f078:	e008      	b.n	800f08c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f07a:	4b07      	ldr	r3, [pc, #28]	; (800f098 <prvResetNextTaskUnblockTime+0x38>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	68db      	ldr	r3, [r3, #12]
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	4a04      	ldr	r2, [pc, #16]	; (800f09c <prvResetNextTaskUnblockTime+0x3c>)
 800f08a:	6013      	str	r3, [r2, #0]
}
 800f08c:	bf00      	nop
 800f08e:	370c      	adds	r7, #12
 800f090:	46bd      	mov	sp, r7
 800f092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f096:	4770      	bx	lr
 800f098:	20000d28 	.word	0x20000d28
 800f09c:	20000d90 	.word	0x20000d90

0800f0a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f0a6:	4b0b      	ldr	r3, [pc, #44]	; (800f0d4 <xTaskGetSchedulerState+0x34>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d102      	bne.n	800f0b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	607b      	str	r3, [r7, #4]
 800f0b2:	e008      	b.n	800f0c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0b4:	4b08      	ldr	r3, [pc, #32]	; (800f0d8 <xTaskGetSchedulerState+0x38>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d102      	bne.n	800f0c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f0bc:	2302      	movs	r3, #2
 800f0be:	607b      	str	r3, [r7, #4]
 800f0c0:	e001      	b.n	800f0c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f0c6:	687b      	ldr	r3, [r7, #4]
	}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	370c      	adds	r7, #12
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr
 800f0d4:	20000d7c 	.word	0x20000d7c
 800f0d8:	20000d98 	.word	0x20000d98

0800f0dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d051      	beq.n	800f196 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0f6:	4b2a      	ldr	r3, [pc, #168]	; (800f1a0 <xTaskPriorityInherit+0xc4>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d241      	bcs.n	800f184 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	699b      	ldr	r3, [r3, #24]
 800f104:	2b00      	cmp	r3, #0
 800f106:	db06      	blt.n	800f116 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f108:	4b25      	ldr	r3, [pc, #148]	; (800f1a0 <xTaskPriorityInherit+0xc4>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	6959      	ldr	r1, [r3, #20]
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f11e:	4613      	mov	r3, r2
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	4413      	add	r3, r2
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	4a1f      	ldr	r2, [pc, #124]	; (800f1a4 <xTaskPriorityInherit+0xc8>)
 800f128:	4413      	add	r3, r2
 800f12a:	4299      	cmp	r1, r3
 800f12c:	d122      	bne.n	800f174 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	3304      	adds	r3, #4
 800f132:	4618      	mov	r0, r3
 800f134:	f7fe f9ca 	bl	800d4cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f138:	4b19      	ldr	r3, [pc, #100]	; (800f1a0 <xTaskPriorityInherit+0xc4>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f146:	4b18      	ldr	r3, [pc, #96]	; (800f1a8 <xTaskPriorityInherit+0xcc>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d903      	bls.n	800f156 <xTaskPriorityInherit+0x7a>
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f152:	4a15      	ldr	r2, [pc, #84]	; (800f1a8 <xTaskPriorityInherit+0xcc>)
 800f154:	6013      	str	r3, [r2, #0]
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f15a:	4613      	mov	r3, r2
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	4413      	add	r3, r2
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	4a10      	ldr	r2, [pc, #64]	; (800f1a4 <xTaskPriorityInherit+0xc8>)
 800f164:	441a      	add	r2, r3
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	3304      	adds	r3, #4
 800f16a:	4619      	mov	r1, r3
 800f16c:	4610      	mov	r0, r2
 800f16e:	f7fe f950 	bl	800d412 <vListInsertEnd>
 800f172:	e004      	b.n	800f17e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f174:	4b0a      	ldr	r3, [pc, #40]	; (800f1a0 <xTaskPriorityInherit+0xc4>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f17e:	2301      	movs	r3, #1
 800f180:	60fb      	str	r3, [r7, #12]
 800f182:	e008      	b.n	800f196 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f188:	4b05      	ldr	r3, [pc, #20]	; (800f1a0 <xTaskPriorityInherit+0xc4>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f18e:	429a      	cmp	r2, r3
 800f190:	d201      	bcs.n	800f196 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f192:	2301      	movs	r3, #1
 800f194:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f196:	68fb      	ldr	r3, [r7, #12]
	}
 800f198:	4618      	mov	r0, r3
 800f19a:	3710      	adds	r7, #16
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	2000089c 	.word	0x2000089c
 800f1a4:	200008a0 	.word	0x200008a0
 800f1a8:	20000d78 	.word	0x20000d78

0800f1ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b086      	sub	sp, #24
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d056      	beq.n	800f270 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f1c2:	4b2e      	ldr	r3, [pc, #184]	; (800f27c <xTaskPriorityDisinherit+0xd0>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	693a      	ldr	r2, [r7, #16]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d00a      	beq.n	800f1e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d0:	f383 8811 	msr	BASEPRI, r3
 800f1d4:	f3bf 8f6f 	isb	sy
 800f1d8:	f3bf 8f4f 	dsb	sy
 800f1dc:	60fb      	str	r3, [r7, #12]
}
 800f1de:	bf00      	nop
 800f1e0:	e7fe      	b.n	800f1e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d10a      	bne.n	800f200 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ee:	f383 8811 	msr	BASEPRI, r3
 800f1f2:	f3bf 8f6f 	isb	sy
 800f1f6:	f3bf 8f4f 	dsb	sy
 800f1fa:	60bb      	str	r3, [r7, #8]
}
 800f1fc:	bf00      	nop
 800f1fe:	e7fe      	b.n	800f1fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f204:	1e5a      	subs	r2, r3, #1
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f212:	429a      	cmp	r2, r3
 800f214:	d02c      	beq.n	800f270 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d128      	bne.n	800f270 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	3304      	adds	r3, #4
 800f222:	4618      	mov	r0, r3
 800f224:	f7fe f952 	bl	800d4cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f234:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f240:	4b0f      	ldr	r3, [pc, #60]	; (800f280 <xTaskPriorityDisinherit+0xd4>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	429a      	cmp	r2, r3
 800f246:	d903      	bls.n	800f250 <xTaskPriorityDisinherit+0xa4>
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f24c:	4a0c      	ldr	r2, [pc, #48]	; (800f280 <xTaskPriorityDisinherit+0xd4>)
 800f24e:	6013      	str	r3, [r2, #0]
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f254:	4613      	mov	r3, r2
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	4413      	add	r3, r2
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	4a09      	ldr	r2, [pc, #36]	; (800f284 <xTaskPriorityDisinherit+0xd8>)
 800f25e:	441a      	add	r2, r3
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	3304      	adds	r3, #4
 800f264:	4619      	mov	r1, r3
 800f266:	4610      	mov	r0, r2
 800f268:	f7fe f8d3 	bl	800d412 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f26c:	2301      	movs	r3, #1
 800f26e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f270:	697b      	ldr	r3, [r7, #20]
	}
 800f272:	4618      	mov	r0, r3
 800f274:	3718      	adds	r7, #24
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	2000089c 	.word	0x2000089c
 800f280:	20000d78 	.word	0x20000d78
 800f284:	200008a0 	.word	0x200008a0

0800f288 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b088      	sub	sp, #32
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f296:	2301      	movs	r3, #1
 800f298:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d06a      	beq.n	800f376 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f2a0:	69bb      	ldr	r3, [r7, #24]
 800f2a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d10a      	bne.n	800f2be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ac:	f383 8811 	msr	BASEPRI, r3
 800f2b0:	f3bf 8f6f 	isb	sy
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	60fb      	str	r3, [r7, #12]
}
 800f2ba:	bf00      	nop
 800f2bc:	e7fe      	b.n	800f2bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2c2:	683a      	ldr	r2, [r7, #0]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d902      	bls.n	800f2ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	61fb      	str	r3, [r7, #28]
 800f2cc:	e002      	b.n	800f2d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f2d4:	69bb      	ldr	r3, [r7, #24]
 800f2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2d8:	69fa      	ldr	r2, [r7, #28]
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d04b      	beq.n	800f376 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f2de:	69bb      	ldr	r3, [r7, #24]
 800f2e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2e2:	697a      	ldr	r2, [r7, #20]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d146      	bne.n	800f376 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f2e8:	4b25      	ldr	r3, [pc, #148]	; (800f380 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	69ba      	ldr	r2, [r7, #24]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d10a      	bne.n	800f308 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f6:	f383 8811 	msr	BASEPRI, r3
 800f2fa:	f3bf 8f6f 	isb	sy
 800f2fe:	f3bf 8f4f 	dsb	sy
 800f302:	60bb      	str	r3, [r7, #8]
}
 800f304:	bf00      	nop
 800f306:	e7fe      	b.n	800f306 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f30c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	69fa      	ldr	r2, [r7, #28]
 800f312:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f314:	69bb      	ldr	r3, [r7, #24]
 800f316:	699b      	ldr	r3, [r3, #24]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	db04      	blt.n	800f326 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	6959      	ldr	r1, [r3, #20]
 800f32a:	693a      	ldr	r2, [r7, #16]
 800f32c:	4613      	mov	r3, r2
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	4413      	add	r3, r2
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	4a13      	ldr	r2, [pc, #76]	; (800f384 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f336:	4413      	add	r3, r2
 800f338:	4299      	cmp	r1, r3
 800f33a:	d11c      	bne.n	800f376 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f33c:	69bb      	ldr	r3, [r7, #24]
 800f33e:	3304      	adds	r3, #4
 800f340:	4618      	mov	r0, r3
 800f342:	f7fe f8c3 	bl	800d4cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f34a:	4b0f      	ldr	r3, [pc, #60]	; (800f388 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	429a      	cmp	r2, r3
 800f350:	d903      	bls.n	800f35a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f356:	4a0c      	ldr	r2, [pc, #48]	; (800f388 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f358:	6013      	str	r3, [r2, #0]
 800f35a:	69bb      	ldr	r3, [r7, #24]
 800f35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f35e:	4613      	mov	r3, r2
 800f360:	009b      	lsls	r3, r3, #2
 800f362:	4413      	add	r3, r2
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	4a07      	ldr	r2, [pc, #28]	; (800f384 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f368:	441a      	add	r2, r3
 800f36a:	69bb      	ldr	r3, [r7, #24]
 800f36c:	3304      	adds	r3, #4
 800f36e:	4619      	mov	r1, r3
 800f370:	4610      	mov	r0, r2
 800f372:	f7fe f84e 	bl	800d412 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f376:	bf00      	nop
 800f378:	3720      	adds	r7, #32
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	2000089c 	.word	0x2000089c
 800f384:	200008a0 	.word	0x200008a0
 800f388:	20000d78 	.word	0x20000d78

0800f38c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f38c:	b480      	push	{r7}
 800f38e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f390:	4b07      	ldr	r3, [pc, #28]	; (800f3b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d004      	beq.n	800f3a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f398:	4b05      	ldr	r3, [pc, #20]	; (800f3b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f39e:	3201      	adds	r2, #1
 800f3a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f3a2:	4b03      	ldr	r3, [pc, #12]	; (800f3b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
	}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr
 800f3b0:	2000089c 	.word	0x2000089c

0800f3b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b084      	sub	sp, #16
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f3be:	4b21      	ldr	r3, [pc, #132]	; (800f444 <prvAddCurrentTaskToDelayedList+0x90>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3c4:	4b20      	ldr	r3, [pc, #128]	; (800f448 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	3304      	adds	r3, #4
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7fe f87e 	bl	800d4cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3d6:	d10a      	bne.n	800f3ee <prvAddCurrentTaskToDelayedList+0x3a>
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d007      	beq.n	800f3ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3de:	4b1a      	ldr	r3, [pc, #104]	; (800f448 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	3304      	adds	r3, #4
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	4819      	ldr	r0, [pc, #100]	; (800f44c <prvAddCurrentTaskToDelayedList+0x98>)
 800f3e8:	f7fe f813 	bl	800d412 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f3ec:	e026      	b.n	800f43c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f3f6:	4b14      	ldr	r3, [pc, #80]	; (800f448 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	68ba      	ldr	r2, [r7, #8]
 800f3fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f3fe:	68ba      	ldr	r2, [r7, #8]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	429a      	cmp	r2, r3
 800f404:	d209      	bcs.n	800f41a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f406:	4b12      	ldr	r3, [pc, #72]	; (800f450 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	4b0f      	ldr	r3, [pc, #60]	; (800f448 <prvAddCurrentTaskToDelayedList+0x94>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	3304      	adds	r3, #4
 800f410:	4619      	mov	r1, r3
 800f412:	4610      	mov	r0, r2
 800f414:	f7fe f821 	bl	800d45a <vListInsert>
}
 800f418:	e010      	b.n	800f43c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f41a:	4b0e      	ldr	r3, [pc, #56]	; (800f454 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	4b0a      	ldr	r3, [pc, #40]	; (800f448 <prvAddCurrentTaskToDelayedList+0x94>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	3304      	adds	r3, #4
 800f424:	4619      	mov	r1, r3
 800f426:	4610      	mov	r0, r2
 800f428:	f7fe f817 	bl	800d45a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f42c:	4b0a      	ldr	r3, [pc, #40]	; (800f458 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	68ba      	ldr	r2, [r7, #8]
 800f432:	429a      	cmp	r2, r3
 800f434:	d202      	bcs.n	800f43c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f436:	4a08      	ldr	r2, [pc, #32]	; (800f458 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	6013      	str	r3, [r2, #0]
}
 800f43c:	bf00      	nop
 800f43e:	3710      	adds	r7, #16
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	20000d74 	.word	0x20000d74
 800f448:	2000089c 	.word	0x2000089c
 800f44c:	20000d5c 	.word	0x20000d5c
 800f450:	20000d2c 	.word	0x20000d2c
 800f454:	20000d28 	.word	0x20000d28
 800f458:	20000d90 	.word	0x20000d90

0800f45c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b08a      	sub	sp, #40	; 0x28
 800f460:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f462:	2300      	movs	r3, #0
 800f464:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f466:	f000 fb07 	bl	800fa78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f46a:	4b1c      	ldr	r3, [pc, #112]	; (800f4dc <xTimerCreateTimerTask+0x80>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d021      	beq.n	800f4b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f472:	2300      	movs	r3, #0
 800f474:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f476:	2300      	movs	r3, #0
 800f478:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f47a:	1d3a      	adds	r2, r7, #4
 800f47c:	f107 0108 	add.w	r1, r7, #8
 800f480:	f107 030c 	add.w	r3, r7, #12
 800f484:	4618      	mov	r0, r3
 800f486:	f7fd ff7d 	bl	800d384 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f48a:	6879      	ldr	r1, [r7, #4]
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	68fa      	ldr	r2, [r7, #12]
 800f490:	9202      	str	r2, [sp, #8]
 800f492:	9301      	str	r3, [sp, #4]
 800f494:	2302      	movs	r3, #2
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	2300      	movs	r3, #0
 800f49a:	460a      	mov	r2, r1
 800f49c:	4910      	ldr	r1, [pc, #64]	; (800f4e0 <xTimerCreateTimerTask+0x84>)
 800f49e:	4811      	ldr	r0, [pc, #68]	; (800f4e4 <xTimerCreateTimerTask+0x88>)
 800f4a0:	f7fe ffe0 	bl	800e464 <xTaskCreateStatic>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	4a10      	ldr	r2, [pc, #64]	; (800f4e8 <xTimerCreateTimerTask+0x8c>)
 800f4a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f4aa:	4b0f      	ldr	r3, [pc, #60]	; (800f4e8 <xTimerCreateTimerTask+0x8c>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d001      	beq.n	800f4b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d10a      	bne.n	800f4d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c0:	f383 8811 	msr	BASEPRI, r3
 800f4c4:	f3bf 8f6f 	isb	sy
 800f4c8:	f3bf 8f4f 	dsb	sy
 800f4cc:	613b      	str	r3, [r7, #16]
}
 800f4ce:	bf00      	nop
 800f4d0:	e7fe      	b.n	800f4d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f4d2:	697b      	ldr	r3, [r7, #20]
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3718      	adds	r7, #24
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	20000dcc 	.word	0x20000dcc
 800f4e0:	08010ec4 	.word	0x08010ec4
 800f4e4:	0800f621 	.word	0x0800f621
 800f4e8:	20000dd0 	.word	0x20000dd0

0800f4ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b08a      	sub	sp, #40	; 0x28
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	60f8      	str	r0, [r7, #12]
 800f4f4:	60b9      	str	r1, [r7, #8]
 800f4f6:	607a      	str	r2, [r7, #4]
 800f4f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d10a      	bne.n	800f51a <xTimerGenericCommand+0x2e>
	__asm volatile
 800f504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f508:	f383 8811 	msr	BASEPRI, r3
 800f50c:	f3bf 8f6f 	isb	sy
 800f510:	f3bf 8f4f 	dsb	sy
 800f514:	623b      	str	r3, [r7, #32]
}
 800f516:	bf00      	nop
 800f518:	e7fe      	b.n	800f518 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f51a:	4b1a      	ldr	r3, [pc, #104]	; (800f584 <xTimerGenericCommand+0x98>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d02a      	beq.n	800f578 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	2b05      	cmp	r3, #5
 800f532:	dc18      	bgt.n	800f566 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f534:	f7ff fdb4 	bl	800f0a0 <xTaskGetSchedulerState>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b02      	cmp	r3, #2
 800f53c:	d109      	bne.n	800f552 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f53e:	4b11      	ldr	r3, [pc, #68]	; (800f584 <xTimerGenericCommand+0x98>)
 800f540:	6818      	ldr	r0, [r3, #0]
 800f542:	f107 0110 	add.w	r1, r7, #16
 800f546:	2300      	movs	r3, #0
 800f548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f54a:	f7fe f973 	bl	800d834 <xQueueGenericSend>
 800f54e:	6278      	str	r0, [r7, #36]	; 0x24
 800f550:	e012      	b.n	800f578 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f552:	4b0c      	ldr	r3, [pc, #48]	; (800f584 <xTimerGenericCommand+0x98>)
 800f554:	6818      	ldr	r0, [r3, #0]
 800f556:	f107 0110 	add.w	r1, r7, #16
 800f55a:	2300      	movs	r3, #0
 800f55c:	2200      	movs	r2, #0
 800f55e:	f7fe f969 	bl	800d834 <xQueueGenericSend>
 800f562:	6278      	str	r0, [r7, #36]	; 0x24
 800f564:	e008      	b.n	800f578 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f566:	4b07      	ldr	r3, [pc, #28]	; (800f584 <xTimerGenericCommand+0x98>)
 800f568:	6818      	ldr	r0, [r3, #0]
 800f56a:	f107 0110 	add.w	r1, r7, #16
 800f56e:	2300      	movs	r3, #0
 800f570:	683a      	ldr	r2, [r7, #0]
 800f572:	f7fe fa5d 	bl	800da30 <xQueueGenericSendFromISR>
 800f576:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3728      	adds	r7, #40	; 0x28
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	20000dcc 	.word	0x20000dcc

0800f588 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b088      	sub	sp, #32
 800f58c:	af02      	add	r7, sp, #8
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f592:	4b22      	ldr	r3, [pc, #136]	; (800f61c <prvProcessExpiredTimer+0x94>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	3304      	adds	r3, #4
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7fd ff93 	bl	800d4cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5ac:	f003 0304 	and.w	r3, r3, #4
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d022      	beq.n	800f5fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	699a      	ldr	r2, [r3, #24]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	18d1      	adds	r1, r2, r3
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	683a      	ldr	r2, [r7, #0]
 800f5c0:	6978      	ldr	r0, [r7, #20]
 800f5c2:	f000 f8d1 	bl	800f768 <prvInsertTimerInActiveList>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d01f      	beq.n	800f60c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	9300      	str	r3, [sp, #0]
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	2100      	movs	r1, #0
 800f5d6:	6978      	ldr	r0, [r7, #20]
 800f5d8:	f7ff ff88 	bl	800f4ec <xTimerGenericCommand>
 800f5dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d113      	bne.n	800f60c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e8:	f383 8811 	msr	BASEPRI, r3
 800f5ec:	f3bf 8f6f 	isb	sy
 800f5f0:	f3bf 8f4f 	dsb	sy
 800f5f4:	60fb      	str	r3, [r7, #12]
}
 800f5f6:	bf00      	nop
 800f5f8:	e7fe      	b.n	800f5f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f600:	f023 0301 	bic.w	r3, r3, #1
 800f604:	b2da      	uxtb	r2, r3
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	6a1b      	ldr	r3, [r3, #32]
 800f610:	6978      	ldr	r0, [r7, #20]
 800f612:	4798      	blx	r3
}
 800f614:	bf00      	nop
 800f616:	3718      	adds	r7, #24
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	20000dc4 	.word	0x20000dc4

0800f620 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f628:	f107 0308 	add.w	r3, r7, #8
 800f62c:	4618      	mov	r0, r3
 800f62e:	f000 f857 	bl	800f6e0 <prvGetNextExpireTime>
 800f632:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	4619      	mov	r1, r3
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f000 f803 	bl	800f644 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f63e:	f000 f8d5 	bl	800f7ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f642:	e7f1      	b.n	800f628 <prvTimerTask+0x8>

0800f644 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f64e:	f7ff f945 	bl	800e8dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f652:	f107 0308 	add.w	r3, r7, #8
 800f656:	4618      	mov	r0, r3
 800f658:	f000 f866 	bl	800f728 <prvSampleTimeNow>
 800f65c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d130      	bne.n	800f6c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d10a      	bne.n	800f680 <prvProcessTimerOrBlockTask+0x3c>
 800f66a:	687a      	ldr	r2, [r7, #4]
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d806      	bhi.n	800f680 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f672:	f7ff f941 	bl	800e8f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f676:	68f9      	ldr	r1, [r7, #12]
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f7ff ff85 	bl	800f588 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f67e:	e024      	b.n	800f6ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d008      	beq.n	800f698 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f686:	4b13      	ldr	r3, [pc, #76]	; (800f6d4 <prvProcessTimerOrBlockTask+0x90>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d101      	bne.n	800f694 <prvProcessTimerOrBlockTask+0x50>
 800f690:	2301      	movs	r3, #1
 800f692:	e000      	b.n	800f696 <prvProcessTimerOrBlockTask+0x52>
 800f694:	2300      	movs	r3, #0
 800f696:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f698:	4b0f      	ldr	r3, [pc, #60]	; (800f6d8 <prvProcessTimerOrBlockTask+0x94>)
 800f69a:	6818      	ldr	r0, [r3, #0]
 800f69c:	687a      	ldr	r2, [r7, #4]
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	1ad3      	subs	r3, r2, r3
 800f6a2:	683a      	ldr	r2, [r7, #0]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	f7fe fea9 	bl	800e3fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f6aa:	f7ff f925 	bl	800e8f8 <xTaskResumeAll>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d10a      	bne.n	800f6ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f6b4:	4b09      	ldr	r3, [pc, #36]	; (800f6dc <prvProcessTimerOrBlockTask+0x98>)
 800f6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6ba:	601a      	str	r2, [r3, #0]
 800f6bc:	f3bf 8f4f 	dsb	sy
 800f6c0:	f3bf 8f6f 	isb	sy
}
 800f6c4:	e001      	b.n	800f6ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f6c6:	f7ff f917 	bl	800e8f8 <xTaskResumeAll>
}
 800f6ca:	bf00      	nop
 800f6cc:	3710      	adds	r7, #16
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	20000dc8 	.word	0x20000dc8
 800f6d8:	20000dcc 	.word	0x20000dcc
 800f6dc:	e000ed04 	.word	0xe000ed04

0800f6e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f6e8:	4b0e      	ldr	r3, [pc, #56]	; (800f724 <prvGetNextExpireTime+0x44>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d101      	bne.n	800f6f6 <prvGetNextExpireTime+0x16>
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	e000      	b.n	800f6f8 <prvGetNextExpireTime+0x18>
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d105      	bne.n	800f710 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f704:	4b07      	ldr	r3, [pc, #28]	; (800f724 <prvGetNextExpireTime+0x44>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	68db      	ldr	r3, [r3, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	60fb      	str	r3, [r7, #12]
 800f70e:	e001      	b.n	800f714 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f710:	2300      	movs	r3, #0
 800f712:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f714:	68fb      	ldr	r3, [r7, #12]
}
 800f716:	4618      	mov	r0, r3
 800f718:	3714      	adds	r7, #20
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr
 800f722:	bf00      	nop
 800f724:	20000dc4 	.word	0x20000dc4

0800f728 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b084      	sub	sp, #16
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f730:	f7ff f980 	bl	800ea34 <xTaskGetTickCount>
 800f734:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f736:	4b0b      	ldr	r3, [pc, #44]	; (800f764 <prvSampleTimeNow+0x3c>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	68fa      	ldr	r2, [r7, #12]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d205      	bcs.n	800f74c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f740:	f000 f936 	bl	800f9b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2201      	movs	r2, #1
 800f748:	601a      	str	r2, [r3, #0]
 800f74a:	e002      	b.n	800f752 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f752:	4a04      	ldr	r2, [pc, #16]	; (800f764 <prvSampleTimeNow+0x3c>)
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f758:	68fb      	ldr	r3, [r7, #12]
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3710      	adds	r7, #16
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	20000dd4 	.word	0x20000dd4

0800f768 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b086      	sub	sp, #24
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	607a      	str	r2, [r7, #4]
 800f774:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f776:	2300      	movs	r3, #0
 800f778:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	68ba      	ldr	r2, [r7, #8]
 800f77e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	68fa      	ldr	r2, [r7, #12]
 800f784:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f786:	68ba      	ldr	r2, [r7, #8]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d812      	bhi.n	800f7b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	1ad2      	subs	r2, r2, r3
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	699b      	ldr	r3, [r3, #24]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d302      	bcc.n	800f7a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f79c:	2301      	movs	r3, #1
 800f79e:	617b      	str	r3, [r7, #20]
 800f7a0:	e01b      	b.n	800f7da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f7a2:	4b10      	ldr	r3, [pc, #64]	; (800f7e4 <prvInsertTimerInActiveList+0x7c>)
 800f7a4:	681a      	ldr	r2, [r3, #0]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	3304      	adds	r3, #4
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	4610      	mov	r0, r2
 800f7ae:	f7fd fe54 	bl	800d45a <vListInsert>
 800f7b2:	e012      	b.n	800f7da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d206      	bcs.n	800f7ca <prvInsertTimerInActiveList+0x62>
 800f7bc:	68ba      	ldr	r2, [r7, #8]
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d302      	bcc.n	800f7ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	617b      	str	r3, [r7, #20]
 800f7c8:	e007      	b.n	800f7da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7ca:	4b07      	ldr	r3, [pc, #28]	; (800f7e8 <prvInsertTimerInActiveList+0x80>)
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	3304      	adds	r3, #4
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	4610      	mov	r0, r2
 800f7d6:	f7fd fe40 	bl	800d45a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f7da:	697b      	ldr	r3, [r7, #20]
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3718      	adds	r7, #24
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	20000dc8 	.word	0x20000dc8
 800f7e8:	20000dc4 	.word	0x20000dc4

0800f7ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b08e      	sub	sp, #56	; 0x38
 800f7f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7f2:	e0ca      	b.n	800f98a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	da18      	bge.n	800f82c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f7fa:	1d3b      	adds	r3, r7, #4
 800f7fc:	3304      	adds	r3, #4
 800f7fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f802:	2b00      	cmp	r3, #0
 800f804:	d10a      	bne.n	800f81c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f80a:	f383 8811 	msr	BASEPRI, r3
 800f80e:	f3bf 8f6f 	isb	sy
 800f812:	f3bf 8f4f 	dsb	sy
 800f816:	61fb      	str	r3, [r7, #28]
}
 800f818:	bf00      	nop
 800f81a:	e7fe      	b.n	800f81a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f822:	6850      	ldr	r0, [r2, #4]
 800f824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f826:	6892      	ldr	r2, [r2, #8]
 800f828:	4611      	mov	r1, r2
 800f82a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	f2c0 80aa 	blt.w	800f988 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83a:	695b      	ldr	r3, [r3, #20]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d004      	beq.n	800f84a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f842:	3304      	adds	r3, #4
 800f844:	4618      	mov	r0, r3
 800f846:	f7fd fe41 	bl	800d4cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f84a:	463b      	mov	r3, r7
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7ff ff6b 	bl	800f728 <prvSampleTimeNow>
 800f852:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2b09      	cmp	r3, #9
 800f858:	f200 8097 	bhi.w	800f98a <prvProcessReceivedCommands+0x19e>
 800f85c:	a201      	add	r2, pc, #4	; (adr r2, 800f864 <prvProcessReceivedCommands+0x78>)
 800f85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f862:	bf00      	nop
 800f864:	0800f88d 	.word	0x0800f88d
 800f868:	0800f88d 	.word	0x0800f88d
 800f86c:	0800f88d 	.word	0x0800f88d
 800f870:	0800f901 	.word	0x0800f901
 800f874:	0800f915 	.word	0x0800f915
 800f878:	0800f95f 	.word	0x0800f95f
 800f87c:	0800f88d 	.word	0x0800f88d
 800f880:	0800f88d 	.word	0x0800f88d
 800f884:	0800f901 	.word	0x0800f901
 800f888:	0800f915 	.word	0x0800f915
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f88e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f892:	f043 0301 	orr.w	r3, r3, #1
 800f896:	b2da      	uxtb	r2, r3
 800f898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f89e:	68ba      	ldr	r2, [r7, #8]
 800f8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a2:	699b      	ldr	r3, [r3, #24]
 800f8a4:	18d1      	adds	r1, r2, r3
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8ac:	f7ff ff5c 	bl	800f768 <prvInsertTimerInActiveList>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d069      	beq.n	800f98a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b8:	6a1b      	ldr	r3, [r3, #32]
 800f8ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8c4:	f003 0304 	and.w	r3, r3, #4
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d05e      	beq.n	800f98a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f8cc:	68ba      	ldr	r2, [r7, #8]
 800f8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d0:	699b      	ldr	r3, [r3, #24]
 800f8d2:	441a      	add	r2, r3
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	9300      	str	r3, [sp, #0]
 800f8d8:	2300      	movs	r3, #0
 800f8da:	2100      	movs	r1, #0
 800f8dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8de:	f7ff fe05 	bl	800f4ec <xTimerGenericCommand>
 800f8e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f8e4:	6a3b      	ldr	r3, [r7, #32]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d14f      	bne.n	800f98a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ee:	f383 8811 	msr	BASEPRI, r3
 800f8f2:	f3bf 8f6f 	isb	sy
 800f8f6:	f3bf 8f4f 	dsb	sy
 800f8fa:	61bb      	str	r3, [r7, #24]
}
 800f8fc:	bf00      	nop
 800f8fe:	e7fe      	b.n	800f8fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f906:	f023 0301 	bic.w	r3, r3, #1
 800f90a:	b2da      	uxtb	r2, r3
 800f90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f90e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f912:	e03a      	b.n	800f98a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f91a:	f043 0301 	orr.w	r3, r3, #1
 800f91e:	b2da      	uxtb	r2, r3
 800f920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f926:	68ba      	ldr	r2, [r7, #8]
 800f928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92e:	699b      	ldr	r3, [r3, #24]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d10a      	bne.n	800f94a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f938:	f383 8811 	msr	BASEPRI, r3
 800f93c:	f3bf 8f6f 	isb	sy
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	617b      	str	r3, [r7, #20]
}
 800f946:	bf00      	nop
 800f948:	e7fe      	b.n	800f948 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f94c:	699a      	ldr	r2, [r3, #24]
 800f94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f950:	18d1      	adds	r1, r2, r3
 800f952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f958:	f7ff ff06 	bl	800f768 <prvInsertTimerInActiveList>
					break;
 800f95c:	e015      	b.n	800f98a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f964:	f003 0302 	and.w	r3, r3, #2
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d103      	bne.n	800f974 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f96c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f96e:	f000 fbdf 	bl	8010130 <vPortFree>
 800f972:	e00a      	b.n	800f98a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f97a:	f023 0301 	bic.w	r3, r3, #1
 800f97e:	b2da      	uxtb	r2, r3
 800f980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f986:	e000      	b.n	800f98a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f988:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f98a:	4b08      	ldr	r3, [pc, #32]	; (800f9ac <prvProcessReceivedCommands+0x1c0>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	1d39      	adds	r1, r7, #4
 800f990:	2200      	movs	r2, #0
 800f992:	4618      	mov	r0, r3
 800f994:	f7fe f974 	bl	800dc80 <xQueueReceive>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f47f af2a 	bne.w	800f7f4 <prvProcessReceivedCommands+0x8>
	}
}
 800f9a0:	bf00      	nop
 800f9a2:	bf00      	nop
 800f9a4:	3730      	adds	r7, #48	; 0x30
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	20000dcc 	.word	0x20000dcc

0800f9b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b088      	sub	sp, #32
 800f9b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9b6:	e048      	b.n	800fa4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9b8:	4b2d      	ldr	r3, [pc, #180]	; (800fa70 <prvSwitchTimerLists+0xc0>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	68db      	ldr	r3, [r3, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9c2:	4b2b      	ldr	r3, [pc, #172]	; (800fa70 <prvSwitchTimerLists+0xc0>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	68db      	ldr	r3, [r3, #12]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	3304      	adds	r3, #4
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fd fd7b 	bl	800d4cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	6a1b      	ldr	r3, [r3, #32]
 800f9da:	68f8      	ldr	r0, [r7, #12]
 800f9dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9e4:	f003 0304 	and.w	r3, r3, #4
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d02e      	beq.n	800fa4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	699b      	ldr	r3, [r3, #24]
 800f9f0:	693a      	ldr	r2, [r7, #16]
 800f9f2:	4413      	add	r3, r2
 800f9f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f9f6:	68ba      	ldr	r2, [r7, #8]
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d90e      	bls.n	800fa1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	68ba      	ldr	r2, [r7, #8]
 800fa02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	68fa      	ldr	r2, [r7, #12]
 800fa08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa0a:	4b19      	ldr	r3, [pc, #100]	; (800fa70 <prvSwitchTimerLists+0xc0>)
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	3304      	adds	r3, #4
 800fa12:	4619      	mov	r1, r3
 800fa14:	4610      	mov	r0, r2
 800fa16:	f7fd fd20 	bl	800d45a <vListInsert>
 800fa1a:	e016      	b.n	800fa4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	2300      	movs	r3, #0
 800fa22:	693a      	ldr	r2, [r7, #16]
 800fa24:	2100      	movs	r1, #0
 800fa26:	68f8      	ldr	r0, [r7, #12]
 800fa28:	f7ff fd60 	bl	800f4ec <xTimerGenericCommand>
 800fa2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d10a      	bne.n	800fa4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa38:	f383 8811 	msr	BASEPRI, r3
 800fa3c:	f3bf 8f6f 	isb	sy
 800fa40:	f3bf 8f4f 	dsb	sy
 800fa44:	603b      	str	r3, [r7, #0]
}
 800fa46:	bf00      	nop
 800fa48:	e7fe      	b.n	800fa48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa4a:	4b09      	ldr	r3, [pc, #36]	; (800fa70 <prvSwitchTimerLists+0xc0>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d1b1      	bne.n	800f9b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fa54:	4b06      	ldr	r3, [pc, #24]	; (800fa70 <prvSwitchTimerLists+0xc0>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fa5a:	4b06      	ldr	r3, [pc, #24]	; (800fa74 <prvSwitchTimerLists+0xc4>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	4a04      	ldr	r2, [pc, #16]	; (800fa70 <prvSwitchTimerLists+0xc0>)
 800fa60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fa62:	4a04      	ldr	r2, [pc, #16]	; (800fa74 <prvSwitchTimerLists+0xc4>)
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	6013      	str	r3, [r2, #0]
}
 800fa68:	bf00      	nop
 800fa6a:	3718      	adds	r7, #24
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	20000dc4 	.word	0x20000dc4
 800fa74:	20000dc8 	.word	0x20000dc8

0800fa78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fa7e:	f000 f969 	bl	800fd54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fa82:	4b15      	ldr	r3, [pc, #84]	; (800fad8 <prvCheckForValidListAndQueue+0x60>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d120      	bne.n	800facc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa8a:	4814      	ldr	r0, [pc, #80]	; (800fadc <prvCheckForValidListAndQueue+0x64>)
 800fa8c:	f7fd fc94 	bl	800d3b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa90:	4813      	ldr	r0, [pc, #76]	; (800fae0 <prvCheckForValidListAndQueue+0x68>)
 800fa92:	f7fd fc91 	bl	800d3b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa96:	4b13      	ldr	r3, [pc, #76]	; (800fae4 <prvCheckForValidListAndQueue+0x6c>)
 800fa98:	4a10      	ldr	r2, [pc, #64]	; (800fadc <prvCheckForValidListAndQueue+0x64>)
 800fa9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa9c:	4b12      	ldr	r3, [pc, #72]	; (800fae8 <prvCheckForValidListAndQueue+0x70>)
 800fa9e:	4a10      	ldr	r2, [pc, #64]	; (800fae0 <prvCheckForValidListAndQueue+0x68>)
 800faa0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800faa2:	2300      	movs	r3, #0
 800faa4:	9300      	str	r3, [sp, #0]
 800faa6:	4b11      	ldr	r3, [pc, #68]	; (800faec <prvCheckForValidListAndQueue+0x74>)
 800faa8:	4a11      	ldr	r2, [pc, #68]	; (800faf0 <prvCheckForValidListAndQueue+0x78>)
 800faaa:	2110      	movs	r1, #16
 800faac:	200a      	movs	r0, #10
 800faae:	f7fd fd9f 	bl	800d5f0 <xQueueGenericCreateStatic>
 800fab2:	4603      	mov	r3, r0
 800fab4:	4a08      	ldr	r2, [pc, #32]	; (800fad8 <prvCheckForValidListAndQueue+0x60>)
 800fab6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fab8:	4b07      	ldr	r3, [pc, #28]	; (800fad8 <prvCheckForValidListAndQueue+0x60>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d005      	beq.n	800facc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fac0:	4b05      	ldr	r3, [pc, #20]	; (800fad8 <prvCheckForValidListAndQueue+0x60>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	490b      	ldr	r1, [pc, #44]	; (800faf4 <prvCheckForValidListAndQueue+0x7c>)
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fe fc6e 	bl	800e3a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800facc:	f000 f972 	bl	800fdb4 <vPortExitCritical>
}
 800fad0:	bf00      	nop
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	20000dcc 	.word	0x20000dcc
 800fadc:	20000d9c 	.word	0x20000d9c
 800fae0:	20000db0 	.word	0x20000db0
 800fae4:	20000dc4 	.word	0x20000dc4
 800fae8:	20000dc8 	.word	0x20000dc8
 800faec:	20000e78 	.word	0x20000e78
 800faf0:	20000dd8 	.word	0x20000dd8
 800faf4:	08010ecc 	.word	0x08010ecc

0800faf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800faf8:	b480      	push	{r7}
 800fafa:	b085      	sub	sp, #20
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	60f8      	str	r0, [r7, #12]
 800fb00:	60b9      	str	r1, [r7, #8]
 800fb02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	3b04      	subs	r3, #4
 800fb08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fb10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	3b04      	subs	r3, #4
 800fb16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	f023 0201 	bic.w	r2, r3, #1
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	3b04      	subs	r3, #4
 800fb26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb28:	4a0c      	ldr	r2, [pc, #48]	; (800fb5c <pxPortInitialiseStack+0x64>)
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	3b14      	subs	r3, #20
 800fb32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	3b04      	subs	r3, #4
 800fb3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f06f 0202 	mvn.w	r2, #2
 800fb46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	3b20      	subs	r3, #32
 800fb4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3714      	adds	r7, #20
 800fb54:	46bd      	mov	sp, r7
 800fb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5a:	4770      	bx	lr
 800fb5c:	0800fb61 	.word	0x0800fb61

0800fb60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb60:	b480      	push	{r7}
 800fb62:	b085      	sub	sp, #20
 800fb64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb66:	2300      	movs	r3, #0
 800fb68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb6a:	4b12      	ldr	r3, [pc, #72]	; (800fbb4 <prvTaskExitError+0x54>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb72:	d00a      	beq.n	800fb8a <prvTaskExitError+0x2a>
	__asm volatile
 800fb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb78:	f383 8811 	msr	BASEPRI, r3
 800fb7c:	f3bf 8f6f 	isb	sy
 800fb80:	f3bf 8f4f 	dsb	sy
 800fb84:	60fb      	str	r3, [r7, #12]
}
 800fb86:	bf00      	nop
 800fb88:	e7fe      	b.n	800fb88 <prvTaskExitError+0x28>
	__asm volatile
 800fb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8e:	f383 8811 	msr	BASEPRI, r3
 800fb92:	f3bf 8f6f 	isb	sy
 800fb96:	f3bf 8f4f 	dsb	sy
 800fb9a:	60bb      	str	r3, [r7, #8]
}
 800fb9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb9e:	bf00      	nop
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d0fc      	beq.n	800fba0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fba6:	bf00      	nop
 800fba8:	bf00      	nop
 800fbaa:	3714      	adds	r7, #20
 800fbac:	46bd      	mov	sp, r7
 800fbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb2:	4770      	bx	lr
 800fbb4:	2000012c 	.word	0x2000012c
	...

0800fbc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fbc0:	4b07      	ldr	r3, [pc, #28]	; (800fbe0 <pxCurrentTCBConst2>)
 800fbc2:	6819      	ldr	r1, [r3, #0]
 800fbc4:	6808      	ldr	r0, [r1, #0]
 800fbc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbca:	f380 8809 	msr	PSP, r0
 800fbce:	f3bf 8f6f 	isb	sy
 800fbd2:	f04f 0000 	mov.w	r0, #0
 800fbd6:	f380 8811 	msr	BASEPRI, r0
 800fbda:	4770      	bx	lr
 800fbdc:	f3af 8000 	nop.w

0800fbe0 <pxCurrentTCBConst2>:
 800fbe0:	2000089c 	.word	0x2000089c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fbe4:	bf00      	nop
 800fbe6:	bf00      	nop

0800fbe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fbe8:	4808      	ldr	r0, [pc, #32]	; (800fc0c <prvPortStartFirstTask+0x24>)
 800fbea:	6800      	ldr	r0, [r0, #0]
 800fbec:	6800      	ldr	r0, [r0, #0]
 800fbee:	f380 8808 	msr	MSP, r0
 800fbf2:	f04f 0000 	mov.w	r0, #0
 800fbf6:	f380 8814 	msr	CONTROL, r0
 800fbfa:	b662      	cpsie	i
 800fbfc:	b661      	cpsie	f
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	f3bf 8f6f 	isb	sy
 800fc06:	df00      	svc	0
 800fc08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fc0a:	bf00      	nop
 800fc0c:	e000ed08 	.word	0xe000ed08

0800fc10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b086      	sub	sp, #24
 800fc14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fc16:	4b46      	ldr	r3, [pc, #280]	; (800fd30 <xPortStartScheduler+0x120>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	4a46      	ldr	r2, [pc, #280]	; (800fd34 <xPortStartScheduler+0x124>)
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	d10a      	bne.n	800fc36 <xPortStartScheduler+0x26>
	__asm volatile
 800fc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc24:	f383 8811 	msr	BASEPRI, r3
 800fc28:	f3bf 8f6f 	isb	sy
 800fc2c:	f3bf 8f4f 	dsb	sy
 800fc30:	613b      	str	r3, [r7, #16]
}
 800fc32:	bf00      	nop
 800fc34:	e7fe      	b.n	800fc34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fc36:	4b3e      	ldr	r3, [pc, #248]	; (800fd30 <xPortStartScheduler+0x120>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	4a3f      	ldr	r2, [pc, #252]	; (800fd38 <xPortStartScheduler+0x128>)
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	d10a      	bne.n	800fc56 <xPortStartScheduler+0x46>
	__asm volatile
 800fc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc44:	f383 8811 	msr	BASEPRI, r3
 800fc48:	f3bf 8f6f 	isb	sy
 800fc4c:	f3bf 8f4f 	dsb	sy
 800fc50:	60fb      	str	r3, [r7, #12]
}
 800fc52:	bf00      	nop
 800fc54:	e7fe      	b.n	800fc54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc56:	4b39      	ldr	r3, [pc, #228]	; (800fd3c <xPortStartScheduler+0x12c>)
 800fc58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	22ff      	movs	r2, #255	; 0xff
 800fc66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc70:	78fb      	ldrb	r3, [r7, #3]
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fc78:	b2da      	uxtb	r2, r3
 800fc7a:	4b31      	ldr	r3, [pc, #196]	; (800fd40 <xPortStartScheduler+0x130>)
 800fc7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc7e:	4b31      	ldr	r3, [pc, #196]	; (800fd44 <xPortStartScheduler+0x134>)
 800fc80:	2207      	movs	r2, #7
 800fc82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc84:	e009      	b.n	800fc9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fc86:	4b2f      	ldr	r3, [pc, #188]	; (800fd44 <xPortStartScheduler+0x134>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	3b01      	subs	r3, #1
 800fc8c:	4a2d      	ldr	r2, [pc, #180]	; (800fd44 <xPortStartScheduler+0x134>)
 800fc8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc90:	78fb      	ldrb	r3, [r7, #3]
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	005b      	lsls	r3, r3, #1
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc9a:	78fb      	ldrb	r3, [r7, #3]
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fca2:	2b80      	cmp	r3, #128	; 0x80
 800fca4:	d0ef      	beq.n	800fc86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fca6:	4b27      	ldr	r3, [pc, #156]	; (800fd44 <xPortStartScheduler+0x134>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f1c3 0307 	rsb	r3, r3, #7
 800fcae:	2b04      	cmp	r3, #4
 800fcb0:	d00a      	beq.n	800fcc8 <xPortStartScheduler+0xb8>
	__asm volatile
 800fcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb6:	f383 8811 	msr	BASEPRI, r3
 800fcba:	f3bf 8f6f 	isb	sy
 800fcbe:	f3bf 8f4f 	dsb	sy
 800fcc2:	60bb      	str	r3, [r7, #8]
}
 800fcc4:	bf00      	nop
 800fcc6:	e7fe      	b.n	800fcc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fcc8:	4b1e      	ldr	r3, [pc, #120]	; (800fd44 <xPortStartScheduler+0x134>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	021b      	lsls	r3, r3, #8
 800fcce:	4a1d      	ldr	r2, [pc, #116]	; (800fd44 <xPortStartScheduler+0x134>)
 800fcd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fcd2:	4b1c      	ldr	r3, [pc, #112]	; (800fd44 <xPortStartScheduler+0x134>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fcda:	4a1a      	ldr	r2, [pc, #104]	; (800fd44 <xPortStartScheduler+0x134>)
 800fcdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	b2da      	uxtb	r2, r3
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fce6:	4b18      	ldr	r3, [pc, #96]	; (800fd48 <xPortStartScheduler+0x138>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a17      	ldr	r2, [pc, #92]	; (800fd48 <xPortStartScheduler+0x138>)
 800fcec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fcf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fcf2:	4b15      	ldr	r3, [pc, #84]	; (800fd48 <xPortStartScheduler+0x138>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	4a14      	ldr	r2, [pc, #80]	; (800fd48 <xPortStartScheduler+0x138>)
 800fcf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fcfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fcfe:	f000 f8dd 	bl	800febc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fd02:	4b12      	ldr	r3, [pc, #72]	; (800fd4c <xPortStartScheduler+0x13c>)
 800fd04:	2200      	movs	r2, #0
 800fd06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fd08:	f000 f8fc 	bl	800ff04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fd0c:	4b10      	ldr	r3, [pc, #64]	; (800fd50 <xPortStartScheduler+0x140>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4a0f      	ldr	r2, [pc, #60]	; (800fd50 <xPortStartScheduler+0x140>)
 800fd12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fd16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fd18:	f7ff ff66 	bl	800fbe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fd1c:	f7fe ff54 	bl	800ebc8 <vTaskSwitchContext>
	prvTaskExitError();
 800fd20:	f7ff ff1e 	bl	800fb60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3718      	adds	r7, #24
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	e000ed00 	.word	0xe000ed00
 800fd34:	410fc271 	.word	0x410fc271
 800fd38:	410fc270 	.word	0x410fc270
 800fd3c:	e000e400 	.word	0xe000e400
 800fd40:	20000ec8 	.word	0x20000ec8
 800fd44:	20000ecc 	.word	0x20000ecc
 800fd48:	e000ed20 	.word	0xe000ed20
 800fd4c:	2000012c 	.word	0x2000012c
 800fd50:	e000ef34 	.word	0xe000ef34

0800fd54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd54:	b480      	push	{r7}
 800fd56:	b083      	sub	sp, #12
 800fd58:	af00      	add	r7, sp, #0
	__asm volatile
 800fd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd5e:	f383 8811 	msr	BASEPRI, r3
 800fd62:	f3bf 8f6f 	isb	sy
 800fd66:	f3bf 8f4f 	dsb	sy
 800fd6a:	607b      	str	r3, [r7, #4]
}
 800fd6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd6e:	4b0f      	ldr	r3, [pc, #60]	; (800fdac <vPortEnterCritical+0x58>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	3301      	adds	r3, #1
 800fd74:	4a0d      	ldr	r2, [pc, #52]	; (800fdac <vPortEnterCritical+0x58>)
 800fd76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd78:	4b0c      	ldr	r3, [pc, #48]	; (800fdac <vPortEnterCritical+0x58>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b01      	cmp	r3, #1
 800fd7e:	d10f      	bne.n	800fda0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd80:	4b0b      	ldr	r3, [pc, #44]	; (800fdb0 <vPortEnterCritical+0x5c>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	b2db      	uxtb	r3, r3
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d00a      	beq.n	800fda0 <vPortEnterCritical+0x4c>
	__asm volatile
 800fd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd8e:	f383 8811 	msr	BASEPRI, r3
 800fd92:	f3bf 8f6f 	isb	sy
 800fd96:	f3bf 8f4f 	dsb	sy
 800fd9a:	603b      	str	r3, [r7, #0]
}
 800fd9c:	bf00      	nop
 800fd9e:	e7fe      	b.n	800fd9e <vPortEnterCritical+0x4a>
	}
}
 800fda0:	bf00      	nop
 800fda2:	370c      	adds	r7, #12
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr
 800fdac:	2000012c 	.word	0x2000012c
 800fdb0:	e000ed04 	.word	0xe000ed04

0800fdb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b083      	sub	sp, #12
 800fdb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fdba:	4b12      	ldr	r3, [pc, #72]	; (800fe04 <vPortExitCritical+0x50>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d10a      	bne.n	800fdd8 <vPortExitCritical+0x24>
	__asm volatile
 800fdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc6:	f383 8811 	msr	BASEPRI, r3
 800fdca:	f3bf 8f6f 	isb	sy
 800fdce:	f3bf 8f4f 	dsb	sy
 800fdd2:	607b      	str	r3, [r7, #4]
}
 800fdd4:	bf00      	nop
 800fdd6:	e7fe      	b.n	800fdd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fdd8:	4b0a      	ldr	r3, [pc, #40]	; (800fe04 <vPortExitCritical+0x50>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	3b01      	subs	r3, #1
 800fdde:	4a09      	ldr	r2, [pc, #36]	; (800fe04 <vPortExitCritical+0x50>)
 800fde0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fde2:	4b08      	ldr	r3, [pc, #32]	; (800fe04 <vPortExitCritical+0x50>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d105      	bne.n	800fdf6 <vPortExitCritical+0x42>
 800fdea:	2300      	movs	r3, #0
 800fdec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	f383 8811 	msr	BASEPRI, r3
}
 800fdf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fdf6:	bf00      	nop
 800fdf8:	370c      	adds	r7, #12
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr
 800fe02:	bf00      	nop
 800fe04:	2000012c 	.word	0x2000012c
	...

0800fe10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fe10:	f3ef 8009 	mrs	r0, PSP
 800fe14:	f3bf 8f6f 	isb	sy
 800fe18:	4b15      	ldr	r3, [pc, #84]	; (800fe70 <pxCurrentTCBConst>)
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	f01e 0f10 	tst.w	lr, #16
 800fe20:	bf08      	it	eq
 800fe22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fe26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe2a:	6010      	str	r0, [r2, #0]
 800fe2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fe34:	f380 8811 	msr	BASEPRI, r0
 800fe38:	f3bf 8f4f 	dsb	sy
 800fe3c:	f3bf 8f6f 	isb	sy
 800fe40:	f7fe fec2 	bl	800ebc8 <vTaskSwitchContext>
 800fe44:	f04f 0000 	mov.w	r0, #0
 800fe48:	f380 8811 	msr	BASEPRI, r0
 800fe4c:	bc09      	pop	{r0, r3}
 800fe4e:	6819      	ldr	r1, [r3, #0]
 800fe50:	6808      	ldr	r0, [r1, #0]
 800fe52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe56:	f01e 0f10 	tst.w	lr, #16
 800fe5a:	bf08      	it	eq
 800fe5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe60:	f380 8809 	msr	PSP, r0
 800fe64:	f3bf 8f6f 	isb	sy
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	f3af 8000 	nop.w

0800fe70 <pxCurrentTCBConst>:
 800fe70:	2000089c 	.word	0x2000089c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe74:	bf00      	nop
 800fe76:	bf00      	nop

0800fe78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe82:	f383 8811 	msr	BASEPRI, r3
 800fe86:	f3bf 8f6f 	isb	sy
 800fe8a:	f3bf 8f4f 	dsb	sy
 800fe8e:	607b      	str	r3, [r7, #4]
}
 800fe90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe92:	f7fe fddf 	bl	800ea54 <xTaskIncrementTick>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d003      	beq.n	800fea4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe9c:	4b06      	ldr	r3, [pc, #24]	; (800feb8 <xPortSysTickHandler+0x40>)
 800fe9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fea2:	601a      	str	r2, [r3, #0]
 800fea4:	2300      	movs	r3, #0
 800fea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	f383 8811 	msr	BASEPRI, r3
}
 800feae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800feb0:	bf00      	nop
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}
 800feb8:	e000ed04 	.word	0xe000ed04

0800febc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800febc:	b480      	push	{r7}
 800febe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fec0:	4b0b      	ldr	r3, [pc, #44]	; (800fef0 <vPortSetupTimerInterrupt+0x34>)
 800fec2:	2200      	movs	r2, #0
 800fec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fec6:	4b0b      	ldr	r3, [pc, #44]	; (800fef4 <vPortSetupTimerInterrupt+0x38>)
 800fec8:	2200      	movs	r2, #0
 800feca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fecc:	4b0a      	ldr	r3, [pc, #40]	; (800fef8 <vPortSetupTimerInterrupt+0x3c>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4a0a      	ldr	r2, [pc, #40]	; (800fefc <vPortSetupTimerInterrupt+0x40>)
 800fed2:	fba2 2303 	umull	r2, r3, r2, r3
 800fed6:	099b      	lsrs	r3, r3, #6
 800fed8:	4a09      	ldr	r2, [pc, #36]	; (800ff00 <vPortSetupTimerInterrupt+0x44>)
 800feda:	3b01      	subs	r3, #1
 800fedc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fede:	4b04      	ldr	r3, [pc, #16]	; (800fef0 <vPortSetupTimerInterrupt+0x34>)
 800fee0:	2207      	movs	r2, #7
 800fee2:	601a      	str	r2, [r3, #0]
}
 800fee4:	bf00      	nop
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr
 800feee:	bf00      	nop
 800fef0:	e000e010 	.word	0xe000e010
 800fef4:	e000e018 	.word	0xe000e018
 800fef8:	20000010 	.word	0x20000010
 800fefc:	10624dd3 	.word	0x10624dd3
 800ff00:	e000e014 	.word	0xe000e014

0800ff04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ff04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ff14 <vPortEnableVFP+0x10>
 800ff08:	6801      	ldr	r1, [r0, #0]
 800ff0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ff0e:	6001      	str	r1, [r0, #0]
 800ff10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ff12:	bf00      	nop
 800ff14:	e000ed88 	.word	0xe000ed88

0800ff18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ff18:	b480      	push	{r7}
 800ff1a:	b085      	sub	sp, #20
 800ff1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ff1e:	f3ef 8305 	mrs	r3, IPSR
 800ff22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2b0f      	cmp	r3, #15
 800ff28:	d914      	bls.n	800ff54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ff2a:	4a17      	ldr	r2, [pc, #92]	; (800ff88 <vPortValidateInterruptPriority+0x70>)
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	4413      	add	r3, r2
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ff34:	4b15      	ldr	r3, [pc, #84]	; (800ff8c <vPortValidateInterruptPriority+0x74>)
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	7afa      	ldrb	r2, [r7, #11]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d20a      	bcs.n	800ff54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ff3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff42:	f383 8811 	msr	BASEPRI, r3
 800ff46:	f3bf 8f6f 	isb	sy
 800ff4a:	f3bf 8f4f 	dsb	sy
 800ff4e:	607b      	str	r3, [r7, #4]
}
 800ff50:	bf00      	nop
 800ff52:	e7fe      	b.n	800ff52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff54:	4b0e      	ldr	r3, [pc, #56]	; (800ff90 <vPortValidateInterruptPriority+0x78>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ff5c:	4b0d      	ldr	r3, [pc, #52]	; (800ff94 <vPortValidateInterruptPriority+0x7c>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	429a      	cmp	r2, r3
 800ff62:	d90a      	bls.n	800ff7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ff64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff68:	f383 8811 	msr	BASEPRI, r3
 800ff6c:	f3bf 8f6f 	isb	sy
 800ff70:	f3bf 8f4f 	dsb	sy
 800ff74:	603b      	str	r3, [r7, #0]
}
 800ff76:	bf00      	nop
 800ff78:	e7fe      	b.n	800ff78 <vPortValidateInterruptPriority+0x60>
	}
 800ff7a:	bf00      	nop
 800ff7c:	3714      	adds	r7, #20
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff84:	4770      	bx	lr
 800ff86:	bf00      	nop
 800ff88:	e000e3f0 	.word	0xe000e3f0
 800ff8c:	20000ec8 	.word	0x20000ec8
 800ff90:	e000ed0c 	.word	0xe000ed0c
 800ff94:	20000ecc 	.word	0x20000ecc

0800ff98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b08a      	sub	sp, #40	; 0x28
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ffa4:	f7fe fc9a 	bl	800e8dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ffa8:	4b5b      	ldr	r3, [pc, #364]	; (8010118 <pvPortMalloc+0x180>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d101      	bne.n	800ffb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ffb0:	f000 f920 	bl	80101f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ffb4:	4b59      	ldr	r3, [pc, #356]	; (801011c <pvPortMalloc+0x184>)
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	4013      	ands	r3, r2
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f040 8093 	bne.w	80100e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d01d      	beq.n	8010004 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ffc8:	2208      	movs	r2, #8
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	4413      	add	r3, r2
 800ffce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f003 0307 	and.w	r3, r3, #7
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d014      	beq.n	8010004 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f023 0307 	bic.w	r3, r3, #7
 800ffe0:	3308      	adds	r3, #8
 800ffe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f003 0307 	and.w	r3, r3, #7
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d00a      	beq.n	8010004 <pvPortMalloc+0x6c>
	__asm volatile
 800ffee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff2:	f383 8811 	msr	BASEPRI, r3
 800fff6:	f3bf 8f6f 	isb	sy
 800fffa:	f3bf 8f4f 	dsb	sy
 800fffe:	617b      	str	r3, [r7, #20]
}
 8010000:	bf00      	nop
 8010002:	e7fe      	b.n	8010002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d06e      	beq.n	80100e8 <pvPortMalloc+0x150>
 801000a:	4b45      	ldr	r3, [pc, #276]	; (8010120 <pvPortMalloc+0x188>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	429a      	cmp	r2, r3
 8010012:	d869      	bhi.n	80100e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010014:	4b43      	ldr	r3, [pc, #268]	; (8010124 <pvPortMalloc+0x18c>)
 8010016:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010018:	4b42      	ldr	r3, [pc, #264]	; (8010124 <pvPortMalloc+0x18c>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801001e:	e004      	b.n	801002a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010022:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801002a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801002c:	685b      	ldr	r3, [r3, #4]
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	429a      	cmp	r2, r3
 8010032:	d903      	bls.n	801003c <pvPortMalloc+0xa4>
 8010034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d1f1      	bne.n	8010020 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801003c:	4b36      	ldr	r3, [pc, #216]	; (8010118 <pvPortMalloc+0x180>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010042:	429a      	cmp	r2, r3
 8010044:	d050      	beq.n	80100e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010046:	6a3b      	ldr	r3, [r7, #32]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	2208      	movs	r2, #8
 801004c:	4413      	add	r3, r2
 801004e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	6a3b      	ldr	r3, [r7, #32]
 8010056:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005a:	685a      	ldr	r2, [r3, #4]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	1ad2      	subs	r2, r2, r3
 8010060:	2308      	movs	r3, #8
 8010062:	005b      	lsls	r3, r3, #1
 8010064:	429a      	cmp	r2, r3
 8010066:	d91f      	bls.n	80100a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	4413      	add	r3, r2
 801006e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	f003 0307 	and.w	r3, r3, #7
 8010076:	2b00      	cmp	r3, #0
 8010078:	d00a      	beq.n	8010090 <pvPortMalloc+0xf8>
	__asm volatile
 801007a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801007e:	f383 8811 	msr	BASEPRI, r3
 8010082:	f3bf 8f6f 	isb	sy
 8010086:	f3bf 8f4f 	dsb	sy
 801008a:	613b      	str	r3, [r7, #16]
}
 801008c:	bf00      	nop
 801008e:	e7fe      	b.n	801008e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010092:	685a      	ldr	r2, [r3, #4]
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	1ad2      	subs	r2, r2, r3
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801009c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80100a2:	69b8      	ldr	r0, [r7, #24]
 80100a4:	f000 f908 	bl	80102b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80100a8:	4b1d      	ldr	r3, [pc, #116]	; (8010120 <pvPortMalloc+0x188>)
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	1ad3      	subs	r3, r2, r3
 80100b2:	4a1b      	ldr	r2, [pc, #108]	; (8010120 <pvPortMalloc+0x188>)
 80100b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80100b6:	4b1a      	ldr	r3, [pc, #104]	; (8010120 <pvPortMalloc+0x188>)
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	4b1b      	ldr	r3, [pc, #108]	; (8010128 <pvPortMalloc+0x190>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d203      	bcs.n	80100ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80100c2:	4b17      	ldr	r3, [pc, #92]	; (8010120 <pvPortMalloc+0x188>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4a18      	ldr	r2, [pc, #96]	; (8010128 <pvPortMalloc+0x190>)
 80100c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80100ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100cc:	685a      	ldr	r2, [r3, #4]
 80100ce:	4b13      	ldr	r3, [pc, #76]	; (801011c <pvPortMalloc+0x184>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	431a      	orrs	r2, r3
 80100d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80100d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100da:	2200      	movs	r2, #0
 80100dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80100de:	4b13      	ldr	r3, [pc, #76]	; (801012c <pvPortMalloc+0x194>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	3301      	adds	r3, #1
 80100e4:	4a11      	ldr	r2, [pc, #68]	; (801012c <pvPortMalloc+0x194>)
 80100e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80100e8:	f7fe fc06 	bl	800e8f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80100ec:	69fb      	ldr	r3, [r7, #28]
 80100ee:	f003 0307 	and.w	r3, r3, #7
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d00a      	beq.n	801010c <pvPortMalloc+0x174>
	__asm volatile
 80100f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fa:	f383 8811 	msr	BASEPRI, r3
 80100fe:	f3bf 8f6f 	isb	sy
 8010102:	f3bf 8f4f 	dsb	sy
 8010106:	60fb      	str	r3, [r7, #12]
}
 8010108:	bf00      	nop
 801010a:	e7fe      	b.n	801010a <pvPortMalloc+0x172>
	return pvReturn;
 801010c:	69fb      	ldr	r3, [r7, #28]
}
 801010e:	4618      	mov	r0, r3
 8010110:	3728      	adds	r7, #40	; 0x28
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	20001ad8 	.word	0x20001ad8
 801011c:	20001aec 	.word	0x20001aec
 8010120:	20001adc 	.word	0x20001adc
 8010124:	20001ad0 	.word	0x20001ad0
 8010128:	20001ae0 	.word	0x20001ae0
 801012c:	20001ae4 	.word	0x20001ae4

08010130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b086      	sub	sp, #24
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d04d      	beq.n	80101de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010142:	2308      	movs	r3, #8
 8010144:	425b      	negs	r3, r3
 8010146:	697a      	ldr	r2, [r7, #20]
 8010148:	4413      	add	r3, r2
 801014a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	685a      	ldr	r2, [r3, #4]
 8010154:	4b24      	ldr	r3, [pc, #144]	; (80101e8 <vPortFree+0xb8>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4013      	ands	r3, r2
 801015a:	2b00      	cmp	r3, #0
 801015c:	d10a      	bne.n	8010174 <vPortFree+0x44>
	__asm volatile
 801015e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010162:	f383 8811 	msr	BASEPRI, r3
 8010166:	f3bf 8f6f 	isb	sy
 801016a:	f3bf 8f4f 	dsb	sy
 801016e:	60fb      	str	r3, [r7, #12]
}
 8010170:	bf00      	nop
 8010172:	e7fe      	b.n	8010172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d00a      	beq.n	8010192 <vPortFree+0x62>
	__asm volatile
 801017c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010180:	f383 8811 	msr	BASEPRI, r3
 8010184:	f3bf 8f6f 	isb	sy
 8010188:	f3bf 8f4f 	dsb	sy
 801018c:	60bb      	str	r3, [r7, #8]
}
 801018e:	bf00      	nop
 8010190:	e7fe      	b.n	8010190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	685a      	ldr	r2, [r3, #4]
 8010196:	4b14      	ldr	r3, [pc, #80]	; (80101e8 <vPortFree+0xb8>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	4013      	ands	r3, r2
 801019c:	2b00      	cmp	r3, #0
 801019e:	d01e      	beq.n	80101de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80101a0:	693b      	ldr	r3, [r7, #16]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d11a      	bne.n	80101de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	685a      	ldr	r2, [r3, #4]
 80101ac:	4b0e      	ldr	r3, [pc, #56]	; (80101e8 <vPortFree+0xb8>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	43db      	mvns	r3, r3
 80101b2:	401a      	ands	r2, r3
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80101b8:	f7fe fb90 	bl	800e8dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80101bc:	693b      	ldr	r3, [r7, #16]
 80101be:	685a      	ldr	r2, [r3, #4]
 80101c0:	4b0a      	ldr	r3, [pc, #40]	; (80101ec <vPortFree+0xbc>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4413      	add	r3, r2
 80101c6:	4a09      	ldr	r2, [pc, #36]	; (80101ec <vPortFree+0xbc>)
 80101c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80101ca:	6938      	ldr	r0, [r7, #16]
 80101cc:	f000 f874 	bl	80102b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80101d0:	4b07      	ldr	r3, [pc, #28]	; (80101f0 <vPortFree+0xc0>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	3301      	adds	r3, #1
 80101d6:	4a06      	ldr	r2, [pc, #24]	; (80101f0 <vPortFree+0xc0>)
 80101d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80101da:	f7fe fb8d 	bl	800e8f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80101de:	bf00      	nop
 80101e0:	3718      	adds	r7, #24
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
 80101e6:	bf00      	nop
 80101e8:	20001aec 	.word	0x20001aec
 80101ec:	20001adc 	.word	0x20001adc
 80101f0:	20001ae8 	.word	0x20001ae8

080101f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80101f4:	b480      	push	{r7}
 80101f6:	b085      	sub	sp, #20
 80101f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80101fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80101fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010200:	4b27      	ldr	r3, [pc, #156]	; (80102a0 <prvHeapInit+0xac>)
 8010202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f003 0307 	and.w	r3, r3, #7
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00c      	beq.n	8010228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	3307      	adds	r3, #7
 8010212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f023 0307 	bic.w	r3, r3, #7
 801021a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801021c:	68ba      	ldr	r2, [r7, #8]
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	4a1f      	ldr	r2, [pc, #124]	; (80102a0 <prvHeapInit+0xac>)
 8010224:	4413      	add	r3, r2
 8010226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801022c:	4a1d      	ldr	r2, [pc, #116]	; (80102a4 <prvHeapInit+0xb0>)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010232:	4b1c      	ldr	r3, [pc, #112]	; (80102a4 <prvHeapInit+0xb0>)
 8010234:	2200      	movs	r2, #0
 8010236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	68ba      	ldr	r2, [r7, #8]
 801023c:	4413      	add	r3, r2
 801023e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010240:	2208      	movs	r2, #8
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	1a9b      	subs	r3, r3, r2
 8010246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f023 0307 	bic.w	r3, r3, #7
 801024e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	4a15      	ldr	r2, [pc, #84]	; (80102a8 <prvHeapInit+0xb4>)
 8010254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010256:	4b14      	ldr	r3, [pc, #80]	; (80102a8 <prvHeapInit+0xb4>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2200      	movs	r2, #0
 801025c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801025e:	4b12      	ldr	r3, [pc, #72]	; (80102a8 <prvHeapInit+0xb4>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	2200      	movs	r2, #0
 8010264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	1ad2      	subs	r2, r2, r3
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010274:	4b0c      	ldr	r3, [pc, #48]	; (80102a8 <prvHeapInit+0xb4>)
 8010276:	681a      	ldr	r2, [r3, #0]
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	4a0a      	ldr	r2, [pc, #40]	; (80102ac <prvHeapInit+0xb8>)
 8010282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	685b      	ldr	r3, [r3, #4]
 8010288:	4a09      	ldr	r2, [pc, #36]	; (80102b0 <prvHeapInit+0xbc>)
 801028a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801028c:	4b09      	ldr	r3, [pc, #36]	; (80102b4 <prvHeapInit+0xc0>)
 801028e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010292:	601a      	str	r2, [r3, #0]
}
 8010294:	bf00      	nop
 8010296:	3714      	adds	r7, #20
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr
 80102a0:	20000ed0 	.word	0x20000ed0
 80102a4:	20001ad0 	.word	0x20001ad0
 80102a8:	20001ad8 	.word	0x20001ad8
 80102ac:	20001ae0 	.word	0x20001ae0
 80102b0:	20001adc 	.word	0x20001adc
 80102b4:	20001aec 	.word	0x20001aec

080102b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80102b8:	b480      	push	{r7}
 80102ba:	b085      	sub	sp, #20
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80102c0:	4b28      	ldr	r3, [pc, #160]	; (8010364 <prvInsertBlockIntoFreeList+0xac>)
 80102c2:	60fb      	str	r3, [r7, #12]
 80102c4:	e002      	b.n	80102cc <prvInsertBlockIntoFreeList+0x14>
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	60fb      	str	r3, [r7, #12]
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d8f7      	bhi.n	80102c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	68ba      	ldr	r2, [r7, #8]
 80102e0:	4413      	add	r3, r2
 80102e2:	687a      	ldr	r2, [r7, #4]
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d108      	bne.n	80102fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	685a      	ldr	r2, [r3, #4]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	441a      	add	r2, r3
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	68ba      	ldr	r2, [r7, #8]
 8010304:	441a      	add	r2, r3
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	429a      	cmp	r2, r3
 801030c:	d118      	bne.n	8010340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	681a      	ldr	r2, [r3, #0]
 8010312:	4b15      	ldr	r3, [pc, #84]	; (8010368 <prvInsertBlockIntoFreeList+0xb0>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	429a      	cmp	r2, r3
 8010318:	d00d      	beq.n	8010336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	685a      	ldr	r2, [r3, #4]
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	441a      	add	r2, r3
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	601a      	str	r2, [r3, #0]
 8010334:	e008      	b.n	8010348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010336:	4b0c      	ldr	r3, [pc, #48]	; (8010368 <prvInsertBlockIntoFreeList+0xb0>)
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	601a      	str	r2, [r3, #0]
 801033e:	e003      	b.n	8010348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010348:	68fa      	ldr	r2, [r7, #12]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	429a      	cmp	r2, r3
 801034e:	d002      	beq.n	8010356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	687a      	ldr	r2, [r7, #4]
 8010354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010356:	bf00      	nop
 8010358:	3714      	adds	r7, #20
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr
 8010362:	bf00      	nop
 8010364:	20001ad0 	.word	0x20001ad0
 8010368:	20001ad8 	.word	0x20001ad8

0801036c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010370:	2200      	movs	r2, #0
 8010372:	4912      	ldr	r1, [pc, #72]	; (80103bc <MX_USB_Device_Init+0x50>)
 8010374:	4812      	ldr	r0, [pc, #72]	; (80103c0 <MX_USB_Device_Init+0x54>)
 8010376:	f7fb fb19 	bl	800b9ac <USBD_Init>
 801037a:	4603      	mov	r3, r0
 801037c:	2b00      	cmp	r3, #0
 801037e:	d001      	beq.n	8010384 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010380:	f7f0 fde4 	bl	8000f4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010384:	490f      	ldr	r1, [pc, #60]	; (80103c4 <MX_USB_Device_Init+0x58>)
 8010386:	480e      	ldr	r0, [pc, #56]	; (80103c0 <MX_USB_Device_Init+0x54>)
 8010388:	f7fb fb40 	bl	800ba0c <USBD_RegisterClass>
 801038c:	4603      	mov	r3, r0
 801038e:	2b00      	cmp	r3, #0
 8010390:	d001      	beq.n	8010396 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010392:	f7f0 fddb 	bl	8000f4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010396:	490c      	ldr	r1, [pc, #48]	; (80103c8 <MX_USB_Device_Init+0x5c>)
 8010398:	4809      	ldr	r0, [pc, #36]	; (80103c0 <MX_USB_Device_Init+0x54>)
 801039a:	f7fb fa91 	bl	800b8c0 <USBD_CDC_RegisterInterface>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d001      	beq.n	80103a8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80103a4:	f7f0 fdd2 	bl	8000f4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80103a8:	4805      	ldr	r0, [pc, #20]	; (80103c0 <MX_USB_Device_Init+0x54>)
 80103aa:	f7fb fb56 	bl	800ba5a <USBD_Start>
 80103ae:	4603      	mov	r3, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d001      	beq.n	80103b8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80103b4:	f7f0 fdca 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80103b8:	bf00      	nop
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	20000144 	.word	0x20000144
 80103c0:	200020fc 	.word	0x200020fc
 80103c4:	20000028 	.word	0x20000028
 80103c8:	20000130 	.word	0x20000130

080103cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80103d0:	2200      	movs	r2, #0
 80103d2:	4905      	ldr	r1, [pc, #20]	; (80103e8 <CDC_Init_FS+0x1c>)
 80103d4:	4805      	ldr	r0, [pc, #20]	; (80103ec <CDC_Init_FS+0x20>)
 80103d6:	f7fb fa88 	bl	800b8ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80103da:	4905      	ldr	r1, [pc, #20]	; (80103f0 <CDC_Init_FS+0x24>)
 80103dc:	4803      	ldr	r0, [pc, #12]	; (80103ec <CDC_Init_FS+0x20>)
 80103de:	f7fb faa2 	bl	800b926 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80103e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	20002bcc 	.word	0x20002bcc
 80103ec:	200020fc 	.word	0x200020fc
 80103f0:	200023cc 	.word	0x200023cc

080103f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80103f4:	b480      	push	{r7}
 80103f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80103f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr

08010404 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010404:	b480      	push	{r7}
 8010406:	b083      	sub	sp, #12
 8010408:	af00      	add	r7, sp, #0
 801040a:	4603      	mov	r3, r0
 801040c:	6039      	str	r1, [r7, #0]
 801040e:	71fb      	strb	r3, [r7, #7]
 8010410:	4613      	mov	r3, r2
 8010412:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010414:	79fb      	ldrb	r3, [r7, #7]
 8010416:	2b23      	cmp	r3, #35	; 0x23
 8010418:	d84a      	bhi.n	80104b0 <CDC_Control_FS+0xac>
 801041a:	a201      	add	r2, pc, #4	; (adr r2, 8010420 <CDC_Control_FS+0x1c>)
 801041c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010420:	080104b1 	.word	0x080104b1
 8010424:	080104b1 	.word	0x080104b1
 8010428:	080104b1 	.word	0x080104b1
 801042c:	080104b1 	.word	0x080104b1
 8010430:	080104b1 	.word	0x080104b1
 8010434:	080104b1 	.word	0x080104b1
 8010438:	080104b1 	.word	0x080104b1
 801043c:	080104b1 	.word	0x080104b1
 8010440:	080104b1 	.word	0x080104b1
 8010444:	080104b1 	.word	0x080104b1
 8010448:	080104b1 	.word	0x080104b1
 801044c:	080104b1 	.word	0x080104b1
 8010450:	080104b1 	.word	0x080104b1
 8010454:	080104b1 	.word	0x080104b1
 8010458:	080104b1 	.word	0x080104b1
 801045c:	080104b1 	.word	0x080104b1
 8010460:	080104b1 	.word	0x080104b1
 8010464:	080104b1 	.word	0x080104b1
 8010468:	080104b1 	.word	0x080104b1
 801046c:	080104b1 	.word	0x080104b1
 8010470:	080104b1 	.word	0x080104b1
 8010474:	080104b1 	.word	0x080104b1
 8010478:	080104b1 	.word	0x080104b1
 801047c:	080104b1 	.word	0x080104b1
 8010480:	080104b1 	.word	0x080104b1
 8010484:	080104b1 	.word	0x080104b1
 8010488:	080104b1 	.word	0x080104b1
 801048c:	080104b1 	.word	0x080104b1
 8010490:	080104b1 	.word	0x080104b1
 8010494:	080104b1 	.word	0x080104b1
 8010498:	080104b1 	.word	0x080104b1
 801049c:	080104b1 	.word	0x080104b1
 80104a0:	080104b1 	.word	0x080104b1
 80104a4:	080104b1 	.word	0x080104b1
 80104a8:	080104b1 	.word	0x080104b1
 80104ac:	080104b1 	.word	0x080104b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80104b0:	bf00      	nop
  }

  return (USBD_OK);
 80104b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	370c      	adds	r7, #12
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr

080104c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80104ca:	6879      	ldr	r1, [r7, #4]
 80104cc:	4805      	ldr	r0, [pc, #20]	; (80104e4 <CDC_Receive_FS+0x24>)
 80104ce:	f7fb fa2a 	bl	800b926 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80104d2:	4804      	ldr	r0, [pc, #16]	; (80104e4 <CDC_Receive_FS+0x24>)
 80104d4:	f7fb fa40 	bl	800b958 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80104d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3708      	adds	r7, #8
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	200020fc 	.word	0x200020fc

080104e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b087      	sub	sp, #28
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	60f8      	str	r0, [r7, #12]
 80104f0:	60b9      	str	r1, [r7, #8]
 80104f2:	4613      	mov	r3, r2
 80104f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80104f6:	2300      	movs	r3, #0
 80104f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80104fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	371c      	adds	r7, #28
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr
	...

0801050c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801050c:	b480      	push	{r7}
 801050e:	b083      	sub	sp, #12
 8010510:	af00      	add	r7, sp, #0
 8010512:	4603      	mov	r3, r0
 8010514:	6039      	str	r1, [r7, #0]
 8010516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	2212      	movs	r2, #18
 801051c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801051e:	4b03      	ldr	r3, [pc, #12]	; (801052c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010520:	4618      	mov	r0, r3
 8010522:	370c      	adds	r7, #12
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr
 801052c:	20000164 	.word	0x20000164

08010530 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010530:	b480      	push	{r7}
 8010532:	b083      	sub	sp, #12
 8010534:	af00      	add	r7, sp, #0
 8010536:	4603      	mov	r3, r0
 8010538:	6039      	str	r1, [r7, #0]
 801053a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	2204      	movs	r2, #4
 8010540:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010542:	4b03      	ldr	r3, [pc, #12]	; (8010550 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8010544:	4618      	mov	r0, r3
 8010546:	370c      	adds	r7, #12
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr
 8010550:	20000178 	.word	0x20000178

08010554 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	4603      	mov	r3, r0
 801055c:	6039      	str	r1, [r7, #0]
 801055e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010560:	79fb      	ldrb	r3, [r7, #7]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d105      	bne.n	8010572 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010566:	683a      	ldr	r2, [r7, #0]
 8010568:	4907      	ldr	r1, [pc, #28]	; (8010588 <USBD_CDC_ProductStrDescriptor+0x34>)
 801056a:	4808      	ldr	r0, [pc, #32]	; (801058c <USBD_CDC_ProductStrDescriptor+0x38>)
 801056c:	f7fc fa5d 	bl	800ca2a <USBD_GetString>
 8010570:	e004      	b.n	801057c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010572:	683a      	ldr	r2, [r7, #0]
 8010574:	4904      	ldr	r1, [pc, #16]	; (8010588 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010576:	4805      	ldr	r0, [pc, #20]	; (801058c <USBD_CDC_ProductStrDescriptor+0x38>)
 8010578:	f7fc fa57 	bl	800ca2a <USBD_GetString>
  }
  return USBD_StrDesc;
 801057c:	4b02      	ldr	r3, [pc, #8]	; (8010588 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801057e:	4618      	mov	r0, r3
 8010580:	3708      	adds	r7, #8
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	200033cc 	.word	0x200033cc
 801058c:	08010ed4 	.word	0x08010ed4

08010590 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	4603      	mov	r3, r0
 8010598:	6039      	str	r1, [r7, #0]
 801059a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801059c:	683a      	ldr	r2, [r7, #0]
 801059e:	4904      	ldr	r1, [pc, #16]	; (80105b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80105a0:	4804      	ldr	r0, [pc, #16]	; (80105b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80105a2:	f7fc fa42 	bl	800ca2a <USBD_GetString>
  return USBD_StrDesc;
 80105a6:	4b02      	ldr	r3, [pc, #8]	; (80105b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}
 80105b0:	200033cc 	.word	0x200033cc
 80105b4:	08010eec 	.word	0x08010eec

080105b8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	4603      	mov	r3, r0
 80105c0:	6039      	str	r1, [r7, #0]
 80105c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	221a      	movs	r2, #26
 80105c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80105ca:	f000 f843 	bl	8010654 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80105ce:	4b02      	ldr	r3, [pc, #8]	; (80105d8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	2000017c 	.word	0x2000017c

080105dc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	4603      	mov	r3, r0
 80105e4:	6039      	str	r1, [r7, #0]
 80105e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80105e8:	79fb      	ldrb	r3, [r7, #7]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d105      	bne.n	80105fa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80105ee:	683a      	ldr	r2, [r7, #0]
 80105f0:	4907      	ldr	r1, [pc, #28]	; (8010610 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80105f2:	4808      	ldr	r0, [pc, #32]	; (8010614 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80105f4:	f7fc fa19 	bl	800ca2a <USBD_GetString>
 80105f8:	e004      	b.n	8010604 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80105fa:	683a      	ldr	r2, [r7, #0]
 80105fc:	4904      	ldr	r1, [pc, #16]	; (8010610 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80105fe:	4805      	ldr	r0, [pc, #20]	; (8010614 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010600:	f7fc fa13 	bl	800ca2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010604:	4b02      	ldr	r3, [pc, #8]	; (8010610 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8010606:	4618      	mov	r0, r3
 8010608:	3708      	adds	r7, #8
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	200033cc 	.word	0x200033cc
 8010614:	08010f00 	.word	0x08010f00

08010618 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	4603      	mov	r3, r0
 8010620:	6039      	str	r1, [r7, #0]
 8010622:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010624:	79fb      	ldrb	r3, [r7, #7]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d105      	bne.n	8010636 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801062a:	683a      	ldr	r2, [r7, #0]
 801062c:	4907      	ldr	r1, [pc, #28]	; (801064c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801062e:	4808      	ldr	r0, [pc, #32]	; (8010650 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010630:	f7fc f9fb 	bl	800ca2a <USBD_GetString>
 8010634:	e004      	b.n	8010640 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010636:	683a      	ldr	r2, [r7, #0]
 8010638:	4904      	ldr	r1, [pc, #16]	; (801064c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801063a:	4805      	ldr	r0, [pc, #20]	; (8010650 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801063c:	f7fc f9f5 	bl	800ca2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010640:	4b02      	ldr	r3, [pc, #8]	; (801064c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8010642:	4618      	mov	r0, r3
 8010644:	3708      	adds	r7, #8
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	200033cc 	.word	0x200033cc
 8010650:	08010f0c 	.word	0x08010f0c

08010654 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b084      	sub	sp, #16
 8010658:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801065a:	4b0f      	ldr	r3, [pc, #60]	; (8010698 <Get_SerialNum+0x44>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010660:	4b0e      	ldr	r3, [pc, #56]	; (801069c <Get_SerialNum+0x48>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010666:	4b0e      	ldr	r3, [pc, #56]	; (80106a0 <Get_SerialNum+0x4c>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801066c:	68fa      	ldr	r2, [r7, #12]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4413      	add	r3, r2
 8010672:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d009      	beq.n	801068e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801067a:	2208      	movs	r2, #8
 801067c:	4909      	ldr	r1, [pc, #36]	; (80106a4 <Get_SerialNum+0x50>)
 801067e:	68f8      	ldr	r0, [r7, #12]
 8010680:	f000 f814 	bl	80106ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010684:	2204      	movs	r2, #4
 8010686:	4908      	ldr	r1, [pc, #32]	; (80106a8 <Get_SerialNum+0x54>)
 8010688:	68b8      	ldr	r0, [r7, #8]
 801068a:	f000 f80f 	bl	80106ac <IntToUnicode>
  }
}
 801068e:	bf00      	nop
 8010690:	3710      	adds	r7, #16
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	1fff7590 	.word	0x1fff7590
 801069c:	1fff7594 	.word	0x1fff7594
 80106a0:	1fff7598 	.word	0x1fff7598
 80106a4:	2000017e 	.word	0x2000017e
 80106a8:	2000018e 	.word	0x2000018e

080106ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b087      	sub	sp, #28
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	4613      	mov	r3, r2
 80106b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80106ba:	2300      	movs	r3, #0
 80106bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80106be:	2300      	movs	r3, #0
 80106c0:	75fb      	strb	r3, [r7, #23]
 80106c2:	e027      	b.n	8010714 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	0f1b      	lsrs	r3, r3, #28
 80106c8:	2b09      	cmp	r3, #9
 80106ca:	d80b      	bhi.n	80106e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	0f1b      	lsrs	r3, r3, #28
 80106d0:	b2da      	uxtb	r2, r3
 80106d2:	7dfb      	ldrb	r3, [r7, #23]
 80106d4:	005b      	lsls	r3, r3, #1
 80106d6:	4619      	mov	r1, r3
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	440b      	add	r3, r1
 80106dc:	3230      	adds	r2, #48	; 0x30
 80106de:	b2d2      	uxtb	r2, r2
 80106e0:	701a      	strb	r2, [r3, #0]
 80106e2:	e00a      	b.n	80106fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	0f1b      	lsrs	r3, r3, #28
 80106e8:	b2da      	uxtb	r2, r3
 80106ea:	7dfb      	ldrb	r3, [r7, #23]
 80106ec:	005b      	lsls	r3, r3, #1
 80106ee:	4619      	mov	r1, r3
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	440b      	add	r3, r1
 80106f4:	3237      	adds	r2, #55	; 0x37
 80106f6:	b2d2      	uxtb	r2, r2
 80106f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	011b      	lsls	r3, r3, #4
 80106fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010700:	7dfb      	ldrb	r3, [r7, #23]
 8010702:	005b      	lsls	r3, r3, #1
 8010704:	3301      	adds	r3, #1
 8010706:	68ba      	ldr	r2, [r7, #8]
 8010708:	4413      	add	r3, r2
 801070a:	2200      	movs	r2, #0
 801070c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801070e:	7dfb      	ldrb	r3, [r7, #23]
 8010710:	3301      	adds	r3, #1
 8010712:	75fb      	strb	r3, [r7, #23]
 8010714:	7dfa      	ldrb	r2, [r7, #23]
 8010716:	79fb      	ldrb	r3, [r7, #7]
 8010718:	429a      	cmp	r2, r3
 801071a:	d3d3      	bcc.n	80106c4 <IntToUnicode+0x18>
  }
}
 801071c:	bf00      	nop
 801071e:	bf00      	nop
 8010720:	371c      	adds	r7, #28
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr

0801072a <LL_AHB2_GRP1_EnableClock>:
{
 801072a:	b480      	push	{r7}
 801072c:	b085      	sub	sp, #20
 801072e:	af00      	add	r7, sp, #0
 8010730:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8010732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	4313      	orrs	r3, r2
 8010740:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8010742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	4013      	ands	r3, r2
 801074c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801074e:	68fb      	ldr	r3, [r7, #12]
}
 8010750:	bf00      	nop
 8010752:	3714      	adds	r7, #20
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <LL_APB1_GRP1_EnableClock>:
{
 801075c:	b480      	push	{r7}
 801075e:	b085      	sub	sp, #20
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8010764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010768:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801076a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4313      	orrs	r3, r2
 8010772:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8010774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010778:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	4013      	ands	r3, r2
 801077e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010780:	68fb      	ldr	r3, [r7, #12]
}
 8010782:	bf00      	nop
 8010784:	3714      	adds	r7, #20
 8010786:	46bd      	mov	sp, r7
 8010788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078c:	4770      	bx	lr
	...

08010790 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b088      	sub	sp, #32
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010798:	f107 030c 	add.w	r3, r7, #12
 801079c:	2200      	movs	r2, #0
 801079e:	601a      	str	r2, [r3, #0]
 80107a0:	605a      	str	r2, [r3, #4]
 80107a2:	609a      	str	r2, [r3, #8]
 80107a4:	60da      	str	r2, [r3, #12]
 80107a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	4a1d      	ldr	r2, [pc, #116]	; (8010824 <HAL_PCD_MspInit+0x94>)
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d134      	bne.n	801081c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80107b2:	2001      	movs	r0, #1
 80107b4:	f7ff ffb9 	bl	801072a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80107b8:	2004      	movs	r0, #4
 80107ba:	f7ff ffb6 	bl	801072a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    PC9     ------> USB_NOE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80107be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80107c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107c4:	2302      	movs	r3, #2
 80107c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107c8:	2300      	movs	r3, #0
 80107ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107cc:	2300      	movs	r3, #0
 80107ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80107d0:	230a      	movs	r3, #10
 80107d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80107d4:	f107 030c 	add.w	r3, r7, #12
 80107d8:	4619      	mov	r1, r3
 80107da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80107de:	f7f2 f82d 	bl	800283c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80107e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107e8:	2302      	movs	r3, #2
 80107ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107ec:	2300      	movs	r3, #0
 80107ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107f0:	2300      	movs	r3, #0
 80107f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80107f4:	230a      	movs	r3, #10
 80107f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80107f8:	f107 030c 	add.w	r3, r7, #12
 80107fc:	4619      	mov	r1, r3
 80107fe:	480a      	ldr	r0, [pc, #40]	; (8010828 <HAL_PCD_MspInit+0x98>)
 8010800:	f7f2 f81c 	bl	800283c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010804:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8010808:	f7ff ffa8 	bl	801075c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801080c:	2200      	movs	r2, #0
 801080e:	2105      	movs	r1, #5
 8010810:	2014      	movs	r0, #20
 8010812:	f7f1 ffeb 	bl	80027ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010816:	2014      	movs	r0, #20
 8010818:	f7f2 f802 	bl	8002820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801081c:	bf00      	nop
 801081e:	3720      	adds	r7, #32
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	40006800 	.word	0x40006800
 8010828:	48000800 	.word	0x48000800

0801082c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8010840:	4619      	mov	r1, r3
 8010842:	4610      	mov	r0, r2
 8010844:	f7fb f954 	bl	800baf0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010848:	bf00      	nop
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	460b      	mov	r3, r1
 801085a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8010862:	78fa      	ldrb	r2, [r7, #3]
 8010864:	6879      	ldr	r1, [r7, #4]
 8010866:	4613      	mov	r3, r2
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	4413      	add	r3, r2
 801086c:	00db      	lsls	r3, r3, #3
 801086e:	440b      	add	r3, r1
 8010870:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8010874:	681a      	ldr	r2, [r3, #0]
 8010876:	78fb      	ldrb	r3, [r7, #3]
 8010878:	4619      	mov	r1, r3
 801087a:	f7fb f98e 	bl	800bb9a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801087e:	bf00      	nop
 8010880:	3708      	adds	r7, #8
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010886:	b580      	push	{r7, lr}
 8010888:	b082      	sub	sp, #8
 801088a:	af00      	add	r7, sp, #0
 801088c:	6078      	str	r0, [r7, #4]
 801088e:	460b      	mov	r3, r1
 8010890:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8010898:	78fa      	ldrb	r2, [r7, #3]
 801089a:	6879      	ldr	r1, [r7, #4]
 801089c:	4613      	mov	r3, r2
 801089e:	009b      	lsls	r3, r3, #2
 80108a0:	4413      	add	r3, r2
 80108a2:	00db      	lsls	r3, r3, #3
 80108a4:	440b      	add	r3, r1
 80108a6:	333c      	adds	r3, #60	; 0x3c
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	78fb      	ldrb	r3, [r7, #3]
 80108ac:	4619      	mov	r1, r3
 80108ae:	f7fb f9d7 	bl	800bc60 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80108b2:	bf00      	nop
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}

080108ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b082      	sub	sp, #8
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80108c8:	4618      	mov	r0, r3
 80108ca:	f7fb faeb 	bl	800bea4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80108ce:	bf00      	nop
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b084      	sub	sp, #16
 80108da:	af00      	add	r7, sp, #0
 80108dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80108de:	2301      	movs	r3, #1
 80108e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	689b      	ldr	r3, [r3, #8]
 80108e6:	2b02      	cmp	r3, #2
 80108e8:	d001      	beq.n	80108ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80108ea:	f7f0 fb2f 	bl	8000f4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80108f4:	7bfa      	ldrb	r2, [r7, #15]
 80108f6:	4611      	mov	r1, r2
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fb fa95 	bl	800be28 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8010904:	4618      	mov	r0, r3
 8010906:	f7fb fa41 	bl	800bd8c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801090a:	bf00      	nop
 801090c:	3710      	adds	r7, #16
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
	...

08010914 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8010922:	4618      	mov	r0, r3
 8010924:	f7fb fa90 	bl	800be48 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	699b      	ldr	r3, [r3, #24]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d005      	beq.n	801093c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010930:	4b04      	ldr	r3, [pc, #16]	; (8010944 <HAL_PCD_SuspendCallback+0x30>)
 8010932:	691b      	ldr	r3, [r3, #16]
 8010934:	4a03      	ldr	r2, [pc, #12]	; (8010944 <HAL_PCD_SuspendCallback+0x30>)
 8010936:	f043 0306 	orr.w	r3, r3, #6
 801093a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801093c:	bf00      	nop
 801093e:	3708      	adds	r7, #8
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	e000ed00 	.word	0xe000ed00

08010948 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b082      	sub	sp, #8
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	699b      	ldr	r3, [r3, #24]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d007      	beq.n	8010968 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010958:	4b08      	ldr	r3, [pc, #32]	; (801097c <HAL_PCD_ResumeCallback+0x34>)
 801095a:	691b      	ldr	r3, [r3, #16]
 801095c:	4a07      	ldr	r2, [pc, #28]	; (801097c <HAL_PCD_ResumeCallback+0x34>)
 801095e:	f023 0306 	bic.w	r3, r3, #6
 8010962:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010964:	f000 f9fc 	bl	8010d60 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801096e:	4618      	mov	r0, r3
 8010970:	f7fb fa80 	bl	800be74 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010974:	bf00      	nop
 8010976:	3708      	adds	r7, #8
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}
 801097c:	e000ed00 	.word	0xe000ed00

08010980 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010988:	4a2c      	ldr	r2, [pc, #176]	; (8010a3c <USBD_LL_Init+0xbc>)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4a2a      	ldr	r2, [pc, #168]	; (8010a3c <USBD_LL_Init+0xbc>)
 8010994:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8010998:	f7f4 fb26 	bl	8004fe8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 801099c:	4b27      	ldr	r3, [pc, #156]	; (8010a3c <USBD_LL_Init+0xbc>)
 801099e:	4a28      	ldr	r2, [pc, #160]	; (8010a40 <USBD_LL_Init+0xc0>)
 80109a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80109a2:	4b26      	ldr	r3, [pc, #152]	; (8010a3c <USBD_LL_Init+0xbc>)
 80109a4:	2208      	movs	r2, #8
 80109a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80109a8:	4b24      	ldr	r3, [pc, #144]	; (8010a3c <USBD_LL_Init+0xbc>)
 80109aa:	2202      	movs	r2, #2
 80109ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80109ae:	4b23      	ldr	r3, [pc, #140]	; (8010a3c <USBD_LL_Init+0xbc>)
 80109b0:	2202      	movs	r2, #2
 80109b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80109b4:	4b21      	ldr	r3, [pc, #132]	; (8010a3c <USBD_LL_Init+0xbc>)
 80109b6:	2200      	movs	r2, #0
 80109b8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80109ba:	4b20      	ldr	r3, [pc, #128]	; (8010a3c <USBD_LL_Init+0xbc>)
 80109bc:	2200      	movs	r2, #0
 80109be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80109c0:	4b1e      	ldr	r3, [pc, #120]	; (8010a3c <USBD_LL_Init+0xbc>)
 80109c2:	2200      	movs	r2, #0
 80109c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80109c6:	4b1d      	ldr	r3, [pc, #116]	; (8010a3c <USBD_LL_Init+0xbc>)
 80109c8:	2200      	movs	r2, #0
 80109ca:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80109cc:	481b      	ldr	r0, [pc, #108]	; (8010a3c <USBD_LL_Init+0xbc>)
 80109ce:	f7f2 fdb9 	bl	8003544 <HAL_PCD_Init>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d001      	beq.n	80109dc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80109d8:	f7f0 fab8 	bl	8000f4c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80109e2:	2318      	movs	r3, #24
 80109e4:	2200      	movs	r2, #0
 80109e6:	2100      	movs	r1, #0
 80109e8:	f7f4 fa72 	bl	8004ed0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80109f2:	2358      	movs	r3, #88	; 0x58
 80109f4:	2200      	movs	r2, #0
 80109f6:	2180      	movs	r1, #128	; 0x80
 80109f8:	f7f4 fa6a 	bl	8004ed0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a02:	23c0      	movs	r3, #192	; 0xc0
 8010a04:	2200      	movs	r2, #0
 8010a06:	2181      	movs	r1, #129	; 0x81
 8010a08:	f7f4 fa62 	bl	8004ed0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8010a16:	2200      	movs	r2, #0
 8010a18:	2101      	movs	r1, #1
 8010a1a:	f7f4 fa59 	bl	8004ed0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a28:	2200      	movs	r2, #0
 8010a2a:	2182      	movs	r1, #130	; 0x82
 8010a2c:	f7f4 fa50 	bl	8004ed0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010a30:	2300      	movs	r3, #0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3708      	adds	r7, #8
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	200035cc 	.word	0x200035cc
 8010a40:	40006800 	.word	0x40006800

08010a44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a50:	2300      	movs	r3, #0
 8010a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7f2 fe57 	bl	800370e <HAL_PCD_Start>
 8010a60:	4603      	mov	r3, r0
 8010a62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a64:	7bfb      	ldrb	r3, [r7, #15]
 8010a66:	4618      	mov	r0, r3
 8010a68:	f000 f980 	bl	8010d6c <USBD_Get_USB_Status>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a70:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3710      	adds	r7, #16
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}

08010a7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010a7a:	b580      	push	{r7, lr}
 8010a7c:	b084      	sub	sp, #16
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
 8010a82:	4608      	mov	r0, r1
 8010a84:	4611      	mov	r1, r2
 8010a86:	461a      	mov	r2, r3
 8010a88:	4603      	mov	r3, r0
 8010a8a:	70fb      	strb	r3, [r7, #3]
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	70bb      	strb	r3, [r7, #2]
 8010a90:	4613      	mov	r3, r2
 8010a92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a94:	2300      	movs	r3, #0
 8010a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010aa2:	78bb      	ldrb	r3, [r7, #2]
 8010aa4:	883a      	ldrh	r2, [r7, #0]
 8010aa6:	78f9      	ldrb	r1, [r7, #3]
 8010aa8:	f7f2 ff9f 	bl	80039ea <HAL_PCD_EP_Open>
 8010aac:	4603      	mov	r3, r0
 8010aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ab0:	7bfb      	ldrb	r3, [r7, #15]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f000 f95a 	bl	8010d6c <USBD_Get_USB_Status>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}

08010ac6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ac6:	b580      	push	{r7, lr}
 8010ac8:	b084      	sub	sp, #16
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	460b      	mov	r3, r1
 8010ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010ae0:	78fa      	ldrb	r2, [r7, #3]
 8010ae2:	4611      	mov	r1, r2
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7f2 ffe6 	bl	8003ab6 <HAL_PCD_EP_Close>
 8010aea:	4603      	mov	r3, r0
 8010aec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010aee:	7bfb      	ldrb	r3, [r7, #15]
 8010af0:	4618      	mov	r0, r3
 8010af2:	f000 f93b 	bl	8010d6c <USBD_Get_USB_Status>
 8010af6:	4603      	mov	r3, r0
 8010af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3710      	adds	r7, #16
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	460b      	mov	r3, r1
 8010b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b10:	2300      	movs	r3, #0
 8010b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b14:	2300      	movs	r3, #0
 8010b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b1e:	78fa      	ldrb	r2, [r7, #3]
 8010b20:	4611      	mov	r1, r2
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7f3 f8a7 	bl	8003c76 <HAL_PCD_EP_SetStall>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b2c:	7bfb      	ldrb	r3, [r7, #15]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f000 f91c 	bl	8010d6c <USBD_Get_USB_Status>
 8010b34:	4603      	mov	r3, r0
 8010b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3710      	adds	r7, #16
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b084      	sub	sp, #16
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
 8010b4a:	460b      	mov	r3, r1
 8010b4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b52:	2300      	movs	r3, #0
 8010b54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b5c:	78fa      	ldrb	r2, [r7, #3]
 8010b5e:	4611      	mov	r1, r2
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7f3 f8da 	bl	8003d1a <HAL_PCD_EP_ClrStall>
 8010b66:	4603      	mov	r3, r0
 8010b68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b6a:	7bfb      	ldrb	r3, [r7, #15]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f000 f8fd 	bl	8010d6c <USBD_Get_USB_Status>
 8010b72:	4603      	mov	r3, r0
 8010b74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b76:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3710      	adds	r7, #16
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}

08010b80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b80:	b480      	push	{r7}
 8010b82:	b085      	sub	sp, #20
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	460b      	mov	r3, r1
 8010b8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	da0c      	bge.n	8010bb6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010b9c:	78fb      	ldrb	r3, [r7, #3]
 8010b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ba2:	68f9      	ldr	r1, [r7, #12]
 8010ba4:	1c5a      	adds	r2, r3, #1
 8010ba6:	4613      	mov	r3, r2
 8010ba8:	009b      	lsls	r3, r3, #2
 8010baa:	4413      	add	r3, r2
 8010bac:	00db      	lsls	r3, r3, #3
 8010bae:	440b      	add	r3, r1
 8010bb0:	3302      	adds	r3, #2
 8010bb2:	781b      	ldrb	r3, [r3, #0]
 8010bb4:	e00b      	b.n	8010bce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010bb6:	78fb      	ldrb	r3, [r7, #3]
 8010bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010bbc:	68f9      	ldr	r1, [r7, #12]
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	009b      	lsls	r3, r3, #2
 8010bc2:	4413      	add	r3, r2
 8010bc4:	00db      	lsls	r3, r3, #3
 8010bc6:	440b      	add	r3, r1
 8010bc8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8010bcc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3714      	adds	r7, #20
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr

08010bda <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010bda:	b580      	push	{r7, lr}
 8010bdc:	b084      	sub	sp, #16
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6078      	str	r0, [r7, #4]
 8010be2:	460b      	mov	r3, r1
 8010be4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010be6:	2300      	movs	r3, #0
 8010be8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bea:	2300      	movs	r3, #0
 8010bec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010bf4:	78fa      	ldrb	r2, [r7, #3]
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7f2 fed1 	bl	80039a0 <HAL_PCD_SetAddress>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c02:	7bfb      	ldrb	r3, [r7, #15]
 8010c04:	4618      	mov	r0, r3
 8010c06:	f000 f8b1 	bl	8010d6c <USBD_Get_USB_Status>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b086      	sub	sp, #24
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	607a      	str	r2, [r7, #4]
 8010c22:	603b      	str	r3, [r7, #0]
 8010c24:	460b      	mov	r3, r1
 8010c26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010c36:	7af9      	ldrb	r1, [r7, #11]
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	f7f2 ffd8 	bl	8003bf0 <HAL_PCD_EP_Transmit>
 8010c40:	4603      	mov	r3, r0
 8010c42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c44:	7dfb      	ldrb	r3, [r7, #23]
 8010c46:	4618      	mov	r0, r3
 8010c48:	f000 f890 	bl	8010d6c <USBD_Get_USB_Status>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c50:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3718      	adds	r7, #24
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b086      	sub	sp, #24
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	60f8      	str	r0, [r7, #12]
 8010c62:	607a      	str	r2, [r7, #4]
 8010c64:	603b      	str	r3, [r7, #0]
 8010c66:	460b      	mov	r3, r1
 8010c68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010c78:	7af9      	ldrb	r1, [r7, #11]
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	f7f2 ff62 	bl	8003b46 <HAL_PCD_EP_Receive>
 8010c82:	4603      	mov	r3, r0
 8010c84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c86:	7dfb      	ldrb	r3, [r7, #23]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f000 f86f 	bl	8010d6c <USBD_Get_USB_Status>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c92:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3718      	adds	r7, #24
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	460b      	mov	r3, r1
 8010ca6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010cae:	78fa      	ldrb	r2, [r7, #3]
 8010cb0:	4611      	mov	r1, r2
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7f2 ff84 	bl	8003bc0 <HAL_PCD_EP_GetRxCount>
 8010cb8:	4603      	mov	r3, r0
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3708      	adds	r7, #8
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
	...

08010cc4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b082      	sub	sp, #8
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	460b      	mov	r3, r1
 8010cce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010cd0:	78fb      	ldrb	r3, [r7, #3]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d002      	beq.n	8010cdc <HAL_PCDEx_LPM_Callback+0x18>
 8010cd6:	2b01      	cmp	r3, #1
 8010cd8:	d013      	beq.n	8010d02 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010cda:	e023      	b.n	8010d24 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	699b      	ldr	r3, [r3, #24]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d007      	beq.n	8010cf4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010ce4:	f000 f83c 	bl	8010d60 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ce8:	4b10      	ldr	r3, [pc, #64]	; (8010d2c <HAL_PCDEx_LPM_Callback+0x68>)
 8010cea:	691b      	ldr	r3, [r3, #16]
 8010cec:	4a0f      	ldr	r2, [pc, #60]	; (8010d2c <HAL_PCDEx_LPM_Callback+0x68>)
 8010cee:	f023 0306 	bic.w	r3, r3, #6
 8010cf2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fb f8ba 	bl	800be74 <USBD_LL_Resume>
    break;
 8010d00:	e010      	b.n	8010d24 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7fb f89d 	bl	800be48 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	699b      	ldr	r3, [r3, #24]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d005      	beq.n	8010d22 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d16:	4b05      	ldr	r3, [pc, #20]	; (8010d2c <HAL_PCDEx_LPM_Callback+0x68>)
 8010d18:	691b      	ldr	r3, [r3, #16]
 8010d1a:	4a04      	ldr	r2, [pc, #16]	; (8010d2c <HAL_PCDEx_LPM_Callback+0x68>)
 8010d1c:	f043 0306 	orr.w	r3, r3, #6
 8010d20:	6113      	str	r3, [r2, #16]
    break;
 8010d22:	bf00      	nop
}
 8010d24:	bf00      	nop
 8010d26:	3708      	adds	r7, #8
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}
 8010d2c:	e000ed00 	.word	0xe000ed00

08010d30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b083      	sub	sp, #12
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010d38:	4b03      	ldr	r3, [pc, #12]	; (8010d48 <USBD_static_malloc+0x18>)
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	370c      	adds	r7, #12
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d44:	4770      	bx	lr
 8010d46:	bf00      	nop
 8010d48:	20001af0 	.word	0x20001af0

08010d4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]

}
 8010d54:	bf00      	nop
 8010d56:	370c      	adds	r7, #12
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr

08010d60 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010d64:	f7f0 f832 	bl	8000dcc <SystemClock_Config>
}
 8010d68:	bf00      	nop
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	4603      	mov	r3, r0
 8010d74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d76:	2300      	movs	r3, #0
 8010d78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010d7a:	79fb      	ldrb	r3, [r7, #7]
 8010d7c:	2b03      	cmp	r3, #3
 8010d7e:	d817      	bhi.n	8010db0 <USBD_Get_USB_Status+0x44>
 8010d80:	a201      	add	r2, pc, #4	; (adr r2, 8010d88 <USBD_Get_USB_Status+0x1c>)
 8010d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d86:	bf00      	nop
 8010d88:	08010d99 	.word	0x08010d99
 8010d8c:	08010d9f 	.word	0x08010d9f
 8010d90:	08010da5 	.word	0x08010da5
 8010d94:	08010dab 	.word	0x08010dab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8010d9c:	e00b      	b.n	8010db6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010d9e:	2303      	movs	r3, #3
 8010da0:	73fb      	strb	r3, [r7, #15]
    break;
 8010da2:	e008      	b.n	8010db6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010da4:	2301      	movs	r3, #1
 8010da6:	73fb      	strb	r3, [r7, #15]
    break;
 8010da8:	e005      	b.n	8010db6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010daa:	2303      	movs	r3, #3
 8010dac:	73fb      	strb	r3, [r7, #15]
    break;
 8010dae:	e002      	b.n	8010db6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010db0:	2303      	movs	r3, #3
 8010db2:	73fb      	strb	r3, [r7, #15]
    break;
 8010db4:	bf00      	nop
  }
  return usb_status;
 8010db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3714      	adds	r7, #20
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr

08010dc4 <__libc_init_array>:
 8010dc4:	b570      	push	{r4, r5, r6, lr}
 8010dc6:	4d0d      	ldr	r5, [pc, #52]	; (8010dfc <__libc_init_array+0x38>)
 8010dc8:	4c0d      	ldr	r4, [pc, #52]	; (8010e00 <__libc_init_array+0x3c>)
 8010dca:	1b64      	subs	r4, r4, r5
 8010dcc:	10a4      	asrs	r4, r4, #2
 8010dce:	2600      	movs	r6, #0
 8010dd0:	42a6      	cmp	r6, r4
 8010dd2:	d109      	bne.n	8010de8 <__libc_init_array+0x24>
 8010dd4:	4d0b      	ldr	r5, [pc, #44]	; (8010e04 <__libc_init_array+0x40>)
 8010dd6:	4c0c      	ldr	r4, [pc, #48]	; (8010e08 <__libc_init_array+0x44>)
 8010dd8:	f000 f82e 	bl	8010e38 <_init>
 8010ddc:	1b64      	subs	r4, r4, r5
 8010dde:	10a4      	asrs	r4, r4, #2
 8010de0:	2600      	movs	r6, #0
 8010de2:	42a6      	cmp	r6, r4
 8010de4:	d105      	bne.n	8010df2 <__libc_init_array+0x2e>
 8010de6:	bd70      	pop	{r4, r5, r6, pc}
 8010de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dec:	4798      	blx	r3
 8010dee:	3601      	adds	r6, #1
 8010df0:	e7ee      	b.n	8010dd0 <__libc_init_array+0xc>
 8010df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010df6:	4798      	blx	r3
 8010df8:	3601      	adds	r6, #1
 8010dfa:	e7f2      	b.n	8010de2 <__libc_init_array+0x1e>
 8010dfc:	080110ac 	.word	0x080110ac
 8010e00:	080110ac 	.word	0x080110ac
 8010e04:	080110ac 	.word	0x080110ac
 8010e08:	080110b0 	.word	0x080110b0

08010e0c <memcpy>:
 8010e0c:	440a      	add	r2, r1
 8010e0e:	4291      	cmp	r1, r2
 8010e10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010e14:	d100      	bne.n	8010e18 <memcpy+0xc>
 8010e16:	4770      	bx	lr
 8010e18:	b510      	push	{r4, lr}
 8010e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e22:	4291      	cmp	r1, r2
 8010e24:	d1f9      	bne.n	8010e1a <memcpy+0xe>
 8010e26:	bd10      	pop	{r4, pc}

08010e28 <memset>:
 8010e28:	4402      	add	r2, r0
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	4293      	cmp	r3, r2
 8010e2e:	d100      	bne.n	8010e32 <memset+0xa>
 8010e30:	4770      	bx	lr
 8010e32:	f803 1b01 	strb.w	r1, [r3], #1
 8010e36:	e7f9      	b.n	8010e2c <memset+0x4>

08010e38 <_init>:
 8010e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e3a:	bf00      	nop
 8010e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e3e:	bc08      	pop	{r3}
 8010e40:	469e      	mov	lr, r3
 8010e42:	4770      	bx	lr

08010e44 <_fini>:
 8010e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e46:	bf00      	nop
 8010e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e4a:	bc08      	pop	{r3}
 8010e4c:	469e      	mov	lr, r3
 8010e4e:	4770      	bx	lr
