
captivatesEnv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f64  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  080130a4  080130a4  000230a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  080133e0  080133e0  000233e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000008  080133ec  080133ec  000233ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  20000004  080133f4  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000055dc  200001fc  080135ec  000301fc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200057d8  080135ec  000357d8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
  9 .debug_info   000593ea  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00009994  00000000  00000000  00089616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000034d8  00000000  00000000  00092fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003170  00000000  00000000  00096488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000386ac  00000000  00000000  000995f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00041854  00000000  00000000  000d1ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0011f5c1  00000000  00000000  001134f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00232ab9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000e120  00000000  00000000  00232b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001fc 	.word	0x200001fc
 800015c:	00000000 	.word	0x00000000
 8000160:	0801308c 	.word	0x0801308c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000200 	.word	0x20000200
 800017c:	0801308c 	.word	0x0801308c

08000180 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800018c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4313      	orrs	r3, r2
 8000196:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800019c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	4013      	ands	r3, r2
 80001a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a4:	68fb      	ldr	r3, [r7, #12]
}
 80001a6:	bf00      	nop
 80001a8:	3714      	adds	r7, #20
 80001aa:	46bd      	mov	sp, r7
 80001ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001b0:	4770      	bx	lr
	...

080001b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ba:	463b      	mov	r3, r7
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
 80001c0:	605a      	str	r2, [r3, #4]
 80001c2:	609a      	str	r2, [r3, #8]
 80001c4:	60da      	str	r2, [r3, #12]
 80001c6:	611a      	str	r2, [r3, #16]
 80001c8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ca:	4b29      	ldr	r3, [pc, #164]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001cc:	4a29      	ldr	r2, [pc, #164]	; (8000274 <MX_ADC1_Init+0xc0>)
 80001ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001d0:	4b27      	ldr	r3, [pc, #156]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001d6:	4b26      	ldr	r3, [pc, #152]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001d8:	2200      	movs	r2, #0
 80001da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001dc:	4b24      	ldr	r3, [pc, #144]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001de:	2200      	movs	r2, #0
 80001e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001e2:	4b23      	ldr	r3, [pc, #140]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80001e8:	4b21      	ldr	r3, [pc, #132]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001ea:	2204      	movs	r2, #4
 80001ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80001ee:	4b20      	ldr	r3, [pc, #128]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80001f4:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80001fa:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000200:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000202:	2200      	movs	r2, #0
 8000204:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000208:	4b19      	ldr	r3, [pc, #100]	; (8000270 <MX_ADC1_Init+0xbc>)
 800020a:	2200      	movs	r2, #0
 800020c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800020e:	4b18      	ldr	r3, [pc, #96]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000210:	2200      	movs	r2, #0
 8000212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000214:	4b16      	ldr	r3, [pc, #88]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000216:	2200      	movs	r2, #0
 8000218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <MX_ADC1_Init+0xbc>)
 800021e:	2200      	movs	r2, #0
 8000220:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000222:	4b13      	ldr	r3, [pc, #76]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000224:	2200      	movs	r2, #0
 8000226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800022a:	4811      	ldr	r0, [pc, #68]	; (8000270 <MX_ADC1_Init+0xbc>)
 800022c:	f001 ff64 	bl	80020f8 <HAL_ADC_Init>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000236:	f000 fefd 	bl	8001034 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <MX_ADC1_Init+0xc4>)
 800023c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800023e:	2306      	movs	r3, #6
 8000240:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000246:	237f      	movs	r3, #127	; 0x7f
 8000248:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800024a:	2304      	movs	r3, #4
 800024c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000252:	463b      	mov	r3, r7
 8000254:	4619      	mov	r1, r3
 8000256:	4806      	ldr	r0, [pc, #24]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000258:	f002 f89a 	bl	8002390 <HAL_ADC_ConfigChannel>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000262:	f000 fee7 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000266:	bf00      	nop
 8000268:	3718      	adds	r7, #24
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20003c30 	.word	0x20003c30
 8000274:	50040000 	.word	0x50040000
 8000278:	19200040 	.word	0x19200040

0800027c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	f107 030c 	add.w	r3, r7, #12
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <HAL_ADC_MspInit+0x54>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d113      	bne.n	80002c6 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800029e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80002a2:	f7ff ff6d 	bl	8000180 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	2001      	movs	r0, #1
 80002a8:	f7ff ff6a 	bl	8000180 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002b0:	2303      	movs	r3, #3
 80002b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b4:	2300      	movs	r3, #0
 80002b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 80002b8:	f107 030c 	add.w	r3, r7, #12
 80002bc:	4619      	mov	r1, r3
 80002be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c2:	f002 fd0b 	bl	8002cdc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002c6:	bf00      	nop
 80002c8:	3720      	adds	r7, #32
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	50040000 	.word	0x50040000

080002d4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80002dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002e0:	4a0a      	ldr	r2, [pc, #40]	; (800030c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80002e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80002e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80002ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	021b      	lsls	r3, r3, #8
 80002f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002fa:	4313      	orrs	r3, r2
 80002fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	cafecafe 	.word	0xcafecafe

08000310 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800031c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800033a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800033e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800035c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000364:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000368:	d101      	bne.n	800036e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800036a:	2301      	movs	r3, #1
 800036c:	e000      	b.n	8000370 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800036e:	2300      	movs	r3, #0
}
 8000370:	4618      	mov	r0, r3
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800037e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800038e:	d101      	bne.n	8000394 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000390:	2301      	movs	r3, #1
 8000392:	e000      	b.n	8000396 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000394:	2300      	movs	r3, #0
}
 8000396:	4618      	mov	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80003a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80003b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4013      	ands	r3, r2
 80003c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003c4:	68fb      	ldr	r3, [r7, #12]
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685a      	ldr	r2, [r3, #4]
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	041b      	lsls	r3, r3, #16
 80003e4:	431a      	orrs	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	685a      	ldr	r2, [r3, #4]
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	431a      	orrs	r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	605a      	str	r2, [r3, #4]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	041b      	lsls	r3, r3, #16
 800042a:	431a      	orrs	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	615a      	str	r2, [r3, #20]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	431a      	orrs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	615a      	str	r2, [r3, #20]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	609a      	str	r2, [r3, #8]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	619a      	str	r2, [r3, #24]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <LL_LPM_EnableSleep+0x1c>)
 800049e:	691b      	ldr	r3, [r3, #16]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <LL_LPM_EnableSleep+0x1c>)
 80004a2:	f023 0304 	bic.w	r3, r3, #4
 80004a6:	6113      	str	r3, [r2, #16]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e000ed00 	.word	0xe000ed00

080004b8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <MX_APPE_Config+0x18>)
 80004be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004c2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 80004c4:	f000 f806 	bl	80004d4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80004c8:	f000 f846 	bl	8000558 <Config_HSE>

  return;
 80004cc:	bf00      	nop
}
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	58004000 	.word	0x58004000

080004d4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80004d8:	f000 f804 	bl	80004e4 <Reset_BackupDomain>

  Reset_IPCC();
 80004dc:	f000 f81a 	bl	8000514 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 80004e0:	bf00      	nop
}
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80004e8:	f7ff ff34 	bl	8000354 <LL_RCC_IsActiveFlag_PINRST>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d00d      	beq.n	800050e <Reset_BackupDomain+0x2a>
 80004f2:	f7ff ff42 	bl	800037a <LL_RCC_IsActiveFlag_SFTRST>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d108      	bne.n	800050e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80004fc:	f005 f92e 	bl	800575c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000500:	f005 f92c 	bl	800575c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000504:	f7ff ff04 	bl	8000310 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000508:	f7ff ff13 	bl	8000332 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800050c:	bf00      	nop
 800050e:	bf00      	nop
}
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000518:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800051c:	f7ff ff40 	bl	80003a0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000520:	213f      	movs	r1, #63	; 0x3f
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <Reset_IPCC+0x40>)
 8000524:	f7ff ff9b 	bl	800045e <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000528:	213f      	movs	r1, #63	; 0x3f
 800052a:	480a      	ldr	r0, [pc, #40]	; (8000554 <Reset_IPCC+0x40>)
 800052c:	f7ff ffa5 	bl	800047a <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000530:	213f      	movs	r1, #63	; 0x3f
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <Reset_IPCC+0x40>)
 8000534:	f7ff ff4d 	bl	80003d2 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000538:	213f      	movs	r1, #63	; 0x3f
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <Reset_IPCC+0x40>)
 800053c:	f7ff ff6c 	bl	8000418 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000540:	213f      	movs	r1, #63	; 0x3f
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <Reset_IPCC+0x40>)
 8000544:	f7ff ff57 	bl	80003f6 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000548:	213f      	movs	r1, #63	; 0x3f
 800054a:	4802      	ldr	r0, [pc, #8]	; (8000554 <Reset_IPCC+0x40>)
 800054c:	f7ff ff76 	bl	800043c <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000550:	bf00      	nop
}
 8000552:	bd80      	pop	{r7, pc}
 8000554:	58000c00 	.word	0x58000c00

08000558 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800055e:	2000      	movs	r0, #0
 8000560:	f00c ff1c 	bl	800d39c <OTP_Read>
 8000564:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d005      	beq.n	8000578 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	799b      	ldrb	r3, [r3, #6]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff feaf 	bl	80002d4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000576:	bf00      	nop
 8000578:	bf00      	nop
}
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000588:	f001 fc06 	bl	8001d98 <HAL_GetTick>
 800058c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000598:	d00a      	beq.n	80005b0 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800059a:	f001 fc15 	bl	8001dc8 <HAL_GetTickFreq>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005a8:	e002      	b.n	80005b0 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80005aa:	f7ff ff75 	bl	8000498 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 80005ae:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80005b0:	f001 fbf2 	bl	8001d98 <HAL_GetTick>
 80005b4:	4602      	mov	r2, r0
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d8f4      	bhi.n	80005aa <HAL_Delay+0x2a>
  }
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of messageI2C_Lock */
  messageI2C1_LockHandle = osMutexNew(&messageI2C1_Lock_attributes);
 80005d0:	4813      	ldr	r0, [pc, #76]	; (8000620 <_Z16MX_FREERTOS_Initv+0x54>)
 80005d2:	f00d fd9f 	bl	800e114 <osMutexNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a12      	ldr	r2, [pc, #72]	; (8000624 <_Z16MX_FREERTOS_Initv+0x58>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	/* creation of lightsSimpleQueue */
	lightsComplexQueueHandle = osMessageQueueNew(3, sizeof(union ColorComplex),
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <_Z16MX_FREERTOS_Initv+0x5c>)
 80005de:	2112      	movs	r1, #18
 80005e0:	2003      	movs	r0, #3
 80005e2:	f00d feb3 	bl	800e34c <osMessageQueueNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a10      	ldr	r2, [pc, #64]	; (800062c <_Z16MX_FREERTOS_Initv+0x60>)
 80005ea:	6013      	str	r3, [r2, #0]
			&lightsComplexQueue_attributes);
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ec:	4a10      	ldr	r2, [pc, #64]	; (8000630 <_Z16MX_FREERTOS_Initv+0x64>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4810      	ldr	r0, [pc, #64]	; (8000634 <_Z16MX_FREERTOS_Initv+0x68>)
 80005f2:	f00d fb1f 	bl	800dc34 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <_Z16MX_FREERTOS_Initv+0x6c>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of frontLightsThre */
  frontLightsThreHandle = osThreadNew(ThreadFrontLightsComplexTask, NULL, &frontLightsThre_attributes);
 80005fc:	4a0f      	ldr	r2, [pc, #60]	; (800063c <_Z16MX_FREERTOS_Initv+0x70>)
 80005fe:	2100      	movs	r1, #0
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <_Z16MX_FREERTOS_Initv+0x74>)
 8000602:	f00d fb17 	bl	800dc34 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <_Z16MX_FREERTOS_Initv+0x78>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of thermopileTask */
  thermopileTaskHandle = osThreadNew(Thermopile_Task, NULL, &thermopileTask_attributes);
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <_Z16MX_FREERTOS_Initv+0x7c>)
 800060e:	2100      	movs	r1, #0
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <_Z16MX_FREERTOS_Initv+0x80>)
 8000612:	f00d fb0f 	bl	800dc34 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <_Z16MX_FREERTOS_Initv+0x84>)
 800061a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	08013220 	.word	0x08013220
 8000624:	20000228 	.word	0x20000228
 8000628:	0801319c 	.word	0x0801319c
 800062c:	20000218 	.word	0x20000218
 8000630:	080131b4 	.word	0x080131b4
 8000634:	08000655 	.word	0x08000655
 8000638:	2000021c 	.word	0x2000021c
 800063c:	080131d8 	.word	0x080131d8
 8000640:	08000b5d 	.word	0x08000b5d
 8000644:	20000220 	.word	0x20000220
 8000648:	080131fc 	.word	0x080131fc
 800064c:	080017e5 	.word	0x080017e5
 8000650:	20000224 	.word	0x20000224

08000654 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800065c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000660:	f00d fc49 	bl	800def6 <osDelay>

	while(1){
		ledStartupSequence();
 8000664:	f000 fad2 	bl	8000c0c <ledStartupSequence>
		osDelay(1500);
 8000668:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800066c:	f00d fc43 	bl	800def6 <osDelay>
		ledStartupSequence();
 8000670:	e7f8      	b.n	8000664 <_Z16StartDefaultTaskPv+0x10>

08000672 <LL_AHB2_GRP1_EnableClock>:
{
 8000672:	b480      	push	{r7}
 8000674:	b085      	sub	sp, #20
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800067a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800067e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000680:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4313      	orrs	r3, r2
 8000688:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800068a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800068e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4013      	ands	r3, r2
 8000694:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000696:	68fb      	ldr	r3, [r7, #12]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <MX_GPIO_Init>:

/** Configure pins
     PA1   ------> SharedAnalog_PA1
*/
void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff ffda 	bl	8000672 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2004      	movs	r0, #4
 80006c0:	f7ff ffd7 	bl	8000672 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c4:	2002      	movs	r0, #2
 80006c6:	f7ff ffd4 	bl	8000672 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ca:	2008      	movs	r0, #8
 80006cc:	f7ff ffd1 	bl	8000672 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d6:	481d      	ldr	r0, [pc, #116]	; (800074c <MX_GPIO_Init+0xa8>)
 80006d8:	f002 fc70 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 80006dc:	2302      	movs	r3, #2
 80006de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e0:	2303      	movs	r3, #3
 80006e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f002 faf4 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 80006f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4619      	mov	r1, r3
 800070a:	4810      	ldr	r0, [pc, #64]	; (800074c <MX_GPIO_Init+0xa8>)
 800070c:	f002 fae6 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA9_Pin;
 8000710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000714:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(PA9_GPIO_Port, &GPIO_InitStruct);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4619      	mov	r1, r3
 8000722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000726:	f002 fad9 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = PD4_Pin|PD9_Pin;
 800072a:	f44f 7304 	mov.w	r3, #528	; 0x210
 800072e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4619      	mov	r1, r3
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_GPIO_Init+0xac>)
 800073e:	f002 facd 	bl	8002cdc <HAL_GPIO_Init>

}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	48000800 	.word	0x48000800
 8000750:	48000c00 	.word	0x48000c00

08000754 <LL_AHB2_GRP1_EnableClock>:
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800075c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4313      	orrs	r3, r2
 800076a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800076c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000770:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4013      	ands	r3, r2
 8000776:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000778:	68fb      	ldr	r3, [r7, #12]
}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000786:	b480      	push	{r7}
 8000788:	b085      	sub	sp, #20
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800078e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000792:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000794:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4313      	orrs	r3, r2
 800079c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800079e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4013      	ands	r3, r2
 80007a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007aa:	68fb      	ldr	r3, [r7, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_I2C1_Init+0x74>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_I2C1_Init+0x78>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_I2C1_Init+0x74>)
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <MX_I2C1_Init+0x7c>)
 80007c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_I2C1_Init+0x74>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_I2C1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <MX_I2C1_Init+0x74>)
 80007f4:	f002 fc1e 	bl	8003034 <HAL_I2C_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007fe:	f000 fc19 	bl	8001034 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <MX_I2C1_Init+0x74>)
 8000806:	f003 f957 	bl	8003ab8 <HAL_I2CEx_ConfigAnalogFilter>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 fc10 	bl	8001034 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_I2C1_Init+0x74>)
 8000818:	f003 f999 	bl	8003b4e <HAL_I2CEx_ConfigDigitalFilter>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000822:	f000 fc07 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20003ce0 	.word	0x20003ce0
 8000830:	40005400 	.word	0x40005400
 8000834:	10707dbc 	.word	0x10707dbc

08000838 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_I2C3_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <MX_I2C3_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_I2C3_Init+0x74>)
 8000844:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <MX_I2C3_Init+0x7c>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_I2C3_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_I2C3_Init+0x74>)
 8000850:	2201      	movs	r2, #1
 8000852:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_I2C3_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_I2C3_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_I2C3_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_I2C3_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_I2C3_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <MX_I2C3_Init+0x74>)
 8000874:	f002 fbde 	bl	8003034 <HAL_I2C_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800087e:	f000 fbd9 	bl	8001034 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <MX_I2C3_Init+0x74>)
 8000886:	f003 f917 	bl	8003ab8 <HAL_I2CEx_ConfigAnalogFilter>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000890:	f000 fbd0 	bl	8001034 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000894:	2100      	movs	r1, #0
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_I2C3_Init+0x74>)
 8000898:	f003 f959 	bl	8003b4e <HAL_I2CEx_ConfigDigitalFilter>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f000 fbc7 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20003c94 	.word	0x20003c94
 80008b0:	40005c00 	.word	0x40005c00
 80008b4:	10707dbc 	.word	0x10707dbc

080008b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09c      	sub	sp, #112	; 0x70
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2250      	movs	r2, #80	; 0x50
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f012 fb09 	bl	8012ef0 <memset>
  if(i2cHandle->Instance==I2C1)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a3f      	ldr	r2, [pc, #252]	; (80009e0 <HAL_I2C_MspInit+0x128>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d12f      	bne.n	8000948 <HAL_I2C_MspInit+0x90>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008e8:	2304      	movs	r3, #4
 80008ea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008ec:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	4618      	mov	r0, r3
 80008f8:	f006 fcc6 	bl	8007288 <HAL_RCCEx_PeriphCLKConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000902:	f000 fb97 	bl	8001034 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2002      	movs	r0, #2
 8000908:	f7ff ff24 	bl	8000754 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 800090c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000910:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000912:	2312      	movs	r3, #18
 8000914:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000916:	2301      	movs	r3, #1
 8000918:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091a:	2302      	movs	r3, #2
 800091c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800091e:	2304      	movs	r3, #4
 8000920:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000926:	4619      	mov	r1, r3
 8000928:	482e      	ldr	r0, [pc, #184]	; (80009e4 <HAL_I2C_MspInit+0x12c>)
 800092a:	f002 f9d7 	bl	8002cdc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800092e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000932:	f7ff ff28 	bl	8000786 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2105      	movs	r1, #5
 800093a:	201e      	movs	r0, #30
 800093c:	f002 f9a6 	bl	8002c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000940:	201e      	movs	r0, #30
 8000942:	f002 f9bd 	bl	8002cc0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000946:	e046      	b.n	80009d6 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <HAL_I2C_MspInit+0x130>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d141      	bne.n	80009d6 <HAL_I2C_MspInit+0x11e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000952:	2308      	movs	r3, #8
 8000954:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000956:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4618      	mov	r0, r3
 8000962:	f006 fc91 	bl	8007288 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_I2C_MspInit+0xb8>
      Error_Handler();
 800096c:	f000 fb62 	bl	8001034 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000970:	2004      	movs	r0, #4
 8000972:	f7ff feef 	bl	8000754 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff feec 	bl	8000754 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800097c:	2302      	movs	r3, #2
 800097e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000980:	2312      	movs	r3, #18
 8000982:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000984:	2301      	movs	r3, #1
 8000986:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000988:	2302      	movs	r3, #2
 800098a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800098c:	2304      	movs	r3, #4
 800098e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000994:	4619      	mov	r1, r3
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <HAL_I2C_MspInit+0x134>)
 8000998:	f002 f9a0 	bl	8002cdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a0:	2312      	movs	r3, #18
 80009a2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a8:	2302      	movs	r3, #2
 80009aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009ac:	2304      	movs	r3, #4
 80009ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009b4:	4619      	mov	r1, r3
 80009b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ba:	f002 f98f 	bl	8002cdc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009be:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80009c2:	f7ff fee0 	bl	8000786 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2105      	movs	r1, #5
 80009ca:	2020      	movs	r0, #32
 80009cc:	f002 f95e 	bl	8002c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80009d0:	2020      	movs	r0, #32
 80009d2:	f002 f975 	bl	8002cc0 <HAL_NVIC_EnableIRQ>
}
 80009d6:	bf00      	nop
 80009d8:	3770      	adds	r7, #112	; 0x70
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40005400 	.word	0x40005400
 80009e4:	48000400 	.word	0x48000400
 80009e8:	40005c00 	.word	0x40005c00
 80009ec:	48000800 	.word	0x48000800

080009f0 <LL_AHB3_GRP1_EnableClock>:
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80009f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a14:	68fb      	ldr	r3, [r7, #12]
}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_IPCC_Init+0x20>)
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <MX_IPCC_Init+0x24>)
 8000a2c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_IPCC_Init+0x20>)
 8000a30:	f003 f8da 	bl	8003be8 <HAL_IPCC_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000a3a:	f000 fafb 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20003d2c 	.word	0x20003d2c
 8000a48:	58000c00 	.word	0x58000c00

08000a4c <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <HAL_IPCC_MspInit+0x24>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d103      	bne.n	8000a66 <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8000a5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a62:	f7ff ffc5 	bl	80009f0 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	58000c00 	.word	0x58000c00

08000a74 <setup_LP5523>:
		LOG_EN, LOG_EN, LOG_EN, LOG_EN };
uint8_t deviceAddress;
uint8_t led_PWM[9] = { 0 };
uint8_t packet;

void setup_LP5523(uint8_t ADDR) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af04      	add	r7, sp, #16
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <setup_LP5523+0xcc>)
 8000a86:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 8000a88:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <setup_LP5523+0xd0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a90:	4618      	mov	r0, r3
 8000a92:	f00d fbc5 	bl	800e220 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8000a96:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <setup_LP5523+0xd4>)
 8000a98:	2240      	movs	r2, #64	; 0x40
 8000a9a:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG,
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <setup_LP5523+0xcc>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b299      	uxth	r1, r3
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	9302      	str	r3, [sp, #8]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <setup_LP5523+0xd4>)
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2301      	movs	r3, #1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	4826      	ldr	r0, [pc, #152]	; (8000b4c <setup_LP5523+0xd8>)
 8000ab4:	f002 fb4e 	bl	8003154 <HAL_I2C_Mem_Write>
			1, &packet, 1, I2C_TIMEOUT);

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8000ab8:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <setup_LP5523+0xd4>)
 8000aba:	224f      	movs	r2, #79	; 0x4f
 8000abc:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1,
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <setup_LP5523+0xcc>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b299      	uxth	r1, r3
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	9302      	str	r3, [sp, #8]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <setup_LP5523+0xd4>)
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	2236      	movs	r2, #54	; 0x36
 8000ad4:	481d      	ldr	r0, [pc, #116]	; (8000b4c <setup_LP5523+0xd8>)
 8000ad6:	f002 fb3d 	bl	8003154 <HAL_I2C_Mem_Write>
			&packet, 1, I2C_TIMEOUT);

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1,
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <setup_LP5523+0xcc>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b299      	uxth	r1, r3
 8000ae0:	230a      	movs	r3, #10
 8000ae2:	9302      	str	r3, [sp, #8]
 8000ae4:	2309      	movs	r3, #9
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <setup_LP5523+0xdc>)
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2301      	movs	r3, #1
 8000aee:	2216      	movs	r2, #22
 8000af0:	4816      	ldr	r0, [pc, #88]	; (8000b4c <setup_LP5523+0xd8>)
 8000af2:	f002 fb2f 	bl	8003154 <HAL_I2C_Mem_Write>
			led_PWM, 9, I2C_TIMEOUT);

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress,
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <setup_LP5523+0xcc>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	b299      	uxth	r1, r3
 8000afc:	230a      	movs	r3, #10
 8000afe:	9302      	str	r3, [sp, #8]
 8000b00:	2309      	movs	r3, #9
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <setup_LP5523+0xe0>)
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2301      	movs	r3, #1
 8000b0a:	2226      	movs	r2, #38	; 0x26
 8000b0c:	480f      	ldr	r0, [pc, #60]	; (8000b4c <setup_LP5523+0xd8>)
 8000b0e:	f002 fb21 	bl	8003154 <HAL_I2C_Mem_Write>
			LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1,
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <setup_LP5523+0xcc>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b299      	uxth	r1, r3
 8000b18:	230a      	movs	r3, #10
 8000b1a:	9302      	str	r3, [sp, #8]
 8000b1c:	2309      	movs	r3, #9
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <setup_LP5523+0xe4>)
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2301      	movs	r3, #1
 8000b26:	2206      	movs	r2, #6
 8000b28:	4808      	ldr	r0, [pc, #32]	; (8000b4c <setup_LP5523+0xd8>)
 8000b2a:	f002 fb13 	bl	8003154 <HAL_I2C_Mem_Write>
			packet_array, 9, I2C_TIMEOUT);

	osSemaphoreRelease(messageI2C1_LockHandle);
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <setup_LP5523+0xd0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00d fbc6 	bl	800e2c4 <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20003d7e 	.word	0x20003d7e
 8000b44:	20000228 	.word	0x20000228
 8000b48:	20003d68 	.word	0x20003d68
 8000b4c:	20003ce0 	.word	0x20003ce0
 8000b50:	20000244 	.word	0x20000244
 8000b54:	20000004 	.word	0x20000004
 8000b58:	08013244 	.word	0x08013244

08000b5c <ThreadFrontLightsComplexTask>:
	    	}
#endif
}

union ColorComplex receivedColors;
void ThreadFrontLightsComplexTask(void *argument){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af04      	add	r7, sp, #16
 8000b62:	6078      	str	r0, [r7, #4]

	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8000b64:	2034      	movs	r0, #52	; 0x34
 8000b66:	f7ff ff85 	bl	8000a74 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8000b6a:	2035      	movs	r0, #53	; 0x35
 8000b6c:	f7ff ff82 	bl	8000a74 <setup_LP5523>

	HAL_StatusTypeDef state = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]



	while (1) {
		osMessageQueueGet(lightsComplexQueueHandle, &receivedColors,
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <ThreadFrontLightsComplexTask+0x98>)
 8000b76:	6818      	ldr	r0, [r3, #0]
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	491e      	ldr	r1, [pc, #120]	; (8000bf8 <ThreadFrontLightsComplexTask+0x9c>)
 8000b80:	f00d fcb8 	bl	800e4f4 <osMessageQueueGet>
						0U, osWaitForever);
		memcpy(led_left_PWM, &receivedColors, 9);
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <ThreadFrontLightsComplexTask+0xa0>)
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <ThreadFrontLightsComplexTask+0x9c>)
 8000b88:	6810      	ldr	r0, [r2, #0]
 8000b8a:	6851      	ldr	r1, [r2, #4]
 8000b8c:	c303      	stmia	r3!, {r0, r1}
 8000b8e:	7a12      	ldrb	r2, [r2, #8]
 8000b90:	701a      	strb	r2, [r3, #0]
		memcpy(led_right_PWM, &(receivedColors.color[9]), 9);
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <ThreadFrontLightsComplexTask+0xa4>)
 8000b94:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <ThreadFrontLightsComplexTask+0x9c>)
 8000b96:	3209      	adds	r2, #9
 8000b98:	6810      	ldr	r0, [r2, #0]
 8000b9a:	6851      	ldr	r1, [r2, #4]
 8000b9c:	c303      	stmia	r3!, {r0, r1}
 8000b9e:	7a12      	ldrb	r2, [r2, #8]
 8000ba0:	701a      	strb	r2, [r3, #0]
	#ifndef DONGLE_CODE
		osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <ThreadFrontLightsComplexTask+0xa8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000baa:	4618      	mov	r0, r3
 8000bac:	f00d fb38 	bl	800e220 <osSemaphoreAcquire>

//		HAL_I2C_Mem_Write_DMA(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1,
//				LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9);
		state = HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1,
 8000bb0:	2305      	movs	r3, #5
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	2309      	movs	r3, #9
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <ThreadFrontLightsComplexTask+0xa0>)
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	2216      	movs	r2, #22
 8000bc0:	2168      	movs	r1, #104	; 0x68
 8000bc2:	4811      	ldr	r0, [pc, #68]	; (8000c08 <ThreadFrontLightsComplexTask+0xac>)
 8000bc4:	f002 fac6 	bl	8003154 <HAL_I2C_Mem_Write>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	73fb      	strb	r3, [r7, #15]
////			if(counter > 1000){
////				HAL_I2C_Master_Abort_IT(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1);
////			}
//		}

		state = HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1,
 8000bcc:	2305      	movs	r3, #5
 8000bce:	9302      	str	r3, [sp, #8]
 8000bd0:	2309      	movs	r3, #9
 8000bd2:	9301      	str	r3, [sp, #4]
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <ThreadFrontLightsComplexTask+0xa4>)
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	2301      	movs	r3, #1
 8000bda:	2216      	movs	r2, #22
 8000bdc:	216a      	movs	r1, #106	; 0x6a
 8000bde:	480a      	ldr	r0, [pc, #40]	; (8000c08 <ThreadFrontLightsComplexTask+0xac>)
 8000be0:	f002 fab8 	bl	8003154 <HAL_I2C_Mem_Write>
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]
//			if(counter > 1000){
//				HAL_I2C_Master_Abort_IT(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1);
//			}
//		}

		osSemaphoreRelease(messageI2C1_LockHandle);
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <ThreadFrontLightsComplexTask+0xa8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f00d fb69 	bl	800e2c4 <osSemaphoreRelease>
		osMessageQueueGet(lightsComplexQueueHandle, &receivedColors,
 8000bf2:	e7bf      	b.n	8000b74 <ThreadFrontLightsComplexTask+0x18>
 8000bf4:	20000218 	.word	0x20000218
 8000bf8:	20003d6c 	.word	0x20003d6c
 8000bfc:	2000022c 	.word	0x2000022c
 8000c00:	20000238 	.word	0x20000238
 8000c04:	20000228 	.word	0x20000228
 8000c08:	20003ce0 	.word	0x20003ce0

08000c0c <ledStartupSequence>:
{
  HAL_GPIO_TogglePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led]);
}
#endif

void ledStartupSequence(void){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	resetColor(&receivedColor);
 8000c10:	4864      	ldr	r0, [pc, #400]	; (8000da4 <ledStartupSequence+0x198>)
 8000c12:	f000 f8ed 	bl	8000df0 <resetColor>

	receivedColor.colors_indiv.left_front_b = 255;
 8000c16:	4b63      	ldr	r3, [pc, #396]	; (8000da4 <ledStartupSequence+0x198>)
 8000c18:	22ff      	movs	r2, #255	; 0xff
 8000c1a:	705a      	strb	r2, [r3, #1]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000c1c:	4b62      	ldr	r3, [pc, #392]	; (8000da8 <ledStartupSequence+0x19c>)
 8000c1e:	6818      	ldr	r0, [r3, #0]
 8000c20:	2300      	movs	r3, #0
 8000c22:	2200      	movs	r2, #0
 8000c24:	495f      	ldr	r1, [pc, #380]	; (8000da4 <ledStartupSequence+0x198>)
 8000c26:	f00d fc05 	bl	800e434 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor););
	osDelay(LED_START_SEQ_INTERVAL);
 8000c2a:	20c8      	movs	r0, #200	; 0xc8
 8000c2c:	f00d f963 	bl	800def6 <osDelay>

	receivedColor.colors_indiv.left_front_b = 0;
 8000c30:	4b5c      	ldr	r3, [pc, #368]	; (8000da4 <ledStartupSequence+0x198>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	705a      	strb	r2, [r3, #1]
	receivedColor.colors_indiv.left_front_g = 255;
 8000c36:	4b5b      	ldr	r3, [pc, #364]	; (8000da4 <ledStartupSequence+0x198>)
 8000c38:	22ff      	movs	r2, #255	; 0xff
 8000c3a:	701a      	strb	r2, [r3, #0]

	receivedColor.colors_indiv.left_top_b = 255;
 8000c3c:	4b59      	ldr	r3, [pc, #356]	; (8000da4 <ledStartupSequence+0x198>)
 8000c3e:	22ff      	movs	r2, #255	; 0xff
 8000c40:	709a      	strb	r2, [r3, #2]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000c42:	4b59      	ldr	r3, [pc, #356]	; (8000da8 <ledStartupSequence+0x19c>)
 8000c44:	6818      	ldr	r0, [r3, #0]
 8000c46:	2300      	movs	r3, #0
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4956      	ldr	r1, [pc, #344]	; (8000da4 <ledStartupSequence+0x198>)
 8000c4c:	f00d fbf2 	bl	800e434 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000c50:	20c8      	movs	r0, #200	; 0xc8
 8000c52:	f00d f950 	bl	800def6 <osDelay>

	receivedColor.colors_indiv.left_front_g = 0;
 8000c56:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <ledStartupSequence+0x198>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
	receivedColor.colors_indiv.left_front_r = 255;
 8000c5c:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <ledStartupSequence+0x198>)
 8000c5e:	22ff      	movs	r2, #255	; 0xff
 8000c60:	719a      	strb	r2, [r3, #6]

	receivedColor.colors_indiv.left_top_b = 0;
 8000c62:	4b50      	ldr	r3, [pc, #320]	; (8000da4 <ledStartupSequence+0x198>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	709a      	strb	r2, [r3, #2]
	receivedColor.colors_indiv.left_top_g = 255;
 8000c68:	4b4e      	ldr	r3, [pc, #312]	; (8000da4 <ledStartupSequence+0x198>)
 8000c6a:	22ff      	movs	r2, #255	; 0xff
 8000c6c:	70da      	strb	r2, [r3, #3]

	receivedColor.colors_indiv.left_side_b = 255;
 8000c6e:	4b4d      	ldr	r3, [pc, #308]	; (8000da4 <ledStartupSequence+0x198>)
 8000c70:	22ff      	movs	r2, #255	; 0xff
 8000c72:	711a      	strb	r2, [r3, #4]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000c74:	4b4c      	ldr	r3, [pc, #304]	; (8000da8 <ledStartupSequence+0x19c>)
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4949      	ldr	r1, [pc, #292]	; (8000da4 <ledStartupSequence+0x198>)
 8000c7e:	f00d fbd9 	bl	800e434 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000c82:	20c8      	movs	r0, #200	; 0xc8
 8000c84:	f00d f937 	bl	800def6 <osDelay>

	receivedColor.colors_indiv.left_front_r = 0;
 8000c88:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <ledStartupSequence+0x198>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	719a      	strb	r2, [r3, #6]

	receivedColor.colors_indiv.left_top_g = 0;
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <ledStartupSequence+0x198>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	70da      	strb	r2, [r3, #3]
	receivedColor.colors_indiv.left_top_r = 255;
 8000c94:	4b43      	ldr	r3, [pc, #268]	; (8000da4 <ledStartupSequence+0x198>)
 8000c96:	22ff      	movs	r2, #255	; 0xff
 8000c98:	71da      	strb	r2, [r3, #7]

	receivedColor.colors_indiv.left_side_b = 0;
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <ledStartupSequence+0x198>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	711a      	strb	r2, [r3, #4]
	receivedColor.colors_indiv.left_side_g = 255;
 8000ca0:	4b40      	ldr	r3, [pc, #256]	; (8000da4 <ledStartupSequence+0x198>)
 8000ca2:	22ff      	movs	r2, #255	; 0xff
 8000ca4:	715a      	strb	r2, [r3, #5]

	receivedColor.colors_indiv.right_side_b = 255;
 8000ca6:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <ledStartupSequence+0x198>)
 8000ca8:	22ff      	movs	r2, #255	; 0xff
 8000caa:	735a      	strb	r2, [r3, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000cac:	4b3e      	ldr	r3, [pc, #248]	; (8000da8 <ledStartupSequence+0x19c>)
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	493b      	ldr	r1, [pc, #236]	; (8000da4 <ledStartupSequence+0x198>)
 8000cb6:	f00d fbbd 	bl	800e434 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000cba:	20c8      	movs	r0, #200	; 0xc8
 8000cbc:	f00d f91b 	bl	800def6 <osDelay>

	receivedColor.colors_indiv.left_top_r = 0;
 8000cc0:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <ledStartupSequence+0x198>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	71da      	strb	r2, [r3, #7]

	receivedColor.colors_indiv.left_side_g = 0;
 8000cc6:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <ledStartupSequence+0x198>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	715a      	strb	r2, [r3, #5]
	receivedColor.colors_indiv.left_side_r = 255;
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <ledStartupSequence+0x198>)
 8000cce:	22ff      	movs	r2, #255	; 0xff
 8000cd0:	721a      	strb	r2, [r3, #8]

	receivedColor.colors_indiv.right_side_b = 0;
 8000cd2:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <ledStartupSequence+0x198>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	735a      	strb	r2, [r3, #13]
	receivedColor.colors_indiv.right_side_g = 255;
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <ledStartupSequence+0x198>)
 8000cda:	22ff      	movs	r2, #255	; 0xff
 8000cdc:	739a      	strb	r2, [r3, #14]

	receivedColor.colors_indiv.right_top_b = 255;
 8000cde:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <ledStartupSequence+0x198>)
 8000ce0:	22ff      	movs	r2, #255	; 0xff
 8000ce2:	72da      	strb	r2, [r3, #11]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000ce4:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <ledStartupSequence+0x19c>)
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	2200      	movs	r2, #0
 8000cec:	492d      	ldr	r1, [pc, #180]	; (8000da4 <ledStartupSequence+0x198>)
 8000cee:	f00d fba1 	bl	800e434 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000cf2:	20c8      	movs	r0, #200	; 0xc8
 8000cf4:	f00d f8ff 	bl	800def6 <osDelay>

	receivedColor.colors_indiv.left_side_r = 0;
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <ledStartupSequence+0x198>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	721a      	strb	r2, [r3, #8]

	receivedColor.colors_indiv.right_side_g = 0;
 8000cfe:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <ledStartupSequence+0x198>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	739a      	strb	r2, [r3, #14]
	receivedColor.colors_indiv.right_side_r = 255;
 8000d04:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <ledStartupSequence+0x198>)
 8000d06:	22ff      	movs	r2, #255	; 0xff
 8000d08:	745a      	strb	r2, [r3, #17]

	receivedColor.colors_indiv.right_top_b = 0;
 8000d0a:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <ledStartupSequence+0x198>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	72da      	strb	r2, [r3, #11]
	receivedColor.colors_indiv.right_top_g = 255;
 8000d10:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <ledStartupSequence+0x198>)
 8000d12:	22ff      	movs	r2, #255	; 0xff
 8000d14:	731a      	strb	r2, [r3, #12]

	receivedColor.colors_indiv.right_front_b = 255;
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <ledStartupSequence+0x198>)
 8000d18:	22ff      	movs	r2, #255	; 0xff
 8000d1a:	729a      	strb	r2, [r3, #10]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <ledStartupSequence+0x19c>)
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	2300      	movs	r3, #0
 8000d22:	2200      	movs	r2, #0
 8000d24:	491f      	ldr	r1, [pc, #124]	; (8000da4 <ledStartupSequence+0x198>)
 8000d26:	f00d fb85 	bl	800e434 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000d2a:	20c8      	movs	r0, #200	; 0xc8
 8000d2c:	f00d f8e3 	bl	800def6 <osDelay>

	receivedColor.colors_indiv.right_side_r = 0;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <ledStartupSequence+0x198>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	745a      	strb	r2, [r3, #17]

	receivedColor.colors_indiv.right_top_g = 0;
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <ledStartupSequence+0x198>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	731a      	strb	r2, [r3, #12]
	receivedColor.colors_indiv.right_top_r = 255;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <ledStartupSequence+0x198>)
 8000d3e:	22ff      	movs	r2, #255	; 0xff
 8000d40:	741a      	strb	r2, [r3, #16]

	receivedColor.colors_indiv.right_front_b = 0;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <ledStartupSequence+0x198>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	729a      	strb	r2, [r3, #10]
	receivedColor.colors_indiv.right_front_g = 255;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <ledStartupSequence+0x198>)
 8000d4a:	22ff      	movs	r2, #255	; 0xff
 8000d4c:	725a      	strb	r2, [r3, #9]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <ledStartupSequence+0x19c>)
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	2300      	movs	r3, #0
 8000d54:	2200      	movs	r2, #0
 8000d56:	4913      	ldr	r1, [pc, #76]	; (8000da4 <ledStartupSequence+0x198>)
 8000d58:	f00d fb6c 	bl	800e434 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000d5c:	20c8      	movs	r0, #200	; 0xc8
 8000d5e:	f00d f8ca 	bl	800def6 <osDelay>

	receivedColor.colors_indiv.right_top_r = 0;
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <ledStartupSequence+0x198>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	741a      	strb	r2, [r3, #16]

	receivedColor.colors_indiv.right_front_g = 0;
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <ledStartupSequence+0x198>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	725a      	strb	r2, [r3, #9]
	receivedColor.colors_indiv.right_front_r = 255;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <ledStartupSequence+0x198>)
 8000d70:	22ff      	movs	r2, #255	; 0xff
 8000d72:	73da      	strb	r2, [r3, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <ledStartupSequence+0x19c>)
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4909      	ldr	r1, [pc, #36]	; (8000da4 <ledStartupSequence+0x198>)
 8000d7e:	f00d fb59 	bl	800e434 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000d82:	20c8      	movs	r0, #200	; 0xc8
 8000d84:	f00d f8b7 	bl	800def6 <osDelay>

	receivedColor.colors_indiv.right_front_r = 0;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <ledStartupSequence+0x198>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	73da      	strb	r2, [r3, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <ledStartupSequence+0x19c>)
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	2300      	movs	r3, #0
 8000d94:	2200      	movs	r2, #0
 8000d96:	4903      	ldr	r1, [pc, #12]	; (8000da4 <ledStartupSequence+0x198>)
 8000d98:	f00d fb4c 	bl	800e434 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);

	ledDisconnectNotification();
 8000d9c:	f000 f806 	bl	8000dac <ledDisconnectNotification>
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20003d80 	.word	0x20003d80
 8000da8:	20000218 	.word	0x20000218

08000dac <ledDisconnectNotification>:

void ledDisconnectNotification(void){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	resetColor(&receivedColor);
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <ledDisconnectNotification+0x3c>)
 8000db2:	f000 f81d 	bl	8000df0 <resetColor>

	receivedColor.colors_indiv.left_side_g = 0;
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <ledDisconnectNotification+0x3c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	715a      	strb	r2, [r3, #5]
	receivedColor.colors_indiv.right_side_g = 0;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <ledDisconnectNotification+0x3c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	739a      	strb	r2, [r3, #14]
	receivedColor.colors_indiv.left_side_b = 50;
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <ledDisconnectNotification+0x3c>)
 8000dc4:	2232      	movs	r2, #50	; 0x32
 8000dc6:	711a      	strb	r2, [r3, #4]
	receivedColor.colors_indiv.right_side_b = 50;
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <ledDisconnectNotification+0x3c>)
 8000dca:	2232      	movs	r2, #50	; 0x32
 8000dcc:	735a      	strb	r2, [r3, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <ledDisconnectNotification+0x40>)
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4904      	ldr	r1, [pc, #16]	; (8000de8 <ledDisconnectNotification+0x3c>)
 8000dd8:	f00d fb2c 	bl	800e434 <osMessageQueuePut>
	osDelay(10);
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f00d f88a 	bl	800def6 <osDelay>
//	FrontLightsSet(&receivedColor);
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20003d80 	.word	0x20003d80
 8000dec:	20000218 	.word	0x20000218

08000df0 <resetColor>:
	receivedColor.colors_indiv.left_front_r = 255;
	receivedColor.colors_indiv.right_front_r = 255;
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
}

void resetColor(union ColorComplex * colorComplex){
 8000df0:	b4b0      	push	{r4, r5, r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	memcpy(colorComplex,&EmptyColorComplex,sizeof(union ColorComplex));;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <resetColor+0x28>)
 8000dfc:	461d      	mov	r5, r3
 8000dfe:	4614      	mov	r4, r2
 8000e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e02:	6028      	str	r0, [r5, #0]
 8000e04:	6069      	str	r1, [r5, #4]
 8000e06:	60aa      	str	r2, [r5, #8]
 8000e08:	60eb      	str	r3, [r5, #12]
 8000e0a:	8823      	ldrh	r3, [r4, #0]
 8000e0c:	822b      	strh	r3, [r5, #16]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bcb0      	pop	{r4, r5, r7}
 8000e16:	4770      	bx	lr
 8000e18:	08013230 	.word	0x08013230

08000e1c <LL_RCC_LSE_SetDriveCapability>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e2c:	f023 0218 	bic.w	r2, r3, #24
 8000e30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f000 ff70 	bl	8001d30 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8000e50:	f7ff fb32 	bl	80004b8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e54:	f000 f822 	bl	8000e9c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e58:	f000 f89e 	bl	8000f98 <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8000e5c:	f7ff fde2 	bl	8000a24 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f7ff fc20 	bl	80006a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e64:	f7ff f9a6 	bl	80001b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e68:	f7ff fca6 	bl	80007b8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000e6c:	f7ff fce4 	bl	8000838 <MX_I2C3_Init>
  MX_RF_Init();
 8000e70:	f000 f8e5 	bl	800103e <MX_RF_Init>
  MX_RTC_Init();
 8000e74:	f000 f914 	bl	80010a0 <MX_RTC_Init>
  MX_SAI1_Init();
 8000e78:	f000 f982 	bl	8001180 <MX_SAI1_Init>
  MX_SPI1_Init();
 8000e7c:	f000 fa7c 	bl	8001378 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e80:	f000 fab8 	bl	80013f4 <MX_SPI2_Init>
  MX_TIM16_Init();
 8000e84:	f000 fe58 	bl	8001b38 <MX_TIM16_Init>
  MX_USB_Device_Init();
 8000e88:	f010 fe88 	bl	8011b9c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000e8c:	f00c fe88 	bl	800dba0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000e90:	f7ff fb9c 	bl	80005cc <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 8000e94:	f00c fea8 	bl	800dbe8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000e98:	e7fe      	b.n	8000e98 <main+0x50>
	...

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b09a      	sub	sp, #104	; 0x68
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 0320 	add.w	r3, r7, #32
 8000ea6:	2248      	movs	r2, #72	; 0x48
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f012 f820 	bl	8012ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ec2:	f004 fc4b 	bl	800575c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ffa8 	bl	8000e1c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ecc:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <SystemClock_Config+0xf8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ed4:	4a2f      	ldr	r2, [pc, #188]	; (8000f94 <SystemClock_Config+0xf8>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <SystemClock_Config+0xf8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000ee8:	2327      	movs	r3, #39	; 0x27
 8000eea:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000efc:	2301      	movs	r3, #1
 8000efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f00:	2340      	movs	r3, #64	; 0x40
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f10:	2301      	movs	r3, #1
 8000f12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000f14:	2310      	movs	r3, #16
 8000f16:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000f18:	2320      	movs	r3, #32
 8000f1a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f20:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000f22:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f26:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	4618      	mov	r0, r3
 8000f34:	f004 ffc2 	bl	8005ebc <HAL_RCC_OscConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bf14      	ite	ne
 8000f3e:	2301      	movne	r3, #1
 8000f40:	2300      	moveq	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000f48:	f000 f874 	bl	8001034 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000f4c:	236f      	movs	r3, #111	; 0x6f
 8000f4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f50:	2303      	movs	r3, #3
 8000f52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f005 fb31 	bl	80065d4 <HAL_RCC_ClockConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000f82:	f000 f857 	bl	8001034 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f86:	f006 ff0c 	bl	8007da2 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f8a:	bf00      	nop
 8000f8c:	3768      	adds	r7, #104	; 0x68
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	58000400 	.word	0x58000400

08000f98 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2250      	movs	r2, #80	; 0x50
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f011 ffa3 	bl	8012ef0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8000faa:	f44f 5355 	mov.w	r3, #13632	; 0x3540
 8000fae:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 12;
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fbe:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000fc0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fc4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_USBCLK
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <_Z24PeriphCommonClock_Configv+0x74>)
 8000fc8:	617b      	str	r3, [r7, #20]
                              |RCC_PLLSAI1_ADCCLK;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000fce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000fda:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fde:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 f94c 	bl	8007288 <HAL_RCCEx_PeriphCLKConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf14      	ite	ne
 8000ff6:	2301      	movne	r3, #1
 8000ff8:	2300      	moveq	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <_Z24PeriphCommonClock_Configv+0x6c>
  {
    Error_Handler();
 8001000:	f000 f818 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001004:	bf00      	nop
 8001006:	3750      	adds	r7, #80	; 0x50
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	11010000 	.word	0x11010000

08001010 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001022:	f000 fea5 	bl	8001d70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40012c00 	.word	0x40012c00

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800103c:	e7fe      	b.n	800103c <Error_Handler+0x8>

0800103e <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_RCC_EnableRTC>:
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800105c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <LL_APB1_GRP1_EnableClock>:
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800107a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800107c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4313      	orrs	r3, r2
 8001084:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4013      	ands	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_RTC_Init+0x4c>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_RTC_Init+0x50>)
 80010a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <MX_RTC_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_RTC_Init+0x4c>)
 80010b2:	220f      	movs	r2, #15
 80010b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <MX_RTC_Init+0x4c>)
 80010b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80010bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_RTC_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_RTC_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_RTC_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_RTC_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_RTC_Init+0x4c>)
 80010d8:	f007 f928 	bl	800832c <HAL_RTC_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80010e2:	f7ff ffa7 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20003da8 	.word	0x20003da8
 80010f0:	40002800 	.word	0x40002800

080010f4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b096      	sub	sp, #88	; 0x58
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	2250      	movs	r2, #80	; 0x50
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f011 fef3 	bl	8012ef0 <memset>
  if(rtcHandle->Instance==RTC)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <HAL_RTC_MspInit+0x54>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d115      	bne.n	8001140 <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001114:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001118:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800111a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	4618      	mov	r0, r3
 8001126:	f006 f8af 	bl	8007288 <HAL_RCCEx_PeriphCLKConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001130:	f7ff ff80 	bl	8001034 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001134:	f7ff ff8a 	bl	800104c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001138:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800113c:	f7ff ff97 	bl	800106e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001140:	bf00      	nop
 8001142:	3758      	adds	r7, #88	; 0x58
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40002800 	.word	0x40002800

0800114c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001158:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800115a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4313      	orrs	r3, r2
 8001162:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4013      	ands	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001170:	68fb      	ldr	r3, [r7, #12]
}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_SAI1_Init+0x68>)
 8001186:	4a19      	ldr	r2, [pc, #100]	; (80011ec <MX_SAI1_Init+0x6c>)
 8001188:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_SAI1_Init+0x68>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_SAI1_Init+0x68>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_SAI1_Init+0x68>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_SAI1_Init+0x68>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_SAI1_Init+0x68>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_SAI1_Init+0x68>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_SAI1_Init+0x68>)
 80011b0:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <MX_SAI1_Init+0x70>)
 80011b2:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_SAI1_Init+0x68>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_SAI1_Init+0x68>)
 80011bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_SAI1_Init+0x68>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_SAI1_Init+0x68>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80011ce:	2302      	movs	r3, #2
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_SAI1_Init+0x68>)
 80011d6:	f007 f997 	bl	8008508 <HAL_SAI_InitProtocol>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_SAI1_Init+0x64>
  {
    Error_Handler();
 80011e0:	f7ff ff28 	bl	8001034 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20003dcc 	.word	0x20003dcc
 80011ec:	40015404 	.word	0x40015404
 80011f0:	0002ee00 	.word	0x0002ee00

080011f4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a1a      	ldr	r2, [pc, #104]	; (800126c <HAL_SAI_MspInit+0x78>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d12d      	bne.n	8001262 <HAL_SAI_MspInit+0x6e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_SAI_MspInit+0x7c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <HAL_SAI_MspInit+0x22>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800120e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001212:	f7ff ff9b 	bl	800114c <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_SAI_MspInit+0x7c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <HAL_SAI_MspInit+0x7c>)
 800121e:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB13     ------> SAI1_SCK_A
    PB12     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001220:	2308      	movs	r3, #8
 8001222:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001230:	230d      	movs	r3, #13
 8001232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4619      	mov	r1, r3
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <HAL_SAI_MspInit+0x80>)
 800123c:	f001 fd4e 	bl	8002cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001240:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001244:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001252:	230d      	movs	r3, #13
 8001254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	4619      	mov	r1, r3
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <HAL_SAI_MspInit+0x84>)
 800125e:	f001 fd3d 	bl	8002cdc <HAL_GPIO_Init>

    }
}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40015404 	.word	0x40015404
 8001270:	20000250 	.word	0x20000250
 8001274:	48000800 	.word	0x48000800
 8001278:	48000400 	.word	0x48000400

0800127c <_Z41__static_initialization_and_destruction_0ii>:
	}
}

static void triggerSpectrometerSample(void *argument) {
	osThreadFlagsSet(specTaskHandle, GRAB_SAMPLE_BIT);
}
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d107      	bne.n	800129c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001292:	4293      	cmp	r3, r2
 8001294:	d102      	bne.n	800129c <_Z41__static_initialization_and_destruction_0ii+0x20>
Adafruit_AS7341 specSensor;
 8001296:	4809      	ldr	r0, [pc, #36]	; (80012bc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001298:	f00c f8a8 	bl	800d3ec <_ZN15Adafruit_AS7341C1Ev>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d107      	bne.n	80012b2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d102      	bne.n	80012b2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80012ae:	f00c f8b7 	bl	800d420 <_ZN15Adafruit_AS7341D1Ev>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000254 	.word	0x20000254

080012c0 <_GLOBAL__sub_I_periodicSpecTimer_id>:
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012c8:	2001      	movs	r0, #1
 80012ca:	f7ff ffd7 	bl	800127c <_Z41__static_initialization_and_destruction_0ii>
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_GLOBAL__sub_D_periodicSpecTimer_id>:
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff ffcf 	bl	800127c <_Z41__static_initialization_and_destruction_0ii>
 80012de:	bd80      	pop	{r7, pc}

080012e0 <LL_AHB2_GRP1_EnableClock>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <LL_APB1_GRP1_EnableClock>:
{
 8001312:	b480      	push	{r7}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800131a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001320:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4313      	orrs	r3, r2
 8001328:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4013      	ands	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_APB2_GRP1_EnableClock>:
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800134c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001350:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4313      	orrs	r3, r2
 800135a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800135c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001360:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4013      	ands	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001368:	68fb      	ldr	r3, [r7, #12]
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_SPI1_Init+0x74>)
 800137e:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <MX_SPI1_Init+0x78>)
 8001380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_SPI1_Init+0x74>)
 8001384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_SPI1_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_SPI1_Init+0x74>)
 8001392:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001396:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_SPI1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_SPI1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_SPI1_Init+0x74>)
 80013a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_SPI1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_SPI1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_SPI1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_SPI1_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_SPI1_Init+0x74>)
 80013c6:	2207      	movs	r2, #7
 80013c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_SPI1_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_SPI1_Init+0x74>)
 80013d2:	2208      	movs	r2, #8
 80013d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_SPI1_Init+0x74>)
 80013d8:	f007 fbc8 	bl	8008b6c <HAL_SPI_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013e2:	f7ff fe27 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20003ec8 	.word	0x20003ec8
 80013f0:	40013000 	.word	0x40013000

080013f4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_SPI2_Init+0x74>)
 80013fa:	4a1c      	ldr	r2, [pc, #112]	; (800146c <MX_SPI2_Init+0x78>)
 80013fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_SPI2_Init+0x74>)
 8001400:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001404:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_SPI2_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_SPI2_Init+0x74>)
 800140e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001412:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_SPI2_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_SPI2_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_SPI2_Init+0x74>)
 8001422:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001426:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_SPI2_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_SPI2_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_SPI2_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_SPI2_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_SPI2_Init+0x74>)
 8001442:	2207      	movs	r2, #7
 8001444:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <MX_SPI2_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_SPI2_Init+0x74>)
 800144e:	2208      	movs	r2, #8
 8001450:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_SPI2_Init+0x74>)
 8001454:	f007 fb8a 	bl	8008b6c <HAL_SPI_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800145e:	f7ff fde9 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20003e64 	.word	0x20003e64
 800146c:	40003800 	.word	0x40003800

08001470 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a31      	ldr	r2, [pc, #196]	; (8001554 <HAL_SPI_MspInit+0xe4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d12c      	bne.n	80014ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001492:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001496:	f7ff ff55 	bl	8001344 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2002      	movs	r0, #2
 800149c:	f7ff ff20 	bl	80012e0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff ff1d 	bl	80012e0 <LL_AHB2_GRP1_EnableClock>
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 80014a6:	2338      	movs	r3, #56	; 0x38
 80014a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b6:	2305      	movs	r3, #5
 80014b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	4619      	mov	r1, r3
 80014c0:	4825      	ldr	r0, [pc, #148]	; (8001558 <HAL_SPI_MspInit+0xe8>)
 80014c2:	f001 fc0b 	bl	8002cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014d8:	2305      	movs	r3, #5
 80014da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f001 fbf9 	bl	8002cdc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80014ea:	e02f      	b.n	800154c <HAL_SPI_MspInit+0xdc>
  else if(spiHandle->Instance==SPI2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1a      	ldr	r2, [pc, #104]	; (800155c <HAL_SPI_MspInit+0xec>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d12a      	bne.n	800154c <HAL_SPI_MspInit+0xdc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014fa:	f7ff ff0a 	bl	8001312 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fe:	2008      	movs	r0, #8
 8001500:	f7ff feee 	bl	80012e0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	2002      	movs	r0, #2
 8001506:	f7ff feeb 	bl	80012e0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800150a:	2303      	movs	r3, #3
 800150c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800151a:	2305      	movs	r3, #5
 800151c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	4619      	mov	r1, r3
 8001524:	480e      	ldr	r0, [pc, #56]	; (8001560 <HAL_SPI_MspInit+0xf0>)
 8001526:	f001 fbd9 	bl	8002cdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800152a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800152e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800153c:	2305      	movs	r3, #5
 800153e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4619      	mov	r1, r3
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <HAL_SPI_MspInit+0xe8>)
 8001548:	f001 fbc8 	bl	8002cdc <HAL_GPIO_Init>
}
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40013000 	.word	0x40013000
 8001558:	48000400 	.word	0x48000400
 800155c:	40003800 	.word	0x40003800
 8001560:	48000c00 	.word	0x48000c00

08001564 <LL_AHB3_GRP1_EnableClock>:
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800156c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4313      	orrs	r3, r2
 800157a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4013      	ands	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001588:	68fb      	ldr	r3, [r7, #12]
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800159a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800159e:	f7ff ffe1 	bl	8001564 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	210f      	movs	r1, #15
 80015a6:	f06f 0001 	mvn.w	r0, #1
 80015aa:	f001 fb6f 	bl	8002c8c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2105      	movs	r1, #5
 80015b2:	202e      	movs	r0, #46	; 0x2e
 80015b4:	f001 fb6a 	bl	8002c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80015b8:	202e      	movs	r0, #46	; 0x2e
 80015ba:	f001 fb81 	bl	8002cc0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <LL_APB2_GRP1_EnableClock>:
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80015ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4013      	ands	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015e6:	68fb      	ldr	r3, [r7, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	; 0x30
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	2019      	movs	r0, #25
 800160a:	f001 fb3f 	bl	8002c8c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800160e:	2019      	movs	r0, #25
 8001610:	f001 fb56 	bl	8002cc0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001614:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001618:	f7ff ffd3 	bl	80015c2 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800161c:	f107 0208 	add.w	r2, r7, #8
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f005 f9aa 	bl	8006980 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800162c:	f005 f992 	bl	8006954 <HAL_RCC_GetPCLK2Freq>
 8001630:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001634:	4a12      	ldr	r2, [pc, #72]	; (8001680 <HAL_InitTick+0x8c>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	0c9b      	lsrs	r3, r3, #18
 800163c:	3b01      	subs	r3, #1
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_InitTick+0x90>)
 8001642:	4a11      	ldr	r2, [pc, #68]	; (8001688 <HAL_InitTick+0x94>)
 8001644:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_InitTick+0x90>)
 8001648:	f240 32e7 	movw	r2, #999	; 0x3e7
 800164c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800164e:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_InitTick+0x90>)
 8001650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001652:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_InitTick+0x90>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_InitTick+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001660:	4808      	ldr	r0, [pc, #32]	; (8001684 <HAL_InitTick+0x90>)
 8001662:	f007 fb26 	bl	8008cb2 <HAL_TIM_Base_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d104      	bne.n	8001676 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_InitTick+0x90>)
 800166e:	f007 fb77 	bl	8008d60 <HAL_TIM_Base_Start_IT>
 8001672:	4603      	mov	r3, r0
 8001674:	e000      	b.n	8001678 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
}
 8001678:	4618      	mov	r0, r3
 800167a:	3730      	adds	r7, #48	; 0x30
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	431bde83 	.word	0x431bde83
 8001684:	20003f2c 	.word	0x20003f2c
 8001688:	40012c00 	.word	0x40012c00

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <NMI_Handler+0x4>

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <USB_LP_IRQHandler+0x10>)
 80016be:	f002 fc20 	bl	8003f02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200054d8 	.word	0x200054d8

080016cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80016d2:	f007 fbf4 	bl	8008ebe <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80016d6:	4803      	ldr	r0, [pc, #12]	; (80016e4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80016d8:	f007 fbf1 	bl	8008ebe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20003f2c 	.word	0x20003f2c
 80016e4:	20003f78 	.word	0x20003f78

080016e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <I2C1_EV_IRQHandler+0x10>)
 80016ee:	f001 ff5f 	bl	80035b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20003ce0 	.word	0x20003ce0

080016fc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <I2C3_EV_IRQHandler+0x10>)
 8001702:	f001 ff55 	bl	80035b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20003c94 	.word	0x20003c94

08001710 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001714:	f001 fc6a 	bl	8002fec <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <SystemInit+0x98>)
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001726:	4a23      	ldr	r2, [pc, #140]	; (80017b4 <SystemInit+0x98>)
 8001728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800172c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001744:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001748:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800174a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <SystemInit+0x9c>)
 8001756:	4013      	ands	r3, r2
 8001758:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800175a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001766:	f023 0305 	bic.w	r3, r3, #5
 800176a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800176e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001786:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <SystemInit+0xa0>)
 8001788:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <SystemInit+0xa0>)
 8001790:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800179c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00
 80017b8:	faf6fefb 	.word	0xfaf6fefb
 80017bc:	22041000 	.word	0x22041000

080017c0 <_ZN8CALIPILEC1Ev>:
#define cycTime_60ms  0x01
#define cycTime_120ms 0x02
#define cycTime_140ms 0x03


class CALIPILE
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	721a      	strb	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <Thermopile_Task>:
void grabThermopileSamples(thermopile_packet *data, CALIPILE *tp);

uint16_t thermIdx;
uint32_t thermID;

void Thermopile_Task(void *argument) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	SensorPacket *packet = NULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
//	tp_nose_bridge.setup((uint8_t) THERMOPLE_NOSE_BRIDGE_ADDR, &hi2c1, THERMOPLE_NOSE_BRIDGE_ID);
//	tp_nose_bridge.wake(); 		// wakeup thermopile sensors on i2c1 bus
//	tp_temple_front.setup((uint8_t) THERMOPLE_TEMPLE_FRONT_ADDR, &hi2c3, THERMOPLE_TEMPLE_FRONT_ADDR_ID);
//	tp_temple_front.wake(); 	// wakeup thermopile sensors on i2c3 bus

	osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 80017f0:	4b59      	ldr	r3, [pc, #356]	; (8001958 <Thermopile_Task+0x174>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f8:	4618      	mov	r0, r3
 80017fa:	f00c fd11 	bl	800e220 <osSemaphoreAcquire>
	initThermopiles(&tp_nose_tip,		THERMOPLE_NOSE_TIP_ADDR,	&hi2c1,	THERMOPLE_NOSE_TIP_ID);
 80017fe:	2301      	movs	r3, #1
 8001800:	4a56      	ldr	r2, [pc, #344]	; (800195c <Thermopile_Task+0x178>)
 8001802:	210c      	movs	r1, #12
 8001804:	4856      	ldr	r0, [pc, #344]	; (8001960 <Thermopile_Task+0x17c>)
 8001806:	f000 f8c3 	bl	8001990 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_nose_bridge,	THERMOPLE_NOSE_BRIDGE_ADDR,	&hi2c1, THERMOPLE_NOSE_BRIDGE_ID);
 800180a:	2302      	movs	r3, #2
 800180c:	4a53      	ldr	r2, [pc, #332]	; (800195c <Thermopile_Task+0x178>)
 800180e:	210d      	movs	r1, #13
 8001810:	4854      	ldr	r0, [pc, #336]	; (8001964 <Thermopile_Task+0x180>)
 8001812:	f000 f8bd 	bl	8001990 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_front,	THERMOPLE_TEMPLE_FRONT_ADDR,&hi2c3, THERMOPLE_TEMPLE_FRONT_ADDR_ID);
 8001816:	2303      	movs	r3, #3
 8001818:	4a53      	ldr	r2, [pc, #332]	; (8001968 <Thermopile_Task+0x184>)
 800181a:	210f      	movs	r1, #15
 800181c:	4853      	ldr	r0, [pc, #332]	; (800196c <Thermopile_Task+0x188>)
 800181e:	f000 f8b7 	bl	8001990 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_mid,		THERMOPLE_TEMPLE_MID_ADDR,	&hi2c3, THERMOPLE_TEMPLE_MID_ADDR_ID);
 8001822:	2304      	movs	r3, #4
 8001824:	4a50      	ldr	r2, [pc, #320]	; (8001968 <Thermopile_Task+0x184>)
 8001826:	210e      	movs	r1, #14
 8001828:	4851      	ldr	r0, [pc, #324]	; (8001970 <Thermopile_Task+0x18c>)
 800182a:	f000 f8b1 	bl	8001990 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_back,	THERMOPLE_TEMPLE_BACK_ADDR,	&hi2c3, THERMOPLE_TEMPLE_BACK_ADDR_ID);
 800182e:	2305      	movs	r3, #5
 8001830:	4a4d      	ldr	r2, [pc, #308]	; (8001968 <Thermopile_Task+0x184>)
 8001832:	210c      	movs	r1, #12
 8001834:	484f      	ldr	r0, [pc, #316]	; (8001974 <Thermopile_Task+0x190>)
 8001836:	f000 f8ab 	bl	8001990 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	osSemaphoreRelease(messageI2C1_LockHandle);
 800183a:	4b47      	ldr	r3, [pc, #284]	; (8001958 <Thermopile_Task+0x174>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f00c fd40 	bl	800e2c4 <osSemaphoreRelease>

	header.payloadLength = MAX_THERMOPILE_SAMPLES_PACKET
 8001844:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <Thermopile_Task+0x194>)
 8001846:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 800184a:	60da      	str	r2, [r3, #12]
			* sizeof(thermopile_packet);
	header.reserved[0] = THERMOPILE_SAMPLE_PERIOD_MS;
 800184c:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <Thermopile_Task+0x194>)
 800184e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001852:	611a      	str	r2, [r3, #16]
	header.reserved[1] = THERMOPILE_CNT;
 8001854:	4b48      	ldr	r3, [pc, #288]	; (8001978 <Thermopile_Task+0x194>)
 8001856:	2202      	movs	r2, #2
 8001858:	615a      	str	r2, [r3, #20]

	thermIdx = 0;
 800185a:	4b48      	ldr	r3, [pc, #288]	; (800197c <Thermopile_Task+0x198>)
 800185c:	2200      	movs	r2, #0
 800185e:	801a      	strh	r2, [r3, #0]
	thermID = 0;
 8001860:	4b47      	ldr	r3, [pc, #284]	; (8001980 <Thermopile_Task+0x19c>)
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]

	periodicThermopileTimer_id = osTimerNew(triggerThermopileSample,
 8001866:	2300      	movs	r3, #0
 8001868:	2200      	movs	r2, #0
 800186a:	2101      	movs	r1, #1
 800186c:	4845      	ldr	r0, [pc, #276]	; (8001984 <Thermopile_Task+0x1a0>)
 800186e:	f00c fb73 	bl	800df58 <osTimerNew>
 8001872:	4603      	mov	r3, r0
 8001874:	4a44      	ldr	r2, [pc, #272]	; (8001988 <Thermopile_Task+0x1a4>)
 8001876:	6013      	str	r3, [r2, #0]
			osTimerPeriodic, NULL, NULL);
	osTimerStart(periodicThermopileTimer_id, THERMOPILE_SAMPLE_PERIOD_MS);
 8001878:	4b43      	ldr	r3, [pc, #268]	; (8001988 <Thermopile_Task+0x1a4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001880:	4618      	mov	r0, r3
 8001882:	f00c fbe5 	bl	800e050 <osTimerStart>

	while (1) {

		flags = osThreadFlagsWait(GRAB_SAMPLE_BIT | TERMINATE_THREAD_BIT,
 8001886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800188a:	2100      	movs	r1, #0
 800188c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001890:	f00c fab0 	bl	800ddf4 <osThreadFlagsWait>
 8001894:	60b8      	str	r0, [r7, #8]
				osFlagsWaitAny, osWaitForever);

		if ((flags & GRAB_SAMPLE_BIT) == GRAB_SAMPLE_BIT) {
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d04c      	beq.n	800193a <Thermopile_Task+0x156>

			osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <Thermopile_Task+0x174>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a8:	4618      	mov	r0, r3
 80018aa:	f00c fcb9 	bl	800e220 <osSemaphoreAcquire>

			// sample nose
			grabThermopileSamples(&thermopileData[thermIdx], &tp_nose_tip);
 80018ae:	4b33      	ldr	r3, [pc, #204]	; (800197c <Thermopile_Task+0x198>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4a33      	ldr	r2, [pc, #204]	; (800198c <Thermopile_Task+0x1a8>)
 80018be:	4413      	add	r3, r2
 80018c0:	4927      	ldr	r1, [pc, #156]	; (8001960 <Thermopile_Task+0x17c>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f887 	bl	80019d6 <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
//			queueThermopilePkt(&thermopileData[thermIdx]);

			grabThermopileSamples(&thermopileData[thermIdx], &tp_nose_bridge);
 80018c8:	4b2c      	ldr	r3, [pc, #176]	; (800197c <Thermopile_Task+0x198>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4a2d      	ldr	r2, [pc, #180]	; (800198c <Thermopile_Task+0x1a8>)
 80018d8:	4413      	add	r3, r2
 80018da:	4922      	ldr	r1, [pc, #136]	; (8001964 <Thermopile_Task+0x180>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 f87a 	bl	80019d6 <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
////			queueThermopilePkt(&thermopileData[thermIdx]);
//
//			// sample temple
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_front);
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <Thermopile_Task+0x198>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4a26      	ldr	r2, [pc, #152]	; (800198c <Thermopile_Task+0x1a8>)
 80018f2:	4413      	add	r3, r2
 80018f4:	491d      	ldr	r1, [pc, #116]	; (800196c <Thermopile_Task+0x188>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f86d 	bl	80019d6 <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
////			queueThermopilePkt(&thermopileData[thermIdx]);
////
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_mid);
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <Thermopile_Task+0x198>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4a20      	ldr	r2, [pc, #128]	; (800198c <Thermopile_Task+0x1a8>)
 800190c:	4413      	add	r3, r2
 800190e:	4918      	ldr	r1, [pc, #96]	; (8001970 <Thermopile_Task+0x18c>)
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f860 	bl	80019d6 <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
////			queueThermopilePkt(&thermopileData[thermIdx]);
////
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_back);
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <Thermopile_Task+0x198>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <Thermopile_Task+0x1a8>)
 8001926:	4413      	add	r3, r2
 8001928:	4912      	ldr	r1, [pc, #72]	; (8001974 <Thermopile_Task+0x190>)
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f853 	bl	80019d6 <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
//			queueThermopilePkt(&thermopileData[thermIdx]);

			osSemaphoreRelease(messageI2C1_LockHandle);
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <Thermopile_Task+0x174>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f00c fcc5 	bl	800e2c4 <osSemaphoreRelease>
		}

		if ((flags & TERMINATE_THREAD_BIT) == TERMINATE_THREAD_BIT) {
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0a0      	beq.n	8001886 <Thermopile_Task+0xa2>
			osTimerDelete(periodicThermopileTimer_id);
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <Thermopile_Task+0x1a4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f00c fbaf 	bl	800e0ac <osTimerDelete>
			break;
 800194e:	bf00      	nop
		}
	}

}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000228 	.word	0x20000228
 800195c:	20003ce0 	.word	0x20003ce0
 8001960:	2000046c 	.word	0x2000046c
 8001964:	20000490 	.word	0x20000490
 8001968:	20003c94 	.word	0x20003c94
 800196c:	200004b4 	.word	0x200004b4
 8001970:	200004d8 	.word	0x200004d8
 8001974:	200004fc 	.word	0x200004fc
 8001978:	20000444 	.word	0x20000444
 800197c:	20000520 	.word	0x20000520
 8001980:	20000524 	.word	0x20000524
 8001984:	08001a4d 	.word	0x08001a4d
 8001988:	20000468 	.word	0x20000468
 800198c:	2000027c 	.word	0x2000027c

08001990 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>:

void initThermopiles(CALIPILE *tp, uint8_t address, I2C_HandleTypeDef* i2c_handle, uint8_t descriptor){
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	461a      	mov	r2, r3
 800199c:	460b      	mov	r3, r1
 800199e:	72fb      	strb	r3, [r7, #11]
 80019a0:	4613      	mov	r3, r2
 80019a2:	72bb      	strb	r3, [r7, #10]

	uint16_t Tcounts = 0x83; // set threshold for over temperature interrupt, 0x83 == 67072 counts
 80019a4:	2383      	movs	r3, #131	; 0x83
 80019a6:	82fb      	strh	r3, [r7, #22]
	uint32_t flags = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
	//	uint8_t intStatus;


	tp->setup((uint8_t) address, i2c_handle, descriptor);
 80019ac:	7abb      	ldrb	r3, [r7, #10]
 80019ae:	7af9      	ldrb	r1, [r7, #11]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f00b fdea 	bl	800d58c <_ZN8CALIPILE5setupEhP19__I2C_HandleTypeDefh>

//	if(wakeupFlag==0){
//		tp->wake();
//		wakeupFlag=1;
//	}
	tp->wake();
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f00b fe02 	bl	800d5c2 <_ZN8CALIPILE4wakeEv>
	tp->readEEPROM(); // Verify protocol number and checksum and get calibration constants
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f00b fe1a 	bl	800d5f8 <_ZN8CALIPILE10readEEPROMEv>
	//  tp_outer.initMotion(tcLP1, tcLP2, LPsource, cycTime); // configure presence and motion interrupts
	tp->initTempThr(Tcounts);  // choose something ~5% above TPAMB
 80019c4:	8afb      	ldrh	r3, [r7, #22]
 80019c6:	4619      	mov	r1, r3
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f00b ff13 	bl	800d7f4 <_ZN8CALIPILE11initTempThrEt>
	// read interrupt status register(s) to unlatch interrupt before entering main loop
//	intStatus  = tp.checkIntStatus(); //dont do if not using interrupts

}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>:
		thermID++;
		thermIdx = 0;
	}
}

void grabThermopileSamples(thermopile_packet *data, CALIPILE *tp) {
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
	data->descriptor = tp->descriptor;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	781a      	ldrb	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	701a      	strb	r2, [r3, #0]
	data->timestamp = HAL_GetTick();
 80019e8:	f000 f9d6 	bl	8001d98 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	605a      	str	r2, [r3, #4]
	data->ambientRaw = tp->getTPAMB();
 80019f2:	6838      	ldr	r0, [r7, #0]
 80019f4:	f00b ff3e 	bl	800d874 <_ZN8CALIPILE8getTPAMBEv>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	811a      	strh	r2, [r3, #8]
	data->objectRaw = tp->getTPOBJ();
 8001a00:	6838      	ldr	r0, [r7, #0]
 8001a02:	f00b ff57 	bl	800d8b4 <_ZN8CALIPILE8getTPOBJEv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	60da      	str	r2, [r3, #12]
	data->ambientTemp = tp->getTamb(data->ambientRaw);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	891b      	ldrh	r3, [r3, #8]
 8001a10:	4619      	mov	r1, r3
 8001a12:	6838      	ldr	r0, [r7, #0]
 8001a14:	f00b ff76 	bl	800d904 <_ZN8CALIPILE7getTambEt>
 8001a18:	eef0 7a40 	vmov.f32	s15, s0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	edc3 7a04 	vstr	s15, [r3, #16]
	data->objectTemp = tp->getTobj(data->objectRaw, data->ambientTemp);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a30:	4611      	mov	r1, r2
 8001a32:	6838      	ldr	r0, [r7, #0]
 8001a34:	f00b ff98 	bl	800d968 <_ZN8CALIPILE7getTobjEmf>
 8001a38:	eef0 7a40 	vmov.f32	s15, s0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <triggerThermopileSample>:

static void triggerThermopileSample(void *argument) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(thermopileTaskHandle, GRAB_SAMPLE_BIT);
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <triggerThermopileSample+0x20>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f00c f97b 	bl	800dd58 <osThreadFlagsSet>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000224 	.word	0x20000224

08001a70 <_Z41__static_initialization_and_destruction_0ii>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d113      	bne.n	8001aa8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d10e      	bne.n	8001aa8 <_Z41__static_initialization_and_destruction_0ii+0x38>
CALIPILE tp_nose_tip;
 8001a8a:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001a8c:	f7ff fe98 	bl	80017c0 <_ZN8CALIPILEC1Ev>
CALIPILE tp_nose_bridge;
 8001a90:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001a92:	f7ff fe95 	bl	80017c0 <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_front;
 8001a96:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001a98:	f7ff fe92 	bl	80017c0 <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_mid;
 8001a9c:	4807      	ldr	r0, [pc, #28]	; (8001abc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001a9e:	f7ff fe8f 	bl	80017c0 <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_back;
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001aa4:	f7ff fe8c 	bl	80017c0 <_ZN8CALIPILEC1Ev>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000046c 	.word	0x2000046c
 8001ab4:	20000490 	.word	0x20000490
 8001ab8:	200004b4 	.word	0x200004b4
 8001abc:	200004d8 	.word	0x200004d8
 8001ac0:	200004fc 	.word	0x200004fc

08001ac4 <_GLOBAL__sub_I_periodicThermopileTimer_id>:
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff ffcf 	bl	8001a70 <_Z41__static_initialization_and_destruction_0ii>
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <LL_AHB2_GRP1_EnableClock>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001af8:	68fb      	ldr	r3, [r7, #12]
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_APB2_GRP1_EnableClock>:
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4013      	ands	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b094      	sub	sp, #80	; 0x50
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]
 8001b4e:	615a      	str	r2, [r3, #20]
 8001b50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b52:	463b      	mov	r3, r7
 8001b54:	2234      	movs	r2, #52	; 0x34
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f011 f9c9 	bl	8012ef0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <MX_TIM16_Init+0xec>)
 8001b60:	4a31      	ldr	r2, [pc, #196]	; (8001c28 <MX_TIM16_Init+0xf0>)
 8001b62:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001b64:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <MX_TIM16_Init+0xec>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <MX_TIM16_Init+0xec>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001b70:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <MX_TIM16_Init+0xec>)
 8001b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b76:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b78:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <MX_TIM16_Init+0xec>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <MX_TIM16_Init+0xec>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <MX_TIM16_Init+0xec>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b8a:	4826      	ldr	r0, [pc, #152]	; (8001c24 <MX_TIM16_Init+0xec>)
 8001b8c:	f007 f891 	bl	8008cb2 <HAL_TIM_Base_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001b96:	f7ff fa4d 	bl	8001034 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001b9a:	4822      	ldr	r0, [pc, #136]	; (8001c24 <MX_TIM16_Init+0xec>)
 8001b9c:	f007 f92e 	bl	8008dfc <HAL_TIM_PWM_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001ba6:	f7ff fa45 	bl	8001034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001baa:	2360      	movs	r3, #96	; 0x60
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bca:	2200      	movs	r2, #0
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4815      	ldr	r0, [pc, #84]	; (8001c24 <MX_TIM16_Init+0xec>)
 8001bd0:	f007 fa94 	bl	80090fc <HAL_TIM_PWM_ConfigChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001bda:	f7ff fa2b 	bl	8001034 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001c00:	463b      	mov	r3, r7
 8001c02:	4619      	mov	r1, r3
 8001c04:	4807      	ldr	r0, [pc, #28]	; (8001c24 <MX_TIM16_Init+0xec>)
 8001c06:	f007 fe97 	bl	8009938 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001c10:	f7ff fa10 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <MX_TIM16_Init+0xec>)
 8001c16:	f000 f825 	bl	8001c64 <HAL_TIM_MspPostInit>

}
 8001c1a:	bf00      	nop
 8001c1c:	3750      	adds	r7, #80	; 0x50
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20003f78 	.word	0x20003f78
 8001c28:	40014400 	.word	0x40014400

08001c2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_TIM_Base_MspInit+0x34>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d10b      	bne.n	8001c56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c3e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c42:	f7ff ff60 	bl	8001b06 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	210f      	movs	r1, #15
 8001c4a:	2019      	movs	r0, #25
 8001c4c:	f001 f81e 	bl	8002c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c50:	2019      	movs	r0, #25
 8001c52:	f001 f835 	bl	8002cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40014400 	.word	0x40014400

08001c64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <HAL_TIM_MspPostInit+0x54>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d113      	bne.n	8001cae <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	2002      	movs	r0, #2
 8001c88:	f7ff ff24 	bl	8001ad4 <LL_AHB2_GRP1_EnableClock>
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BLINK_PWM_Pin;
 8001c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001c9e:	230e      	movs	r3, #14
 8001ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLINK_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <HAL_TIM_MspPostInit+0x58>)
 8001caa:	f001 f817 	bl	8002cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001cae:	bf00      	nop
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40014400 	.word	0x40014400
 8001cbc:	48000400 	.word	0x48000400

08001cc0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001cc0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc4:	3304      	adds	r3, #4

08001cc6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001cca:	d3f9      	bcc.n	8001cc0 <CopyDataInit>
  bx lr
 8001ccc:	4770      	bx	lr

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001cce:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001cd0:	3004      	adds	r0, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001cd2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>
  bx lr
 8001cd6:	4770      	bx	lr

08001cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001cda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cdc:	f7ff fd1e 	bl	800171c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001ce0:	480b      	ldr	r0, [pc, #44]	; (8001d10 <LoopForever+0x8>)
 8001ce2:	490c      	ldr	r1, [pc, #48]	; (8001d14 <LoopForever+0xc>)
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <LoopForever+0x10>)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f7ff ffed 	bl	8001cc6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001cec:	480b      	ldr	r0, [pc, #44]	; (8001d1c <LoopForever+0x14>)
 8001cee:	490c      	ldr	r1, [pc, #48]	; (8001d20 <LoopForever+0x18>)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f7ff ffee 	bl	8001cd2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001cf6:	480b      	ldr	r0, [pc, #44]	; (8001d24 <LoopForever+0x1c>)
 8001cf8:	490b      	ldr	r1, [pc, #44]	; (8001d28 <LoopForever+0x20>)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f7ff ffe9 	bl	8001cd2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d00:	f011 f8c2 	bl	8012e88 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001d04:	f7ff f8a0 	bl	8000e48 <main>

08001d08 <LoopForever>:

LoopForever:
  b LoopForever
 8001d08:	e7fe      	b.n	8001d08 <LoopForever>
 8001d0a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001d0c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001d10:	20000004 	.word	0x20000004
 8001d14:	200001fc 	.word	0x200001fc
 8001d18:	080133f4 	.word	0x080133f4
  INIT_BSS _sbss, _ebss
 8001d1c:	200001fc 	.word	0x200001fc
 8001d20:	200057d8 	.word	0x200057d8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001d24:	20030000 	.word	0x20030000
 8001d28:	20030000 	.word	0x20030000

08001d2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC1_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_Init+0x3c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <HAL_Init+0x3c>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d46:	2003      	movs	r0, #3
 8001d48:	f000 ff95 	bl	8002c76 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d4c:	200f      	movs	r0, #15
 8001d4e:	f7ff fc51 	bl	80015f4 <HAL_InitTick>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	71fb      	strb	r3, [r7, #7]
 8001d5c:	e001      	b.n	8001d62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d5e:	f7ff fc1a 	bl	8001596 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d62:	79fb      	ldrb	r3, [r7, #7]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	58004000 	.word	0x58004000

08001d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x20>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_IncTick+0x24>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <HAL_IncTick+0x24>)
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000018 	.word	0x20000018
 8001d94:	20003fc4 	.word	0x20003fc4

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_GetTick+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20003fc4 	.word	0x20003fc4

08001db0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_GetTickPrio+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000014 	.word	0x20000014

08001dc8 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_GetTickFreq+0x14>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000018 	.word	0x20000018

08001de0 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3360      	adds	r3, #96	; 0x60
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <LL_ADC_SetOffset+0x44>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e80:	bf00      	nop
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	03fff000 	.word	0x03fff000

08001e90 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3360      	adds	r3, #96	; 0x60
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3360      	adds	r3, #96	; 0x60
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ee6:	bf00      	nop
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b087      	sub	sp, #28
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3330      	adds	r3, #48	; 0x30
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	4413      	add	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	211f      	movs	r1, #31
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	401a      	ands	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	0e9b      	lsrs	r3, r3, #26
 8001f2a:	f003 011f 	and.w	r1, r3, #31
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001f3e:	bf00      	nop
 8001f40:	371c      	adds	r7, #28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b087      	sub	sp, #28
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3314      	adds	r3, #20
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	0e5b      	lsrs	r3, r3, #25
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	4413      	add	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	0d1b      	lsrs	r3, r3, #20
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2107      	movs	r1, #7
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	401a      	ands	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	0d1b      	lsrs	r3, r3, #20
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001f94:	bf00      	nop
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	401a      	ands	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0318 	and.w	r3, r3, #24
 8001fc2:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fc4:	40d9      	lsrs	r1, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	400b      	ands	r3, r1
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	0007ffff 	.word	0x0007ffff

08001fe8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ff8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6093      	str	r3, [r2, #8]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800201c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002020:	d101      	bne.n	8002026 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002048:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002070:	d101      	bne.n	8002076 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <LL_ADC_IsEnabled+0x18>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <LL_ADC_IsEnabled+0x1a>
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d101      	bne.n	80020c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d101      	bne.n	80020e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e12e      	b.n	8002374 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7fe f8a9 	bl	800027c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff65 	bl	800200c <LL_ADC_IsDeepPowerDownEnabled>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff4b 	bl	8001fe8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff80 	bl	800205c <LL_ADC_IsInternalRegulatorEnabled>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d115      	bne.n	800218e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff64 	bl	8002034 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800216c:	4b83      	ldr	r3, [pc, #524]	; (800237c <HAL_ADC_Init+0x284>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	4a83      	ldr	r2, [pc, #524]	; (8002380 <HAL_ADC_Init+0x288>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	3301      	adds	r3, #1
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002180:	e002      	b.n	8002188 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3b01      	subs	r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f9      	bne.n	8002182 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff62 	bl	800205c <LL_ADC_IsInternalRegulatorEnabled>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10d      	bne.n	80021ba <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	f043 0210 	orr.w	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	f043 0201 	orr.w	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff73 	bl	80020aa <LL_ADC_REG_IsConversionOngoing>
 80021c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f040 80c7 	bne.w	8002362 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 80c3 	bne.w	8002362 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021e4:	f043 0202 	orr.w	r2, r3, #2
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff47 	bl	8002084 <LL_ADC_IsEnabled>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021fc:	4861      	ldr	r0, [pc, #388]	; (8002384 <HAL_ADC_Init+0x28c>)
 80021fe:	f7ff ff41 	bl	8002084 <LL_ADC_IsEnabled>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4619      	mov	r1, r3
 800220e:	485e      	ldr	r0, [pc, #376]	; (8002388 <HAL_ADC_Init+0x290>)
 8002210:	f7ff fde6 	bl	8001de0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7e5b      	ldrb	r3, [r3, #25]
 8002218:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800221e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002224:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800222a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002232:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002234:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d106      	bne.n	8002254 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	3b01      	subs	r3, #1
 800224c:	045b      	lsls	r3, r3, #17
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	2b00      	cmp	r3, #0
 800225a:	d009      	beq.n	8002270 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	4b45      	ldr	r3, [pc, #276]	; (800238c <HAL_ADC_Init+0x294>)
 8002278:	4013      	ands	r3, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	69b9      	ldr	r1, [r7, #24]
 8002280:	430b      	orrs	r3, r1
 8002282:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff0e 	bl	80020aa <LL_ADC_REG_IsConversionOngoing>
 800228e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff1b 	bl	80020d0 <LL_ADC_INJ_IsConversionOngoing>
 800229a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d13d      	bne.n	800231e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d13a      	bne.n	800231e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022ac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022b4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022c4:	f023 0302 	bic.w	r3, r3, #2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	69b9      	ldr	r1, [r7, #24]
 80022ce:	430b      	orrs	r3, r1
 80022d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d118      	bne.n	800230e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022e6:	f023 0304 	bic.w	r3, r3, #4
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022f2:	4311      	orrs	r1, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022f8:	4311      	orrs	r1, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022fe:	430a      	orrs	r2, r1
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	611a      	str	r2, [r3, #16]
 800230c:	e007      	b.n	800231e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d10c      	bne.n	8002340 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	f023 010f 	bic.w	r1, r3, #15
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	1e5a      	subs	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
 800233e:	e007      	b.n	8002350 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 020f 	bic.w	r2, r2, #15
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002354:	f023 0303 	bic.w	r3, r3, #3
 8002358:	f043 0201 	orr.w	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	655a      	str	r2, [r3, #84]	; 0x54
 8002360:	e007      	b.n	8002372 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	f043 0210 	orr.w	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002372:	7ffb      	ldrb	r3, [r7, #31]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000010 	.word	0x20000010
 8002380:	053e2d63 	.word	0x053e2d63
 8002384:	50040000 	.word	0x50040000
 8002388:	50040300 	.word	0x50040300
 800238c:	fff0c007 	.word	0xfff0c007

08002390 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b0b6      	sub	sp, #216	; 0xd8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x22>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e39f      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x762>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fe73 	bl	80020aa <LL_ADC_REG_IsConversionOngoing>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 8384 	bne.w	8002ad4 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	f7ff fd8a 	bl	8001ef2 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fe61 	bl	80020aa <LL_ADC_REG_IsConversionOngoing>
 80023e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fe6d 	bl	80020d0 <LL_ADC_INJ_IsConversionOngoing>
 80023f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 81a6 	bne.w	8002750 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002404:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002408:	2b00      	cmp	r3, #0
 800240a:	f040 81a1 	bne.w	8002750 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	461a      	mov	r2, r3
 800241c:	f7ff fd95 	bl	8001f4a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	08db      	lsrs	r3, r3, #3
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d00a      	beq.n	8002458 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6919      	ldr	r1, [r3, #16]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002452:	f7ff fcf9 	bl	8001e48 <LL_ADC_SetOffset>
 8002456:	e17b      	b.n	8002750 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fd16 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10a      	bne.n	8002484 <HAL_ADC_ConfigChannel+0xf4>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fd0b 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	0e9b      	lsrs	r3, r3, #26
 800247e:	f003 021f 	and.w	r2, r3, #31
 8002482:	e01e      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x132>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fd00 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80024b2:	2320      	movs	r3, #32
 80024b4:	e004      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80024b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d105      	bne.n	80024da <HAL_ADC_ConfigChannel+0x14a>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0e9b      	lsrs	r3, r3, #26
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	e018      	b.n	800250c <HAL_ADC_ConfigChannel+0x17c>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80024ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80024f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80024fe:	2320      	movs	r3, #32
 8002500:	e004      	b.n	800250c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	429a      	cmp	r2, r3
 800250e:	d106      	bne.n	800251e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fccf 	bl	8001ebc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2101      	movs	r1, #1
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fcb3 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <HAL_ADC_ConfigChannel+0x1ba>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fca8 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002540:	4603      	mov	r3, r0
 8002542:	0e9b      	lsrs	r3, r3, #26
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	e01e      	b.n	8002588 <HAL_ADC_ConfigChannel+0x1f8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2101      	movs	r1, #1
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fc9d 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002568:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800256c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002578:	2320      	movs	r3, #32
 800257a:	e004      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800257c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x210>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	e018      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x242>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80025c4:	2320      	movs	r3, #32
 80025c6:	e004      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80025c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d106      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2200      	movs	r2, #0
 80025dc:	2101      	movs	r1, #1
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fc6c 	bl	8001ebc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2102      	movs	r1, #2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fc50 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10a      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x280>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2102      	movs	r1, #2
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fc45 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002606:	4603      	mov	r3, r0
 8002608:	0e9b      	lsrs	r3, r3, #26
 800260a:	f003 021f 	and.w	r2, r3, #31
 800260e:	e01e      	b.n	800264e <HAL_ADC_ConfigChannel+0x2be>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2102      	movs	r1, #2
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fc3a 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800262e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002632:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002636:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800263e:	2320      	movs	r3, #32
 8002640:	e004      	b.n	800264c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002656:	2b00      	cmp	r3, #0
 8002658:	d105      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x2d6>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	0e9b      	lsrs	r3, r3, #26
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	e016      	b.n	8002694 <HAL_ADC_ConfigChannel+0x304>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002678:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800267a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800267e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002686:	2320      	movs	r3, #32
 8002688:	e004      	b.n	8002694 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800268a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	429a      	cmp	r2, r3
 8002696:	d106      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2200      	movs	r2, #0
 800269e:	2102      	movs	r1, #2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fc0b 	bl	8001ebc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2103      	movs	r1, #3
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fbef 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x342>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2103      	movs	r1, #3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fbe4 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	0e9b      	lsrs	r3, r3, #26
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	e017      	b.n	8002702 <HAL_ADC_ConfigChannel+0x372>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2103      	movs	r1, #3
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fbd9 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 80026de:	4603      	mov	r3, r0
 80026e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80026ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026ec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80026ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e003      	b.n	8002700 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80026f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270a:	2b00      	cmp	r3, #0
 800270c:	d105      	bne.n	800271a <HAL_ADC_ConfigChannel+0x38a>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	0e9b      	lsrs	r3, r3, #26
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	e011      	b.n	800273e <HAL_ADC_ConfigChannel+0x3ae>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800272a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800272c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002732:	2320      	movs	r3, #32
 8002734:	e003      	b.n	800273e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	429a      	cmp	r2, r3
 8002740:	d106      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2200      	movs	r2, #0
 8002748:	2103      	movs	r1, #3
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fbb6 	bl	8001ebc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fc95 	bl	8002084 <LL_ADC_IsEnabled>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	f040 81c2 	bne.w	8002ae6 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6819      	ldr	r1, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	461a      	mov	r2, r3
 8002770:	f7ff fc16 	bl	8001fa0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a8e      	ldr	r2, [pc, #568]	; (80029b4 <HAL_ADC_ConfigChannel+0x624>)
 800277a:	4293      	cmp	r3, r2
 800277c:	f040 8130 	bne.w	80029e0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x418>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0e9b      	lsrs	r3, r3, #26
 8002796:	3301      	adds	r3, #1
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	2b09      	cmp	r3, #9
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e019      	b.n	80027dc <HAL_ADC_ConfigChannel+0x44c>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e003      	b.n	80027cc <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80027c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2b09      	cmp	r3, #9
 80027d4:	bf94      	ite	ls
 80027d6:	2301      	movls	r3, #1
 80027d8:	2300      	movhi	r3, #0
 80027da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d079      	beq.n	80028d4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d107      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x46c>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	0e9b      	lsrs	r3, r3, #26
 80027f2:	3301      	adds	r3, #1
 80027f4:	069b      	lsls	r3, r3, #26
 80027f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027fa:	e015      	b.n	8002828 <HAL_ADC_ConfigChannel+0x498>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800280a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800280c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800280e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e003      	b.n	8002820 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	3301      	adds	r3, #1
 8002822:	069b      	lsls	r3, r3, #26
 8002824:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002830:	2b00      	cmp	r3, #0
 8002832:	d109      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x4b8>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	3301      	adds	r3, #1
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	e017      	b.n	8002878 <HAL_ADC_ConfigChannel+0x4e8>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002858:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800285a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002860:	2320      	movs	r3, #32
 8002862:	e003      	b.n	800286c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	3301      	adds	r3, #1
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2101      	movs	r1, #1
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	ea42 0103 	orr.w	r1, r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10a      	bne.n	800289e <HAL_ADC_ConfigChannel+0x50e>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0e9b      	lsrs	r3, r3, #26
 800288e:	3301      	adds	r3, #1
 8002890:	f003 021f 	and.w	r2, r3, #31
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	051b      	lsls	r3, r3, #20
 800289c:	e018      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x540>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e003      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80028ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028d0:	430b      	orrs	r3, r1
 80028d2:	e080      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x560>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0e9b      	lsrs	r3, r3, #26
 80028e6:	3301      	adds	r3, #1
 80028e8:	069b      	lsls	r3, r3, #26
 80028ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ee:	e015      	b.n	800291c <HAL_ADC_ConfigChannel+0x58c>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002908:	2320      	movs	r3, #32
 800290a:	e003      	b.n	8002914 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	3301      	adds	r3, #1
 8002916:	069b      	lsls	r3, r3, #26
 8002918:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <HAL_ADC_ConfigChannel+0x5ac>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	3301      	adds	r3, #1
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	2101      	movs	r1, #1
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	e017      	b.n	800296c <HAL_ADC_ConfigChannel+0x5dc>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	61fb      	str	r3, [r7, #28]
  return result;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002954:	2320      	movs	r3, #32
 8002956:	e003      	b.n	8002960 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	3301      	adds	r3, #1
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	ea42 0103 	orr.w	r1, r2, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10d      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x608>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e9b      	lsrs	r3, r3, #26
 8002982:	3301      	adds	r3, #1
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	3b1e      	subs	r3, #30
 8002990:	051b      	lsls	r3, r3, #20
 8002992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002996:	e01d      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x644>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	613b      	str	r3, [r7, #16]
  return result;
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d103      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e005      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x630>
 80029b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fab3 f383 	clz	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	f003 021f 	and.w	r2, r3, #31
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	3b1e      	subs	r3, #30
 80029ce:	051b      	lsls	r3, r3, #20
 80029d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d4:	430b      	orrs	r3, r1
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	6892      	ldr	r2, [r2, #8]
 80029da:	4619      	mov	r1, r3
 80029dc:	f7ff fab5 	bl	8001f4a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b45      	ldr	r3, [pc, #276]	; (8002afc <HAL_ADC_ConfigChannel+0x76c>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d07c      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029ec:	4844      	ldr	r0, [pc, #272]	; (8002b00 <HAL_ADC_ConfigChannel+0x770>)
 80029ee:	f7ff fa1d 	bl	8001e2c <LL_ADC_GetCommonPathInternalCh>
 80029f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029f6:	4843      	ldr	r0, [pc, #268]	; (8002b04 <HAL_ADC_ConfigChannel+0x774>)
 80029f8:	f7ff fb44 	bl	8002084 <LL_ADC_IsEnabled>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d15e      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a40      	ldr	r2, [pc, #256]	; (8002b08 <HAL_ADC_ConfigChannel+0x778>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d127      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x6cc>
 8002a0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d121      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a39      	ldr	r2, [pc, #228]	; (8002b04 <HAL_ADC_ConfigChannel+0x774>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d161      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4834      	ldr	r0, [pc, #208]	; (8002b00 <HAL_ADC_ConfigChannel+0x770>)
 8002a2e:	f7ff f9ea 	bl	8001e06 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a32:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <HAL_ADC_ConfigChannel+0x77c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	099b      	lsrs	r3, r3, #6
 8002a38:	4a35      	ldr	r2, [pc, #212]	; (8002b10 <HAL_ADC_ConfigChannel+0x780>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002a4c:	e002      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f9      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a5a:	e044      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2c      	ldr	r2, [pc, #176]	; (8002b14 <HAL_ADC_ConfigChannel+0x784>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d113      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x6fe>
 8002a66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10d      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a23      	ldr	r2, [pc, #140]	; (8002b04 <HAL_ADC_ConfigChannel+0x774>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d134      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a84:	4619      	mov	r1, r3
 8002a86:	481e      	ldr	r0, [pc, #120]	; (8002b00 <HAL_ADC_ConfigChannel+0x770>)
 8002a88:	f7ff f9bd 	bl	8001e06 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a8c:	e02b      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a21      	ldr	r2, [pc, #132]	; (8002b18 <HAL_ADC_ConfigChannel+0x788>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d126      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x756>
 8002a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d120      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <HAL_ADC_ConfigChannel+0x774>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d11b      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002aae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ab2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4811      	ldr	r0, [pc, #68]	; (8002b00 <HAL_ADC_ConfigChannel+0x770>)
 8002aba:	f7ff f9a4 	bl	8001e06 <LL_ADC_SetCommonPathInternalCh>
 8002abe:	e012      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ad2:	e008      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002aee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	37d8      	adds	r7, #216	; 0xd8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	80080000 	.word	0x80080000
 8002b00:	50040300 	.word	0x50040300
 8002b04:	50040000 	.word	0x50040000
 8002b08:	c7520000 	.word	0xc7520000
 8002b0c:	20000010 	.word	0x20000010
 8002b10:	053e2d63 	.word	0x053e2d63
 8002b14:	cb840000 	.word	0xcb840000
 8002b18:	80000001 	.word	0x80000001

08002b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4e:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	60d3      	str	r3, [r2, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <__NVIC_GetPriorityGrouping+0x18>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	f003 0307 	and.w	r3, r3, #7
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	db0b      	blt.n	8002baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	f003 021f 	and.w	r2, r3, #31
 8002b98:	4907      	ldr	r1, [pc, #28]	; (8002bb8 <__NVIC_EnableIRQ+0x38>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000e100 	.word	0xe000e100

08002bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	6039      	str	r1, [r7, #0]
 8002bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db0a      	blt.n	8002be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	490c      	ldr	r1, [pc, #48]	; (8002c08 <__NVIC_SetPriority+0x4c>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	0112      	lsls	r2, r2, #4
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	440b      	add	r3, r1
 8002be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be4:	e00a      	b.n	8002bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	4908      	ldr	r1, [pc, #32]	; (8002c0c <__NVIC_SetPriority+0x50>)
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	3b04      	subs	r3, #4
 8002bf4:	0112      	lsls	r2, r2, #4
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	761a      	strb	r2, [r3, #24]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000e100 	.word	0xe000e100
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	; 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f1c3 0307 	rsb	r3, r3, #7
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	bf28      	it	cs
 8002c2e:	2304      	movcs	r3, #4
 8002c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3304      	adds	r3, #4
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d902      	bls.n	8002c40 <NVIC_EncodePriority+0x30>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3b03      	subs	r3, #3
 8002c3e:	e000      	b.n	8002c42 <NVIC_EncodePriority+0x32>
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	401a      	ands	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	43d9      	mvns	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	4313      	orrs	r3, r2
         );
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3724      	adds	r7, #36	; 0x24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ff4c 	bl	8002b1c <__NVIC_SetPriorityGrouping>
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c9a:	f7ff ff63 	bl	8002b64 <__NVIC_GetPriorityGrouping>
 8002c9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	6978      	ldr	r0, [r7, #20]
 8002ca6:	f7ff ffb3 	bl	8002c10 <NVIC_EncodePriority>
 8002caa:	4602      	mov	r2, r0
 8002cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff82 	bl	8002bbc <__NVIC_SetPriority>
}
 8002cb8:	bf00      	nop
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ff56 	bl	8002b80 <__NVIC_EnableIRQ>
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cea:	e14c      	b.n	8002f86 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 813e 	beq.w	8002f80 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d005      	beq.n	8002d1c <HAL_GPIO_Init+0x40>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d130      	bne.n	8002d7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d52:	2201      	movs	r2, #1
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f003 0201 	and.w	r2, r3, #1
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d017      	beq.n	8002dba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	2203      	movs	r2, #3
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d123      	bne.n	8002e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	08da      	lsrs	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3208      	adds	r2, #8
 8002dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	220f      	movs	r2, #15
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	08da      	lsrs	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3208      	adds	r2, #8
 8002e08:	6939      	ldr	r1, [r7, #16]
 8002e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	2203      	movs	r2, #3
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4013      	ands	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0203 	and.w	r2, r3, #3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8098 	beq.w	8002f80 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e50:	4a54      	ldr	r2, [pc, #336]	; (8002fa4 <HAL_GPIO_Init+0x2c8>)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3302      	adds	r3, #2
 8002e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	220f      	movs	r2, #15
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e7a:	d019      	beq.n	8002eb0 <HAL_GPIO_Init+0x1d4>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a4a      	ldr	r2, [pc, #296]	; (8002fa8 <HAL_GPIO_Init+0x2cc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d013      	beq.n	8002eac <HAL_GPIO_Init+0x1d0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a49      	ldr	r2, [pc, #292]	; (8002fac <HAL_GPIO_Init+0x2d0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00d      	beq.n	8002ea8 <HAL_GPIO_Init+0x1cc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a48      	ldr	r2, [pc, #288]	; (8002fb0 <HAL_GPIO_Init+0x2d4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d007      	beq.n	8002ea4 <HAL_GPIO_Init+0x1c8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a47      	ldr	r2, [pc, #284]	; (8002fb4 <HAL_GPIO_Init+0x2d8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <HAL_GPIO_Init+0x1c4>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	e008      	b.n	8002eb2 <HAL_GPIO_Init+0x1d6>
 8002ea0:	2307      	movs	r3, #7
 8002ea2:	e006      	b.n	8002eb2 <HAL_GPIO_Init+0x1d6>
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e004      	b.n	8002eb2 <HAL_GPIO_Init+0x1d6>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e002      	b.n	8002eb2 <HAL_GPIO_Init+0x1d6>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_GPIO_Init+0x1d6>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	f002 0203 	and.w	r2, r2, #3
 8002eb8:	0092      	lsls	r2, r2, #2
 8002eba:	4093      	lsls	r3, r2
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ec2:	4938      	ldr	r1, [pc, #224]	; (8002fa4 <HAL_GPIO_Init+0x2c8>)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	089b      	lsrs	r3, r3, #2
 8002ec8:	3302      	adds	r3, #2
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ed0:	4b39      	ldr	r3, [pc, #228]	; (8002fb8 <HAL_GPIO_Init+0x2dc>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ef4:	4a30      	ldr	r2, [pc, #192]	; (8002fb8 <HAL_GPIO_Init+0x2dc>)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002efa:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <HAL_GPIO_Init+0x2dc>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f1e:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <HAL_GPIO_Init+0x2dc>)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f24:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <HAL_GPIO_Init+0x2dc>)
 8002f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f4a:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <HAL_GPIO_Init+0x2dc>)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_GPIO_Init+0x2dc>)
 8002f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f78:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <HAL_GPIO_Init+0x2dc>)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	3301      	adds	r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f47f aeab 	bne.w	8002cec <HAL_GPIO_Init+0x10>
  }
}
 8002f96:	bf00      	nop
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	48000400 	.word	0x48000400
 8002fac:	48000800 	.word	0x48000800
 8002fb0:	48000c00 	.word	0x48000c00
 8002fb4:	48001000 	.word	0x48001000
 8002fb8:	58000800 	.word	0x58000800

08002fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fcc:	787b      	ldrb	r3, [r7, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fd8:	e002      	b.n	8002fe0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fda:	887a      	ldrh	r2, [r7, #2]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_HSEM_IRQHandler+0x30>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_HSEM_IRQHandler+0x30>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	4906      	ldr	r1, [pc, #24]	; (800301c <HAL_HSEM_IRQHandler+0x30>)
 8003002:	4013      	ands	r3, r2
 8003004:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <HAL_HSEM_IRQHandler+0x30>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f807 	bl	8003020 <HAL_HSEM_FreeCallback>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	58001500 	.word	0x58001500

08003020 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e081      	b.n	800314a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd fc2c 	bl	80008b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2224      	movs	r2, #36	; 0x24
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003084:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003094:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	e006      	b.n	80030bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d104      	bne.n	80030ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69d9      	ldr	r1, [r3, #28]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1a      	ldr	r2, [r3, #32]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4603      	mov	r3, r0
 8003164:	817b      	strh	r3, [r7, #10]
 8003166:	460b      	mov	r3, r1
 8003168:	813b      	strh	r3, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b20      	cmp	r3, #32
 8003178:	f040 80f9 	bne.w	800336e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_I2C_Mem_Write+0x34>
 8003182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0ed      	b.n	8003370 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_I2C_Mem_Write+0x4e>
 800319e:	2302      	movs	r3, #2
 80031a0:	e0e6      	b.n	8003370 <HAL_I2C_Mem_Write+0x21c>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031aa:	f7fe fdf5 	bl	8001d98 <HAL_GetTick>
 80031ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2319      	movs	r3, #25
 80031b6:	2201      	movs	r2, #1
 80031b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fadd 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0d1      	b.n	8003370 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2221      	movs	r2, #33	; 0x21
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2240      	movs	r2, #64	; 0x40
 80031d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031f4:	88f8      	ldrh	r0, [r7, #6]
 80031f6:	893a      	ldrh	r2, [r7, #8]
 80031f8:	8979      	ldrh	r1, [r7, #10]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	4603      	mov	r3, r0
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f9ed 	bl	80035e4 <I2C_RequestMemoryWrite>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0a9      	b.n	8003370 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	2bff      	cmp	r3, #255	; 0xff
 8003224:	d90e      	bls.n	8003244 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	22ff      	movs	r2, #255	; 0xff
 800322a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	b2da      	uxtb	r2, r3
 8003232:	8979      	ldrh	r1, [r7, #10]
 8003234:	2300      	movs	r3, #0
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fc09 	bl	8003a54 <I2C_TransferConfig>
 8003242:	e00f      	b.n	8003264 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003252:	b2da      	uxtb	r2, r3
 8003254:	8979      	ldrh	r1, [r7, #10]
 8003256:	2300      	movs	r3, #0
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 fbf8 	bl	8003a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 fac7 	bl	80037fc <I2C_WaitOnTXISFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e07b      	b.n	8003370 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d034      	beq.n	800331c <HAL_I2C_Mem_Write+0x1c8>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d130      	bne.n	800331c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	2200      	movs	r2, #0
 80032c2:	2180      	movs	r1, #128	; 0x80
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fa59 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e04d      	b.n	8003370 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2bff      	cmp	r3, #255	; 0xff
 80032dc:	d90e      	bls.n	80032fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	22ff      	movs	r2, #255	; 0xff
 80032e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	8979      	ldrh	r1, [r7, #10]
 80032ec:	2300      	movs	r3, #0
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fbad 	bl	8003a54 <I2C_TransferConfig>
 80032fa:	e00f      	b.n	800331c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	8979      	ldrh	r1, [r7, #10]
 800330e:	2300      	movs	r3, #0
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fb9c 	bl	8003a54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d19e      	bne.n	8003264 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 faa6 	bl	800387c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e01a      	b.n	8003370 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2220      	movs	r2, #32
 8003340:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <HAL_I2C_Mem_Write+0x224>)
 800334e:	400b      	ands	r3, r1
 8003350:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800336e:	2302      	movs	r3, #2
  }
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	fe00e800 	.word	0xfe00e800

0800337c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	4608      	mov	r0, r1
 8003386:	4611      	mov	r1, r2
 8003388:	461a      	mov	r2, r3
 800338a:	4603      	mov	r3, r0
 800338c:	817b      	strh	r3, [r7, #10]
 800338e:	460b      	mov	r3, r1
 8003390:	813b      	strh	r3, [r7, #8]
 8003392:	4613      	mov	r3, r2
 8003394:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b20      	cmp	r3, #32
 80033a0:	f040 80fd 	bne.w	800359e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_I2C_Mem_Read+0x34>
 80033aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0f1      	b.n	80035a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_I2C_Mem_Read+0x4e>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0ea      	b.n	80035a0 <HAL_I2C_Mem_Read+0x224>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033d2:	f7fe fce1 	bl	8001d98 <HAL_GetTick>
 80033d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	2319      	movs	r3, #25
 80033de:	2201      	movs	r2, #1
 80033e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f9c9 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0d5      	b.n	80035a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2222      	movs	r2, #34	; 0x22
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2240      	movs	r2, #64	; 0x40
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a3a      	ldr	r2, [r7, #32]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003414:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800341c:	88f8      	ldrh	r0, [r7, #6]
 800341e:	893a      	ldrh	r2, [r7, #8]
 8003420:	8979      	ldrh	r1, [r7, #10]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	4603      	mov	r3, r0
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f92d 	bl	800368c <I2C_RequestMemoryRead>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0ad      	b.n	80035a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	2bff      	cmp	r3, #255	; 0xff
 800344c:	d90e      	bls.n	800346c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	22ff      	movs	r2, #255	; 0xff
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	b2da      	uxtb	r2, r3
 800345a:	8979      	ldrh	r1, [r7, #10]
 800345c:	4b52      	ldr	r3, [pc, #328]	; (80035a8 <HAL_I2C_Mem_Read+0x22c>)
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 faf5 	bl	8003a54 <I2C_TransferConfig>
 800346a:	e00f      	b.n	800348c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347a:	b2da      	uxtb	r2, r3
 800347c:	8979      	ldrh	r1, [r7, #10]
 800347e:	4b4a      	ldr	r3, [pc, #296]	; (80035a8 <HAL_I2C_Mem_Read+0x22c>)
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fae4 	bl	8003a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	2200      	movs	r2, #0
 8003494:	2104      	movs	r1, #4
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f970 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e07c      	b.n	80035a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d034      	beq.n	800354c <HAL_I2C_Mem_Read+0x1d0>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d130      	bne.n	800354c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	2200      	movs	r2, #0
 80034f2:	2180      	movs	r1, #128	; 0x80
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f941 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e04d      	b.n	80035a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	2bff      	cmp	r3, #255	; 0xff
 800350c:	d90e      	bls.n	800352c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	22ff      	movs	r2, #255	; 0xff
 8003512:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	b2da      	uxtb	r2, r3
 800351a:	8979      	ldrh	r1, [r7, #10]
 800351c:	2300      	movs	r3, #0
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fa95 	bl	8003a54 <I2C_TransferConfig>
 800352a:	e00f      	b.n	800354c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353a:	b2da      	uxtb	r2, r3
 800353c:	8979      	ldrh	r1, [r7, #10]
 800353e:	2300      	movs	r3, #0
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fa84 	bl	8003a54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d19a      	bne.n	800348c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f98e 	bl	800387c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e01a      	b.n	80035a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2220      	movs	r2, #32
 8003570:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_I2C_Mem_Read+0x230>)
 800357e:	400b      	ands	r3, r1
 8003580:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	e000      	b.n	80035a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800359e:	2302      	movs	r3, #2
  }
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	80002400 	.word	0x80002400
 80035ac:	fe00e800 	.word	0xfe00e800

080035b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	68f9      	ldr	r1, [r7, #12]
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	4798      	blx	r3
  }
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	4608      	mov	r0, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	461a      	mov	r2, r3
 80035f2:	4603      	mov	r3, r0
 80035f4:	817b      	strh	r3, [r7, #10]
 80035f6:	460b      	mov	r3, r1
 80035f8:	813b      	strh	r3, [r7, #8]
 80035fa:	4613      	mov	r3, r2
 80035fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	8979      	ldrh	r1, [r7, #10]
 8003604:	4b20      	ldr	r3, [pc, #128]	; (8003688 <I2C_RequestMemoryWrite+0xa4>)
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fa21 	bl	8003a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	69b9      	ldr	r1, [r7, #24]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f8f0 	bl	80037fc <I2C_WaitOnTXISFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e02c      	b.n	8003680 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800362c:	893b      	ldrh	r3, [r7, #8]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	629a      	str	r2, [r3, #40]	; 0x28
 8003636:	e015      	b.n	8003664 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003638:	893b      	ldrh	r3, [r7, #8]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	b29b      	uxth	r3, r3
 800363e:	b2da      	uxtb	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f8d6 	bl	80037fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e012      	b.n	8003680 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800365a:	893b      	ldrh	r3, [r7, #8]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2200      	movs	r2, #0
 800366c:	2180      	movs	r1, #128	; 0x80
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f884 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	80002000 	.word	0x80002000

0800368c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	4608      	mov	r0, r1
 8003696:	4611      	mov	r1, r2
 8003698:	461a      	mov	r2, r3
 800369a:	4603      	mov	r3, r0
 800369c:	817b      	strh	r3, [r7, #10]
 800369e:	460b      	mov	r3, r1
 80036a0:	813b      	strh	r3, [r7, #8]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	8979      	ldrh	r1, [r7, #10]
 80036ac:	4b20      	ldr	r3, [pc, #128]	; (8003730 <I2C_RequestMemoryRead+0xa4>)
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2300      	movs	r3, #0
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f9ce 	bl	8003a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	69b9      	ldr	r1, [r7, #24]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f89d 	bl	80037fc <I2C_WaitOnTXISFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e02c      	b.n	8003726 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d105      	bne.n	80036de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036d2:	893b      	ldrh	r3, [r7, #8]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
 80036dc:	e015      	b.n	800370a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036de:	893b      	ldrh	r3, [r7, #8]
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	69b9      	ldr	r1, [r7, #24]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f883 	bl	80037fc <I2C_WaitOnTXISFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e012      	b.n	8003726 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003700:	893b      	ldrh	r3, [r7, #8]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2200      	movs	r2, #0
 8003712:	2140      	movs	r1, #64	; 0x40
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f831 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	80002000 	.word	0x80002000

08003734 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b02      	cmp	r3, #2
 8003748:	d103      	bne.n	8003752 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d007      	beq.n	8003770 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	619a      	str	r2, [r3, #24]
  }
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800378c:	e022      	b.n	80037d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003794:	d01e      	beq.n	80037d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fe faff 	bl	8001d98 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d113      	bne.n	80037d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b0:	f043 0220 	orr.w	r2, r3, #32
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e00f      	b.n	80037f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4013      	ands	r3, r2
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d0cd      	beq.n	800378e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003808:	e02c      	b.n	8003864 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f870 	bl	80038f4 <I2C_IsErrorOccurred>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e02a      	b.n	8003874 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003824:	d01e      	beq.n	8003864 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fe fab7 	bl	8001d98 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d113      	bne.n	8003864 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	f043 0220 	orr.w	r2, r3, #32
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e007      	b.n	8003874 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b02      	cmp	r3, #2
 8003870:	d1cb      	bne.n	800380a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003888:	e028      	b.n	80038dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f830 	bl	80038f4 <I2C_IsErrorOccurred>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e026      	b.n	80038ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389e:	f7fe fa7b 	bl	8001d98 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d113      	bne.n	80038dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e007      	b.n	80038ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d1cf      	bne.n	800388a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	d040      	beq.n	800399c <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003928:	d01d      	beq.n	8003966 <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003938:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800393a:	e014      	b.n	8003966 <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003942:	d010      	beq.n	8003966 <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003944:	f7fe fa28 	bl	8001d98 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <I2C_IsErrorOccurred+0x66>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d105      	bne.n	8003966 <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f043 0320 	orr.w	r3, r3, #32
 8003960:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b20      	cmp	r3, #32
 8003972:	d002      	beq.n	800397a <I2C_IsErrorOccurred+0x86>
 8003974:	7ffb      	ldrb	r3, [r7, #31]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0e0      	beq.n	800393c <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800397a:	7ffb      	ldrb	r3, [r7, #31]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2220      	movs	r2, #32
 8003986:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2210      	movs	r2, #16
 800398e:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f043 0304 	orr.w	r3, r3, #4
 8003996:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f043 0308 	orr.w	r3, r3, #8
 80039d4:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	f043 0302 	orr.w	r3, r3, #2
 80039f4:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 8003a04:	7ffb      	ldrb	r3, [r7, #31]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d01c      	beq.n	8003a44 <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7ff fe92 	bl	8003734 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6859      	ldr	r1, [r3, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <I2C_IsErrorOccurred+0x15c>)
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	fe00e800 	.word	0xfe00e800

08003a54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	817b      	strh	r3, [r7, #10]
 8003a62:	4613      	mov	r3, r2
 8003a64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a66:	897b      	ldrh	r3, [r7, #10]
 8003a68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a6c:	7a7b      	ldrb	r3, [r7, #9]
 8003a6e:	041b      	lsls	r3, r3, #16
 8003a70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a74:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a82:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	0d5b      	lsrs	r3, r3, #21
 8003a8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <I2C_TransferConfig+0x60>)
 8003a94:	430b      	orrs	r3, r1
 8003a96:	43db      	mvns	r3, r3
 8003a98:	ea02 0103 	and.w	r1, r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	03ff63ff 	.word	0x03ff63ff

08003ab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d138      	bne.n	8003b40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e032      	b.n	8003b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2224      	movs	r2, #36	; 0x24
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6819      	ldr	r1, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e000      	b.n	8003b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b40:	2302      	movs	r3, #2
  }
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d139      	bne.n	8003bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e033      	b.n	8003bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2224      	movs	r2, #36	; 0x24
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ba0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d01e      	beq.n	8003c38 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_IPCC_Init+0x60>)
 8003bfc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fc ff1e 	bl	8000a4c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003c10:	68b8      	ldr	r0, [r7, #8]
 8003c12:	f000 f85b 	bl	8003ccc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f82c 	bl	8003c80 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003c36:	e001      	b.n	8003c3c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	58000c00 	.word	0x58000c00

08003c4c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	4613      	mov	r3, r2
 8003c58:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b085      	sub	sp, #20
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	4613      	mov	r3, r2
 8003c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e00f      	b.n	8003cae <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	4a0b      	ldr	r2, [pc, #44]	; (8003cc4 <IPCC_SetDefaultCallbacks+0x44>)
 8003c98:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3306      	adds	r3, #6
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	4a08      	ldr	r2, [pc, #32]	; (8003cc8 <IPCC_SetDefaultCallbacks+0x48>)
 8003ca6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3301      	adds	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	d9ec      	bls.n	8003c8e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	08003c4d 	.word	0x08003c4d
 8003cc8:	08003c67 	.word	0x08003c67

08003ccc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003ce0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	223f      	movs	r2, #63	; 0x3f
 8003ce6:	609a      	str	r2, [r3, #8]
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf6:	b08b      	sub	sp, #44	; 0x2c
 8003cf8:	af06      	add	r7, sp, #24
 8003cfa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0d7      	b.n	8003eb6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f00e f950 	bl	8011fc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2203      	movs	r2, #3
 8003d24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f005 fec8 	bl	8009ac2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	73fb      	strb	r3, [r7, #15]
 8003d36:	e04c      	b.n	8003dd2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	440b      	add	r3, r1
 8003d48:	3301      	adds	r3, #1
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	440b      	add	r3, r1
 8003d5e:	7bfa      	ldrb	r2, [r7, #15]
 8003d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d62:	7bfa      	ldrb	r2, [r7, #15]
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	b298      	uxth	r0, r3
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	440b      	add	r3, r1
 8003d74:	3336      	adds	r3, #54	; 0x36
 8003d76:	4602      	mov	r2, r0
 8003d78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	440b      	add	r3, r1
 8003d8a:	3303      	adds	r3, #3
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3338      	adds	r3, #56	; 0x38
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	440b      	add	r3, r1
 8003db2:	333c      	adds	r3, #60	; 0x3c
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3340      	adds	r3, #64	; 0x40
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
 8003dd2:	7bfa      	ldrb	r2, [r7, #15]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d3ad      	bcc.n	8003d38 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	73fb      	strb	r3, [r7, #15]
 8003de0:	e044      	b.n	8003e6c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003de2:	7bfa      	ldrb	r2, [r7, #15]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	440b      	add	r3, r1
 8003df0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	440b      	add	r3, r1
 8003e06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e0a:	7bfa      	ldrb	r2, [r7, #15]
 8003e0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e0e:	7bfa      	ldrb	r2, [r7, #15]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	440b      	add	r3, r1
 8003e1c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	440b      	add	r3, r1
 8003e32:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e3a:	7bfa      	ldrb	r2, [r7, #15]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	440b      	add	r3, r1
 8003e48:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e50:	7bfa      	ldrb	r2, [r7, #15]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	440b      	add	r3, r1
 8003e5e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d3b5      	bcc.n	8003de2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	687e      	ldr	r6, [r7, #4]
 8003e7e:	466d      	mov	r5, sp
 8003e80:	f106 0410 	add.w	r4, r6, #16
 8003e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	602b      	str	r3, [r5, #0]
 8003e8c:	1d33      	adds	r3, r6, #4
 8003e8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e90:	6838      	ldr	r0, [r7, #0]
 8003e92:	f005 fe31 	bl	8009af8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d102      	bne.n	8003eb4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f001 fc29 	bl	8005706 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ebe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_PCD_Start+0x16>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e012      	b.n	8003efa <HAL_PCD_Start+0x3c>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f005 fdd7 	bl	8009a94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f007 fd8c 	bl	800ba08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f007 fd91 	bl	800ba36 <USB_ReadInterrupts>
 8003f14:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fb26 	bl	8004572 <PCD_EP_ISR_Handler>

    return;
 8003f26:	e110      	b.n	800414a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d013      	beq.n	8003f5a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f44:	b292      	uxth	r2, r2
 8003f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f00e f8db 	bl	8012106 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003f50:	2100      	movs	r1, #0
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f8fc 	bl	8004150 <HAL_PCD_SetAddress>

    return;
 8003f58:	e0f7      	b.n	800414a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00c      	beq.n	8003f7e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f76:	b292      	uxth	r2, r2
 8003f78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003f7c:	e0e5      	b.n	800414a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00c      	beq.n	8003fa2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f9a:	b292      	uxth	r2, r2
 8003f9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003fa0:	e0d3      	b.n	800414a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d034      	beq.n	8004016 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0204 	bic.w	r2, r2, #4
 8003fbe:	b292      	uxth	r2, r2
 8003fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0208 	bic.w	r2, r2, #8
 8003fd6:	b292      	uxth	r2, r2
 8003fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d107      	bne.n	8003ff6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003fee:	2100      	movs	r1, #0
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f00e fa7f 	bl	80124f4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f00e f8be 	bl	8012178 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004004:	b29a      	uxth	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800400e:	b292      	uxth	r2, r2
 8004010:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004014:	e099      	b.n	800414a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800401c:	2b00      	cmp	r3, #0
 800401e:	d027      	beq.n	8004070 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004028:	b29a      	uxth	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0208 	orr.w	r2, r2, #8
 8004032:	b292      	uxth	r2, r2
 8004034:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004040:	b29a      	uxth	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404a:	b292      	uxth	r2, r2
 800404c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004058:	b29a      	uxth	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0204 	orr.w	r2, r2, #4
 8004062:	b292      	uxth	r2, r2
 8004064:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f00e f86b 	bl	8012144 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800406e:	e06c      	b.n	800414a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	d040      	beq.n	80040fc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800408c:	b292      	uxth	r2, r2
 800408e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d12b      	bne.n	80040f4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0204 	orr.w	r2, r2, #4
 80040ae:	b292      	uxth	r2, r2
 80040b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040bc:	b29a      	uxth	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0208 	orr.w	r2, r2, #8
 80040c6:	b292      	uxth	r2, r2
 80040c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80040dc:	b29b      	uxth	r3, r3
 80040de:	089b      	lsrs	r3, r3, #2
 80040e0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80040ea:	2101      	movs	r1, #1
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f00e fa01 	bl	80124f4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80040f2:	e02a      	b.n	800414a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f00e f825 	bl	8012144 <HAL_PCD_SuspendCallback>
    return;
 80040fa:	e026      	b.n	800414a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00f      	beq.n	8004126 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800410e:	b29a      	uxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004118:	b292      	uxth	r2, r2
 800411a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f00d ffe3 	bl	80120ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004124:	e011      	b.n	800414a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00c      	beq.n	800414a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004138:	b29a      	uxth	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004142:	b292      	uxth	r2, r2
 8004144:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004148:	bf00      	nop
  }
}
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_PCD_SetAddress+0x1a>
 8004166:	2302      	movs	r3, #2
 8004168:	e013      	b.n	8004192 <HAL_PCD_SetAddress+0x42>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	4611      	mov	r1, r2
 8004182:	4618      	mov	r0, r3
 8004184:	f007 fc2c 	bl	800b9e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	4608      	mov	r0, r1
 80041a4:	4611      	mov	r1, r2
 80041a6:	461a      	mov	r2, r3
 80041a8:	4603      	mov	r3, r0
 80041aa:	70fb      	strb	r3, [r7, #3]
 80041ac:	460b      	mov	r3, r1
 80041ae:	803b      	strh	r3, [r7, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da0e      	bge.n	80041de <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	4413      	add	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	705a      	strb	r2, [r3, #1]
 80041dc:	e00e      	b.n	80041fc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	f003 0207 	and.w	r2, r3, #7
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	b2da      	uxtb	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004208:	883a      	ldrh	r2, [r7, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	78ba      	ldrb	r2, [r7, #2]
 8004212:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	785b      	ldrb	r3, [r3, #1]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004226:	78bb      	ldrb	r3, [r7, #2]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d102      	bne.n	8004232 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_PCD_EP_Open+0xa6>
 800423c:	2302      	movs	r3, #2
 800423e:	e00e      	b.n	800425e <HAL_PCD_EP_Open+0xc4>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68f9      	ldr	r1, [r7, #12]
 800424e:	4618      	mov	r0, r3
 8004250:	f005 fc74 	bl	8009b3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800425c:	7afb      	ldrb	r3, [r7, #11]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	460b      	mov	r3, r1
 8004270:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004276:	2b00      	cmp	r3, #0
 8004278:	da0e      	bge.n	8004298 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4413      	add	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	705a      	strb	r2, [r3, #1]
 8004296:	e00e      	b.n	80042b6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	f003 0207 	and.w	r2, r3, #7
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_PCD_EP_Close+0x6a>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e00e      	b.n	80042ee <HAL_PCD_EP_Close+0x88>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68f9      	ldr	r1, [r7, #12]
 80042de:	4618      	mov	r0, r3
 80042e0:	f005 ffc0 	bl	800a264 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b086      	sub	sp, #24
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	460b      	mov	r3, r1
 8004304:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004306:	7afb      	ldrb	r3, [r7, #11]
 8004308:	f003 0207 	and.w	r2, r3, #7
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2200      	movs	r2, #0
 8004334:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004336:	7afb      	ldrb	r3, [r7, #11]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	b2da      	uxtb	r2, r3
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004342:	7afb      	ldrb	r3, [r7, #11]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6979      	ldr	r1, [r7, #20]
 8004352:	4618      	mov	r0, r3
 8004354:	f006 f973 	bl	800a63e <USB_EPStartXfer>
 8004358:	e005      	b.n	8004366 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6979      	ldr	r1, [r7, #20]
 8004360:	4618      	mov	r0, r3
 8004362:	f006 f96c 	bl	800a63e <USB_EPStartXfer>
  }

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	f003 0207 	and.w	r2, r3, #7
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	440b      	add	r3, r1
 800438e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004392:	681b      	ldr	r3, [r3, #0]
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	607a      	str	r2, [r7, #4]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	460b      	mov	r3, r1
 80043ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b0:	7afb      	ldrb	r3, [r7, #11]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2200      	movs	r2, #0
 80043e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2201      	movs	r2, #1
 80043ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ec:	7afb      	ldrb	r3, [r7, #11]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043f8:	7afb      	ldrb	r3, [r7, #11]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6979      	ldr	r1, [r7, #20]
 8004408:	4618      	mov	r0, r3
 800440a:	f006 f918 	bl	800a63e <USB_EPStartXfer>
 800440e:	e005      	b.n	800441c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6979      	ldr	r1, [r7, #20]
 8004416:	4618      	mov	r0, r3
 8004418:	f006 f911 	bl	800a63e <USB_EPStartXfer>
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	460b      	mov	r3, r1
 8004430:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	f003 0207 	and.w	r2, r3, #7
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	429a      	cmp	r2, r3
 800443e:	d901      	bls.n	8004444 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e03e      	b.n	80044c2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004448:	2b00      	cmp	r3, #0
 800444a:	da0e      	bge.n	800446a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	4413      	add	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	705a      	strb	r2, [r3, #1]
 8004468:	e00c      	b.n	8004484 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	4413      	add	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800448a:	78fb      	ldrb	r3, [r7, #3]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	b2da      	uxtb	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_PCD_EP_SetStall+0x7e>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e00e      	b.n	80044c2 <HAL_PCD_EP_SetStall+0x9c>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68f9      	ldr	r1, [r7, #12]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f007 f995 	bl	800b7e2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	f003 020f 	and.w	r2, r3, #15
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d901      	bls.n	80044e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e040      	b.n	800456a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	da0e      	bge.n	800450e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4413      	add	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	705a      	strb	r2, [r3, #1]
 800450c:	e00e      	b.n	800452c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	f003 0207 	and.w	r2, r3, #7
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	4413      	add	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_PCD_EP_ClrStall+0x82>
 8004548:	2302      	movs	r3, #2
 800454a:	e00e      	b.n	800456a <HAL_PCD_EP_ClrStall+0xa0>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68f9      	ldr	r1, [r7, #12]
 800455a:	4618      	mov	r0, r3
 800455c:	f007 f992 	bl	800b884 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b096      	sub	sp, #88	; 0x58
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800457a:	e39c      	b.n	8004cb6 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004584:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004588:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004596:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800459a:	2b00      	cmp	r3, #0
 800459c:	f040 815e 	bne.w	800485c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80045a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d150      	bne.n	800464e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80045b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045bc:	81fb      	strh	r3, [r7, #14]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	89fb      	ldrh	r3, [r7, #14]
 80045c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3328      	adds	r3, #40	; 0x28
 80045d4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045de:	b29b      	uxth	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4413      	add	r3, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	4413      	add	r3, r2
 80045f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80045fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	441a      	add	r2, r3
 8004608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800460c:	2100      	movs	r1, #0
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f00d fd51 	bl	80120b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 834a 	beq.w	8004cb6 <PCD_EP_ISR_Handler+0x744>
 8004622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 8345 	bne.w	8004cb6 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004638:	b2da      	uxtb	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	b292      	uxth	r2, r2
 8004640:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800464c:	e333      	b.n	8004cb6 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004654:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004660:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004668:	2b00      	cmp	r3, #0
 800466a:	d032      	beq.n	80046d2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004674:	b29b      	uxth	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4413      	add	r3, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	4413      	add	r3, r2
 8004686:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004692:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800469e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80046a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f007 fa17 	bl	800bada <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80046b8:	4013      	ands	r3, r2
 80046ba:	823b      	strh	r3, [r7, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	8a3a      	ldrh	r2, [r7, #16]
 80046c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046c6:	b292      	uxth	r2, r2
 80046c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f00d fcc6 	bl	801205c <HAL_PCD_SetupStageCallback>
 80046d0:	e2f1      	b.n	8004cb6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046d2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f280 82ed 	bge.w	8004cb6 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80046e8:	4013      	ands	r3, r2
 80046ea:	83fb      	strh	r3, [r7, #30]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	8bfa      	ldrh	r2, [r7, #30]
 80046f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046f6:	b292      	uxth	r2, r2
 80046f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004702:	b29b      	uxth	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4413      	add	r3, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	4413      	add	r3, r2
 8004714:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800471e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004720:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d019      	beq.n	800475e <PCD_EP_ISR_Handler+0x1ec>
 800472a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d015      	beq.n	800475e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004738:	6959      	ldr	r1, [r3, #20]
 800473a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800473e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004740:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004742:	b29b      	uxth	r3, r3
 8004744:	f007 f9c9 	bl	800bada <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	441a      	add	r2, r3
 8004752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004754:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004756:	2100      	movs	r1, #0
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f00d fc91 	bl	8012080 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476a:	2b00      	cmp	r3, #0
 800476c:	f040 82a3 	bne.w	8004cb6 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477e:	b29b      	uxth	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	4413      	add	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b3e      	cmp	r3, #62	; 0x3e
 8004796:	d918      	bls.n	80047ca <PCD_EP_ISR_Handler+0x258>
 8004798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	647b      	str	r3, [r7, #68]	; 0x44
 80047a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <PCD_EP_ISR_Handler+0x240>
 80047ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ae:	3b01      	subs	r3, #1
 80047b0:	647b      	str	r3, [r7, #68]	; 0x44
 80047b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	029b      	lsls	r3, r3, #10
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	801a      	strh	r2, [r3, #0]
 80047c8:	e029      	b.n	800481e <PCD_EP_ISR_Handler+0x2ac>
 80047ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d112      	bne.n	80047f8 <PCD_EP_ISR_Handler+0x286>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047dc:	b29a      	uxth	r2, r3
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e012      	b.n	800481e <PCD_EP_ISR_Handler+0x2ac>
 80047f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <PCD_EP_ISR_Handler+0x2a0>
 800480c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480e:	3301      	adds	r3, #1
 8004810:	647b      	str	r3, [r7, #68]	; 0x44
 8004812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004814:	b29b      	uxth	r3, r3
 8004816:	029b      	lsls	r3, r3, #10
 8004818:	b29a      	uxth	r2, r3
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	827b      	strh	r3, [r7, #18]
 8004830:	8a7b      	ldrh	r3, [r7, #18]
 8004832:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004836:	827b      	strh	r3, [r7, #18]
 8004838:	8a7b      	ldrh	r3, [r7, #18]
 800483a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800483e:	827b      	strh	r3, [r7, #18]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	8a7b      	ldrh	r3, [r7, #18]
 8004846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004856:	b29b      	uxth	r3, r3
 8004858:	8013      	strh	r3, [r2, #0]
 800485a:	e22c      	b.n	8004cb6 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004870:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004874:	2b00      	cmp	r3, #0
 8004876:	f280 80f6 	bge.w	8004a66 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	b29a      	uxth	r2, r3
 800488c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004890:	4013      	ands	r3, r2
 8004892:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80048a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048ac:	b292      	uxth	r2, r2
 80048ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80048b0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	4413      	add	r3, r2
 80048c4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80048c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c8:	7b1b      	ldrb	r3, [r3, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d123      	bne.n	8004916 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	4413      	add	r3, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6812      	ldr	r2, [r2, #0]
 80048e6:	4413      	add	r3, r2
 80048e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80048f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 808e 	beq.w	8004a1c <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004906:	6959      	ldr	r1, [r3, #20]
 8004908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490a:	88da      	ldrh	r2, [r3, #6]
 800490c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004910:	f007 f8e3 	bl	800bada <USB_ReadPMA>
 8004914:	e082      	b.n	8004a1c <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004918:	78db      	ldrb	r3, [r3, #3]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d10a      	bne.n	8004934 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800491e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004922:	461a      	mov	r2, r3
 8004924:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f9d3 	bl	8004cd2 <HAL_PCD_EP_DB_Receive>
 800492c:	4603      	mov	r3, r0
 800492e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004932:	e073      	b.n	8004a1c <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	461a      	mov	r2, r3
 800493a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	441a      	add	r2, r3
 8004960:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800496c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004970:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004974:	b29b      	uxth	r3, r3
 8004976:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d022      	beq.n	80049d8 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800499a:	b29b      	uxth	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	4413      	add	r3, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	4413      	add	r3, r2
 80049ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80049ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d02c      	beq.n	8004a1c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c8:	6959      	ldr	r1, [r3, #20]
 80049ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049cc:	891a      	ldrh	r2, [r3, #8]
 80049ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049d2:	f007 f882 	bl	800bada <USB_ReadPMA>
 80049d6:	e021      	b.n	8004a1c <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	4413      	add	r3, r2
 80049f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004a00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d009      	beq.n	8004a1c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0e:	6959      	ldr	r1, [r3, #20]
 8004a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a12:	895a      	ldrh	r2, [r3, #10]
 8004a14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a18:	f007 f85f 	bl	800bada <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a1e:	69da      	ldr	r2, [r3, #28]
 8004a20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a24:	441a      	add	r2, r3
 8004a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a28:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a32:	441a      	add	r2, r3
 8004a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a36:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <PCD_EP_ISR_Handler+0x4da>
 8004a40:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d206      	bcs.n	8004a5a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f00d fb14 	bl	8012080 <HAL_PCD_DataOutStageCallback>
 8004a58:	e005      	b.n	8004a66 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004a60:	4618      	mov	r0, r3
 8004a62:	f005 fdec 	bl	800a63e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004a66:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8121 	beq.w	8004cb6 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8004a74:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4413      	add	r3, r2
 8004a86:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	441a      	add	r2, r3
 8004ab4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8004ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac6:	78db      	ldrb	r3, [r3, #3]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	f000 80a2 	beq.w	8004c12 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8004ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad6:	7b1b      	ldrb	r3, [r3, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 8093 	beq.w	8004c04 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ade:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d046      	beq.n	8004b78 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aec:	785b      	ldrb	r3, [r3, #1]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d126      	bne.n	8004b40 <PCD_EP_ISR_Handler+0x5ce>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	4413      	add	r3, r2
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	00da      	lsls	r2, r3, #3
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	4413      	add	r3, r2
 8004b14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b18:	623b      	str	r3, [r7, #32]
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	801a      	strh	r2, [r3, #0]
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	801a      	strh	r2, [r3, #0]
 8004b3e:	e061      	b.n	8004c04 <PCD_EP_ISR_Handler+0x692>
 8004b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d15d      	bne.n	8004c04 <PCD_EP_ISR_Handler+0x692>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	4413      	add	r3, r2
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	00da      	lsls	r2, r3, #3
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	4413      	add	r3, r2
 8004b6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	2200      	movs	r2, #0
 8004b74:	801a      	strh	r2, [r3, #0]
 8004b76:	e045      	b.n	8004c04 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b80:	785b      	ldrb	r3, [r3, #1]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d126      	bne.n	8004bd4 <PCD_EP_ISR_Handler+0x662>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9a:	4413      	add	r3, r2
 8004b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	00da      	lsls	r2, r3, #3
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bac:	633b      	str	r3, [r7, #48]	; 0x30
 8004bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	801a      	strh	r2, [r3, #0]
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd0:	801a      	strh	r2, [r3, #0]
 8004bd2:	e017      	b.n	8004c04 <PCD_EP_ISR_Handler+0x692>
 8004bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd6:	785b      	ldrb	r3, [r3, #1]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d113      	bne.n	8004c04 <PCD_EP_ISR_Handler+0x692>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bea:	4413      	add	r3, r2
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	00da      	lsls	r2, r3, #3
 8004bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c00:	2200      	movs	r2, #0
 8004c02:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f00d fa53 	bl	80120b6 <HAL_PCD_DataInStageCallback>
 8004c10:	e051      	b.n	8004cb6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004c12:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d144      	bne.n	8004ca8 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	4413      	add	r3, r2
 8004c38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d907      	bls.n	8004c62 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8004c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c5a:	1ad2      	subs	r2, r2, r3
 8004c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5e:	619a      	str	r2, [r3, #24]
 8004c60:	e002      	b.n	8004c68 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8004c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c64:	2200      	movs	r2, #0
 8004c66:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	4619      	mov	r1, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f00d fa1d 	bl	80120b6 <HAL_PCD_DataInStageCallback>
 8004c7c:	e01b      	b.n	8004cb6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c86:	441a      	add	r2, r3
 8004c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c94:	441a      	add	r2, r3
 8004c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c98:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f005 fccc 	bl	800a63e <USB_EPStartXfer>
 8004ca6:	e006      	b.n	8004cb6 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004ca8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004cac:	461a      	mov	r2, r3
 8004cae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f917 	bl	8004ee4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	b21b      	sxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f6ff ac5a 	blt.w	800457c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3758      	adds	r7, #88	; 0x58
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b088      	sub	sp, #32
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d07c      	beq.n	8004de4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	4413      	add	r3, r2
 8004d04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	8b7b      	ldrh	r3, [r7, #26]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d306      	bcc.n	8004d28 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	8b7b      	ldrh	r3, [r7, #26]
 8004d20:	1ad2      	subs	r2, r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	619a      	str	r2, [r3, #24]
 8004d26:	e002      	b.n	8004d2e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d123      	bne.n	8004d7e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d50:	833b      	strh	r3, [r7, #24]
 8004d52:	8b3b      	ldrh	r3, [r7, #24]
 8004d54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d58:	833b      	strh	r3, [r7, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	441a      	add	r2, r3
 8004d68:	8b3b      	ldrh	r3, [r7, #24]
 8004d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01f      	beq.n	8004dc8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	82fb      	strh	r3, [r7, #22]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	441a      	add	r2, r3
 8004db2:	8afb      	ldrh	r3, [r7, #22]
 8004db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004dc8:	8b7b      	ldrh	r3, [r7, #26]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 8085 	beq.w	8004eda <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	6959      	ldr	r1, [r3, #20]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	891a      	ldrh	r2, [r3, #8]
 8004ddc:	8b7b      	ldrh	r3, [r7, #26]
 8004dde:	f006 fe7c 	bl	800bada <USB_ReadPMA>
 8004de2:	e07a      	b.n	8004eda <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	4413      	add	r3, r2
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	6812      	ldr	r2, [r2, #0]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e08:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	8b7b      	ldrh	r3, [r7, #26]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d306      	bcc.n	8004e22 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	699a      	ldr	r2, [r3, #24]
 8004e18:	8b7b      	ldrh	r3, [r7, #26]
 8004e1a:	1ad2      	subs	r2, r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	619a      	str	r2, [r3, #24]
 8004e20:	e002      	b.n	8004e28 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2200      	movs	r2, #0
 8004e26:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d123      	bne.n	8004e78 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	83fb      	strh	r3, [r7, #30]
 8004e4c:	8bfb      	ldrh	r3, [r7, #30]
 8004e4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e52:	83fb      	strh	r3, [r7, #30]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	441a      	add	r2, r3
 8004e62:	8bfb      	ldrh	r3, [r7, #30]
 8004e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d11f      	bne.n	8004ec2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9c:	83bb      	strh	r3, [r7, #28]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	441a      	add	r2, r3
 8004eac:	8bbb      	ldrh	r3, [r7, #28]
 8004eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004ec2:	8b7b      	ldrh	r3, [r7, #26]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	6959      	ldr	r1, [r3, #20]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	895a      	ldrh	r2, [r3, #10]
 8004ed4:	8b7b      	ldrh	r3, [r7, #26]
 8004ed6:	f006 fe00 	bl	800bada <USB_ReadPMA>
    }
  }

  return count;
 8004eda:	8b7b      	ldrh	r3, [r7, #26]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3720      	adds	r7, #32
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b0a2      	sub	sp, #136	; 0x88
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 81c5 	beq.w	8005288 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	4413      	add	r3, r2
 8004f18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d907      	bls.n	8004f42 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f3a:	1ad2      	subs	r2, r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	619a      	str	r2, [r3, #24]
 8004f40:	e002      	b.n	8004f48 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2200      	movs	r2, #0
 8004f46:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f040 80b9 	bne.w	80050c4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	785b      	ldrb	r3, [r3, #1]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d126      	bne.n	8004fa8 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	4413      	add	r3, r2
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	00da      	lsls	r2, r3, #3
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	801a      	strh	r2, [r3, #0]
 8004fa6:	e01a      	b.n	8004fde <HAL_PCD_EP_DB_Transmit+0xfa>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	785b      	ldrb	r3, [r3, #1]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d116      	bne.n	8004fde <HAL_PCD_EP_DB_Transmit+0xfa>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	4413      	add	r3, r2
 8004fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	00da      	lsls	r2, r3, #3
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	2200      	movs	r2, #0
 8004fdc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	623b      	str	r3, [r7, #32]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	785b      	ldrb	r3, [r3, #1]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d126      	bne.n	800503a <HAL_PCD_EP_DB_Transmit+0x156>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	4413      	add	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	00da      	lsls	r2, r3, #3
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	4413      	add	r3, r2
 800500e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800501e:	b29a      	uxth	r2, r3
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	b29b      	uxth	r3, r3
 800502a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800502e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005032:	b29a      	uxth	r2, r3
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	801a      	strh	r2, [r3, #0]
 8005038:	e017      	b.n	800506a <HAL_PCD_EP_DB_Transmit+0x186>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	785b      	ldrb	r3, [r3, #1]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d113      	bne.n	800506a <HAL_PCD_EP_DB_Transmit+0x186>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800504a:	b29b      	uxth	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	4413      	add	r3, r2
 8005052:	623b      	str	r3, [r7, #32]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	00da      	lsls	r2, r3, #3
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	4413      	add	r3, r2
 800505e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005062:	61fb      	str	r3, [r7, #28]
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	2200      	movs	r2, #0
 8005068:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	4619      	mov	r1, r3
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f00d f820 	bl	80120b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 82d2 	beq.w	8005626 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509c:	827b      	strh	r3, [r7, #18]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	441a      	add	r2, r3
 80050ac:	8a7b      	ldrh	r3, [r7, #18]
 80050ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050be:	b29b      	uxth	r3, r3
 80050c0:	8013      	strh	r3, [r2, #0]
 80050c2:	e2b0      	b.n	8005626 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d021      	beq.n	8005112 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	441a      	add	r2, r3
 80050fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800510a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510e:	b29b      	uxth	r3, r3
 8005110:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005118:	2b01      	cmp	r3, #1
 800511a:	f040 8284 	bne.w	8005626 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	695a      	ldr	r2, [r3, #20]
 8005122:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005126:	441a      	add	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005134:	441a      	add	r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	6a1a      	ldr	r2, [r3, #32]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	429a      	cmp	r2, r3
 8005144:	d309      	bcc.n	800515a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	6a1a      	ldr	r2, [r3, #32]
 8005150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005152:	1ad2      	subs	r2, r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	621a      	str	r2, [r3, #32]
 8005158:	e015      	b.n	8005186 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d107      	bne.n	8005172 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005162:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005166:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005170:	e009      	b.n	8005186 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	785b      	ldrb	r3, [r3, #1]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d155      	bne.n	800523a <HAL_PCD_EP_DB_Transmit+0x356>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	63bb      	str	r3, [r7, #56]	; 0x38
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519c:	b29b      	uxth	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	4413      	add	r3, r2
 80051a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	00da      	lsls	r2, r3, #3
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	4413      	add	r3, r2
 80051b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051b4:	637b      	str	r3, [r7, #52]	; 0x34
 80051b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b8:	2b3e      	cmp	r3, #62	; 0x3e
 80051ba:	d916      	bls.n	80051ea <HAL_PCD_EP_DB_Transmit+0x306>
 80051bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80051cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ce:	3b01      	subs	r3, #1
 80051d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	029b      	lsls	r3, r3, #10
 80051d8:	b29b      	uxth	r3, r3
 80051da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e6:	801a      	strh	r2, [r3, #0]
 80051e8:	e043      	b.n	8005272 <HAL_PCD_EP_DB_Transmit+0x38e>
 80051ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d112      	bne.n	8005216 <HAL_PCD_EP_DB_Transmit+0x332>
 80051f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800520e:	b29a      	uxth	r2, r3
 8005210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005212:	801a      	strh	r2, [r3, #0]
 8005214:	e02d      	b.n	8005272 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005218:	085b      	lsrs	r3, r3, #1
 800521a:	64bb      	str	r3, [r7, #72]	; 0x48
 800521c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <HAL_PCD_EP_DB_Transmit+0x348>
 8005226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005228:	3301      	adds	r3, #1
 800522a:	64bb      	str	r3, [r7, #72]	; 0x48
 800522c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800522e:	b29b      	uxth	r3, r3
 8005230:	029b      	lsls	r3, r3, #10
 8005232:	b29a      	uxth	r2, r3
 8005234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005236:	801a      	strh	r2, [r3, #0]
 8005238:	e01b      	b.n	8005272 <HAL_PCD_EP_DB_Transmit+0x38e>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d117      	bne.n	8005272 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	643b      	str	r3, [r7, #64]	; 0x40
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005250:	b29b      	uxth	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005256:	4413      	add	r3, r2
 8005258:	643b      	str	r3, [r7, #64]	; 0x40
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	00da      	lsls	r2, r3, #3
 8005260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005262:	4413      	add	r3, r2
 8005264:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800526a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800526c:	b29a      	uxth	r2, r3
 800526e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005270:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6959      	ldr	r1, [r3, #20]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	891a      	ldrh	r2, [r3, #8]
 800527e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005280:	b29b      	uxth	r3, r3
 8005282:	f006 fbe8 	bl	800ba56 <USB_WritePMA>
 8005286:	e1ce      	b.n	8005626 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005290:	b29b      	uxth	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	4413      	add	r3, r2
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	4413      	add	r3, r2
 80052a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	699a      	ldr	r2, [r3, #24]
 80052b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d307      	bcc.n	80052cc <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	699a      	ldr	r2, [r3, #24]
 80052c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052c4:	1ad2      	subs	r2, r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	619a      	str	r2, [r3, #24]
 80052ca:	e002      	b.n	80052d2 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2200      	movs	r2, #0
 80052d0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f040 80c4 	bne.w	8005464 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d126      	bne.n	8005332 <HAL_PCD_EP_DB_Transmit+0x44e>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052f8:	4413      	add	r3, r2
 80052fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	00da      	lsls	r2, r3, #3
 8005302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005304:	4413      	add	r3, r2
 8005306:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800530a:	667b      	str	r3, [r7, #100]	; 0x64
 800530c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	b29b      	uxth	r3, r3
 8005312:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005316:	b29a      	uxth	r2, r3
 8005318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532a:	b29a      	uxth	r2, r3
 800532c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800532e:	801a      	strh	r2, [r3, #0]
 8005330:	e01a      	b.n	8005368 <HAL_PCD_EP_DB_Transmit+0x484>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d116      	bne.n	8005368 <HAL_PCD_EP_DB_Transmit+0x484>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	673b      	str	r3, [r7, #112]	; 0x70
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005348:	b29b      	uxth	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800534e:	4413      	add	r3, r2
 8005350:	673b      	str	r3, [r7, #112]	; 0x70
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	00da      	lsls	r2, r3, #3
 8005358:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800535a:	4413      	add	r3, r2
 800535c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005360:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005364:	2200      	movs	r2, #0
 8005366:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	785b      	ldrb	r3, [r3, #1]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d12f      	bne.n	80053d6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005386:	b29b      	uxth	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800538e:	4413      	add	r3, r2
 8005390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	00da      	lsls	r2, r3, #3
 800539a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800539e:	4413      	add	r3, r2
 80053a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053d2:	801a      	strh	r2, [r3, #0]
 80053d4:	e017      	b.n	8005406 <HAL_PCD_EP_DB_Transmit+0x522>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d113      	bne.n	8005406 <HAL_PCD_EP_DB_Transmit+0x522>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053ec:	4413      	add	r3, r2
 80053ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	00da      	lsls	r2, r3, #3
 80053f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053f8:	4413      	add	r3, r2
 80053fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005402:	2200      	movs	r2, #0
 8005404:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	4619      	mov	r1, r3
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f00c fe52 	bl	80120b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005418:	2b00      	cmp	r3, #0
 800541a:	f040 8104 	bne.w	8005626 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005438:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	441a      	add	r2, r3
 800544a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800544e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005456:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800545a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545e:	b29b      	uxth	r3, r3
 8005460:	8013      	strh	r3, [r2, #0]
 8005462:	e0e0      	b.n	8005626 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d121      	bne.n	80054b2 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005488:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800549e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	f040 80b4 	bne.w	8005626 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	695a      	ldr	r2, [r3, #20]
 80054c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054c6:	441a      	add	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054d4:	441a      	add	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6a1a      	ldr	r2, [r3, #32]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d309      	bcc.n	80054fa <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f2:	1ad2      	subs	r2, r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	621a      	str	r2, [r3, #32]
 80054f8:	e015      	b.n	8005526 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8005502:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005506:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005510:	e009      	b.n	8005526 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2200      	movs	r2, #0
 800551c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	663b      	str	r3, [r7, #96]	; 0x60
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	785b      	ldrb	r3, [r3, #1]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d155      	bne.n	80055e0 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	65bb      	str	r3, [r7, #88]	; 0x58
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005548:	4413      	add	r3, r2
 800554a:	65bb      	str	r3, [r7, #88]	; 0x58
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	00da      	lsls	r2, r3, #3
 8005552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005554:	4413      	add	r3, r2
 8005556:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800555a:	657b      	str	r3, [r7, #84]	; 0x54
 800555c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800555e:	2b3e      	cmp	r3, #62	; 0x3e
 8005560:	d916      	bls.n	8005590 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	677b      	str	r3, [r7, #116]	; 0x74
 8005568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	2b00      	cmp	r3, #0
 8005570:	d102      	bne.n	8005578 <HAL_PCD_EP_DB_Transmit+0x694>
 8005572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005574:	3b01      	subs	r3, #1
 8005576:	677b      	str	r3, [r7, #116]	; 0x74
 8005578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800557a:	b29b      	uxth	r3, r3
 800557c:	029b      	lsls	r3, r3, #10
 800557e:	b29b      	uxth	r3, r3
 8005580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005588:	b29a      	uxth	r2, r3
 800558a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	e040      	b.n	8005612 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005592:	2b00      	cmp	r3, #0
 8005594:	d112      	bne.n	80055bc <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	b29b      	uxth	r3, r3
 800559c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b8:	801a      	strh	r2, [r3, #0]
 80055ba:	e02a      	b.n	8005612 <HAL_PCD_EP_DB_Transmit+0x72e>
 80055bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055be:	085b      	lsrs	r3, r3, #1
 80055c0:	677b      	str	r3, [r7, #116]	; 0x74
 80055c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80055cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ce:	3301      	adds	r3, #1
 80055d0:	677b      	str	r3, [r7, #116]	; 0x74
 80055d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	029b      	lsls	r3, r3, #10
 80055d8:	b29a      	uxth	r2, r3
 80055da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	e018      	b.n	8005612 <HAL_PCD_EP_DB_Transmit+0x72e>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d114      	bne.n	8005612 <HAL_PCD_EP_DB_Transmit+0x72e>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055f6:	4413      	add	r3, r2
 80055f8:	663b      	str	r3, [r7, #96]	; 0x60
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	00da      	lsls	r2, r3, #3
 8005600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005602:	4413      	add	r3, r2
 8005604:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800560a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800560c:	b29a      	uxth	r2, r3
 800560e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005610:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6959      	ldr	r1, [r3, #20]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	895a      	ldrh	r2, [r3, #10]
 800561e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005620:	b29b      	uxth	r3, r3
 8005622:	f006 fa18 	bl	800ba56 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005640:	823b      	strh	r3, [r7, #16]
 8005642:	8a3b      	ldrh	r3, [r7, #16]
 8005644:	f083 0310 	eor.w	r3, r3, #16
 8005648:	823b      	strh	r3, [r7, #16]
 800564a:	8a3b      	ldrh	r3, [r7, #16]
 800564c:	f083 0320 	eor.w	r3, r3, #32
 8005650:	823b      	strh	r3, [r7, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	441a      	add	r2, r3
 8005660:	8a3b      	ldrh	r3, [r7, #16]
 8005662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800566a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005672:	b29b      	uxth	r3, r3
 8005674:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3788      	adds	r7, #136	; 0x88
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	607b      	str	r3, [r7, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	817b      	strh	r3, [r7, #10]
 800568e:	4613      	mov	r3, r2
 8005690:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005692:	897b      	ldrh	r3, [r7, #10]
 8005694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800569e:	897b      	ldrh	r3, [r7, #10]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	e009      	b.n	80056ca <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056b6:	897a      	ldrh	r2, [r7, #10]
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80056ca:	893b      	ldrh	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d107      	bne.n	80056e0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2200      	movs	r2, #0
 80056d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	b29a      	uxth	r2, r3
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	80da      	strh	r2, [r3, #6]
 80056de:	e00b      	b.n	80056f8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2201      	movs	r2, #1
 80056e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005706:	b480      	push	{r7}
 8005708:	b085      	sub	sp, #20
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800572a:	b29b      	uxth	r3, r3
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800573e:	b29b      	uxth	r3, r3
 8005740:	f043 0302 	orr.w	r3, r3, #2
 8005744:	b29a      	uxth	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
	...

0800575c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a04      	ldr	r2, [pc, #16]	; (8005778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576a:	6013      	str	r3, [r2, #0]
}
 800576c:	bf00      	nop
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	58000400 	.word	0x58000400

0800577c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <HAL_PWREx_GetVoltageRange+0x18>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005788:	4618      	mov	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	58000400 	.word	0x58000400

08005798 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80057a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057a6:	6053      	str	r3, [r2, #4]
}
 80057a8:	bf00      	nop
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	58000400 	.word	0x58000400

080057b8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80057bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ca:	d101      	bne.n	80057d0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <LL_RCC_HSE_Enable>:
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80057e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ee:	6013      	str	r3, [r2, #0]
}
 80057f0:	bf00      	nop
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <LL_RCC_HSE_Disable>:
{
 80057fa:	b480      	push	{r7}
 80057fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80057fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580c:	6013      	str	r3, [r2, #0]
}
 800580e:	bf00      	nop
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <LL_RCC_HSE_IsReady>:
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800581c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800582a:	d101      	bne.n	8005830 <LL_RCC_HSE_IsReady+0x18>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <LL_RCC_HSE_IsReady+0x1a>
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <LL_RCC_HSI_Enable>:
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800584a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800584e:	6013      	str	r3, [r2, #0]
}
 8005850:	bf00      	nop
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <LL_RCC_HSI_Disable>:
{
 800585a:	b480      	push	{r7}
 800585c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800585e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800586c:	6013      	str	r3, [r2, #0]
}
 800586e:	bf00      	nop
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <LL_RCC_HSI_IsReady>:
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588a:	d101      	bne.n	8005890 <LL_RCC_HSI_IsReady+0x18>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <LL_RCC_HSI_IsReady+0x1a>
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <LL_RCC_HSI_SetCalibTrimming>:
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80058a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	061b      	lsls	r3, r3, #24
 80058b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058b6:	4313      	orrs	r3, r2
 80058b8:	604b      	str	r3, [r1, #4]
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <LL_RCC_HSI48_Enable>:
{
 80058c6:	b480      	push	{r7}
 80058c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80058ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80058de:	bf00      	nop
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <LL_RCC_HSI48_Disable>:
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80058ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005900:	bf00      	nop
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <LL_RCC_HSI48_IsReady>:
{
 800590a:	b480      	push	{r7}
 800590c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800590e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005912:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b02      	cmp	r3, #2
 800591c:	d101      	bne.n	8005922 <LL_RCC_HSI48_IsReady+0x18>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <LL_RCC_HSI48_IsReady+0x1a>
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <LL_RCC_LSE_Enable>:
{
 800592e:	b480      	push	{r7}
 8005930:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800593e:	f043 0301 	orr.w	r3, r3, #1
 8005942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005946:	bf00      	nop
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <LL_RCC_LSE_Disable>:
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005968:	bf00      	nop
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <LL_RCC_LSE_EnableBypass>:
{
 8005972:	b480      	push	{r7}
 8005974:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005982:	f043 0304 	orr.w	r3, r3, #4
 8005986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800598a:	bf00      	nop
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <LL_RCC_LSE_DisableBypass>:
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059a4:	f023 0304 	bic.w	r3, r3, #4
 80059a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80059ac:	bf00      	nop
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <LL_RCC_LSE_IsReady>:
{
 80059b6:	b480      	push	{r7}
 80059b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80059ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d101      	bne.n	80059ce <LL_RCC_LSE_IsReady+0x18>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <LL_RCC_LSE_IsReady+0x1a>
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <LL_RCC_LSI1_Enable>:
{
 80059da:	b480      	push	{r7}
 80059dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80059de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80059f2:	bf00      	nop
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <LL_RCC_LSI1_Disable>:
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <LL_RCC_LSI1_IsReady>:
{
 8005a1e:	b480      	push	{r7}
 8005a20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d101      	bne.n	8005a36 <LL_RCC_LSI1_IsReady+0x18>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <LL_RCC_LSI1_IsReady+0x1a>
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <LL_RCC_LSI2_Enable>:
{
 8005a42:	b480      	push	{r7}
 8005a44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a52:	f043 0304 	orr.w	r3, r3, #4
 8005a56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005a5a:	bf00      	nop
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <LL_RCC_LSI2_Disable>:
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a74:	f023 0304 	bic.w	r3, r3, #4
 8005a78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005a7c:	bf00      	nop
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <LL_RCC_LSI2_IsReady>:
{
 8005a86:	b480      	push	{r7}
 8005a88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d101      	bne.n	8005a9e <LL_RCC_LSI2_IsReady+0x18>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <LL_RCC_LSI2_IsReady+0x1a>
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <LL_RCC_LSI2_SetTrimming>:
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <LL_RCC_MSI_Enable>:
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae6:	f043 0301 	orr.w	r3, r3, #1
 8005aea:	6013      	str	r3, [r2, #0]
}
 8005aec:	bf00      	nop
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <LL_RCC_MSI_Disable>:
{
 8005af6:	b480      	push	{r7}
 8005af8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	6013      	str	r3, [r2, #0]
}
 8005b0a:	bf00      	nop
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <LL_RCC_MSI_IsReady>:
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d101      	bne.n	8005b2a <LL_RCC_MSI_IsReady+0x16>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <LL_RCC_MSI_IsReady+0x18>
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <LL_RCC_MSI_SetRange>:
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	600b      	str	r3, [r1, #0]
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <LL_RCC_MSI_GetRange>:
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b6e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2bb0      	cmp	r3, #176	; 0xb0
 8005b74:	d901      	bls.n	8005b7a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005b76:	23b0      	movs	r3, #176	; 0xb0
 8005b78:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005b7a:	687b      	ldr	r3, [r7, #4]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	604b      	str	r3, [r1, #4]
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <LL_RCC_SetSysClkSource>:
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f023 0203 	bic.w	r2, r3, #3
 8005bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	608b      	str	r3, [r1, #8]
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <LL_RCC_GetSysClkSource>:
{
 8005bda:	b480      	push	{r7}
 8005bdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 030c 	and.w	r3, r3, #12
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <LL_RCC_SetAHBPrescaler>:
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	608b      	str	r3, [r1, #8]
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <LL_C2_RCC_SetAHBPrescaler>:
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <LL_RCC_SetAHB4Prescaler>:
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c56:	f023 020f 	bic.w	r2, r3, #15
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <LL_RCC_SetAPB1Prescaler>:
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	608b      	str	r3, [r1, #8]
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <LL_RCC_SetAPB2Prescaler>:
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	608b      	str	r3, [r1, #8]
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <LL_RCC_GetAHBPrescaler>:
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <LL_C2_RCC_GetAHBPrescaler>:
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <LL_RCC_GetAHB4Prescaler>:
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <LL_RCC_GetAPB1Prescaler>:
{
 8005d12:	b480      	push	{r7}
 8005d14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <LL_RCC_GetAPB2Prescaler>:
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <LL_RCC_PLL_Enable>:
{
 8005d42:	b480      	push	{r7}
 8005d44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d54:	6013      	str	r3, [r2, #0]
}
 8005d56:	bf00      	nop
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <LL_RCC_PLL_Disable>:
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d72:	6013      	str	r3, [r2, #0]
}
 8005d74:	bf00      	nop
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <LL_RCC_PLL_IsReady>:
{
 8005d7e:	b480      	push	{r7}
 8005d80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d90:	d101      	bne.n	8005d96 <LL_RCC_PLL_IsReady+0x18>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <LL_RCC_PLL_IsReady+0x1a>
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <LL_RCC_PLL_GetN>:
{
 8005da2:	b480      	push	{r7}
 8005da4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	0a1b      	lsrs	r3, r3, #8
 8005dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <LL_RCC_PLL_GetR>:
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <LL_RCC_PLL_GetDivider>:
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <LL_RCC_PLL_GetMainSource>:
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f003 0303 	and.w	r3, r3, #3
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <LL_RCC_IsActiveFlag_HPRE>:
{
 8005e04:	b480      	push	{r7}
 8005e06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e16:	d101      	bne.n	8005e1c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e000      	b.n	8005e1e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e3c:	d101      	bne.n	8005e42 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005e4e:	b480      	push	{r7}
 8005e50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e62:	d101      	bne.n	8005e68 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e86:	d101      	bne.n	8005e8c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ea6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005eaa:	d101      	bne.n	8005eb0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ebc:	b590      	push	{r4, r7, lr}
 8005ebe:	b08d      	sub	sp, #52	; 0x34
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e37e      	b.n	80065cc <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 8092 	beq.w	8006000 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005edc:	f7ff fe7d 	bl	8005bda <LL_RCC_GetSysClkSource>
 8005ee0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ee2:	f7ff ff83 	bl	8005dec <LL_RCC_PLL_GetMainSource>
 8005ee6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <HAL_RCC_OscConfig+0x3e>
 8005eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef0:	2b0c      	cmp	r3, #12
 8005ef2:	d14c      	bne.n	8005f8e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d149      	bne.n	8005f8e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005efa:	f7ff fe0b 	bl	8005b14 <LL_RCC_MSI_IsReady>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <HAL_RCC_OscConfig+0x54>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e35d      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005f14:	f7ff fe23 	bl	8005b5e <LL_RCC_MSI_GetRange>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	429c      	cmp	r4, r3
 8005f1c:	d914      	bls.n	8005f48 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fd5e 	bl	80069e4 <RCC_SetFlashLatencyFromMSIRange>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e34c      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fdfd 	bl	8005b36 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff fe21 	bl	8005b88 <LL_RCC_MSI_SetCalibTrimming>
 8005f46:	e013      	b.n	8005f70 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff fdf2 	bl	8005b36 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fe16 	bl	8005b88 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fd3f 	bl	80069e4 <RCC_SetFlashLatencyFromMSIRange>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e32d      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f70:	f000 fcdc 	bl	800692c <HAL_RCC_GetHCLKFreq>
 8005f74:	4603      	mov	r3, r0
 8005f76:	4ab3      	ldr	r2, [pc, #716]	; (8006244 <HAL_RCC_OscConfig+0x388>)
 8005f78:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f7a:	4bb3      	ldr	r3, [pc, #716]	; (8006248 <HAL_RCC_OscConfig+0x38c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fb fb38 	bl	80015f4 <HAL_InitTick>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d039      	beq.n	8005ffe <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e31e      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01e      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f96:	f7ff fd9f 	bl	8005ad8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f9a:	f7fb fefd 	bl	8001d98 <HAL_GetTick>
 8005f9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fa2:	f7fb fef9 	bl	8001d98 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e30b      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005fb4:	f7ff fdae 	bl	8005b14 <LL_RCC_MSI_IsReady>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f1      	beq.n	8005fa2 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff fdb7 	bl	8005b36 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7ff fddb 	bl	8005b88 <LL_RCC_MSI_SetCalibTrimming>
 8005fd2:	e015      	b.n	8006000 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005fd4:	f7ff fd8f 	bl	8005af6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fd8:	f7fb fede 	bl	8001d98 <HAL_GetTick>
 8005fdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fe0:	f7fb feda 	bl	8001d98 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e2ec      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005ff2:	f7ff fd8f 	bl	8005b14 <LL_RCC_MSI_IsReady>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f1      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x124>
 8005ffc:	e000      	b.n	8006000 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ffe:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d04e      	beq.n	80060aa <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800600c:	f7ff fde5 	bl	8005bda <LL_RCC_GetSysClkSource>
 8006010:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006012:	f7ff feeb 	bl	8005dec <LL_RCC_PLL_GetMainSource>
 8006016:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	2b08      	cmp	r3, #8
 800601c:	d005      	beq.n	800602a <HAL_RCC_OscConfig+0x16e>
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	2b0c      	cmp	r3, #12
 8006022:	d10d      	bne.n	8006040 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	2b03      	cmp	r3, #3
 8006028:	d10a      	bne.n	8006040 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800602a:	f7ff fbf5 	bl	8005818 <LL_RCC_HSE_IsReady>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d039      	beq.n	80060a8 <HAL_RCC_OscConfig+0x1ec>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d135      	bne.n	80060a8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e2c5      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006048:	d102      	bne.n	8006050 <HAL_RCC_OscConfig+0x194>
 800604a:	f7ff fbc7 	bl	80057dc <LL_RCC_HSE_Enable>
 800604e:	e001      	b.n	8006054 <HAL_RCC_OscConfig+0x198>
 8006050:	f7ff fbd3 	bl	80057fa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d012      	beq.n	8006082 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605c:	f7fb fe9c 	bl	8001d98 <HAL_GetTick>
 8006060:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006064:	f7fb fe98 	bl	8001d98 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b64      	cmp	r3, #100	; 0x64
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e2aa      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006076:	f7ff fbcf 	bl	8005818 <LL_RCC_HSE_IsReady>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0f1      	beq.n	8006064 <HAL_RCC_OscConfig+0x1a8>
 8006080:	e013      	b.n	80060aa <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006082:	f7fb fe89 	bl	8001d98 <HAL_GetTick>
 8006086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800608a:	f7fb fe85 	bl	8001d98 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b64      	cmp	r3, #100	; 0x64
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e297      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800609c:	f7ff fbbc 	bl	8005818 <LL_RCC_HSE_IsReady>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1f1      	bne.n	800608a <HAL_RCC_OscConfig+0x1ce>
 80060a6:	e000      	b.n	80060aa <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a8:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d051      	beq.n	800615a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060b6:	f7ff fd90 	bl	8005bda <LL_RCC_GetSysClkSource>
 80060ba:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060bc:	f7ff fe96 	bl	8005dec <LL_RCC_PLL_GetMainSource>
 80060c0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d005      	beq.n	80060d4 <HAL_RCC_OscConfig+0x218>
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	2b0c      	cmp	r3, #12
 80060cc:	d113      	bne.n	80060f6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d110      	bne.n	80060f6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060d4:	f7ff fbd0 	bl	8005878 <LL_RCC_HSI_IsReady>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <HAL_RCC_OscConfig+0x22e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e270      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fbd4 	bl	800589c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060f4:	e031      	b.n	800615a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d019      	beq.n	8006132 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060fe:	f7ff fb9d 	bl	800583c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006102:	f7fb fe49 	bl	8001d98 <HAL_GetTick>
 8006106:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006108:	e008      	b.n	800611c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800610a:	f7fb fe45 	bl	8001d98 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e257      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800611c:	f7ff fbac 	bl	8005878 <LL_RCC_HSI_IsReady>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f1      	beq.n	800610a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff fbb6 	bl	800589c <LL_RCC_HSI_SetCalibTrimming>
 8006130:	e013      	b.n	800615a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006132:	f7ff fb92 	bl	800585a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006136:	f7fb fe2f 	bl	8001d98 <HAL_GetTick>
 800613a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800613e:	f7fb fe2b 	bl	8001d98 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e23d      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006150:	f7ff fb92 	bl	8005878 <LL_RCC_HSI_IsReady>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f1      	bne.n	800613e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0308 	and.w	r3, r3, #8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 80a3 	beq.w	80062ba <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d076      	beq.n	800626a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2b00      	cmp	r3, #0
 8006186:	d046      	beq.n	8006216 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006188:	f7ff fc49 	bl	8005a1e <LL_RCC_LSI1_IsReady>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d113      	bne.n	80061ba <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006192:	f7ff fc22 	bl	80059da <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006196:	f7fb fdff 	bl	8001d98 <HAL_GetTick>
 800619a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800619e:	f7fb fdfb 	bl	8001d98 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e20d      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80061b0:	f7ff fc35 	bl	8005a1e <LL_RCC_LSI1_IsReady>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0f1      	beq.n	800619e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80061ba:	f7ff fc42 	bl	8005a42 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061be:	f7fb fdeb 	bl	8001d98 <HAL_GetTick>
 80061c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80061c4:	e008      	b.n	80061d8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80061c6:	f7fb fde7 	bl	8001d98 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e1f9      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80061d8:	f7ff fc55 	bl	8005a86 <LL_RCC_LSI2_IsReady>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0f1      	beq.n	80061c6 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff fc5f 	bl	8005aaa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80061ec:	f7ff fc06 	bl	80059fc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f0:	f7fb fdd2 	bl	8001d98 <HAL_GetTick>
 80061f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80061f8:	f7fb fdce 	bl	8001d98 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e1e0      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800620a:	f7ff fc08 	bl	8005a1e <LL_RCC_LSI1_IsReady>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1f1      	bne.n	80061f8 <HAL_RCC_OscConfig+0x33c>
 8006214:	e051      	b.n	80062ba <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006216:	f7ff fbe0 	bl	80059da <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621a:	f7fb fdbd 	bl	8001d98 <HAL_GetTick>
 800621e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006222:	f7fb fdb9 	bl	8001d98 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e1cb      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006234:	f7ff fbf3 	bl	8005a1e <LL_RCC_LSI1_IsReady>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0f1      	beq.n	8006222 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800623e:	f7ff fc11 	bl	8005a64 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006242:	e00c      	b.n	800625e <HAL_RCC_OscConfig+0x3a2>
 8006244:	20000010 	.word	0x20000010
 8006248:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800624c:	f7fb fda4 	bl	8001d98 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b03      	cmp	r3, #3
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e1b6      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800625e:	f7ff fc12 	bl	8005a86 <LL_RCC_LSI2_IsReady>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1f1      	bne.n	800624c <HAL_RCC_OscConfig+0x390>
 8006268:	e027      	b.n	80062ba <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800626a:	f7ff fbfb 	bl	8005a64 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626e:	f7fb fd93 	bl	8001d98 <HAL_GetTick>
 8006272:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006274:	e008      	b.n	8006288 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006276:	f7fb fd8f 	bl	8001d98 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b03      	cmp	r3, #3
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e1a1      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006288:	f7ff fbfd 	bl	8005a86 <LL_RCC_LSI2_IsReady>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f1      	bne.n	8006276 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006292:	f7ff fbb3 	bl	80059fc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006296:	f7fb fd7f 	bl	8001d98 <HAL_GetTick>
 800629a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800629c:	e008      	b.n	80062b0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800629e:	f7fb fd7b 	bl	8001d98 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e18d      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80062b0:	f7ff fbb5 	bl	8005a1e <LL_RCC_LSI1_IsReady>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1f1      	bne.n	800629e <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d05b      	beq.n	800637e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062c6:	4bb5      	ldr	r3, [pc, #724]	; (800659c <HAL_RCC_OscConfig+0x6e0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d114      	bne.n	80062fc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80062d2:	f7ff fa43 	bl	800575c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062d6:	f7fb fd5f 	bl	8001d98 <HAL_GetTick>
 80062da:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062dc:	e008      	b.n	80062f0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062de:	f7fb fd5b 	bl	8001d98 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e16d      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062f0:	4baa      	ldr	r3, [pc, #680]	; (800659c <HAL_RCC_OscConfig+0x6e0>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0f0      	beq.n	80062de <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d102      	bne.n	800630a <HAL_RCC_OscConfig+0x44e>
 8006304:	f7ff fb13 	bl	800592e <LL_RCC_LSE_Enable>
 8006308:	e00c      	b.n	8006324 <HAL_RCC_OscConfig+0x468>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	2b05      	cmp	r3, #5
 8006310:	d104      	bne.n	800631c <HAL_RCC_OscConfig+0x460>
 8006312:	f7ff fb2e 	bl	8005972 <LL_RCC_LSE_EnableBypass>
 8006316:	f7ff fb0a 	bl	800592e <LL_RCC_LSE_Enable>
 800631a:	e003      	b.n	8006324 <HAL_RCC_OscConfig+0x468>
 800631c:	f7ff fb18 	bl	8005950 <LL_RCC_LSE_Disable>
 8006320:	f7ff fb38 	bl	8005994 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d014      	beq.n	8006356 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632c:	f7fb fd34 	bl	8001d98 <HAL_GetTick>
 8006330:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006332:	e00a      	b.n	800634a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006334:	f7fb fd30 	bl	8001d98 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006342:	4293      	cmp	r3, r2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e140      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800634a:	f7ff fb34 	bl	80059b6 <LL_RCC_LSE_IsReady>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0ef      	beq.n	8006334 <HAL_RCC_OscConfig+0x478>
 8006354:	e013      	b.n	800637e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006356:	f7fb fd1f 	bl	8001d98 <HAL_GetTick>
 800635a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800635c:	e00a      	b.n	8006374 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800635e:	f7fb fd1b 	bl	8001d98 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	f241 3288 	movw	r2, #5000	; 0x1388
 800636c:	4293      	cmp	r3, r2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e12b      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006374:	f7ff fb1f 	bl	80059b6 <LL_RCC_LSE_IsReady>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1ef      	bne.n	800635e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d02c      	beq.n	80063e4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	2b00      	cmp	r3, #0
 8006390:	d014      	beq.n	80063bc <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006392:	f7ff fa98 	bl	80058c6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006396:	f7fb fcff 	bl	8001d98 <HAL_GetTick>
 800639a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800639c:	e008      	b.n	80063b0 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800639e:	f7fb fcfb 	bl	8001d98 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e10d      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80063b0:	f7ff faab 	bl	800590a <LL_RCC_HSI48_IsReady>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f1      	beq.n	800639e <HAL_RCC_OscConfig+0x4e2>
 80063ba:	e013      	b.n	80063e4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063bc:	f7ff fa94 	bl	80058e8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c0:	f7fb fcea 	bl	8001d98 <HAL_GetTick>
 80063c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063c8:	f7fb fce6 	bl	8001d98 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e0f8      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80063da:	f7ff fa96 	bl	800590a <LL_RCC_HSI48_IsReady>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f1      	bne.n	80063c8 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 80ee 	beq.w	80065ca <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ee:	f7ff fbf4 	bl	8005bda <LL_RCC_GetSysClkSource>
 80063f2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80063f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	2b02      	cmp	r3, #2
 8006402:	f040 80af 	bne.w	8006564 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f003 0203 	and.w	r2, r3, #3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	429a      	cmp	r2, r3
 8006412:	d123      	bne.n	800645c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800641e:	429a      	cmp	r2, r3
 8006420:	d11c      	bne.n	800645c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	0a1b      	lsrs	r3, r3, #8
 8006426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800642e:	429a      	cmp	r2, r3
 8006430:	d114      	bne.n	800645c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800643c:	429a      	cmp	r2, r3
 800643e:	d10d      	bne.n	800645c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800644a:	429a      	cmp	r2, r3
 800644c:	d106      	bne.n	800645c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006458:	429a      	cmp	r2, r3
 800645a:	d05d      	beq.n	8006518 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b0c      	cmp	r3, #12
 8006460:	d058      	beq.n	8006514 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e0ab      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006474:	f7ff fc74 	bl	8005d60 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006478:	f7fb fc8e 	bl	8001d98 <HAL_GetTick>
 800647c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006480:	f7fb fc8a 	bl	8001d98 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e09c      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1ef      	bne.n	8006480 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	4b3e      	ldr	r3, [pc, #248]	; (80065a0 <HAL_RCC_OscConfig+0x6e4>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064b2:	4311      	orrs	r1, r2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064b8:	0212      	lsls	r2, r2, #8
 80064ba:	4311      	orrs	r1, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80064c0:	4311      	orrs	r1, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80064c6:	4311      	orrs	r1, r2
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80064cc:	430a      	orrs	r2, r1
 80064ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80064d6:	f7ff fc34 	bl	8005d42 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80064ea:	f7fb fc55 	bl	8001d98 <HAL_GetTick>
 80064ee:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064f2:	f7fb fc51 	bl	8001d98 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e063      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0ef      	beq.n	80064f2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006512:	e05a      	b.n	80065ca <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e059      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d151      	bne.n	80065ca <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006526:	f7ff fc0c 	bl	8005d42 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800652a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006538:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800653a:	f7fb fc2d 	bl	8001d98 <HAL_GetTick>
 800653e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006540:	e008      	b.n	8006554 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006542:	f7fb fc29 	bl	8001d98 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e03b      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0ef      	beq.n	8006542 <HAL_RCC_OscConfig+0x686>
 8006562:	e032      	b.n	80065ca <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2b0c      	cmp	r3, #12
 8006568:	d02d      	beq.n	80065c6 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800656a:	f7ff fbf9 	bl	8005d60 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800656e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006578:	f023 0303 	bic.w	r3, r3, #3
 800657c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800657e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006588:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800658c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006590:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006592:	f7fb fc01 	bl	8001d98 <HAL_GetTick>
 8006596:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006598:	e00d      	b.n	80065b6 <HAL_RCC_OscConfig+0x6fa>
 800659a:	bf00      	nop
 800659c:	58000400 	.word	0x58000400
 80065a0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a4:	f7fb fbf8 	bl	8001d98 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e00a      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1ef      	bne.n	80065a4 <HAL_RCC_OscConfig+0x6e8>
 80065c4:	e001      	b.n	80065ca <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e000      	b.n	80065cc <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3734      	adds	r7, #52	; 0x34
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd90      	pop	{r4, r7, pc}

080065d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e12d      	b.n	8006844 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065e8:	4b98      	ldr	r3, [pc, #608]	; (800684c <HAL_RCC_ClockConfig+0x278>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d91b      	bls.n	800662e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f6:	4b95      	ldr	r3, [pc, #596]	; (800684c <HAL_RCC_ClockConfig+0x278>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f023 0207 	bic.w	r2, r3, #7
 80065fe:	4993      	ldr	r1, [pc, #588]	; (800684c <HAL_RCC_ClockConfig+0x278>)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	4313      	orrs	r3, r2
 8006604:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006606:	f7fb fbc7 	bl	8001d98 <HAL_GetTick>
 800660a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800660c:	e008      	b.n	8006620 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800660e:	f7fb fbc3 	bl	8001d98 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e111      	b.n	8006844 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006620:	4b8a      	ldr	r3, [pc, #552]	; (800684c <HAL_RCC_ClockConfig+0x278>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d1ef      	bne.n	800660e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d016      	beq.n	8006668 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff fad7 	bl	8005bf2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006644:	f7fb fba8 	bl	8001d98 <HAL_GetTick>
 8006648:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800664a:	e008      	b.n	800665e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800664c:	f7fb fba4 	bl	8001d98 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e0f2      	b.n	8006844 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800665e:	f7ff fbd1 	bl	8005e04 <LL_RCC_IsActiveFlag_HPRE>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0f1      	beq.n	800664c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b00      	cmp	r3, #0
 8006672:	d016      	beq.n	80066a2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff face 	bl	8005c1a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800667e:	f7fb fb8b 	bl	8001d98 <HAL_GetTick>
 8006682:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006684:	e008      	b.n	8006698 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006686:	f7fb fb87 	bl	8001d98 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e0d5      	b.n	8006844 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006698:	f7ff fbc6 	bl	8005e28 <LL_RCC_IsActiveFlag_C2HPRE>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0f1      	beq.n	8006686 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d016      	beq.n	80066dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff fac7 	bl	8005c46 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066b8:	f7fb fb6e 	bl	8001d98 <HAL_GetTick>
 80066bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066c0:	f7fb fb6a 	bl	8001d98 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e0b8      	b.n	8006844 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80066d2:	f7ff fbbc 	bl	8005e4e <LL_RCC_IsActiveFlag_SHDHPRE>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0f1      	beq.n	80066c0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d016      	beq.n	8006716 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff fac1 	bl	8005c74 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066f2:	f7fb fb51 	bl	8001d98 <HAL_GetTick>
 80066f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80066f8:	e008      	b.n	800670c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066fa:	f7fb fb4d 	bl	8001d98 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e09b      	b.n	8006844 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800670c:	f7ff fbb2 	bl	8005e74 <LL_RCC_IsActiveFlag_PPRE1>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0f1      	beq.n	80066fa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d017      	beq.n	8006752 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff fab7 	bl	8005c9c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800672e:	f7fb fb33 	bl	8001d98 <HAL_GetTick>
 8006732:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006734:	e008      	b.n	8006748 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006736:	f7fb fb2f 	bl	8001d98 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e07d      	b.n	8006844 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006748:	f7ff fba6 	bl	8005e98 <LL_RCC_IsActiveFlag_PPRE2>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0f1      	beq.n	8006736 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d043      	beq.n	80067e6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d106      	bne.n	8006774 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006766:	f7ff f857 	bl	8005818 <LL_RCC_HSE_IsReady>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d11e      	bne.n	80067ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e067      	b.n	8006844 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2b03      	cmp	r3, #3
 800677a:	d106      	bne.n	800678a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800677c:	f7ff faff 	bl	8005d7e <LL_RCC_PLL_IsReady>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d113      	bne.n	80067ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e05c      	b.n	8006844 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006792:	f7ff f9bf 	bl	8005b14 <LL_RCC_MSI_IsReady>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d108      	bne.n	80067ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e051      	b.n	8006844 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80067a0:	f7ff f86a 	bl	8005878 <LL_RCC_HSI_IsReady>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e04a      	b.n	8006844 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff f9fd 	bl	8005bb2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067b8:	f7fb faee 	bl	8001d98 <HAL_GetTick>
 80067bc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067be:	e00a      	b.n	80067d6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067c0:	f7fb faea 	bl	8001d98 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e036      	b.n	8006844 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d6:	f7ff fa00 	bl	8005bda <LL_RCC_GetSysClkSource>
 80067da:	4602      	mov	r2, r0
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d1ec      	bne.n	80067c0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067e6:	4b19      	ldr	r3, [pc, #100]	; (800684c <HAL_RCC_ClockConfig+0x278>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d21b      	bcs.n	800682c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067f4:	4b15      	ldr	r3, [pc, #84]	; (800684c <HAL_RCC_ClockConfig+0x278>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f023 0207 	bic.w	r2, r3, #7
 80067fc:	4913      	ldr	r1, [pc, #76]	; (800684c <HAL_RCC_ClockConfig+0x278>)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	4313      	orrs	r3, r2
 8006802:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006804:	f7fb fac8 	bl	8001d98 <HAL_GetTick>
 8006808:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800680a:	e008      	b.n	800681e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800680c:	f7fb fac4 	bl	8001d98 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e012      	b.n	8006844 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800681e:	4b0b      	ldr	r3, [pc, #44]	; (800684c <HAL_RCC_ClockConfig+0x278>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d1ef      	bne.n	800680c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800682c:	f000 f87e 	bl	800692c <HAL_RCC_GetHCLKFreq>
 8006830:	4603      	mov	r3, r0
 8006832:	4a07      	ldr	r2, [pc, #28]	; (8006850 <HAL_RCC_ClockConfig+0x27c>)
 8006834:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006836:	f7fb fabb 	bl	8001db0 <HAL_GetTickPrio>
 800683a:	4603      	mov	r3, r0
 800683c:	4618      	mov	r0, r3
 800683e:	f7fa fed9 	bl	80015f4 <HAL_InitTick>
 8006842:	4603      	mov	r3, r0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	58004000 	.word	0x58004000
 8006850:	20000010 	.word	0x20000010

08006854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006854:	b590      	push	{r4, r7, lr}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800685a:	f7ff f9be 	bl	8005bda <LL_RCC_GetSysClkSource>
 800685e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006866:	f7ff f97a 	bl	8005b5e <LL_RCC_MSI_GetRange>
 800686a:	4603      	mov	r3, r0
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	4a2b      	ldr	r2, [pc, #172]	; (8006920 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	e04b      	b.n	8006914 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b04      	cmp	r3, #4
 8006880:	d102      	bne.n	8006888 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006882:	4b28      	ldr	r3, [pc, #160]	; (8006924 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	e045      	b.n	8006914 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b08      	cmp	r3, #8
 800688c:	d10a      	bne.n	80068a4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800688e:	f7fe ff93 	bl	80057b8 <LL_RCC_HSE_IsEnabledDiv2>
 8006892:	4603      	mov	r3, r0
 8006894:	2b01      	cmp	r3, #1
 8006896:	d102      	bne.n	800689e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006898:	4b22      	ldr	r3, [pc, #136]	; (8006924 <HAL_RCC_GetSysClockFreq+0xd0>)
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	e03a      	b.n	8006914 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800689e:	4b22      	ldr	r3, [pc, #136]	; (8006928 <HAL_RCC_GetSysClockFreq+0xd4>)
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	e037      	b.n	8006914 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80068a4:	f7ff faa2 	bl	8005dec <LL_RCC_PLL_GetMainSource>
 80068a8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d003      	beq.n	80068b8 <HAL_RCC_GetSysClockFreq+0x64>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d003      	beq.n	80068be <HAL_RCC_GetSysClockFreq+0x6a>
 80068b6:	e00d      	b.n	80068d4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80068b8:	4b1a      	ldr	r3, [pc, #104]	; (8006924 <HAL_RCC_GetSysClockFreq+0xd0>)
 80068ba:	60bb      	str	r3, [r7, #8]
        break;
 80068bc:	e015      	b.n	80068ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80068be:	f7fe ff7b 	bl	80057b8 <LL_RCC_HSE_IsEnabledDiv2>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d102      	bne.n	80068ce <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80068c8:	4b16      	ldr	r3, [pc, #88]	; (8006924 <HAL_RCC_GetSysClockFreq+0xd0>)
 80068ca:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80068cc:	e00d      	b.n	80068ea <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80068ce:	4b16      	ldr	r3, [pc, #88]	; (8006928 <HAL_RCC_GetSysClockFreq+0xd4>)
 80068d0:	60bb      	str	r3, [r7, #8]
        break;
 80068d2:	e00a      	b.n	80068ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80068d4:	f7ff f943 	bl	8005b5e <LL_RCC_MSI_GetRange>
 80068d8:	4603      	mov	r3, r0
 80068da:	091b      	lsrs	r3, r3, #4
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	4a0f      	ldr	r2, [pc, #60]	; (8006920 <HAL_RCC_GetSysClockFreq+0xcc>)
 80068e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e6:	60bb      	str	r3, [r7, #8]
        break;
 80068e8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80068ea:	f7ff fa5a 	bl	8005da2 <LL_RCC_PLL_GetN>
 80068ee:	4602      	mov	r2, r0
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	fb03 f402 	mul.w	r4, r3, r2
 80068f6:	f7ff fa6d 	bl	8005dd4 <LL_RCC_PLL_GetDivider>
 80068fa:	4603      	mov	r3, r0
 80068fc:	091b      	lsrs	r3, r3, #4
 80068fe:	3301      	adds	r3, #1
 8006900:	fbb4 f4f3 	udiv	r4, r4, r3
 8006904:	f7ff fa5a 	bl	8005dbc <LL_RCC_PLL_GetR>
 8006908:	4603      	mov	r3, r0
 800690a:	0f5b      	lsrs	r3, r3, #29
 800690c:	3301      	adds	r3, #1
 800690e:	fbb4 f3f3 	udiv	r3, r4, r3
 8006912:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006914:	68fb      	ldr	r3, [r7, #12]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	bd90      	pop	{r4, r7, pc}
 800691e:	bf00      	nop
 8006920:	080132b0 	.word	0x080132b0
 8006924:	00f42400 	.word	0x00f42400
 8006928:	01e84800 	.word	0x01e84800

0800692c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800692c:	b598      	push	{r3, r4, r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006930:	f7ff ff90 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 8006934:	4604      	mov	r4, r0
 8006936:	f7ff f9c5 	bl	8005cc4 <LL_RCC_GetAHBPrescaler>
 800693a:	4603      	mov	r3, r0
 800693c:	091b      	lsrs	r3, r3, #4
 800693e:	f003 030f 	and.w	r3, r3, #15
 8006942:	4a03      	ldr	r2, [pc, #12]	; (8006950 <HAL_RCC_GetHCLKFreq+0x24>)
 8006944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006948:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800694c:	4618      	mov	r0, r3
 800694e:	bd98      	pop	{r3, r4, r7, pc}
 8006950:	08013250 	.word	0x08013250

08006954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006954:	b598      	push	{r3, r4, r7, lr}
 8006956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006958:	f7ff ffe8 	bl	800692c <HAL_RCC_GetHCLKFreq>
 800695c:	4604      	mov	r4, r0
 800695e:	f7ff f9e4 	bl	8005d2a <LL_RCC_GetAPB2Prescaler>
 8006962:	4603      	mov	r3, r0
 8006964:	0adb      	lsrs	r3, r3, #11
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	4a04      	ldr	r2, [pc, #16]	; (800697c <HAL_RCC_GetPCLK2Freq+0x28>)
 800696c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006970:	f003 031f 	and.w	r3, r3, #31
 8006974:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006978:	4618      	mov	r0, r3
 800697a:	bd98      	pop	{r3, r4, r7, pc}
 800697c:	08013290 	.word	0x08013290

08006980 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	226f      	movs	r2, #111	; 0x6f
 800698e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8006990:	f7ff f923 	bl	8005bda <LL_RCC_GetSysClkSource>
 8006994:	4602      	mov	r2, r0
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800699a:	f7ff f993 	bl	8005cc4 <LL_RCC_GetAHBPrescaler>
 800699e:	4602      	mov	r2, r0
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80069a4:	f7ff f9b5 	bl	8005d12 <LL_RCC_GetAPB1Prescaler>
 80069a8:	4602      	mov	r2, r0
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80069ae:	f7ff f9bc 	bl	8005d2a <LL_RCC_GetAPB2Prescaler>
 80069b2:	4602      	mov	r2, r0
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80069b8:	f7ff f990 	bl	8005cdc <LL_C2_RCC_GetAHBPrescaler>
 80069bc:	4602      	mov	r2, r0
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80069c2:	f7ff f998 	bl	8005cf6 <LL_RCC_GetAHB4Prescaler>
 80069c6:	4602      	mov	r2, r0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80069cc:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <HAL_RCC_GetClockConfig+0x60>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0207 	and.w	r2, r3, #7
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	601a      	str	r2, [r3, #0]
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	58004000 	.word	0x58004000

080069e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2bb0      	cmp	r3, #176	; 0xb0
 80069f0:	d903      	bls.n	80069fa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80069f2:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80069f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e007      	b.n	8006a0a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	091b      	lsrs	r3, r3, #4
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	4a11      	ldr	r2, [pc, #68]	; (8006a48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a08:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006a0a:	f7ff f974 	bl	8005cf6 <LL_RCC_GetAHB4Prescaler>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	4a0d      	ldr	r2, [pc, #52]	; (8006a4c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a22:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4a0a      	ldr	r2, [pc, #40]	; (8006a50 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	0c9c      	lsrs	r4, r3, #18
 8006a2e:	f7fe fea5 	bl	800577c <HAL_PWREx_GetVoltageRange>
 8006a32:	4603      	mov	r3, r0
 8006a34:	4619      	mov	r1, r3
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 f80c 	bl	8006a54 <RCC_SetFlashLatency>
 8006a3c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd90      	pop	{r4, r7, pc}
 8006a46:	bf00      	nop
 8006a48:	080132b0 	.word	0x080132b0
 8006a4c:	08013250 	.word	0x08013250
 8006a50:	431bde83 	.word	0x431bde83

08006a54 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006a54:	b590      	push	{r4, r7, lr}
 8006a56:	b093      	sub	sp, #76	; 0x4c
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006a5e:	4b39      	ldr	r3, [pc, #228]	; (8006b44 <RCC_SetFlashLatency+0xf0>)
 8006a60:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006a6a:	4a37      	ldr	r2, [pc, #220]	; (8006b48 <RCC_SetFlashLatency+0xf4>)
 8006a6c:	f107 031c 	add.w	r3, r7, #28
 8006a70:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006a76:	4b35      	ldr	r3, [pc, #212]	; (8006b4c <RCC_SetFlashLatency+0xf8>)
 8006a78:	f107 040c 	add.w	r4, r7, #12
 8006a7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006a82:	2300      	movs	r3, #0
 8006a84:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a8c:	d11c      	bne.n	8006ac8 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a8e:	2300      	movs	r3, #0
 8006a90:	643b      	str	r3, [r7, #64]	; 0x40
 8006a92:	e015      	b.n	8006ac0 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d808      	bhi.n	8006aba <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006ab6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006ab8:	e022      	b.n	8006b00 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006abc:	3301      	adds	r3, #1
 8006abe:	643b      	str	r3, [r7, #64]	; 0x40
 8006ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d9e6      	bls.n	8006a94 <RCC_SetFlashLatency+0x40>
 8006ac6:	e01b      	b.n	8006b00 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006acc:	e015      	b.n	8006afa <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d808      	bhi.n	8006af4 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006aea:	4413      	add	r3, r2
 8006aec:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006af0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006af2:	e005      	b.n	8006b00 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af6:	3301      	adds	r3, #1
 8006af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d9e6      	bls.n	8006ace <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006b00:	4b13      	ldr	r3, [pc, #76]	; (8006b50 <RCC_SetFlashLatency+0xfc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f023 0207 	bic.w	r2, r3, #7
 8006b08:	4911      	ldr	r1, [pc, #68]	; (8006b50 <RCC_SetFlashLatency+0xfc>)
 8006b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b10:	f7fb f942 	bl	8001d98 <HAL_GetTick>
 8006b14:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006b16:	e008      	b.n	8006b2a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006b18:	f7fb f93e 	bl	8001d98 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e007      	b.n	8006b3a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006b2a:	4b09      	ldr	r3, [pc, #36]	; (8006b50 <RCC_SetFlashLatency+0xfc>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d1ef      	bne.n	8006b18 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	374c      	adds	r7, #76	; 0x4c
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd90      	pop	{r4, r7, pc}
 8006b42:	bf00      	nop
 8006b44:	0801310c 	.word	0x0801310c
 8006b48:	0801311c 	.word	0x0801311c
 8006b4c:	08013128 	.word	0x08013128
 8006b50:	58004000 	.word	0x58004000

08006b54 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b66:	d101      	bne.n	8006b6c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e000      	b.n	8006b6e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <LL_RCC_HSE_IsReady>:
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b8a:	d101      	bne.n	8006b90 <LL_RCC_HSE_IsReady+0x18>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e000      	b.n	8006b92 <LL_RCC_HSE_IsReady+0x1a>
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <LL_RCC_HSI_IsReady>:
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bae:	d101      	bne.n	8006bb4 <LL_RCC_HSI_IsReady+0x18>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <LL_RCC_HSI_IsReady+0x1a>
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <LL_RCC_HSI48_IsReady>:
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d101      	bne.n	8006bd8 <LL_RCC_HSI48_IsReady+0x18>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <LL_RCC_HSI48_IsReady+0x1a>
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <LL_RCC_LSE_IsEnabled>:
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <LL_RCC_LSE_IsEnabled+0x18>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e000      	b.n	8006bfe <LL_RCC_LSE_IsEnabled+0x1a>
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <LL_RCC_LSE_IsReady>:
{
 8006c08:	b480      	push	{r7}
 8006c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d101      	bne.n	8006c20 <LL_RCC_LSE_IsReady+0x18>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e000      	b.n	8006c22 <LL_RCC_LSE_IsReady+0x1a>
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <LL_RCC_LSI1_IsReady>:
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d101      	bne.n	8006c44 <LL_RCC_LSI1_IsReady+0x18>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <LL_RCC_LSI1_IsReady+0x1a>
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <LL_RCC_LSI2_IsReady>:
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d101      	bne.n	8006c68 <LL_RCC_LSI2_IsReady+0x18>
 8006c64:	2301      	movs	r3, #1
 8006c66:	e000      	b.n	8006c6a <LL_RCC_LSI2_IsReady+0x1a>
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <LL_RCC_MSI_IsReady>:
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d101      	bne.n	8006c8a <LL_RCC_MSI_IsReady+0x16>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <LL_RCC_MSI_IsReady+0x18>
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <LL_RCC_MSI_EnablePLLMode>:
{
 8006c96:	b480      	push	{r7}
 8006c98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8006c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ca4:	f043 0304 	orr.w	r3, r3, #4
 8006ca8:	6013      	str	r3, [r2, #0]
}
 8006caa:	bf00      	nop
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <LL_RCC_MSI_GetRange>:
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cc4:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2bb0      	cmp	r3, #176	; 0xb0
 8006cca:	d901      	bls.n	8006cd0 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006ccc:	23b0      	movs	r3, #176	; 0xb0
 8006cce:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006cd0:	687b      	ldr	r3, [r7, #4]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <LL_RCC_SetRFWKPClockSource>:
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <LL_RCC_GetRFWKPClockSource>:
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 8006d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <LL_RCC_GetAHBPrescaler>:
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <LL_RCC_GetAPB1Prescaler>:
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <LL_RCC_GetAPB2Prescaler>:
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <LL_RCC_SetSMPSClockSource>:
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	f023 0203 	bic.w	r2, r3, #3
 8006d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <LL_RCC_GetSMPSClockSource>:
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8006d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <LL_RCC_SetSMPSPrescaler>:
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <LL_RCC_GetSMPSPrescaler>:
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 8006dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	f003 0330 	and.w	r3, r3, #48	; 0x30
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <LL_RCC_SetUSARTClockSource>:
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfc:	f023 0203 	bic.w	r2, r3, #3
 8006e00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <LL_RCC_SetLPUARTClockSource>:
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <LL_RCC_SetI2CClockSource>:
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	091b      	lsrs	r3, r3, #4
 8006e58:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	401a      	ands	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	011b      	lsls	r3, r3, #4
 8006e64:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <LL_RCC_SetLPTIMClockSource>:
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	0c1b      	lsrs	r3, r3, #16
 8006e92:	041b      	lsls	r3, r3, #16
 8006e94:	43db      	mvns	r3, r3
 8006e96:	401a      	ands	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	041b      	lsls	r3, r3, #16
 8006e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <LL_RCC_SetSAIClockSource>:
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <LL_RCC_SetRNGClockSource>:
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b083      	sub	sp, #12
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eee:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006ef2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006efe:	bf00      	nop
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <LL_RCC_SetCLK48ClockSource>:
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <LL_RCC_SetUSBClockSource>:
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b082      	sub	sp, #8
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff ffe3 	bl	8006f0a <LL_RCC_SetCLK48ClockSource>
}
 8006f44:	bf00      	nop
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <LL_RCC_SetADCClockSource>:
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <LL_RCC_GetUSARTClockSource>:
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4013      	ands	r3, r2
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <LL_RCC_GetLPUARTClockSource>:
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4013      	ands	r3, r2
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <LL_RCC_GetI2CClockSource>:
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8006fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	091a      	lsrs	r2, r3, #4
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	4313      	orrs	r3, r2
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <LL_RCC_GetLPTIMClockSource>:
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8006fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	0c1a      	lsrs	r2, r3, #16
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4313      	orrs	r3, r2
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <LL_RCC_GetSAIClockSource>:
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 800700e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007012:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4013      	ands	r3, r2
}
 800701a:	4618      	mov	r0, r3
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <LL_RCC_GetRNGClockSource>:
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 800702e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007032:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4013      	ands	r3, r2
}
 800703a:	4618      	mov	r0, r3
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <LL_RCC_GetCLK48ClockSource>:
{
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 800704e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007052:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4013      	ands	r3, r2
}
 800705a:	4618      	mov	r0, r3
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <LL_RCC_GetUSBClockSource>:
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff ffe9 	bl	8007046 <LL_RCC_GetCLK48ClockSource>
 8007074:	4603      	mov	r3, r0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <LL_RCC_GetADCClockSource>:
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8007086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800708a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4013      	ands	r3, r2
}
 8007092:	4618      	mov	r0, r3
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <LL_RCC_SetRTCClockSource>:
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80070a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <LL_RCC_GetRTCClockSource>:
{
 80070ca:	b480      	push	{r7}
 80070cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80070ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80070da:	4618      	mov	r0, r3
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <LL_RCC_ForceBackupDomainReset>:
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80070e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80070fc:	bf00      	nop
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007106:	b480      	push	{r7}
 8007108:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800710a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800710e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800711e:	bf00      	nop
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <LL_RCC_PLL_IsReady>:
{
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800712c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800713a:	d101      	bne.n	8007140 <LL_RCC_PLL_IsReady+0x18>
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <LL_RCC_PLL_IsReady+0x1a>
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <LL_RCC_PLL_GetN>:
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	0a1b      	lsrs	r3, r3, #8
 8007158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800715c:	4618      	mov	r0, r3
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <LL_RCC_PLL_GetP>:
{
 8007166:	b480      	push	{r7}
 8007168:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800716a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8007174:	4618      	mov	r0, r3
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <LL_RCC_PLL_GetQ>:
{
 800717e:	b480      	push	{r7}
 8007180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8007182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 800718c:	4618      	mov	r0, r3
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <LL_RCC_PLL_GetDivider>:
{
 8007196:	b480      	push	{r7}
 8007198:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800719a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <LL_RCC_PLLSAI1_Enable>:
{
 80071ae:	b480      	push	{r7}
 80071b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80071b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071c0:	6013      	str	r3, [r2, #0]
}
 80071c2:	bf00      	nop
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <LL_RCC_PLLSAI1_Disable>:
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80071d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071de:	6013      	str	r3, [r2, #0]
}
 80071e0:	bf00      	nop
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <LL_RCC_PLLSAI1_IsReady>:
{
 80071ea:	b480      	push	{r7}
 80071ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80071ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071fc:	d101      	bne.n	8007202 <LL_RCC_PLLSAI1_IsReady+0x18>
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <LL_RCC_PLLSAI1_GetN>:
{
 800720e:	b480      	push	{r7}
 8007210:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8007212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	0a1b      	lsrs	r3, r3, #8
 800721a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800721e:	4618      	mov	r0, r3
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <LL_RCC_PLLSAI1_GetP>:
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 800722c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8007236:	4618      	mov	r0, r3
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <LL_RCC_PLLSAI1_GetQ>:
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8007244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 800724e:	4618      	mov	r0, r3
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <LL_RCC_PLLSAI1_GetR>:
{
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 800725c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007266:	4618      	mov	r0, r3
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <LL_RCC_PLL_GetMainSource>:
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f003 0303 	and.w	r3, r3, #3
}
 800727e:	4618      	mov	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007290:	2300      	movs	r3, #0
 8007292:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007294:	2300      	movs	r3, #0
 8007296:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d034      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072ac:	d021      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80072ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072b2:	d81b      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80072b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072b8:	d01d      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80072ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072be:	d815      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x54>
 80072c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072c8:	d110      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80072ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80072da:	e00d      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3304      	adds	r3, #4
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fd64 	bl	8007dae <RCCEx_PLLSAI1_ConfigNP>
 80072e6:	4603      	mov	r3, r0
 80072e8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80072ea:	e005      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	77fb      	strb	r3, [r7, #31]
        break;
 80072f0:	e002      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80072f2:	bf00      	nop
 80072f4:	e000      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80072f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f8:	7ffb      	ldrb	r3, [r7, #31]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007302:	4618      	mov	r0, r3
 8007304:	f7ff fdd5 	bl	8006eb2 <LL_RCC_SetSAIClockSource>
 8007308:	e001      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730a:	7ffb      	ldrb	r3, [r7, #31]
 800730c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007316:	2b00      	cmp	r3, #0
 8007318:	d046      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800731a:	f7ff fed6 	bl	80070ca <LL_RCC_GetRTCClockSource>
 800731e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	429a      	cmp	r2, r3
 8007328:	d03c      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800732a:	f7fe fa17 	bl	800575c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d105      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff feb0 	bl	800709e <LL_RCC_SetRTCClockSource>
 800733e:	e02e      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007348:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800734a:	f7ff fecb 	bl	80070e4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800734e:	f7ff feda 	bl	8007106 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735c:	4313      	orrs	r3, r2
 800735e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800736a:	f7ff fc3b 	bl	8006be4 <LL_RCC_LSE_IsEnabled>
 800736e:	4603      	mov	r3, r0
 8007370:	2b01      	cmp	r3, #1
 8007372:	d114      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007374:	f7fa fd10 	bl	8001d98 <HAL_GetTick>
 8007378:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800737a:	e00b      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800737c:	f7fa fd0c 	bl	8001d98 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	f241 3288 	movw	r2, #5000	; 0x1388
 800738a:	4293      	cmp	r3, r2
 800738c:	d902      	bls.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	77fb      	strb	r3, [r7, #31]
              break;
 8007392:	e004      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007394:	f7ff fc38 	bl	8006c08 <LL_RCC_LSE_IsReady>
 8007398:	4603      	mov	r3, r0
 800739a:	2b01      	cmp	r3, #1
 800739c:	d1ee      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800739e:	7ffb      	ldrb	r3, [r7, #31]
 80073a0:	77bb      	strb	r3, [r7, #30]
 80073a2:	e001      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a4:	7ffb      	ldrb	r3, [r7, #31]
 80073a6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d004      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff fd17 	bl	8006dec <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d004      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff fd22 	bl	8006e18 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d004      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff fd4a 	bl	8006e7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff fd3f 	bl	8006e7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b00      	cmp	r3, #0
 800740a:	d004      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff fd17 	bl	8006e44 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0308 	and.w	r3, r3, #8
 800741e:	2b00      	cmp	r3, #0
 8007420:	d004      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	4618      	mov	r0, r3
 8007428:	f7ff fd0c 	bl	8006e44 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007434:	2b00      	cmp	r3, #0
 8007436:	d022      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff fd7a 	bl	8006f36 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800744a:	d107      	bne.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800744c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800745a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007464:	d10b      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3304      	adds	r3, #4
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fcfa 	bl	8007e64 <RCCEx_PLLSAI1_ConfigNQ>
 8007470:	4603      	mov	r3, r0
 8007472:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007474:	7ffb      	ldrb	r3, [r7, #31]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800747a:	7ffb      	ldrb	r3, [r7, #31]
 800747c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007486:	2b00      	cmp	r3, #0
 8007488:	d02b      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007492:	d008      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800749c:	d003      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d105      	bne.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff fd17 	bl	8006ede <LL_RCC_SetRNGClockSource>
 80074b0:	e00a      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	2000      	movs	r0, #0
 80074be:	f7ff fd0e 	bl	8006ede <LL_RCC_SetRNGClockSource>
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f7ff fd21 	bl	8006f0a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80074d0:	d107      	bne.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80074d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074e0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d022      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff fd2a 	bl	8006f4c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007500:	d107      	bne.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800750c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007510:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800751a:	d10b      	bne.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3304      	adds	r3, #4
 8007520:	4618      	mov	r0, r3
 8007522:	f000 fcfa 	bl	8007f1a <RCCEx_PLLSAI1_ConfigNR>
 8007526:	4603      	mov	r3, r0
 8007528:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800752a:	7ffb      	ldrb	r3, [r7, #31]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8007530:	7ffb      	ldrb	r3, [r7, #31]
 8007532:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d004      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff fbca 	bl	8006cde <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d009      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fc26 	bl	8006dac <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff fc01 	bl	8006d6c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800756a:	7fbb      	ldrb	r3, [r7, #30]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3720      	adds	r7, #32
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007574:	b590      	push	{r4, r7, lr}
 8007576:	b093      	sub	sp, #76	; 0x4c
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	647b      	str	r3, [r7, #68]	; 0x44
  
#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 8007580:	f7ff fc28 	bl	8006dd4 <LL_RCC_GetSMPSPrescaler>
 8007584:	4603      	mov	r3, r0
 8007586:	091b      	lsrs	r3, r3, #4
 8007588:	643b      	str	r3, [r7, #64]	; 0x40
#endif
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007590:	d12d      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 8007592:	f7ff fd9a 	bl	80070ca <LL_RCC_GetRTCClockSource>
 8007596:	6138      	str	r0, [r7, #16]
    
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800759e:	d109      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80075a0:	f7ff fb32 	bl	8006c08 <LL_RCC_LSE_IsReady>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	f040 83d8 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80075ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075b0:	647b      	str	r3, [r7, #68]	; 0x44
 80075b2:	e3d3      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075ba:	d110      	bne.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80075bc:	f7ff fb36 	bl	8006c2c <LL_RCC_LSI1_IsReady>
 80075c0:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80075c2:	f7ff fb45 	bl	8006c50 <LL_RCC_LSI2_IsReady>
 80075c6:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d003      	beq.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	f040 83c3 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 80075d6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80075da:	647b      	str	r3, [r7, #68]	; 0x44
 80075dc:	e3be      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075e4:	f040 83ba 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 32U;
 80075e8:	4bba      	ldr	r3, [pc, #744]	; (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80075ea:	647b      	str	r3, [r7, #68]	; 0x44
 80075ec:	e3b6      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b40      	cmp	r3, #64	; 0x40
 80075f2:	d130      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 80075f4:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80075f8:	f7ff fd05 	bl	8007006 <LL_RCC_GetSAIClockSource>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007602:	d008      	beq.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8007604:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007608:	d822      	bhi.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00c      	beq.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800760e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007612:	d013      	beq.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007614:	e01c      	b.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
    case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
      if (LL_RCC_HSI_IsReady() == 1U)
 8007616:	f7ff fac1 	bl	8006b9c <LL_RCC_HSI_IsReady>
 800761a:	4603      	mov	r3, r0
 800761c:	2b01      	cmp	r3, #1
 800761e:	f040 837e 	bne.w	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      {
        frequency = HSI_VALUE;
 8007622:	4bad      	ldr	r3, [pc, #692]	; (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8007624:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007626:	e37a      	b.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      
#if defined(SAI1)
    case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8007628:	f7ff fddf 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 800762c:	4603      	mov	r3, r0
 800762e:	2b01      	cmp	r3, #1
 8007630:	f040 8377 	bne.w	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_P();
 8007634:	f000 fdce 	bl	80081d4 <RCC_PLLSAI1_GetFreqDomain_P>
 8007638:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800763a:	e372      	b.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
#endif
      
    case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 800763c:	f7ff fd74 	bl	8007128 <LL_RCC_PLL_IsReady>
 8007640:	4603      	mov	r3, r0
 8007642:	2b01      	cmp	r3, #1
 8007644:	f040 836f 	bne.w	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      {
        frequency = RCC_PLL_GetFreqDomain_P();
 8007648:	f000 fcc2 	bl	8007fd0 <RCC_PLL_GetFreqDomain_P>
 800764c:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800764e:	e36a      	b.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      
    default: /* External input clock used as SAI1 clock source */
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007650:	4ba2      	ldr	r3, [pc, #648]	; (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8007652:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8007654:	e382      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800765c:	d168      	bne.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 800765e:	f000 fb87 	bl	8007d70 <HAL_RCCEx_GetRngCLKSource>
 8007662:	61f8      	str	r0, [r7, #28]
    
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800766a:	d110      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800766c:	f7ff fade 	bl	8006c2c <LL_RCC_LSI1_IsReady>
 8007670:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007672:	f7ff faed 	bl	8006c50 <LL_RCC_LSI2_IsReady>
 8007676:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d003      	beq.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b01      	cmp	r3, #1
 8007682:	f040 836b 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8007686:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800768a:	647b      	str	r3, [r7, #68]	; 0x44
 800768c:	e366      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007694:	d109      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007696:	f7ff fab7 	bl	8006c08 <LL_RCC_LSE_IsReady>
 800769a:	4603      	mov	r3, r0
 800769c:	2b01      	cmp	r3, #1
 800769e:	f040 835d 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80076a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076a6:	647b      	str	r3, [r7, #68]	; 0x44
 80076a8:	e358      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80076b0:	d10e      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 80076b2:	f7ff fd39 	bl	8007128 <LL_RCC_PLL_IsReady>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	f040 834f 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 80076be:	f000 fcdd 	bl	800807c <RCC_PLL_GetFreqDomain_Q>
 80076c2:	4603      	mov	r3, r0
 80076c4:	4a86      	ldr	r2, [pc, #536]	; (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80076c6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ca:	085b      	lsrs	r3, r3, #1
 80076cc:	647b      	str	r3, [r7, #68]	; 0x44
 80076ce:	e345      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 80076d6:	d114      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 80076d8:	f7ff facc 	bl	8006c74 <LL_RCC_MSI_IsReady>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b01      	cmp	r3, #1
 80076e0:	f040 833c 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 80076e4:	f7ff fae6 	bl	8006cb4 <LL_RCC_MSI_GetRange>
 80076e8:	4603      	mov	r3, r0
 80076ea:	091b      	lsrs	r3, r3, #4
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	4a7c      	ldr	r2, [pc, #496]	; (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80076f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076f6:	4a7a      	ldr	r2, [pc, #488]	; (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80076f8:	fba2 2303 	umull	r2, r3, r2, r3
 80076fc:	085b      	lsrs	r3, r3, #1
 80076fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007700:	e32c      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 8007708:	d109      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800770a:	f7ff fd6e 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 800770e:	4603      	mov	r3, r0
 8007710:	2b01      	cmp	r3, #1
 8007712:	f040 8323 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8007716:	f000 fdb3 	bl	8008280 <RCC_PLLSAI1_GetFreqDomain_Q>
 800771a:	6478      	str	r0, [r7, #68]	; 0x44
 800771c:	e31e      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 800771e:	f7ff fa4f 	bl	8006bc0 <LL_RCC_HSI48_IsReady>
 8007722:	4603      	mov	r3, r0
 8007724:	2b01      	cmp	r3, #1
 8007726:	f040 8319 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI48_VALUE / 3U;
 800772a:	4b6b      	ldr	r3, [pc, #428]	; (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800772c:	647b      	str	r3, [r7, #68]	; 0x44
 800772e:	e315      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      /* Nothing to do as frequency already initialized to 0U */
#endif
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007736:	d13f      	bne.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 8007738:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 800773c:	f7ff fc93 	bl	8007066 <LL_RCC_GetUSBClockSource>
 8007740:	4603      	mov	r3, r0
 8007742:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007746:	d01d      	beq.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8007748:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800774c:	d82b      	bhi.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 800774e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007752:	d003      	beq.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8007754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007758:	d00a      	beq.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800775a:	e024      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
    case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800775c:	f7ff fd45 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 8007760:	4603      	mov	r3, r0
 8007762:	2b01      	cmp	r3, #1
 8007764:	f040 82e1 	bne.w	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8007768:	f000 fd8a 	bl	8008280 <RCC_PLLSAI1_GetFreqDomain_Q>
 800776c:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800776e:	e2dc      	b.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
#endif
      
    case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8007770:	f7ff fcda 	bl	8007128 <LL_RCC_PLL_IsReady>
 8007774:	4603      	mov	r3, r0
 8007776:	2b01      	cmp	r3, #1
 8007778:	f040 82d9 	bne.w	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      {
        frequency = RCC_PLL_GetFreqDomain_Q();
 800777c:	f000 fc7e 	bl	800807c <RCC_PLL_GetFreqDomain_Q>
 8007780:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007782:	e2d4      	b.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      
    case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
      if (LL_RCC_MSI_IsReady() == 1U)
 8007784:	f7ff fa76 	bl	8006c74 <LL_RCC_MSI_IsReady>
 8007788:	4603      	mov	r3, r0
 800778a:	2b01      	cmp	r3, #1
 800778c:	f040 82d1 	bne.w	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007790:	f7ff fa90 	bl	8006cb4 <LL_RCC_MSI_GetRange>
 8007794:	4603      	mov	r3, r0
 8007796:	091b      	lsrs	r3, r3, #4
 8007798:	f003 030f 	and.w	r3, r3, #15
 800779c:	4a51      	ldr	r2, [pc, #324]	; (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800779e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077a2:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80077a4:	e2c5      	b.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      
    default: /* HSI48 clock used as USB clock source */
      if (LL_RCC_HSI48_IsReady() == 1U)
 80077a6:	f7ff fa0b 	bl	8006bc0 <LL_RCC_HSI48_IsReady>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	f040 82c2 	bne.w	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
      {
        frequency = HSI48_VALUE;
 80077b2:	4b4d      	ldr	r3, [pc, #308]	; (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 80077b4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80077b6:	e2be      	b.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d140      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 80077be:	2003      	movs	r0, #3
 80077c0:	f7ff fbda 	bl	8006f78 <LL_RCC_GetUSARTClockSource>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d013      	beq.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d81b      	bhi.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d002      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d004      	beq.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80077d6:	e016      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80077d8:	f7ff f83c 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 80077dc:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80077de:	e2bd      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80077e0:	f7ff f9dc 	bl	8006b9c <LL_RCC_HSI_IsReady>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	f040 82a7 	bne.w	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      {
        frequency = HSI_VALUE;
 80077ec:	4b3a      	ldr	r3, [pc, #232]	; (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80077ee:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80077f0:	e2a3      	b.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      
    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 80077f2:	f7ff fa09 	bl	8006c08 <LL_RCC_LSE_IsReady>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	f040 82a0 	bne.w	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      {
        frequency = LSE_VALUE;
 80077fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007802:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007804:	e29b      	b.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      
    default: /* USART1 Clock is PCLK2 */
      frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8007806:	f7ff f825 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 800780a:	4604      	mov	r4, r0
 800780c:	f7ff fa8a 	bl	8006d24 <LL_RCC_GetAHBPrescaler>
 8007810:	4603      	mov	r3, r0
 8007812:	091b      	lsrs	r3, r3, #4
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	4a34      	ldr	r2, [pc, #208]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800781a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800781e:	fbb4 f4f3 	udiv	r4, r4, r3
 8007822:	f7ff fa97 	bl	8006d54 <LL_RCC_GetAPB2Prescaler>
 8007826:	4603      	mov	r3, r0
 8007828:	0adb      	lsrs	r3, r3, #11
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	4a30      	ldr	r2, [pc, #192]	; (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8007830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007834:	f003 031f 	and.w	r3, r3, #31
 8007838:	fa24 f303 	lsr.w	r3, r4, r3
 800783c:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB2Prescaler());
      break;
 800783e:	e28d      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b02      	cmp	r3, #2
 8007844:	d156      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 8007846:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800784a:	f7ff fba5 	bl	8006f98 <LL_RCC_GetLPUARTClockSource>
 800784e:	4603      	mov	r3, r0
 8007850:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007854:	d016      	beq.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8007856:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800785a:	d81d      	bhi.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800785c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007860:	d003      	beq.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8007862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007866:	d004      	beq.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8007868:	e016      	b.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 800786a:	f7fe fff3 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 800786e:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007870:	e274      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8007872:	f7ff f993 	bl	8006b9c <LL_RCC_HSI_IsReady>
 8007876:	4603      	mov	r3, r0
 8007878:	2b01      	cmp	r3, #1
 800787a:	f040 8262 	bne.w	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      {
        frequency = HSI_VALUE;
 800787e:	4b16      	ldr	r3, [pc, #88]	; (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8007880:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007882:	e25e      	b.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      
    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8007884:	f7ff f9c0 	bl	8006c08 <LL_RCC_LSE_IsReady>
 8007888:	4603      	mov	r3, r0
 800788a:	2b01      	cmp	r3, #1
 800788c:	f040 825b 	bne.w	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = LSE_VALUE;
 8007890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007894:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007896:	e256      	b.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      
    default: /* LPUART1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8007898:	f7fe ffdc 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 800789c:	4604      	mov	r4, r0
 800789e:	f7ff fa41 	bl	8006d24 <LL_RCC_GetAHBPrescaler>
 80078a2:	4603      	mov	r3, r0
 80078a4:	091b      	lsrs	r3, r3, #4
 80078a6:	f003 030f 	and.w	r3, r3, #15
 80078aa:	4a10      	ldr	r2, [pc, #64]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80078ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b0:	fbb4 f4f3 	udiv	r4, r4, r3
 80078b4:	f7ff fa42 	bl	8006d3c <LL_RCC_GetAPB1Prescaler>
 80078b8:	4603      	mov	r3, r0
 80078ba:	0a1b      	lsrs	r3, r3, #8
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	4a0b      	ldr	r2, [pc, #44]	; (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 80078c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078c6:	f003 031f 	and.w	r3, r3, #31
 80078ca:	fa24 f303 	lsr.w	r3, r4, r3
 80078ce:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80078d0:	e244      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 80078d2:	bf00      	nop
 80078d4:	000f4240 	.word	0x000f4240
 80078d8:	00f42400 	.word	0x00f42400
 80078dc:	001fff68 	.word	0x001fff68
 80078e0:	aaaaaaab 	.word	0xaaaaaaab
 80078e4:	080132b0 	.word	0x080132b0
 80078e8:	02dc6c00 	.word	0x02dc6c00
 80078ec:	08013250 	.word	0x08013250
 80078f0:	08013290 	.word	0x08013290
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078fa:	d12a      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 80078fc:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8007900:	f7ff fbbd 	bl	800707e <LL_RCC_GetADCClockSource>
 8007904:	4603      	mov	r3, r0
 8007906:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800790a:	d014      	beq.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800790c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007910:	f200 821b 	bhi.w	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 8007914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007918:	d003      	beq.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800791a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791e:	d00e      	beq.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
      
    default: /* No clock used as ADC clock source */
      break;
 8007920:	e213      	b.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8007922:	f7ff fc62 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 8007926:	4603      	mov	r3, r0
 8007928:	2b01      	cmp	r3, #1
 800792a:	f040 8210 	bne.w	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        frequency = RCC_PLLSAI1_GetFreqDomain_R();
 800792e:	f000 fbfb 	bl	8008128 <RCC_PLLSAI1_GetFreqDomain_R>
 8007932:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007934:	e20b      	b.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      frequency = HAL_RCC_GetSysClockFreq();
 8007936:	f7fe ff8d 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 800793a:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800793c:	e20e      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      if (LL_RCC_PLL_IsReady() == 1U)
 800793e:	f7ff fbf3 	bl	8007128 <LL_RCC_PLL_IsReady>
 8007942:	4603      	mov	r3, r0
 8007944:	2b01      	cmp	r3, #1
 8007946:	f040 8204 	bne.w	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
        frequency = RCC_PLL_GetFreqDomain_P();
 800794a:	f000 fb41 	bl	8007fd0 <RCC_PLL_GetFreqDomain_P>
 800794e:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007950:	e1ff      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b04      	cmp	r3, #4
 8007956:	d135      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 8007958:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800795c:	f7ff fb2c 	bl	8006fb8 <LL_RCC_GetI2CClockSource>
 8007960:	4603      	mov	r3, r0
 8007962:	4ab7      	ldr	r2, [pc, #732]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d003      	beq.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8007968:	4ab6      	ldr	r2, [pc, #728]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d004      	beq.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 800796e:	e00c      	b.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
    case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8007970:	f7fe ff70 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 8007974:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007976:	e1f1      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8007978:	f7ff f910 	bl	8006b9c <LL_RCC_HSI_IsReady>
 800797c:	4603      	mov	r3, r0
 800797e:	2b01      	cmp	r3, #1
 8007980:	f040 81e9 	bne.w	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      {
        frequency = HSI_VALUE;
 8007984:	4bb0      	ldr	r3, [pc, #704]	; (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8007986:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007988:	e1e5      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      
    default: /* I2C1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800798a:	f7fe ff63 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 800798e:	4604      	mov	r4, r0
 8007990:	f7ff f9c8 	bl	8006d24 <LL_RCC_GetAHBPrescaler>
 8007994:	4603      	mov	r3, r0
 8007996:	091b      	lsrs	r3, r3, #4
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	4aab      	ldr	r2, [pc, #684]	; (8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800799e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a2:	fbb4 f4f3 	udiv	r4, r4, r3
 80079a6:	f7ff f9c9 	bl	8006d3c <LL_RCC_GetAPB1Prescaler>
 80079aa:	4603      	mov	r3, r0
 80079ac:	0a1b      	lsrs	r3, r3, #8
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	4aa7      	ldr	r2, [pc, #668]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80079b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079b8:	f003 031f 	and.w	r3, r3, #31
 80079bc:	fa24 f303 	lsr.w	r3, r4, r3
 80079c0:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80079c2:	e1cb      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b08      	cmp	r3, #8
 80079c8:	d135      	bne.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 80079ca:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80079ce:	f7ff faf3 	bl	8006fb8 <LL_RCC_GetI2CClockSource>
 80079d2:	4603      	mov	r3, r0
 80079d4:	4a9f      	ldr	r2, [pc, #636]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d003      	beq.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80079da:	4a9f      	ldr	r2, [pc, #636]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d004      	beq.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80079e0:	e00c      	b.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
    {
    case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80079e2:	f7fe ff37 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 80079e6:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80079e8:	e1b8      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80079ea:	f7ff f8d7 	bl	8006b9c <LL_RCC_HSI_IsReady>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	f040 81b2 	bne.w	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      {
        frequency = HSI_VALUE;
 80079f6:	4b94      	ldr	r3, [pc, #592]	; (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80079f8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80079fa:	e1ae      	b.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      
    default: /* I2C3 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80079fc:	f7fe ff2a 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 8007a00:	4604      	mov	r4, r0
 8007a02:	f7ff f98f 	bl	8006d24 <LL_RCC_GetAHBPrescaler>
 8007a06:	4603      	mov	r3, r0
 8007a08:	091b      	lsrs	r3, r3, #4
 8007a0a:	f003 030f 	and.w	r3, r3, #15
 8007a0e:	4a8f      	ldr	r2, [pc, #572]	; (8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8007a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a14:	fbb4 f4f3 	udiv	r4, r4, r3
 8007a18:	f7ff f990 	bl	8006d3c <LL_RCC_GetAPB1Prescaler>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	0a1b      	lsrs	r3, r3, #8
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	4a8a      	ldr	r2, [pc, #552]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8007a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a2a:	f003 031f 	and.w	r3, r3, #31
 8007a2e:	fa24 f303 	lsr.w	r3, r4, r3
 8007a32:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8007a34:	e192      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b10      	cmp	r3, #16
 8007a3a:	d151      	bne.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 8007a3c:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8007a40:	f7ff face 	bl	8006fe0 <LL_RCC_GetLPTIMClockSource>
 8007a44:	62b8      	str	r0, [r7, #40]	; 0x28
    
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 8007a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a48:	4a84      	ldr	r2, [pc, #528]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d110      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8007a4e:	f7ff f8ed 	bl	8006c2c <LL_RCC_LSI1_IsReady>
 8007a52:	6278      	str	r0, [r7, #36]	; 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007a54:	f7ff f8fc 	bl	8006c50 <LL_RCC_LSI2_IsReady>
 8007a58:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d003      	beq.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	f040 817a 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8007a68:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a6e:	e175      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	4a7b      	ldr	r2, [pc, #492]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d108      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8007a78:	f7ff f890 	bl	8006b9c <LL_RCC_HSI_IsReady>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	f040 816c 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 8007a84:	4b70      	ldr	r3, [pc, #448]	; (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8007a86:	647b      	str	r3, [r7, #68]	; 0x44
 8007a88:	e168      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8007a90:	d109      	bne.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x532>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007a92:	f7ff f8b9 	bl	8006c08 <LL_RCC_LSE_IsReady>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	f040 815f 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8007a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8007aa4:	e15a      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 8007aa6:	f7fe fed5 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 8007aaa:	4604      	mov	r4, r0
 8007aac:	f7ff f93a 	bl	8006d24 <LL_RCC_GetAHBPrescaler>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	091b      	lsrs	r3, r3, #4
 8007ab4:	f003 030f 	and.w	r3, r3, #15
 8007ab8:	4a64      	ldr	r2, [pc, #400]	; (8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8007aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007abe:	fbb4 f4f3 	udiv	r4, r4, r3
 8007ac2:	f7ff f93b 	bl	8006d3c <LL_RCC_GetAPB1Prescaler>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	0a1b      	lsrs	r3, r3, #8
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	4a60      	ldr	r2, [pc, #384]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8007ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad4:	f003 031f 	and.w	r3, r3, #31
 8007ad8:	fa24 f303 	lsr.w	r3, r4, r3
 8007adc:	647b      	str	r3, [r7, #68]	; 0x44
 8007ade:	e13d      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b20      	cmp	r3, #32
 8007ae4:	d151      	bne.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 8007ae6:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8007aea:	f7ff fa79 	bl	8006fe0 <LL_RCC_GetLPTIMClockSource>
 8007aee:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 8007af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af2:	4a5c      	ldr	r2, [pc, #368]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d110      	bne.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8007af8:	f7ff f898 	bl	8006c2c <LL_RCC_LSI1_IsReady>
 8007afc:	6338      	str	r0, [r7, #48]	; 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007afe:	f7ff f8a7 	bl	8006c50 <LL_RCC_LSI2_IsReady>
 8007b02:	62f8      	str	r0, [r7, #44]	; 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d003      	beq.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	f040 8125 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8007b12:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007b16:	647b      	str	r3, [r7, #68]	; 0x44
 8007b18:	e120      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 8007b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1c:	4a52      	ldr	r2, [pc, #328]	; (8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d108      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8007b22:	f7ff f83b 	bl	8006b9c <LL_RCC_HSI_IsReady>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	f040 8117 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 8007b2e:	4b46      	ldr	r3, [pc, #280]	; (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8007b30:	647b      	str	r3, [r7, #68]	; 0x44
 8007b32:	e113      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8007b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b36:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8007b3a:	d109      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007b3c:	f7ff f864 	bl	8006c08 <LL_RCC_LSE_IsReady>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	f040 810a 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8007b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b4e:	e105      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 8007b50:	f7fe fe80 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 8007b54:	4604      	mov	r4, r0
 8007b56:	f7ff f8e5 	bl	8006d24 <LL_RCC_GetAHBPrescaler>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	091b      	lsrs	r3, r3, #4
 8007b5e:	f003 030f 	and.w	r3, r3, #15
 8007b62:	4a3a      	ldr	r2, [pc, #232]	; (8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8007b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b68:	fbb4 f4f3 	udiv	r4, r4, r3
 8007b6c:	f7ff f8e6 	bl	8006d3c <LL_RCC_GetAPB1Prescaler>
 8007b70:	4603      	mov	r3, r0
 8007b72:	0a1b      	lsrs	r3, r3, #8
 8007b74:	f003 0307 	and.w	r3, r3, #7
 8007b78:	4a35      	ldr	r2, [pc, #212]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8007b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b7e:	f003 031f 	and.w	r3, r3, #31
 8007b82:	fa24 f303 	lsr.w	r3, r4, r3
 8007b86:	647b      	str	r3, [r7, #68]	; 0x44
 8007b88:	e0e8      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b90:	d119      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 8007b92:	f7ff f8ba 	bl	8006d0a <LL_RCC_GetRFWKPClockSource>
 8007b96:	63b8      	str	r0, [r7, #56]	; 0x38
    
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b9e:	d109      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007ba0:	f7ff f832 	bl	8006c08 <LL_RCC_LSE_IsReady>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	f040 80d8 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8007bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8007bb2:	e0d3      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007bba:	f040 80cf 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 1024U;
 8007bbe:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007bc2:	647b      	str	r3, [r7, #68]	; 0x44
 8007bc4:	e0ca      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bcc:	f040 80c6 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 8007bd0:	f7ff f8e0 	bl	8006d94 <LL_RCC_GetSMPSClockSource>
 8007bd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 8007bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d115      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8007bdc:	f7fe ffde 	bl	8006b9c <LL_RCC_HSI_IsReady>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	f040 80ba 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 8007be8:	4920      	ldr	r1, [pc, #128]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 8007bea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bec:	4613      	mov	r3, r2
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	4413      	add	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	440b      	add	r3, r1
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a13      	ldr	r2, [pc, #76]	; (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8007bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfe:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8007c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c02:	085b      	lsrs	r3, r3, #1
 8007c04:	647b      	str	r3, [r7, #68]	; 0x44
 8007c06:	e0a9      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8007c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c0e:	d131      	bne.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 8007c10:	f7fe ffb2 	bl	8006b78 <LL_RCC_HSE_IsReady>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	f040 80a0 	bne.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 8007c1c:	4913      	ldr	r1, [pc, #76]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 8007c1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c20:	4613      	mov	r3, r2
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	4413      	add	r3, r2
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	440b      	add	r3, r1
 8007c2a:	3314      	adds	r3, #20
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a10      	ldr	r2, [pc, #64]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8007c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c34:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8007c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c38:	085b      	lsrs	r3, r3, #1
 8007c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c3c:	e08e      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8007c3e:	bf00      	nop
 8007c40:	00030100 	.word	0x00030100
 8007c44:	00030200 	.word	0x00030200
 8007c48:	00f42400 	.word	0x00f42400
 8007c4c:	08013250 	.word	0x08013250
 8007c50:	08013290 	.word	0x08013290
 8007c54:	00301000 	.word	0x00301000
 8007c58:	00302000 	.word	0x00302000
 8007c5c:	000c0004 	.word	0x000c0004
 8007c60:	000c0008 	.word	0x000c0008
 8007c64:	00300010 	.word	0x00300010
 8007c68:	00300020 	.word	0x00300020
 8007c6c:	080132f0 	.word	0x080132f0
 8007c70:	01e84800 	.word	0x01e84800
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8007c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c7a:	d16f      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      switch (LL_RCC_MSI_GetRange())
 8007c7c:	f7ff f81a 	bl	8006cb4 <LL_RCC_MSI_GetRange>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2bb0      	cmp	r3, #176	; 0xb0
 8007c84:	d037      	beq.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007c86:	2bb0      	cmp	r3, #176	; 0xb0
 8007c88:	d844      	bhi.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8007c8a:	2ba0      	cmp	r3, #160	; 0xa0
 8007c8c:	d024      	beq.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 8007c8e:	2ba0      	cmp	r3, #160	; 0xa0
 8007c90:	d840      	bhi.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8007c92:	2b80      	cmp	r3, #128	; 0x80
 8007c94:	d002      	beq.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007c96:	2b90      	cmp	r3, #144	; 0x90
 8007c98:	d00f      	beq.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        break;
      case LL_RCC_MSIRANGE_11:
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
        break;
      default:
        break;
 8007c9a:	e03b      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 8007c9c:	4b32      	ldr	r3, [pc, #200]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007c9e:	6a19      	ldr	r1, [r3, #32]
 8007ca0:	4832      	ldr	r0, [pc, #200]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8007ca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	4413      	add	r3, r2
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	4403      	add	r3, r0
 8007cae:	3310      	adds	r3, #16
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cb6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007cb8:	e02d      	b.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 8007cba:	4b2b      	ldr	r3, [pc, #172]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007cbc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007cbe:	482b      	ldr	r0, [pc, #172]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8007cc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	4413      	add	r3, r2
 8007cc8:	00db      	lsls	r3, r3, #3
 8007cca:	4403      	add	r3, r0
 8007ccc:	330c      	adds	r3, #12
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cd4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007cd6:	e01e      	b.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 8007cd8:	4b23      	ldr	r3, [pc, #140]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007cda:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007cdc:	4823      	ldr	r0, [pc, #140]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8007cde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	4413      	add	r3, r2
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	4403      	add	r3, r0
 8007cea:	3308      	adds	r3, #8
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cf2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007cf4:	e00f      	b.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8007cf6:	4b1c      	ldr	r3, [pc, #112]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007cf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007cfa:	481c      	ldr	r0, [pc, #112]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8007cfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cfe:	4613      	mov	r3, r2
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	4413      	add	r3, r2
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	4403      	add	r3, r0
 8007d08:	3304      	adds	r3, #4
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d10:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007d12:	e000      	b.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        break;
 8007d14:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 8007d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d18:	085b      	lsrs	r3, r3, #1
 8007d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d1c:	e01e      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d1e:	bf00      	nop
 8007d20:	e01c      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d22:	bf00      	nop
 8007d24:	e01a      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d26:	bf00      	nop
 8007d28:	e018      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d2a:	bf00      	nop
 8007d2c:	e016      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d2e:	bf00      	nop
 8007d30:	e014      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d32:	bf00      	nop
 8007d34:	e012      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d36:	bf00      	nop
 8007d38:	e010      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d3a:	bf00      	nop
 8007d3c:	e00e      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d3e:	bf00      	nop
 8007d40:	e00c      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d42:	bf00      	nop
 8007d44:	e00a      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d46:	bf00      	nop
 8007d48:	e008      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d4a:	bf00      	nop
 8007d4c:	e006      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d4e:	bf00      	nop
 8007d50:	e004      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d52:	bf00      	nop
 8007d54:	e002      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d56:	bf00      	nop
 8007d58:	e000      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007d5a:	bf00      	nop
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif
  return (frequency);
 8007d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	374c      	adds	r7, #76	; 0x4c
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd90      	pop	{r4, r7, pc}
 8007d66:	bf00      	nop
 8007d68:	080132b0 	.word	0x080132b0
 8007d6c:	080132f0 	.word	0x080132f0

08007d70 <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 8007d76:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8007d7a:	f7ff f954 	bl	8007026 <LL_RCC_GetRNGClockSource>
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d108      	bne.n	8007d98 <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 8007d86:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 8007d8a:	f7ff f95c 	bl	8007046 <LL_RCC_GetCLK48ClockSource>
 8007d8e:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d96:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 8007d98:	687b      	ldr	r3, [r7, #4]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007da6:	f7fe ff76 	bl	8006c96 <LL_RCC_MSI_EnablePLLMode>
}
 8007daa:	bf00      	nop
 8007dac:	bd80      	pop	{r7, pc}

08007dae <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007dba:	f7ff fa07 	bl	80071cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007dbe:	f7f9 ffeb 	bl	8001d98 <HAL_GetTick>
 8007dc2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007dc4:	e009      	b.n	8007dda <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007dc6:	f7f9 ffe7 	bl	8001d98 <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d902      	bls.n	8007dda <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd8:	e004      	b.n	8007de4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007dda:	f7ff fa06 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1f0      	bne.n	8007dc6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d137      	bne.n	8007e5a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	021b      	lsls	r3, r3, #8
 8007dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e14:	4313      	orrs	r3, r2
 8007e16:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007e18:	f7ff f9c9 	bl	80071ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e1c:	f7f9 ffbc 	bl	8001d98 <HAL_GetTick>
 8007e20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007e22:	e009      	b.n	8007e38 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e24:	f7f9 ffb8 	bl	8001d98 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d902      	bls.n	8007e38 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	73fb      	strb	r3, [r7, #15]
        break;
 8007e36:	e004      	b.n	8007e42 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007e38:	f7ff f9d7 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d1f0      	bne.n	8007e24 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d108      	bne.n	8007e5a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e4c:	691a      	ldr	r2, [r3, #16]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e56:	4313      	orrs	r3, r2
 8007e58:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007e70:	f7ff f9ac 	bl	80071cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e74:	f7f9 ff90 	bl	8001d98 <HAL_GetTick>
 8007e78:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e7a:	e009      	b.n	8007e90 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e7c:	f7f9 ff8c 	bl	8001d98 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d902      	bls.n	8007e90 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8e:	e004      	b.n	8007e9a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e90:	f7ff f9ab 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1f0      	bne.n	8007e7c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d137      	bne.n	8007f10 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007ece:	f7ff f96e 	bl	80071ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ed2:	f7f9 ff61 	bl	8001d98 <HAL_GetTick>
 8007ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ed8:	e009      	b.n	8007eee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007eda:	f7f9 ff5d 	bl	8001d98 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d902      	bls.n	8007eee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	73fb      	strb	r3, [r7, #15]
        break;
 8007eec:	e004      	b.n	8007ef8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007eee:	f7ff f97c 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d1f0      	bne.n	8007eda <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d108      	bne.n	8007f10 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007f26:	f7ff f951 	bl	80071cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f2a:	f7f9 ff35 	bl	8001d98 <HAL_GetTick>
 8007f2e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007f30:	e009      	b.n	8007f46 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f32:	f7f9 ff31 	bl	8001d98 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d902      	bls.n	8007f46 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	73fb      	strb	r3, [r7, #15]
      break;
 8007f44:	e004      	b.n	8007f50 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007f46:	f7ff f950 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1f0      	bne.n	8007f32 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d137      	bne.n	8007fc6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f80:	4313      	orrs	r3, r2
 8007f82:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007f84:	f7ff f913 	bl	80071ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f88:	f7f9 ff06 	bl	8001d98 <HAL_GetTick>
 8007f8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007f8e:	e009      	b.n	8007fa4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f90:	f7f9 ff02 	bl	8001d98 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d902      	bls.n	8007fa4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	73fb      	strb	r3, [r7, #15]
        break;
 8007fa2:	e004      	b.n	8007fae <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007fa4:	f7ff f921 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d1f0      	bne.n	8007f90 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d108      	bne.n	8007fc6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fb8:	691a      	ldr	r2, [r3, #16]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 8007fd0:	b590      	push	{r4, r7, lr}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007fd6:	f7ff f94b 	bl	8007270 <LL_RCC_PLL_GetMainSource>
 8007fda:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d017      	beq.n	8008012 <RCC_PLL_GetFreqDomain_P+0x42>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d81f      	bhi.n	8008028 <RCC_PLL_GetFreqDomain_P+0x58>
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d003      	beq.n	8007ff6 <RCC_PLL_GetFreqDomain_P+0x26>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d00b      	beq.n	800800c <RCC_PLL_GetFreqDomain_P+0x3c>
 8007ff4:	e018      	b.n	8008028 <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007ff6:	f7fe fe5d 	bl	8006cb4 <LL_RCC_MSI_GetRange>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	091b      	lsrs	r3, r3, #4
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	4a1b      	ldr	r2, [pc, #108]	; (8008070 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8008004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008008:	607b      	str	r3, [r7, #4]
      break;
 800800a:	e018      	b.n	800803e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800800c:	4b19      	ldr	r3, [pc, #100]	; (8008074 <RCC_PLL_GetFreqDomain_P+0xa4>)
 800800e:	607b      	str	r3, [r7, #4]
      break;
 8008010:	e015      	b.n	800803e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008012:	f7fe fd9f 	bl	8006b54 <LL_RCC_HSE_IsEnabledDiv2>
 8008016:	4603      	mov	r3, r0
 8008018:	2b01      	cmp	r3, #1
 800801a:	d102      	bne.n	8008022 <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800801c:	4b15      	ldr	r3, [pc, #84]	; (8008074 <RCC_PLL_GetFreqDomain_P+0xa4>)
 800801e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8008020:	e00d      	b.n	800803e <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8008022:	4b15      	ldr	r3, [pc, #84]	; (8008078 <RCC_PLL_GetFreqDomain_P+0xa8>)
 8008024:	607b      	str	r3, [r7, #4]
      break;
 8008026:	e00a      	b.n	800803e <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008028:	f7fe fe44 	bl	8006cb4 <LL_RCC_MSI_GetRange>
 800802c:	4603      	mov	r3, r0
 800802e:	091b      	lsrs	r3, r3, #4
 8008030:	f003 030f 	and.w	r3, r3, #15
 8008034:	4a0e      	ldr	r2, [pc, #56]	; (8008070 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8008036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800803a:	607b      	str	r3, [r7, #4]
      break;
 800803c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800803e:	f7ff f885 	bl	800714c <LL_RCC_PLL_GetN>
 8008042:	4602      	mov	r2, r0
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	fb03 f402 	mul.w	r4, r3, r2
 800804a:	f7ff f8a4 	bl	8007196 <LL_RCC_PLL_GetDivider>
 800804e:	4603      	mov	r3, r0
 8008050:	091b      	lsrs	r3, r3, #4
 8008052:	3301      	adds	r3, #1
 8008054:	fbb4 f4f3 	udiv	r4, r4, r3
 8008058:	f7ff f885 	bl	8007166 <LL_RCC_PLL_GetP>
 800805c:	4603      	mov	r3, r0
 800805e:	0c5b      	lsrs	r3, r3, #17
 8008060:	3301      	adds	r3, #1
 8008062:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8008066:	4618      	mov	r0, r3
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	bd90      	pop	{r4, r7, pc}
 800806e:	bf00      	nop
 8008070:	080132b0 	.word	0x080132b0
 8008074:	00f42400 	.word	0x00f42400
 8008078:	01e84800 	.word	0x01e84800

0800807c <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 800807c:	b590      	push	{r4, r7, lr}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8008082:	f7ff f8f5 	bl	8007270 <LL_RCC_PLL_GetMainSource>
 8008086:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	2b03      	cmp	r3, #3
 800808c:	d017      	beq.n	80080be <RCC_PLL_GetFreqDomain_Q+0x42>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2b03      	cmp	r3, #3
 8008092:	d81f      	bhi.n	80080d4 <RCC_PLL_GetFreqDomain_Q+0x58>
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d003      	beq.n	80080a2 <RCC_PLL_GetFreqDomain_Q+0x26>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b02      	cmp	r3, #2
 800809e:	d00b      	beq.n	80080b8 <RCC_PLL_GetFreqDomain_Q+0x3c>
 80080a0:	e018      	b.n	80080d4 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80080a2:	f7fe fe07 	bl	8006cb4 <LL_RCC_MSI_GetRange>
 80080a6:	4603      	mov	r3, r0
 80080a8:	091b      	lsrs	r3, r3, #4
 80080aa:	f003 030f 	and.w	r3, r3, #15
 80080ae:	4a1b      	ldr	r2, [pc, #108]	; (800811c <RCC_PLL_GetFreqDomain_Q+0xa0>)
 80080b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080b4:	607b      	str	r3, [r7, #4]
      break;
 80080b6:	e018      	b.n	80080ea <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80080b8:	4b19      	ldr	r3, [pc, #100]	; (8008120 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 80080ba:	607b      	str	r3, [r7, #4]
      break;
 80080bc:	e015      	b.n	80080ea <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80080be:	f7fe fd49 	bl	8006b54 <LL_RCC_HSE_IsEnabledDiv2>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d102      	bne.n	80080ce <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 80080c8:	4b15      	ldr	r3, [pc, #84]	; (8008120 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 80080ca:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 80080cc:	e00d      	b.n	80080ea <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 80080ce:	4b15      	ldr	r3, [pc, #84]	; (8008124 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 80080d0:	607b      	str	r3, [r7, #4]
      break;
 80080d2:	e00a      	b.n	80080ea <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80080d4:	f7fe fdee 	bl	8006cb4 <LL_RCC_MSI_GetRange>
 80080d8:	4603      	mov	r3, r0
 80080da:	091b      	lsrs	r3, r3, #4
 80080dc:	f003 030f 	and.w	r3, r3, #15
 80080e0:	4a0e      	ldr	r2, [pc, #56]	; (800811c <RCC_PLL_GetFreqDomain_Q+0xa0>)
 80080e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080e6:	607b      	str	r3, [r7, #4]
      break;
 80080e8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80080ea:	f7ff f82f 	bl	800714c <LL_RCC_PLL_GetN>
 80080ee:	4602      	mov	r2, r0
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	fb03 f402 	mul.w	r4, r3, r2
 80080f6:	f7ff f84e 	bl	8007196 <LL_RCC_PLL_GetDivider>
 80080fa:	4603      	mov	r3, r0
 80080fc:	091b      	lsrs	r3, r3, #4
 80080fe:	3301      	adds	r3, #1
 8008100:	fbb4 f4f3 	udiv	r4, r4, r3
 8008104:	f7ff f83b 	bl	800717e <LL_RCC_PLL_GetQ>
 8008108:	4603      	mov	r3, r0
 800810a:	0e5b      	lsrs	r3, r3, #25
 800810c:	3301      	adds	r3, #1
 800810e:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8008112:	4618      	mov	r0, r3
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	bd90      	pop	{r4, r7, pc}
 800811a:	bf00      	nop
 800811c:	080132b0 	.word	0x080132b0
 8008120:	00f42400 	.word	0x00f42400
 8008124:	01e84800 	.word	0x01e84800

08008128 <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 8008128:	b590      	push	{r4, r7, lr}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 800812e:	f7ff f89f 	bl	8007270 <LL_RCC_PLL_GetMainSource>
 8008132:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b03      	cmp	r3, #3
 8008138:	d017      	beq.n	800816a <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b03      	cmp	r3, #3
 800813e:	d81f      	bhi.n	8008180 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d003      	beq.n	800814e <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b02      	cmp	r3, #2
 800814a:	d00b      	beq.n	8008164 <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 800814c:	e018      	b.n	8008180 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800814e:	f7fe fdb1 	bl	8006cb4 <LL_RCC_MSI_GetRange>
 8008152:	4603      	mov	r3, r0
 8008154:	091b      	lsrs	r3, r3, #4
 8008156:	f003 030f 	and.w	r3, r3, #15
 800815a:	4a1b      	ldr	r2, [pc, #108]	; (80081c8 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 800815c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008160:	607b      	str	r3, [r7, #4]
      break;
 8008162:	e018      	b.n	8008196 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8008164:	4b19      	ldr	r3, [pc, #100]	; (80081cc <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8008166:	607b      	str	r3, [r7, #4]
      break;
 8008168:	e015      	b.n	8008196 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800816a:	f7fe fcf3 	bl	8006b54 <LL_RCC_HSE_IsEnabledDiv2>
 800816e:	4603      	mov	r3, r0
 8008170:	2b01      	cmp	r3, #1
 8008172:	d102      	bne.n	800817a <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8008174:	4b15      	ldr	r3, [pc, #84]	; (80081cc <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8008176:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8008178:	e00d      	b.n	8008196 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 800817a:	4b15      	ldr	r3, [pc, #84]	; (80081d0 <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 800817c:	607b      	str	r3, [r7, #4]
      break;
 800817e:	e00a      	b.n	8008196 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008180:	f7fe fd98 	bl	8006cb4 <LL_RCC_MSI_GetRange>
 8008184:	4603      	mov	r3, r0
 8008186:	091b      	lsrs	r3, r3, #4
 8008188:	f003 030f 	and.w	r3, r3, #15
 800818c:	4a0e      	ldr	r2, [pc, #56]	; (80081c8 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 800818e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008192:	607b      	str	r3, [r7, #4]
      break;
 8008194:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008196:	f7ff f83a 	bl	800720e <LL_RCC_PLLSAI1_GetN>
 800819a:	4602      	mov	r2, r0
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	fb03 f402 	mul.w	r4, r3, r2
 80081a2:	f7fe fff8 	bl	8007196 <LL_RCC_PLL_GetDivider>
 80081a6:	4603      	mov	r3, r0
 80081a8:	091b      	lsrs	r3, r3, #4
 80081aa:	3301      	adds	r3, #1
 80081ac:	fbb4 f4f3 	udiv	r4, r4, r3
 80081b0:	f7ff f852 	bl	8007258 <LL_RCC_PLLSAI1_GetR>
 80081b4:	4603      	mov	r3, r0
 80081b6:	0f5b      	lsrs	r3, r3, #29
 80081b8:	3301      	adds	r3, #1
 80081ba:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 80081be:	4618      	mov	r0, r3
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd90      	pop	{r4, r7, pc}
 80081c6:	bf00      	nop
 80081c8:	080132b0 	.word	0x080132b0
 80081cc:	00f42400 	.word	0x00f42400
 80081d0:	01e84800 	.word	0x01e84800

080081d4 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 80081d4:	b590      	push	{r4, r7, lr}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 80081da:	f7ff f849 	bl	8007270 <LL_RCC_PLL_GetMainSource>
 80081de:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d017      	beq.n	8008216 <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d81f      	bhi.n	800822c <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d003      	beq.n	80081fa <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d00b      	beq.n	8008210 <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 80081f8:	e018      	b.n	800822c <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80081fa:	f7fe fd5b 	bl	8006cb4 <LL_RCC_MSI_GetRange>
 80081fe:	4603      	mov	r3, r0
 8008200:	091b      	lsrs	r3, r3, #4
 8008202:	f003 030f 	and.w	r3, r3, #15
 8008206:	4a1b      	ldr	r2, [pc, #108]	; (8008274 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8008208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800820c:	607b      	str	r3, [r7, #4]
      break;
 800820e:	e018      	b.n	8008242 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8008210:	4b19      	ldr	r3, [pc, #100]	; (8008278 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8008212:	607b      	str	r3, [r7, #4]
      break;
 8008214:	e015      	b.n	8008242 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008216:	f7fe fc9d 	bl	8006b54 <LL_RCC_HSE_IsEnabledDiv2>
 800821a:	4603      	mov	r3, r0
 800821c:	2b01      	cmp	r3, #1
 800821e:	d102      	bne.n	8008226 <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8008220:	4b15      	ldr	r3, [pc, #84]	; (8008278 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8008222:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8008224:	e00d      	b.n	8008242 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8008226:	4b15      	ldr	r3, [pc, #84]	; (800827c <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 8008228:	607b      	str	r3, [r7, #4]
      break;
 800822a:	e00a      	b.n	8008242 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800822c:	f7fe fd42 	bl	8006cb4 <LL_RCC_MSI_GetRange>
 8008230:	4603      	mov	r3, r0
 8008232:	091b      	lsrs	r3, r3, #4
 8008234:	f003 030f 	and.w	r3, r3, #15
 8008238:	4a0e      	ldr	r2, [pc, #56]	; (8008274 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 800823a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800823e:	607b      	str	r3, [r7, #4]
      break;
 8008240:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008242:	f7fe ffe4 	bl	800720e <LL_RCC_PLLSAI1_GetN>
 8008246:	4602      	mov	r2, r0
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	fb03 f402 	mul.w	r4, r3, r2
 800824e:	f7fe ffa2 	bl	8007196 <LL_RCC_PLL_GetDivider>
 8008252:	4603      	mov	r3, r0
 8008254:	091b      	lsrs	r3, r3, #4
 8008256:	3301      	adds	r3, #1
 8008258:	fbb4 f4f3 	udiv	r4, r4, r3
 800825c:	f7fe ffe4 	bl	8007228 <LL_RCC_PLLSAI1_GetP>
 8008260:	4603      	mov	r3, r0
 8008262:	0c5b      	lsrs	r3, r3, #17
 8008264:	3301      	adds	r3, #1
 8008266:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	bd90      	pop	{r4, r7, pc}
 8008272:	bf00      	nop
 8008274:	080132b0 	.word	0x080132b0
 8008278:	00f42400 	.word	0x00f42400
 800827c:	01e84800 	.word	0x01e84800

08008280 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8008280:	b590      	push	{r4, r7, lr}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 8008286:	f7fe fff3 	bl	8007270 <LL_RCC_PLL_GetMainSource>
 800828a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2b03      	cmp	r3, #3
 8008290:	d017      	beq.n	80082c2 <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b03      	cmp	r3, #3
 8008296:	d81f      	bhi.n	80082d8 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d003      	beq.n	80082a6 <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d00b      	beq.n	80082bc <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 80082a4:	e018      	b.n	80082d8 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80082a6:	f7fe fd05 	bl	8006cb4 <LL_RCC_MSI_GetRange>
 80082aa:	4603      	mov	r3, r0
 80082ac:	091b      	lsrs	r3, r3, #4
 80082ae:	f003 030f 	and.w	r3, r3, #15
 80082b2:	4a1b      	ldr	r2, [pc, #108]	; (8008320 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 80082b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082b8:	607b      	str	r3, [r7, #4]
      break;
 80082ba:	e018      	b.n	80082ee <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 80082bc:	4b19      	ldr	r3, [pc, #100]	; (8008324 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 80082be:	607b      	str	r3, [r7, #4]
      break;
 80082c0:	e015      	b.n	80082ee <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80082c2:	f7fe fc47 	bl	8006b54 <LL_RCC_HSE_IsEnabledDiv2>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d102      	bne.n	80082d2 <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 80082cc:	4b15      	ldr	r3, [pc, #84]	; (8008324 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 80082ce:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 80082d0:	e00d      	b.n	80082ee <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 80082d2:	4b15      	ldr	r3, [pc, #84]	; (8008328 <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 80082d4:	607b      	str	r3, [r7, #4]
      break;
 80082d6:	e00a      	b.n	80082ee <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80082d8:	f7fe fcec 	bl	8006cb4 <LL_RCC_MSI_GetRange>
 80082dc:	4603      	mov	r3, r0
 80082de:	091b      	lsrs	r3, r3, #4
 80082e0:	f003 030f 	and.w	r3, r3, #15
 80082e4:	4a0e      	ldr	r2, [pc, #56]	; (8008320 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 80082e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ea:	607b      	str	r3, [r7, #4]
      break;
 80082ec:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80082ee:	f7fe ff8e 	bl	800720e <LL_RCC_PLLSAI1_GetN>
 80082f2:	4602      	mov	r2, r0
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	fb03 f402 	mul.w	r4, r3, r2
 80082fa:	f7fe ff4c 	bl	8007196 <LL_RCC_PLL_GetDivider>
 80082fe:	4603      	mov	r3, r0
 8008300:	091b      	lsrs	r3, r3, #4
 8008302:	3301      	adds	r3, #1
 8008304:	fbb4 f4f3 	udiv	r4, r4, r3
 8008308:	f7fe ff9a 	bl	8007240 <LL_RCC_PLLSAI1_GetQ>
 800830c:	4603      	mov	r3, r0
 800830e:	0e5b      	lsrs	r3, r3, #25
 8008310:	3301      	adds	r3, #1
 8008312:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8008316:	4618      	mov	r0, r3
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	bd90      	pop	{r4, r7, pc}
 800831e:	bf00      	nop
 8008320:	080132b0 	.word	0x080132b0
 8008324:	00f42400 	.word	0x00f42400
 8008328:	01e84800 	.word	0x01e84800

0800832c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e090      	b.n	8008460 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	d106      	bne.n	8008358 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7f8 fece 	bl	80010f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2202      	movs	r2, #2
 800835c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	22ca      	movs	r2, #202	; 0xca
 8008366:	625a      	str	r2, [r3, #36]	; 0x24
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2253      	movs	r2, #83	; 0x53
 800836e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f89f 	bl	80084b4 <RTC_EnterInitMode>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d009      	beq.n	8008390 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	22ff      	movs	r2, #255	; 0xff
 8008382:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2204      	movs	r2, #4
 8008388:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e067      	b.n	8008460 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	6812      	ldr	r2, [r2, #0]
 800839a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800839e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083a2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6899      	ldr	r1, [r3, #8]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	431a      	orrs	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	431a      	orrs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	68d2      	ldr	r2, [r2, #12]
 80083ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6919      	ldr	r1, [r3, #16]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	041a      	lsls	r2, r3, #16
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083ee:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0203 	bic.w	r2, r2, #3
 80083fe:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	69da      	ldr	r2, [r3, #28]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	431a      	orrs	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f003 0320 	and.w	r3, r3, #32
 8008422:	2b00      	cmp	r3, #0
 8008424:	d113      	bne.n	800844e <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f81e 	bl	8008468 <HAL_RTC_WaitForSynchro>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00d      	beq.n	800844e <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	22ff      	movs	r2, #255	; 0xff
 8008438:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2204      	movs	r2, #4
 800843e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e008      	b.n	8008460 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	22ff      	movs	r2, #255	; 0xff
 8008454:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800845e:	2300      	movs	r3, #0
  }
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800847e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008480:	f7f9 fc8a 	bl	8001d98 <HAL_GetTick>
 8008484:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008486:	e009      	b.n	800849c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008488:	f7f9 fc86 	bl	8001d98 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008496:	d901      	bls.n	800849c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e007      	b.n	80084ac <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f003 0320 	and.w	r3, r3, #32
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0ee      	beq.n	8008488 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d119      	bne.n	80084fe <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084d2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80084d4:	f7f9 fc60 	bl	8001d98 <HAL_GetTick>
 80084d8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80084da:	e009      	b.n	80084f0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80084dc:	f7f9 fc5c 	bl	8001d98 <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084ea:	d901      	bls.n	80084f0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e007      	b.n	8008500 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0ee      	beq.n	80084dc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d904      	bls.n	8008526 <HAL_SAI_InitProtocol+0x1e>
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	3b03      	subs	r3, #3
 8008520:	2b01      	cmp	r3, #1
 8008522:	d812      	bhi.n	800854a <HAL_SAI_InitProtocol+0x42>
 8008524:	e008      	b.n	8008538 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	68b9      	ldr	r1, [r7, #8]
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 f9af 	bl	8008890 <SAI_InitI2S>
 8008532:	4603      	mov	r3, r0
 8008534:	75fb      	strb	r3, [r7, #23]
      break;
 8008536:	e00b      	b.n	8008550 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	68b9      	ldr	r1, [r7, #8]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 fa58 	bl	80089f4 <SAI_InitPCM>
 8008544:	4603      	mov	r3, r0
 8008546:	75fb      	strb	r3, [r7, #23]
      break;
 8008548:	e002      	b.n	8008550 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	75fb      	strb	r3, [r7, #23]
      break;
 800854e:	bf00      	nop
  }

  if (status == HAL_OK)
 8008550:	7dfb      	ldrb	r3, [r7, #23]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d104      	bne.n	8008560 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 f808 	bl	800856c <HAL_SAI_Init>
 800855c:	4603      	mov	r3, r0
 800855e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008560:	7dfb      	ldrb	r3, [r7, #23]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e17c      	b.n	8008878 <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008584:	2b01      	cmp	r3, #1
 8008586:	d10e      	bne.n	80085a6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a5c      	ldr	r2, [pc, #368]	; (8008700 <HAL_SAI_Init+0x194>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d107      	bne.n	80085a2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8008596:	2b01      	cmp	r3, #1
 8008598:	d103      	bne.n	80085a2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e168      	b.n	8008878 <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7f8 fe1a 	bl	80011f4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fa99 	bl	8008af8 <SAI_Disable>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e153      	b.n	8008878 <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <HAL_SAI_Init+0x7a>
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d003      	beq.n	80085ec <HAL_SAI_Init+0x80>
 80085e4:	e006      	b.n	80085f4 <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	61bb      	str	r3, [r7, #24]
      break;
 80085ea:	e006      	b.n	80085fa <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80085ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085f0:	61bb      	str	r3, [r7, #24]
      break;
 80085f2:	e002      	b.n	80085fa <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	61bb      	str	r3, [r7, #24]
      break;
 80085f8:	bf00      	nop
  }

  SAI1->GCR = 0;
 80085fa:	4b42      	ldr	r3, [pc, #264]	; (8008704 <HAL_SAI_Init+0x198>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a1b      	ldr	r3, [r3, #32]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d062      	beq.n	80086ce <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008608:	2040      	movs	r0, #64	; 0x40
 800860a:	f7fe ffb3 	bl	8007574 <HAL_RCCEx_GetPeriphCLKFreq>
 800860e:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008618:	d120      	bne.n	800865c <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861e:	2b04      	cmp	r3, #4
 8008620:	d102      	bne.n	8008628 <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8008622:	2340      	movs	r3, #64	; 0x40
 8008624:	613b      	str	r3, [r7, #16]
 8008626:	e00a      	b.n	800863e <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862c:	2b08      	cmp	r3, #8
 800862e:	d103      	bne.n	8008638 <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8008630:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008634:	613b      	str	r3, [r7, #16]
 8008636:	e002      	b.n	800863e <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	4613      	mov	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	4619      	mov	r1, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	fb02 f303 	mul.w	r3, r2, r3
 8008654:	fbb1 f3f3 	udiv	r3, r1, r3
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	e017      	b.n	800868c <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008664:	d101      	bne.n	800866a <HAL_SAI_Init+0xfe>
 8008666:	2302      	movs	r3, #2
 8008668:	e000      	b.n	800866c <HAL_SAI_Init+0x100>
 800866a:	2301      	movs	r3, #1
 800866c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	4613      	mov	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	4619      	mov	r1, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	fb02 f303 	mul.w	r3, r2, r3
 8008684:	021b      	lsls	r3, r3, #8
 8008686:	fbb1 f3f3 	udiv	r3, r1, r3
 800868a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	4a1e      	ldr	r2, [pc, #120]	; (8008708 <HAL_SAI_Init+0x19c>)
 8008690:	fba2 2303 	umull	r2, r3, r2, r3
 8008694:	08da      	lsrs	r2, r3, #3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800869a:	6979      	ldr	r1, [r7, #20]
 800869c:	4b1a      	ldr	r3, [pc, #104]	; (8008708 <HAL_SAI_Init+0x19c>)
 800869e:	fba3 2301 	umull	r2, r3, r3, r1
 80086a2:	08da      	lsrs	r2, r3, #3
 80086a4:	4613      	mov	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	1aca      	subs	r2, r1, r3
 80086ae:	2a08      	cmp	r2, #8
 80086b0:	d904      	bls.n	80086bc <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d104      	bne.n	80086ce <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c8:	085a      	lsrs	r2, r3, #1
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_SAI_Init+0x172>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d109      	bne.n	80086f2 <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d101      	bne.n	80086ea <HAL_SAI_Init+0x17e>
 80086e6:	2300      	movs	r3, #0
 80086e8:	e001      	b.n	80086ee <HAL_SAI_Init+0x182>
 80086ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086ee:	61fb      	str	r3, [r7, #28]
 80086f0:	e00e      	b.n	8008710 <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d108      	bne.n	800870c <HAL_SAI_Init+0x1a0>
 80086fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086fe:	e006      	b.n	800870e <HAL_SAI_Init+0x1a2>
 8008700:	40015404 	.word	0x40015404
 8008704:	40015400 	.word	0x40015400
 8008708:	cccccccd 	.word	0xcccccccd
 800870c:	2300      	movs	r3, #0
 800870e:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6819      	ldr	r1, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	4b59      	ldr	r3, [pc, #356]	; (8008880 <HAL_SAI_Init+0x314>)
 800871c:	400b      	ands	r3, r1
 800871e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6819      	ldr	r1, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800872e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008734:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800873a:	431a      	orrs	r2, r3
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8008748:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008754:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875a:	051b      	lsls	r3, r3, #20
 800875c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008762:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	430a      	orrs	r2, r1
 8008770:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6812      	ldr	r2, [r2, #0]
 800877c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008780:	f023 030f 	bic.w	r3, r3, #15
 8008784:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6859      	ldr	r1, [r3, #4]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	69da      	ldr	r2, [r3, #28]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008794:	431a      	orrs	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	430a      	orrs	r2, r1
 80087a2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6899      	ldr	r1, [r3, #8]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	4b35      	ldr	r3, [pc, #212]	; (8008884 <HAL_SAI_Init+0x318>)
 80087b0:	400b      	ands	r3, r1
 80087b2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6899      	ldr	r1, [r3, #8]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087be:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80087c4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80087ca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80087d0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d6:	3b01      	subs	r3, #1
 80087d8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80087da:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68d9      	ldr	r1, [r3, #12]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	f24f 0320 	movw	r3, #61472	; 0xf020
 80087f2:	400b      	ands	r3, r1
 80087f4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68d9      	ldr	r1, [r3, #12]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008804:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800880a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800880c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008812:	3b01      	subs	r3, #1
 8008814:	021b      	lsls	r3, r3, #8
 8008816:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a18      	ldr	r2, [pc, #96]	; (8008888 <HAL_SAI_Init+0x31c>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d119      	bne.n	800885e <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800882a:	4b18      	ldr	r3, [pc, #96]	; (800888c <HAL_SAI_Init+0x320>)
 800882c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882e:	4a17      	ldr	r2, [pc, #92]	; (800888c <HAL_SAI_Init+0x320>)
 8008830:	f023 0301 	bic.w	r3, r3, #1
 8008834:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800883c:	2b01      	cmp	r3, #1
 800883e:	d10e      	bne.n	800885e <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008848:	3b01      	subs	r3, #1
 800884a:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800884c:	490f      	ldr	r1, [pc, #60]	; (800888c <HAL_SAI_Init+0x320>)
 800884e:	4313      	orrs	r3, r2
 8008850:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8008852:	4b0e      	ldr	r3, [pc, #56]	; (800888c <HAL_SAI_Init+0x320>)
 8008854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008856:	4a0d      	ldr	r2, [pc, #52]	; (800888c <HAL_SAI_Init+0x320>)
 8008858:	f043 0301 	orr.w	r3, r3, #1
 800885c:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3720      	adds	r7, #32
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	f005c010 	.word	0xf005c010
 8008884:	fff88000 	.word	0xfff88000
 8008888:	40015404 	.word	0x40015404
 800888c:	40015400 	.word	0x40015400

08008890 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
 800889c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <SAI_InitI2S+0x2e>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d103      	bne.n	80088c6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	651a      	str	r2, [r3, #80]	; 0x50
 80088c4:	e002      	b.n	80088cc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2201      	movs	r2, #1
 80088ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80088d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088da:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e077      	b.n	80089e6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d107      	bne.n	800890c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008908:	665a      	str	r2, [r3, #100]	; 0x64
 800890a:	e006      	b.n	800891a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008912:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	665a      	str	r2, [r3, #100]	; 0x64
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b03      	cmp	r3, #3
 800891e:	d84f      	bhi.n	80089c0 <SAI_InitI2S+0x130>
 8008920:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <SAI_InitI2S+0x98>)
 8008922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008926:	bf00      	nop
 8008928:	08008939 	.word	0x08008939
 800892c:	0800895b 	.word	0x0800895b
 8008930:	0800897d 	.word	0x0800897d
 8008934:	0800899f 	.word	0x0800899f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2280      	movs	r2, #128	; 0x80
 800893c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	085b      	lsrs	r3, r3, #1
 800894c:	011a      	lsls	r2, r3, #4
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2240      	movs	r2, #64	; 0x40
 8008956:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008958:	e035      	b.n	80089c6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2280      	movs	r2, #128	; 0x80
 800895e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	085b      	lsrs	r3, r3, #1
 8008964:	019a      	lsls	r2, r3, #6
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	085b      	lsrs	r3, r3, #1
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2280      	movs	r2, #128	; 0x80
 8008978:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800897a:	e024      	b.n	80089c6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	22c0      	movs	r2, #192	; 0xc0
 8008980:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	085b      	lsrs	r3, r3, #1
 8008986:	019a      	lsls	r2, r3, #6
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	085b      	lsrs	r3, r3, #1
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2280      	movs	r2, #128	; 0x80
 800899a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800899c:	e013      	b.n	80089c6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	22e0      	movs	r2, #224	; 0xe0
 80089a2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	085b      	lsrs	r3, r3, #1
 80089a8:	019a      	lsls	r2, r3, #6
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	085b      	lsrs	r3, r3, #1
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2280      	movs	r2, #128	; 0x80
 80089bc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80089be:	e002      	b.n	80089c6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	75fb      	strb	r3, [r7, #23]
      break;
 80089c4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d10b      	bne.n	80089e4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d102      	bne.n	80089d8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2210      	movs	r2, #16
 80089d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d102      	bne.n	80089e4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2208      	movs	r2, #8
 80089e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop

080089f4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <SAI_InitPCM+0x2e>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d103      	bne.n	8008a2a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2201      	movs	r2, #1
 8008a26:	651a      	str	r2, [r3, #80]	; 0x50
 8008a28:	e002      	b.n	8008a30 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008a3c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008a44:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a58:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d103      	bne.n	8008a68 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2201      	movs	r2, #1
 8008a64:	659a      	str	r2, [r3, #88]	; 0x58
 8008a66:	e002      	b.n	8008a6e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	220d      	movs	r2, #13
 8008a6c:	659a      	str	r2, [r3, #88]	; 0x58
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d837      	bhi.n	8008ae4 <SAI_InitPCM+0xf0>
 8008a74:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <SAI_InitPCM+0x88>)
 8008a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7a:	bf00      	nop
 8008a7c:	08008a8d 	.word	0x08008a8d
 8008a80:	08008aa3 	.word	0x08008aa3
 8008a84:	08008ab9 	.word	0x08008ab9
 8008a88:	08008acf 	.word	0x08008acf
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2280      	movs	r2, #128	; 0x80
 8008a90:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	011a      	lsls	r2, r3, #4
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2240      	movs	r2, #64	; 0x40
 8008a9e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008aa0:	e023      	b.n	8008aea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2280      	movs	r2, #128	; 0x80
 8008aa6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2280      	movs	r2, #128	; 0x80
 8008ab4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008ab6:	e018      	b.n	8008aea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	22c0      	movs	r2, #192	; 0xc0
 8008abc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2280      	movs	r2, #128	; 0x80
 8008aca:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008acc:	e00d      	b.n	8008aea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	22e0      	movs	r2, #224	; 0xe0
 8008ad2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2280      	movs	r2, #128	; 0x80
 8008ae0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008ae2:	e002      	b.n	8008aea <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ae8:	bf00      	nop
  }

  return status;
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	371c      	adds	r7, #28
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008b00:	4b18      	ldr	r3, [pc, #96]	; (8008b64 <SAI_Disable+0x6c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a18      	ldr	r2, [pc, #96]	; (8008b68 <SAI_Disable+0x70>)
 8008b06:	fba2 2303 	umull	r2, r3, r2, r3
 8008b0a:	0b1b      	lsrs	r3, r3, #12
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b22:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10a      	bne.n	8008b40 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	72fb      	strb	r3, [r7, #11]
      break;
 8008b3e:	e009      	b.n	8008b54 <SAI_Disable+0x5c>
    }
    count--;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e7      	bne.n	8008b24 <SAI_Disable+0x2c>

  return status;
 8008b54:	7afb      	ldrb	r3, [r7, #11]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	20000010 	.word	0x20000010
 8008b68:	95cbec1b 	.word	0x95cbec1b

08008b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e095      	b.n	8008caa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d108      	bne.n	8008b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b8e:	d009      	beq.n	8008ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	61da      	str	r2, [r3, #28]
 8008b96:	e005      	b.n	8008ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d106      	bne.n	8008bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7f8 fc56 	bl	8001470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008be4:	d902      	bls.n	8008bec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008be6:	2300      	movs	r3, #0
 8008be8:	60fb      	str	r3, [r7, #12]
 8008bea:	e002      	b.n	8008bf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008bfa:	d007      	beq.n	8008c0c <HAL_SPI_Init+0xa0>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c04:	d002      	beq.n	8008c0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	431a      	orrs	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	431a      	orrs	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c44:	431a      	orrs	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4e:	ea42 0103 	orr.w	r1, r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	0c1b      	lsrs	r3, r3, #16
 8008c68:	f003 0204 	and.w	r2, r3, #4
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c70:	f003 0310 	and.w	r3, r3, #16
 8008c74:	431a      	orrs	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c7a:	f003 0308 	and.w	r3, r3, #8
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008c88:	ea42 0103 	orr.w	r1, r2, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e049      	b.n	8008d58 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d106      	bne.n	8008cde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7f8 ffa7 	bl	8001c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3304      	adds	r3, #4
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	f000 fb3f 	bl	8009374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d001      	beq.n	8008d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e036      	b.n	8008de6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68da      	ldr	r2, [r3, #12]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f042 0201 	orr.w	r2, r2, #1
 8008d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a17      	ldr	r2, [pc, #92]	; (8008df4 <HAL_TIM_Base_Start_IT+0x94>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d004      	beq.n	8008da4 <HAL_TIM_Base_Start_IT+0x44>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da2:	d115      	bne.n	8008dd0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689a      	ldr	r2, [r3, #8]
 8008daa:	4b13      	ldr	r3, [pc, #76]	; (8008df8 <HAL_TIM_Base_Start_IT+0x98>)
 8008dac:	4013      	ands	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2b06      	cmp	r3, #6
 8008db4:	d015      	beq.n	8008de2 <HAL_TIM_Base_Start_IT+0x82>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dbc:	d011      	beq.n	8008de2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f042 0201 	orr.w	r2, r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dce:	e008      	b.n	8008de2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f042 0201 	orr.w	r2, r2, #1
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	e000      	b.n	8008de4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008de2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3714      	adds	r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	40012c00 	.word	0x40012c00
 8008df8:	00010007 	.word	0x00010007

08008dfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e049      	b.n	8008ea2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d106      	bne.n	8008e28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f841 	bl	8008eaa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3304      	adds	r3, #4
 8008e38:	4619      	mov	r1, r3
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	f000 fa9a 	bl	8009374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008eb2:	bf00      	nop
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b082      	sub	sp, #8
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0302 	and.w	r3, r3, #2
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d122      	bne.n	8008f1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d11b      	bne.n	8008f1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f06f 0202 	mvn.w	r2, #2
 8008eea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	f003 0303 	and.w	r3, r3, #3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d003      	beq.n	8008f08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fa19 	bl	8009338 <HAL_TIM_IC_CaptureCallback>
 8008f06:	e005      	b.n	8008f14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fa0b 	bl	8009324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa1c 	bl	800934c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	2b04      	cmp	r3, #4
 8008f26:	d122      	bne.n	8008f6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	f003 0304 	and.w	r3, r3, #4
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	d11b      	bne.n	8008f6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f06f 0204 	mvn.w	r2, #4
 8008f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2202      	movs	r2, #2
 8008f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f9ef 	bl	8009338 <HAL_TIM_IC_CaptureCallback>
 8008f5a:	e005      	b.n	8008f68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f9e1 	bl	8009324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f9f2 	bl	800934c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	f003 0308 	and.w	r3, r3, #8
 8008f78:	2b08      	cmp	r3, #8
 8008f7a:	d122      	bne.n	8008fc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	f003 0308 	and.w	r3, r3, #8
 8008f86:	2b08      	cmp	r3, #8
 8008f88:	d11b      	bne.n	8008fc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f06f 0208 	mvn.w	r2, #8
 8008f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2204      	movs	r2, #4
 8008f98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	f003 0303 	and.w	r3, r3, #3
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d003      	beq.n	8008fb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f9c5 	bl	8009338 <HAL_TIM_IC_CaptureCallback>
 8008fae:	e005      	b.n	8008fbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f9b7 	bl	8009324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f9c8 	bl	800934c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	f003 0310 	and.w	r3, r3, #16
 8008fcc:	2b10      	cmp	r3, #16
 8008fce:	d122      	bne.n	8009016 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f003 0310 	and.w	r3, r3, #16
 8008fda:	2b10      	cmp	r3, #16
 8008fdc:	d11b      	bne.n	8009016 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f06f 0210 	mvn.w	r2, #16
 8008fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2208      	movs	r2, #8
 8008fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f99b 	bl	8009338 <HAL_TIM_IC_CaptureCallback>
 8009002:	e005      	b.n	8009010 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f98d 	bl	8009324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f99e 	bl	800934c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	f003 0301 	and.w	r3, r3, #1
 8009020:	2b01      	cmp	r3, #1
 8009022:	d10e      	bne.n	8009042 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b01      	cmp	r3, #1
 8009030:	d107      	bne.n	8009042 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f06f 0201 	mvn.w	r2, #1
 800903a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7f7 ffe7 	bl	8001010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800904c:	2b80      	cmp	r3, #128	; 0x80
 800904e:	d10e      	bne.n	800906e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800905a:	2b80      	cmp	r3, #128	; 0x80
 800905c:	d107      	bne.n	800906e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fcff 	bl	8009a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800907c:	d10e      	bne.n	800909c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009088:	2b80      	cmp	r3, #128	; 0x80
 800908a:	d107      	bne.n	800909c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fcf2 	bl	8009a80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a6:	2b40      	cmp	r3, #64	; 0x40
 80090a8:	d10e      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b4:	2b40      	cmp	r3, #64	; 0x40
 80090b6:	d107      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f94c 	bl	8009360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	f003 0320 	and.w	r3, r3, #32
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d10e      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b20      	cmp	r3, #32
 80090e2:	d107      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f06f 0220 	mvn.w	r2, #32
 80090ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fcb2 	bl	8009a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009112:	2b01      	cmp	r3, #1
 8009114:	d101      	bne.n	800911a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009116:	2302      	movs	r3, #2
 8009118:	e0ff      	b.n	800931a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b14      	cmp	r3, #20
 8009126:	f200 80f0 	bhi.w	800930a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800912a:	a201      	add	r2, pc, #4	; (adr r2, 8009130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	08009185 	.word	0x08009185
 8009134:	0800930b 	.word	0x0800930b
 8009138:	0800930b 	.word	0x0800930b
 800913c:	0800930b 	.word	0x0800930b
 8009140:	080091c5 	.word	0x080091c5
 8009144:	0800930b 	.word	0x0800930b
 8009148:	0800930b 	.word	0x0800930b
 800914c:	0800930b 	.word	0x0800930b
 8009150:	08009207 	.word	0x08009207
 8009154:	0800930b 	.word	0x0800930b
 8009158:	0800930b 	.word	0x0800930b
 800915c:	0800930b 	.word	0x0800930b
 8009160:	08009247 	.word	0x08009247
 8009164:	0800930b 	.word	0x0800930b
 8009168:	0800930b 	.word	0x0800930b
 800916c:	0800930b 	.word	0x0800930b
 8009170:	08009289 	.word	0x08009289
 8009174:	0800930b 	.word	0x0800930b
 8009178:	0800930b 	.word	0x0800930b
 800917c:	0800930b 	.word	0x0800930b
 8009180:	080092c9 	.word	0x080092c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68b9      	ldr	r1, [r7, #8]
 800918a:	4618      	mov	r0, r3
 800918c:	f000 f956 	bl	800943c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	699a      	ldr	r2, [r3, #24]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f042 0208 	orr.w	r2, r2, #8
 800919e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	699a      	ldr	r2, [r3, #24]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0204 	bic.w	r2, r2, #4
 80091ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6999      	ldr	r1, [r3, #24]
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	691a      	ldr	r2, [r3, #16]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	430a      	orrs	r2, r1
 80091c0:	619a      	str	r2, [r3, #24]
      break;
 80091c2:	e0a5      	b.n	8009310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68b9      	ldr	r1, [r7, #8]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 f9b2 	bl	8009534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699a      	ldr	r2, [r3, #24]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	699a      	ldr	r2, [r3, #24]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6999      	ldr	r1, [r3, #24]
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	021a      	lsls	r2, r3, #8
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	430a      	orrs	r2, r1
 8009202:	619a      	str	r2, [r3, #24]
      break;
 8009204:	e084      	b.n	8009310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68b9      	ldr	r1, [r7, #8]
 800920c:	4618      	mov	r0, r3
 800920e:	f000 fa0b 	bl	8009628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	69da      	ldr	r2, [r3, #28]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f042 0208 	orr.w	r2, r2, #8
 8009220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	69da      	ldr	r2, [r3, #28]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 0204 	bic.w	r2, r2, #4
 8009230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	69d9      	ldr	r1, [r3, #28]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	691a      	ldr	r2, [r3, #16]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	430a      	orrs	r2, r1
 8009242:	61da      	str	r2, [r3, #28]
      break;
 8009244:	e064      	b.n	8009310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	4618      	mov	r0, r3
 800924e:	f000 fa63 	bl	8009718 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	69da      	ldr	r2, [r3, #28]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	69da      	ldr	r2, [r3, #28]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	69d9      	ldr	r1, [r3, #28]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	021a      	lsls	r2, r3, #8
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	61da      	str	r2, [r3, #28]
      break;
 8009286:	e043      	b.n	8009310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68b9      	ldr	r1, [r7, #8]
 800928e:	4618      	mov	r0, r3
 8009290:	f000 faa0 	bl	80097d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f042 0208 	orr.w	r2, r2, #8
 80092a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f022 0204 	bic.w	r2, r2, #4
 80092b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	691a      	ldr	r2, [r3, #16]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80092c6:	e023      	b.n	8009310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68b9      	ldr	r1, [r7, #8]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 fad8 	bl	8009884 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	021a      	lsls	r2, r3, #8
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009308:	e002      	b.n	8009310 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	75fb      	strb	r3, [r7, #23]
      break;
 800930e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009318:	7dfb      	ldrb	r3, [r7, #23]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop

08009324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a2a      	ldr	r2, [pc, #168]	; (8009430 <TIM_Base_SetConfig+0xbc>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d003      	beq.n	8009394 <TIM_Base_SetConfig+0x20>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009392:	d108      	bne.n	80093a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800939a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a21      	ldr	r2, [pc, #132]	; (8009430 <TIM_Base_SetConfig+0xbc>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d00b      	beq.n	80093c6 <TIM_Base_SetConfig+0x52>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b4:	d007      	beq.n	80093c6 <TIM_Base_SetConfig+0x52>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a1e      	ldr	r2, [pc, #120]	; (8009434 <TIM_Base_SetConfig+0xc0>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d003      	beq.n	80093c6 <TIM_Base_SetConfig+0x52>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a1d      	ldr	r2, [pc, #116]	; (8009438 <TIM_Base_SetConfig+0xc4>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d108      	bne.n	80093d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	689a      	ldr	r2, [r3, #8]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a0c      	ldr	r2, [pc, #48]	; (8009430 <TIM_Base_SetConfig+0xbc>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d007      	beq.n	8009414 <TIM_Base_SetConfig+0xa0>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a0b      	ldr	r2, [pc, #44]	; (8009434 <TIM_Base_SetConfig+0xc0>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d003      	beq.n	8009414 <TIM_Base_SetConfig+0xa0>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a0a      	ldr	r2, [pc, #40]	; (8009438 <TIM_Base_SetConfig+0xc4>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d103      	bne.n	800941c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	691a      	ldr	r2, [r3, #16]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	615a      	str	r2, [r3, #20]
}
 8009422:	bf00      	nop
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	40012c00 	.word	0x40012c00
 8009434:	40014400 	.word	0x40014400
 8009438:	40014800 	.word	0x40014800

0800943c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	f023 0201 	bic.w	r2, r3, #1
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800946a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 0303 	bic.w	r3, r3, #3
 8009476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	4313      	orrs	r3, r2
 8009480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f023 0302 	bic.w	r3, r3, #2
 8009488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	4313      	orrs	r3, r2
 8009492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a24      	ldr	r2, [pc, #144]	; (8009528 <TIM_OC1_SetConfig+0xec>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d007      	beq.n	80094ac <TIM_OC1_SetConfig+0x70>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a23      	ldr	r2, [pc, #140]	; (800952c <TIM_OC1_SetConfig+0xf0>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d003      	beq.n	80094ac <TIM_OC1_SetConfig+0x70>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a22      	ldr	r2, [pc, #136]	; (8009530 <TIM_OC1_SetConfig+0xf4>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d10c      	bne.n	80094c6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	f023 0308 	bic.w	r3, r3, #8
 80094b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f023 0304 	bic.w	r3, r3, #4
 80094c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a17      	ldr	r2, [pc, #92]	; (8009528 <TIM_OC1_SetConfig+0xec>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d007      	beq.n	80094de <TIM_OC1_SetConfig+0xa2>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a17      	ldr	r2, [pc, #92]	; (8009530 <TIM_OC1_SetConfig+0xf4>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d003      	beq.n	80094de <TIM_OC1_SetConfig+0xa2>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a14      	ldr	r2, [pc, #80]	; (800952c <TIM_OC1_SetConfig+0xf0>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d111      	bne.n	8009502 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4313      	orrs	r3, r2
 8009500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	621a      	str	r2, [r3, #32]
}
 800951c:	bf00      	nop
 800951e:	371c      	adds	r7, #28
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	40012c00 	.word	0x40012c00
 800952c:	40014800 	.word	0x40014800
 8009530:	40014400 	.word	0x40014400

08009534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009534:	b480      	push	{r7}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	f023 0210 	bic.w	r2, r3, #16
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800956e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	021b      	lsls	r3, r3, #8
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	4313      	orrs	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f023 0320 	bic.w	r3, r3, #32
 8009582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	011b      	lsls	r3, r3, #4
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	4313      	orrs	r3, r2
 800958e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a22      	ldr	r2, [pc, #136]	; (800961c <TIM_OC2_SetConfig+0xe8>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d10d      	bne.n	80095b4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800959e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	011b      	lsls	r3, r3, #4
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a19      	ldr	r2, [pc, #100]	; (800961c <TIM_OC2_SetConfig+0xe8>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d007      	beq.n	80095cc <TIM_OC2_SetConfig+0x98>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a18      	ldr	r2, [pc, #96]	; (8009620 <TIM_OC2_SetConfig+0xec>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d003      	beq.n	80095cc <TIM_OC2_SetConfig+0x98>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a17      	ldr	r2, [pc, #92]	; (8009624 <TIM_OC2_SetConfig+0xf0>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d113      	bne.n	80095f4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	621a      	str	r2, [r3, #32]
}
 800960e:	bf00      	nop
 8009610:	371c      	adds	r7, #28
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	40012c00 	.word	0x40012c00
 8009620:	40014400 	.word	0x40014400
 8009624:	40014800 	.word	0x40014800

08009628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009628:	b480      	push	{r7}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800965a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f023 0303 	bic.w	r3, r3, #3
 8009662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	021b      	lsls	r3, r3, #8
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	4313      	orrs	r3, r2
 8009680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a21      	ldr	r2, [pc, #132]	; (800970c <TIM_OC3_SetConfig+0xe4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d10d      	bne.n	80096a6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	4313      	orrs	r3, r2
 800969c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a18      	ldr	r2, [pc, #96]	; (800970c <TIM_OC3_SetConfig+0xe4>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d007      	beq.n	80096be <TIM_OC3_SetConfig+0x96>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a17      	ldr	r2, [pc, #92]	; (8009710 <TIM_OC3_SetConfig+0xe8>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d003      	beq.n	80096be <TIM_OC3_SetConfig+0x96>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a16      	ldr	r2, [pc, #88]	; (8009714 <TIM_OC3_SetConfig+0xec>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d113      	bne.n	80096e6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	011b      	lsls	r3, r3, #4
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	011b      	lsls	r3, r3, #4
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	685a      	ldr	r2, [r3, #4]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	621a      	str	r2, [r3, #32]
}
 8009700:	bf00      	nop
 8009702:	371c      	adds	r7, #28
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	40012c00 	.word	0x40012c00
 8009710:	40014400 	.word	0x40014400
 8009714:	40014800 	.word	0x40014800

08009718 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009718:	b480      	push	{r7}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800974a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	021b      	lsls	r3, r3, #8
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	4313      	orrs	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	031b      	lsls	r3, r3, #12
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	4313      	orrs	r3, r2
 8009772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a14      	ldr	r2, [pc, #80]	; (80097c8 <TIM_OC4_SetConfig+0xb0>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d007      	beq.n	800978c <TIM_OC4_SetConfig+0x74>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a13      	ldr	r2, [pc, #76]	; (80097cc <TIM_OC4_SetConfig+0xb4>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d003      	beq.n	800978c <TIM_OC4_SetConfig+0x74>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a12      	ldr	r2, [pc, #72]	; (80097d0 <TIM_OC4_SetConfig+0xb8>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d109      	bne.n	80097a0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	019b      	lsls	r3, r3, #6
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	4313      	orrs	r3, r2
 800979e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	621a      	str	r2, [r3, #32]
}
 80097ba:	bf00      	nop
 80097bc:	371c      	adds	r7, #28
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	40012c00 	.word	0x40012c00
 80097cc:	40014400 	.word	0x40014400
 80097d0:	40014800 	.word	0x40014800

080097d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b087      	sub	sp, #28
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009818:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	041b      	lsls	r3, r3, #16
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4313      	orrs	r3, r2
 8009824:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a13      	ldr	r2, [pc, #76]	; (8009878 <TIM_OC5_SetConfig+0xa4>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d007      	beq.n	800983e <TIM_OC5_SetConfig+0x6a>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a12      	ldr	r2, [pc, #72]	; (800987c <TIM_OC5_SetConfig+0xa8>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d003      	beq.n	800983e <TIM_OC5_SetConfig+0x6a>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a11      	ldr	r2, [pc, #68]	; (8009880 <TIM_OC5_SetConfig+0xac>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d109      	bne.n	8009852 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009844:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	021b      	lsls	r3, r3, #8
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	4313      	orrs	r3, r2
 8009850:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	685a      	ldr	r2, [r3, #4]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	621a      	str	r2, [r3, #32]
}
 800986c:	bf00      	nop
 800986e:	371c      	adds	r7, #28
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr
 8009878:	40012c00 	.word	0x40012c00
 800987c:	40014400 	.word	0x40014400
 8009880:	40014800 	.word	0x40014800

08009884 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009884:	b480      	push	{r7}
 8009886:	b087      	sub	sp, #28
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a1b      	ldr	r3, [r3, #32]
 800989e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	021b      	lsls	r3, r3, #8
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	051b      	lsls	r3, r3, #20
 80098d2:	693a      	ldr	r2, [r7, #16]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a14      	ldr	r2, [pc, #80]	; (800992c <TIM_OC6_SetConfig+0xa8>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d007      	beq.n	80098f0 <TIM_OC6_SetConfig+0x6c>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a13      	ldr	r2, [pc, #76]	; (8009930 <TIM_OC6_SetConfig+0xac>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d003      	beq.n	80098f0 <TIM_OC6_SetConfig+0x6c>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a12      	ldr	r2, [pc, #72]	; (8009934 <TIM_OC6_SetConfig+0xb0>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d109      	bne.n	8009904 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	029b      	lsls	r3, r3, #10
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	4313      	orrs	r3, r2
 8009902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	693a      	ldr	r2, [r7, #16]
 800991c:	621a      	str	r2, [r3, #32]
}
 800991e:	bf00      	nop
 8009920:	371c      	adds	r7, #28
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	40012c00 	.word	0x40012c00
 8009930:	40014400 	.word	0x40014400
 8009934:	40014800 	.word	0x40014800

08009938 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800994c:	2b01      	cmp	r3, #1
 800994e:	d101      	bne.n	8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009950:	2302      	movs	r3, #2
 8009952:	e078      	b.n	8009a46 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	4313      	orrs	r3, r2
 8009968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	4313      	orrs	r3, r2
 8009976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	4313      	orrs	r3, r2
 8009984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4313      	orrs	r3, r2
 8009992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	4313      	orrs	r3, r2
 80099a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ba:	4313      	orrs	r3, r2
 80099bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	041b      	lsls	r3, r3, #16
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a20      	ldr	r2, [pc, #128]	; (8009a54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d106      	bne.n	80099e6 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a1a      	ldr	r2, [pc, #104]	; (8009a54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d121      	bne.n	8009a34 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fa:	051b      	lsls	r3, r3, #20
 80099fc:	4313      	orrs	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a0c      	ldr	r2, [pc, #48]	; (8009a54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d106      	bne.n	8009a34 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a30:	4313      	orrs	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	40012c00 	.word	0x40012c00

08009a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009aa4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009aa8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b085      	sub	sp, #20
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009aca:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009ace:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	43db      	mvns	r3, r3
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009af8:	b084      	sub	sp, #16
 8009afa:	b480      	push	{r7}
 8009afc:	b083      	sub	sp, #12
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	f107 0014 	add.w	r0, r7, #20
 8009b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	b004      	add	sp, #16
 8009b38:	4770      	bx	lr
	...

08009b3c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b09d      	sub	sp, #116	; 0x74
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b62:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	78db      	ldrb	r3, [r3, #3]
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d81f      	bhi.n	8009bae <USB_ActivateEndpoint+0x72>
 8009b6e:	a201      	add	r2, pc, #4	; (adr r2, 8009b74 <USB_ActivateEndpoint+0x38>)
 8009b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b74:	08009b85 	.word	0x08009b85
 8009b78:	08009ba1 	.word	0x08009ba1
 8009b7c:	08009bb7 	.word	0x08009bb7
 8009b80:	08009b93 	.word	0x08009b93
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009b84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009b88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009b90:	e012      	b.n	8009bb8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009b92:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009b96:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009b9a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009b9e:	e00b      	b.n	8009bb8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009ba0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009ba4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ba8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009bac:	e004      	b.n	8009bb8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009bb4:	e000      	b.n	8009bb8 <USB_ActivateEndpoint+0x7c>
      break;
 8009bb6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	441a      	add	r2, r3
 8009bc2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	881b      	ldrh	r3, [r3, #0]
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	b21b      	sxth	r3, r3
 8009bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf2:	b21a      	sxth	r2, r3
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	b21b      	sxth	r3, r3
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	b21b      	sxth	r3, r3
 8009bfe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	441a      	add	r2, r3
 8009c0c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	7b1b      	ldrb	r3, [r3, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f040 8149 	bne.w	8009ec0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	785b      	ldrb	r3, [r3, #1]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f000 8084 	beq.w	8009d40 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	61bb      	str	r3, [r7, #24]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	461a      	mov	r2, r3
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	4413      	add	r3, r2
 8009c4a:	61bb      	str	r3, [r7, #24]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	00da      	lsls	r2, r3, #3
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c5a:	617b      	str	r3, [r7, #20]
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	88db      	ldrh	r3, [r3, #6]
 8009c60:	085b      	lsrs	r3, r3, #1
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	005b      	lsls	r3, r3, #1
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	881b      	ldrh	r3, [r3, #0]
 8009c78:	827b      	strh	r3, [r7, #18]
 8009c7a:	8a7b      	ldrh	r3, [r7, #18]
 8009c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d01b      	beq.n	8009cbc <USB_ActivateEndpoint+0x180>
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c9a:	823b      	strh	r3, [r7, #16]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	441a      	add	r2, r3
 8009ca6:	8a3b      	ldrh	r3, [r7, #16]
 8009ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	78db      	ldrb	r3, [r3, #3]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d020      	beq.n	8009d06 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cda:	81bb      	strh	r3, [r7, #12]
 8009cdc:	89bb      	ldrh	r3, [r7, #12]
 8009cde:	f083 0320 	eor.w	r3, r3, #32
 8009ce2:	81bb      	strh	r3, [r7, #12]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	441a      	add	r2, r3
 8009cee:	89bb      	ldrh	r3, [r7, #12]
 8009cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	8013      	strh	r3, [r2, #0]
 8009d04:	e2a6      	b.n	800a254 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d1c:	81fb      	strh	r3, [r7, #14]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	441a      	add	r2, r3
 8009d28:	89fb      	ldrh	r3, [r7, #14]
 8009d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	8013      	strh	r3, [r2, #0]
 8009d3e:	e289      	b.n	800a254 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	633b      	str	r3, [r7, #48]	; 0x30
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	4413      	add	r3, r2
 8009d52:	633b      	str	r3, [r7, #48]	; 0x30
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	00da      	lsls	r2, r3, #3
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	88db      	ldrh	r3, [r3, #6]
 8009d68:	085b      	lsrs	r3, r3, #1
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	005b      	lsls	r3, r3, #1
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d72:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	461a      	mov	r2, r3
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	4413      	add	r3, r2
 8009d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	00da      	lsls	r2, r3, #3
 8009d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d90:	4413      	add	r3, r2
 8009d92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	2b3e      	cmp	r3, #62	; 0x3e
 8009d9e:	d918      	bls.n	8009dd2 <USB_ActivateEndpoint+0x296>
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	095b      	lsrs	r3, r3, #5
 8009da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	691b      	ldr	r3, [r3, #16]
 8009dac:	f003 031f 	and.w	r3, r3, #31
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d102      	bne.n	8009dba <USB_ActivateEndpoint+0x27e>
 8009db4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009db6:	3b01      	subs	r3, #1
 8009db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	029b      	lsls	r3, r3, #10
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dce:	801a      	strh	r2, [r3, #0]
 8009dd0:	e029      	b.n	8009e26 <USB_ActivateEndpoint+0x2ea>
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d112      	bne.n	8009e00 <USB_ActivateEndpoint+0x2c4>
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	801a      	strh	r2, [r3, #0]
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	801a      	strh	r2, [r3, #0]
 8009dfe:	e012      	b.n	8009e26 <USB_ActivateEndpoint+0x2ea>
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	085b      	lsrs	r3, r3, #1
 8009e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <USB_ActivateEndpoint+0x2de>
 8009e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e16:	3301      	adds	r3, #1
 8009e18:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	029b      	lsls	r3, r3, #10
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	847b      	strh	r3, [r7, #34]	; 0x22
 8009e34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d01b      	beq.n	8009e76 <USB_ActivateEndpoint+0x33a>
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e54:	843b      	strh	r3, [r7, #32]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	441a      	add	r2, r3
 8009e60:	8c3b      	ldrh	r3, [r7, #32]
 8009e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	881b      	ldrh	r3, [r3, #0]
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8c:	83fb      	strh	r3, [r7, #30]
 8009e8e:	8bfb      	ldrh	r3, [r7, #30]
 8009e90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e94:	83fb      	strh	r3, [r7, #30]
 8009e96:	8bfb      	ldrh	r3, [r7, #30]
 8009e98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e9c:	83fb      	strh	r3, [r7, #30]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	441a      	add	r2, r3
 8009ea8:	8bfb      	ldrh	r3, [r7, #30]
 8009eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	8013      	strh	r3, [r2, #0]
 8009ebe:	e1c9      	b.n	800a254 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	78db      	ldrb	r3, [r3, #3]
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d11e      	bne.n	8009f06 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ede:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	441a      	add	r2, r3
 8009eec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ef8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	8013      	strh	r3, [r2, #0]
 8009f04:	e01d      	b.n	8009f42 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	881b      	ldrh	r3, [r3, #0]
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	441a      	add	r2, r3
 8009f2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	461a      	mov	r2, r3
 8009f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f52:	4413      	add	r3, r2
 8009f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	00da      	lsls	r2, r3, #3
 8009f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f64:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	891b      	ldrh	r3, [r3, #8]
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f74:	801a      	strh	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	657b      	str	r3, [r7, #84]	; 0x54
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	461a      	mov	r2, r3
 8009f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f86:	4413      	add	r3, r2
 8009f88:	657b      	str	r3, [r7, #84]	; 0x54
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	00da      	lsls	r2, r3, #3
 8009f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f92:	4413      	add	r3, r2
 8009f94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f98:	653b      	str	r3, [r7, #80]	; 0x50
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	895b      	ldrh	r3, [r3, #10]
 8009f9e:	085b      	lsrs	r3, r3, #1
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	005b      	lsls	r3, r3, #1
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fa8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	785b      	ldrb	r3, [r3, #1]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f040 8093 	bne.w	800a0da <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009fc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d01b      	beq.n	800a008 <USB_ActivateEndpoint+0x4cc>
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	441a      	add	r2, r3
 8009ff2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a004:	b29b      	uxth	r3, r3
 800a006:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a016:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d01b      	beq.n	800a058 <USB_ActivateEndpoint+0x51c>
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a036:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	441a      	add	r2, r3
 800a042:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a04c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a050:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a054:	b29b      	uxth	r3, r3
 800a056:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	881b      	ldrh	r3, [r3, #0]
 800a064:	b29b      	uxth	r3, r3
 800a066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a06a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a06e:	873b      	strh	r3, [r7, #56]	; 0x38
 800a070:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a072:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a076:	873b      	strh	r3, [r7, #56]	; 0x38
 800a078:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a07a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a07e:	873b      	strh	r3, [r7, #56]	; 0x38
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	441a      	add	r2, r3
 800a08a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a08c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	881b      	ldrh	r3, [r3, #0]
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b6:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	441a      	add	r2, r3
 800a0c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a0c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	8013      	strh	r3, [r2, #0]
 800a0d8:	e0bc      	b.n	800a254 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a0ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a0ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d01d      	beq.n	800a132 <USB_ActivateEndpoint+0x5f6>
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	b29b      	uxth	r3, r3
 800a104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a10c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	441a      	add	r2, r3
 800a11a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a11e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a12e:	b29b      	uxth	r3, r3
 800a130:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a142:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d01d      	beq.n	800a18a <USB_ActivateEndpoint+0x64e>
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4413      	add	r3, r2
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a164:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	441a      	add	r2, r3
 800a172:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a17a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a17e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a182:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a186:	b29b      	uxth	r3, r3
 800a188:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	78db      	ldrb	r3, [r3, #3]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d024      	beq.n	800a1dc <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a1ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a1b0:	f083 0320 	eor.w	r3, r3, #32
 800a1b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	441a      	add	r2, r3
 800a1c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a1c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	8013      	strh	r3, [r2, #0]
 800a1da:	e01d      	b.n	800a218 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	441a      	add	r2, r3
 800a200:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a20c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a214:	b29b      	uxth	r3, r3
 800a216:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	4413      	add	r3, r2
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	b29b      	uxth	r3, r3
 800a226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a22a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a22e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	441a      	add	r2, r3
 800a23c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a250:	b29b      	uxth	r3, r3
 800a252:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a254:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3774      	adds	r7, #116	; 0x74
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a264:	b480      	push	{r7}
 800a266:	b08d      	sub	sp, #52	; 0x34
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	7b1b      	ldrb	r3, [r3, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	f040 808e 	bne.w	800a394 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	785b      	ldrb	r3, [r3, #1]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d044      	beq.n	800a30a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	81bb      	strh	r3, [r7, #12]
 800a28e:	89bb      	ldrh	r3, [r7, #12]
 800a290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a294:	2b00      	cmp	r3, #0
 800a296:	d01b      	beq.n	800a2d0 <USB_DeactivateEndpoint+0x6c>
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	881b      	ldrh	r3, [r3, #0]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ae:	817b      	strh	r3, [r7, #10]
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	441a      	add	r2, r3
 800a2ba:	897b      	ldrh	r3, [r7, #10]
 800a2bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	881b      	ldrh	r3, [r3, #0]
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2e6:	813b      	strh	r3, [r7, #8]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	441a      	add	r2, r3
 800a2f2:	893b      	ldrh	r3, [r7, #8]
 800a2f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a304:	b29b      	uxth	r3, r3
 800a306:	8013      	strh	r3, [r2, #0]
 800a308:	e192      	b.n	800a630 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4413      	add	r3, r2
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	827b      	strh	r3, [r7, #18]
 800a318:	8a7b      	ldrh	r3, [r7, #18]
 800a31a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d01b      	beq.n	800a35a <USB_DeactivateEndpoint+0xf6>
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	881b      	ldrh	r3, [r3, #0]
 800a32e:	b29b      	uxth	r3, r3
 800a330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a338:	823b      	strh	r3, [r7, #16]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	441a      	add	r2, r3
 800a344:	8a3b      	ldrh	r3, [r7, #16]
 800a346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a34a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a34e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a356:	b29b      	uxth	r3, r3
 800a358:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	b29b      	uxth	r3, r3
 800a368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a36c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a370:	81fb      	strh	r3, [r7, #14]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	441a      	add	r2, r3
 800a37c:	89fb      	ldrh	r3, [r7, #14]
 800a37e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a38a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a38e:	b29b      	uxth	r3, r3
 800a390:	8013      	strh	r3, [r2, #0]
 800a392:	e14d      	b.n	800a630 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	785b      	ldrb	r3, [r3, #1]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f040 80a5 	bne.w	800a4e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	881b      	ldrh	r3, [r3, #0]
 800a3aa:	843b      	strh	r3, [r7, #32]
 800a3ac:	8c3b      	ldrh	r3, [r7, #32]
 800a3ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d01b      	beq.n	800a3ee <USB_DeactivateEndpoint+0x18a>
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4413      	add	r3, r2
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3cc:	83fb      	strh	r3, [r7, #30]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	441a      	add	r2, r3
 800a3d8:	8bfb      	ldrh	r3, [r7, #30]
 800a3da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a3e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	881b      	ldrh	r3, [r3, #0]
 800a3fa:	83bb      	strh	r3, [r7, #28]
 800a3fc:	8bbb      	ldrh	r3, [r7, #28]
 800a3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a402:	2b00      	cmp	r3, #0
 800a404:	d01b      	beq.n	800a43e <USB_DeactivateEndpoint+0x1da>
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4413      	add	r3, r2
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	b29b      	uxth	r3, r3
 800a414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a41c:	837b      	strh	r3, [r7, #26]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	441a      	add	r2, r3
 800a428:	8b7b      	ldrh	r3, [r7, #26]
 800a42a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a42e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a436:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4413      	add	r3, r2
 800a448:	881b      	ldrh	r3, [r3, #0]
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a454:	833b      	strh	r3, [r7, #24]
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	441a      	add	r2, r3
 800a460:	8b3b      	ldrh	r3, [r7, #24]
 800a462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a46a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a46e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a472:	b29b      	uxth	r3, r3
 800a474:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4413      	add	r3, r2
 800a480:	881b      	ldrh	r3, [r3, #0]
 800a482:	b29b      	uxth	r3, r3
 800a484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a48c:	82fb      	strh	r3, [r7, #22]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	441a      	add	r2, r3
 800a498:	8afb      	ldrh	r3, [r7, #22]
 800a49a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a49e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4413      	add	r3, r2
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4c4:	82bb      	strh	r3, [r7, #20]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	441a      	add	r2, r3
 800a4d0:	8abb      	ldrh	r3, [r7, #20]
 800a4d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	8013      	strh	r3, [r2, #0]
 800a4e6:	e0a3      	b.n	800a630 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	881b      	ldrh	r3, [r3, #0]
 800a4f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a4f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a4f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d01b      	beq.n	800a538 <USB_DeactivateEndpoint+0x2d4>
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4413      	add	r3, r2
 800a50a:	881b      	ldrh	r3, [r3, #0]
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a516:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	441a      	add	r2, r3
 800a522:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a52c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a534:	b29b      	uxth	r3, r3
 800a536:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4413      	add	r3, r2
 800a542:	881b      	ldrh	r3, [r3, #0]
 800a544:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a546:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d01b      	beq.n	800a588 <USB_DeactivateEndpoint+0x324>
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	881b      	ldrh	r3, [r3, #0]
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a566:	853b      	strh	r3, [r7, #40]	; 0x28
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	441a      	add	r2, r3
 800a572:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a57c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a580:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a584:	b29b      	uxth	r3, r3
 800a586:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	881b      	ldrh	r3, [r3, #0]
 800a594:	b29b      	uxth	r3, r3
 800a596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a59a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a59e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	441a      	add	r2, r3
 800a5aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	4413      	add	r3, r2
 800a5ca:	881b      	ldrh	r3, [r3, #0]
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	441a      	add	r2, r3
 800a5e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	881b      	ldrh	r3, [r3, #0]
 800a604:	b29b      	uxth	r3, r3
 800a606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a60e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	441a      	add	r2, r3
 800a61a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a61c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3734      	adds	r7, #52	; 0x34
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b0c2      	sub	sp, #264	; 0x108
 800a642:	af00      	add	r7, sp, #0
 800a644:	1d3b      	adds	r3, r7, #4
 800a646:	6018      	str	r0, [r3, #0]
 800a648:	463b      	mov	r3, r7
 800a64a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a64c:	463b      	mov	r3, r7
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	785b      	ldrb	r3, [r3, #1]
 800a652:	2b01      	cmp	r3, #1
 800a654:	f040 8509 	bne.w	800b06a <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a658:	463b      	mov	r3, r7
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699a      	ldr	r2, [r3, #24]
 800a65e:	463b      	mov	r3, r7
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	429a      	cmp	r2, r3
 800a666:	d905      	bls.n	800a674 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800a668:	463b      	mov	r3, r7
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a672:	e004      	b.n	800a67e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800a674:	463b      	mov	r3, r7
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a67e:	463b      	mov	r3, r7
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	7b1b      	ldrb	r3, [r3, #12]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d128      	bne.n	800a6da <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a688:	463b      	mov	r3, r7
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6959      	ldr	r1, [r3, #20]
 800a68e:	463b      	mov	r3, r7
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	88da      	ldrh	r2, [r3, #6]
 800a694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a698:	b29b      	uxth	r3, r3
 800a69a:	1d38      	adds	r0, r7, #4
 800a69c:	6800      	ldr	r0, [r0, #0]
 800a69e:	f001 f9da 	bl	800ba56 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a6a2:	1d3b      	adds	r3, r7, #4
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	613b      	str	r3, [r7, #16]
 800a6a8:	1d3b      	adds	r3, r7, #4
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	613b      	str	r3, [r7, #16]
 800a6ba:	463b      	mov	r3, r7
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	00da      	lsls	r2, r3, #3
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	801a      	strh	r2, [r3, #0]
 800a6d6:	f000 bc9f 	b.w	800b018 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a6da:	463b      	mov	r3, r7
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	78db      	ldrb	r3, [r3, #3]
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	f040 8347 	bne.w	800ad74 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a6e6:	463b      	mov	r3, r7
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	6a1a      	ldr	r2, [r3, #32]
 800a6ec:	463b      	mov	r3, r7
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	f240 82eb 	bls.w	800acce <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a6f8:	1d3b      	adds	r3, r7, #4
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	463b      	mov	r3, r7
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4413      	add	r3, r2
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	b29b      	uxth	r3, r3
 800a70a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a70e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a712:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a716:	1d3b      	adds	r3, r7, #4
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	463b      	mov	r3, r7
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	441a      	add	r2, r3
 800a724:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a72c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a730:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a738:	b29b      	uxth	r3, r3
 800a73a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a73c:	463b      	mov	r3, r7
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6a1a      	ldr	r2, [r3, #32]
 800a742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a746:	1ad2      	subs	r2, r2, r3
 800a748:	463b      	mov	r3, r7
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a74e:	1d3b      	adds	r3, r7, #4
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	463b      	mov	r3, r7
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	b29b      	uxth	r3, r3
 800a760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 8159 	beq.w	800aa1c <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a76a:	1d3b      	adds	r3, r7, #4
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	633b      	str	r3, [r7, #48]	; 0x30
 800a770:	463b      	mov	r3, r7
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	785b      	ldrb	r3, [r3, #1]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d164      	bne.n	800a844 <USB_EPStartXfer+0x206>
 800a77a:	1d3b      	adds	r3, r7, #4
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a780:	1d3b      	adds	r3, r7, #4
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a788:	b29b      	uxth	r3, r3
 800a78a:	461a      	mov	r2, r3
 800a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78e:	4413      	add	r3, r2
 800a790:	62bb      	str	r3, [r7, #40]	; 0x28
 800a792:	463b      	mov	r3, r7
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	00da      	lsls	r2, r3, #3
 800a79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79c:	4413      	add	r3, r2
 800a79e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a8:	2b3e      	cmp	r3, #62	; 0x3e
 800a7aa:	d91c      	bls.n	800a7e6 <USB_EPStartXfer+0x1a8>
 800a7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b0:	095b      	lsrs	r3, r3, #5
 800a7b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ba:	f003 031f 	and.w	r3, r3, #31
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d104      	bne.n	800a7cc <USB_EPStartXfer+0x18e>
 800a7c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a7cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	029b      	lsls	r3, r3, #10
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	801a      	strh	r2, [r3, #0]
 800a7e4:	e04a      	b.n	800a87c <USB_EPStartXfer+0x23e>
 800a7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d112      	bne.n	800a814 <USB_EPStartXfer+0x1d6>
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	801a      	strh	r2, [r3, #0]
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a800:	881b      	ldrh	r3, [r3, #0]
 800a802:	b29b      	uxth	r3, r3
 800a804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	801a      	strh	r2, [r3, #0]
 800a812:	e033      	b.n	800a87c <USB_EPStartXfer+0x23e>
 800a814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a818:	085b      	lsrs	r3, r3, #1
 800a81a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	2b00      	cmp	r3, #0
 800a828:	d004      	beq.n	800a834 <USB_EPStartXfer+0x1f6>
 800a82a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a82e:	3301      	adds	r3, #1
 800a830:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a834:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a838:	b29b      	uxth	r3, r3
 800a83a:	029b      	lsls	r3, r3, #10
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	801a      	strh	r2, [r3, #0]
 800a842:	e01b      	b.n	800a87c <USB_EPStartXfer+0x23e>
 800a844:	463b      	mov	r3, r7
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	785b      	ldrb	r3, [r3, #1]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d116      	bne.n	800a87c <USB_EPStartXfer+0x23e>
 800a84e:	1d3b      	adds	r3, r7, #4
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a856:	b29b      	uxth	r3, r3
 800a858:	461a      	mov	r2, r3
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	4413      	add	r3, r2
 800a85e:	633b      	str	r3, [r7, #48]	; 0x30
 800a860:	463b      	mov	r3, r7
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	00da      	lsls	r2, r3, #3
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	4413      	add	r3, r2
 800a86c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a870:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a876:	b29a      	uxth	r2, r3
 800a878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a87c:	463b      	mov	r3, r7
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	895b      	ldrh	r3, [r3, #10]
 800a882:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a886:	463b      	mov	r3, r7
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6959      	ldr	r1, [r3, #20]
 800a88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a890:	b29b      	uxth	r3, r3
 800a892:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a896:	1d38      	adds	r0, r7, #4
 800a898:	6800      	ldr	r0, [r0, #0]
 800a89a:	f001 f8dc 	bl	800ba56 <USB_WritePMA>
            ep->xfer_buff += len;
 800a89e:	463b      	mov	r3, r7
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	695a      	ldr	r2, [r3, #20]
 800a8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a8:	441a      	add	r2, r3
 800a8aa:	463b      	mov	r3, r7
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a8b0:	463b      	mov	r3, r7
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6a1a      	ldr	r2, [r3, #32]
 800a8b6:	463b      	mov	r3, r7
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d909      	bls.n	800a8d4 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800a8c0:	463b      	mov	r3, r7
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6a1a      	ldr	r2, [r3, #32]
 800a8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ca:	1ad2      	subs	r2, r2, r3
 800a8cc:	463b      	mov	r3, r7
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	621a      	str	r2, [r3, #32]
 800a8d2:	e008      	b.n	800a8e6 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800a8d4:	463b      	mov	r3, r7
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a8de:	463b      	mov	r3, r7
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a8e6:	463b      	mov	r3, r7
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	785b      	ldrb	r3, [r3, #1]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d164      	bne.n	800a9ba <USB_EPStartXfer+0x37c>
 800a8f0:	1d3b      	adds	r3, r7, #4
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	61bb      	str	r3, [r7, #24]
 800a8f6:	1d3b      	adds	r3, r7, #4
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	461a      	mov	r2, r3
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	4413      	add	r3, r2
 800a906:	61bb      	str	r3, [r7, #24]
 800a908:	463b      	mov	r3, r7
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	00da      	lsls	r2, r3, #3
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	4413      	add	r3, r2
 800a914:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a918:	617b      	str	r3, [r7, #20]
 800a91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91e:	2b3e      	cmp	r3, #62	; 0x3e
 800a920:	d91c      	bls.n	800a95c <USB_EPStartXfer+0x31e>
 800a922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a926:	095b      	lsrs	r3, r3, #5
 800a928:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a930:	f003 031f 	and.w	r3, r3, #31
 800a934:	2b00      	cmp	r3, #0
 800a936:	d104      	bne.n	800a942 <USB_EPStartXfer+0x304>
 800a938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a93c:	3b01      	subs	r3, #1
 800a93e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a946:	b29b      	uxth	r3, r3
 800a948:	029b      	lsls	r3, r3, #10
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a954:	b29a      	uxth	r2, r3
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	801a      	strh	r2, [r3, #0]
 800a95a:	e04d      	b.n	800a9f8 <USB_EPStartXfer+0x3ba>
 800a95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a960:	2b00      	cmp	r3, #0
 800a962:	d112      	bne.n	800a98a <USB_EPStartXfer+0x34c>
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	b29b      	uxth	r3, r3
 800a96a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a96e:	b29a      	uxth	r2, r3
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	801a      	strh	r2, [r3, #0]
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	b29b      	uxth	r3, r3
 800a97a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a97e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a982:	b29a      	uxth	r2, r3
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	801a      	strh	r2, [r3, #0]
 800a988:	e036      	b.n	800a9f8 <USB_EPStartXfer+0x3ba>
 800a98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a98e:	085b      	lsrs	r3, r3, #1
 800a990:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d004      	beq.n	800a9aa <USB_EPStartXfer+0x36c>
 800a9a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a9aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	029b      	lsls	r3, r3, #10
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	801a      	strh	r2, [r3, #0]
 800a9b8:	e01e      	b.n	800a9f8 <USB_EPStartXfer+0x3ba>
 800a9ba:	463b      	mov	r3, r7
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	785b      	ldrb	r3, [r3, #1]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d119      	bne.n	800a9f8 <USB_EPStartXfer+0x3ba>
 800a9c4:	1d3b      	adds	r3, r7, #4
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	623b      	str	r3, [r7, #32]
 800a9ca:	1d3b      	adds	r3, r7, #4
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	4413      	add	r3, r2
 800a9da:	623b      	str	r3, [r7, #32]
 800a9dc:	463b      	mov	r3, r7
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	00da      	lsls	r2, r3, #3
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9ec:	61fb      	str	r3, [r7, #28]
 800a9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a9f8:	463b      	mov	r3, r7
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	891b      	ldrh	r3, [r3, #8]
 800a9fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa02:	463b      	mov	r3, r7
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	6959      	ldr	r1, [r3, #20]
 800aa08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa12:	1d38      	adds	r0, r7, #4
 800aa14:	6800      	ldr	r0, [r0, #0]
 800aa16:	f001 f81e 	bl	800ba56 <USB_WritePMA>
 800aa1a:	e2fd      	b.n	800b018 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aa1c:	463b      	mov	r3, r7
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	785b      	ldrb	r3, [r3, #1]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d164      	bne.n	800aaf0 <USB_EPStartXfer+0x4b2>
 800aa26:	1d3b      	adds	r3, r7, #4
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa2c:	1d3b      	adds	r3, r7, #4
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	461a      	mov	r2, r3
 800aa38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa3a:	4413      	add	r3, r2
 800aa3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa3e:	463b      	mov	r3, r7
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	00da      	lsls	r2, r3, #3
 800aa46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa48:	4413      	add	r3, r2
 800aa4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa4e:	647b      	str	r3, [r7, #68]	; 0x44
 800aa50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa54:	2b3e      	cmp	r3, #62	; 0x3e
 800aa56:	d91c      	bls.n	800aa92 <USB_EPStartXfer+0x454>
 800aa58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa5c:	095b      	lsrs	r3, r3, #5
 800aa5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa66:	f003 031f 	and.w	r3, r3, #31
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d104      	bne.n	800aa78 <USB_EPStartXfer+0x43a>
 800aa6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa72:	3b01      	subs	r3, #1
 800aa74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	029b      	lsls	r3, r3, #10
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa8e:	801a      	strh	r2, [r3, #0]
 800aa90:	e04d      	b.n	800ab2e <USB_EPStartXfer+0x4f0>
 800aa92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d112      	bne.n	800aac0 <USB_EPStartXfer+0x482>
 800aa9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaa8:	801a      	strh	r2, [r3, #0]
 800aaaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aabc:	801a      	strh	r2, [r3, #0]
 800aabe:	e036      	b.n	800ab2e <USB_EPStartXfer+0x4f0>
 800aac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac4:	085b      	lsrs	r3, r3, #1
 800aac6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aaca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d004      	beq.n	800aae0 <USB_EPStartXfer+0x4a2>
 800aad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aada:	3301      	adds	r3, #1
 800aadc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aae0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	029b      	lsls	r3, r3, #10
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaec:	801a      	strh	r2, [r3, #0]
 800aaee:	e01e      	b.n	800ab2e <USB_EPStartXfer+0x4f0>
 800aaf0:	463b      	mov	r3, r7
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	785b      	ldrb	r3, [r3, #1]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d119      	bne.n	800ab2e <USB_EPStartXfer+0x4f0>
 800aafa:	1d3b      	adds	r3, r7, #4
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	653b      	str	r3, [r7, #80]	; 0x50
 800ab00:	1d3b      	adds	r3, r7, #4
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab0e:	4413      	add	r3, r2
 800ab10:	653b      	str	r3, [r7, #80]	; 0x50
 800ab12:	463b      	mov	r3, r7
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	00da      	lsls	r2, r3, #3
 800ab1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ab2e:	463b      	mov	r3, r7
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	891b      	ldrh	r3, [r3, #8]
 800ab34:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab38:	463b      	mov	r3, r7
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6959      	ldr	r1, [r3, #20]
 800ab3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab48:	1d38      	adds	r0, r7, #4
 800ab4a:	6800      	ldr	r0, [r0, #0]
 800ab4c:	f000 ff83 	bl	800ba56 <USB_WritePMA>
            ep->xfer_buff += len;
 800ab50:	463b      	mov	r3, r7
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	695a      	ldr	r2, [r3, #20]
 800ab56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5a:	441a      	add	r2, r3
 800ab5c:	463b      	mov	r3, r7
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ab62:	463b      	mov	r3, r7
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	6a1a      	ldr	r2, [r3, #32]
 800ab68:	463b      	mov	r3, r7
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d909      	bls.n	800ab86 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800ab72:	463b      	mov	r3, r7
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6a1a      	ldr	r2, [r3, #32]
 800ab78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab7c:	1ad2      	subs	r2, r2, r3
 800ab7e:	463b      	mov	r3, r7
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	621a      	str	r2, [r3, #32]
 800ab84:	e008      	b.n	800ab98 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800ab86:	463b      	mov	r3, r7
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	6a1b      	ldr	r3, [r3, #32]
 800ab8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ab90:	463b      	mov	r3, r7
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2200      	movs	r2, #0
 800ab96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab98:	1d3b      	adds	r3, r7, #4
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	643b      	str	r3, [r7, #64]	; 0x40
 800ab9e:	463b      	mov	r3, r7
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	785b      	ldrb	r3, [r3, #1]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d164      	bne.n	800ac72 <USB_EPStartXfer+0x634>
 800aba8:	1d3b      	adds	r3, r7, #4
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	63bb      	str	r3, [r7, #56]	; 0x38
 800abae:	1d3b      	adds	r3, r7, #4
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	461a      	mov	r2, r3
 800abba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbc:	4413      	add	r3, r2
 800abbe:	63bb      	str	r3, [r7, #56]	; 0x38
 800abc0:	463b      	mov	r3, r7
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	00da      	lsls	r2, r3, #3
 800abc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abca:	4413      	add	r3, r2
 800abcc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abd0:	637b      	str	r3, [r7, #52]	; 0x34
 800abd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd6:	2b3e      	cmp	r3, #62	; 0x3e
 800abd8:	d91c      	bls.n	800ac14 <USB_EPStartXfer+0x5d6>
 800abda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abde:	095b      	lsrs	r3, r3, #5
 800abe0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800abe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe8:	f003 031f 	and.w	r3, r3, #31
 800abec:	2b00      	cmp	r3, #0
 800abee:	d104      	bne.n	800abfa <USB_EPStartXfer+0x5bc>
 800abf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abf4:	3b01      	subs	r3, #1
 800abf6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800abfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	029b      	lsls	r3, r3, #10
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac10:	801a      	strh	r2, [r3, #0]
 800ac12:	e04a      	b.n	800acaa <USB_EPStartXfer+0x66c>
 800ac14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d112      	bne.n	800ac42 <USB_EPStartXfer+0x604>
 800ac1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac26:	b29a      	uxth	r2, r3
 800ac28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac2a:	801a      	strh	r2, [r3, #0]
 800ac2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac2e:	881b      	ldrh	r3, [r3, #0]
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3e:	801a      	strh	r2, [r3, #0]
 800ac40:	e033      	b.n	800acaa <USB_EPStartXfer+0x66c>
 800ac42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac46:	085b      	lsrs	r3, r3, #1
 800ac48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac50:	f003 0301 	and.w	r3, r3, #1
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d004      	beq.n	800ac62 <USB_EPStartXfer+0x624>
 800ac58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	029b      	lsls	r3, r3, #10
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6e:	801a      	strh	r2, [r3, #0]
 800ac70:	e01b      	b.n	800acaa <USB_EPStartXfer+0x66c>
 800ac72:	463b      	mov	r3, r7
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	785b      	ldrb	r3, [r3, #1]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d116      	bne.n	800acaa <USB_EPStartXfer+0x66c>
 800ac7c:	1d3b      	adds	r3, r7, #4
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	461a      	mov	r2, r3
 800ac88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac8a:	4413      	add	r3, r2
 800ac8c:	643b      	str	r3, [r7, #64]	; 0x40
 800ac8e:	463b      	mov	r3, r7
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	00da      	lsls	r2, r3, #3
 800ac96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac98:	4413      	add	r3, r2
 800ac9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca4:	b29a      	uxth	r2, r3
 800aca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aca8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800acaa:	463b      	mov	r3, r7
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	895b      	ldrh	r3, [r3, #10]
 800acb0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800acb4:	463b      	mov	r3, r7
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	6959      	ldr	r1, [r3, #20]
 800acba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800acc4:	1d38      	adds	r0, r7, #4
 800acc6:	6800      	ldr	r0, [r0, #0]
 800acc8:	f000 fec5 	bl	800ba56 <USB_WritePMA>
 800accc:	e1a4      	b.n	800b018 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800acce:	463b      	mov	r3, r7
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6a1b      	ldr	r3, [r3, #32]
 800acd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800acd8:	1d3b      	adds	r3, r7, #4
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	463b      	mov	r3, r7
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	b29b      	uxth	r3, r3
 800acea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800acee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acf2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800acf6:	1d3b      	adds	r3, r7, #4
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	463b      	mov	r3, r7
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	441a      	add	r2, r3
 800ad04:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ad08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ad1c:	1d3b      	adds	r3, r7, #4
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad22:	1d3b      	adds	r3, r7, #4
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad30:	4413      	add	r3, r2
 800ad32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad34:	463b      	mov	r3, r7
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	00da      	lsls	r2, r3, #3
 800ad3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad3e:	4413      	add	r3, r2
 800ad40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad44:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4a:	b29a      	uxth	r2, r3
 800ad4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ad50:	463b      	mov	r3, r7
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	891b      	ldrh	r3, [r3, #8]
 800ad56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad5a:	463b      	mov	r3, r7
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6959      	ldr	r1, [r3, #20]
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad6a:	1d38      	adds	r0, r7, #4
 800ad6c:	6800      	ldr	r0, [r0, #0]
 800ad6e:	f000 fe72 	bl	800ba56 <USB_WritePMA>
 800ad72:	e151      	b.n	800b018 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ad74:	463b      	mov	r3, r7
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6a1a      	ldr	r2, [r3, #32]
 800ad7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7e:	1ad2      	subs	r2, r2, r3
 800ad80:	463b      	mov	r3, r7
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ad86:	1d3b      	adds	r3, r7, #4
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	463b      	mov	r3, r7
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	881b      	ldrh	r3, [r3, #0]
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 809b 	beq.w	800aed8 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ada2:	1d3b      	adds	r3, r7, #4
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	673b      	str	r3, [r7, #112]	; 0x70
 800ada8:	463b      	mov	r3, r7
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	785b      	ldrb	r3, [r3, #1]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d164      	bne.n	800ae7c <USB_EPStartXfer+0x83e>
 800adb2:	1d3b      	adds	r3, r7, #4
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	66bb      	str	r3, [r7, #104]	; 0x68
 800adb8:	1d3b      	adds	r3, r7, #4
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	461a      	mov	r2, r3
 800adc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adc6:	4413      	add	r3, r2
 800adc8:	66bb      	str	r3, [r7, #104]	; 0x68
 800adca:	463b      	mov	r3, r7
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	00da      	lsls	r2, r3, #3
 800add2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800add4:	4413      	add	r3, r2
 800add6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800adda:	667b      	str	r3, [r7, #100]	; 0x64
 800addc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade0:	2b3e      	cmp	r3, #62	; 0x3e
 800ade2:	d91c      	bls.n	800ae1e <USB_EPStartXfer+0x7e0>
 800ade4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade8:	095b      	lsrs	r3, r3, #5
 800adea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800adee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf2:	f003 031f 	and.w	r3, r3, #31
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d104      	bne.n	800ae04 <USB_EPStartXfer+0x7c6>
 800adfa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800adfe:	3b01      	subs	r3, #1
 800ae00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	029b      	lsls	r3, r3, #10
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae1a:	801a      	strh	r2, [r3, #0]
 800ae1c:	e04a      	b.n	800aeb4 <USB_EPStartXfer+0x876>
 800ae1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d112      	bne.n	800ae4c <USB_EPStartXfer+0x80e>
 800ae26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae28:	881b      	ldrh	r3, [r3, #0]
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae34:	801a      	strh	r2, [r3, #0]
 800ae36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae38:	881b      	ldrh	r3, [r3, #0]
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae48:	801a      	strh	r2, [r3, #0]
 800ae4a:	e033      	b.n	800aeb4 <USB_EPStartXfer+0x876>
 800ae4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae50:	085b      	lsrs	r3, r3, #1
 800ae52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae5a:	f003 0301 	and.w	r3, r3, #1
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d004      	beq.n	800ae6c <USB_EPStartXfer+0x82e>
 800ae62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ae66:	3301      	adds	r3, #1
 800ae68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	029b      	lsls	r3, r3, #10
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae78:	801a      	strh	r2, [r3, #0]
 800ae7a:	e01b      	b.n	800aeb4 <USB_EPStartXfer+0x876>
 800ae7c:	463b      	mov	r3, r7
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	785b      	ldrb	r3, [r3, #1]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d116      	bne.n	800aeb4 <USB_EPStartXfer+0x876>
 800ae86:	1d3b      	adds	r3, r7, #4
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	461a      	mov	r2, r3
 800ae92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae94:	4413      	add	r3, r2
 800ae96:	673b      	str	r3, [r7, #112]	; 0x70
 800ae98:	463b      	mov	r3, r7
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	00da      	lsls	r2, r3, #3
 800aea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aea2:	4413      	add	r3, r2
 800aea4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aea8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aeaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800aeb4:	463b      	mov	r3, r7
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	895b      	ldrh	r3, [r3, #10]
 800aeba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aebe:	463b      	mov	r3, r7
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	6959      	ldr	r1, [r3, #20]
 800aec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aece:	1d38      	adds	r0, r7, #4
 800aed0:	6800      	ldr	r0, [r0, #0]
 800aed2:	f000 fdc0 	bl	800ba56 <USB_WritePMA>
 800aed6:	e09f      	b.n	800b018 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aed8:	463b      	mov	r3, r7
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	785b      	ldrb	r3, [r3, #1]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d164      	bne.n	800afac <USB_EPStartXfer+0x96e>
 800aee2:	1d3b      	adds	r3, r7, #4
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aee8:	1d3b      	adds	r3, r7, #4
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	461a      	mov	r2, r3
 800aef4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aef6:	4413      	add	r3, r2
 800aef8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aefa:	463b      	mov	r3, r7
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	00da      	lsls	r2, r3, #3
 800af02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af04:	4413      	add	r3, r2
 800af06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800af0a:	67bb      	str	r3, [r7, #120]	; 0x78
 800af0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af10:	2b3e      	cmp	r3, #62	; 0x3e
 800af12:	d91c      	bls.n	800af4e <USB_EPStartXfer+0x910>
 800af14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af18:	095b      	lsrs	r3, r3, #5
 800af1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af22:	f003 031f 	and.w	r3, r3, #31
 800af26:	2b00      	cmp	r3, #0
 800af28:	d104      	bne.n	800af34 <USB_EPStartXfer+0x8f6>
 800af2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800af2e:	3b01      	subs	r3, #1
 800af30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800af38:	b29b      	uxth	r3, r3
 800af3a:	029b      	lsls	r3, r3, #10
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af46:	b29a      	uxth	r2, r3
 800af48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af4a:	801a      	strh	r2, [r3, #0]
 800af4c:	e053      	b.n	800aff6 <USB_EPStartXfer+0x9b8>
 800af4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af52:	2b00      	cmp	r3, #0
 800af54:	d112      	bne.n	800af7c <USB_EPStartXfer+0x93e>
 800af56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af58:	881b      	ldrh	r3, [r3, #0]
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af60:	b29a      	uxth	r2, r3
 800af62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af64:	801a      	strh	r2, [r3, #0]
 800af66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af68:	881b      	ldrh	r3, [r3, #0]
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af74:	b29a      	uxth	r2, r3
 800af76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af78:	801a      	strh	r2, [r3, #0]
 800af7a:	e03c      	b.n	800aff6 <USB_EPStartXfer+0x9b8>
 800af7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af80:	085b      	lsrs	r3, r3, #1
 800af82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d004      	beq.n	800af9c <USB_EPStartXfer+0x95e>
 800af92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800af96:	3301      	adds	r3, #1
 800af98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	029b      	lsls	r3, r3, #10
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afa8:	801a      	strh	r2, [r3, #0]
 800afaa:	e024      	b.n	800aff6 <USB_EPStartXfer+0x9b8>
 800afac:	463b      	mov	r3, r7
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	785b      	ldrb	r3, [r3, #1]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d11f      	bne.n	800aff6 <USB_EPStartXfer+0x9b8>
 800afb6:	1d3b      	adds	r3, r7, #4
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800afbe:	1d3b      	adds	r3, r7, #4
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	461a      	mov	r2, r3
 800afca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800afce:	4413      	add	r3, r2
 800afd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800afd4:	463b      	mov	r3, r7
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	00da      	lsls	r2, r3, #3
 800afdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800afe0:	4413      	add	r3, r2
 800afe2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800afe6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800afea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afee:	b29a      	uxth	r2, r3
 800aff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aff4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aff6:	463b      	mov	r3, r7
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	891b      	ldrh	r3, [r3, #8]
 800affc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b000:	463b      	mov	r3, r7
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	6959      	ldr	r1, [r3, #20]
 800b006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b010:	1d38      	adds	r0, r7, #4
 800b012:	6800      	ldr	r0, [r0, #0]
 800b014:	f000 fd1f 	bl	800ba56 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b018:	1d3b      	adds	r3, r7, #4
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	463b      	mov	r3, r7
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4413      	add	r3, r2
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b02e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b032:	817b      	strh	r3, [r7, #10]
 800b034:	897b      	ldrh	r3, [r7, #10]
 800b036:	f083 0310 	eor.w	r3, r3, #16
 800b03a:	817b      	strh	r3, [r7, #10]
 800b03c:	897b      	ldrh	r3, [r7, #10]
 800b03e:	f083 0320 	eor.w	r3, r3, #32
 800b042:	817b      	strh	r3, [r7, #10]
 800b044:	1d3b      	adds	r3, r7, #4
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	463b      	mov	r3, r7
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	441a      	add	r2, r3
 800b052:	897b      	ldrh	r3, [r7, #10]
 800b054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b05c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b064:	b29b      	uxth	r3, r3
 800b066:	8013      	strh	r3, [r2, #0]
 800b068:	e3b5      	b.n	800b7d6 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b06a:	463b      	mov	r3, r7
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	7b1b      	ldrb	r3, [r3, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	f040 8090 	bne.w	800b196 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b076:	463b      	mov	r3, r7
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	699a      	ldr	r2, [r3, #24]
 800b07c:	463b      	mov	r3, r7
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	429a      	cmp	r2, r3
 800b084:	d90e      	bls.n	800b0a4 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800b086:	463b      	mov	r3, r7
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b090:	463b      	mov	r3, r7
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	699a      	ldr	r2, [r3, #24]
 800b096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b09a:	1ad2      	subs	r2, r2, r3
 800b09c:	463b      	mov	r3, r7
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	619a      	str	r2, [r3, #24]
 800b0a2:	e008      	b.n	800b0b6 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800b0a4:	463b      	mov	r3, r7
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b0ae:	463b      	mov	r3, r7
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b0b6:	1d3b      	adds	r3, r7, #4
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b0be:	1d3b      	adds	r3, r7, #4
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0ce:	4413      	add	r3, r2
 800b0d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b0d4:	463b      	mov	r3, r7
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	00da      	lsls	r2, r3, #3
 800b0dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b0e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ee:	2b3e      	cmp	r3, #62	; 0x3e
 800b0f0:	d91d      	bls.n	800b12e <USB_EPStartXfer+0xaf0>
 800b0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f6:	095b      	lsrs	r3, r3, #5
 800b0f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b100:	f003 031f 	and.w	r3, r3, #31
 800b104:	2b00      	cmp	r3, #0
 800b106:	d104      	bne.n	800b112 <USB_EPStartXfer+0xad4>
 800b108:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b10c:	3b01      	subs	r3, #1
 800b10e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b112:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b116:	b29b      	uxth	r3, r3
 800b118:	029b      	lsls	r3, r3, #10
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b124:	b29a      	uxth	r2, r3
 800b126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b12a:	801a      	strh	r2, [r3, #0]
 800b12c:	e325      	b.n	800b77a <USB_EPStartXfer+0x113c>
 800b12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b132:	2b00      	cmp	r3, #0
 800b134:	d116      	bne.n	800b164 <USB_EPStartXfer+0xb26>
 800b136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b13a:	881b      	ldrh	r3, [r3, #0]
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b142:	b29a      	uxth	r2, r3
 800b144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b148:	801a      	strh	r2, [r3, #0]
 800b14a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	b29b      	uxth	r3, r3
 800b152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b160:	801a      	strh	r2, [r3, #0]
 800b162:	e30a      	b.n	800b77a <USB_EPStartXfer+0x113c>
 800b164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b168:	085b      	lsrs	r3, r3, #1
 800b16a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b172:	f003 0301 	and.w	r3, r3, #1
 800b176:	2b00      	cmp	r3, #0
 800b178:	d004      	beq.n	800b184 <USB_EPStartXfer+0xb46>
 800b17a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b17e:	3301      	adds	r3, #1
 800b180:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b184:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b188:	b29b      	uxth	r3, r3
 800b18a:	029b      	lsls	r3, r3, #10
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b192:	801a      	strh	r2, [r3, #0]
 800b194:	e2f1      	b.n	800b77a <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b196:	463b      	mov	r3, r7
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	78db      	ldrb	r3, [r3, #3]
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	f040 818f 	bne.w	800b4c0 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b1a2:	463b      	mov	r3, r7
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	785b      	ldrb	r3, [r3, #1]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d175      	bne.n	800b298 <USB_EPStartXfer+0xc5a>
 800b1ac:	1d3b      	adds	r3, r7, #4
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1b4:	1d3b      	adds	r3, r7, #4
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	461a      	mov	r2, r3
 800b1c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1ca:	463b      	mov	r3, r7
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	00da      	lsls	r2, r3, #3
 800b1d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1d6:	4413      	add	r3, r2
 800b1d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b1e0:	463b      	mov	r3, r7
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	2b3e      	cmp	r3, #62	; 0x3e
 800b1e8:	d91f      	bls.n	800b22a <USB_EPStartXfer+0xbec>
 800b1ea:	463b      	mov	r3, r7
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	095b      	lsrs	r3, r3, #5
 800b1f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b1f6:	463b      	mov	r3, r7
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	f003 031f 	and.w	r3, r3, #31
 800b200:	2b00      	cmp	r3, #0
 800b202:	d104      	bne.n	800b20e <USB_EPStartXfer+0xbd0>
 800b204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b208:	3b01      	subs	r3, #1
 800b20a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b20e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b212:	b29b      	uxth	r3, r3
 800b214:	029b      	lsls	r3, r3, #10
 800b216:	b29b      	uxth	r3, r3
 800b218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b21c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b220:	b29a      	uxth	r2, r3
 800b222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b226:	801a      	strh	r2, [r3, #0]
 800b228:	e05c      	b.n	800b2e4 <USB_EPStartXfer+0xca6>
 800b22a:	463b      	mov	r3, r7
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d116      	bne.n	800b262 <USB_EPStartXfer+0xc24>
 800b234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b238:	881b      	ldrh	r3, [r3, #0]
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b240:	b29a      	uxth	r2, r3
 800b242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b246:	801a      	strh	r2, [r3, #0]
 800b248:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b24c:	881b      	ldrh	r3, [r3, #0]
 800b24e:	b29b      	uxth	r3, r3
 800b250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b258:	b29a      	uxth	r2, r3
 800b25a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b25e:	801a      	strh	r2, [r3, #0]
 800b260:	e040      	b.n	800b2e4 <USB_EPStartXfer+0xca6>
 800b262:	463b      	mov	r3, r7
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	085b      	lsrs	r3, r3, #1
 800b26a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b26e:	463b      	mov	r3, r7
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	f003 0301 	and.w	r3, r3, #1
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d004      	beq.n	800b286 <USB_EPStartXfer+0xc48>
 800b27c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b280:	3301      	adds	r3, #1
 800b282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	029b      	lsls	r3, r3, #10
 800b28e:	b29a      	uxth	r2, r3
 800b290:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b294:	801a      	strh	r2, [r3, #0]
 800b296:	e025      	b.n	800b2e4 <USB_EPStartXfer+0xca6>
 800b298:	463b      	mov	r3, r7
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	785b      	ldrb	r3, [r3, #1]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d120      	bne.n	800b2e4 <USB_EPStartXfer+0xca6>
 800b2a2:	1d3b      	adds	r3, r7, #4
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2aa:	1d3b      	adds	r3, r7, #4
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2c0:	463b      	mov	r3, r7
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	00da      	lsls	r2, r3, #3
 800b2c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b2d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2d6:	463b      	mov	r3, r7
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b2e2:	801a      	strh	r2, [r3, #0]
 800b2e4:	1d3b      	adds	r3, r7, #4
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b2ec:	463b      	mov	r3, r7
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	785b      	ldrb	r3, [r3, #1]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d175      	bne.n	800b3e2 <USB_EPStartXfer+0xda4>
 800b2f6:	1d3b      	adds	r3, r7, #4
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b2fe:	1d3b      	adds	r3, r7, #4
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b306:	b29b      	uxth	r3, r3
 800b308:	461a      	mov	r2, r3
 800b30a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b30e:	4413      	add	r3, r2
 800b310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b314:	463b      	mov	r3, r7
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	00da      	lsls	r2, r3, #3
 800b31c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b320:	4413      	add	r3, r2
 800b322:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b326:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b32a:	463b      	mov	r3, r7
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	2b3e      	cmp	r3, #62	; 0x3e
 800b332:	d91f      	bls.n	800b374 <USB_EPStartXfer+0xd36>
 800b334:	463b      	mov	r3, r7
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	095b      	lsrs	r3, r3, #5
 800b33c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b340:	463b      	mov	r3, r7
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	f003 031f 	and.w	r3, r3, #31
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d104      	bne.n	800b358 <USB_EPStartXfer+0xd1a>
 800b34e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b352:	3b01      	subs	r3, #1
 800b354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	029b      	lsls	r3, r3, #10
 800b360:	b29b      	uxth	r3, r3
 800b362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b370:	801a      	strh	r2, [r3, #0]
 800b372:	e058      	b.n	800b426 <USB_EPStartXfer+0xde8>
 800b374:	463b      	mov	r3, r7
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d116      	bne.n	800b3ac <USB_EPStartXfer+0xd6e>
 800b37e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	b29b      	uxth	r3, r3
 800b386:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b390:	801a      	strh	r2, [r3, #0]
 800b392:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	b29b      	uxth	r3, r3
 800b39a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b39e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3a8:	801a      	strh	r2, [r3, #0]
 800b3aa:	e03c      	b.n	800b426 <USB_EPStartXfer+0xde8>
 800b3ac:	463b      	mov	r3, r7
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	691b      	ldr	r3, [r3, #16]
 800b3b2:	085b      	lsrs	r3, r3, #1
 800b3b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3b8:	463b      	mov	r3, r7
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	f003 0301 	and.w	r3, r3, #1
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d004      	beq.n	800b3d0 <USB_EPStartXfer+0xd92>
 800b3c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	029b      	lsls	r3, r3, #10
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3de:	801a      	strh	r2, [r3, #0]
 800b3e0:	e021      	b.n	800b426 <USB_EPStartXfer+0xde8>
 800b3e2:	463b      	mov	r3, r7
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	785b      	ldrb	r3, [r3, #1]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d11c      	bne.n	800b426 <USB_EPStartXfer+0xde8>
 800b3ec:	1d3b      	adds	r3, r7, #4
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b3fc:	4413      	add	r3, r2
 800b3fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b402:	463b      	mov	r3, r7
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	00da      	lsls	r2, r3, #3
 800b40a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b40e:	4413      	add	r3, r2
 800b410:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b414:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b418:	463b      	mov	r3, r7
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	b29a      	uxth	r2, r3
 800b420:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b424:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b426:	463b      	mov	r3, r7
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	69db      	ldr	r3, [r3, #28]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 81a4 	beq.w	800b77a <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b432:	1d3b      	adds	r3, r7, #4
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	463b      	mov	r3, r7
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4413      	add	r3, r2
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b446:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b44a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d005      	beq.n	800b45e <USB_EPStartXfer+0xe20>
 800b452:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d10d      	bne.n	800b47a <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b45e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b466:	2b00      	cmp	r3, #0
 800b468:	f040 8187 	bne.w	800b77a <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b46c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b474:	2b00      	cmp	r3, #0
 800b476:	f040 8180 	bne.w	800b77a <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b47a:	1d3b      	adds	r3, r7, #4
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	463b      	mov	r3, r7
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4413      	add	r3, r2
 800b488:	881b      	ldrh	r3, [r3, #0]
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b494:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b498:	1d3b      	adds	r3, r7, #4
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	463b      	mov	r3, r7
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	441a      	add	r2, r3
 800b4a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b4aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	8013      	strh	r3, [r2, #0]
 800b4be:	e15c      	b.n	800b77a <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b4c0:	463b      	mov	r3, r7
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	78db      	ldrb	r3, [r3, #3]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	f040 8155 	bne.w	800b776 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b4cc:	463b      	mov	r3, r7
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	699a      	ldr	r2, [r3, #24]
 800b4d2:	463b      	mov	r3, r7
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d90e      	bls.n	800b4fa <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 800b4dc:	463b      	mov	r3, r7
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b4e6:	463b      	mov	r3, r7
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	699a      	ldr	r2, [r3, #24]
 800b4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f0:	1ad2      	subs	r2, r2, r3
 800b4f2:	463b      	mov	r3, r7
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	619a      	str	r2, [r3, #24]
 800b4f8:	e008      	b.n	800b50c <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800b4fa:	463b      	mov	r3, r7
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b504:	463b      	mov	r3, r7
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2200      	movs	r2, #0
 800b50a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b50c:	463b      	mov	r3, r7
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	785b      	ldrb	r3, [r3, #1]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d16f      	bne.n	800b5f6 <USB_EPStartXfer+0xfb8>
 800b516:	1d3b      	adds	r3, r7, #4
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b51e:	1d3b      	adds	r3, r7, #4
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b526:	b29b      	uxth	r3, r3
 800b528:	461a      	mov	r2, r3
 800b52a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b52e:	4413      	add	r3, r2
 800b530:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b534:	463b      	mov	r3, r7
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	00da      	lsls	r2, r3, #3
 800b53c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b540:	4413      	add	r3, r2
 800b542:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b546:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54e:	2b3e      	cmp	r3, #62	; 0x3e
 800b550:	d91d      	bls.n	800b58e <USB_EPStartXfer+0xf50>
 800b552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b556:	095b      	lsrs	r3, r3, #5
 800b558:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b560:	f003 031f 	and.w	r3, r3, #31
 800b564:	2b00      	cmp	r3, #0
 800b566:	d104      	bne.n	800b572 <USB_EPStartXfer+0xf34>
 800b568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b56c:	3b01      	subs	r3, #1
 800b56e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b576:	b29b      	uxth	r3, r3
 800b578:	029b      	lsls	r3, r3, #10
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b584:	b29a      	uxth	r2, r3
 800b586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b58a:	801a      	strh	r2, [r3, #0]
 800b58c:	e058      	b.n	800b640 <USB_EPStartXfer+0x1002>
 800b58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b592:	2b00      	cmp	r3, #0
 800b594:	d116      	bne.n	800b5c4 <USB_EPStartXfer+0xf86>
 800b596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b59a:	881b      	ldrh	r3, [r3, #0]
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5a8:	801a      	strh	r2, [r3, #0]
 800b5aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5ae:	881b      	ldrh	r3, [r3, #0]
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5c0:	801a      	strh	r2, [r3, #0]
 800b5c2:	e03d      	b.n	800b640 <USB_EPStartXfer+0x1002>
 800b5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c8:	085b      	lsrs	r3, r3, #1
 800b5ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d2:	f003 0301 	and.w	r3, r3, #1
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d004      	beq.n	800b5e4 <USB_EPStartXfer+0xfa6>
 800b5da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5de:	3301      	adds	r3, #1
 800b5e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b5e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	029b      	lsls	r3, r3, #10
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5f2:	801a      	strh	r2, [r3, #0]
 800b5f4:	e024      	b.n	800b640 <USB_EPStartXfer+0x1002>
 800b5f6:	463b      	mov	r3, r7
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	785b      	ldrb	r3, [r3, #1]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d11f      	bne.n	800b640 <USB_EPStartXfer+0x1002>
 800b600:	1d3b      	adds	r3, r7, #4
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b608:	1d3b      	adds	r3, r7, #4
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b610:	b29b      	uxth	r3, r3
 800b612:	461a      	mov	r2, r3
 800b614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b618:	4413      	add	r3, r2
 800b61a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b61e:	463b      	mov	r3, r7
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	00da      	lsls	r2, r3, #3
 800b626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b62a:	4413      	add	r3, r2
 800b62c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b638:	b29a      	uxth	r2, r3
 800b63a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b63e:	801a      	strh	r2, [r3, #0]
 800b640:	1d3b      	adds	r3, r7, #4
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b648:	463b      	mov	r3, r7
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	785b      	ldrb	r3, [r3, #1]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d16f      	bne.n	800b732 <USB_EPStartXfer+0x10f4>
 800b652:	1d3b      	adds	r3, r7, #4
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b65a:	1d3b      	adds	r3, r7, #4
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b662:	b29b      	uxth	r3, r3
 800b664:	461a      	mov	r2, r3
 800b666:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b66a:	4413      	add	r3, r2
 800b66c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b670:	463b      	mov	r3, r7
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	00da      	lsls	r2, r3, #3
 800b678:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b67c:	4413      	add	r3, r2
 800b67e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b682:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b68a:	2b3e      	cmp	r3, #62	; 0x3e
 800b68c:	d91d      	bls.n	800b6ca <USB_EPStartXfer+0x108c>
 800b68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b692:	095b      	lsrs	r3, r3, #5
 800b694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b69c:	f003 031f 	and.w	r3, r3, #31
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d104      	bne.n	800b6ae <USB_EPStartXfer+0x1070>
 800b6a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	029b      	lsls	r3, r3, #10
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6c6:	801a      	strh	r2, [r3, #0]
 800b6c8:	e057      	b.n	800b77a <USB_EPStartXfer+0x113c>
 800b6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d116      	bne.n	800b700 <USB_EPStartXfer+0x10c2>
 800b6d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6d6:	881b      	ldrh	r3, [r3, #0]
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6e4:	801a      	strh	r2, [r3, #0]
 800b6e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6ea:	881b      	ldrh	r3, [r3, #0]
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6fc:	801a      	strh	r2, [r3, #0]
 800b6fe:	e03c      	b.n	800b77a <USB_EPStartXfer+0x113c>
 800b700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b704:	085b      	lsrs	r3, r3, #1
 800b706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b70e:	f003 0301 	and.w	r3, r3, #1
 800b712:	2b00      	cmp	r3, #0
 800b714:	d004      	beq.n	800b720 <USB_EPStartXfer+0x10e2>
 800b716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b71a:	3301      	adds	r3, #1
 800b71c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b724:	b29b      	uxth	r3, r3
 800b726:	029b      	lsls	r3, r3, #10
 800b728:	b29a      	uxth	r2, r3
 800b72a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b72e:	801a      	strh	r2, [r3, #0]
 800b730:	e023      	b.n	800b77a <USB_EPStartXfer+0x113c>
 800b732:	463b      	mov	r3, r7
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	785b      	ldrb	r3, [r3, #1]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d11e      	bne.n	800b77a <USB_EPStartXfer+0x113c>
 800b73c:	1d3b      	adds	r3, r7, #4
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b744:	b29b      	uxth	r3, r3
 800b746:	461a      	mov	r2, r3
 800b748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b74c:	4413      	add	r3, r2
 800b74e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b752:	463b      	mov	r3, r7
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	00da      	lsls	r2, r3, #3
 800b75a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b75e:	4413      	add	r3, r2
 800b760:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b764:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b772:	801a      	strh	r2, [r3, #0]
 800b774:	e001      	b.n	800b77a <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800b776:	2301      	movs	r3, #1
 800b778:	e02e      	b.n	800b7d8 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b77a:	1d3b      	adds	r3, r7, #4
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	463b      	mov	r3, r7
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	4413      	add	r3, r2
 800b788:	881b      	ldrh	r3, [r3, #0]
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b794:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b798:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b79c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b7a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b7a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b7a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b7ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b7b0:	1d3b      	adds	r3, r7, #4
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	441a      	add	r2, r3
 800b7be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b7c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b7e2:	b480      	push	{r7}
 800b7e4:	b085      	sub	sp, #20
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
 800b7ea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	785b      	ldrb	r3, [r3, #1]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d020      	beq.n	800b836 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4413      	add	r3, r2
 800b7fe:	881b      	ldrh	r3, [r3, #0]
 800b800:	b29b      	uxth	r3, r3
 800b802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b80a:	81bb      	strh	r3, [r7, #12]
 800b80c:	89bb      	ldrh	r3, [r7, #12]
 800b80e:	f083 0310 	eor.w	r3, r3, #16
 800b812:	81bb      	strh	r3, [r7, #12]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	441a      	add	r2, r3
 800b81e:	89bb      	ldrh	r3, [r7, #12]
 800b820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b830:	b29b      	uxth	r3, r3
 800b832:	8013      	strh	r3, [r2, #0]
 800b834:	e01f      	b.n	800b876 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	881b      	ldrh	r3, [r3, #0]
 800b842:	b29b      	uxth	r3, r3
 800b844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b84c:	81fb      	strh	r3, [r7, #14]
 800b84e:	89fb      	ldrh	r3, [r7, #14]
 800b850:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b854:	81fb      	strh	r3, [r7, #14]
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	441a      	add	r2, r3
 800b860:	89fb      	ldrh	r3, [r7, #14]
 800b862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b86a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b86e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b872:	b29b      	uxth	r3, r3
 800b874:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b884:	b480      	push	{r7}
 800b886:	b087      	sub	sp, #28
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	7b1b      	ldrb	r3, [r3, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	f040 809d 	bne.w	800b9d2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	785b      	ldrb	r3, [r3, #1]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d04c      	beq.n	800b93a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	881b      	ldrh	r3, [r3, #0]
 800b8ac:	823b      	strh	r3, [r7, #16]
 800b8ae:	8a3b      	ldrh	r3, [r7, #16]
 800b8b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d01b      	beq.n	800b8f0 <USB_EPClearStall+0x6c>
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	881b      	ldrh	r3, [r3, #0]
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ce:	81fb      	strh	r3, [r7, #14]
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	441a      	add	r2, r3
 800b8da:	89fb      	ldrh	r3, [r7, #14]
 800b8dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	78db      	ldrb	r3, [r3, #3]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d06c      	beq.n	800b9d2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4413      	add	r3, r2
 800b902:	881b      	ldrh	r3, [r3, #0]
 800b904:	b29b      	uxth	r3, r3
 800b906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b90a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b90e:	81bb      	strh	r3, [r7, #12]
 800b910:	89bb      	ldrh	r3, [r7, #12]
 800b912:	f083 0320 	eor.w	r3, r3, #32
 800b916:	81bb      	strh	r3, [r7, #12]
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	441a      	add	r2, r3
 800b922:	89bb      	ldrh	r3, [r7, #12]
 800b924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b92c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b934:	b29b      	uxth	r3, r3
 800b936:	8013      	strh	r3, [r2, #0]
 800b938:	e04b      	b.n	800b9d2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	881b      	ldrh	r3, [r3, #0]
 800b946:	82fb      	strh	r3, [r7, #22]
 800b948:	8afb      	ldrh	r3, [r7, #22]
 800b94a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d01b      	beq.n	800b98a <USB_EPClearStall+0x106>
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	881b      	ldrh	r3, [r3, #0]
 800b95e:	b29b      	uxth	r3, r3
 800b960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b968:	82bb      	strh	r3, [r7, #20]
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	441a      	add	r2, r3
 800b974:	8abb      	ldrh	r3, [r7, #20]
 800b976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b97a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b97e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b986:	b29b      	uxth	r3, r3
 800b988:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4413      	add	r3, r2
 800b994:	881b      	ldrh	r3, [r3, #0]
 800b996:	b29b      	uxth	r3, r3
 800b998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b99c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9a0:	827b      	strh	r3, [r7, #18]
 800b9a2:	8a7b      	ldrh	r3, [r7, #18]
 800b9a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b9a8:	827b      	strh	r3, [r7, #18]
 800b9aa:	8a7b      	ldrh	r3, [r7, #18]
 800b9ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b9b0:	827b      	strh	r3, [r7, #18]
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	441a      	add	r2, r3
 800b9bc:	8a7b      	ldrh	r3, [r7, #18]
 800b9be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	371c      	adds	r7, #28
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b9ec:	78fb      	ldrb	r3, [r7, #3]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d103      	bne.n	800b9fa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2280      	movs	r2, #128	; 0x80
 800b9f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	370c      	adds	r7, #12
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b085      	sub	sp, #20
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ba48:	68fb      	ldr	r3, [r7, #12]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3714      	adds	r7, #20
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b08d      	sub	sp, #52	; 0x34
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	60f8      	str	r0, [r7, #12]
 800ba5e:	60b9      	str	r1, [r7, #8]
 800ba60:	4611      	mov	r1, r2
 800ba62:	461a      	mov	r2, r3
 800ba64:	460b      	mov	r3, r1
 800ba66:	80fb      	strh	r3, [r7, #6]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ba6c:	88bb      	ldrh	r3, [r7, #4]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	085b      	lsrs	r3, r3, #1
 800ba72:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ba7c:	88fa      	ldrh	r2, [r7, #6]
 800ba7e:	69fb      	ldr	r3, [r7, #28]
 800ba80:	4413      	add	r3, r2
 800ba82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba86:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ba88:	6a3b      	ldr	r3, [r7, #32]
 800ba8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba8c:	e01b      	b.n	800bac6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	3301      	adds	r3, #1
 800ba98:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ba9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	021b      	lsls	r3, r3, #8
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	461a      	mov	r2, r3
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	4313      	orrs	r3, r2
 800baaa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	b29a      	uxth	r2, r3
 800bab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab6:	3302      	adds	r3, #2
 800bab8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	3301      	adds	r3, #1
 800babe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800bac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac2:	3b01      	subs	r3, #1
 800bac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1e0      	bne.n	800ba8e <USB_WritePMA+0x38>
  }
}
 800bacc:	bf00      	nop
 800bace:	bf00      	nop
 800bad0:	3734      	adds	r7, #52	; 0x34
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bada:	b480      	push	{r7}
 800badc:	b08b      	sub	sp, #44	; 0x2c
 800bade:	af00      	add	r7, sp, #0
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	60b9      	str	r1, [r7, #8]
 800bae4:	4611      	mov	r1, r2
 800bae6:	461a      	mov	r2, r3
 800bae8:	460b      	mov	r3, r1
 800baea:	80fb      	strh	r3, [r7, #6]
 800baec:	4613      	mov	r3, r2
 800baee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800baf0:	88bb      	ldrh	r3, [r7, #4]
 800baf2:	085b      	lsrs	r3, r3, #1
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb00:	88fa      	ldrh	r2, [r7, #6]
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	4413      	add	r3, r2
 800bb06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb0a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	627b      	str	r3, [r7, #36]	; 0x24
 800bb10:	e018      	b.n	800bb44 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bb12:	6a3b      	ldr	r3, [r7, #32]
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	3302      	adds	r3, #2
 800bb1e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	0a1b      	lsrs	r3, r3, #8
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	3b01      	subs	r3, #1
 800bb42:	627b      	str	r3, [r7, #36]	; 0x24
 800bb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1e3      	bne.n	800bb12 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bb4a:	88bb      	ldrh	r3, [r7, #4]
 800bb4c:	f003 0301 	and.w	r3, r3, #1
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d007      	beq.n	800bb66 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800bb56:	6a3b      	ldr	r3, [r7, #32]
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	701a      	strb	r2, [r3, #0]
  }
}
 800bb66:	bf00      	nop
 800bb68:	372c      	adds	r7, #44	; 0x2c
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr

0800bb72 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b084      	sub	sp, #16
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb7e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bb82:	f006 fced 	bl	8012560 <USBD_static_malloc>
 800bb86:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d105      	bne.n	800bb9a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bb96:	2302      	movs	r3, #2
 800bb98:	e066      	b.n	800bc68 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	7c1b      	ldrb	r3, [r3, #16]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d119      	bne.n	800bbde <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbae:	2202      	movs	r2, #2
 800bbb0:	2181      	movs	r1, #129	; 0x81
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f006 fb79 	bl	80122aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f006 fb6f 	bl	80122aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2210      	movs	r2, #16
 800bbd8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bbdc:	e016      	b.n	800bc0c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbde:	2340      	movs	r3, #64	; 0x40
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	2181      	movs	r1, #129	; 0x81
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f006 fb60 	bl	80122aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2201      	movs	r2, #1
 800bbee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbf0:	2340      	movs	r3, #64	; 0x40
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	2101      	movs	r1, #1
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f006 fb57 	bl	80122aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2210      	movs	r2, #16
 800bc08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc0c:	2308      	movs	r3, #8
 800bc0e:	2203      	movs	r2, #3
 800bc10:	2182      	movs	r1, #130	; 0x82
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f006 fb49 	bl	80122aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	7c1b      	ldrb	r3, [r3, #16]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d109      	bne.n	800bc56 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc4c:	2101      	movs	r1, #1
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f006 fc1b 	bl	801248a <USBD_LL_PrepareReceive>
 800bc54:	e007      	b.n	800bc66 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc5c:	2340      	movs	r3, #64	; 0x40
 800bc5e:	2101      	movs	r1, #1
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f006 fc12 	bl	801248a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bc7c:	2181      	movs	r1, #129	; 0x81
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f006 fb39 	bl	80122f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bc8a:	2101      	movs	r1, #1
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f006 fb32 	bl	80122f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bc9a:	2182      	movs	r1, #130	; 0x82
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f006 fb2a 	bl	80122f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d00e      	beq.n	800bcda <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bccc:	4618      	mov	r0, r3
 800bcce:	f006 fc55 	bl	801257c <USBD_static_free>
    pdev->pClassData = NULL;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcf4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d101      	bne.n	800bd0c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	e0af      	b.n	800be6c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d03f      	beq.n	800bd98 <USBD_CDC_Setup+0xb4>
 800bd18:	2b20      	cmp	r3, #32
 800bd1a:	f040 809f 	bne.w	800be5c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	88db      	ldrh	r3, [r3, #6]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d02e      	beq.n	800bd84 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	b25b      	sxtb	r3, r3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	da16      	bge.n	800bd5e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bd3c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd3e:	683a      	ldr	r2, [r7, #0]
 800bd40:	88d2      	ldrh	r2, [r2, #6]
 800bd42:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	88db      	ldrh	r3, [r3, #6]
 800bd48:	2b07      	cmp	r3, #7
 800bd4a:	bf28      	it	cs
 800bd4c:	2307      	movcs	r3, #7
 800bd4e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	89fa      	ldrh	r2, [r7, #14]
 800bd54:	4619      	mov	r1, r3
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f001 fa9f 	bl	800d29a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bd5c:	e085      	b.n	800be6a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	785a      	ldrb	r2, [r3, #1]
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	88db      	ldrh	r3, [r3, #6]
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bd74:	6939      	ldr	r1, [r7, #16]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	88db      	ldrh	r3, [r3, #6]
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f001 fab8 	bl	800d2f2 <USBD_CtlPrepareRx>
      break;
 800bd82:	e072      	b.n	800be6a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	683a      	ldr	r2, [r7, #0]
 800bd8e:	7850      	ldrb	r0, [r2, #1]
 800bd90:	2200      	movs	r2, #0
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	4798      	blx	r3
      break;
 800bd96:	e068      	b.n	800be6a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	785b      	ldrb	r3, [r3, #1]
 800bd9c:	2b0b      	cmp	r3, #11
 800bd9e:	d852      	bhi.n	800be46 <USBD_CDC_Setup+0x162>
 800bda0:	a201      	add	r2, pc, #4	; (adr r2, 800bda8 <USBD_CDC_Setup+0xc4>)
 800bda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda6:	bf00      	nop
 800bda8:	0800bdd9 	.word	0x0800bdd9
 800bdac:	0800be55 	.word	0x0800be55
 800bdb0:	0800be47 	.word	0x0800be47
 800bdb4:	0800be47 	.word	0x0800be47
 800bdb8:	0800be47 	.word	0x0800be47
 800bdbc:	0800be47 	.word	0x0800be47
 800bdc0:	0800be47 	.word	0x0800be47
 800bdc4:	0800be47 	.word	0x0800be47
 800bdc8:	0800be47 	.word	0x0800be47
 800bdcc:	0800be47 	.word	0x0800be47
 800bdd0:	0800be03 	.word	0x0800be03
 800bdd4:	0800be2d 	.word	0x0800be2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d107      	bne.n	800bdf4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bde4:	f107 030a 	add.w	r3, r7, #10
 800bde8:	2202      	movs	r2, #2
 800bdea:	4619      	mov	r1, r3
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f001 fa54 	bl	800d29a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bdf2:	e032      	b.n	800be5a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f001 f9de 	bl	800d1b8 <USBD_CtlError>
            ret = USBD_FAIL;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	75fb      	strb	r3, [r7, #23]
          break;
 800be00:	e02b      	b.n	800be5a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	d107      	bne.n	800be1e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800be0e:	f107 030d 	add.w	r3, r7, #13
 800be12:	2201      	movs	r2, #1
 800be14:	4619      	mov	r1, r3
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f001 fa3f 	bl	800d29a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be1c:	e01d      	b.n	800be5a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f001 f9c9 	bl	800d1b8 <USBD_CtlError>
            ret = USBD_FAIL;
 800be26:	2303      	movs	r3, #3
 800be28:	75fb      	strb	r3, [r7, #23]
          break;
 800be2a:	e016      	b.n	800be5a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be32:	b2db      	uxtb	r3, r3
 800be34:	2b03      	cmp	r3, #3
 800be36:	d00f      	beq.n	800be58 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f001 f9bc 	bl	800d1b8 <USBD_CtlError>
            ret = USBD_FAIL;
 800be40:	2303      	movs	r3, #3
 800be42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800be44:	e008      	b.n	800be58 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f001 f9b5 	bl	800d1b8 <USBD_CtlError>
          ret = USBD_FAIL;
 800be4e:	2303      	movs	r3, #3
 800be50:	75fb      	strb	r3, [r7, #23]
          break;
 800be52:	e002      	b.n	800be5a <USBD_CDC_Setup+0x176>
          break;
 800be54:	bf00      	nop
 800be56:	e008      	b.n	800be6a <USBD_CDC_Setup+0x186>
          break;
 800be58:	bf00      	nop
      }
      break;
 800be5a:	e006      	b.n	800be6a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f001 f9aa 	bl	800d1b8 <USBD_CtlError>
      ret = USBD_FAIL;
 800be64:	2303      	movs	r3, #3
 800be66:	75fb      	strb	r3, [r7, #23]
      break;
 800be68:	bf00      	nop
  }

  return (uint8_t)ret;
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3718      	adds	r7, #24
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	460b      	mov	r3, r1
 800be7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d101      	bne.n	800be96 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be92:	2303      	movs	r3, #3
 800be94:	e04f      	b.n	800bf36 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800be9e:	78fa      	ldrb	r2, [r7, #3]
 800bea0:	6879      	ldr	r1, [r7, #4]
 800bea2:	4613      	mov	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4413      	add	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	440b      	add	r3, r1
 800beac:	3318      	adds	r3, #24
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d029      	beq.n	800bf08 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800beb4:	78fa      	ldrb	r2, [r7, #3]
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	4613      	mov	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4413      	add	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	440b      	add	r3, r1
 800bec2:	3318      	adds	r3, #24
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	78f9      	ldrb	r1, [r7, #3]
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	460b      	mov	r3, r1
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	440b      	add	r3, r1
 800bed0:	00db      	lsls	r3, r3, #3
 800bed2:	4403      	add	r3, r0
 800bed4:	3338      	adds	r3, #56	; 0x38
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	fbb2 f1f3 	udiv	r1, r2, r3
 800bedc:	fb03 f301 	mul.w	r3, r3, r1
 800bee0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d110      	bne.n	800bf08 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bee6:	78fa      	ldrb	r2, [r7, #3]
 800bee8:	6879      	ldr	r1, [r7, #4]
 800beea:	4613      	mov	r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	4413      	add	r3, r2
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	440b      	add	r3, r1
 800bef4:	3318      	adds	r3, #24
 800bef6:	2200      	movs	r2, #0
 800bef8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800befa:	78f9      	ldrb	r1, [r7, #3]
 800befc:	2300      	movs	r3, #0
 800befe:	2200      	movs	r2, #0
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f006 faa1 	bl	8012448 <USBD_LL_Transmit>
 800bf06:	e015      	b.n	800bf34 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf16:	691b      	ldr	r3, [r3, #16]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00b      	beq.n	800bf34 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bf30:	78fa      	ldrb	r2, [r7, #3]
 800bf32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b084      	sub	sp, #16
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	460b      	mov	r3, r1
 800bf48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d101      	bne.n	800bf60 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	e015      	b.n	800bf8c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf60:	78fb      	ldrb	r3, [r7, #3]
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f006 fab1 	bl	80124cc <USBD_LL_GetRxDataSize>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf86:	4611      	mov	r1, r2
 800bf88:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfa2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d101      	bne.n	800bfae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bfaa:	2303      	movs	r3, #3
 800bfac:	e01b      	b.n	800bfe6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d015      	beq.n	800bfe4 <USBD_CDC_EP0_RxReady+0x50>
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bfbe:	2bff      	cmp	r3, #255	; 0xff
 800bfc0:	d010      	beq.n	800bfe4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bfd0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfd8:	b292      	uxth	r2, r2
 800bfda:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	22ff      	movs	r2, #255	; 0xff
 800bfe0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
	...

0800bff0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2243      	movs	r2, #67	; 0x43
 800bffc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bffe:	4b03      	ldr	r3, [pc, #12]	; (800c00c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c000:	4618      	mov	r0, r3
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	200000a4 	.word	0x200000a4

0800c010 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2243      	movs	r2, #67	; 0x43
 800c01c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c01e:	4b03      	ldr	r3, [pc, #12]	; (800c02c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c020:	4618      	mov	r0, r3
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	20000060 	.word	0x20000060

0800c030 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2243      	movs	r2, #67	; 0x43
 800c03c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c03e:	4b03      	ldr	r3, [pc, #12]	; (800c04c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c040:	4618      	mov	r0, r3
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	200000e8 	.word	0x200000e8

0800c050 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	220a      	movs	r2, #10
 800c05c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c05e:	4b03      	ldr	r3, [pc, #12]	; (800c06c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c060:	4618      	mov	r0, r3
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr
 800c06c:	2000001c 	.word	0x2000001c

0800c070 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d101      	bne.n	800c084 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c080:	2303      	movs	r3, #3
 800c082:	e004      	b.n	800c08e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c09a:	b480      	push	{r7}
 800c09c:	b087      	sub	sp, #28
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	60f8      	str	r0, [r7, #12]
 800c0a2:	60b9      	str	r1, [r7, #8]
 800c0a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c0b4:	2303      	movs	r3, #3
 800c0b6:	e008      	b.n	800c0ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	371c      	adds	r7, #28
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c0d6:	b480      	push	{r7}
 800c0d8:	b085      	sub	sp, #20
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	e004      	b.n	800c0fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3714      	adds	r7, #20
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c116:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d101      	bne.n	800c126 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c122:	2303      	movs	r3, #3
 800c124:	e016      	b.n	800c154 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	7c1b      	ldrb	r3, [r3, #16]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d109      	bne.n	800c142 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c134:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c138:	2101      	movs	r1, #1
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f006 f9a5 	bl	801248a <USBD_LL_PrepareReceive>
 800c140:	e007      	b.n	800c152 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c148:	2340      	movs	r3, #64	; 0x40
 800c14a:	2101      	movs	r1, #1
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f006 f99c 	bl	801248a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	4613      	mov	r3, r2
 800c168:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d101      	bne.n	800c174 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c170:	2303      	movs	r3, #3
 800c172:	e01f      	b.n	800c1b4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2200      	movs	r2, #0
 800c188:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d003      	beq.n	800c19a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2201      	movs	r2, #1
 800c19e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	79fa      	ldrb	r2, [r7, #7]
 800c1a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f006 f801 	bl	80121b0 <USBD_LL_Init>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3718      	adds	r7, #24
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d101      	bne.n	800c1d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	e016      	b.n	800c202 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00b      	beq.n	800c200 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f0:	f107 020e 	add.w	r2, r7, #14
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	4798      	blx	r3
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b082      	sub	sp, #8
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f006 f82e 	bl	8012274 <USBD_LL_Start>
 800c218:	4603      	mov	r3, r0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3708      	adds	r7, #8
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c222:	b480      	push	{r7}
 800c224:	b083      	sub	sp, #12
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	460b      	mov	r3, r1
 800c242:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c244:	2303      	movs	r3, #3
 800c246:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d009      	beq.n	800c266 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	78fa      	ldrb	r2, [r7, #3]
 800c25c:	4611      	mov	r1, r2
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	4798      	blx	r3
 800c262:	4603      	mov	r3, r0
 800c264:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c266:	7bfb      	ldrb	r3, [r7, #15]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c282:	2b00      	cmp	r3, #0
 800c284:	d007      	beq.n	800c296 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	78fa      	ldrb	r2, [r7, #3]
 800c290:	4611      	mov	r1, r2
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	4798      	blx	r3
  }

  return USBD_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 ff46 	bl	800d144 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c2d4:	f003 031f 	and.w	r3, r3, #31
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	d01a      	beq.n	800c312 <USBD_LL_SetupStage+0x72>
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d822      	bhi.n	800c326 <USBD_LL_SetupStage+0x86>
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d002      	beq.n	800c2ea <USBD_LL_SetupStage+0x4a>
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d00a      	beq.n	800c2fe <USBD_LL_SetupStage+0x5e>
 800c2e8:	e01d      	b.n	800c326 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 f9ee 	bl	800c6d4 <USBD_StdDevReq>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c2fc:	e020      	b.n	800c340 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fa52 	bl	800c7b0 <USBD_StdItfReq>
 800c30c:	4603      	mov	r3, r0
 800c30e:	73fb      	strb	r3, [r7, #15]
      break;
 800c310:	e016      	b.n	800c340 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c318:	4619      	mov	r1, r3
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fa91 	bl	800c842 <USBD_StdEPReq>
 800c320:	4603      	mov	r3, r0
 800c322:	73fb      	strb	r3, [r7, #15]
      break;
 800c324:	e00c      	b.n	800c340 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c32c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c330:	b2db      	uxtb	r3, r3
 800c332:	4619      	mov	r1, r3
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f005 fffd 	bl	8012334 <USBD_LL_StallEP>
 800c33a:	4603      	mov	r3, r0
 800c33c:	73fb      	strb	r3, [r7, #15]
      break;
 800c33e:	bf00      	nop
  }

  return ret;
 800c340:	7bfb      	ldrb	r3, [r7, #15]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b086      	sub	sp, #24
 800c34e:	af00      	add	r7, sp, #0
 800c350:	60f8      	str	r0, [r7, #12]
 800c352:	460b      	mov	r3, r1
 800c354:	607a      	str	r2, [r7, #4]
 800c356:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c358:	7afb      	ldrb	r3, [r7, #11]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d138      	bne.n	800c3d0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c364:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c36c:	2b03      	cmp	r3, #3
 800c36e:	d14a      	bne.n	800c406 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	689a      	ldr	r2, [r3, #8]
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d913      	bls.n	800c3a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	689a      	ldr	r2, [r3, #8]
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	1ad2      	subs	r2, r2, r3
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	68da      	ldr	r2, [r3, #12]
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	4293      	cmp	r3, r2
 800c394:	bf28      	it	cs
 800c396:	4613      	movcs	r3, r2
 800c398:	461a      	mov	r2, r3
 800c39a:	6879      	ldr	r1, [r7, #4]
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f000 ffc5 	bl	800d32c <USBD_CtlContinueRx>
 800c3a2:	e030      	b.n	800c406 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	2b03      	cmp	r3, #3
 800c3ae:	d10b      	bne.n	800c3c8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d005      	beq.n	800c3c8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f000 ffc0 	bl	800d34e <USBD_CtlSendStatus>
 800c3ce:	e01a      	b.n	800c406 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d114      	bne.n	800c406 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3e2:	699b      	ldr	r3, [r3, #24]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00e      	beq.n	800c406 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ee:	699b      	ldr	r3, [r3, #24]
 800c3f0:	7afa      	ldrb	r2, [r7, #11]
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	4798      	blx	r3
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c3fc:	7dfb      	ldrb	r3, [r7, #23]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d001      	beq.n	800c406 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c402:	7dfb      	ldrb	r3, [r7, #23]
 800c404:	e000      	b.n	800c408 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3718      	adds	r7, #24
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	460b      	mov	r3, r1
 800c41a:	607a      	str	r2, [r7, #4]
 800c41c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c41e:	7afb      	ldrb	r3, [r7, #11]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d16b      	bne.n	800c4fc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	3314      	adds	r3, #20
 800c428:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c430:	2b02      	cmp	r3, #2
 800c432:	d156      	bne.n	800c4e2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	689a      	ldr	r2, [r3, #8]
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d914      	bls.n	800c46a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	689a      	ldr	r2, [r3, #8]
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	1ad2      	subs	r2, r2, r3
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	461a      	mov	r2, r3
 800c454:	6879      	ldr	r1, [r7, #4]
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f000 ff3a 	bl	800d2d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c45c:	2300      	movs	r3, #0
 800c45e:	2200      	movs	r2, #0
 800c460:	2100      	movs	r1, #0
 800c462:	68f8      	ldr	r0, [r7, #12]
 800c464:	f006 f811 	bl	801248a <USBD_LL_PrepareReceive>
 800c468:	e03b      	b.n	800c4e2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	68da      	ldr	r2, [r3, #12]
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	429a      	cmp	r2, r3
 800c474:	d11c      	bne.n	800c4b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	685a      	ldr	r2, [r3, #4]
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c47e:	429a      	cmp	r2, r3
 800c480:	d316      	bcc.n	800c4b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	685a      	ldr	r2, [r3, #4]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d20f      	bcs.n	800c4b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c490:	2200      	movs	r2, #0
 800c492:	2100      	movs	r1, #0
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f000 ff1b 	bl	800d2d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f005 ffee 	bl	801248a <USBD_LL_PrepareReceive>
 800c4ae:	e018      	b.n	800c4e2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b03      	cmp	r3, #3
 800c4ba:	d10b      	bne.n	800c4d4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d005      	beq.n	800c4d4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4d4:	2180      	movs	r1, #128	; 0x80
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f005 ff2c 	bl	8012334 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f000 ff49 	bl	800d374 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d122      	bne.n	800c532 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f7ff fe98 	bl	800c222 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c4fa:	e01a      	b.n	800c532 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c502:	b2db      	uxtb	r3, r3
 800c504:	2b03      	cmp	r3, #3
 800c506:	d114      	bne.n	800c532 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c50e:	695b      	ldr	r3, [r3, #20]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00e      	beq.n	800c532 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c51a:	695b      	ldr	r3, [r3, #20]
 800c51c:	7afa      	ldrb	r2, [r7, #11]
 800c51e:	4611      	mov	r1, r2
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	4798      	blx	r3
 800c524:	4603      	mov	r3, r0
 800c526:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c528:	7dfb      	ldrb	r3, [r7, #23]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d001      	beq.n	800c532 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c52e:	7dfb      	ldrb	r3, [r7, #23]
 800c530:	e000      	b.n	800c534 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c532:	2300      	movs	r3, #0
}
 800c534:	4618      	mov	r0, r3
 800c536:	3718      	adds	r7, #24
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2200      	movs	r2, #0
 800c550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d101      	bne.n	800c570 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c56c:	2303      	movs	r3, #3
 800c56e:	e02f      	b.n	800c5d0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00f      	beq.n	800c59a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d009      	beq.n	800c59a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	6852      	ldr	r2, [r2, #4]
 800c592:	b2d2      	uxtb	r2, r2
 800c594:	4611      	mov	r1, r2
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c59a:	2340      	movs	r3, #64	; 0x40
 800c59c:	2200      	movs	r2, #0
 800c59e:	2100      	movs	r1, #0
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f005 fe82 	bl	80122aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2240      	movs	r2, #64	; 0x40
 800c5b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5b6:	2340      	movs	r3, #64	; 0x40
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	2180      	movs	r1, #128	; 0x80
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f005 fe74 	bl	80122aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2240      	movs	r2, #64	; 0x40
 800c5cc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	78fa      	ldrb	r2, [r7, #3]
 800c5e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c606:	b2da      	uxtb	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2204      	movs	r2, #4
 800c612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c632:	b2db      	uxtb	r3, r3
 800c634:	2b04      	cmp	r3, #4
 800c636:	d106      	bne.n	800c646 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c662:	2b00      	cmp	r3, #0
 800c664:	d101      	bne.n	800c66a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c666:	2303      	movs	r3, #3
 800c668:	e012      	b.n	800c690 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c670:	b2db      	uxtb	r3, r3
 800c672:	2b03      	cmp	r3, #3
 800c674:	d10b      	bne.n	800c68e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c67c:	69db      	ldr	r3, [r3, #28]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d005      	beq.n	800c68e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c688:	69db      	ldr	r3, [r3, #28]
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c68e:	2300      	movs	r3, #0
}
 800c690:	4618      	mov	r0, r3
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c698:	b480      	push	{r7}
 800c69a:	b087      	sub	sp, #28
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c6b6:	8a3b      	ldrh	r3, [r7, #16]
 800c6b8:	021b      	lsls	r3, r3, #8
 800c6ba:	b21a      	sxth	r2, r3
 800c6bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	b21b      	sxth	r3, r3
 800c6c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c6c6:	89fb      	ldrh	r3, [r7, #14]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	371c      	adds	r7, #28
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6ea:	2b40      	cmp	r3, #64	; 0x40
 800c6ec:	d005      	beq.n	800c6fa <USBD_StdDevReq+0x26>
 800c6ee:	2b40      	cmp	r3, #64	; 0x40
 800c6f0:	d853      	bhi.n	800c79a <USBD_StdDevReq+0xc6>
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00b      	beq.n	800c70e <USBD_StdDevReq+0x3a>
 800c6f6:	2b20      	cmp	r3, #32
 800c6f8:	d14f      	bne.n	800c79a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	4798      	blx	r3
 800c708:	4603      	mov	r3, r0
 800c70a:	73fb      	strb	r3, [r7, #15]
      break;
 800c70c:	e04a      	b.n	800c7a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	785b      	ldrb	r3, [r3, #1]
 800c712:	2b09      	cmp	r3, #9
 800c714:	d83b      	bhi.n	800c78e <USBD_StdDevReq+0xba>
 800c716:	a201      	add	r2, pc, #4	; (adr r2, 800c71c <USBD_StdDevReq+0x48>)
 800c718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c71c:	0800c771 	.word	0x0800c771
 800c720:	0800c785 	.word	0x0800c785
 800c724:	0800c78f 	.word	0x0800c78f
 800c728:	0800c77b 	.word	0x0800c77b
 800c72c:	0800c78f 	.word	0x0800c78f
 800c730:	0800c74f 	.word	0x0800c74f
 800c734:	0800c745 	.word	0x0800c745
 800c738:	0800c78f 	.word	0x0800c78f
 800c73c:	0800c767 	.word	0x0800c767
 800c740:	0800c759 	.word	0x0800c759
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f9de 	bl	800cb08 <USBD_GetDescriptor>
          break;
 800c74c:	e024      	b.n	800c798 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c74e:	6839      	ldr	r1, [r7, #0]
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 fb6d 	bl	800ce30 <USBD_SetAddress>
          break;
 800c756:	e01f      	b.n	800c798 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c758:	6839      	ldr	r1, [r7, #0]
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 fbac 	bl	800ceb8 <USBD_SetConfig>
 800c760:	4603      	mov	r3, r0
 800c762:	73fb      	strb	r3, [r7, #15]
          break;
 800c764:	e018      	b.n	800c798 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 fc4b 	bl	800d004 <USBD_GetConfig>
          break;
 800c76e:	e013      	b.n	800c798 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fc7c 	bl	800d070 <USBD_GetStatus>
          break;
 800c778:	e00e      	b.n	800c798 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c77a:	6839      	ldr	r1, [r7, #0]
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 fcab 	bl	800d0d8 <USBD_SetFeature>
          break;
 800c782:	e009      	b.n	800c798 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 fcba 	bl	800d100 <USBD_ClrFeature>
          break;
 800c78c:	e004      	b.n	800c798 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c78e:	6839      	ldr	r1, [r7, #0]
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 fd11 	bl	800d1b8 <USBD_CtlError>
          break;
 800c796:	bf00      	nop
      }
      break;
 800c798:	e004      	b.n	800c7a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c79a:	6839      	ldr	r1, [r7, #0]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 fd0b 	bl	800d1b8 <USBD_CtlError>
      break;
 800c7a2:	bf00      	nop
  }

  return ret;
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop

0800c7b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7c6:	2b40      	cmp	r3, #64	; 0x40
 800c7c8:	d005      	beq.n	800c7d6 <USBD_StdItfReq+0x26>
 800c7ca:	2b40      	cmp	r3, #64	; 0x40
 800c7cc:	d82f      	bhi.n	800c82e <USBD_StdItfReq+0x7e>
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d001      	beq.n	800c7d6 <USBD_StdItfReq+0x26>
 800c7d2:	2b20      	cmp	r3, #32
 800c7d4:	d12b      	bne.n	800c82e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d81d      	bhi.n	800c820 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	889b      	ldrh	r3, [r3, #4]
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d813      	bhi.n	800c816 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	6839      	ldr	r1, [r7, #0]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	4798      	blx	r3
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	88db      	ldrh	r3, [r3, #6]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d110      	bne.n	800c82a <USBD_StdItfReq+0x7a>
 800c808:	7bfb      	ldrb	r3, [r7, #15]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d10d      	bne.n	800c82a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fd9d 	bl	800d34e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c814:	e009      	b.n	800c82a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c816:	6839      	ldr	r1, [r7, #0]
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fccd 	bl	800d1b8 <USBD_CtlError>
          break;
 800c81e:	e004      	b.n	800c82a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c820:	6839      	ldr	r1, [r7, #0]
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 fcc8 	bl	800d1b8 <USBD_CtlError>
          break;
 800c828:	e000      	b.n	800c82c <USBD_StdItfReq+0x7c>
          break;
 800c82a:	bf00      	nop
      }
      break;
 800c82c:	e004      	b.n	800c838 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c82e:	6839      	ldr	r1, [r7, #0]
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fcc1 	bl	800d1b8 <USBD_CtlError>
      break;
 800c836:	bf00      	nop
  }

  return ret;
 800c838:	7bfb      	ldrb	r3, [r7, #15]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b084      	sub	sp, #16
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
 800c84a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	889b      	ldrh	r3, [r3, #4]
 800c854:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c85e:	2b40      	cmp	r3, #64	; 0x40
 800c860:	d007      	beq.n	800c872 <USBD_StdEPReq+0x30>
 800c862:	2b40      	cmp	r3, #64	; 0x40
 800c864:	f200 8145 	bhi.w	800caf2 <USBD_StdEPReq+0x2b0>
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00c      	beq.n	800c886 <USBD_StdEPReq+0x44>
 800c86c:	2b20      	cmp	r3, #32
 800c86e:	f040 8140 	bne.w	800caf2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	6839      	ldr	r1, [r7, #0]
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	4798      	blx	r3
 800c880:	4603      	mov	r3, r0
 800c882:	73fb      	strb	r3, [r7, #15]
      break;
 800c884:	e13a      	b.n	800cafc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	785b      	ldrb	r3, [r3, #1]
 800c88a:	2b03      	cmp	r3, #3
 800c88c:	d007      	beq.n	800c89e <USBD_StdEPReq+0x5c>
 800c88e:	2b03      	cmp	r3, #3
 800c890:	f300 8129 	bgt.w	800cae6 <USBD_StdEPReq+0x2a4>
 800c894:	2b00      	cmp	r3, #0
 800c896:	d07f      	beq.n	800c998 <USBD_StdEPReq+0x156>
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d03c      	beq.n	800c916 <USBD_StdEPReq+0xd4>
 800c89c:	e123      	b.n	800cae6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d002      	beq.n	800c8b0 <USBD_StdEPReq+0x6e>
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d016      	beq.n	800c8dc <USBD_StdEPReq+0x9a>
 800c8ae:	e02c      	b.n	800c90a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8b0:	7bbb      	ldrb	r3, [r7, #14]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00d      	beq.n	800c8d2 <USBD_StdEPReq+0x90>
 800c8b6:	7bbb      	ldrb	r3, [r7, #14]
 800c8b8:	2b80      	cmp	r3, #128	; 0x80
 800c8ba:	d00a      	beq.n	800c8d2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8bc:	7bbb      	ldrb	r3, [r7, #14]
 800c8be:	4619      	mov	r1, r3
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f005 fd37 	bl	8012334 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8c6:	2180      	movs	r1, #128	; 0x80
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f005 fd33 	bl	8012334 <USBD_LL_StallEP>
 800c8ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c8d0:	e020      	b.n	800c914 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c8d2:	6839      	ldr	r1, [r7, #0]
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 fc6f 	bl	800d1b8 <USBD_CtlError>
              break;
 800c8da:	e01b      	b.n	800c914 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	885b      	ldrh	r3, [r3, #2]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d10e      	bne.n	800c902 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c8e4:	7bbb      	ldrb	r3, [r7, #14]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00b      	beq.n	800c902 <USBD_StdEPReq+0xc0>
 800c8ea:	7bbb      	ldrb	r3, [r7, #14]
 800c8ec:	2b80      	cmp	r3, #128	; 0x80
 800c8ee:	d008      	beq.n	800c902 <USBD_StdEPReq+0xc0>
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	88db      	ldrh	r3, [r3, #6]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d104      	bne.n	800c902 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8f8:	7bbb      	ldrb	r3, [r7, #14]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f005 fd19 	bl	8012334 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 fd23 	bl	800d34e <USBD_CtlSendStatus>

              break;
 800c908:	e004      	b.n	800c914 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c90a:	6839      	ldr	r1, [r7, #0]
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fc53 	bl	800d1b8 <USBD_CtlError>
              break;
 800c912:	bf00      	nop
          }
          break;
 800c914:	e0ec      	b.n	800caf0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d002      	beq.n	800c928 <USBD_StdEPReq+0xe6>
 800c922:	2b03      	cmp	r3, #3
 800c924:	d016      	beq.n	800c954 <USBD_StdEPReq+0x112>
 800c926:	e030      	b.n	800c98a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c928:	7bbb      	ldrb	r3, [r7, #14]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00d      	beq.n	800c94a <USBD_StdEPReq+0x108>
 800c92e:	7bbb      	ldrb	r3, [r7, #14]
 800c930:	2b80      	cmp	r3, #128	; 0x80
 800c932:	d00a      	beq.n	800c94a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c934:	7bbb      	ldrb	r3, [r7, #14]
 800c936:	4619      	mov	r1, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f005 fcfb 	bl	8012334 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c93e:	2180      	movs	r1, #128	; 0x80
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f005 fcf7 	bl	8012334 <USBD_LL_StallEP>
 800c946:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c948:	e025      	b.n	800c996 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c94a:	6839      	ldr	r1, [r7, #0]
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 fc33 	bl	800d1b8 <USBD_CtlError>
              break;
 800c952:	e020      	b.n	800c996 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	885b      	ldrh	r3, [r3, #2]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d11b      	bne.n	800c994 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c95c:	7bbb      	ldrb	r3, [r7, #14]
 800c95e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c962:	2b00      	cmp	r3, #0
 800c964:	d004      	beq.n	800c970 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c966:	7bbb      	ldrb	r3, [r7, #14]
 800c968:	4619      	mov	r1, r3
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f005 fd01 	bl	8012372 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 fcec 	bl	800d34e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	4798      	blx	r3
 800c984:	4603      	mov	r3, r0
 800c986:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c988:	e004      	b.n	800c994 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c98a:	6839      	ldr	r1, [r7, #0]
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 fc13 	bl	800d1b8 <USBD_CtlError>
              break;
 800c992:	e000      	b.n	800c996 <USBD_StdEPReq+0x154>
              break;
 800c994:	bf00      	nop
          }
          break;
 800c996:	e0ab      	b.n	800caf0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	2b02      	cmp	r3, #2
 800c9a2:	d002      	beq.n	800c9aa <USBD_StdEPReq+0x168>
 800c9a4:	2b03      	cmp	r3, #3
 800c9a6:	d032      	beq.n	800ca0e <USBD_StdEPReq+0x1cc>
 800c9a8:	e097      	b.n	800cada <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9aa:	7bbb      	ldrb	r3, [r7, #14]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d007      	beq.n	800c9c0 <USBD_StdEPReq+0x17e>
 800c9b0:	7bbb      	ldrb	r3, [r7, #14]
 800c9b2:	2b80      	cmp	r3, #128	; 0x80
 800c9b4:	d004      	beq.n	800c9c0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fbfd 	bl	800d1b8 <USBD_CtlError>
                break;
 800c9be:	e091      	b.n	800cae4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	da0b      	bge.n	800c9e0 <USBD_StdEPReq+0x19e>
 800c9c8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	4413      	add	r3, r2
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	3310      	adds	r3, #16
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	4413      	add	r3, r2
 800c9dc:	3304      	adds	r3, #4
 800c9de:	e00b      	b.n	800c9f8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c9e0:	7bbb      	ldrb	r3, [r7, #14]
 800c9e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	3304      	adds	r3, #4
 800c9f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	2202      	movs	r2, #2
 800ca04:	4619      	mov	r1, r3
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fc47 	bl	800d29a <USBD_CtlSendData>
              break;
 800ca0c:	e06a      	b.n	800cae4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ca0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	da11      	bge.n	800ca3a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca16:	7bbb      	ldrb	r3, [r7, #14]
 800ca18:	f003 020f 	and.w	r2, r3, #15
 800ca1c:	6879      	ldr	r1, [r7, #4]
 800ca1e:	4613      	mov	r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	4413      	add	r3, r2
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	440b      	add	r3, r1
 800ca28:	3324      	adds	r3, #36	; 0x24
 800ca2a:	881b      	ldrh	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d117      	bne.n	800ca60 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ca30:	6839      	ldr	r1, [r7, #0]
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 fbc0 	bl	800d1b8 <USBD_CtlError>
                  break;
 800ca38:	e054      	b.n	800cae4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca3a:	7bbb      	ldrb	r3, [r7, #14]
 800ca3c:	f003 020f 	and.w	r2, r3, #15
 800ca40:	6879      	ldr	r1, [r7, #4]
 800ca42:	4613      	mov	r3, r2
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	4413      	add	r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	440b      	add	r3, r1
 800ca4c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d104      	bne.n	800ca60 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ca56:	6839      	ldr	r1, [r7, #0]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 fbad 	bl	800d1b8 <USBD_CtlError>
                  break;
 800ca5e:	e041      	b.n	800cae4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	da0b      	bge.n	800ca80 <USBD_StdEPReq+0x23e>
 800ca68:	7bbb      	ldrb	r3, [r7, #14]
 800ca6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca6e:	4613      	mov	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	3310      	adds	r3, #16
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	e00b      	b.n	800ca98 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca80:	7bbb      	ldrb	r3, [r7, #14]
 800ca82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca86:	4613      	mov	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4413      	add	r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	4413      	add	r3, r2
 800ca96:	3304      	adds	r3, #4
 800ca98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ca9a:	7bbb      	ldrb	r3, [r7, #14]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <USBD_StdEPReq+0x264>
 800caa0:	7bbb      	ldrb	r3, [r7, #14]
 800caa2:	2b80      	cmp	r3, #128	; 0x80
 800caa4:	d103      	bne.n	800caae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	2200      	movs	r2, #0
 800caaa:	601a      	str	r2, [r3, #0]
 800caac:	e00e      	b.n	800cacc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800caae:	7bbb      	ldrb	r3, [r7, #14]
 800cab0:	4619      	mov	r1, r3
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f005 fc7c 	bl	80123b0 <USBD_LL_IsStallEP>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d003      	beq.n	800cac6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	2201      	movs	r2, #1
 800cac2:	601a      	str	r2, [r3, #0]
 800cac4:	e002      	b.n	800cacc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	2200      	movs	r2, #0
 800caca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	2202      	movs	r2, #2
 800cad0:	4619      	mov	r1, r3
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fbe1 	bl	800d29a <USBD_CtlSendData>
              break;
 800cad8:	e004      	b.n	800cae4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cada:	6839      	ldr	r1, [r7, #0]
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 fb6b 	bl	800d1b8 <USBD_CtlError>
              break;
 800cae2:	bf00      	nop
          }
          break;
 800cae4:	e004      	b.n	800caf0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fb65 	bl	800d1b8 <USBD_CtlError>
          break;
 800caee:	bf00      	nop
      }
      break;
 800caf0:	e004      	b.n	800cafc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fb5f 	bl	800d1b8 <USBD_CtlError>
      break;
 800cafa:	bf00      	nop
  }

  return ret;
 800cafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
	...

0800cb08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb12:	2300      	movs	r3, #0
 800cb14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cb16:	2300      	movs	r3, #0
 800cb18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	885b      	ldrh	r3, [r3, #2]
 800cb22:	0a1b      	lsrs	r3, r3, #8
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	3b01      	subs	r3, #1
 800cb28:	2b0e      	cmp	r3, #14
 800cb2a:	f200 8152 	bhi.w	800cdd2 <USBD_GetDescriptor+0x2ca>
 800cb2e:	a201      	add	r2, pc, #4	; (adr r2, 800cb34 <USBD_GetDescriptor+0x2c>)
 800cb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb34:	0800cba5 	.word	0x0800cba5
 800cb38:	0800cbbd 	.word	0x0800cbbd
 800cb3c:	0800cbfd 	.word	0x0800cbfd
 800cb40:	0800cdd3 	.word	0x0800cdd3
 800cb44:	0800cdd3 	.word	0x0800cdd3
 800cb48:	0800cd73 	.word	0x0800cd73
 800cb4c:	0800cd9f 	.word	0x0800cd9f
 800cb50:	0800cdd3 	.word	0x0800cdd3
 800cb54:	0800cdd3 	.word	0x0800cdd3
 800cb58:	0800cdd3 	.word	0x0800cdd3
 800cb5c:	0800cdd3 	.word	0x0800cdd3
 800cb60:	0800cdd3 	.word	0x0800cdd3
 800cb64:	0800cdd3 	.word	0x0800cdd3
 800cb68:	0800cdd3 	.word	0x0800cdd3
 800cb6c:	0800cb71 	.word	0x0800cb71
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb76:	69db      	ldr	r3, [r3, #28]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00b      	beq.n	800cb94 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb82:	69db      	ldr	r3, [r3, #28]
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	7c12      	ldrb	r2, [r2, #16]
 800cb88:	f107 0108 	add.w	r1, r7, #8
 800cb8c:	4610      	mov	r0, r2
 800cb8e:	4798      	blx	r3
 800cb90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb92:	e126      	b.n	800cde2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cb94:	6839      	ldr	r1, [r7, #0]
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fb0e 	bl	800d1b8 <USBD_CtlError>
        err++;
 800cb9c:	7afb      	ldrb	r3, [r7, #11]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	72fb      	strb	r3, [r7, #11]
      break;
 800cba2:	e11e      	b.n	800cde2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	7c12      	ldrb	r2, [r2, #16]
 800cbb0:	f107 0108 	add.w	r1, r7, #8
 800cbb4:	4610      	mov	r0, r2
 800cbb6:	4798      	blx	r3
 800cbb8:	60f8      	str	r0, [r7, #12]
      break;
 800cbba:	e112      	b.n	800cde2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	7c1b      	ldrb	r3, [r3, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10d      	bne.n	800cbe0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbcc:	f107 0208 	add.w	r2, r7, #8
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	4798      	blx	r3
 800cbd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	2202      	movs	r2, #2
 800cbdc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cbde:	e100      	b.n	800cde2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe8:	f107 0208 	add.w	r2, r7, #8
 800cbec:	4610      	mov	r0, r2
 800cbee:	4798      	blx	r3
 800cbf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	2202      	movs	r2, #2
 800cbf8:	701a      	strb	r2, [r3, #0]
      break;
 800cbfa:	e0f2      	b.n	800cde2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	885b      	ldrh	r3, [r3, #2]
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	2b05      	cmp	r3, #5
 800cc04:	f200 80ac 	bhi.w	800cd60 <USBD_GetDescriptor+0x258>
 800cc08:	a201      	add	r2, pc, #4	; (adr r2, 800cc10 <USBD_GetDescriptor+0x108>)
 800cc0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc0e:	bf00      	nop
 800cc10:	0800cc29 	.word	0x0800cc29
 800cc14:	0800cc5d 	.word	0x0800cc5d
 800cc18:	0800cc91 	.word	0x0800cc91
 800cc1c:	0800ccc5 	.word	0x0800ccc5
 800cc20:	0800ccf9 	.word	0x0800ccf9
 800cc24:	0800cd2d 	.word	0x0800cd2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d00b      	beq.n	800cc4c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	7c12      	ldrb	r2, [r2, #16]
 800cc40:	f107 0108 	add.w	r1, r7, #8
 800cc44:	4610      	mov	r0, r2
 800cc46:	4798      	blx	r3
 800cc48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc4a:	e091      	b.n	800cd70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fab2 	bl	800d1b8 <USBD_CtlError>
            err++;
 800cc54:	7afb      	ldrb	r3, [r7, #11]
 800cc56:	3301      	adds	r3, #1
 800cc58:	72fb      	strb	r3, [r7, #11]
          break;
 800cc5a:	e089      	b.n	800cd70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00b      	beq.n	800cc80 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	7c12      	ldrb	r2, [r2, #16]
 800cc74:	f107 0108 	add.w	r1, r7, #8
 800cc78:	4610      	mov	r0, r2
 800cc7a:	4798      	blx	r3
 800cc7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc7e:	e077      	b.n	800cd70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 fa98 	bl	800d1b8 <USBD_CtlError>
            err++;
 800cc88:	7afb      	ldrb	r3, [r7, #11]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	72fb      	strb	r3, [r7, #11]
          break;
 800cc8e:	e06f      	b.n	800cd70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00b      	beq.n	800ccb4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	7c12      	ldrb	r2, [r2, #16]
 800cca8:	f107 0108 	add.w	r1, r7, #8
 800ccac:	4610      	mov	r0, r2
 800ccae:	4798      	blx	r3
 800ccb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccb2:	e05d      	b.n	800cd70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ccb4:	6839      	ldr	r1, [r7, #0]
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 fa7e 	bl	800d1b8 <USBD_CtlError>
            err++;
 800ccbc:	7afb      	ldrb	r3, [r7, #11]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	72fb      	strb	r3, [r7, #11]
          break;
 800ccc2:	e055      	b.n	800cd70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccca:	691b      	ldr	r3, [r3, #16]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d00b      	beq.n	800cce8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccd6:	691b      	ldr	r3, [r3, #16]
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	7c12      	ldrb	r2, [r2, #16]
 800ccdc:	f107 0108 	add.w	r1, r7, #8
 800cce0:	4610      	mov	r0, r2
 800cce2:	4798      	blx	r3
 800cce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cce6:	e043      	b.n	800cd70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cce8:	6839      	ldr	r1, [r7, #0]
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 fa64 	bl	800d1b8 <USBD_CtlError>
            err++;
 800ccf0:	7afb      	ldrb	r3, [r7, #11]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	72fb      	strb	r3, [r7, #11]
          break;
 800ccf6:	e03b      	b.n	800cd70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccfe:	695b      	ldr	r3, [r3, #20]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00b      	beq.n	800cd1c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd0a:	695b      	ldr	r3, [r3, #20]
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	7c12      	ldrb	r2, [r2, #16]
 800cd10:	f107 0108 	add.w	r1, r7, #8
 800cd14:	4610      	mov	r0, r2
 800cd16:	4798      	blx	r3
 800cd18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd1a:	e029      	b.n	800cd70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd1c:	6839      	ldr	r1, [r7, #0]
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fa4a 	bl	800d1b8 <USBD_CtlError>
            err++;
 800cd24:	7afb      	ldrb	r3, [r7, #11]
 800cd26:	3301      	adds	r3, #1
 800cd28:	72fb      	strb	r3, [r7, #11]
          break;
 800cd2a:	e021      	b.n	800cd70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00b      	beq.n	800cd50 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd3e:	699b      	ldr	r3, [r3, #24]
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	7c12      	ldrb	r2, [r2, #16]
 800cd44:	f107 0108 	add.w	r1, r7, #8
 800cd48:	4610      	mov	r0, r2
 800cd4a:	4798      	blx	r3
 800cd4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd4e:	e00f      	b.n	800cd70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd50:	6839      	ldr	r1, [r7, #0]
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 fa30 	bl	800d1b8 <USBD_CtlError>
            err++;
 800cd58:	7afb      	ldrb	r3, [r7, #11]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	72fb      	strb	r3, [r7, #11]
          break;
 800cd5e:	e007      	b.n	800cd70 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cd60:	6839      	ldr	r1, [r7, #0]
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fa28 	bl	800d1b8 <USBD_CtlError>
          err++;
 800cd68:	7afb      	ldrb	r3, [r7, #11]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cd6e:	bf00      	nop
      }
      break;
 800cd70:	e037      	b.n	800cde2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	7c1b      	ldrb	r3, [r3, #16]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d109      	bne.n	800cd8e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd82:	f107 0208 	add.w	r2, r7, #8
 800cd86:	4610      	mov	r0, r2
 800cd88:	4798      	blx	r3
 800cd8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd8c:	e029      	b.n	800cde2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cd8e:	6839      	ldr	r1, [r7, #0]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 fa11 	bl	800d1b8 <USBD_CtlError>
        err++;
 800cd96:	7afb      	ldrb	r3, [r7, #11]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	72fb      	strb	r3, [r7, #11]
      break;
 800cd9c:	e021      	b.n	800cde2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	7c1b      	ldrb	r3, [r3, #16]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d10d      	bne.n	800cdc2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdae:	f107 0208 	add.w	r2, r7, #8
 800cdb2:	4610      	mov	r0, r2
 800cdb4:	4798      	blx	r3
 800cdb6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	2207      	movs	r2, #7
 800cdbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdc0:	e00f      	b.n	800cde2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cdc2:	6839      	ldr	r1, [r7, #0]
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 f9f7 	bl	800d1b8 <USBD_CtlError>
        err++;
 800cdca:	7afb      	ldrb	r3, [r7, #11]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	72fb      	strb	r3, [r7, #11]
      break;
 800cdd0:	e007      	b.n	800cde2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 f9ef 	bl	800d1b8 <USBD_CtlError>
      err++;
 800cdda:	7afb      	ldrb	r3, [r7, #11]
 800cddc:	3301      	adds	r3, #1
 800cdde:	72fb      	strb	r3, [r7, #11]
      break;
 800cde0:	bf00      	nop
  }

  if (err != 0U)
 800cde2:	7afb      	ldrb	r3, [r7, #11]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d11e      	bne.n	800ce26 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	88db      	ldrh	r3, [r3, #6]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d016      	beq.n	800ce1e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cdf0:	893b      	ldrh	r3, [r7, #8]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00e      	beq.n	800ce14 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	88da      	ldrh	r2, [r3, #6]
 800cdfa:	893b      	ldrh	r3, [r7, #8]
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	bf28      	it	cs
 800ce00:	4613      	movcs	r3, r2
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce06:	893b      	ldrh	r3, [r7, #8]
 800ce08:	461a      	mov	r2, r3
 800ce0a:	68f9      	ldr	r1, [r7, #12]
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 fa44 	bl	800d29a <USBD_CtlSendData>
 800ce12:	e009      	b.n	800ce28 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ce14:	6839      	ldr	r1, [r7, #0]
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 f9ce 	bl	800d1b8 <USBD_CtlError>
 800ce1c:	e004      	b.n	800ce28 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 fa95 	bl	800d34e <USBD_CtlSendStatus>
 800ce24:	e000      	b.n	800ce28 <USBD_GetDescriptor+0x320>
    return;
 800ce26:	bf00      	nop
  }
}
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop

0800ce30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	889b      	ldrh	r3, [r3, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d131      	bne.n	800cea6 <USBD_SetAddress+0x76>
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	88db      	ldrh	r3, [r3, #6]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d12d      	bne.n	800cea6 <USBD_SetAddress+0x76>
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	885b      	ldrh	r3, [r3, #2]
 800ce4e:	2b7f      	cmp	r3, #127	; 0x7f
 800ce50:	d829      	bhi.n	800cea6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	885b      	ldrh	r3, [r3, #2]
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	d104      	bne.n	800ce74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ce6a:	6839      	ldr	r1, [r7, #0]
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 f9a3 	bl	800d1b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce72:	e01d      	b.n	800ceb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	7bfa      	ldrb	r2, [r7, #15]
 800ce78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f005 fac2 	bl	801240a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 fa61 	bl	800d34e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ce8c:	7bfb      	ldrb	r3, [r7, #15]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d004      	beq.n	800ce9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2202      	movs	r2, #2
 800ce96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce9a:	e009      	b.n	800ceb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cea4:	e004      	b.n	800ceb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cea6:	6839      	ldr	r1, [r7, #0]
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f985 	bl	800d1b8 <USBD_CtlError>
  }
}
 800ceae:	bf00      	nop
 800ceb0:	bf00      	nop
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cec2:	2300      	movs	r3, #0
 800cec4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	885b      	ldrh	r3, [r3, #2]
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	4b4c      	ldr	r3, [pc, #304]	; (800d000 <USBD_SetConfig+0x148>)
 800cece:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ced0:	4b4b      	ldr	r3, [pc, #300]	; (800d000 <USBD_SetConfig+0x148>)
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d905      	bls.n	800cee4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ced8:	6839      	ldr	r1, [r7, #0]
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 f96c 	bl	800d1b8 <USBD_CtlError>
    return USBD_FAIL;
 800cee0:	2303      	movs	r3, #3
 800cee2:	e088      	b.n	800cff6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d002      	beq.n	800cef6 <USBD_SetConfig+0x3e>
 800cef0:	2b03      	cmp	r3, #3
 800cef2:	d025      	beq.n	800cf40 <USBD_SetConfig+0x88>
 800cef4:	e071      	b.n	800cfda <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cef6:	4b42      	ldr	r3, [pc, #264]	; (800d000 <USBD_SetConfig+0x148>)
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d01c      	beq.n	800cf38 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cefe:	4b40      	ldr	r3, [pc, #256]	; (800d000 <USBD_SetConfig+0x148>)
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf08:	4b3d      	ldr	r3, [pc, #244]	; (800d000 <USBD_SetConfig+0x148>)
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7ff f992 	bl	800c238 <USBD_SetClassConfig>
 800cf14:	4603      	mov	r3, r0
 800cf16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cf18:	7bfb      	ldrb	r3, [r7, #15]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d004      	beq.n	800cf28 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cf1e:	6839      	ldr	r1, [r7, #0]
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f949 	bl	800d1b8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf26:	e065      	b.n	800cff4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 fa10 	bl	800d34e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2203      	movs	r2, #3
 800cf32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cf36:	e05d      	b.n	800cff4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 fa08 	bl	800d34e <USBD_CtlSendStatus>
      break;
 800cf3e:	e059      	b.n	800cff4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cf40:	4b2f      	ldr	r3, [pc, #188]	; (800d000 <USBD_SetConfig+0x148>)
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d112      	bne.n	800cf6e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2202      	movs	r2, #2
 800cf4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cf50:	4b2b      	ldr	r3, [pc, #172]	; (800d000 <USBD_SetConfig+0x148>)
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	461a      	mov	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf5a:	4b29      	ldr	r3, [pc, #164]	; (800d000 <USBD_SetConfig+0x148>)
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	4619      	mov	r1, r3
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7ff f985 	bl	800c270 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 f9f1 	bl	800d34e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf6c:	e042      	b.n	800cff4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cf6e:	4b24      	ldr	r3, [pc, #144]	; (800d000 <USBD_SetConfig+0x148>)
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	461a      	mov	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d02a      	beq.n	800cfd2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	4619      	mov	r1, r3
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f7ff f973 	bl	800c270 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cf8a:	4b1d      	ldr	r3, [pc, #116]	; (800d000 <USBD_SetConfig+0x148>)
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf94:	4b1a      	ldr	r3, [pc, #104]	; (800d000 <USBD_SetConfig+0x148>)
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	4619      	mov	r1, r3
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7ff f94c 	bl	800c238 <USBD_SetClassConfig>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cfa4:	7bfb      	ldrb	r3, [r7, #15]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00f      	beq.n	800cfca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cfaa:	6839      	ldr	r1, [r7, #0]
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 f903 	bl	800d1b8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	4619      	mov	r1, r3
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7ff f958 	bl	800c270 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cfc8:	e014      	b.n	800cff4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 f9bf 	bl	800d34e <USBD_CtlSendStatus>
      break;
 800cfd0:	e010      	b.n	800cff4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f9bb 	bl	800d34e <USBD_CtlSendStatus>
      break;
 800cfd8:	e00c      	b.n	800cff4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cfda:	6839      	ldr	r1, [r7, #0]
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f8eb 	bl	800d1b8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cfe2:	4b07      	ldr	r3, [pc, #28]	; (800d000 <USBD_SetConfig+0x148>)
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f7ff f941 	bl	800c270 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cfee:	2303      	movs	r3, #3
 800cff0:	73fb      	strb	r3, [r7, #15]
      break;
 800cff2:	bf00      	nop
  }

  return ret;
 800cff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	20000528 	.word	0x20000528

0800d004 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	88db      	ldrh	r3, [r3, #6]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d004      	beq.n	800d020 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d016:	6839      	ldr	r1, [r7, #0]
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 f8cd 	bl	800d1b8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d01e:	e023      	b.n	800d068 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d026:	b2db      	uxtb	r3, r3
 800d028:	2b02      	cmp	r3, #2
 800d02a:	dc02      	bgt.n	800d032 <USBD_GetConfig+0x2e>
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	dc03      	bgt.n	800d038 <USBD_GetConfig+0x34>
 800d030:	e015      	b.n	800d05e <USBD_GetConfig+0x5a>
 800d032:	2b03      	cmp	r3, #3
 800d034:	d00b      	beq.n	800d04e <USBD_GetConfig+0x4a>
 800d036:	e012      	b.n	800d05e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	3308      	adds	r3, #8
 800d042:	2201      	movs	r2, #1
 800d044:	4619      	mov	r1, r3
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 f927 	bl	800d29a <USBD_CtlSendData>
        break;
 800d04c:	e00c      	b.n	800d068 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	3304      	adds	r3, #4
 800d052:	2201      	movs	r2, #1
 800d054:	4619      	mov	r1, r3
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f91f 	bl	800d29a <USBD_CtlSendData>
        break;
 800d05c:	e004      	b.n	800d068 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d05e:	6839      	ldr	r1, [r7, #0]
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 f8a9 	bl	800d1b8 <USBD_CtlError>
        break;
 800d066:	bf00      	nop
}
 800d068:	bf00      	nop
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d080:	b2db      	uxtb	r3, r3
 800d082:	3b01      	subs	r3, #1
 800d084:	2b02      	cmp	r3, #2
 800d086:	d81e      	bhi.n	800d0c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	88db      	ldrh	r3, [r3, #6]
 800d08c:	2b02      	cmp	r3, #2
 800d08e:	d004      	beq.n	800d09a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f890 	bl	800d1b8 <USBD_CtlError>
        break;
 800d098:	e01a      	b.n	800d0d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2201      	movs	r2, #1
 800d09e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d005      	beq.n	800d0b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	f043 0202 	orr.w	r2, r3, #2
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	330c      	adds	r3, #12
 800d0ba:	2202      	movs	r2, #2
 800d0bc:	4619      	mov	r1, r3
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 f8eb 	bl	800d29a <USBD_CtlSendData>
      break;
 800d0c4:	e004      	b.n	800d0d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f875 	bl	800d1b8 <USBD_CtlError>
      break;
 800d0ce:	bf00      	nop
  }
}
 800d0d0:	bf00      	nop
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	885b      	ldrh	r3, [r3, #2]
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d106      	bne.n	800d0f8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f92b 	bl	800d34e <USBD_CtlSendStatus>
  }
}
 800d0f8:	bf00      	nop
 800d0fa:	3708      	adds	r7, #8
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d110:	b2db      	uxtb	r3, r3
 800d112:	3b01      	subs	r3, #1
 800d114:	2b02      	cmp	r3, #2
 800d116:	d80b      	bhi.n	800d130 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	885b      	ldrh	r3, [r3, #2]
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d10c      	bne.n	800d13a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 f910 	bl	800d34e <USBD_CtlSendStatus>
      }
      break;
 800d12e:	e004      	b.n	800d13a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d130:	6839      	ldr	r1, [r7, #0]
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 f840 	bl	800d1b8 <USBD_CtlError>
      break;
 800d138:	e000      	b.n	800d13c <USBD_ClrFeature+0x3c>
      break;
 800d13a:	bf00      	nop
  }
}
 800d13c:	bf00      	nop
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	781a      	ldrb	r2, [r3, #0]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	3301      	adds	r3, #1
 800d15e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	781a      	ldrb	r2, [r3, #0]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	3301      	adds	r3, #1
 800d16c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	f7ff fa92 	bl	800c698 <SWAPBYTE>
 800d174:	4603      	mov	r3, r0
 800d176:	461a      	mov	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	3301      	adds	r3, #1
 800d180:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	3301      	adds	r3, #1
 800d186:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f7ff fa85 	bl	800c698 <SWAPBYTE>
 800d18e:	4603      	mov	r3, r0
 800d190:	461a      	mov	r2, r3
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	3301      	adds	r3, #1
 800d19a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d1a2:	68f8      	ldr	r0, [r7, #12]
 800d1a4:	f7ff fa78 	bl	800c698 <SWAPBYTE>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	80da      	strh	r2, [r3, #6]
}
 800d1b0:	bf00      	nop
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1c2:	2180      	movs	r1, #128	; 0x80
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f005 f8b5 	bl	8012334 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f005 f8b1 	bl	8012334 <USBD_LL_StallEP>
}
 800d1d2:	bf00      	nop
 800d1d4:	3708      	adds	r7, #8
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b086      	sub	sp, #24
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	60f8      	str	r0, [r7, #12]
 800d1e2:	60b9      	str	r1, [r7, #8]
 800d1e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d036      	beq.n	800d25e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d1f4:	6938      	ldr	r0, [r7, #16]
 800d1f6:	f000 f836 	bl	800d266 <USBD_GetLen>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	005b      	lsls	r3, r3, #1
 800d202:	b29a      	uxth	r2, r3
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d208:	7dfb      	ldrb	r3, [r7, #23]
 800d20a:	68ba      	ldr	r2, [r7, #8]
 800d20c:	4413      	add	r3, r2
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	7812      	ldrb	r2, [r2, #0]
 800d212:	701a      	strb	r2, [r3, #0]
  idx++;
 800d214:	7dfb      	ldrb	r3, [r7, #23]
 800d216:	3301      	adds	r3, #1
 800d218:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d21a:	7dfb      	ldrb	r3, [r7, #23]
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	4413      	add	r3, r2
 800d220:	2203      	movs	r2, #3
 800d222:	701a      	strb	r2, [r3, #0]
  idx++;
 800d224:	7dfb      	ldrb	r3, [r7, #23]
 800d226:	3301      	adds	r3, #1
 800d228:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d22a:	e013      	b.n	800d254 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d22c:	7dfb      	ldrb	r3, [r7, #23]
 800d22e:	68ba      	ldr	r2, [r7, #8]
 800d230:	4413      	add	r3, r2
 800d232:	693a      	ldr	r2, [r7, #16]
 800d234:	7812      	ldrb	r2, [r2, #0]
 800d236:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	3301      	adds	r3, #1
 800d23c:	613b      	str	r3, [r7, #16]
    idx++;
 800d23e:	7dfb      	ldrb	r3, [r7, #23]
 800d240:	3301      	adds	r3, #1
 800d242:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d244:	7dfb      	ldrb	r3, [r7, #23]
 800d246:	68ba      	ldr	r2, [r7, #8]
 800d248:	4413      	add	r3, r2
 800d24a:	2200      	movs	r2, #0
 800d24c:	701a      	strb	r2, [r3, #0]
    idx++;
 800d24e:	7dfb      	ldrb	r3, [r7, #23]
 800d250:	3301      	adds	r3, #1
 800d252:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d1e7      	bne.n	800d22c <USBD_GetString+0x52>
 800d25c:	e000      	b.n	800d260 <USBD_GetString+0x86>
    return;
 800d25e:	bf00      	nop
  }
}
 800d260:	3718      	adds	r7, #24
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d266:	b480      	push	{r7}
 800d268:	b085      	sub	sp, #20
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d26e:	2300      	movs	r3, #0
 800d270:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d276:	e005      	b.n	800d284 <USBD_GetLen+0x1e>
  {
    len++;
 800d278:	7bfb      	ldrb	r3, [r7, #15]
 800d27a:	3301      	adds	r3, #1
 800d27c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	3301      	adds	r3, #1
 800d282:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1f5      	bne.n	800d278 <USBD_GetLen+0x12>
  }

  return len;
 800d28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3714      	adds	r7, #20
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr

0800d29a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b084      	sub	sp, #16
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	60f8      	str	r0, [r7, #12]
 800d2a2:	60b9      	str	r1, [r7, #8]
 800d2a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2202      	movs	r2, #2
 800d2aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	68ba      	ldr	r2, [r7, #8]
 800d2be:	2100      	movs	r1, #0
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f005 f8c1 	bl	8012448 <USBD_LL_Transmit>

  return USBD_OK;
 800d2c6:	2300      	movs	r3, #0
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3710      	adds	r7, #16
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b084      	sub	sp, #16
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68ba      	ldr	r2, [r7, #8]
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	68f8      	ldr	r0, [r7, #12]
 800d2e4:	f005 f8b0 	bl	8012448 <USBD_LL_Transmit>

  return USBD_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b084      	sub	sp, #16
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	60f8      	str	r0, [r7, #12]
 800d2fa:	60b9      	str	r1, [r7, #8]
 800d2fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2203      	movs	r2, #3
 800d302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	68ba      	ldr	r2, [r7, #8]
 800d31a:	2100      	movs	r1, #0
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f005 f8b4 	bl	801248a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d322:	2300      	movs	r3, #0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3710      	adds	r7, #16
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	2100      	movs	r1, #0
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	f005 f8a3 	bl	801248a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d344:	2300      	movs	r3, #0
}
 800d346:	4618      	mov	r0, r3
 800d348:	3710      	adds	r7, #16
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b082      	sub	sp, #8
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2204      	movs	r2, #4
 800d35a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d35e:	2300      	movs	r3, #0
 800d360:	2200      	movs	r2, #0
 800d362:	2100      	movs	r1, #0
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f005 f86f 	bl	8012448 <USBD_LL_Transmit>

  return USBD_OK;
 800d36a:	2300      	movs	r3, #0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2205      	movs	r2, #5
 800d380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d384:	2300      	movs	r3, #0
 800d386:	2200      	movs	r2, #0
 800d388:	2100      	movs	r1, #0
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f005 f87d 	bl	801248a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d390:	2300      	movs	r3, #0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3708      	adds	r7, #8
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
	...

0800d39c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800d39c:	b480      	push	{r7}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800d3a6:	4b0f      	ldr	r3, [pc, #60]	; (800d3e4 <OTP_Read+0x48>)
 800d3a8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d3aa:	e002      	b.n	800d3b2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	3b08      	subs	r3, #8
 800d3b0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	3307      	adds	r3, #7
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	79fa      	ldrb	r2, [r7, #7]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d003      	beq.n	800d3c6 <OTP_Read+0x2a>
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	4a09      	ldr	r2, [pc, #36]	; (800d3e8 <OTP_Read+0x4c>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d1f2      	bne.n	800d3ac <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	3307      	adds	r3, #7
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	79fa      	ldrb	r2, [r7, #7]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d001      	beq.n	800d3d6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3714      	adds	r7, #20
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr
 800d3e4:	1fff73f8 	.word	0x1fff73f8
 800d3e8:	1fff7000 	.word	0x1fff7000

0800d3ec <_ZN15Adafruit_AS7341C1Ev>:

/**
 * @brief Construct a new Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::Adafruit_AS7341(void) {
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	4a09      	ldr	r2, [pc, #36]	; (800d41c <_ZN15Adafruit_AS7341C1Ev+0x30>)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	601a      	str	r2, [r3, #0]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	711a      	strb	r2, [r3, #4]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	609a      	str	r2, [r3, #8]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	731a      	strb	r2, [r3, #12]
}
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	4618      	mov	r0, r3
 800d410:	370c      	adds	r7, #12
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	08013358 	.word	0x08013358

0800d420 <_ZN15Adafruit_AS7341D1Ev>:

/**
 * @brief Destroy the Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::~Adafruit_AS7341(void) {
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	4a04      	ldr	r2, [pc, #16]	; (800d43c <_ZN15Adafruit_AS7341D1Ev+0x1c>)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	601a      	str	r2, [r3, #0]
	//   if (temp_sensor)
	//     delete temp_sensor;
	//   if (pressure_sensor)
	//     delete pressure_sensor;
}
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4618      	mov	r0, r3
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr
 800d43c:	08013358 	.word	0x08013358

0800d440 <_ZN15Adafruit_AS73415_initEl>:

/*!  @brief Initializer for post i2c/spi init
 *   @param sensor_id Optional unique ID for the sensor set
 *   @returns True if chip identified and initialized
 */
bool Adafruit_AS7341::_init(int32_t sensor_id) {
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]

	// make sure we're talking to the right chip
	if ((readRegisterByte(AS7341_WHOAMI) & 0xFC) != (AS7341_CHIP_ID << 2)) {
 800d44a:	2192      	movs	r1, #146	; 0x92
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 f882 	bl	800d556 <_ZN15Adafruit_AS734116readRegisterByteEt>
 800d452:	4603      	mov	r3, r0
 800d454:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800d458:	2b24      	cmp	r3, #36	; 0x24
 800d45a:	bf14      	ite	ne
 800d45c:	2301      	movne	r3, #1
 800d45e:	2300      	moveq	r3, #0
 800d460:	b2db      	uxtb	r3, r3
 800d462:	2b00      	cmp	r3, #0
 800d464:	d001      	beq.n	800d46a <_ZN15Adafruit_AS73415_initEl+0x2a>
		return false;
 800d466:	2300      	movs	r3, #0
 800d468:	e004      	b.n	800d474 <_ZN15Adafruit_AS73415_initEl+0x34>
	}

	powerEnable(true);
 800d46a:	2101      	movs	r1, #1
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 f805 	bl	800d47c <_ZN15Adafruit_AS734111powerEnableEb>
	return true;
 800d472:	2301      	movs	r3, #1
}
 800d474:	4618      	mov	r0, r3
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <_ZN15Adafruit_AS734111powerEnableEb>:
/**
 * @brief Sets the power state of the sensor
 *
 * @param enable_power true: on false: off
 */
void Adafruit_AS7341::powerEnable(bool enable_power) {
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	70fb      	strb	r3, [r7, #3]
	uint8_t enable_reg = readRegisterByte(AS7341_ENABLE);
 800d488:	2180      	movs	r1, #128	; 0x80
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f863 	bl	800d556 <_ZN15Adafruit_AS734116readRegisterByteEt>
 800d490:	4603      	mov	r3, r0
 800d492:	73fb      	strb	r3, [r7, #15]
	enable_reg = modifyBitInByte(enable_reg, (uint8_t) enable_power, 0);
 800d494:	78fa      	ldrb	r2, [r7, #3]
 800d496:	7bf9      	ldrb	r1, [r7, #15]
 800d498:	2300      	movs	r3, #0
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f833 	bl	800d506 <_ZN15Adafruit_AS734115modifyBitInByteEhhh>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	73fb      	strb	r3, [r7, #15]
	writeRegisterByte(AS7341_ENABLE, enable_reg);
 800d4a4:	7bfb      	ldrb	r3, [r7, #15]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	2180      	movs	r1, #128	; 0x80
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f000 f804 	bl	800d4b8 <_ZN15Adafruit_AS734117writeRegisterByteEhh>
}
 800d4b0:	bf00      	nop
 800d4b2:	3710      	adds	r7, #16
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <_ZN15Adafruit_AS734117writeRegisterByteEhh>:
	} else {
		return false;
	}
}

bool Adafruit_AS7341::writeRegisterByte(uint8_t mem_addr, uint8_t val) {
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b086      	sub	sp, #24
 800d4bc:	af04      	add	r7, sp, #16
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	70fb      	strb	r3, [r7, #3]
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	70bb      	strb	r3, [r7, #2]
	if (HAL_OK
			== HAL_I2C_Mem_Write(i2c_han, i2c_addr, mem_addr, 1, &val, 1, 10)) {
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6898      	ldr	r0, [r3, #8]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	7b1b      	ldrb	r3, [r3, #12]
 800d4d0:	b299      	uxth	r1, r3
 800d4d2:	78fb      	ldrb	r3, [r7, #3]
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	230a      	movs	r3, #10
 800d4d8:	9302      	str	r3, [sp, #8]
 800d4da:	2301      	movs	r3, #1
 800d4dc:	9301      	str	r3, [sp, #4]
 800d4de:	1cbb      	adds	r3, r7, #2
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	f7f5 fe36 	bl	8003154 <HAL_I2C_Mem_Write>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	bf0c      	ite	eq
 800d4ee:	2301      	moveq	r3, #1
 800d4f0:	2300      	movne	r3, #0
 800d4f2:	b2db      	uxtb	r3, r3
	if (HAL_OK
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d001      	beq.n	800d4fc <_ZN15Adafruit_AS734117writeRegisterByteEhh+0x44>
		return true;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e000      	b.n	800d4fe <_ZN15Adafruit_AS734117writeRegisterByteEhh+0x46>
	} else {
		return false;
 800d4fc:	2300      	movs	r3, #0
	}
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <_ZN15Adafruit_AS734115modifyBitInByteEhhh>:

uint8_t Adafruit_AS7341::modifyBitInByte(uint8_t var, uint8_t value,
		uint8_t pos) {
 800d506:	b480      	push	{r7}
 800d508:	b085      	sub	sp, #20
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
 800d50e:	4608      	mov	r0, r1
 800d510:	4611      	mov	r1, r2
 800d512:	461a      	mov	r2, r3
 800d514:	4603      	mov	r3, r0
 800d516:	70fb      	strb	r3, [r7, #3]
 800d518:	460b      	mov	r3, r1
 800d51a:	70bb      	strb	r3, [r7, #2]
 800d51c:	4613      	mov	r3, r2
 800d51e:	707b      	strb	r3, [r7, #1]
	uint8_t mask = 1 << pos;
 800d520:	787b      	ldrb	r3, [r7, #1]
 800d522:	2201      	movs	r2, #1
 800d524:	fa02 f303 	lsl.w	r3, r2, r3
 800d528:	73fb      	strb	r3, [r7, #15]
	return ((var & ~mask) | (value << pos));
 800d52a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d52e:	43db      	mvns	r3, r3
 800d530:	b25a      	sxtb	r2, r3
 800d532:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d536:	4013      	ands	r3, r2
 800d538:	b25a      	sxtb	r2, r3
 800d53a:	78b9      	ldrb	r1, [r7, #2]
 800d53c:	787b      	ldrb	r3, [r7, #1]
 800d53e:	fa01 f303 	lsl.w	r3, r1, r3
 800d542:	b25b      	sxtb	r3, r3
 800d544:	4313      	orrs	r3, r2
 800d546:	b25b      	sxtb	r3, r3
 800d548:	b2db      	uxtb	r3, r3
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3714      	adds	r7, #20
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <_ZN15Adafruit_AS734116readRegisterByteEt>:
	register_value |= value << pos; // and add in the new data

	return writeRegisterByte(reg, register_value);
}

uint8_t Adafruit_AS7341::readRegisterByte(uint16_t mem_addr) {
 800d556:	b580      	push	{r7, lr}
 800d558:	b088      	sub	sp, #32
 800d55a:	af04      	add	r7, sp, #16
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	460b      	mov	r3, r1
 800d560:	807b      	strh	r3, [r7, #2]
	uint8_t data;
	HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, &data, 1, 10);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6898      	ldr	r0, [r3, #8]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	7b1b      	ldrb	r3, [r3, #12]
 800d56a:	b299      	uxth	r1, r3
 800d56c:	887a      	ldrh	r2, [r7, #2]
 800d56e:	230a      	movs	r3, #10
 800d570:	9302      	str	r3, [sp, #8]
 800d572:	2301      	movs	r3, #1
 800d574:	9301      	str	r3, [sp, #4]
 800d576:	f107 030f 	add.w	r3, r7, #15
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	2301      	movs	r3, #1
 800d57e:	f7f5 fefd 	bl	800337c <HAL_I2C_Mem_Read>
	return data;
 800d582:	7bfb      	ldrb	r3, [r7, #15]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <_ZN8CALIPILE5setupEhP19__I2C_HandleTypeDefh>:
#include "math.h"

#define delay			HAL_Delay
#define I2C_TIMEOUT		100

void CALIPILE::setup(uint8_t i2c_address, I2C_HandleTypeDef *i2c_handle, uint8_t identifier) {
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	607a      	str	r2, [r7, #4]
 800d596:	461a      	mov	r2, r3
 800d598:	460b      	mov	r3, r1
 800d59a:	72fb      	strb	r3, [r7, #11]
 800d59c:	4613      	mov	r3, r2
 800d59e:	72bb      	strb	r3, [r7, #10]
	i2c_han = i2c_handle;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	605a      	str	r2, [r3, #4]
	i2c_addr = i2c_address << 1;
 800d5a6:	7afb      	ldrb	r3, [r7, #11]
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	b2da      	uxtb	r2, r3
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	721a      	strb	r2, [r3, #8]
	descriptor = identifier;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	7aba      	ldrb	r2, [r7, #10]
 800d5b4:	701a      	strb	r2, [r3, #0]
}
 800d5b6:	bf00      	nop
 800d5b8:	3714      	adds	r7, #20
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <_ZN8CALIPILE4wakeEv>:

void CALIPILE::wake() {
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b088      	sub	sp, #32
 800d5c6:	af04      	add	r7, sp, #16
 800d5c8:	6078      	str	r0, [r7, #4]
//	writeByte(0x00, 0x04, 0x00);  // issue general call and reload command
	uint8_t data = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c_han, 0, 0x04, 1, &data, 1, I2C_TIMEOUT);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6858      	ldr	r0, [r3, #4]
 800d5d2:	2364      	movs	r3, #100	; 0x64
 800d5d4:	9302      	str	r3, [sp, #8]
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	9301      	str	r3, [sp, #4]
 800d5da:	f107 030f 	add.w	r3, r7, #15
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	2204      	movs	r2, #4
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	f7f5 fdb5 	bl	8003154 <HAL_I2C_Mem_Write>
	delay(1);
 800d5ea:	2001      	movs	r0, #1
 800d5ec:	f7f2 ffc8 	bl	8000580 <HAL_Delay>
}
 800d5f0:	bf00      	nop
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <_ZN8CALIPILE10readEEPROMEv>:

void CALIPILE::readEEPROM()
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	ed2d 8b02 	vpush	{d8}
 800d5fe:	b088      	sub	sp, #32
 800d600:	af02      	add	r7, sp, #8
 800d602:	6078      	str	r0, [r7, #4]

	uint8_t rawData[2] = {0, 0};
 800d604:	2300      	movs	r3, #0
 800d606:	81bb      	strh	r3, [r7, #12]
	/* Start of EEPROM operations, just have to do once *************************************************** */
	// Check EEPROM protocol number as a test of I2C communication
	writeByte(i2c_addr, CALIPILE_EEPROM_CONTROL, 0x80);// enable EEPROM read
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	7a19      	ldrb	r1, [r3, #8]
 800d60c:	2380      	movs	r3, #128	; 0x80
 800d60e:	221f      	movs	r2, #31
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 f9e7 	bl	800d9e4 <_ZN8CALIPILE9writeByteEhhh>

	uint8_t c = readByte(i2c_addr, CALIPILE_EEPROM_PROTOCOL);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	7a1b      	ldrb	r3, [r3, #8]
 800d61a:	2220      	movs	r2, #32
 800d61c:	4619      	mov	r1, r3
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 f9f7 	bl	800da12 <_ZN8CALIPILE8readByteEhh>
 800d624:	4603      	mov	r3, r0
 800d626:	73fb      	strb	r3, [r7, #15]
	//Serial.print("CaliPile EEPROM protocol number is "); //Serial.println(c);
	//Serial.println("CaliPile EEPROM protocol number should be 3");

	uint8_t d = readByte(i2c_addr, CALIPILE_SLAVE_ADDRESS);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	7a1b      	ldrb	r3, [r3, #8]
 800d62c:	223f      	movs	r2, #63	; 0x3f
 800d62e:	4619      	mov	r1, r3
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 f9ee 	bl	800da12 <_ZN8CALIPILE8readByteEhh>
 800d636:	4603      	mov	r3, r0
 800d638:	73bb      	strb	r3, [r7, #14]
	//Serial.println("CaliPile EEPROM slave address should be 140");
	//Serial.println(" ");

	// Read the EEPROM calibration constants

	_LOOKUP = readByte(i2c_addr, CALIPILE_EEPROM_LOOKUPNUM);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	7a1b      	ldrb	r3, [r3, #8]
 800d63e:	2229      	movs	r2, #41	; 0x29
 800d640:	4619      	mov	r1, r3
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 f9e5 	bl	800da12 <_ZN8CALIPILE8readByteEhh>
 800d648:	4603      	mov	r3, r0
 800d64a:	461a      	mov	r2, r3
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	765a      	strb	r2, [r3, #25]
	//Serial.print("CaliPile LookUpNumber is "); //Serial.println(_LOOKUP);

	readBytes(i2c_addr, CALIPILE_EEPROM_PTAT25, 2, &rawData[0]);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	7a19      	ldrb	r1, [r3, #8]
 800d654:	f107 030c 	add.w	r3, r7, #12
 800d658:	9300      	str	r3, [sp, #0]
 800d65a:	2302      	movs	r3, #2
 800d65c:	222a      	movs	r2, #42	; 0x2a
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 f9ec 	bl	800da3c <_ZN8CALIPILE9readBytesEhhhPh>
	_PTAT25 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d664:	7b3b      	ldrb	r3, [r7, #12]
 800d666:	021b      	lsls	r3, r3, #8
 800d668:	b21a      	sxth	r2, r3
 800d66a:	7b7b      	ldrb	r3, [r7, #13]
 800d66c:	b21b      	sxth	r3, r3
 800d66e:	4313      	orrs	r3, r2
 800d670:	b21b      	sxth	r3, r3
 800d672:	b29a      	uxth	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	815a      	strh	r2, [r3, #10]
	//Serial.print("CaliPile PTAT25 is "); //Serial.println(_PTAT25);

	readBytes(i2c_addr, CALIPILE_EEPROM_M, 2, &rawData[0]);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	7a19      	ldrb	r1, [r3, #8]
 800d67c:	f107 030c 	add.w	r3, r7, #12
 800d680:	9300      	str	r3, [sp, #0]
 800d682:	2302      	movs	r3, #2
 800d684:	222c      	movs	r2, #44	; 0x2c
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 f9d8 	bl	800da3c <_ZN8CALIPILE9readBytesEhhhPh>
	_M = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d68c:	7b3b      	ldrb	r3, [r7, #12]
 800d68e:	021b      	lsls	r3, r3, #8
 800d690:	b21a      	sxth	r2, r3
 800d692:	7b7b      	ldrb	r3, [r7, #13]
 800d694:	b21b      	sxth	r3, r3
 800d696:	4313      	orrs	r3, r2
 800d698:	b21b      	sxth	r3, r3
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	819a      	strh	r2, [r3, #12]
	_M /= 100;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	899b      	ldrh	r3, [r3, #12]
 800d6a4:	4a4f      	ldr	r2, [pc, #316]	; (800d7e4 <_ZN8CALIPILE10readEEPROMEv+0x1ec>)
 800d6a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d6aa:	095b      	lsrs	r3, r3, #5
 800d6ac:	b29a      	uxth	r2, r3
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	819a      	strh	r2, [r3, #12]
	//Serial.print("CaliPile M is "); //Serial.println(_M);

	readBytes(i2c_addr, CALIPILE_EEPROM_U0, 2, &rawData[0]);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	7a19      	ldrb	r1, [r3, #8]
 800d6b6:	f107 030c 	add.w	r3, r7, #12
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	2302      	movs	r3, #2
 800d6be:	222e      	movs	r2, #46	; 0x2e
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 f9bb 	bl	800da3c <_ZN8CALIPILE9readBytesEhhhPh>
	_U0 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d6c6:	7b3b      	ldrb	r3, [r7, #12]
 800d6c8:	021b      	lsls	r3, r3, #8
 800d6ca:	b21a      	sxth	r2, r3
 800d6cc:	7b7b      	ldrb	r3, [r7, #13]
 800d6ce:	b21b      	sxth	r3, r3
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	b21b      	sxth	r3, r3
 800d6d4:	b29a      	uxth	r2, r3
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	81da      	strh	r2, [r3, #14]
	_U0 += 32768;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	89db      	ldrh	r3, [r3, #14]
 800d6de:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	81da      	strh	r2, [r3, #14]
	//Serial.print("CaliPile U0 is "); //Serial.println(_U0);

	readBytes(i2c_addr, CALIPILE_EEPROM_UOUT1, 2, &rawData[0]);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	7a19      	ldrb	r1, [r3, #8]
 800d6ec:	f107 030c 	add.w	r3, r7, #12
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	2302      	movs	r3, #2
 800d6f4:	2230      	movs	r2, #48	; 0x30
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 f9a0 	bl	800da3c <_ZN8CALIPILE9readBytesEhhhPh>
	_UOUT1 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d6fc:	7b3b      	ldrb	r3, [r7, #12]
 800d6fe:	021b      	lsls	r3, r3, #8
 800d700:	7b7a      	ldrb	r2, [r7, #13]
 800d702:	4313      	orrs	r3, r2
 800d704:	461a      	mov	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	615a      	str	r2, [r3, #20]
	_UOUT1 *= 2;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	695b      	ldr	r3, [r3, #20]
 800d70e:	005a      	lsls	r2, r3, #1
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	615a      	str	r2, [r3, #20]
	//Serial.print("CaliPile UOUT1 is "); //Serial.println(_UOUT1);

	_TOBJ1 = readByte(i2c_addr, CALIPILE_EEPROM_TOBJ1);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	7a1b      	ldrb	r3, [r3, #8]
 800d718:	2232      	movs	r2, #50	; 0x32
 800d71a:	4619      	mov	r1, r3
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 f978 	bl	800da12 <_ZN8CALIPILE8readByteEhh>
 800d722:	4603      	mov	r3, r0
 800d724:	461a      	mov	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	761a      	strb	r2, [r3, #24]
	//Serial.print("CaliPile TOBJ1 is "); //Serial.println(_TOBJ1);

	readBytes(i2c_addr, CALIPILE_EEPROM_CHECKSUM, 2, &rawData[0]);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	7a19      	ldrb	r1, [r3, #8]
 800d72e:	f107 030c 	add.w	r3, r7, #12
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	2302      	movs	r3, #2
 800d736:	2221      	movs	r2, #33	; 0x21
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 f97f 	bl	800da3c <_ZN8CALIPILE9readBytesEhhhPh>
	_CHECKSUM = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d73e:	7b3b      	ldrb	r3, [r7, #12]
 800d740:	021b      	lsls	r3, r3, #8
 800d742:	b21a      	sxth	r2, r3
 800d744:	7b7b      	ldrb	r3, [r7, #13]
 800d746:	b21b      	sxth	r3, r3
 800d748:	4313      	orrs	r3, r2
 800d74a:	b21b      	sxth	r3, r3
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	821a      	strh	r2, [r3, #16]
	//Serial.print("CaliPile CHECKSUM is supposed to be "); //Serial.println(_CHECKSUM);

	// Calculate the checksum
	uint16_t sum = 0;
 800d752:	2300      	movs	r3, #0
 800d754:	82fb      	strh	r3, [r7, #22]
	for(int ii = 35; ii < 64; ii++)
 800d756:	2323      	movs	r3, #35	; 0x23
 800d758:	613b      	str	r3, [r7, #16]
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	2b3f      	cmp	r3, #63	; 0x3f
 800d75e:	dc10      	bgt.n	800d782 <_ZN8CALIPILE10readEEPROMEv+0x18a>
	{
		sum += readByte(i2c_addr, ii);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	7a1b      	ldrb	r3, [r3, #8]
 800d764:	693a      	ldr	r2, [r7, #16]
 800d766:	b2d2      	uxtb	r2, r2
 800d768:	4619      	mov	r1, r3
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 f951 	bl	800da12 <_ZN8CALIPILE8readByteEhh>
 800d770:	4603      	mov	r3, r0
 800d772:	b29a      	uxth	r2, r3
 800d774:	8afb      	ldrh	r3, [r7, #22]
 800d776:	4413      	add	r3, r2
 800d778:	82fb      	strh	r3, [r7, #22]
	for(int ii = 35; ii < 64; ii++)
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	3301      	adds	r3, #1
 800d77e:	613b      	str	r3, [r7, #16]
 800d780:	e7eb      	b.n	800d75a <_ZN8CALIPILE10readEEPROMEv+0x162>
	}
	//Serial.print("CaliPile CHECKSUM is "); //Serial.println(sum + c);

	writeByte(i2c_addr, CALIPILE_EEPROM_CONTROL, 0x00); // disable EEPROM read
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	7a19      	ldrb	r1, [r3, #8]
 800d786:	2300      	movs	r3, #0
 800d788:	221f      	movs	r2, #31
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f92a 	bl	800d9e4 <_ZN8CALIPILE9writeByteEhhh>
	/* End of EEPROM operations, just have to do once *************************************************** */

	// Construct needed calibration constants (just need to calculate once)
	_k = ( (float) (_UOUT1 - _U0) )/(powf((float)(_TOBJ1 + 273.15f), 3.8f) - powf(25.0f + 273.15f, 3.8f) );
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	695b      	ldr	r3, [r3, #20]
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	89d2      	ldrh	r2, [r2, #14]
 800d798:	1a9b      	subs	r3, r3, r2
 800d79a:	ee07 3a90 	vmov	s15, r3
 800d79e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	7e1b      	ldrb	r3, [r3, #24]
 800d7a6:	ee07 3a90 	vmov	s15, r3
 800d7aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800d7e8 <_ZN8CALIPILE10readEEPROMEv+0x1f0>
 800d7b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d7b6:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d7ec <_ZN8CALIPILE10readEEPROMEv+0x1f4>
 800d7ba:	eeb0 0a67 	vmov.f32	s0, s15
 800d7be:	f004 ff19 	bl	80125f4 <powf>
 800d7c2:	eef0 7a40 	vmov.f32	s15, s0
 800d7c6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800d7f0 <_ZN8CALIPILE10readEEPROMEv+0x1f8>
 800d7ca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d7ce:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800d7d8:	bf00      	nop
 800d7da:	3718      	adds	r7, #24
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	ecbd 8b02 	vpop	{d8}
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	51eb851f 	.word	0x51eb851f
 800d7e8:	43889333 	.word	0x43889333
 800d7ec:	40733333 	.word	0x40733333
 800d7f0:	4f16b4e3 	.word	0x4f16b4e3

0800d7f4 <_ZN8CALIPILE11initTempThrEt>:
	// select motion threshold
	writeByte(i2c_addr, CALIPILE_TP_PRES_THLD, 0x22);// presence threshold, set at 50 counts
	writeByte(i2c_addr, CALIPILE_TP_MOT_THLD, 0x0A);// motion threshold, set at 10 counts
}

void CALIPILE::initTempThr(uint16_t Tcounts) {
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af02      	add	r7, sp, #8
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	807b      	strh	r3, [r7, #2]
	uint8_t rawData[2] = {0, 0};
 800d800:	2300      	movs	r3, #0
 800d802:	813b      	strh	r3, [r7, #8]
	// specify the over temperature interrupt threshold (2 bytes)
	writeByte(i2c_addr, CALIPILE_TPOT_THR, Tcounts);// 0x83 means 67,072 counts as threshold
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	7a19      	ldrb	r1, [r3, #8]
 800d808:	887b      	ldrh	r3, [r7, #2]
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	221c      	movs	r2, #28
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f8e8 	bl	800d9e4 <_ZN8CALIPILE9writeByteEhhh>
	writeByte(i2c_addr, (CALIPILE_TPOT_THR + 1), 0x00);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	7a19      	ldrb	r1, [r3, #8]
 800d818:	2300      	movs	r3, #0
 800d81a:	221d      	movs	r2, #29
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 f8e1 	bl	800d9e4 <_ZN8CALIPILE9writeByteEhhh>
	uint8_t temp = readByte(i2c_addr, CALIPILE_SRC_SELECT);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	7a1b      	ldrb	r3, [r3, #8]
 800d826:	221a      	movs	r2, #26
 800d828:	4619      	mov	r1, r3
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f000 f8f1 	bl	800da12 <_ZN8CALIPILE8readByteEhh>
 800d830:	4603      	mov	r3, r0
 800d832:	73fb      	strb	r3, [r7, #15]
	writeByte(i2c_addr, CALIPILE_SRC_SELECT, temp | 0x10);// interrupt on exceeding threshold
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	7a19      	ldrb	r1, [r3, #8]
 800d838:	7bfb      	ldrb	r3, [r7, #15]
 800d83a:	f043 0310 	orr.w	r3, r3, #16
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	221a      	movs	r2, #26
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 f8ce 	bl	800d9e4 <_ZN8CALIPILE9writeByteEhhh>
	// Verify threshold set
	readBytes(i2c_addr, CALIPILE_TPOT_THR, 2, &rawData[0]);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	7a19      	ldrb	r1, [r3, #8]
 800d84c:	f107 0308 	add.w	r3, r7, #8
 800d850:	9300      	str	r3, [sp, #0]
 800d852:	2302      	movs	r3, #2
 800d854:	221c      	movs	r2, #28
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f000 f8f0 	bl	800da3c <_ZN8CALIPILE9readBytesEhhhPh>
	uint16_t TPOTTHR = ((uint16_t) rawData[0] << 8) | rawData[1];
 800d85c:	7a3b      	ldrb	r3, [r7, #8]
 800d85e:	021b      	lsls	r3, r3, #8
 800d860:	b21a      	sxth	r2, r3
 800d862:	7a7b      	ldrb	r3, [r7, #9]
 800d864:	b21b      	sxth	r3, r3
 800d866:	4313      	orrs	r3, r2
 800d868:	b21b      	sxth	r3, r3
 800d86a:	81bb      	strh	r3, [r7, #12]
	//Serial.print("Overtemp threshold = "); //Serial.println(TPOTTHR * 2);
}
 800d86c:	bf00      	nop
 800d86e:	3710      	adds	r7, #16
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <_ZN8CALIPILE8getTPAMBEv>:

uint16_t CALIPILE::getTPAMB() {
 800d874:	b580      	push	{r7, lr}
 800d876:	b086      	sub	sp, #24
 800d878:	af02      	add	r7, sp, #8
 800d87a:	6078      	str	r0, [r7, #4]
	uint8_t rawData[2] = {0, 0};
 800d87c:	2300      	movs	r3, #0
 800d87e:	81bb      	strh	r3, [r7, #12]
	readBytes(i2c_addr, CALIPILE_TPAMBIENT, 2, &rawData[0]);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	7a19      	ldrb	r1, [r3, #8]
 800d884:	f107 030c 	add.w	r3, r7, #12
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	2302      	movs	r3, #2
 800d88c:	2203      	movs	r2, #3
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 f8d4 	bl	800da3c <_ZN8CALIPILE9readBytesEhhhPh>
	uint16_t temp = ( (uint16_t)(rawData[0] & 0x7F) << 8) | rawData[1];
 800d894:	7b3b      	ldrb	r3, [r7, #12]
 800d896:	021b      	lsls	r3, r3, #8
 800d898:	b21b      	sxth	r3, r3
 800d89a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800d89e:	b21a      	sxth	r2, r3
 800d8a0:	7b7b      	ldrb	r3, [r7, #13]
 800d8a2:	b21b      	sxth	r3, r3
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	b21b      	sxth	r3, r3
 800d8a8:	81fb      	strh	r3, [r7, #14]
	return temp;
 800d8aa:	89fb      	ldrh	r3, [r7, #14]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <_ZN8CALIPILE8getTPOBJEv>:

uint32_t CALIPILE::getTPOBJ() {
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b086      	sub	sp, #24
 800d8b8:	af02      	add	r7, sp, #8
 800d8ba:	6078      	str	r0, [r7, #4]
	uint8_t rawData[3] = {0, 0, 0};
 800d8bc:	4b10      	ldr	r3, [pc, #64]	; (800d900 <_ZN8CALIPILE8getTPOBJEv+0x4c>)
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	723b      	strb	r3, [r7, #8]
 800d8c2:	f107 0309 	add.w	r3, r7, #9
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	801a      	strh	r2, [r3, #0]
	readBytes(i2c_addr, CALIPILE_TPOBJECT, 3, &rawData[0]);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	7a19      	ldrb	r1, [r3, #8]
 800d8ce:	f107 0308 	add.w	r3, r7, #8
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	2303      	movs	r3, #3
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f000 f8af 	bl	800da3c <_ZN8CALIPILE9readBytesEhhhPh>
	uint32_t temp = ( (uint32_t) ( (uint32_t)rawData[0] << 24) | ( (uint32_t)rawData[1] << 16) | ( (uint32_t)rawData[2] & 0x80) << 8) >> 15;
 800d8de:	7a3b      	ldrb	r3, [r7, #8]
 800d8e0:	061a      	lsls	r2, r3, #24
 800d8e2:	7a7b      	ldrb	r3, [r7, #9]
 800d8e4:	041b      	lsls	r3, r3, #16
 800d8e6:	431a      	orrs	r2, r3
 800d8e8:	7abb      	ldrb	r3, [r7, #10]
 800d8ea:	021b      	lsls	r3, r3, #8
 800d8ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	0bdb      	lsrs	r3, r3, #15
 800d8f4:	60fb      	str	r3, [r7, #12]
	return temp;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3710      	adds	r7, #16
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	08013138 	.word	0x08013138

0800d904 <_ZN8CALIPILE7getTambEt>:
uint8_t CALIPILE::getTPAMBSHK() {
	uint8_t temp = readByte(i2c_addr, CALIPILE_TPAMB_SHOCK);
	return temp;
}

float CALIPILE::getTamb(uint16_t TPAMB) {
 800d904:	b480      	push	{r7}
 800d906:	b085      	sub	sp, #20
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	460b      	mov	r3, r1
 800d90e:	807b      	strh	r3, [r7, #2]
	float temp = 298.15f + ((float)TPAMB - (float) _PTAT25) * (1.0f/(float) _M);
 800d910:	887b      	ldrh	r3, [r7, #2]
 800d912:	ee07 3a90 	vmov	s15, r3
 800d916:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	895b      	ldrh	r3, [r3, #10]
 800d91e:	ee07 3a90 	vmov	s15, r3
 800d922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d926:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	899b      	ldrh	r3, [r3, #12]
 800d92e:	ee07 3a90 	vmov	s15, r3
 800d932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d936:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d93a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800d93e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d942:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800d964 <_ZN8CALIPILE7getTambEt+0x60>
 800d946:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d94a:	edc7 7a03 	vstr	s15, [r7, #12]
	return temp;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	ee07 3a90 	vmov	s15, r3
}
 800d954:	eeb0 0a67 	vmov.f32	s0, s15
 800d958:	3714      	adds	r7, #20
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	43951333 	.word	0x43951333

0800d968 <_ZN8CALIPILE7getTobjEmf>:

float CALIPILE::getTobj(uint32_t TPOBJ, float Tamb) {
 800d968:	b580      	push	{r7, lr}
 800d96a:	b088      	sub	sp, #32
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	ed87 0a01 	vstr	s0, [r7, #4]
	float temp0 = powf(Tamb, 3.8f);
 800d976:	eddf 0a19 	vldr	s1, [pc, #100]	; 800d9dc <_ZN8CALIPILE7getTobjEmf+0x74>
 800d97a:	ed97 0a01 	vldr	s0, [r7, #4]
 800d97e:	f004 fe39 	bl	80125f4 <powf>
 800d982:	ed87 0a07 	vstr	s0, [r7, #28]
	float temp1 = ( ((float) TPOBJ) - ((float) _U0) ) / _k;
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	ee07 3a90 	vmov	s15, r3
 800d98c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	89db      	ldrh	r3, [r3, #14]
 800d994:	ee07 3a90 	vmov	s15, r3
 800d998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d99c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	ed93 7a07 	vldr	s14, [r3, #28]
 800d9a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9aa:	edc7 7a06 	vstr	s15, [r7, #24]
	float temp3 = powf( (temp0 + temp1), 0.2631578947f );
 800d9ae:	ed97 7a07 	vldr	s14, [r7, #28]
 800d9b2:	edd7 7a06 	vldr	s15, [r7, #24]
 800d9b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9ba:	eddf 0a09 	vldr	s1, [pc, #36]	; 800d9e0 <_ZN8CALIPILE7getTobjEmf+0x78>
 800d9be:	eeb0 0a67 	vmov.f32	s0, s15
 800d9c2:	f004 fe17 	bl	80125f4 <powf>
 800d9c6:	ed87 0a05 	vstr	s0, [r7, #20]
	return temp3;
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	ee07 3a90 	vmov	s15, r3
}
 800d9d0:	eeb0 0a67 	vmov.f32	s0, s15
 800d9d4:	3720      	adds	r7, #32
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	40733333 	.word	0x40733333
 800d9e0:	3e86bca2 	.word	0x3e86bca2

0800d9e4 <_ZN8CALIPILE9writeByteEhhh>:
//	//Serial.println("done\n");
//
//}

// I2C read/write functions for the BMP280 sensors
void CALIPILE::writeByte(uint8_t address, uint8_t subAddress, uint8_t data) {
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	4608      	mov	r0, r1
 800d9ee:	4611      	mov	r1, r2
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	70fb      	strb	r3, [r7, #3]
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	70bb      	strb	r3, [r7, #2]
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	707b      	strb	r3, [r7, #1]
	writeRegister(subAddress, &data, 1);
 800d9fe:	1c7a      	adds	r2, r7, #1
 800da00:	78b9      	ldrb	r1, [r7, #2]
 800da02:	2301      	movs	r3, #1
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 f85d 	bl	800dac4 <_ZN8CALIPILE13writeRegisterEhPht>
}
 800da0a:	bf00      	nop
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <_ZN8CALIPILE8readByteEhh>:

uint8_t CALIPILE::readByte(uint8_t address, uint8_t subAddress) {
 800da12:	b580      	push	{r7, lr}
 800da14:	b084      	sub	sp, #16
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	460b      	mov	r3, r1
 800da1c:	70fb      	strb	r3, [r7, #3]
 800da1e:	4613      	mov	r3, r2
 800da20:	70bb      	strb	r3, [r7, #2]
	uint8_t temp[1];
	readRegister(subAddress, &temp[0], 1);
 800da22:	78bb      	ldrb	r3, [r7, #2]
 800da24:	b299      	uxth	r1, r3
 800da26:	f107 020c 	add.w	r2, r7, #12
 800da2a:	2301      	movs	r3, #1
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 f81f 	bl	800da70 <_ZN8CALIPILE12readRegisterEtPht>
	return temp[0];
 800da32:	7b3b      	ldrb	r3, [r7, #12]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3710      	adds	r7, #16
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <_ZN8CALIPILE9readBytesEhhhPh>:

void CALIPILE::readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest) {
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	4608      	mov	r0, r1
 800da46:	4611      	mov	r1, r2
 800da48:	461a      	mov	r2, r3
 800da4a:	4603      	mov	r3, r0
 800da4c:	70fb      	strb	r3, [r7, #3]
 800da4e:	460b      	mov	r3, r1
 800da50:	70bb      	strb	r3, [r7, #2]
 800da52:	4613      	mov	r3, r2
 800da54:	707b      	strb	r3, [r7, #1]
	readRegister(subAddress, dest, count);
 800da56:	78bb      	ldrb	r3, [r7, #2]
 800da58:	b299      	uxth	r1, r3
 800da5a:	787b      	ldrb	r3, [r7, #1]
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	693a      	ldr	r2, [r7, #16]
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 f805 	bl	800da70 <_ZN8CALIPILE12readRegisterEtPht>
}
 800da66:	bf00      	nop
 800da68:	3708      	adds	r7, #8
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
	...

0800da70 <_ZN8CALIPILE12readRegisterEtPht>:
		return false;
	}
}

HAL_StatusTypeDef test;
bool CALIPILE::readRegister(uint16_t mem_addr, uint8_t *dest, uint16_t size) {
 800da70:	b580      	push	{r7, lr}
 800da72:	b088      	sub	sp, #32
 800da74:	af04      	add	r7, sp, #16
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	607a      	str	r2, [r7, #4]
 800da7a:	461a      	mov	r2, r3
 800da7c:	460b      	mov	r3, r1
 800da7e:	817b      	strh	r3, [r7, #10]
 800da80:	4613      	mov	r3, r2
 800da82:	813b      	strh	r3, [r7, #8]
	test = HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, dest, size, I2C_TIMEOUT);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	6858      	ldr	r0, [r3, #4]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	7a1b      	ldrb	r3, [r3, #8]
 800da8c:	b299      	uxth	r1, r3
 800da8e:	897a      	ldrh	r2, [r7, #10]
 800da90:	2364      	movs	r3, #100	; 0x64
 800da92:	9302      	str	r3, [sp, #8]
 800da94:	893b      	ldrh	r3, [r7, #8]
 800da96:	9301      	str	r3, [sp, #4]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	9300      	str	r3, [sp, #0]
 800da9c:	2301      	movs	r3, #1
 800da9e:	f7f5 fc6d 	bl	800337c <HAL_I2C_Mem_Read>
 800daa2:	4603      	mov	r3, r0
 800daa4:	461a      	mov	r2, r3
 800daa6:	4b06      	ldr	r3, [pc, #24]	; (800dac0 <_ZN8CALIPILE12readRegisterEtPht+0x50>)
 800daa8:	701a      	strb	r2, [r3, #0]
	if (HAL_OK
			== test) {
 800daaa:	4b05      	ldr	r3, [pc, #20]	; (800dac0 <_ZN8CALIPILE12readRegisterEtPht+0x50>)
 800daac:	781b      	ldrb	r3, [r3, #0]
	if (HAL_OK
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d101      	bne.n	800dab6 <_ZN8CALIPILE12readRegisterEtPht+0x46>
		return true;
 800dab2:	2301      	movs	r3, #1
 800dab4:	e000      	b.n	800dab8 <_ZN8CALIPILE12readRegisterEtPht+0x48>
	} else {
		return false;
 800dab6:	2300      	movs	r3, #0
	}
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	20000529 	.word	0x20000529

0800dac4 <_ZN8CALIPILE13writeRegisterEhPht>:

bool CALIPILE::writeRegister(uint8_t mem_addr, uint8_t *val, uint16_t size) {
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b088      	sub	sp, #32
 800dac8:	af04      	add	r7, sp, #16
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	607a      	str	r2, [r7, #4]
 800dace:	461a      	mov	r2, r3
 800dad0:	460b      	mov	r3, r1
 800dad2:	72fb      	strb	r3, [r7, #11]
 800dad4:	4613      	mov	r3, r2
 800dad6:	813b      	strh	r3, [r7, #8]
	if (HAL_OK
			== HAL_I2C_Mem_Write(i2c_han, i2c_addr, mem_addr, 1, val, size, I2C_TIMEOUT)) {
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	6858      	ldr	r0, [r3, #4]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	7a1b      	ldrb	r3, [r3, #8]
 800dae0:	b299      	uxth	r1, r3
 800dae2:	7afb      	ldrb	r3, [r7, #11]
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	2364      	movs	r3, #100	; 0x64
 800dae8:	9302      	str	r3, [sp, #8]
 800daea:	893b      	ldrh	r3, [r7, #8]
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	2301      	movs	r3, #1
 800daf4:	f7f5 fb2e 	bl	8003154 <HAL_I2C_Mem_Write>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	bf0c      	ite	eq
 800dafe:	2301      	moveq	r3, #1
 800db00:	2300      	movne	r3, #0
 800db02:	b2db      	uxtb	r3, r3
	if (HAL_OK
 800db04:	2b00      	cmp	r3, #0
 800db06:	d001      	beq.n	800db0c <_ZN8CALIPILE13writeRegisterEhPht+0x48>
		return true;
 800db08:	2301      	movs	r3, #1
 800db0a:	e000      	b.n	800db0e <_ZN8CALIPILE13writeRegisterEhPht+0x4a>
	} else {
		return false;
 800db0c:	2300      	movs	r3, #0
	}
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
	...

0800db18 <__NVIC_SetPriority>:
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	4603      	mov	r3, r0
 800db20:	6039      	str	r1, [r7, #0]
 800db22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	db0a      	blt.n	800db42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	490c      	ldr	r1, [pc, #48]	; (800db64 <__NVIC_SetPriority+0x4c>)
 800db32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db36:	0112      	lsls	r2, r2, #4
 800db38:	b2d2      	uxtb	r2, r2
 800db3a:	440b      	add	r3, r1
 800db3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800db40:	e00a      	b.n	800db58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	b2da      	uxtb	r2, r3
 800db46:	4908      	ldr	r1, [pc, #32]	; (800db68 <__NVIC_SetPriority+0x50>)
 800db48:	79fb      	ldrb	r3, [r7, #7]
 800db4a:	f003 030f 	and.w	r3, r3, #15
 800db4e:	3b04      	subs	r3, #4
 800db50:	0112      	lsls	r2, r2, #4
 800db52:	b2d2      	uxtb	r2, r2
 800db54:	440b      	add	r3, r1
 800db56:	761a      	strb	r2, [r3, #24]
}
 800db58:	bf00      	nop
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr
 800db64:	e000e100 	.word	0xe000e100
 800db68:	e000ed00 	.word	0xe000ed00

0800db6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800db6c:	b580      	push	{r7, lr}
 800db6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800db70:	4b05      	ldr	r3, [pc, #20]	; (800db88 <SysTick_Handler+0x1c>)
 800db72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800db74:	f002 fbee 	bl	8010354 <xTaskGetSchedulerState>
 800db78:	4603      	mov	r3, r0
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d001      	beq.n	800db82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800db7e:	f003 fd93 	bl	80116a8 <xPortSysTickHandler>
  }
}
 800db82:	bf00      	nop
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	e000e010 	.word	0xe000e010

0800db8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800db8c:	b580      	push	{r7, lr}
 800db8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800db90:	2100      	movs	r1, #0
 800db92:	f06f 0004 	mvn.w	r0, #4
 800db96:	f7ff ffbf 	bl	800db18 <__NVIC_SetPriority>
#endif
}
 800db9a:	bf00      	nop
 800db9c:	bd80      	pop	{r7, pc}
	...

0800dba0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dba0:	b480      	push	{r7}
 800dba2:	b083      	sub	sp, #12
 800dba4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dba6:	f3ef 8305 	mrs	r3, IPSR
 800dbaa:	603b      	str	r3, [r7, #0]
  return(result);
 800dbac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d003      	beq.n	800dbba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dbb2:	f06f 0305 	mvn.w	r3, #5
 800dbb6:	607b      	str	r3, [r7, #4]
 800dbb8:	e00c      	b.n	800dbd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dbba:	4b0a      	ldr	r3, [pc, #40]	; (800dbe4 <osKernelInitialize+0x44>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d105      	bne.n	800dbce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dbc2:	4b08      	ldr	r3, [pc, #32]	; (800dbe4 <osKernelInitialize+0x44>)
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	607b      	str	r3, [r7, #4]
 800dbcc:	e002      	b.n	800dbd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dbce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dbd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dbd4:	687b      	ldr	r3, [r7, #4]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	370c      	adds	r7, #12
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	2000052c 	.word	0x2000052c

0800dbe8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbee:	f3ef 8305 	mrs	r3, IPSR
 800dbf2:	603b      	str	r3, [r7, #0]
  return(result);
 800dbf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d003      	beq.n	800dc02 <osKernelStart+0x1a>
    stat = osErrorISR;
 800dbfa:	f06f 0305 	mvn.w	r3, #5
 800dbfe:	607b      	str	r3, [r7, #4]
 800dc00:	e010      	b.n	800dc24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dc02:	4b0b      	ldr	r3, [pc, #44]	; (800dc30 <osKernelStart+0x48>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d109      	bne.n	800dc1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dc0a:	f7ff ffbf 	bl	800db8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dc0e:	4b08      	ldr	r3, [pc, #32]	; (800dc30 <osKernelStart+0x48>)
 800dc10:	2202      	movs	r2, #2
 800dc12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dc14:	f001 ff42 	bl	800fa9c <vTaskStartScheduler>
      stat = osOK;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	607b      	str	r3, [r7, #4]
 800dc1c:	e002      	b.n	800dc24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dc1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc24:	687b      	ldr	r3, [r7, #4]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3708      	adds	r7, #8
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	2000052c 	.word	0x2000052c

0800dc34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b08e      	sub	sp, #56	; 0x38
 800dc38:	af04      	add	r7, sp, #16
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dc40:	2300      	movs	r3, #0
 800dc42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc44:	f3ef 8305 	mrs	r3, IPSR
 800dc48:	617b      	str	r3, [r7, #20]
  return(result);
 800dc4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d17e      	bne.n	800dd4e <osThreadNew+0x11a>
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d07b      	beq.n	800dd4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dc56:	2380      	movs	r3, #128	; 0x80
 800dc58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dc5a:	2318      	movs	r3, #24
 800dc5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dc62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d045      	beq.n	800dcfa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d002      	beq.n	800dc7c <osThreadNew+0x48>
        name = attr->name;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	699b      	ldr	r3, [r3, #24]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d002      	beq.n	800dc8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	699b      	ldr	r3, [r3, #24]
 800dc88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d008      	beq.n	800dca2 <osThreadNew+0x6e>
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	2b38      	cmp	r3, #56	; 0x38
 800dc94:	d805      	bhi.n	800dca2 <osThreadNew+0x6e>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	f003 0301 	and.w	r3, r3, #1
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <osThreadNew+0x72>
        return (NULL);
 800dca2:	2300      	movs	r3, #0
 800dca4:	e054      	b.n	800dd50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	695b      	ldr	r3, [r3, #20]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d003      	beq.n	800dcb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	695b      	ldr	r3, [r3, #20]
 800dcb2:	089b      	lsrs	r3, r3, #2
 800dcb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	689b      	ldr	r3, [r3, #8]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00e      	beq.n	800dcdc <osThreadNew+0xa8>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	2bbb      	cmp	r3, #187	; 0xbb
 800dcc4:	d90a      	bls.n	800dcdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d006      	beq.n	800dcdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	695b      	ldr	r3, [r3, #20]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d002      	beq.n	800dcdc <osThreadNew+0xa8>
        mem = 1;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	61bb      	str	r3, [r7, #24]
 800dcda:	e010      	b.n	800dcfe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10c      	bne.n	800dcfe <osThreadNew+0xca>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d108      	bne.n	800dcfe <osThreadNew+0xca>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	691b      	ldr	r3, [r3, #16]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d104      	bne.n	800dcfe <osThreadNew+0xca>
          mem = 0;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	61bb      	str	r3, [r7, #24]
 800dcf8:	e001      	b.n	800dcfe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d110      	bne.n	800dd26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd0c:	9202      	str	r2, [sp, #8]
 800dd0e:	9301      	str	r3, [sp, #4]
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	6a3a      	ldr	r2, [r7, #32]
 800dd18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f001 fcd2 	bl	800f6c4 <xTaskCreateStatic>
 800dd20:	4603      	mov	r3, r0
 800dd22:	613b      	str	r3, [r7, #16]
 800dd24:	e013      	b.n	800dd4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d110      	bne.n	800dd4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dd2c:	6a3b      	ldr	r3, [r7, #32]
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	f107 0310 	add.w	r3, r7, #16
 800dd34:	9301      	str	r3, [sp, #4]
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd3e:	68f8      	ldr	r0, [r7, #12]
 800dd40:	f001 fd1d 	bl	800f77e <xTaskCreate>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d001      	beq.n	800dd4e <osThreadNew+0x11a>
            hTask = NULL;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dd4e:	693b      	ldr	r3, [r7, #16]
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3728      	adds	r7, #40	; 0x28
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b088      	sub	sp, #32
 800dd5c:	af02      	add	r7, sp, #8
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d002      	beq.n	800dd72 <osThreadFlagsSet+0x1a>
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	da03      	bge.n	800dd7a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800dd72:	f06f 0303 	mvn.w	r3, #3
 800dd76:	60fb      	str	r3, [r7, #12]
 800dd78:	e035      	b.n	800dde6 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800dd7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd80:	f3ef 8305 	mrs	r3, IPSR
 800dd84:	613b      	str	r3, [r7, #16]
  return(result);
 800dd86:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d01f      	beq.n	800ddcc <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800dd90:	f107 0308 	add.w	r3, r7, #8
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	2300      	movs	r3, #0
 800dd98:	2201      	movs	r2, #1
 800dd9a:	6839      	ldr	r1, [r7, #0]
 800dd9c:	6978      	ldr	r0, [r7, #20]
 800dd9e:	f002 fd81 	bl	80108a4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800dda2:	f107 030c 	add.w	r3, r7, #12
 800dda6:	2200      	movs	r2, #0
 800dda8:	9200      	str	r2, [sp, #0]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	2100      	movs	r1, #0
 800ddae:	6978      	ldr	r0, [r7, #20]
 800ddb0:	f002 fd78 	bl	80108a4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d015      	beq.n	800dde6 <osThreadFlagsSet+0x8e>
 800ddba:	4b0d      	ldr	r3, [pc, #52]	; (800ddf0 <osThreadFlagsSet+0x98>)
 800ddbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddc0:	601a      	str	r2, [r3, #0]
 800ddc2:	f3bf 8f4f 	dsb	sy
 800ddc6:	f3bf 8f6f 	isb	sy
 800ddca:	e00c      	b.n	800dde6 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800ddcc:	2300      	movs	r3, #0
 800ddce:	2201      	movs	r2, #1
 800ddd0:	6839      	ldr	r1, [r7, #0]
 800ddd2:	6978      	ldr	r0, [r7, #20]
 800ddd4:	f002 fca8 	bl	8010728 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800ddd8:	f107 030c 	add.w	r3, r7, #12
 800dddc:	2200      	movs	r2, #0
 800ddde:	2100      	movs	r1, #0
 800dde0:	6978      	ldr	r0, [r7, #20]
 800dde2:	f002 fca1 	bl	8010728 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800dde6:	68fb      	ldr	r3, [r7, #12]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3718      	adds	r7, #24
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	e000ed04 	.word	0xe000ed04

0800ddf4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b08c      	sub	sp, #48	; 0x30
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de00:	f3ef 8305 	mrs	r3, IPSR
 800de04:	617b      	str	r3, [r7, #20]
  return(result);
 800de06:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d003      	beq.n	800de14 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800de0c:	f06f 0305 	mvn.w	r3, #5
 800de10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de12:	e06b      	b.n	800deec <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2b00      	cmp	r3, #0
 800de18:	da03      	bge.n	800de22 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800de1a:	f06f 0303 	mvn.w	r3, #3
 800de1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de20:	e064      	b.n	800deec <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	f003 0302 	and.w	r3, r3, #2
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d002      	beq.n	800de32 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800de2c:	2300      	movs	r3, #0
 800de2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800de30:	e001      	b.n	800de36 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800de36:	2300      	movs	r3, #0
 800de38:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800de3e:	f001 ff49 	bl	800fcd4 <xTaskGetTickCount>
 800de42:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800de44:	f107 0210 	add.w	r2, r7, #16
 800de48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de4c:	2000      	movs	r0, #0
 800de4e:	f002 fc0b 	bl	8010668 <xTaskNotifyWait>
 800de52:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800de54:	69fb      	ldr	r3, [r7, #28]
 800de56:	2b01      	cmp	r3, #1
 800de58:	d137      	bne.n	800deca <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800de5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	4013      	ands	r3, r2
 800de60:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de66:	4313      	orrs	r3, r2
 800de68:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	f003 0301 	and.w	r3, r3, #1
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00c      	beq.n	800de8e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800de74:	68fa      	ldr	r2, [r7, #12]
 800de76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de78:	4013      	ands	r3, r2
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d032      	beq.n	800dee6 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d10f      	bne.n	800dea6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800de86:	f06f 0302 	mvn.w	r3, #2
 800de8a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800de8c:	e02e      	b.n	800deec <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de92:	4013      	ands	r3, r2
 800de94:	2b00      	cmp	r3, #0
 800de96:	d128      	bne.n	800deea <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d103      	bne.n	800dea6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800de9e:	f06f 0302 	mvn.w	r3, #2
 800dea2:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800dea4:	e022      	b.n	800deec <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800dea6:	f001 ff15 	bl	800fcd4 <xTaskGetTickCount>
 800deaa:	4602      	mov	r2, r0
 800deac:	6a3b      	ldr	r3, [r7, #32]
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800deb2:	69ba      	ldr	r2, [r7, #24]
 800deb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d902      	bls.n	800dec0 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800deba:	2300      	movs	r3, #0
 800debc:	627b      	str	r3, [r7, #36]	; 0x24
 800debe:	e00e      	b.n	800dede <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800dec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dec2:	69bb      	ldr	r3, [r7, #24]
 800dec4:	1ad3      	subs	r3, r2, r3
 800dec6:	627b      	str	r3, [r7, #36]	; 0x24
 800dec8:	e009      	b.n	800dede <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d103      	bne.n	800ded8 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800ded0:	f06f 0302 	mvn.w	r3, #2
 800ded4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ded6:	e002      	b.n	800dede <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800ded8:	f06f 0301 	mvn.w	r3, #1
 800dedc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d1af      	bne.n	800de44 <osThreadFlagsWait+0x50>
 800dee4:	e002      	b.n	800deec <osThreadFlagsWait+0xf8>
            break;
 800dee6:	bf00      	nop
 800dee8:	e000      	b.n	800deec <osThreadFlagsWait+0xf8>
            break;
 800deea:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800deec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800deee:	4618      	mov	r0, r3
 800def0:	3730      	adds	r7, #48	; 0x30
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}

0800def6 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800def6:	b580      	push	{r7, lr}
 800def8:	b084      	sub	sp, #16
 800defa:	af00      	add	r7, sp, #0
 800defc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800defe:	f3ef 8305 	mrs	r3, IPSR
 800df02:	60bb      	str	r3, [r7, #8]
  return(result);
 800df04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df06:	2b00      	cmp	r3, #0
 800df08:	d003      	beq.n	800df12 <osDelay+0x1c>
    stat = osErrorISR;
 800df0a:	f06f 0305 	mvn.w	r3, #5
 800df0e:	60fb      	str	r3, [r7, #12]
 800df10:	e007      	b.n	800df22 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800df12:	2300      	movs	r3, #0
 800df14:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d002      	beq.n	800df22 <osDelay+0x2c>
      vTaskDelay(ticks);
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f001 fd89 	bl	800fa34 <vTaskDelay>
    }
  }

  return (stat);
 800df22:	68fb      	ldr	r3, [r7, #12]
}
 800df24:	4618      	mov	r0, r3
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f003 f9d5 	bl	80112e4 <pvTimerGetTimerID>
 800df3a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d005      	beq.n	800df4e <TimerCallback+0x22>
    callb->func (callb->arg);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	68fa      	ldr	r2, [r7, #12]
 800df48:	6852      	ldr	r2, [r2, #4]
 800df4a:	4610      	mov	r0, r2
 800df4c:	4798      	blx	r3
  }
}
 800df4e:	bf00      	nop
 800df50:	3710      	adds	r7, #16
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
	...

0800df58 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08c      	sub	sp, #48	; 0x30
 800df5c:	af02      	add	r7, sp, #8
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	607a      	str	r2, [r7, #4]
 800df62:	603b      	str	r3, [r7, #0]
 800df64:	460b      	mov	r3, r1
 800df66:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800df68:	2300      	movs	r3, #0
 800df6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df6c:	f3ef 8305 	mrs	r3, IPSR
 800df70:	613b      	str	r3, [r7, #16]
  return(result);
 800df72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800df74:	2b00      	cmp	r3, #0
 800df76:	d163      	bne.n	800e040 <osTimerNew+0xe8>
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d060      	beq.n	800e040 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800df7e:	2008      	movs	r0, #8
 800df80:	f003 fc22 	bl	80117c8 <pvPortMalloc>
 800df84:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d059      	beq.n	800e040 <osTimerNew+0xe8>
      callb->func = func;
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	68fa      	ldr	r2, [r7, #12]
 800df90:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800df98:	7afb      	ldrb	r3, [r7, #11]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d102      	bne.n	800dfa4 <osTimerNew+0x4c>
        reload = pdFALSE;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	61fb      	str	r3, [r7, #28]
 800dfa2:	e001      	b.n	800dfa8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800dfa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfac:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d01c      	beq.n	800dff2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <osTimerNew+0x6e>
          name = attr->name;
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	689b      	ldr	r3, [r3, #8]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d006      	beq.n	800dfdc <osTimerNew+0x84>
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	68db      	ldr	r3, [r3, #12]
 800dfd2:	2b2b      	cmp	r3, #43	; 0x2b
 800dfd4:	d902      	bls.n	800dfdc <osTimerNew+0x84>
          mem = 1;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	61bb      	str	r3, [r7, #24]
 800dfda:	e00c      	b.n	800dff6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	689b      	ldr	r3, [r3, #8]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d108      	bne.n	800dff6 <osTimerNew+0x9e>
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d104      	bne.n	800dff6 <osTimerNew+0x9e>
            mem = 0;
 800dfec:	2300      	movs	r3, #0
 800dfee:	61bb      	str	r3, [r7, #24]
 800dff0:	e001      	b.n	800dff6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800dff2:	2300      	movs	r3, #0
 800dff4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d10c      	bne.n	800e016 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	9301      	str	r3, [sp, #4]
 800e002:	4b12      	ldr	r3, [pc, #72]	; (800e04c <osTimerNew+0xf4>)
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	69fa      	ldr	r2, [r7, #28]
 800e00a:	2101      	movs	r1, #1
 800e00c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e00e:	f002 fdea 	bl	8010be6 <xTimerCreateStatic>
 800e012:	6238      	str	r0, [r7, #32]
 800e014:	e00b      	b.n	800e02e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d108      	bne.n	800e02e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e01c:	4b0b      	ldr	r3, [pc, #44]	; (800e04c <osTimerNew+0xf4>)
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	69fa      	ldr	r2, [r7, #28]
 800e024:	2101      	movs	r1, #1
 800e026:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e028:	f002 fdbc 	bl	8010ba4 <xTimerCreate>
 800e02c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800e02e:	6a3b      	ldr	r3, [r7, #32]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d105      	bne.n	800e040 <osTimerNew+0xe8>
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d002      	beq.n	800e040 <osTimerNew+0xe8>
        vPortFree (callb);
 800e03a:	6978      	ldr	r0, [r7, #20]
 800e03c:	f003 fc90 	bl	8011960 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e040:	6a3b      	ldr	r3, [r7, #32]
}
 800e042:	4618      	mov	r0, r3
 800e044:	3728      	adds	r7, #40	; 0x28
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	0800df2d 	.word	0x0800df2d

0800e050 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800e050:	b580      	push	{r7, lr}
 800e052:	b088      	sub	sp, #32
 800e054:	af02      	add	r7, sp, #8
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e05e:	f3ef 8305 	mrs	r3, IPSR
 800e062:	60fb      	str	r3, [r7, #12]
  return(result);
 800e064:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e066:	2b00      	cmp	r3, #0
 800e068:	d003      	beq.n	800e072 <osTimerStart+0x22>
    stat = osErrorISR;
 800e06a:	f06f 0305 	mvn.w	r3, #5
 800e06e:	617b      	str	r3, [r7, #20]
 800e070:	e017      	b.n	800e0a2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d103      	bne.n	800e080 <osTimerStart+0x30>
    stat = osErrorParameter;
 800e078:	f06f 0303 	mvn.w	r3, #3
 800e07c:	617b      	str	r3, [r7, #20]
 800e07e:	e010      	b.n	800e0a2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800e080:	2300      	movs	r3, #0
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	2300      	movs	r3, #0
 800e086:	683a      	ldr	r2, [r7, #0]
 800e088:	2104      	movs	r1, #4
 800e08a:	6938      	ldr	r0, [r7, #16]
 800e08c:	f002 fe24 	bl	8010cd8 <xTimerGenericCommand>
 800e090:	4603      	mov	r3, r0
 800e092:	2b01      	cmp	r3, #1
 800e094:	d102      	bne.n	800e09c <osTimerStart+0x4c>
      stat = osOK;
 800e096:	2300      	movs	r3, #0
 800e098:	617b      	str	r3, [r7, #20]
 800e09a:	e002      	b.n	800e0a2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800e09c:	f06f 0302 	mvn.w	r3, #2
 800e0a0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e0a2:	697b      	ldr	r3, [r7, #20]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3718      	adds	r7, #24
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <osTimerDelete>:
  }

  return (running);
}

osStatus_t osTimerDelete (osTimerId_t timer_id) {
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b088      	sub	sp, #32
 800e0b0:	af02      	add	r7, sp, #8
 800e0b2:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0b8:	f3ef 8305 	mrs	r3, IPSR
 800e0bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800e0be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  TimerCallback_t *callb;

  if (IS_IRQ()) {
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d003      	beq.n	800e0cc <osTimerDelete+0x20>
    stat = osErrorISR;
 800e0c4:	f06f 0305 	mvn.w	r3, #5
 800e0c8:	617b      	str	r3, [r7, #20]
 800e0ca:	e01e      	b.n	800e10a <osTimerDelete+0x5e>
  }
  else if (hTimer == NULL) {
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d103      	bne.n	800e0da <osTimerDelete+0x2e>
    stat = osErrorParameter;
 800e0d2:	f06f 0303 	mvn.w	r3, #3
 800e0d6:	617b      	str	r3, [r7, #20]
 800e0d8:	e017      	b.n	800e10a <osTimerDelete+0x5e>
  }
  else {
    callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800e0da:	6938      	ldr	r0, [r7, #16]
 800e0dc:	f003 f902 	bl	80112e4 <pvTimerGetTimerID>
 800e0e0:	60f8      	str	r0, [r7, #12]

    if (xTimerDelete (hTimer, 0) == pdPASS) {
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	2105      	movs	r1, #5
 800e0ec:	6938      	ldr	r0, [r7, #16]
 800e0ee:	f002 fdf3 	bl	8010cd8 <xTimerGenericCommand>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d105      	bne.n	800e104 <osTimerDelete+0x58>
      vPortFree (callb);
 800e0f8:	68f8      	ldr	r0, [r7, #12]
 800e0fa:	f003 fc31 	bl	8011960 <vPortFree>
      stat = osOK;
 800e0fe:	2300      	movs	r3, #0
 800e100:	617b      	str	r3, [r7, #20]
 800e102:	e002      	b.n	800e10a <osTimerDelete+0x5e>
    } else {
      stat = osErrorResource;
 800e104:	f06f 0302 	mvn.w	r3, #2
 800e108:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800e10a:	697b      	ldr	r3, [r7, #20]
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3718      	adds	r7, #24
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e114:	b580      	push	{r7, lr}
 800e116:	b088      	sub	sp, #32
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e11c:	2300      	movs	r3, #0
 800e11e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e120:	f3ef 8305 	mrs	r3, IPSR
 800e124:	60bb      	str	r3, [r7, #8]
  return(result);
 800e126:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d174      	bne.n	800e216 <osMutexNew+0x102>
    if (attr != NULL) {
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d003      	beq.n	800e13a <osMutexNew+0x26>
      type = attr->attr_bits;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	61bb      	str	r3, [r7, #24]
 800e138:	e001      	b.n	800e13e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800e13a:	2300      	movs	r3, #0
 800e13c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	f003 0301 	and.w	r3, r3, #1
 800e144:	2b00      	cmp	r3, #0
 800e146:	d002      	beq.n	800e14e <osMutexNew+0x3a>
      rmtx = 1U;
 800e148:	2301      	movs	r3, #1
 800e14a:	617b      	str	r3, [r7, #20]
 800e14c:	e001      	b.n	800e152 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800e14e:	2300      	movs	r3, #0
 800e150:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	f003 0308 	and.w	r3, r3, #8
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d15c      	bne.n	800e216 <osMutexNew+0x102>
      mem = -1;
 800e15c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e160:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d015      	beq.n	800e194 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d006      	beq.n	800e17e <osMutexNew+0x6a>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	2b4f      	cmp	r3, #79	; 0x4f
 800e176:	d902      	bls.n	800e17e <osMutexNew+0x6a>
          mem = 1;
 800e178:	2301      	movs	r3, #1
 800e17a:	613b      	str	r3, [r7, #16]
 800e17c:	e00c      	b.n	800e198 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	689b      	ldr	r3, [r3, #8]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d108      	bne.n	800e198 <osMutexNew+0x84>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d104      	bne.n	800e198 <osMutexNew+0x84>
            mem = 0;
 800e18e:	2300      	movs	r3, #0
 800e190:	613b      	str	r3, [r7, #16]
 800e192:	e001      	b.n	800e198 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800e194:	2300      	movs	r3, #0
 800e196:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d112      	bne.n	800e1c4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d007      	beq.n	800e1b4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	689b      	ldr	r3, [r3, #8]
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	2004      	movs	r0, #4
 800e1ac:	f000 fc57 	bl	800ea5e <xQueueCreateMutexStatic>
 800e1b0:	61f8      	str	r0, [r7, #28]
 800e1b2:	e016      	b.n	800e1e2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	689b      	ldr	r3, [r3, #8]
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	2001      	movs	r0, #1
 800e1bc:	f000 fc4f 	bl	800ea5e <xQueueCreateMutexStatic>
 800e1c0:	61f8      	str	r0, [r7, #28]
 800e1c2:	e00e      	b.n	800e1e2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d10b      	bne.n	800e1e2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d004      	beq.n	800e1da <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e1d0:	2004      	movs	r0, #4
 800e1d2:	f000 fc2c 	bl	800ea2e <xQueueCreateMutex>
 800e1d6:	61f8      	str	r0, [r7, #28]
 800e1d8:	e003      	b.n	800e1e2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800e1da:	2001      	movs	r0, #1
 800e1dc:	f000 fc27 	bl	800ea2e <xQueueCreateMutex>
 800e1e0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00c      	beq.n	800e202 <osMutexNew+0xee>
        if (attr != NULL) {
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d003      	beq.n	800e1f6 <osMutexNew+0xe2>
          name = attr->name;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	60fb      	str	r3, [r7, #12]
 800e1f4:	e001      	b.n	800e1fa <osMutexNew+0xe6>
        } else {
          name = NULL;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800e1fa:	68f9      	ldr	r1, [r7, #12]
 800e1fc:	69f8      	ldr	r0, [r7, #28]
 800e1fe:	f001 fa03 	bl	800f608 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d006      	beq.n	800e216 <osMutexNew+0x102>
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d003      	beq.n	800e216 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	f043 0301 	orr.w	r3, r3, #1
 800e214:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e216:	69fb      	ldr	r3, [r7, #28]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3720      	adds	r7, #32
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <osSemaphoreAcquire>:
  }

  return ((osSemaphoreId_t)hSemaphore);
}

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e220:	b580      	push	{r7, lr}
 800e222:	b086      	sub	sp, #24
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e22e:	2300      	movs	r3, #0
 800e230:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d103      	bne.n	800e240 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e238:	f06f 0303 	mvn.w	r3, #3
 800e23c:	617b      	str	r3, [r7, #20]
 800e23e:	e039      	b.n	800e2b4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e240:	f3ef 8305 	mrs	r3, IPSR
 800e244:	60fb      	str	r3, [r7, #12]
  return(result);
 800e246:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d022      	beq.n	800e292 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d003      	beq.n	800e25a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e252:	f06f 0303 	mvn.w	r3, #3
 800e256:	617b      	str	r3, [r7, #20]
 800e258:	e02c      	b.n	800e2b4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e25a:	2300      	movs	r3, #0
 800e25c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e25e:	f107 0308 	add.w	r3, r7, #8
 800e262:	461a      	mov	r2, r3
 800e264:	2100      	movs	r1, #0
 800e266:	6938      	ldr	r0, [r7, #16]
 800e268:	f001 f826 	bl	800f2b8 <xQueueReceiveFromISR>
 800e26c:	4603      	mov	r3, r0
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d003      	beq.n	800e27a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e272:	f06f 0302 	mvn.w	r3, #2
 800e276:	617b      	str	r3, [r7, #20]
 800e278:	e01c      	b.n	800e2b4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d019      	beq.n	800e2b4 <osSemaphoreAcquire+0x94>
 800e280:	4b0f      	ldr	r3, [pc, #60]	; (800e2c0 <osSemaphoreAcquire+0xa0>)
 800e282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e286:	601a      	str	r2, [r3, #0]
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	f3bf 8f6f 	isb	sy
 800e290:	e010      	b.n	800e2b4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e292:	6839      	ldr	r1, [r7, #0]
 800e294:	6938      	ldr	r0, [r7, #16]
 800e296:	f000 ff03 	bl	800f0a0 <xQueueSemaphoreTake>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d009      	beq.n	800e2b4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d003      	beq.n	800e2ae <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e2a6:	f06f 0301 	mvn.w	r3, #1
 800e2aa:	617b      	str	r3, [r7, #20]
 800e2ac:	e002      	b.n	800e2b4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e2ae:	f06f 0302 	mvn.w	r3, #2
 800e2b2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e2b4:	697b      	ldr	r3, [r7, #20]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3718      	adds	r7, #24
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	e000ed04 	.word	0xe000ed04

0800e2c4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b086      	sub	sp, #24
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d103      	bne.n	800e2e2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e2da:	f06f 0303 	mvn.w	r3, #3
 800e2de:	617b      	str	r3, [r7, #20]
 800e2e0:	e02c      	b.n	800e33c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2e2:	f3ef 8305 	mrs	r3, IPSR
 800e2e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d01a      	beq.n	800e324 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e2f2:	f107 0308 	add.w	r3, r7, #8
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	6938      	ldr	r0, [r7, #16]
 800e2fa:	f000 fd64 	bl	800edc6 <xQueueGiveFromISR>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b01      	cmp	r3, #1
 800e302:	d003      	beq.n	800e30c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e304:	f06f 0302 	mvn.w	r3, #2
 800e308:	617b      	str	r3, [r7, #20]
 800e30a:	e017      	b.n	800e33c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d014      	beq.n	800e33c <osSemaphoreRelease+0x78>
 800e312:	4b0d      	ldr	r3, [pc, #52]	; (800e348 <osSemaphoreRelease+0x84>)
 800e314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e318:	601a      	str	r2, [r3, #0]
 800e31a:	f3bf 8f4f 	dsb	sy
 800e31e:	f3bf 8f6f 	isb	sy
 800e322:	e00b      	b.n	800e33c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e324:	2300      	movs	r3, #0
 800e326:	2200      	movs	r2, #0
 800e328:	2100      	movs	r1, #0
 800e32a:	6938      	ldr	r0, [r7, #16]
 800e32c:	f000 fbb2 	bl	800ea94 <xQueueGenericSend>
 800e330:	4603      	mov	r3, r0
 800e332:	2b01      	cmp	r3, #1
 800e334:	d002      	beq.n	800e33c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e336:	f06f 0302 	mvn.w	r3, #2
 800e33a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e33c:	697b      	ldr	r3, [r7, #20]
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3718      	adds	r7, #24
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	e000ed04 	.word	0xe000ed04

0800e34c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b08a      	sub	sp, #40	; 0x28
 800e350:	af02      	add	r7, sp, #8
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e358:	2300      	movs	r3, #0
 800e35a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e35c:	f3ef 8305 	mrs	r3, IPSR
 800e360:	613b      	str	r3, [r7, #16]
  return(result);
 800e362:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e364:	2b00      	cmp	r3, #0
 800e366:	d15f      	bne.n	800e428 <osMessageQueueNew+0xdc>
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d05c      	beq.n	800e428 <osMessageQueueNew+0xdc>
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d059      	beq.n	800e428 <osMessageQueueNew+0xdc>
    mem = -1;
 800e374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e378:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d029      	beq.n	800e3d4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	689b      	ldr	r3, [r3, #8]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d012      	beq.n	800e3ae <osMessageQueueNew+0x62>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	2b4f      	cmp	r3, #79	; 0x4f
 800e38e:	d90e      	bls.n	800e3ae <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00a      	beq.n	800e3ae <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	695a      	ldr	r2, [r3, #20]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	68b9      	ldr	r1, [r7, #8]
 800e3a0:	fb01 f303 	mul.w	r3, r1, r3
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d302      	bcc.n	800e3ae <osMessageQueueNew+0x62>
        mem = 1;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	61bb      	str	r3, [r7, #24]
 800e3ac:	e014      	b.n	800e3d8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	689b      	ldr	r3, [r3, #8]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d110      	bne.n	800e3d8 <osMessageQueueNew+0x8c>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10c      	bne.n	800e3d8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d108      	bne.n	800e3d8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	695b      	ldr	r3, [r3, #20]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d104      	bne.n	800e3d8 <osMessageQueueNew+0x8c>
          mem = 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	61bb      	str	r3, [r7, #24]
 800e3d2:	e001      	b.n	800e3d8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d10b      	bne.n	800e3f6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	691a      	ldr	r2, [r3, #16]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	689b      	ldr	r3, [r3, #8]
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	9100      	str	r1, [sp, #0]
 800e3ea:	68b9      	ldr	r1, [r7, #8]
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	f000 fa2f 	bl	800e850 <xQueueGenericCreateStatic>
 800e3f2:	61f8      	str	r0, [r7, #28]
 800e3f4:	e008      	b.n	800e408 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e3f6:	69bb      	ldr	r3, [r7, #24]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d105      	bne.n	800e408 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	68b9      	ldr	r1, [r7, #8]
 800e400:	68f8      	ldr	r0, [r7, #12]
 800e402:	f000 fa9d 	bl	800e940 <xQueueGenericCreate>
 800e406:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e408:	69fb      	ldr	r3, [r7, #28]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00c      	beq.n	800e428 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d003      	beq.n	800e41c <osMessageQueueNew+0xd0>
        name = attr->name;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	617b      	str	r3, [r7, #20]
 800e41a:	e001      	b.n	800e420 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e41c:	2300      	movs	r3, #0
 800e41e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e420:	6979      	ldr	r1, [r7, #20]
 800e422:	69f8      	ldr	r0, [r7, #28]
 800e424:	f001 f8f0 	bl	800f608 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e428:	69fb      	ldr	r3, [r7, #28]
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3720      	adds	r7, #32
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
	...

0800e434 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e434:	b580      	push	{r7, lr}
 800e436:	b088      	sub	sp, #32
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	603b      	str	r3, [r7, #0]
 800e440:	4613      	mov	r3, r2
 800e442:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e448:	2300      	movs	r3, #0
 800e44a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e44c:	f3ef 8305 	mrs	r3, IPSR
 800e450:	617b      	str	r3, [r7, #20]
  return(result);
 800e452:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e454:	2b00      	cmp	r3, #0
 800e456:	d028      	beq.n	800e4aa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e458:	69bb      	ldr	r3, [r7, #24]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d005      	beq.n	800e46a <osMessageQueuePut+0x36>
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d002      	beq.n	800e46a <osMessageQueuePut+0x36>
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d003      	beq.n	800e472 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e46a:	f06f 0303 	mvn.w	r3, #3
 800e46e:	61fb      	str	r3, [r7, #28]
 800e470:	e038      	b.n	800e4e4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e472:	2300      	movs	r3, #0
 800e474:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e476:	f107 0210 	add.w	r2, r7, #16
 800e47a:	2300      	movs	r3, #0
 800e47c:	68b9      	ldr	r1, [r7, #8]
 800e47e:	69b8      	ldr	r0, [r7, #24]
 800e480:	f000 fc06 	bl	800ec90 <xQueueGenericSendFromISR>
 800e484:	4603      	mov	r3, r0
 800e486:	2b01      	cmp	r3, #1
 800e488:	d003      	beq.n	800e492 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e48a:	f06f 0302 	mvn.w	r3, #2
 800e48e:	61fb      	str	r3, [r7, #28]
 800e490:	e028      	b.n	800e4e4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d025      	beq.n	800e4e4 <osMessageQueuePut+0xb0>
 800e498:	4b15      	ldr	r3, [pc, #84]	; (800e4f0 <osMessageQueuePut+0xbc>)
 800e49a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e49e:	601a      	str	r2, [r3, #0]
 800e4a0:	f3bf 8f4f 	dsb	sy
 800e4a4:	f3bf 8f6f 	isb	sy
 800e4a8:	e01c      	b.n	800e4e4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d002      	beq.n	800e4b6 <osMessageQueuePut+0x82>
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d103      	bne.n	800e4be <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e4b6:	f06f 0303 	mvn.w	r3, #3
 800e4ba:	61fb      	str	r3, [r7, #28]
 800e4bc:	e012      	b.n	800e4e4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e4be:	2300      	movs	r3, #0
 800e4c0:	683a      	ldr	r2, [r7, #0]
 800e4c2:	68b9      	ldr	r1, [r7, #8]
 800e4c4:	69b8      	ldr	r0, [r7, #24]
 800e4c6:	f000 fae5 	bl	800ea94 <xQueueGenericSend>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d009      	beq.n	800e4e4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d003      	beq.n	800e4de <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e4d6:	f06f 0301 	mvn.w	r3, #1
 800e4da:	61fb      	str	r3, [r7, #28]
 800e4dc:	e002      	b.n	800e4e4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e4de:	f06f 0302 	mvn.w	r3, #2
 800e4e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e4e4:	69fb      	ldr	r3, [r7, #28]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3720      	adds	r7, #32
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	e000ed04 	.word	0xe000ed04

0800e4f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b088      	sub	sp, #32
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	60b9      	str	r1, [r7, #8]
 800e4fe:	607a      	str	r2, [r7, #4]
 800e500:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e506:	2300      	movs	r3, #0
 800e508:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e50a:	f3ef 8305 	mrs	r3, IPSR
 800e50e:	617b      	str	r3, [r7, #20]
  return(result);
 800e510:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e512:	2b00      	cmp	r3, #0
 800e514:	d028      	beq.n	800e568 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e516:	69bb      	ldr	r3, [r7, #24]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d005      	beq.n	800e528 <osMessageQueueGet+0x34>
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d002      	beq.n	800e528 <osMessageQueueGet+0x34>
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d003      	beq.n	800e530 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e528:	f06f 0303 	mvn.w	r3, #3
 800e52c:	61fb      	str	r3, [r7, #28]
 800e52e:	e037      	b.n	800e5a0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e530:	2300      	movs	r3, #0
 800e532:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e534:	f107 0310 	add.w	r3, r7, #16
 800e538:	461a      	mov	r2, r3
 800e53a:	68b9      	ldr	r1, [r7, #8]
 800e53c:	69b8      	ldr	r0, [r7, #24]
 800e53e:	f000 febb 	bl	800f2b8 <xQueueReceiveFromISR>
 800e542:	4603      	mov	r3, r0
 800e544:	2b01      	cmp	r3, #1
 800e546:	d003      	beq.n	800e550 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e548:	f06f 0302 	mvn.w	r3, #2
 800e54c:	61fb      	str	r3, [r7, #28]
 800e54e:	e027      	b.n	800e5a0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d024      	beq.n	800e5a0 <osMessageQueueGet+0xac>
 800e556:	4b15      	ldr	r3, [pc, #84]	; (800e5ac <osMessageQueueGet+0xb8>)
 800e558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e55c:	601a      	str	r2, [r3, #0]
 800e55e:	f3bf 8f4f 	dsb	sy
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	e01b      	b.n	800e5a0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e568:	69bb      	ldr	r3, [r7, #24]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d002      	beq.n	800e574 <osMessageQueueGet+0x80>
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d103      	bne.n	800e57c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e574:	f06f 0303 	mvn.w	r3, #3
 800e578:	61fb      	str	r3, [r7, #28]
 800e57a:	e011      	b.n	800e5a0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e57c:	683a      	ldr	r2, [r7, #0]
 800e57e:	68b9      	ldr	r1, [r7, #8]
 800e580:	69b8      	ldr	r0, [r7, #24]
 800e582:	f000 fcad 	bl	800eee0 <xQueueReceive>
 800e586:	4603      	mov	r3, r0
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d009      	beq.n	800e5a0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d003      	beq.n	800e59a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e592:	f06f 0301 	mvn.w	r3, #1
 800e596:	61fb      	str	r3, [r7, #28]
 800e598:	e002      	b.n	800e5a0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e59a:	f06f 0302 	mvn.w	r3, #2
 800e59e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e5a0:	69fb      	ldr	r3, [r7, #28]
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3720      	adds	r7, #32
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	e000ed04 	.word	0xe000ed04

0800e5b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e5b0:	b480      	push	{r7}
 800e5b2:	b085      	sub	sp, #20
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	4a07      	ldr	r2, [pc, #28]	; (800e5dc <vApplicationGetIdleTaskMemory+0x2c>)
 800e5c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	4a06      	ldr	r2, [pc, #24]	; (800e5e0 <vApplicationGetIdleTaskMemory+0x30>)
 800e5c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2280      	movs	r2, #128	; 0x80
 800e5cc:	601a      	str	r2, [r3, #0]
}
 800e5ce:	bf00      	nop
 800e5d0:	3714      	adds	r7, #20
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr
 800e5da:	bf00      	nop
 800e5dc:	20000530 	.word	0x20000530
 800e5e0:	200005ec 	.word	0x200005ec

0800e5e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e5e4:	b480      	push	{r7}
 800e5e6:	b085      	sub	sp, #20
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	4a07      	ldr	r2, [pc, #28]	; (800e610 <vApplicationGetTimerTaskMemory+0x2c>)
 800e5f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	4a06      	ldr	r2, [pc, #24]	; (800e614 <vApplicationGetTimerTaskMemory+0x30>)
 800e5fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e602:	601a      	str	r2, [r3, #0]
}
 800e604:	bf00      	nop
 800e606:	3714      	adds	r7, #20
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr
 800e610:	200007ec 	.word	0x200007ec
 800e614:	200008a8 	.word	0x200008a8

0800e618 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f103 0208 	add.w	r2, r3, #8
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e630:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f103 0208 	add.w	r2, r3, #8
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f103 0208 	add.w	r2, r3, #8
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e64c:	bf00      	nop
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e666:	bf00      	nop
 800e668:	370c      	adds	r7, #12
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr

0800e672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e672:	b480      	push	{r7}
 800e674:	b085      	sub	sp, #20
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
 800e67a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	689a      	ldr	r2, [r3, #8]
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	689b      	ldr	r3, [r3, #8]
 800e694:	683a      	ldr	r2, [r7, #0]
 800e696:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	683a      	ldr	r2, [r7, #0]
 800e69c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	1c5a      	adds	r2, r3, #1
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	601a      	str	r2, [r3, #0]
}
 800e6ae:	bf00      	nop
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e6ba:	b480      	push	{r7}
 800e6bc:	b085      	sub	sp, #20
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
 800e6c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6d0:	d103      	bne.n	800e6da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	691b      	ldr	r3, [r3, #16]
 800e6d6:	60fb      	str	r3, [r7, #12]
 800e6d8:	e00c      	b.n	800e6f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	3308      	adds	r3, #8
 800e6de:	60fb      	str	r3, [r7, #12]
 800e6e0:	e002      	b.n	800e6e8 <vListInsert+0x2e>
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	60fb      	str	r3, [r7, #12]
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	68ba      	ldr	r2, [r7, #8]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d2f6      	bcs.n	800e6e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	685a      	ldr	r2, [r3, #4]
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	683a      	ldr	r2, [r7, #0]
 800e702:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	68fa      	ldr	r2, [r7, #12]
 800e708:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	683a      	ldr	r2, [r7, #0]
 800e70e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	1c5a      	adds	r2, r3, #1
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	601a      	str	r2, [r3, #0]
}
 800e720:	bf00      	nop
 800e722:	3714      	adds	r7, #20
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e72c:	b480      	push	{r7}
 800e72e:	b085      	sub	sp, #20
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	691b      	ldr	r3, [r3, #16]
 800e738:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	6892      	ldr	r2, [r2, #8]
 800e742:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	6852      	ldr	r2, [r2, #4]
 800e74c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	429a      	cmp	r2, r3
 800e756:	d103      	bne.n	800e760 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	689a      	ldr	r2, [r3, #8]
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2200      	movs	r2, #0
 800e764:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	1e5a      	subs	r2, r3, #1
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
}
 800e774:	4618      	mov	r0, r3
 800e776:	3714      	adds	r7, #20
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d10a      	bne.n	800e7aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e798:	f383 8811 	msr	BASEPRI, r3
 800e79c:	f3bf 8f6f 	isb	sy
 800e7a0:	f3bf 8f4f 	dsb	sy
 800e7a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e7a6:	bf00      	nop
 800e7a8:	e7fe      	b.n	800e7a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e7aa:	f002 feeb 	bl	8011584 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7b6:	68f9      	ldr	r1, [r7, #12]
 800e7b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e7ba:	fb01 f303 	mul.w	r3, r1, r3
 800e7be:	441a      	add	r2, r3
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7da:	3b01      	subs	r3, #1
 800e7dc:	68f9      	ldr	r1, [r7, #12]
 800e7de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e7e0:	fb01 f303 	mul.w	r3, r1, r3
 800e7e4:	441a      	add	r2, r3
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	22ff      	movs	r2, #255	; 0xff
 800e7ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	22ff      	movs	r2, #255	; 0xff
 800e7f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d114      	bne.n	800e82a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	691b      	ldr	r3, [r3, #16]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d01a      	beq.n	800e83e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	3310      	adds	r3, #16
 800e80c:	4618      	mov	r0, r3
 800e80e:	f001 fbdf 	bl	800ffd0 <xTaskRemoveFromEventList>
 800e812:	4603      	mov	r3, r0
 800e814:	2b00      	cmp	r3, #0
 800e816:	d012      	beq.n	800e83e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e818:	4b0c      	ldr	r3, [pc, #48]	; (800e84c <xQueueGenericReset+0xcc>)
 800e81a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e81e:	601a      	str	r2, [r3, #0]
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	e009      	b.n	800e83e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	3310      	adds	r3, #16
 800e82e:	4618      	mov	r0, r3
 800e830:	f7ff fef2 	bl	800e618 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	3324      	adds	r3, #36	; 0x24
 800e838:	4618      	mov	r0, r3
 800e83a:	f7ff feed 	bl	800e618 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e83e:	f002 fed1 	bl	80115e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e842:	2301      	movs	r3, #1
}
 800e844:	4618      	mov	r0, r3
 800e846:	3710      	adds	r7, #16
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}
 800e84c:	e000ed04 	.word	0xe000ed04

0800e850 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e850:	b580      	push	{r7, lr}
 800e852:	b08e      	sub	sp, #56	; 0x38
 800e854:	af02      	add	r7, sp, #8
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	607a      	str	r2, [r7, #4]
 800e85c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d10a      	bne.n	800e87a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e868:	f383 8811 	msr	BASEPRI, r3
 800e86c:	f3bf 8f6f 	isb	sy
 800e870:	f3bf 8f4f 	dsb	sy
 800e874:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e876:	bf00      	nop
 800e878:	e7fe      	b.n	800e878 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d10a      	bne.n	800e896 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e884:	f383 8811 	msr	BASEPRI, r3
 800e888:	f3bf 8f6f 	isb	sy
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e892:	bf00      	nop
 800e894:	e7fe      	b.n	800e894 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d002      	beq.n	800e8a2 <xQueueGenericCreateStatic+0x52>
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d001      	beq.n	800e8a6 <xQueueGenericCreateStatic+0x56>
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e000      	b.n	800e8a8 <xQueueGenericCreateStatic+0x58>
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d10a      	bne.n	800e8c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b0:	f383 8811 	msr	BASEPRI, r3
 800e8b4:	f3bf 8f6f 	isb	sy
 800e8b8:	f3bf 8f4f 	dsb	sy
 800e8bc:	623b      	str	r3, [r7, #32]
}
 800e8be:	bf00      	nop
 800e8c0:	e7fe      	b.n	800e8c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d102      	bne.n	800e8ce <xQueueGenericCreateStatic+0x7e>
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d101      	bne.n	800e8d2 <xQueueGenericCreateStatic+0x82>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	e000      	b.n	800e8d4 <xQueueGenericCreateStatic+0x84>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d10a      	bne.n	800e8ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8dc:	f383 8811 	msr	BASEPRI, r3
 800e8e0:	f3bf 8f6f 	isb	sy
 800e8e4:	f3bf 8f4f 	dsb	sy
 800e8e8:	61fb      	str	r3, [r7, #28]
}
 800e8ea:	bf00      	nop
 800e8ec:	e7fe      	b.n	800e8ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e8ee:	2350      	movs	r3, #80	; 0x50
 800e8f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	2b50      	cmp	r3, #80	; 0x50
 800e8f6:	d00a      	beq.n	800e90e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fc:	f383 8811 	msr	BASEPRI, r3
 800e900:	f3bf 8f6f 	isb	sy
 800e904:	f3bf 8f4f 	dsb	sy
 800e908:	61bb      	str	r3, [r7, #24]
}
 800e90a:	bf00      	nop
 800e90c:	e7fe      	b.n	800e90c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e90e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e916:	2b00      	cmp	r3, #0
 800e918:	d00d      	beq.n	800e936 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91c:	2201      	movs	r2, #1
 800e91e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e922:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e928:	9300      	str	r3, [sp, #0]
 800e92a:	4613      	mov	r3, r2
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	68b9      	ldr	r1, [r7, #8]
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	f000 f83f 	bl	800e9b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e938:	4618      	mov	r0, r3
 800e93a:	3730      	adds	r7, #48	; 0x30
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e940:	b580      	push	{r7, lr}
 800e942:	b08a      	sub	sp, #40	; 0x28
 800e944:	af02      	add	r7, sp, #8
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	4613      	mov	r3, r2
 800e94c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d10a      	bne.n	800e96a <xQueueGenericCreate+0x2a>
	__asm volatile
 800e954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e958:	f383 8811 	msr	BASEPRI, r3
 800e95c:	f3bf 8f6f 	isb	sy
 800e960:	f3bf 8f4f 	dsb	sy
 800e964:	613b      	str	r3, [r7, #16]
}
 800e966:	bf00      	nop
 800e968:	e7fe      	b.n	800e968 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	68ba      	ldr	r2, [r7, #8]
 800e96e:	fb02 f303 	mul.w	r3, r2, r3
 800e972:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	3350      	adds	r3, #80	; 0x50
 800e978:	4618      	mov	r0, r3
 800e97a:	f002 ff25 	bl	80117c8 <pvPortMalloc>
 800e97e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d011      	beq.n	800e9aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e986:	69bb      	ldr	r3, [r7, #24]
 800e988:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	3350      	adds	r3, #80	; 0x50
 800e98e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e990:	69bb      	ldr	r3, [r7, #24]
 800e992:	2200      	movs	r2, #0
 800e994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e998:	79fa      	ldrb	r2, [r7, #7]
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	9300      	str	r3, [sp, #0]
 800e99e:	4613      	mov	r3, r2
 800e9a0:	697a      	ldr	r2, [r7, #20]
 800e9a2:	68b9      	ldr	r1, [r7, #8]
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f000 f805 	bl	800e9b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e9aa:	69bb      	ldr	r3, [r7, #24]
	}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3720      	adds	r7, #32
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
 800e9c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d103      	bne.n	800e9d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	69ba      	ldr	r2, [r7, #24]
 800e9cc:	601a      	str	r2, [r3, #0]
 800e9ce:	e002      	b.n	800e9d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	68fa      	ldr	r2, [r7, #12]
 800e9da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e9dc:	69bb      	ldr	r3, [r7, #24]
 800e9de:	68ba      	ldr	r2, [r7, #8]
 800e9e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e9e2:	2101      	movs	r1, #1
 800e9e4:	69b8      	ldr	r0, [r7, #24]
 800e9e6:	f7ff fecb 	bl	800e780 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	78fa      	ldrb	r2, [r7, #3]
 800e9ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e9f2:	bf00      	nop
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b082      	sub	sp, #8
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00e      	beq.n	800ea26 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2200      	movs	r2, #0
 800ea18:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	2100      	movs	r1, #0
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 f837 	bl	800ea94 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ea26:	bf00      	nop
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ea2e:	b580      	push	{r7, lr}
 800ea30:	b086      	sub	sp, #24
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	4603      	mov	r3, r0
 800ea36:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	617b      	str	r3, [r7, #20]
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ea40:	79fb      	ldrb	r3, [r7, #7]
 800ea42:	461a      	mov	r2, r3
 800ea44:	6939      	ldr	r1, [r7, #16]
 800ea46:	6978      	ldr	r0, [r7, #20]
 800ea48:	f7ff ff7a 	bl	800e940 <xQueueGenericCreate>
 800ea4c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ea4e:	68f8      	ldr	r0, [r7, #12]
 800ea50:	f7ff ffd3 	bl	800e9fa <prvInitialiseMutex>

		return xNewQueue;
 800ea54:	68fb      	ldr	r3, [r7, #12]
	}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3718      	adds	r7, #24
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b088      	sub	sp, #32
 800ea62:	af02      	add	r7, sp, #8
 800ea64:	4603      	mov	r3, r0
 800ea66:	6039      	str	r1, [r7, #0]
 800ea68:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	617b      	str	r3, [r7, #20]
 800ea6e:	2300      	movs	r3, #0
 800ea70:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ea72:	79fb      	ldrb	r3, [r7, #7]
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	6939      	ldr	r1, [r7, #16]
 800ea7c:	6978      	ldr	r0, [r7, #20]
 800ea7e:	f7ff fee7 	bl	800e850 <xQueueGenericCreateStatic>
 800ea82:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f7ff ffb8 	bl	800e9fa <prvInitialiseMutex>

		return xNewQueue;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
	}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3718      	adds	r7, #24
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b08e      	sub	sp, #56	; 0x38
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	607a      	str	r2, [r7, #4]
 800eaa0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d10a      	bne.n	800eac6 <xQueueGenericSend+0x32>
	__asm volatile
 800eab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab4:	f383 8811 	msr	BASEPRI, r3
 800eab8:	f3bf 8f6f 	isb	sy
 800eabc:	f3bf 8f4f 	dsb	sy
 800eac0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eac2:	bf00      	nop
 800eac4:	e7fe      	b.n	800eac4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d103      	bne.n	800ead4 <xQueueGenericSend+0x40>
 800eacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d101      	bne.n	800ead8 <xQueueGenericSend+0x44>
 800ead4:	2301      	movs	r3, #1
 800ead6:	e000      	b.n	800eada <xQueueGenericSend+0x46>
 800ead8:	2300      	movs	r3, #0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d10a      	bne.n	800eaf4 <xQueueGenericSend+0x60>
	__asm volatile
 800eade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae2:	f383 8811 	msr	BASEPRI, r3
 800eae6:	f3bf 8f6f 	isb	sy
 800eaea:	f3bf 8f4f 	dsb	sy
 800eaee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eaf0:	bf00      	nop
 800eaf2:	e7fe      	b.n	800eaf2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	2b02      	cmp	r3, #2
 800eaf8:	d103      	bne.n	800eb02 <xQueueGenericSend+0x6e>
 800eafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d101      	bne.n	800eb06 <xQueueGenericSend+0x72>
 800eb02:	2301      	movs	r3, #1
 800eb04:	e000      	b.n	800eb08 <xQueueGenericSend+0x74>
 800eb06:	2300      	movs	r3, #0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d10a      	bne.n	800eb22 <xQueueGenericSend+0x8e>
	__asm volatile
 800eb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb10:	f383 8811 	msr	BASEPRI, r3
 800eb14:	f3bf 8f6f 	isb	sy
 800eb18:	f3bf 8f4f 	dsb	sy
 800eb1c:	623b      	str	r3, [r7, #32]
}
 800eb1e:	bf00      	nop
 800eb20:	e7fe      	b.n	800eb20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb22:	f001 fc17 	bl	8010354 <xTaskGetSchedulerState>
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d102      	bne.n	800eb32 <xQueueGenericSend+0x9e>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d101      	bne.n	800eb36 <xQueueGenericSend+0xa2>
 800eb32:	2301      	movs	r3, #1
 800eb34:	e000      	b.n	800eb38 <xQueueGenericSend+0xa4>
 800eb36:	2300      	movs	r3, #0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d10a      	bne.n	800eb52 <xQueueGenericSend+0xbe>
	__asm volatile
 800eb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb40:	f383 8811 	msr	BASEPRI, r3
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	f3bf 8f4f 	dsb	sy
 800eb4c:	61fb      	str	r3, [r7, #28]
}
 800eb4e:	bf00      	nop
 800eb50:	e7fe      	b.n	800eb50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb52:	f002 fd17 	bl	8011584 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d302      	bcc.n	800eb68 <xQueueGenericSend+0xd4>
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b02      	cmp	r3, #2
 800eb66:	d129      	bne.n	800ebbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb68:	683a      	ldr	r2, [r7, #0]
 800eb6a:	68b9      	ldr	r1, [r7, #8]
 800eb6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb6e:	f000 fc3b 	bl	800f3e8 <prvCopyDataToQueue>
 800eb72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d010      	beq.n	800eb9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7e:	3324      	adds	r3, #36	; 0x24
 800eb80:	4618      	mov	r0, r3
 800eb82:	f001 fa25 	bl	800ffd0 <xTaskRemoveFromEventList>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d013      	beq.n	800ebb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eb8c:	4b3f      	ldr	r3, [pc, #252]	; (800ec8c <xQueueGenericSend+0x1f8>)
 800eb8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb92:	601a      	str	r2, [r3, #0]
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	f3bf 8f6f 	isb	sy
 800eb9c:	e00a      	b.n	800ebb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d007      	beq.n	800ebb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eba4:	4b39      	ldr	r3, [pc, #228]	; (800ec8c <xQueueGenericSend+0x1f8>)
 800eba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebaa:	601a      	str	r2, [r3, #0]
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ebb4:	f002 fd16 	bl	80115e4 <vPortExitCritical>
				return pdPASS;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e063      	b.n	800ec84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d103      	bne.n	800ebca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ebc2:	f002 fd0f 	bl	80115e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	e05c      	b.n	800ec84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ebca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d106      	bne.n	800ebde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ebd0:	f107 0314 	add.w	r3, r7, #20
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f001 fa5f 	bl	8010098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebde:	f002 fd01 	bl	80115e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ebe2:	f000 ffcb 	bl	800fb7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebe6:	f002 fccd 	bl	8011584 <vPortEnterCritical>
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebf0:	b25b      	sxtb	r3, r3
 800ebf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebf6:	d103      	bne.n	800ec00 <xQueueGenericSend+0x16c>
 800ebf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec06:	b25b      	sxtb	r3, r3
 800ec08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec0c:	d103      	bne.n	800ec16 <xQueueGenericSend+0x182>
 800ec0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec10:	2200      	movs	r2, #0
 800ec12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec16:	f002 fce5 	bl	80115e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec1a:	1d3a      	adds	r2, r7, #4
 800ec1c:	f107 0314 	add.w	r3, r7, #20
 800ec20:	4611      	mov	r1, r2
 800ec22:	4618      	mov	r0, r3
 800ec24:	f001 fa4e 	bl	80100c4 <xTaskCheckForTimeOut>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d124      	bne.n	800ec78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ec2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec30:	f000 fcd2 	bl	800f5d8 <prvIsQueueFull>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d018      	beq.n	800ec6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3c:	3310      	adds	r3, #16
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	4611      	mov	r1, r2
 800ec42:	4618      	mov	r0, r3
 800ec44:	f001 f974 	bl	800ff30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ec48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec4a:	f000 fc5d 	bl	800f508 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ec4e:	f000 ffa3 	bl	800fb98 <xTaskResumeAll>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	f47f af7c 	bne.w	800eb52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ec5a:	4b0c      	ldr	r3, [pc, #48]	; (800ec8c <xQueueGenericSend+0x1f8>)
 800ec5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec60:	601a      	str	r2, [r3, #0]
 800ec62:	f3bf 8f4f 	dsb	sy
 800ec66:	f3bf 8f6f 	isb	sy
 800ec6a:	e772      	b.n	800eb52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ec6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec6e:	f000 fc4b 	bl	800f508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec72:	f000 ff91 	bl	800fb98 <xTaskResumeAll>
 800ec76:	e76c      	b.n	800eb52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ec78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec7a:	f000 fc45 	bl	800f508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec7e:	f000 ff8b 	bl	800fb98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ec82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3738      	adds	r7, #56	; 0x38
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	e000ed04 	.word	0xe000ed04

0800ec90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b090      	sub	sp, #64	; 0x40
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	607a      	str	r2, [r7, #4]
 800ec9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800eca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d10a      	bne.n	800ecbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800eca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecac:	f383 8811 	msr	BASEPRI, r3
 800ecb0:	f3bf 8f6f 	isb	sy
 800ecb4:	f3bf 8f4f 	dsb	sy
 800ecb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ecba:	bf00      	nop
 800ecbc:	e7fe      	b.n	800ecbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d103      	bne.n	800eccc <xQueueGenericSendFromISR+0x3c>
 800ecc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d101      	bne.n	800ecd0 <xQueueGenericSendFromISR+0x40>
 800eccc:	2301      	movs	r3, #1
 800ecce:	e000      	b.n	800ecd2 <xQueueGenericSendFromISR+0x42>
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d10a      	bne.n	800ecec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ecd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecda:	f383 8811 	msr	BASEPRI, r3
 800ecde:	f3bf 8f6f 	isb	sy
 800ece2:	f3bf 8f4f 	dsb	sy
 800ece6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ece8:	bf00      	nop
 800ecea:	e7fe      	b.n	800ecea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	2b02      	cmp	r3, #2
 800ecf0:	d103      	bne.n	800ecfa <xQueueGenericSendFromISR+0x6a>
 800ecf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecf6:	2b01      	cmp	r3, #1
 800ecf8:	d101      	bne.n	800ecfe <xQueueGenericSendFromISR+0x6e>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e000      	b.n	800ed00 <xQueueGenericSendFromISR+0x70>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d10a      	bne.n	800ed1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ed04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed08:	f383 8811 	msr	BASEPRI, r3
 800ed0c:	f3bf 8f6f 	isb	sy
 800ed10:	f3bf 8f4f 	dsb	sy
 800ed14:	623b      	str	r3, [r7, #32]
}
 800ed16:	bf00      	nop
 800ed18:	e7fe      	b.n	800ed18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed1a:	f002 fd15 	bl	8011748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ed1e:	f3ef 8211 	mrs	r2, BASEPRI
 800ed22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed26:	f383 8811 	msr	BASEPRI, r3
 800ed2a:	f3bf 8f6f 	isb	sy
 800ed2e:	f3bf 8f4f 	dsb	sy
 800ed32:	61fa      	str	r2, [r7, #28]
 800ed34:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ed36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d302      	bcc.n	800ed4c <xQueueGenericSendFromISR+0xbc>
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	2b02      	cmp	r3, #2
 800ed4a:	d12f      	bne.n	800edac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed5c:	683a      	ldr	r2, [r7, #0]
 800ed5e:	68b9      	ldr	r1, [r7, #8]
 800ed60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed62:	f000 fb41 	bl	800f3e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ed66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ed6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed6e:	d112      	bne.n	800ed96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d016      	beq.n	800eda6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7a:	3324      	adds	r3, #36	; 0x24
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f001 f927 	bl	800ffd0 <xTaskRemoveFromEventList>
 800ed82:	4603      	mov	r3, r0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00e      	beq.n	800eda6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d00b      	beq.n	800eda6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2201      	movs	r2, #1
 800ed92:	601a      	str	r2, [r3, #0]
 800ed94:	e007      	b.n	800eda6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ed96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	b25a      	sxtb	r2, r3
 800eda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eda6:	2301      	movs	r3, #1
 800eda8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800edaa:	e001      	b.n	800edb0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800edac:	2300      	movs	r3, #0
 800edae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edb2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800edba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800edbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3740      	adds	r7, #64	; 0x40
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b08e      	sub	sp, #56	; 0x38
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
 800edce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800edd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d10a      	bne.n	800edf0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800edda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edde:	f383 8811 	msr	BASEPRI, r3
 800ede2:	f3bf 8f6f 	isb	sy
 800ede6:	f3bf 8f4f 	dsb	sy
 800edea:	623b      	str	r3, [r7, #32]
}
 800edec:	bf00      	nop
 800edee:	e7fe      	b.n	800edee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800edf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d00a      	beq.n	800ee0e <xQueueGiveFromISR+0x48>
	__asm volatile
 800edf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfc:	f383 8811 	msr	BASEPRI, r3
 800ee00:	f3bf 8f6f 	isb	sy
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	61fb      	str	r3, [r7, #28]
}
 800ee0a:	bf00      	nop
 800ee0c:	e7fe      	b.n	800ee0c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ee0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d103      	bne.n	800ee1e <xQueueGiveFromISR+0x58>
 800ee16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee18:	689b      	ldr	r3, [r3, #8]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d101      	bne.n	800ee22 <xQueueGiveFromISR+0x5c>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	e000      	b.n	800ee24 <xQueueGiveFromISR+0x5e>
 800ee22:	2300      	movs	r3, #0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d10a      	bne.n	800ee3e <xQueueGiveFromISR+0x78>
	__asm volatile
 800ee28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2c:	f383 8811 	msr	BASEPRI, r3
 800ee30:	f3bf 8f6f 	isb	sy
 800ee34:	f3bf 8f4f 	dsb	sy
 800ee38:	61bb      	str	r3, [r7, #24]
}
 800ee3a:	bf00      	nop
 800ee3c:	e7fe      	b.n	800ee3c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee3e:	f002 fc83 	bl	8011748 <vPortValidateInterruptPriority>
	__asm volatile
 800ee42:	f3ef 8211 	mrs	r2, BASEPRI
 800ee46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4a:	f383 8811 	msr	BASEPRI, r3
 800ee4e:	f3bf 8f6f 	isb	sy
 800ee52:	f3bf 8f4f 	dsb	sy
 800ee56:	617a      	str	r2, [r7, #20]
 800ee58:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ee5a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ee64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d22b      	bcs.n	800eec6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ee6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ee78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7a:	1c5a      	adds	r2, r3, #1
 800ee7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee88:	d112      	bne.n	800eeb0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d016      	beq.n	800eec0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee94:	3324      	adds	r3, #36	; 0x24
 800ee96:	4618      	mov	r0, r3
 800ee98:	f001 f89a 	bl	800ffd0 <xTaskRemoveFromEventList>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d00e      	beq.n	800eec0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d00b      	beq.n	800eec0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	601a      	str	r2, [r3, #0]
 800eeae:	e007      	b.n	800eec0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eeb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	b25a      	sxtb	r2, r3
 800eeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eec0:	2301      	movs	r3, #1
 800eec2:	637b      	str	r3, [r7, #52]	; 0x34
 800eec4:	e001      	b.n	800eeca <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eec6:	2300      	movs	r3, #0
 800eec8:	637b      	str	r3, [r7, #52]	; 0x34
 800eeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eecc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f383 8811 	msr	BASEPRI, r3
}
 800eed4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3738      	adds	r7, #56	; 0x38
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b08c      	sub	sp, #48	; 0x30
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eeec:	2300      	movs	r3, #0
 800eeee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d10a      	bne.n	800ef10 <xQueueReceive+0x30>
	__asm volatile
 800eefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eefe:	f383 8811 	msr	BASEPRI, r3
 800ef02:	f3bf 8f6f 	isb	sy
 800ef06:	f3bf 8f4f 	dsb	sy
 800ef0a:	623b      	str	r3, [r7, #32]
}
 800ef0c:	bf00      	nop
 800ef0e:	e7fe      	b.n	800ef0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d103      	bne.n	800ef1e <xQueueReceive+0x3e>
 800ef16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d101      	bne.n	800ef22 <xQueueReceive+0x42>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e000      	b.n	800ef24 <xQueueReceive+0x44>
 800ef22:	2300      	movs	r3, #0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d10a      	bne.n	800ef3e <xQueueReceive+0x5e>
	__asm volatile
 800ef28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2c:	f383 8811 	msr	BASEPRI, r3
 800ef30:	f3bf 8f6f 	isb	sy
 800ef34:	f3bf 8f4f 	dsb	sy
 800ef38:	61fb      	str	r3, [r7, #28]
}
 800ef3a:	bf00      	nop
 800ef3c:	e7fe      	b.n	800ef3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef3e:	f001 fa09 	bl	8010354 <xTaskGetSchedulerState>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d102      	bne.n	800ef4e <xQueueReceive+0x6e>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d101      	bne.n	800ef52 <xQueueReceive+0x72>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e000      	b.n	800ef54 <xQueueReceive+0x74>
 800ef52:	2300      	movs	r3, #0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d10a      	bne.n	800ef6e <xQueueReceive+0x8e>
	__asm volatile
 800ef58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5c:	f383 8811 	msr	BASEPRI, r3
 800ef60:	f3bf 8f6f 	isb	sy
 800ef64:	f3bf 8f4f 	dsb	sy
 800ef68:	61bb      	str	r3, [r7, #24]
}
 800ef6a:	bf00      	nop
 800ef6c:	e7fe      	b.n	800ef6c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef6e:	f002 fb09 	bl	8011584 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d01f      	beq.n	800efbe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef7e:	68b9      	ldr	r1, [r7, #8]
 800ef80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef82:	f000 fa9b 	bl	800f4bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef88:	1e5a      	subs	r2, r3, #1
 800ef8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef90:	691b      	ldr	r3, [r3, #16]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d00f      	beq.n	800efb6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef98:	3310      	adds	r3, #16
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f001 f818 	bl	800ffd0 <xTaskRemoveFromEventList>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d007      	beq.n	800efb6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800efa6:	4b3d      	ldr	r3, [pc, #244]	; (800f09c <xQueueReceive+0x1bc>)
 800efa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efac:	601a      	str	r2, [r3, #0]
 800efae:	f3bf 8f4f 	dsb	sy
 800efb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800efb6:	f002 fb15 	bl	80115e4 <vPortExitCritical>
				return pdPASS;
 800efba:	2301      	movs	r3, #1
 800efbc:	e069      	b.n	800f092 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d103      	bne.n	800efcc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800efc4:	f002 fb0e 	bl	80115e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800efc8:	2300      	movs	r3, #0
 800efca:	e062      	b.n	800f092 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800efcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d106      	bne.n	800efe0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800efd2:	f107 0310 	add.w	r3, r7, #16
 800efd6:	4618      	mov	r0, r3
 800efd8:	f001 f85e 	bl	8010098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800efdc:	2301      	movs	r3, #1
 800efde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800efe0:	f002 fb00 	bl	80115e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800efe4:	f000 fdca 	bl	800fb7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800efe8:	f002 facc 	bl	8011584 <vPortEnterCritical>
 800efec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eff2:	b25b      	sxtb	r3, r3
 800eff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eff8:	d103      	bne.n	800f002 <xQueueReceive+0x122>
 800effa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effc:	2200      	movs	r2, #0
 800effe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f008:	b25b      	sxtb	r3, r3
 800f00a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f00e:	d103      	bne.n	800f018 <xQueueReceive+0x138>
 800f010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f012:	2200      	movs	r2, #0
 800f014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f018:	f002 fae4 	bl	80115e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f01c:	1d3a      	adds	r2, r7, #4
 800f01e:	f107 0310 	add.w	r3, r7, #16
 800f022:	4611      	mov	r1, r2
 800f024:	4618      	mov	r0, r3
 800f026:	f001 f84d 	bl	80100c4 <xTaskCheckForTimeOut>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d123      	bne.n	800f078 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f032:	f000 fabb 	bl	800f5ac <prvIsQueueEmpty>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d017      	beq.n	800f06c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03e:	3324      	adds	r3, #36	; 0x24
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	4611      	mov	r1, r2
 800f044:	4618      	mov	r0, r3
 800f046:	f000 ff73 	bl	800ff30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f04a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f04c:	f000 fa5c 	bl	800f508 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f050:	f000 fda2 	bl	800fb98 <xTaskResumeAll>
 800f054:	4603      	mov	r3, r0
 800f056:	2b00      	cmp	r3, #0
 800f058:	d189      	bne.n	800ef6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f05a:	4b10      	ldr	r3, [pc, #64]	; (800f09c <xQueueReceive+0x1bc>)
 800f05c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f060:	601a      	str	r2, [r3, #0]
 800f062:	f3bf 8f4f 	dsb	sy
 800f066:	f3bf 8f6f 	isb	sy
 800f06a:	e780      	b.n	800ef6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f06c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f06e:	f000 fa4b 	bl	800f508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f072:	f000 fd91 	bl	800fb98 <xTaskResumeAll>
 800f076:	e77a      	b.n	800ef6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f07a:	f000 fa45 	bl	800f508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f07e:	f000 fd8b 	bl	800fb98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f084:	f000 fa92 	bl	800f5ac <prvIsQueueEmpty>
 800f088:	4603      	mov	r3, r0
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	f43f af6f 	beq.w	800ef6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f090:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f092:	4618      	mov	r0, r3
 800f094:	3730      	adds	r7, #48	; 0x30
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop
 800f09c:	e000ed04 	.word	0xe000ed04

0800f0a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b08e      	sub	sp, #56	; 0x38
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d10a      	bne.n	800f0d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c0:	f383 8811 	msr	BASEPRI, r3
 800f0c4:	f3bf 8f6f 	isb	sy
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	623b      	str	r3, [r7, #32]
}
 800f0ce:	bf00      	nop
 800f0d0:	e7fe      	b.n	800f0d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00a      	beq.n	800f0f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0de:	f383 8811 	msr	BASEPRI, r3
 800f0e2:	f3bf 8f6f 	isb	sy
 800f0e6:	f3bf 8f4f 	dsb	sy
 800f0ea:	61fb      	str	r3, [r7, #28]
}
 800f0ec:	bf00      	nop
 800f0ee:	e7fe      	b.n	800f0ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0f0:	f001 f930 	bl	8010354 <xTaskGetSchedulerState>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d102      	bne.n	800f100 <xQueueSemaphoreTake+0x60>
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d101      	bne.n	800f104 <xQueueSemaphoreTake+0x64>
 800f100:	2301      	movs	r3, #1
 800f102:	e000      	b.n	800f106 <xQueueSemaphoreTake+0x66>
 800f104:	2300      	movs	r3, #0
 800f106:	2b00      	cmp	r3, #0
 800f108:	d10a      	bne.n	800f120 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10e:	f383 8811 	msr	BASEPRI, r3
 800f112:	f3bf 8f6f 	isb	sy
 800f116:	f3bf 8f4f 	dsb	sy
 800f11a:	61bb      	str	r3, [r7, #24]
}
 800f11c:	bf00      	nop
 800f11e:	e7fe      	b.n	800f11e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f120:	f002 fa30 	bl	8011584 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f128:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d024      	beq.n	800f17a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f132:	1e5a      	subs	r2, r3, #1
 800f134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f136:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d104      	bne.n	800f14a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f140:	f001 fa7e 	bl	8010640 <pvTaskIncrementMutexHeldCount>
 800f144:	4602      	mov	r2, r0
 800f146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f148:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00f      	beq.n	800f172 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f154:	3310      	adds	r3, #16
 800f156:	4618      	mov	r0, r3
 800f158:	f000 ff3a 	bl	800ffd0 <xTaskRemoveFromEventList>
 800f15c:	4603      	mov	r3, r0
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d007      	beq.n	800f172 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f162:	4b54      	ldr	r3, [pc, #336]	; (800f2b4 <xQueueSemaphoreTake+0x214>)
 800f164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f168:	601a      	str	r2, [r3, #0]
 800f16a:	f3bf 8f4f 	dsb	sy
 800f16e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f172:	f002 fa37 	bl	80115e4 <vPortExitCritical>
				return pdPASS;
 800f176:	2301      	movs	r3, #1
 800f178:	e097      	b.n	800f2aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d111      	bne.n	800f1a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00a      	beq.n	800f19c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18a:	f383 8811 	msr	BASEPRI, r3
 800f18e:	f3bf 8f6f 	isb	sy
 800f192:	f3bf 8f4f 	dsb	sy
 800f196:	617b      	str	r3, [r7, #20]
}
 800f198:	bf00      	nop
 800f19a:	e7fe      	b.n	800f19a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f19c:	f002 fa22 	bl	80115e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	e082      	b.n	800f2aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d106      	bne.n	800f1b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f1aa:	f107 030c 	add.w	r3, r7, #12
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f000 ff72 	bl	8010098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f1b8:	f002 fa14 	bl	80115e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f1bc:	f000 fcde 	bl	800fb7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f1c0:	f002 f9e0 	bl	8011584 <vPortEnterCritical>
 800f1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1ca:	b25b      	sxtb	r3, r3
 800f1cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1d0:	d103      	bne.n	800f1da <xQueueSemaphoreTake+0x13a>
 800f1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1e0:	b25b      	sxtb	r3, r3
 800f1e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1e6:	d103      	bne.n	800f1f0 <xQueueSemaphoreTake+0x150>
 800f1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1f0:	f002 f9f8 	bl	80115e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1f4:	463a      	mov	r2, r7
 800f1f6:	f107 030c 	add.w	r3, r7, #12
 800f1fa:	4611      	mov	r1, r2
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f000 ff61 	bl	80100c4 <xTaskCheckForTimeOut>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d132      	bne.n	800f26e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f20a:	f000 f9cf 	bl	800f5ac <prvIsQueueEmpty>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d026      	beq.n	800f262 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d109      	bne.n	800f230 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f21c:	f002 f9b2 	bl	8011584 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f222:	689b      	ldr	r3, [r3, #8]
 800f224:	4618      	mov	r0, r3
 800f226:	f001 f8b3 	bl	8010390 <xTaskPriorityInherit>
 800f22a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f22c:	f002 f9da 	bl	80115e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f232:	3324      	adds	r3, #36	; 0x24
 800f234:	683a      	ldr	r2, [r7, #0]
 800f236:	4611      	mov	r1, r2
 800f238:	4618      	mov	r0, r3
 800f23a:	f000 fe79 	bl	800ff30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f23e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f240:	f000 f962 	bl	800f508 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f244:	f000 fca8 	bl	800fb98 <xTaskResumeAll>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	f47f af68 	bne.w	800f120 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f250:	4b18      	ldr	r3, [pc, #96]	; (800f2b4 <xQueueSemaphoreTake+0x214>)
 800f252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f256:	601a      	str	r2, [r3, #0]
 800f258:	f3bf 8f4f 	dsb	sy
 800f25c:	f3bf 8f6f 	isb	sy
 800f260:	e75e      	b.n	800f120 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f264:	f000 f950 	bl	800f508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f268:	f000 fc96 	bl	800fb98 <xTaskResumeAll>
 800f26c:	e758      	b.n	800f120 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f26e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f270:	f000 f94a 	bl	800f508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f274:	f000 fc90 	bl	800fb98 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f27a:	f000 f997 	bl	800f5ac <prvIsQueueEmpty>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b00      	cmp	r3, #0
 800f282:	f43f af4d 	beq.w	800f120 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00d      	beq.n	800f2a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f28c:	f002 f97a 	bl	8011584 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f292:	f000 f891 	bl	800f3b8 <prvGetDisinheritPriorityAfterTimeout>
 800f296:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f001 f94c 	bl	801053c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f2a4:	f002 f99e 	bl	80115e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f2a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3738      	adds	r7, #56	; 0x38
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	e000ed04 	.word	0xe000ed04

0800f2b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b08e      	sub	sp, #56	; 0x38
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	60b9      	str	r1, [r7, #8]
 800f2c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d10a      	bne.n	800f2e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d2:	f383 8811 	msr	BASEPRI, r3
 800f2d6:	f3bf 8f6f 	isb	sy
 800f2da:	f3bf 8f4f 	dsb	sy
 800f2de:	623b      	str	r3, [r7, #32]
}
 800f2e0:	bf00      	nop
 800f2e2:	e7fe      	b.n	800f2e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d103      	bne.n	800f2f2 <xQueueReceiveFromISR+0x3a>
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d101      	bne.n	800f2f6 <xQueueReceiveFromISR+0x3e>
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e000      	b.n	800f2f8 <xQueueReceiveFromISR+0x40>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d10a      	bne.n	800f312 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f300:	f383 8811 	msr	BASEPRI, r3
 800f304:	f3bf 8f6f 	isb	sy
 800f308:	f3bf 8f4f 	dsb	sy
 800f30c:	61fb      	str	r3, [r7, #28]
}
 800f30e:	bf00      	nop
 800f310:	e7fe      	b.n	800f310 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f312:	f002 fa19 	bl	8011748 <vPortValidateInterruptPriority>
	__asm volatile
 800f316:	f3ef 8211 	mrs	r2, BASEPRI
 800f31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f31e:	f383 8811 	msr	BASEPRI, r3
 800f322:	f3bf 8f6f 	isb	sy
 800f326:	f3bf 8f4f 	dsb	sy
 800f32a:	61ba      	str	r2, [r7, #24]
 800f32c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f32e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f330:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f336:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d02f      	beq.n	800f39e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f348:	68b9      	ldr	r1, [r7, #8]
 800f34a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f34c:	f000 f8b6 	bl	800f4bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	1e5a      	subs	r2, r3, #1
 800f354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f356:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f358:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f35c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f360:	d112      	bne.n	800f388 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f364:	691b      	ldr	r3, [r3, #16]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d016      	beq.n	800f398 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36c:	3310      	adds	r3, #16
 800f36e:	4618      	mov	r0, r3
 800f370:	f000 fe2e 	bl	800ffd0 <xTaskRemoveFromEventList>
 800f374:	4603      	mov	r3, r0
 800f376:	2b00      	cmp	r3, #0
 800f378:	d00e      	beq.n	800f398 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d00b      	beq.n	800f398 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2201      	movs	r2, #1
 800f384:	601a      	str	r2, [r3, #0]
 800f386:	e007      	b.n	800f398 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f38c:	3301      	adds	r3, #1
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	b25a      	sxtb	r2, r3
 800f392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f398:	2301      	movs	r3, #1
 800f39a:	637b      	str	r3, [r7, #52]	; 0x34
 800f39c:	e001      	b.n	800f3a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	637b      	str	r3, [r7, #52]	; 0x34
 800f3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	f383 8811 	msr	BASEPRI, r3
}
 800f3ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3738      	adds	r7, #56	; 0x38
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d006      	beq.n	800f3d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f3d2:	60fb      	str	r3, [r7, #12]
 800f3d4:	e001      	b.n	800f3da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f3da:	68fb      	ldr	r3, [r7, #12]
	}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3714      	adds	r7, #20
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b086      	sub	sp, #24
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f402:	2b00      	cmp	r3, #0
 800f404:	d10d      	bne.n	800f422 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d14d      	bne.n	800f4aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	689b      	ldr	r3, [r3, #8]
 800f412:	4618      	mov	r0, r3
 800f414:	f001 f824 	bl	8010460 <xTaskPriorityDisinherit>
 800f418:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2200      	movs	r2, #0
 800f41e:	609a      	str	r2, [r3, #8]
 800f420:	e043      	b.n	800f4aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d119      	bne.n	800f45c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	6858      	ldr	r0, [r3, #4]
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f430:	461a      	mov	r2, r3
 800f432:	68b9      	ldr	r1, [r7, #8]
 800f434:	f003 fd4e 	bl	8012ed4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	685a      	ldr	r2, [r3, #4]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f440:	441a      	add	r2, r3
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	685a      	ldr	r2, [r3, #4]
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	689b      	ldr	r3, [r3, #8]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d32b      	bcc.n	800f4aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	605a      	str	r2, [r3, #4]
 800f45a:	e026      	b.n	800f4aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	68d8      	ldr	r0, [r3, #12]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f464:	461a      	mov	r2, r3
 800f466:	68b9      	ldr	r1, [r7, #8]
 800f468:	f003 fd34 	bl	8012ed4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	68da      	ldr	r2, [r3, #12]
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f474:	425b      	negs	r3, r3
 800f476:	441a      	add	r2, r3
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	68da      	ldr	r2, [r3, #12]
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	429a      	cmp	r2, r3
 800f486:	d207      	bcs.n	800f498 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	689a      	ldr	r2, [r3, #8]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f490:	425b      	negs	r3, r3
 800f492:	441a      	add	r2, r3
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2b02      	cmp	r3, #2
 800f49c:	d105      	bne.n	800f4aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d002      	beq.n	800f4aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	1c5a      	adds	r2, r3, #1
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f4b2:	697b      	ldr	r3, [r7, #20]
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3718      	adds	r7, #24
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d018      	beq.n	800f500 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	68da      	ldr	r2, [r3, #12]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4d6:	441a      	add	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	68da      	ldr	r2, [r3, #12]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	689b      	ldr	r3, [r3, #8]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d303      	bcc.n	800f4f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	68d9      	ldr	r1, [r3, #12]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	6838      	ldr	r0, [r7, #0]
 800f4fc:	f003 fcea 	bl	8012ed4 <memcpy>
	}
}
 800f500:	bf00      	nop
 800f502:	3708      	adds	r7, #8
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f510:	f002 f838 	bl	8011584 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f51a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f51c:	e011      	b.n	800f542 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f522:	2b00      	cmp	r3, #0
 800f524:	d012      	beq.n	800f54c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	3324      	adds	r3, #36	; 0x24
 800f52a:	4618      	mov	r0, r3
 800f52c:	f000 fd50 	bl	800ffd0 <xTaskRemoveFromEventList>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	d001      	beq.n	800f53a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f536:	f000 fe27 	bl	8010188 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f53a:	7bfb      	ldrb	r3, [r7, #15]
 800f53c:	3b01      	subs	r3, #1
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f546:	2b00      	cmp	r3, #0
 800f548:	dce9      	bgt.n	800f51e <prvUnlockQueue+0x16>
 800f54a:	e000      	b.n	800f54e <prvUnlockQueue+0x46>
					break;
 800f54c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	22ff      	movs	r2, #255	; 0xff
 800f552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f556:	f002 f845 	bl	80115e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f55a:	f002 f813 	bl	8011584 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f564:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f566:	e011      	b.n	800f58c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	691b      	ldr	r3, [r3, #16]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d012      	beq.n	800f596 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	3310      	adds	r3, #16
 800f574:	4618      	mov	r0, r3
 800f576:	f000 fd2b 	bl	800ffd0 <xTaskRemoveFromEventList>
 800f57a:	4603      	mov	r3, r0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d001      	beq.n	800f584 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f580:	f000 fe02 	bl	8010188 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f584:	7bbb      	ldrb	r3, [r7, #14]
 800f586:	3b01      	subs	r3, #1
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f58c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f590:	2b00      	cmp	r3, #0
 800f592:	dce9      	bgt.n	800f568 <prvUnlockQueue+0x60>
 800f594:	e000      	b.n	800f598 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f596:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	22ff      	movs	r2, #255	; 0xff
 800f59c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f5a0:	f002 f820 	bl	80115e4 <vPortExitCritical>
}
 800f5a4:	bf00      	nop
 800f5a6:	3710      	adds	r7, #16
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5b4:	f001 ffe6 	bl	8011584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d102      	bne.n	800f5c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	60fb      	str	r3, [r7, #12]
 800f5c4:	e001      	b.n	800f5ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5ca:	f002 f80b 	bl	80115e4 <vPortExitCritical>

	return xReturn;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3710      	adds	r7, #16
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5e0:	f001 ffd0 	bl	8011584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d102      	bne.n	800f5f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	60fb      	str	r3, [r7, #12]
 800f5f4:	e001      	b.n	800f5fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5fa:	f001 fff3 	bl	80115e4 <vPortExitCritical>

	return xReturn;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
}
 800f600:	4618      	mov	r0, r3
 800f602:	3710      	adds	r7, #16
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}

0800f608 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f608:	b480      	push	{r7}
 800f60a:	b085      	sub	sp, #20
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f612:	2300      	movs	r3, #0
 800f614:	60fb      	str	r3, [r7, #12]
 800f616:	e014      	b.n	800f642 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f618:	4a0f      	ldr	r2, [pc, #60]	; (800f658 <vQueueAddToRegistry+0x50>)
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d10b      	bne.n	800f63c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f624:	490c      	ldr	r1, [pc, #48]	; (800f658 <vQueueAddToRegistry+0x50>)
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	683a      	ldr	r2, [r7, #0]
 800f62a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f62e:	4a0a      	ldr	r2, [pc, #40]	; (800f658 <vQueueAddToRegistry+0x50>)
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	00db      	lsls	r3, r3, #3
 800f634:	4413      	add	r3, r2
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f63a:	e006      	b.n	800f64a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	3301      	adds	r3, #1
 800f640:	60fb      	str	r3, [r7, #12]
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	2b07      	cmp	r3, #7
 800f646:	d9e7      	bls.n	800f618 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f648:	bf00      	nop
 800f64a:	bf00      	nop
 800f64c:	3714      	adds	r7, #20
 800f64e:	46bd      	mov	sp, r7
 800f650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f654:	4770      	bx	lr
 800f656:	bf00      	nop
 800f658:	20003fc8 	.word	0x20003fc8

0800f65c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b086      	sub	sp, #24
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f66c:	f001 ff8a 	bl	8011584 <vPortEnterCritical>
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f676:	b25b      	sxtb	r3, r3
 800f678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f67c:	d103      	bne.n	800f686 <vQueueWaitForMessageRestricted+0x2a>
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	2200      	movs	r2, #0
 800f682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f68c:	b25b      	sxtb	r3, r3
 800f68e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f692:	d103      	bne.n	800f69c <vQueueWaitForMessageRestricted+0x40>
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	2200      	movs	r2, #0
 800f698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f69c:	f001 ffa2 	bl	80115e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d106      	bne.n	800f6b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	3324      	adds	r3, #36	; 0x24
 800f6ac:	687a      	ldr	r2, [r7, #4]
 800f6ae:	68b9      	ldr	r1, [r7, #8]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f000 fc61 	bl	800ff78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f6b6:	6978      	ldr	r0, [r7, #20]
 800f6b8:	f7ff ff26 	bl	800f508 <prvUnlockQueue>
	}
 800f6bc:	bf00      	nop
 800f6be:	3718      	adds	r7, #24
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b08e      	sub	sp, #56	; 0x38
 800f6c8:	af04      	add	r7, sp, #16
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	607a      	str	r2, [r7, #4]
 800f6d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d10a      	bne.n	800f6ee <xTaskCreateStatic+0x2a>
	__asm volatile
 800f6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6dc:	f383 8811 	msr	BASEPRI, r3
 800f6e0:	f3bf 8f6f 	isb	sy
 800f6e4:	f3bf 8f4f 	dsb	sy
 800f6e8:	623b      	str	r3, [r7, #32]
}
 800f6ea:	bf00      	nop
 800f6ec:	e7fe      	b.n	800f6ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d10a      	bne.n	800f70a <xTaskCreateStatic+0x46>
	__asm volatile
 800f6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f8:	f383 8811 	msr	BASEPRI, r3
 800f6fc:	f3bf 8f6f 	isb	sy
 800f700:	f3bf 8f4f 	dsb	sy
 800f704:	61fb      	str	r3, [r7, #28]
}
 800f706:	bf00      	nop
 800f708:	e7fe      	b.n	800f708 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f70a:	23bc      	movs	r3, #188	; 0xbc
 800f70c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	2bbc      	cmp	r3, #188	; 0xbc
 800f712:	d00a      	beq.n	800f72a <xTaskCreateStatic+0x66>
	__asm volatile
 800f714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f718:	f383 8811 	msr	BASEPRI, r3
 800f71c:	f3bf 8f6f 	isb	sy
 800f720:	f3bf 8f4f 	dsb	sy
 800f724:	61bb      	str	r3, [r7, #24]
}
 800f726:	bf00      	nop
 800f728:	e7fe      	b.n	800f728 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f72a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d01e      	beq.n	800f770 <xTaskCreateStatic+0xac>
 800f732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f734:	2b00      	cmp	r3, #0
 800f736:	d01b      	beq.n	800f770 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f740:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f744:	2202      	movs	r2, #2
 800f746:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f74a:	2300      	movs	r3, #0
 800f74c:	9303      	str	r3, [sp, #12]
 800f74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f750:	9302      	str	r3, [sp, #8]
 800f752:	f107 0314 	add.w	r3, r7, #20
 800f756:	9301      	str	r3, [sp, #4]
 800f758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	68b9      	ldr	r1, [r7, #8]
 800f762:	68f8      	ldr	r0, [r7, #12]
 800f764:	f000 f850 	bl	800f808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f76a:	f000 f8f3 	bl	800f954 <prvAddNewTaskToReadyList>
 800f76e:	e001      	b.n	800f774 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f770:	2300      	movs	r3, #0
 800f772:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f774:	697b      	ldr	r3, [r7, #20]
	}
 800f776:	4618      	mov	r0, r3
 800f778:	3728      	adds	r7, #40	; 0x28
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f77e:	b580      	push	{r7, lr}
 800f780:	b08c      	sub	sp, #48	; 0x30
 800f782:	af04      	add	r7, sp, #16
 800f784:	60f8      	str	r0, [r7, #12]
 800f786:	60b9      	str	r1, [r7, #8]
 800f788:	603b      	str	r3, [r7, #0]
 800f78a:	4613      	mov	r3, r2
 800f78c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f78e:	88fb      	ldrh	r3, [r7, #6]
 800f790:	009b      	lsls	r3, r3, #2
 800f792:	4618      	mov	r0, r3
 800f794:	f002 f818 	bl	80117c8 <pvPortMalloc>
 800f798:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d00e      	beq.n	800f7be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f7a0:	20bc      	movs	r0, #188	; 0xbc
 800f7a2:	f002 f811 	bl	80117c8 <pvPortMalloc>
 800f7a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f7a8:	69fb      	ldr	r3, [r7, #28]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d003      	beq.n	800f7b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	697a      	ldr	r2, [r7, #20]
 800f7b2:	631a      	str	r2, [r3, #48]	; 0x30
 800f7b4:	e005      	b.n	800f7c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f7b6:	6978      	ldr	r0, [r7, #20]
 800f7b8:	f002 f8d2 	bl	8011960 <vPortFree>
 800f7bc:	e001      	b.n	800f7c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d017      	beq.n	800f7f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f7d0:	88fa      	ldrh	r2, [r7, #6]
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	9303      	str	r3, [sp, #12]
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	9302      	str	r3, [sp, #8]
 800f7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7dc:	9301      	str	r3, [sp, #4]
 800f7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e0:	9300      	str	r3, [sp, #0]
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	68b9      	ldr	r1, [r7, #8]
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f000 f80e 	bl	800f808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f7ec:	69f8      	ldr	r0, [r7, #28]
 800f7ee:	f000 f8b1 	bl	800f954 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	61bb      	str	r3, [r7, #24]
 800f7f6:	e002      	b.n	800f7fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f7f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f7fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f7fe:	69bb      	ldr	r3, [r7, #24]
	}
 800f800:	4618      	mov	r0, r3
 800f802:	3720      	adds	r7, #32
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b088      	sub	sp, #32
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]
 800f814:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f818:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	461a      	mov	r2, r3
 800f820:	21a5      	movs	r1, #165	; 0xa5
 800f822:	f003 fb65 	bl	8012ef0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f830:	3b01      	subs	r3, #1
 800f832:	009b      	lsls	r3, r3, #2
 800f834:	4413      	add	r3, r2
 800f836:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f838:	69bb      	ldr	r3, [r7, #24]
 800f83a:	f023 0307 	bic.w	r3, r3, #7
 800f83e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	f003 0307 	and.w	r3, r3, #7
 800f846:	2b00      	cmp	r3, #0
 800f848:	d00a      	beq.n	800f860 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f84e:	f383 8811 	msr	BASEPRI, r3
 800f852:	f3bf 8f6f 	isb	sy
 800f856:	f3bf 8f4f 	dsb	sy
 800f85a:	617b      	str	r3, [r7, #20]
}
 800f85c:	bf00      	nop
 800f85e:	e7fe      	b.n	800f85e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d01f      	beq.n	800f8a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f866:	2300      	movs	r3, #0
 800f868:	61fb      	str	r3, [r7, #28]
 800f86a:	e012      	b.n	800f892 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f86c:	68ba      	ldr	r2, [r7, #8]
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	4413      	add	r3, r2
 800f872:	7819      	ldrb	r1, [r3, #0]
 800f874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	4413      	add	r3, r2
 800f87a:	3334      	adds	r3, #52	; 0x34
 800f87c:	460a      	mov	r2, r1
 800f87e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f880:	68ba      	ldr	r2, [r7, #8]
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	4413      	add	r3, r2
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d006      	beq.n	800f89a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	3301      	adds	r3, #1
 800f890:	61fb      	str	r3, [r7, #28]
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	2b0f      	cmp	r3, #15
 800f896:	d9e9      	bls.n	800f86c <prvInitialiseNewTask+0x64>
 800f898:	e000      	b.n	800f89c <prvInitialiseNewTask+0x94>
			{
				break;
 800f89a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89e:	2200      	movs	r2, #0
 800f8a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f8a4:	e003      	b.n	800f8ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b0:	2b37      	cmp	r3, #55	; 0x37
 800f8b2:	d901      	bls.n	800f8b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f8b4:	2337      	movs	r3, #55	; 0x37
 800f8b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8cc:	3304      	adds	r3, #4
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fe fec2 	bl	800e658 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d6:	3318      	adds	r3, #24
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7fe febd 	bl	800e658 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fe:	2200      	movs	r2, #0
 800f900:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f906:	3354      	adds	r3, #84	; 0x54
 800f908:	2260      	movs	r2, #96	; 0x60
 800f90a:	2100      	movs	r1, #0
 800f90c:	4618      	mov	r0, r3
 800f90e:	f003 faef 	bl	8012ef0 <memset>
 800f912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f914:	4a0c      	ldr	r2, [pc, #48]	; (800f948 <prvInitialiseNewTask+0x140>)
 800f916:	659a      	str	r2, [r3, #88]	; 0x58
 800f918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91a:	4a0c      	ldr	r2, [pc, #48]	; (800f94c <prvInitialiseNewTask+0x144>)
 800f91c:	65da      	str	r2, [r3, #92]	; 0x5c
 800f91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f920:	4a0b      	ldr	r2, [pc, #44]	; (800f950 <prvInitialiseNewTask+0x148>)
 800f922:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f924:	683a      	ldr	r2, [r7, #0]
 800f926:	68f9      	ldr	r1, [r7, #12]
 800f928:	69b8      	ldr	r0, [r7, #24]
 800f92a:	f001 fcfb 	bl	8011324 <pxPortInitialiseStack>
 800f92e:	4602      	mov	r2, r0
 800f930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f932:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f936:	2b00      	cmp	r3, #0
 800f938:	d002      	beq.n	800f940 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f93e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f940:	bf00      	nop
 800f942:	3720      	adds	r7, #32
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}
 800f948:	080133a0 	.word	0x080133a0
 800f94c:	080133c0 	.word	0x080133c0
 800f950:	08013380 	.word	0x08013380

0800f954 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f95c:	f001 fe12 	bl	8011584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f960:	4b2d      	ldr	r3, [pc, #180]	; (800fa18 <prvAddNewTaskToReadyList+0xc4>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	3301      	adds	r3, #1
 800f966:	4a2c      	ldr	r2, [pc, #176]	; (800fa18 <prvAddNewTaskToReadyList+0xc4>)
 800f968:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f96a:	4b2c      	ldr	r3, [pc, #176]	; (800fa1c <prvAddNewTaskToReadyList+0xc8>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d109      	bne.n	800f986 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f972:	4a2a      	ldr	r2, [pc, #168]	; (800fa1c <prvAddNewTaskToReadyList+0xc8>)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f978:	4b27      	ldr	r3, [pc, #156]	; (800fa18 <prvAddNewTaskToReadyList+0xc4>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d110      	bne.n	800f9a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f980:	f000 fc26 	bl	80101d0 <prvInitialiseTaskLists>
 800f984:	e00d      	b.n	800f9a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f986:	4b26      	ldr	r3, [pc, #152]	; (800fa20 <prvAddNewTaskToReadyList+0xcc>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d109      	bne.n	800f9a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f98e:	4b23      	ldr	r3, [pc, #140]	; (800fa1c <prvAddNewTaskToReadyList+0xc8>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f998:	429a      	cmp	r2, r3
 800f99a:	d802      	bhi.n	800f9a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f99c:	4a1f      	ldr	r2, [pc, #124]	; (800fa1c <prvAddNewTaskToReadyList+0xc8>)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f9a2:	4b20      	ldr	r3, [pc, #128]	; (800fa24 <prvAddNewTaskToReadyList+0xd0>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	4a1e      	ldr	r2, [pc, #120]	; (800fa24 <prvAddNewTaskToReadyList+0xd0>)
 800f9aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f9ac:	4b1d      	ldr	r3, [pc, #116]	; (800fa24 <prvAddNewTaskToReadyList+0xd0>)
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9b8:	4b1b      	ldr	r3, [pc, #108]	; (800fa28 <prvAddNewTaskToReadyList+0xd4>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d903      	bls.n	800f9c8 <prvAddNewTaskToReadyList+0x74>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9c4:	4a18      	ldr	r2, [pc, #96]	; (800fa28 <prvAddNewTaskToReadyList+0xd4>)
 800f9c6:	6013      	str	r3, [r2, #0]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9cc:	4613      	mov	r3, r2
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	4413      	add	r3, r2
 800f9d2:	009b      	lsls	r3, r3, #2
 800f9d4:	4a15      	ldr	r2, [pc, #84]	; (800fa2c <prvAddNewTaskToReadyList+0xd8>)
 800f9d6:	441a      	add	r2, r3
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	3304      	adds	r3, #4
 800f9dc:	4619      	mov	r1, r3
 800f9de:	4610      	mov	r0, r2
 800f9e0:	f7fe fe47 	bl	800e672 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f9e4:	f001 fdfe 	bl	80115e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f9e8:	4b0d      	ldr	r3, [pc, #52]	; (800fa20 <prvAddNewTaskToReadyList+0xcc>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00e      	beq.n	800fa0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f9f0:	4b0a      	ldr	r3, [pc, #40]	; (800fa1c <prvAddNewTaskToReadyList+0xc8>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d207      	bcs.n	800fa0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f9fe:	4b0c      	ldr	r3, [pc, #48]	; (800fa30 <prvAddNewTaskToReadyList+0xdc>)
 800fa00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa04:	601a      	str	r2, [r3, #0]
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa0e:	bf00      	nop
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	2000117c 	.word	0x2000117c
 800fa1c:	20000ca8 	.word	0x20000ca8
 800fa20:	20001188 	.word	0x20001188
 800fa24:	20001198 	.word	0x20001198
 800fa28:	20001184 	.word	0x20001184
 800fa2c:	20000cac 	.word	0x20000cac
 800fa30:	e000ed04 	.word	0xe000ed04

0800fa34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d017      	beq.n	800fa76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fa46:	4b13      	ldr	r3, [pc, #76]	; (800fa94 <vTaskDelay+0x60>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d00a      	beq.n	800fa64 <vTaskDelay+0x30>
	__asm volatile
 800fa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa52:	f383 8811 	msr	BASEPRI, r3
 800fa56:	f3bf 8f6f 	isb	sy
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	60bb      	str	r3, [r7, #8]
}
 800fa60:	bf00      	nop
 800fa62:	e7fe      	b.n	800fa62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fa64:	f000 f88a 	bl	800fb7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fa68:	2100      	movs	r1, #0
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f000 fffe 	bl	8010a6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fa70:	f000 f892 	bl	800fb98 <xTaskResumeAll>
 800fa74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d107      	bne.n	800fa8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fa7c:	4b06      	ldr	r3, [pc, #24]	; (800fa98 <vTaskDelay+0x64>)
 800fa7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa82:	601a      	str	r2, [r3, #0]
 800fa84:	f3bf 8f4f 	dsb	sy
 800fa88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa8c:	bf00      	nop
 800fa8e:	3710      	adds	r7, #16
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	200011a4 	.word	0x200011a4
 800fa98:	e000ed04 	.word	0xe000ed04

0800fa9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b08a      	sub	sp, #40	; 0x28
 800faa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800faa2:	2300      	movs	r3, #0
 800faa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800faa6:	2300      	movs	r3, #0
 800faa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800faaa:	463a      	mov	r2, r7
 800faac:	1d39      	adds	r1, r7, #4
 800faae:	f107 0308 	add.w	r3, r7, #8
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7fe fd7c 	bl	800e5b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fab8:	6839      	ldr	r1, [r7, #0]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	68ba      	ldr	r2, [r7, #8]
 800fabe:	9202      	str	r2, [sp, #8]
 800fac0:	9301      	str	r3, [sp, #4]
 800fac2:	2300      	movs	r3, #0
 800fac4:	9300      	str	r3, [sp, #0]
 800fac6:	2300      	movs	r3, #0
 800fac8:	460a      	mov	r2, r1
 800faca:	4924      	ldr	r1, [pc, #144]	; (800fb5c <vTaskStartScheduler+0xc0>)
 800facc:	4824      	ldr	r0, [pc, #144]	; (800fb60 <vTaskStartScheduler+0xc4>)
 800face:	f7ff fdf9 	bl	800f6c4 <xTaskCreateStatic>
 800fad2:	4603      	mov	r3, r0
 800fad4:	4a23      	ldr	r2, [pc, #140]	; (800fb64 <vTaskStartScheduler+0xc8>)
 800fad6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fad8:	4b22      	ldr	r3, [pc, #136]	; (800fb64 <vTaskStartScheduler+0xc8>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d002      	beq.n	800fae6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fae0:	2301      	movs	r3, #1
 800fae2:	617b      	str	r3, [r7, #20]
 800fae4:	e001      	b.n	800faea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fae6:	2300      	movs	r3, #0
 800fae8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	2b01      	cmp	r3, #1
 800faee:	d102      	bne.n	800faf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800faf0:	f001 f810 	bl	8010b14 <xTimerCreateTimerTask>
 800faf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d11b      	bne.n	800fb34 <vTaskStartScheduler+0x98>
	__asm volatile
 800fafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb00:	f383 8811 	msr	BASEPRI, r3
 800fb04:	f3bf 8f6f 	isb	sy
 800fb08:	f3bf 8f4f 	dsb	sy
 800fb0c:	613b      	str	r3, [r7, #16]
}
 800fb0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fb10:	4b15      	ldr	r3, [pc, #84]	; (800fb68 <vTaskStartScheduler+0xcc>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	3354      	adds	r3, #84	; 0x54
 800fb16:	4a15      	ldr	r2, [pc, #84]	; (800fb6c <vTaskStartScheduler+0xd0>)
 800fb18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fb1a:	4b15      	ldr	r3, [pc, #84]	; (800fb70 <vTaskStartScheduler+0xd4>)
 800fb1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fb22:	4b14      	ldr	r3, [pc, #80]	; (800fb74 <vTaskStartScheduler+0xd8>)
 800fb24:	2201      	movs	r2, #1
 800fb26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fb28:	4b13      	ldr	r3, [pc, #76]	; (800fb78 <vTaskStartScheduler+0xdc>)
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fb2e:	f001 fc87 	bl	8011440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fb32:	e00e      	b.n	800fb52 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb3a:	d10a      	bne.n	800fb52 <vTaskStartScheduler+0xb6>
	__asm volatile
 800fb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb40:	f383 8811 	msr	BASEPRI, r3
 800fb44:	f3bf 8f6f 	isb	sy
 800fb48:	f3bf 8f4f 	dsb	sy
 800fb4c:	60fb      	str	r3, [r7, #12]
}
 800fb4e:	bf00      	nop
 800fb50:	e7fe      	b.n	800fb50 <vTaskStartScheduler+0xb4>
}
 800fb52:	bf00      	nop
 800fb54:	3718      	adds	r7, #24
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	0801313c 	.word	0x0801313c
 800fb60:	080101a1 	.word	0x080101a1
 800fb64:	200011a0 	.word	0x200011a0
 800fb68:	20000ca8 	.word	0x20000ca8
 800fb6c:	20000198 	.word	0x20000198
 800fb70:	2000119c 	.word	0x2000119c
 800fb74:	20001188 	.word	0x20001188
 800fb78:	20001180 	.word	0x20001180

0800fb7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fb80:	4b04      	ldr	r3, [pc, #16]	; (800fb94 <vTaskSuspendAll+0x18>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	3301      	adds	r3, #1
 800fb86:	4a03      	ldr	r2, [pc, #12]	; (800fb94 <vTaskSuspendAll+0x18>)
 800fb88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fb8a:	bf00      	nop
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr
 800fb94:	200011a4 	.word	0x200011a4

0800fb98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fba2:	2300      	movs	r3, #0
 800fba4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fba6:	4b42      	ldr	r3, [pc, #264]	; (800fcb0 <xTaskResumeAll+0x118>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d10a      	bne.n	800fbc4 <xTaskResumeAll+0x2c>
	__asm volatile
 800fbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb2:	f383 8811 	msr	BASEPRI, r3
 800fbb6:	f3bf 8f6f 	isb	sy
 800fbba:	f3bf 8f4f 	dsb	sy
 800fbbe:	603b      	str	r3, [r7, #0]
}
 800fbc0:	bf00      	nop
 800fbc2:	e7fe      	b.n	800fbc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fbc4:	f001 fcde 	bl	8011584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fbc8:	4b39      	ldr	r3, [pc, #228]	; (800fcb0 <xTaskResumeAll+0x118>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	3b01      	subs	r3, #1
 800fbce:	4a38      	ldr	r2, [pc, #224]	; (800fcb0 <xTaskResumeAll+0x118>)
 800fbd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbd2:	4b37      	ldr	r3, [pc, #220]	; (800fcb0 <xTaskResumeAll+0x118>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d162      	bne.n	800fca0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fbda:	4b36      	ldr	r3, [pc, #216]	; (800fcb4 <xTaskResumeAll+0x11c>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d05e      	beq.n	800fca0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbe2:	e02f      	b.n	800fc44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbe4:	4b34      	ldr	r3, [pc, #208]	; (800fcb8 <xTaskResumeAll+0x120>)
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	68db      	ldr	r3, [r3, #12]
 800fbea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	3318      	adds	r3, #24
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fe fd9b 	bl	800e72c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	3304      	adds	r3, #4
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7fe fd96 	bl	800e72c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc04:	4b2d      	ldr	r3, [pc, #180]	; (800fcbc <xTaskResumeAll+0x124>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d903      	bls.n	800fc14 <xTaskResumeAll+0x7c>
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc10:	4a2a      	ldr	r2, [pc, #168]	; (800fcbc <xTaskResumeAll+0x124>)
 800fc12:	6013      	str	r3, [r2, #0]
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc18:	4613      	mov	r3, r2
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	4413      	add	r3, r2
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	4a27      	ldr	r2, [pc, #156]	; (800fcc0 <xTaskResumeAll+0x128>)
 800fc22:	441a      	add	r2, r3
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	3304      	adds	r3, #4
 800fc28:	4619      	mov	r1, r3
 800fc2a:	4610      	mov	r0, r2
 800fc2c:	f7fe fd21 	bl	800e672 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc34:	4b23      	ldr	r3, [pc, #140]	; (800fcc4 <xTaskResumeAll+0x12c>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d302      	bcc.n	800fc44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fc3e:	4b22      	ldr	r3, [pc, #136]	; (800fcc8 <xTaskResumeAll+0x130>)
 800fc40:	2201      	movs	r2, #1
 800fc42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc44:	4b1c      	ldr	r3, [pc, #112]	; (800fcb8 <xTaskResumeAll+0x120>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d1cb      	bne.n	800fbe4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d001      	beq.n	800fc56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fc52:	f000 fb5f 	bl	8010314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fc56:	4b1d      	ldr	r3, [pc, #116]	; (800fccc <xTaskResumeAll+0x134>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d010      	beq.n	800fc84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fc62:	f000 f847 	bl	800fcf4 <xTaskIncrementTick>
 800fc66:	4603      	mov	r3, r0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d002      	beq.n	800fc72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fc6c:	4b16      	ldr	r3, [pc, #88]	; (800fcc8 <xTaskResumeAll+0x130>)
 800fc6e:	2201      	movs	r2, #1
 800fc70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	3b01      	subs	r3, #1
 800fc76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d1f1      	bne.n	800fc62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fc7e:	4b13      	ldr	r3, [pc, #76]	; (800fccc <xTaskResumeAll+0x134>)
 800fc80:	2200      	movs	r2, #0
 800fc82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fc84:	4b10      	ldr	r3, [pc, #64]	; (800fcc8 <xTaskResumeAll+0x130>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d009      	beq.n	800fca0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fc90:	4b0f      	ldr	r3, [pc, #60]	; (800fcd0 <xTaskResumeAll+0x138>)
 800fc92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc96:	601a      	str	r2, [r3, #0]
 800fc98:	f3bf 8f4f 	dsb	sy
 800fc9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fca0:	f001 fca0 	bl	80115e4 <vPortExitCritical>

	return xAlreadyYielded;
 800fca4:	68bb      	ldr	r3, [r7, #8]
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3710      	adds	r7, #16
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	200011a4 	.word	0x200011a4
 800fcb4:	2000117c 	.word	0x2000117c
 800fcb8:	2000113c 	.word	0x2000113c
 800fcbc:	20001184 	.word	0x20001184
 800fcc0:	20000cac 	.word	0x20000cac
 800fcc4:	20000ca8 	.word	0x20000ca8
 800fcc8:	20001190 	.word	0x20001190
 800fccc:	2000118c 	.word	0x2000118c
 800fcd0:	e000ed04 	.word	0xe000ed04

0800fcd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fcda:	4b05      	ldr	r3, [pc, #20]	; (800fcf0 <xTaskGetTickCount+0x1c>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fce0:	687b      	ldr	r3, [r7, #4]
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	370c      	adds	r7, #12
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	20001180 	.word	0x20001180

0800fcf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b086      	sub	sp, #24
 800fcf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcfe:	4b4f      	ldr	r3, [pc, #316]	; (800fe3c <xTaskIncrementTick+0x148>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f040 808f 	bne.w	800fe26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fd08:	4b4d      	ldr	r3, [pc, #308]	; (800fe40 <xTaskIncrementTick+0x14c>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fd10:	4a4b      	ldr	r2, [pc, #300]	; (800fe40 <xTaskIncrementTick+0x14c>)
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d120      	bne.n	800fd5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fd1c:	4b49      	ldr	r3, [pc, #292]	; (800fe44 <xTaskIncrementTick+0x150>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d00a      	beq.n	800fd3c <xTaskIncrementTick+0x48>
	__asm volatile
 800fd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd2a:	f383 8811 	msr	BASEPRI, r3
 800fd2e:	f3bf 8f6f 	isb	sy
 800fd32:	f3bf 8f4f 	dsb	sy
 800fd36:	603b      	str	r3, [r7, #0]
}
 800fd38:	bf00      	nop
 800fd3a:	e7fe      	b.n	800fd3a <xTaskIncrementTick+0x46>
 800fd3c:	4b41      	ldr	r3, [pc, #260]	; (800fe44 <xTaskIncrementTick+0x150>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	60fb      	str	r3, [r7, #12]
 800fd42:	4b41      	ldr	r3, [pc, #260]	; (800fe48 <xTaskIncrementTick+0x154>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4a3f      	ldr	r2, [pc, #252]	; (800fe44 <xTaskIncrementTick+0x150>)
 800fd48:	6013      	str	r3, [r2, #0]
 800fd4a:	4a3f      	ldr	r2, [pc, #252]	; (800fe48 <xTaskIncrementTick+0x154>)
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6013      	str	r3, [r2, #0]
 800fd50:	4b3e      	ldr	r3, [pc, #248]	; (800fe4c <xTaskIncrementTick+0x158>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	3301      	adds	r3, #1
 800fd56:	4a3d      	ldr	r2, [pc, #244]	; (800fe4c <xTaskIncrementTick+0x158>)
 800fd58:	6013      	str	r3, [r2, #0]
 800fd5a:	f000 fadb 	bl	8010314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fd5e:	4b3c      	ldr	r3, [pc, #240]	; (800fe50 <xTaskIncrementTick+0x15c>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	693a      	ldr	r2, [r7, #16]
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d349      	bcc.n	800fdfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd68:	4b36      	ldr	r3, [pc, #216]	; (800fe44 <xTaskIncrementTick+0x150>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d104      	bne.n	800fd7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd72:	4b37      	ldr	r3, [pc, #220]	; (800fe50 <xTaskIncrementTick+0x15c>)
 800fd74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd78:	601a      	str	r2, [r3, #0]
					break;
 800fd7a:	e03f      	b.n	800fdfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd7c:	4b31      	ldr	r3, [pc, #196]	; (800fe44 <xTaskIncrementTick+0x150>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	68db      	ldr	r3, [r3, #12]
 800fd82:	68db      	ldr	r3, [r3, #12]
 800fd84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd8c:	693a      	ldr	r2, [r7, #16]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d203      	bcs.n	800fd9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd94:	4a2e      	ldr	r2, [pc, #184]	; (800fe50 <xTaskIncrementTick+0x15c>)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd9a:	e02f      	b.n	800fdfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	3304      	adds	r3, #4
 800fda0:	4618      	mov	r0, r3
 800fda2:	f7fe fcc3 	bl	800e72c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d004      	beq.n	800fdb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	3318      	adds	r3, #24
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7fe fcba 	bl	800e72c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdbc:	4b25      	ldr	r3, [pc, #148]	; (800fe54 <xTaskIncrementTick+0x160>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d903      	bls.n	800fdcc <xTaskIncrementTick+0xd8>
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdc8:	4a22      	ldr	r2, [pc, #136]	; (800fe54 <xTaskIncrementTick+0x160>)
 800fdca:	6013      	str	r3, [r2, #0]
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdd0:	4613      	mov	r3, r2
 800fdd2:	009b      	lsls	r3, r3, #2
 800fdd4:	4413      	add	r3, r2
 800fdd6:	009b      	lsls	r3, r3, #2
 800fdd8:	4a1f      	ldr	r2, [pc, #124]	; (800fe58 <xTaskIncrementTick+0x164>)
 800fdda:	441a      	add	r2, r3
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	3304      	adds	r3, #4
 800fde0:	4619      	mov	r1, r3
 800fde2:	4610      	mov	r0, r2
 800fde4:	f7fe fc45 	bl	800e672 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdec:	4b1b      	ldr	r3, [pc, #108]	; (800fe5c <xTaskIncrementTick+0x168>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d3b8      	bcc.n	800fd68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdfa:	e7b5      	b.n	800fd68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fdfc:	4b17      	ldr	r3, [pc, #92]	; (800fe5c <xTaskIncrementTick+0x168>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe02:	4915      	ldr	r1, [pc, #84]	; (800fe58 <xTaskIncrementTick+0x164>)
 800fe04:	4613      	mov	r3, r2
 800fe06:	009b      	lsls	r3, r3, #2
 800fe08:	4413      	add	r3, r2
 800fe0a:	009b      	lsls	r3, r3, #2
 800fe0c:	440b      	add	r3, r1
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d901      	bls.n	800fe18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fe14:	2301      	movs	r3, #1
 800fe16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fe18:	4b11      	ldr	r3, [pc, #68]	; (800fe60 <xTaskIncrementTick+0x16c>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d007      	beq.n	800fe30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fe20:	2301      	movs	r3, #1
 800fe22:	617b      	str	r3, [r7, #20]
 800fe24:	e004      	b.n	800fe30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fe26:	4b0f      	ldr	r3, [pc, #60]	; (800fe64 <xTaskIncrementTick+0x170>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	4a0d      	ldr	r2, [pc, #52]	; (800fe64 <xTaskIncrementTick+0x170>)
 800fe2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fe30:	697b      	ldr	r3, [r7, #20]
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3718      	adds	r7, #24
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	200011a4 	.word	0x200011a4
 800fe40:	20001180 	.word	0x20001180
 800fe44:	20001134 	.word	0x20001134
 800fe48:	20001138 	.word	0x20001138
 800fe4c:	20001194 	.word	0x20001194
 800fe50:	2000119c 	.word	0x2000119c
 800fe54:	20001184 	.word	0x20001184
 800fe58:	20000cac 	.word	0x20000cac
 800fe5c:	20000ca8 	.word	0x20000ca8
 800fe60:	20001190 	.word	0x20001190
 800fe64:	2000118c 	.word	0x2000118c

0800fe68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe6e:	4b2a      	ldr	r3, [pc, #168]	; (800ff18 <vTaskSwitchContext+0xb0>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d003      	beq.n	800fe7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe76:	4b29      	ldr	r3, [pc, #164]	; (800ff1c <vTaskSwitchContext+0xb4>)
 800fe78:	2201      	movs	r2, #1
 800fe7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe7c:	e046      	b.n	800ff0c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800fe7e:	4b27      	ldr	r3, [pc, #156]	; (800ff1c <vTaskSwitchContext+0xb4>)
 800fe80:	2200      	movs	r2, #0
 800fe82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe84:	4b26      	ldr	r3, [pc, #152]	; (800ff20 <vTaskSwitchContext+0xb8>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	60fb      	str	r3, [r7, #12]
 800fe8a:	e010      	b.n	800feae <vTaskSwitchContext+0x46>
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d10a      	bne.n	800fea8 <vTaskSwitchContext+0x40>
	__asm volatile
 800fe92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe96:	f383 8811 	msr	BASEPRI, r3
 800fe9a:	f3bf 8f6f 	isb	sy
 800fe9e:	f3bf 8f4f 	dsb	sy
 800fea2:	607b      	str	r3, [r7, #4]
}
 800fea4:	bf00      	nop
 800fea6:	e7fe      	b.n	800fea6 <vTaskSwitchContext+0x3e>
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	3b01      	subs	r3, #1
 800feac:	60fb      	str	r3, [r7, #12]
 800feae:	491d      	ldr	r1, [pc, #116]	; (800ff24 <vTaskSwitchContext+0xbc>)
 800feb0:	68fa      	ldr	r2, [r7, #12]
 800feb2:	4613      	mov	r3, r2
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	4413      	add	r3, r2
 800feb8:	009b      	lsls	r3, r3, #2
 800feba:	440b      	add	r3, r1
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d0e4      	beq.n	800fe8c <vTaskSwitchContext+0x24>
 800fec2:	68fa      	ldr	r2, [r7, #12]
 800fec4:	4613      	mov	r3, r2
 800fec6:	009b      	lsls	r3, r3, #2
 800fec8:	4413      	add	r3, r2
 800feca:	009b      	lsls	r3, r3, #2
 800fecc:	4a15      	ldr	r2, [pc, #84]	; (800ff24 <vTaskSwitchContext+0xbc>)
 800fece:	4413      	add	r3, r2
 800fed0:	60bb      	str	r3, [r7, #8]
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	685a      	ldr	r2, [r3, #4]
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	605a      	str	r2, [r3, #4]
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	685a      	ldr	r2, [r3, #4]
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	3308      	adds	r3, #8
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d104      	bne.n	800fef2 <vTaskSwitchContext+0x8a>
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	685a      	ldr	r2, [r3, #4]
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	605a      	str	r2, [r3, #4]
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	68db      	ldr	r3, [r3, #12]
 800fef8:	4a0b      	ldr	r2, [pc, #44]	; (800ff28 <vTaskSwitchContext+0xc0>)
 800fefa:	6013      	str	r3, [r2, #0]
 800fefc:	4a08      	ldr	r2, [pc, #32]	; (800ff20 <vTaskSwitchContext+0xb8>)
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ff02:	4b09      	ldr	r3, [pc, #36]	; (800ff28 <vTaskSwitchContext+0xc0>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	3354      	adds	r3, #84	; 0x54
 800ff08:	4a08      	ldr	r2, [pc, #32]	; (800ff2c <vTaskSwitchContext+0xc4>)
 800ff0a:	6013      	str	r3, [r2, #0]
}
 800ff0c:	bf00      	nop
 800ff0e:	3714      	adds	r7, #20
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr
 800ff18:	200011a4 	.word	0x200011a4
 800ff1c:	20001190 	.word	0x20001190
 800ff20:	20001184 	.word	0x20001184
 800ff24:	20000cac 	.word	0x20000cac
 800ff28:	20000ca8 	.word	0x20000ca8
 800ff2c:	20000198 	.word	0x20000198

0800ff30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d10a      	bne.n	800ff56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ff40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff44:	f383 8811 	msr	BASEPRI, r3
 800ff48:	f3bf 8f6f 	isb	sy
 800ff4c:	f3bf 8f4f 	dsb	sy
 800ff50:	60fb      	str	r3, [r7, #12]
}
 800ff52:	bf00      	nop
 800ff54:	e7fe      	b.n	800ff54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff56:	4b07      	ldr	r3, [pc, #28]	; (800ff74 <vTaskPlaceOnEventList+0x44>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	3318      	adds	r3, #24
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f7fe fbab 	bl	800e6ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff64:	2101      	movs	r1, #1
 800ff66:	6838      	ldr	r0, [r7, #0]
 800ff68:	f000 fd80 	bl	8010a6c <prvAddCurrentTaskToDelayedList>
}
 800ff6c:	bf00      	nop
 800ff6e:	3710      	adds	r7, #16
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	20000ca8 	.word	0x20000ca8

0800ff78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b086      	sub	sp, #24
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d10a      	bne.n	800ffa0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ff8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff8e:	f383 8811 	msr	BASEPRI, r3
 800ff92:	f3bf 8f6f 	isb	sy
 800ff96:	f3bf 8f4f 	dsb	sy
 800ff9a:	617b      	str	r3, [r7, #20]
}
 800ff9c:	bf00      	nop
 800ff9e:	e7fe      	b.n	800ff9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ffa0:	4b0a      	ldr	r3, [pc, #40]	; (800ffcc <vTaskPlaceOnEventListRestricted+0x54>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	3318      	adds	r3, #24
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f7fe fb62 	bl	800e672 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d002      	beq.n	800ffba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ffb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ffb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ffba:	6879      	ldr	r1, [r7, #4]
 800ffbc:	68b8      	ldr	r0, [r7, #8]
 800ffbe:	f000 fd55 	bl	8010a6c <prvAddCurrentTaskToDelayedList>
	}
 800ffc2:	bf00      	nop
 800ffc4:	3718      	adds	r7, #24
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	20000ca8 	.word	0x20000ca8

0800ffd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d10a      	bne.n	800fffc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ffe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffea:	f383 8811 	msr	BASEPRI, r3
 800ffee:	f3bf 8f6f 	isb	sy
 800fff2:	f3bf 8f4f 	dsb	sy
 800fff6:	60fb      	str	r3, [r7, #12]
}
 800fff8:	bf00      	nop
 800fffa:	e7fe      	b.n	800fffa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	3318      	adds	r3, #24
 8010000:	4618      	mov	r0, r3
 8010002:	f7fe fb93 	bl	800e72c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010006:	4b1e      	ldr	r3, [pc, #120]	; (8010080 <xTaskRemoveFromEventList+0xb0>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d11d      	bne.n	801004a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	3304      	adds	r3, #4
 8010012:	4618      	mov	r0, r3
 8010014:	f7fe fb8a 	bl	800e72c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801001c:	4b19      	ldr	r3, [pc, #100]	; (8010084 <xTaskRemoveFromEventList+0xb4>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	429a      	cmp	r2, r3
 8010022:	d903      	bls.n	801002c <xTaskRemoveFromEventList+0x5c>
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010028:	4a16      	ldr	r2, [pc, #88]	; (8010084 <xTaskRemoveFromEventList+0xb4>)
 801002a:	6013      	str	r3, [r2, #0]
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010030:	4613      	mov	r3, r2
 8010032:	009b      	lsls	r3, r3, #2
 8010034:	4413      	add	r3, r2
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	4a13      	ldr	r2, [pc, #76]	; (8010088 <xTaskRemoveFromEventList+0xb8>)
 801003a:	441a      	add	r2, r3
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	3304      	adds	r3, #4
 8010040:	4619      	mov	r1, r3
 8010042:	4610      	mov	r0, r2
 8010044:	f7fe fb15 	bl	800e672 <vListInsertEnd>
 8010048:	e005      	b.n	8010056 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	3318      	adds	r3, #24
 801004e:	4619      	mov	r1, r3
 8010050:	480e      	ldr	r0, [pc, #56]	; (801008c <xTaskRemoveFromEventList+0xbc>)
 8010052:	f7fe fb0e 	bl	800e672 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801005a:	4b0d      	ldr	r3, [pc, #52]	; (8010090 <xTaskRemoveFromEventList+0xc0>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010060:	429a      	cmp	r2, r3
 8010062:	d905      	bls.n	8010070 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010064:	2301      	movs	r3, #1
 8010066:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010068:	4b0a      	ldr	r3, [pc, #40]	; (8010094 <xTaskRemoveFromEventList+0xc4>)
 801006a:	2201      	movs	r2, #1
 801006c:	601a      	str	r2, [r3, #0]
 801006e:	e001      	b.n	8010074 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010070:	2300      	movs	r3, #0
 8010072:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010074:	697b      	ldr	r3, [r7, #20]
}
 8010076:	4618      	mov	r0, r3
 8010078:	3718      	adds	r7, #24
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	200011a4 	.word	0x200011a4
 8010084:	20001184 	.word	0x20001184
 8010088:	20000cac 	.word	0x20000cac
 801008c:	2000113c 	.word	0x2000113c
 8010090:	20000ca8 	.word	0x20000ca8
 8010094:	20001190 	.word	0x20001190

08010098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010098:	b480      	push	{r7}
 801009a:	b083      	sub	sp, #12
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80100a0:	4b06      	ldr	r3, [pc, #24]	; (80100bc <vTaskInternalSetTimeOutState+0x24>)
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80100a8:	4b05      	ldr	r3, [pc, #20]	; (80100c0 <vTaskInternalSetTimeOutState+0x28>)
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	605a      	str	r2, [r3, #4]
}
 80100b0:	bf00      	nop
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr
 80100bc:	20001194 	.word	0x20001194
 80100c0:	20001180 	.word	0x20001180

080100c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b088      	sub	sp, #32
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d10a      	bne.n	80100ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80100d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d8:	f383 8811 	msr	BASEPRI, r3
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f3bf 8f4f 	dsb	sy
 80100e4:	613b      	str	r3, [r7, #16]
}
 80100e6:	bf00      	nop
 80100e8:	e7fe      	b.n	80100e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d10a      	bne.n	8010106 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80100f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f4:	f383 8811 	msr	BASEPRI, r3
 80100f8:	f3bf 8f6f 	isb	sy
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	60fb      	str	r3, [r7, #12]
}
 8010102:	bf00      	nop
 8010104:	e7fe      	b.n	8010104 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010106:	f001 fa3d 	bl	8011584 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801010a:	4b1d      	ldr	r3, [pc, #116]	; (8010180 <xTaskCheckForTimeOut+0xbc>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	69ba      	ldr	r2, [r7, #24]
 8010116:	1ad3      	subs	r3, r2, r3
 8010118:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010122:	d102      	bne.n	801012a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010124:	2300      	movs	r3, #0
 8010126:	61fb      	str	r3, [r7, #28]
 8010128:	e023      	b.n	8010172 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	4b15      	ldr	r3, [pc, #84]	; (8010184 <xTaskCheckForTimeOut+0xc0>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	429a      	cmp	r2, r3
 8010134:	d007      	beq.n	8010146 <xTaskCheckForTimeOut+0x82>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	69ba      	ldr	r2, [r7, #24]
 801013c:	429a      	cmp	r2, r3
 801013e:	d302      	bcc.n	8010146 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010140:	2301      	movs	r3, #1
 8010142:	61fb      	str	r3, [r7, #28]
 8010144:	e015      	b.n	8010172 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	697a      	ldr	r2, [r7, #20]
 801014c:	429a      	cmp	r2, r3
 801014e:	d20b      	bcs.n	8010168 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	1ad2      	subs	r2, r2, r3
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7ff ff9b 	bl	8010098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010162:	2300      	movs	r3, #0
 8010164:	61fb      	str	r3, [r7, #28]
 8010166:	e004      	b.n	8010172 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	2200      	movs	r2, #0
 801016c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801016e:	2301      	movs	r3, #1
 8010170:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010172:	f001 fa37 	bl	80115e4 <vPortExitCritical>

	return xReturn;
 8010176:	69fb      	ldr	r3, [r7, #28]
}
 8010178:	4618      	mov	r0, r3
 801017a:	3720      	adds	r7, #32
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}
 8010180:	20001180 	.word	0x20001180
 8010184:	20001194 	.word	0x20001194

08010188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010188:	b480      	push	{r7}
 801018a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801018c:	4b03      	ldr	r3, [pc, #12]	; (801019c <vTaskMissedYield+0x14>)
 801018e:	2201      	movs	r2, #1
 8010190:	601a      	str	r2, [r3, #0]
}
 8010192:	bf00      	nop
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr
 801019c:	20001190 	.word	0x20001190

080101a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80101a8:	f000 f852 	bl	8010250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80101ac:	4b06      	ldr	r3, [pc, #24]	; (80101c8 <prvIdleTask+0x28>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d9f9      	bls.n	80101a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80101b4:	4b05      	ldr	r3, [pc, #20]	; (80101cc <prvIdleTask+0x2c>)
 80101b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101ba:	601a      	str	r2, [r3, #0]
 80101bc:	f3bf 8f4f 	dsb	sy
 80101c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80101c4:	e7f0      	b.n	80101a8 <prvIdleTask+0x8>
 80101c6:	bf00      	nop
 80101c8:	20000cac 	.word	0x20000cac
 80101cc:	e000ed04 	.word	0xe000ed04

080101d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80101d6:	2300      	movs	r3, #0
 80101d8:	607b      	str	r3, [r7, #4]
 80101da:	e00c      	b.n	80101f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	4613      	mov	r3, r2
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	4413      	add	r3, r2
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	4a12      	ldr	r2, [pc, #72]	; (8010230 <prvInitialiseTaskLists+0x60>)
 80101e8:	4413      	add	r3, r2
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fe fa14 	bl	800e618 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	3301      	adds	r3, #1
 80101f4:	607b      	str	r3, [r7, #4]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2b37      	cmp	r3, #55	; 0x37
 80101fa:	d9ef      	bls.n	80101dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80101fc:	480d      	ldr	r0, [pc, #52]	; (8010234 <prvInitialiseTaskLists+0x64>)
 80101fe:	f7fe fa0b 	bl	800e618 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010202:	480d      	ldr	r0, [pc, #52]	; (8010238 <prvInitialiseTaskLists+0x68>)
 8010204:	f7fe fa08 	bl	800e618 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010208:	480c      	ldr	r0, [pc, #48]	; (801023c <prvInitialiseTaskLists+0x6c>)
 801020a:	f7fe fa05 	bl	800e618 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801020e:	480c      	ldr	r0, [pc, #48]	; (8010240 <prvInitialiseTaskLists+0x70>)
 8010210:	f7fe fa02 	bl	800e618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010214:	480b      	ldr	r0, [pc, #44]	; (8010244 <prvInitialiseTaskLists+0x74>)
 8010216:	f7fe f9ff 	bl	800e618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801021a:	4b0b      	ldr	r3, [pc, #44]	; (8010248 <prvInitialiseTaskLists+0x78>)
 801021c:	4a05      	ldr	r2, [pc, #20]	; (8010234 <prvInitialiseTaskLists+0x64>)
 801021e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010220:	4b0a      	ldr	r3, [pc, #40]	; (801024c <prvInitialiseTaskLists+0x7c>)
 8010222:	4a05      	ldr	r2, [pc, #20]	; (8010238 <prvInitialiseTaskLists+0x68>)
 8010224:	601a      	str	r2, [r3, #0]
}
 8010226:	bf00      	nop
 8010228:	3708      	adds	r7, #8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	20000cac 	.word	0x20000cac
 8010234:	2000110c 	.word	0x2000110c
 8010238:	20001120 	.word	0x20001120
 801023c:	2000113c 	.word	0x2000113c
 8010240:	20001150 	.word	0x20001150
 8010244:	20001168 	.word	0x20001168
 8010248:	20001134 	.word	0x20001134
 801024c:	20001138 	.word	0x20001138

08010250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010256:	e019      	b.n	801028c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010258:	f001 f994 	bl	8011584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801025c:	4b10      	ldr	r3, [pc, #64]	; (80102a0 <prvCheckTasksWaitingTermination+0x50>)
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	3304      	adds	r3, #4
 8010268:	4618      	mov	r0, r3
 801026a:	f7fe fa5f 	bl	800e72c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801026e:	4b0d      	ldr	r3, [pc, #52]	; (80102a4 <prvCheckTasksWaitingTermination+0x54>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	3b01      	subs	r3, #1
 8010274:	4a0b      	ldr	r2, [pc, #44]	; (80102a4 <prvCheckTasksWaitingTermination+0x54>)
 8010276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010278:	4b0b      	ldr	r3, [pc, #44]	; (80102a8 <prvCheckTasksWaitingTermination+0x58>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	3b01      	subs	r3, #1
 801027e:	4a0a      	ldr	r2, [pc, #40]	; (80102a8 <prvCheckTasksWaitingTermination+0x58>)
 8010280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010282:	f001 f9af 	bl	80115e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f000 f810 	bl	80102ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801028c:	4b06      	ldr	r3, [pc, #24]	; (80102a8 <prvCheckTasksWaitingTermination+0x58>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d1e1      	bne.n	8010258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010294:	bf00      	nop
 8010296:	bf00      	nop
 8010298:	3708      	adds	r7, #8
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	20001150 	.word	0x20001150
 80102a4:	2000117c 	.word	0x2000117c
 80102a8:	20001164 	.word	0x20001164

080102ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b084      	sub	sp, #16
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	3354      	adds	r3, #84	; 0x54
 80102b8:	4618      	mov	r0, r3
 80102ba:	f002 fe2f 	bl	8012f1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d108      	bne.n	80102da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102cc:	4618      	mov	r0, r3
 80102ce:	f001 fb47 	bl	8011960 <vPortFree>
				vPortFree( pxTCB );
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f001 fb44 	bl	8011960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80102d8:	e018      	b.n	801030c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d103      	bne.n	80102ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f001 fb3b 	bl	8011960 <vPortFree>
	}
 80102ea:	e00f      	b.n	801030c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80102f2:	2b02      	cmp	r3, #2
 80102f4:	d00a      	beq.n	801030c <prvDeleteTCB+0x60>
	__asm volatile
 80102f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fa:	f383 8811 	msr	BASEPRI, r3
 80102fe:	f3bf 8f6f 	isb	sy
 8010302:	f3bf 8f4f 	dsb	sy
 8010306:	60fb      	str	r3, [r7, #12]
}
 8010308:	bf00      	nop
 801030a:	e7fe      	b.n	801030a <prvDeleteTCB+0x5e>
	}
 801030c:	bf00      	nop
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801031a:	4b0c      	ldr	r3, [pc, #48]	; (801034c <prvResetNextTaskUnblockTime+0x38>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d104      	bne.n	801032e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010324:	4b0a      	ldr	r3, [pc, #40]	; (8010350 <prvResetNextTaskUnblockTime+0x3c>)
 8010326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801032a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801032c:	e008      	b.n	8010340 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801032e:	4b07      	ldr	r3, [pc, #28]	; (801034c <prvResetNextTaskUnblockTime+0x38>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	4a04      	ldr	r2, [pc, #16]	; (8010350 <prvResetNextTaskUnblockTime+0x3c>)
 801033e:	6013      	str	r3, [r2, #0]
}
 8010340:	bf00      	nop
 8010342:	370c      	adds	r7, #12
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr
 801034c:	20001134 	.word	0x20001134
 8010350:	2000119c 	.word	0x2000119c

08010354 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010354:	b480      	push	{r7}
 8010356:	b083      	sub	sp, #12
 8010358:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801035a:	4b0b      	ldr	r3, [pc, #44]	; (8010388 <xTaskGetSchedulerState+0x34>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d102      	bne.n	8010368 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010362:	2301      	movs	r3, #1
 8010364:	607b      	str	r3, [r7, #4]
 8010366:	e008      	b.n	801037a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010368:	4b08      	ldr	r3, [pc, #32]	; (801038c <xTaskGetSchedulerState+0x38>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d102      	bne.n	8010376 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010370:	2302      	movs	r3, #2
 8010372:	607b      	str	r3, [r7, #4]
 8010374:	e001      	b.n	801037a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010376:	2300      	movs	r3, #0
 8010378:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801037a:	687b      	ldr	r3, [r7, #4]
	}
 801037c:	4618      	mov	r0, r3
 801037e:	370c      	adds	r7, #12
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr
 8010388:	20001188 	.word	0x20001188
 801038c:	200011a4 	.word	0x200011a4

08010390 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801039c:	2300      	movs	r3, #0
 801039e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d051      	beq.n	801044a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103aa:	4b2a      	ldr	r3, [pc, #168]	; (8010454 <xTaskPriorityInherit+0xc4>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d241      	bcs.n	8010438 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	699b      	ldr	r3, [r3, #24]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	db06      	blt.n	80103ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103bc:	4b25      	ldr	r3, [pc, #148]	; (8010454 <xTaskPriorityInherit+0xc4>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	6959      	ldr	r1, [r3, #20]
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103d2:	4613      	mov	r3, r2
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	4413      	add	r3, r2
 80103d8:	009b      	lsls	r3, r3, #2
 80103da:	4a1f      	ldr	r2, [pc, #124]	; (8010458 <xTaskPriorityInherit+0xc8>)
 80103dc:	4413      	add	r3, r2
 80103de:	4299      	cmp	r1, r3
 80103e0:	d122      	bne.n	8010428 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	3304      	adds	r3, #4
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7fe f9a0 	bl	800e72c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80103ec:	4b19      	ldr	r3, [pc, #100]	; (8010454 <xTaskPriorityInherit+0xc4>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103fa:	4b18      	ldr	r3, [pc, #96]	; (801045c <xTaskPriorityInherit+0xcc>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d903      	bls.n	801040a <xTaskPriorityInherit+0x7a>
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010406:	4a15      	ldr	r2, [pc, #84]	; (801045c <xTaskPriorityInherit+0xcc>)
 8010408:	6013      	str	r3, [r2, #0]
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801040e:	4613      	mov	r3, r2
 8010410:	009b      	lsls	r3, r3, #2
 8010412:	4413      	add	r3, r2
 8010414:	009b      	lsls	r3, r3, #2
 8010416:	4a10      	ldr	r2, [pc, #64]	; (8010458 <xTaskPriorityInherit+0xc8>)
 8010418:	441a      	add	r2, r3
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	3304      	adds	r3, #4
 801041e:	4619      	mov	r1, r3
 8010420:	4610      	mov	r0, r2
 8010422:	f7fe f926 	bl	800e672 <vListInsertEnd>
 8010426:	e004      	b.n	8010432 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010428:	4b0a      	ldr	r3, [pc, #40]	; (8010454 <xTaskPriorityInherit+0xc4>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010432:	2301      	movs	r3, #1
 8010434:	60fb      	str	r3, [r7, #12]
 8010436:	e008      	b.n	801044a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801043c:	4b05      	ldr	r3, [pc, #20]	; (8010454 <xTaskPriorityInherit+0xc4>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010442:	429a      	cmp	r2, r3
 8010444:	d201      	bcs.n	801044a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010446:	2301      	movs	r3, #1
 8010448:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801044a:	68fb      	ldr	r3, [r7, #12]
	}
 801044c:	4618      	mov	r0, r3
 801044e:	3710      	adds	r7, #16
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}
 8010454:	20000ca8 	.word	0x20000ca8
 8010458:	20000cac 	.word	0x20000cac
 801045c:	20001184 	.word	0x20001184

08010460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010460:	b580      	push	{r7, lr}
 8010462:	b086      	sub	sp, #24
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801046c:	2300      	movs	r3, #0
 801046e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d056      	beq.n	8010524 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010476:	4b2e      	ldr	r3, [pc, #184]	; (8010530 <xTaskPriorityDisinherit+0xd0>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	693a      	ldr	r2, [r7, #16]
 801047c:	429a      	cmp	r2, r3
 801047e:	d00a      	beq.n	8010496 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010484:	f383 8811 	msr	BASEPRI, r3
 8010488:	f3bf 8f6f 	isb	sy
 801048c:	f3bf 8f4f 	dsb	sy
 8010490:	60fb      	str	r3, [r7, #12]
}
 8010492:	bf00      	nop
 8010494:	e7fe      	b.n	8010494 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801049a:	2b00      	cmp	r3, #0
 801049c:	d10a      	bne.n	80104b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801049e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a2:	f383 8811 	msr	BASEPRI, r3
 80104a6:	f3bf 8f6f 	isb	sy
 80104aa:	f3bf 8f4f 	dsb	sy
 80104ae:	60bb      	str	r3, [r7, #8]
}
 80104b0:	bf00      	nop
 80104b2:	e7fe      	b.n	80104b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104b8:	1e5a      	subs	r2, r3, #1
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d02c      	beq.n	8010524 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d128      	bne.n	8010524 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	3304      	adds	r3, #4
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fe f928 	bl	800e72c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104f4:	4b0f      	ldr	r3, [pc, #60]	; (8010534 <xTaskPriorityDisinherit+0xd4>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d903      	bls.n	8010504 <xTaskPriorityDisinherit+0xa4>
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010500:	4a0c      	ldr	r2, [pc, #48]	; (8010534 <xTaskPriorityDisinherit+0xd4>)
 8010502:	6013      	str	r3, [r2, #0]
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010508:	4613      	mov	r3, r2
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	4413      	add	r3, r2
 801050e:	009b      	lsls	r3, r3, #2
 8010510:	4a09      	ldr	r2, [pc, #36]	; (8010538 <xTaskPriorityDisinherit+0xd8>)
 8010512:	441a      	add	r2, r3
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	3304      	adds	r3, #4
 8010518:	4619      	mov	r1, r3
 801051a:	4610      	mov	r0, r2
 801051c:	f7fe f8a9 	bl	800e672 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010520:	2301      	movs	r3, #1
 8010522:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010524:	697b      	ldr	r3, [r7, #20]
	}
 8010526:	4618      	mov	r0, r3
 8010528:	3718      	adds	r7, #24
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	20000ca8 	.word	0x20000ca8
 8010534:	20001184 	.word	0x20001184
 8010538:	20000cac 	.word	0x20000cac

0801053c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801053c:	b580      	push	{r7, lr}
 801053e:	b088      	sub	sp, #32
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801054a:	2301      	movs	r3, #1
 801054c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d06a      	beq.n	801062a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010554:	69bb      	ldr	r3, [r7, #24]
 8010556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010558:	2b00      	cmp	r3, #0
 801055a:	d10a      	bne.n	8010572 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801055c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010560:	f383 8811 	msr	BASEPRI, r3
 8010564:	f3bf 8f6f 	isb	sy
 8010568:	f3bf 8f4f 	dsb	sy
 801056c:	60fb      	str	r3, [r7, #12]
}
 801056e:	bf00      	nop
 8010570:	e7fe      	b.n	8010570 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010572:	69bb      	ldr	r3, [r7, #24]
 8010574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010576:	683a      	ldr	r2, [r7, #0]
 8010578:	429a      	cmp	r2, r3
 801057a:	d902      	bls.n	8010582 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	61fb      	str	r3, [r7, #28]
 8010580:	e002      	b.n	8010588 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010586:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010588:	69bb      	ldr	r3, [r7, #24]
 801058a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801058c:	69fa      	ldr	r2, [r7, #28]
 801058e:	429a      	cmp	r2, r3
 8010590:	d04b      	beq.n	801062a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010596:	697a      	ldr	r2, [r7, #20]
 8010598:	429a      	cmp	r2, r3
 801059a:	d146      	bne.n	801062a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801059c:	4b25      	ldr	r3, [pc, #148]	; (8010634 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	69ba      	ldr	r2, [r7, #24]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d10a      	bne.n	80105bc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80105a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105aa:	f383 8811 	msr	BASEPRI, r3
 80105ae:	f3bf 8f6f 	isb	sy
 80105b2:	f3bf 8f4f 	dsb	sy
 80105b6:	60bb      	str	r3, [r7, #8]
}
 80105b8:	bf00      	nop
 80105ba:	e7fe      	b.n	80105ba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80105bc:	69bb      	ldr	r3, [r7, #24]
 80105be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80105c2:	69bb      	ldr	r3, [r7, #24]
 80105c4:	69fa      	ldr	r2, [r7, #28]
 80105c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80105c8:	69bb      	ldr	r3, [r7, #24]
 80105ca:	699b      	ldr	r3, [r3, #24]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	db04      	blt.n	80105da <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80105d6:	69bb      	ldr	r3, [r7, #24]
 80105d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	6959      	ldr	r1, [r3, #20]
 80105de:	693a      	ldr	r2, [r7, #16]
 80105e0:	4613      	mov	r3, r2
 80105e2:	009b      	lsls	r3, r3, #2
 80105e4:	4413      	add	r3, r2
 80105e6:	009b      	lsls	r3, r3, #2
 80105e8:	4a13      	ldr	r2, [pc, #76]	; (8010638 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80105ea:	4413      	add	r3, r2
 80105ec:	4299      	cmp	r1, r3
 80105ee:	d11c      	bne.n	801062a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105f0:	69bb      	ldr	r3, [r7, #24]
 80105f2:	3304      	adds	r3, #4
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7fe f899 	bl	800e72c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80105fa:	69bb      	ldr	r3, [r7, #24]
 80105fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105fe:	4b0f      	ldr	r3, [pc, #60]	; (801063c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	429a      	cmp	r2, r3
 8010604:	d903      	bls.n	801060e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010606:	69bb      	ldr	r3, [r7, #24]
 8010608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801060a:	4a0c      	ldr	r2, [pc, #48]	; (801063c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801060c:	6013      	str	r3, [r2, #0]
 801060e:	69bb      	ldr	r3, [r7, #24]
 8010610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010612:	4613      	mov	r3, r2
 8010614:	009b      	lsls	r3, r3, #2
 8010616:	4413      	add	r3, r2
 8010618:	009b      	lsls	r3, r3, #2
 801061a:	4a07      	ldr	r2, [pc, #28]	; (8010638 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801061c:	441a      	add	r2, r3
 801061e:	69bb      	ldr	r3, [r7, #24]
 8010620:	3304      	adds	r3, #4
 8010622:	4619      	mov	r1, r3
 8010624:	4610      	mov	r0, r2
 8010626:	f7fe f824 	bl	800e672 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801062a:	bf00      	nop
 801062c:	3720      	adds	r7, #32
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	20000ca8 	.word	0x20000ca8
 8010638:	20000cac 	.word	0x20000cac
 801063c:	20001184 	.word	0x20001184

08010640 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010640:	b480      	push	{r7}
 8010642:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010644:	4b07      	ldr	r3, [pc, #28]	; (8010664 <pvTaskIncrementMutexHeldCount+0x24>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d004      	beq.n	8010656 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801064c:	4b05      	ldr	r3, [pc, #20]	; (8010664 <pvTaskIncrementMutexHeldCount+0x24>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010652:	3201      	adds	r2, #1
 8010654:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010656:	4b03      	ldr	r3, [pc, #12]	; (8010664 <pvTaskIncrementMutexHeldCount+0x24>)
 8010658:	681b      	ldr	r3, [r3, #0]
	}
 801065a:	4618      	mov	r0, r3
 801065c:	46bd      	mov	sp, r7
 801065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010662:	4770      	bx	lr
 8010664:	20000ca8 	.word	0x20000ca8

08010668 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010668:	b580      	push	{r7, lr}
 801066a:	b086      	sub	sp, #24
 801066c:	af00      	add	r7, sp, #0
 801066e:	60f8      	str	r0, [r7, #12]
 8010670:	60b9      	str	r1, [r7, #8]
 8010672:	607a      	str	r2, [r7, #4]
 8010674:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010676:	f000 ff85 	bl	8011584 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801067a:	4b29      	ldr	r3, [pc, #164]	; (8010720 <xTaskNotifyWait+0xb8>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8010682:	b2db      	uxtb	r3, r3
 8010684:	2b02      	cmp	r3, #2
 8010686:	d01c      	beq.n	80106c2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010688:	4b25      	ldr	r3, [pc, #148]	; (8010720 <xTaskNotifyWait+0xb8>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8010690:	68fa      	ldr	r2, [r7, #12]
 8010692:	43d2      	mvns	r2, r2
 8010694:	400a      	ands	r2, r1
 8010696:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801069a:	4b21      	ldr	r3, [pc, #132]	; (8010720 <xTaskNotifyWait+0xb8>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2201      	movs	r2, #1
 80106a0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d00b      	beq.n	80106c2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80106aa:	2101      	movs	r1, #1
 80106ac:	6838      	ldr	r0, [r7, #0]
 80106ae:	f000 f9dd 	bl	8010a6c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80106b2:	4b1c      	ldr	r3, [pc, #112]	; (8010724 <xTaskNotifyWait+0xbc>)
 80106b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106b8:	601a      	str	r2, [r3, #0]
 80106ba:	f3bf 8f4f 	dsb	sy
 80106be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80106c2:	f000 ff8f 	bl	80115e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80106c6:	f000 ff5d 	bl	8011584 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d005      	beq.n	80106dc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80106d0:	4b13      	ldr	r3, [pc, #76]	; (8010720 <xTaskNotifyWait+0xb8>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80106dc:	4b10      	ldr	r3, [pc, #64]	; (8010720 <xTaskNotifyWait+0xb8>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80106e4:	b2db      	uxtb	r3, r3
 80106e6:	2b02      	cmp	r3, #2
 80106e8:	d002      	beq.n	80106f0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80106ea:	2300      	movs	r3, #0
 80106ec:	617b      	str	r3, [r7, #20]
 80106ee:	e00a      	b.n	8010706 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80106f0:	4b0b      	ldr	r3, [pc, #44]	; (8010720 <xTaskNotifyWait+0xb8>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80106f8:	68ba      	ldr	r2, [r7, #8]
 80106fa:	43d2      	mvns	r2, r2
 80106fc:	400a      	ands	r2, r1
 80106fe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8010702:	2301      	movs	r3, #1
 8010704:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010706:	4b06      	ldr	r3, [pc, #24]	; (8010720 <xTaskNotifyWait+0xb8>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	2200      	movs	r2, #0
 801070c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8010710:	f000 ff68 	bl	80115e4 <vPortExitCritical>

		return xReturn;
 8010714:	697b      	ldr	r3, [r7, #20]
	}
 8010716:	4618      	mov	r0, r3
 8010718:	3718      	adds	r7, #24
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
 801071e:	bf00      	nop
 8010720:	20000ca8 	.word	0x20000ca8
 8010724:	e000ed04 	.word	0xe000ed04

08010728 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010728:	b580      	push	{r7, lr}
 801072a:	b08a      	sub	sp, #40	; 0x28
 801072c:	af00      	add	r7, sp, #0
 801072e:	60f8      	str	r0, [r7, #12]
 8010730:	60b9      	str	r1, [r7, #8]
 8010732:	603b      	str	r3, [r7, #0]
 8010734:	4613      	mov	r3, r2
 8010736:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010738:	2301      	movs	r3, #1
 801073a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d10a      	bne.n	8010758 <xTaskGenericNotify+0x30>
	__asm volatile
 8010742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010746:	f383 8811 	msr	BASEPRI, r3
 801074a:	f3bf 8f6f 	isb	sy
 801074e:	f3bf 8f4f 	dsb	sy
 8010752:	61bb      	str	r3, [r7, #24]
}
 8010754:	bf00      	nop
 8010756:	e7fe      	b.n	8010756 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801075c:	f000 ff12 	bl	8011584 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d004      	beq.n	8010770 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010766:	6a3b      	ldr	r3, [r7, #32]
 8010768:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010770:	6a3b      	ldr	r3, [r7, #32]
 8010772:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8010776:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010778:	6a3b      	ldr	r3, [r7, #32]
 801077a:	2202      	movs	r2, #2
 801077c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8010780:	79fb      	ldrb	r3, [r7, #7]
 8010782:	2b04      	cmp	r3, #4
 8010784:	d82d      	bhi.n	80107e2 <xTaskGenericNotify+0xba>
 8010786:	a201      	add	r2, pc, #4	; (adr r2, 801078c <xTaskGenericNotify+0x64>)
 8010788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801078c:	08010805 	.word	0x08010805
 8010790:	080107a1 	.word	0x080107a1
 8010794:	080107b3 	.word	0x080107b3
 8010798:	080107c3 	.word	0x080107c3
 801079c:	080107cd 	.word	0x080107cd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80107a0:	6a3b      	ldr	r3, [r7, #32]
 80107a2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	431a      	orrs	r2, r3
 80107aa:	6a3b      	ldr	r3, [r7, #32]
 80107ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80107b0:	e02b      	b.n	801080a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80107b2:	6a3b      	ldr	r3, [r7, #32]
 80107b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80107b8:	1c5a      	adds	r2, r3, #1
 80107ba:	6a3b      	ldr	r3, [r7, #32]
 80107bc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80107c0:	e023      	b.n	801080a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80107c2:	6a3b      	ldr	r3, [r7, #32]
 80107c4:	68ba      	ldr	r2, [r7, #8]
 80107c6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80107ca:	e01e      	b.n	801080a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80107cc:	7ffb      	ldrb	r3, [r7, #31]
 80107ce:	2b02      	cmp	r3, #2
 80107d0:	d004      	beq.n	80107dc <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80107d2:	6a3b      	ldr	r3, [r7, #32]
 80107d4:	68ba      	ldr	r2, [r7, #8]
 80107d6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80107da:	e016      	b.n	801080a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80107dc:	2300      	movs	r3, #0
 80107de:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80107e0:	e013      	b.n	801080a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80107e2:	6a3b      	ldr	r3, [r7, #32]
 80107e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80107e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107ec:	d00c      	beq.n	8010808 <xTaskGenericNotify+0xe0>
	__asm volatile
 80107ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f2:	f383 8811 	msr	BASEPRI, r3
 80107f6:	f3bf 8f6f 	isb	sy
 80107fa:	f3bf 8f4f 	dsb	sy
 80107fe:	617b      	str	r3, [r7, #20]
}
 8010800:	bf00      	nop
 8010802:	e7fe      	b.n	8010802 <xTaskGenericNotify+0xda>
					break;
 8010804:	bf00      	nop
 8010806:	e000      	b.n	801080a <xTaskGenericNotify+0xe2>

					break;
 8010808:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801080a:	7ffb      	ldrb	r3, [r7, #31]
 801080c:	2b01      	cmp	r3, #1
 801080e:	d13a      	bne.n	8010886 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010810:	6a3b      	ldr	r3, [r7, #32]
 8010812:	3304      	adds	r3, #4
 8010814:	4618      	mov	r0, r3
 8010816:	f7fd ff89 	bl	800e72c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801081a:	6a3b      	ldr	r3, [r7, #32]
 801081c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801081e:	4b1d      	ldr	r3, [pc, #116]	; (8010894 <xTaskGenericNotify+0x16c>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	429a      	cmp	r2, r3
 8010824:	d903      	bls.n	801082e <xTaskGenericNotify+0x106>
 8010826:	6a3b      	ldr	r3, [r7, #32]
 8010828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801082a:	4a1a      	ldr	r2, [pc, #104]	; (8010894 <xTaskGenericNotify+0x16c>)
 801082c:	6013      	str	r3, [r2, #0]
 801082e:	6a3b      	ldr	r3, [r7, #32]
 8010830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010832:	4613      	mov	r3, r2
 8010834:	009b      	lsls	r3, r3, #2
 8010836:	4413      	add	r3, r2
 8010838:	009b      	lsls	r3, r3, #2
 801083a:	4a17      	ldr	r2, [pc, #92]	; (8010898 <xTaskGenericNotify+0x170>)
 801083c:	441a      	add	r2, r3
 801083e:	6a3b      	ldr	r3, [r7, #32]
 8010840:	3304      	adds	r3, #4
 8010842:	4619      	mov	r1, r3
 8010844:	4610      	mov	r0, r2
 8010846:	f7fd ff14 	bl	800e672 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801084a:	6a3b      	ldr	r3, [r7, #32]
 801084c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801084e:	2b00      	cmp	r3, #0
 8010850:	d00a      	beq.n	8010868 <xTaskGenericNotify+0x140>
	__asm volatile
 8010852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010856:	f383 8811 	msr	BASEPRI, r3
 801085a:	f3bf 8f6f 	isb	sy
 801085e:	f3bf 8f4f 	dsb	sy
 8010862:	613b      	str	r3, [r7, #16]
}
 8010864:	bf00      	nop
 8010866:	e7fe      	b.n	8010866 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010868:	6a3b      	ldr	r3, [r7, #32]
 801086a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801086c:	4b0b      	ldr	r3, [pc, #44]	; (801089c <xTaskGenericNotify+0x174>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010872:	429a      	cmp	r2, r3
 8010874:	d907      	bls.n	8010886 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010876:	4b0a      	ldr	r3, [pc, #40]	; (80108a0 <xTaskGenericNotify+0x178>)
 8010878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801087c:	601a      	str	r2, [r3, #0]
 801087e:	f3bf 8f4f 	dsb	sy
 8010882:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010886:	f000 fead 	bl	80115e4 <vPortExitCritical>

		return xReturn;
 801088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801088c:	4618      	mov	r0, r3
 801088e:	3728      	adds	r7, #40	; 0x28
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}
 8010894:	20001184 	.word	0x20001184
 8010898:	20000cac 	.word	0x20000cac
 801089c:	20000ca8 	.word	0x20000ca8
 80108a0:	e000ed04 	.word	0xe000ed04

080108a4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b08e      	sub	sp, #56	; 0x38
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	603b      	str	r3, [r7, #0]
 80108b0:	4613      	mov	r3, r2
 80108b2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80108b4:	2301      	movs	r3, #1
 80108b6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d10a      	bne.n	80108d4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80108be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c2:	f383 8811 	msr	BASEPRI, r3
 80108c6:	f3bf 8f6f 	isb	sy
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80108d0:	bf00      	nop
 80108d2:	e7fe      	b.n	80108d2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80108d4:	f000 ff38 	bl	8011748 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80108dc:	f3ef 8211 	mrs	r2, BASEPRI
 80108e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e4:	f383 8811 	msr	BASEPRI, r3
 80108e8:	f3bf 8f6f 	isb	sy
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	623a      	str	r2, [r7, #32]
 80108f2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80108f4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80108f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d004      	beq.n	8010908 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80108fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010900:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 801090e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010914:	2202      	movs	r2, #2
 8010916:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 801091a:	79fb      	ldrb	r3, [r7, #7]
 801091c:	2b04      	cmp	r3, #4
 801091e:	d82f      	bhi.n	8010980 <xTaskGenericNotifyFromISR+0xdc>
 8010920:	a201      	add	r2, pc, #4	; (adr r2, 8010928 <xTaskGenericNotifyFromISR+0x84>)
 8010922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010926:	bf00      	nop
 8010928:	080109a3 	.word	0x080109a3
 801092c:	0801093d 	.word	0x0801093d
 8010930:	0801094f 	.word	0x0801094f
 8010934:	0801095f 	.word	0x0801095f
 8010938:	08010969 	.word	0x08010969
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801093c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	431a      	orrs	r2, r3
 8010946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010948:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 801094c:	e02c      	b.n	80109a8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801094e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010950:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010954:	1c5a      	adds	r2, r3, #1
 8010956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010958:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 801095c:	e024      	b.n	80109a8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801095e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010960:	68ba      	ldr	r2, [r7, #8]
 8010962:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8010966:	e01f      	b.n	80109a8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010968:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801096c:	2b02      	cmp	r3, #2
 801096e:	d004      	beq.n	801097a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010972:	68ba      	ldr	r2, [r7, #8]
 8010974:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010978:	e016      	b.n	80109a8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 801097a:	2300      	movs	r3, #0
 801097c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801097e:	e013      	b.n	80109a8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010982:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801098a:	d00c      	beq.n	80109a6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 801098c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010990:	f383 8811 	msr	BASEPRI, r3
 8010994:	f3bf 8f6f 	isb	sy
 8010998:	f3bf 8f4f 	dsb	sy
 801099c:	61bb      	str	r3, [r7, #24]
}
 801099e:	bf00      	nop
 80109a0:	e7fe      	b.n	80109a0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80109a2:	bf00      	nop
 80109a4:	e000      	b.n	80109a8 <xTaskGenericNotifyFromISR+0x104>
					break;
 80109a6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80109a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80109ac:	2b01      	cmp	r3, #1
 80109ae:	d146      	bne.n	8010a3e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80109b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d00a      	beq.n	80109ce <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80109b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109bc:	f383 8811 	msr	BASEPRI, r3
 80109c0:	f3bf 8f6f 	isb	sy
 80109c4:	f3bf 8f4f 	dsb	sy
 80109c8:	617b      	str	r3, [r7, #20]
}
 80109ca:	bf00      	nop
 80109cc:	e7fe      	b.n	80109cc <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109ce:	4b21      	ldr	r3, [pc, #132]	; (8010a54 <xTaskGenericNotifyFromISR+0x1b0>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d11d      	bne.n	8010a12 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d8:	3304      	adds	r3, #4
 80109da:	4618      	mov	r0, r3
 80109dc:	f7fd fea6 	bl	800e72c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80109e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109e4:	4b1c      	ldr	r3, [pc, #112]	; (8010a58 <xTaskGenericNotifyFromISR+0x1b4>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d903      	bls.n	80109f4 <xTaskGenericNotifyFromISR+0x150>
 80109ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109f0:	4a19      	ldr	r2, [pc, #100]	; (8010a58 <xTaskGenericNotifyFromISR+0x1b4>)
 80109f2:	6013      	str	r3, [r2, #0]
 80109f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109f8:	4613      	mov	r3, r2
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	4413      	add	r3, r2
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	4a16      	ldr	r2, [pc, #88]	; (8010a5c <xTaskGenericNotifyFromISR+0x1b8>)
 8010a02:	441a      	add	r2, r3
 8010a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a06:	3304      	adds	r3, #4
 8010a08:	4619      	mov	r1, r3
 8010a0a:	4610      	mov	r0, r2
 8010a0c:	f7fd fe31 	bl	800e672 <vListInsertEnd>
 8010a10:	e005      	b.n	8010a1e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a14:	3318      	adds	r3, #24
 8010a16:	4619      	mov	r1, r3
 8010a18:	4811      	ldr	r0, [pc, #68]	; (8010a60 <xTaskGenericNotifyFromISR+0x1bc>)
 8010a1a:	f7fd fe2a 	bl	800e672 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a22:	4b10      	ldr	r3, [pc, #64]	; (8010a64 <xTaskGenericNotifyFromISR+0x1c0>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d908      	bls.n	8010a3e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d002      	beq.n	8010a38 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a34:	2201      	movs	r2, #1
 8010a36:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010a38:	4b0b      	ldr	r3, [pc, #44]	; (8010a68 <xTaskGenericNotifyFromISR+0x1c4>)
 8010a3a:	2201      	movs	r2, #1
 8010a3c:	601a      	str	r2, [r3, #0]
 8010a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a40:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	f383 8811 	msr	BASEPRI, r3
}
 8010a48:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3738      	adds	r7, #56	; 0x38
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}
 8010a54:	200011a4 	.word	0x200011a4
 8010a58:	20001184 	.word	0x20001184
 8010a5c:	20000cac 	.word	0x20000cac
 8010a60:	2000113c 	.word	0x2000113c
 8010a64:	20000ca8 	.word	0x20000ca8
 8010a68:	20001190 	.word	0x20001190

08010a6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b084      	sub	sp, #16
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010a76:	4b21      	ldr	r3, [pc, #132]	; (8010afc <prvAddCurrentTaskToDelayedList+0x90>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a7c:	4b20      	ldr	r3, [pc, #128]	; (8010b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	3304      	adds	r3, #4
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7fd fe52 	bl	800e72c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a8e:	d10a      	bne.n	8010aa6 <prvAddCurrentTaskToDelayedList+0x3a>
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d007      	beq.n	8010aa6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a96:	4b1a      	ldr	r3, [pc, #104]	; (8010b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	3304      	adds	r3, #4
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	4819      	ldr	r0, [pc, #100]	; (8010b04 <prvAddCurrentTaskToDelayedList+0x98>)
 8010aa0:	f7fd fde7 	bl	800e672 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010aa4:	e026      	b.n	8010af4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010aa6:	68fa      	ldr	r2, [r7, #12]
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	4413      	add	r3, r2
 8010aac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010aae:	4b14      	ldr	r3, [pc, #80]	; (8010b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	68ba      	ldr	r2, [r7, #8]
 8010ab4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010ab6:	68ba      	ldr	r2, [r7, #8]
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d209      	bcs.n	8010ad2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010abe:	4b12      	ldr	r3, [pc, #72]	; (8010b08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	4b0f      	ldr	r3, [pc, #60]	; (8010b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	3304      	adds	r3, #4
 8010ac8:	4619      	mov	r1, r3
 8010aca:	4610      	mov	r0, r2
 8010acc:	f7fd fdf5 	bl	800e6ba <vListInsert>
}
 8010ad0:	e010      	b.n	8010af4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ad2:	4b0e      	ldr	r3, [pc, #56]	; (8010b0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	4b0a      	ldr	r3, [pc, #40]	; (8010b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	3304      	adds	r3, #4
 8010adc:	4619      	mov	r1, r3
 8010ade:	4610      	mov	r0, r2
 8010ae0:	f7fd fdeb 	bl	800e6ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010ae4:	4b0a      	ldr	r3, [pc, #40]	; (8010b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	68ba      	ldr	r2, [r7, #8]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d202      	bcs.n	8010af4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010aee:	4a08      	ldr	r2, [pc, #32]	; (8010b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	6013      	str	r3, [r2, #0]
}
 8010af4:	bf00      	nop
 8010af6:	3710      	adds	r7, #16
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	20001180 	.word	0x20001180
 8010b00:	20000ca8 	.word	0x20000ca8
 8010b04:	20001168 	.word	0x20001168
 8010b08:	20001138 	.word	0x20001138
 8010b0c:	20001134 	.word	0x20001134
 8010b10:	2000119c 	.word	0x2000119c

08010b14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b08a      	sub	sp, #40	; 0x28
 8010b18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010b1e:	f000 fba1 	bl	8011264 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010b22:	4b1c      	ldr	r3, [pc, #112]	; (8010b94 <xTimerCreateTimerTask+0x80>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d021      	beq.n	8010b6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010b32:	1d3a      	adds	r2, r7, #4
 8010b34:	f107 0108 	add.w	r1, r7, #8
 8010b38:	f107 030c 	add.w	r3, r7, #12
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7fd fd51 	bl	800e5e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010b42:	6879      	ldr	r1, [r7, #4]
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	68fa      	ldr	r2, [r7, #12]
 8010b48:	9202      	str	r2, [sp, #8]
 8010b4a:	9301      	str	r3, [sp, #4]
 8010b4c:	2302      	movs	r3, #2
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	2300      	movs	r3, #0
 8010b52:	460a      	mov	r2, r1
 8010b54:	4910      	ldr	r1, [pc, #64]	; (8010b98 <xTimerCreateTimerTask+0x84>)
 8010b56:	4811      	ldr	r0, [pc, #68]	; (8010b9c <xTimerCreateTimerTask+0x88>)
 8010b58:	f7fe fdb4 	bl	800f6c4 <xTaskCreateStatic>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	4a10      	ldr	r2, [pc, #64]	; (8010ba0 <xTimerCreateTimerTask+0x8c>)
 8010b60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010b62:	4b0f      	ldr	r3, [pc, #60]	; (8010ba0 <xTimerCreateTimerTask+0x8c>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d001      	beq.n	8010b6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d10a      	bne.n	8010b8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b78:	f383 8811 	msr	BASEPRI, r3
 8010b7c:	f3bf 8f6f 	isb	sy
 8010b80:	f3bf 8f4f 	dsb	sy
 8010b84:	613b      	str	r3, [r7, #16]
}
 8010b86:	bf00      	nop
 8010b88:	e7fe      	b.n	8010b88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010b8a:	697b      	ldr	r3, [r7, #20]
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3718      	adds	r7, #24
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}
 8010b94:	200011d8 	.word	0x200011d8
 8010b98:	08013144 	.word	0x08013144
 8010b9c:	08010e0d 	.word	0x08010e0d
 8010ba0:	200011dc 	.word	0x200011dc

08010ba4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b088      	sub	sp, #32
 8010ba8:	af02      	add	r7, sp, #8
 8010baa:	60f8      	str	r0, [r7, #12]
 8010bac:	60b9      	str	r1, [r7, #8]
 8010bae:	607a      	str	r2, [r7, #4]
 8010bb0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010bb2:	202c      	movs	r0, #44	; 0x2c
 8010bb4:	f000 fe08 	bl	80117c8 <pvPortMalloc>
 8010bb8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d00d      	beq.n	8010bdc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	9301      	str	r3, [sp, #4]
 8010bcc:	6a3b      	ldr	r3, [r7, #32]
 8010bce:	9300      	str	r3, [sp, #0]
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	687a      	ldr	r2, [r7, #4]
 8010bd4:	68b9      	ldr	r1, [r7, #8]
 8010bd6:	68f8      	ldr	r0, [r7, #12]
 8010bd8:	f000 f843 	bl	8010c62 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010bdc:	697b      	ldr	r3, [r7, #20]
	}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3718      	adds	r7, #24
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}

08010be6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8010be6:	b580      	push	{r7, lr}
 8010be8:	b08a      	sub	sp, #40	; 0x28
 8010bea:	af02      	add	r7, sp, #8
 8010bec:	60f8      	str	r0, [r7, #12]
 8010bee:	60b9      	str	r1, [r7, #8]
 8010bf0:	607a      	str	r2, [r7, #4]
 8010bf2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8010bf4:	232c      	movs	r3, #44	; 0x2c
 8010bf6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	2b2c      	cmp	r3, #44	; 0x2c
 8010bfc:	d00a      	beq.n	8010c14 <xTimerCreateStatic+0x2e>
	__asm volatile
 8010bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c02:	f383 8811 	msr	BASEPRI, r3
 8010c06:	f3bf 8f6f 	isb	sy
 8010c0a:	f3bf 8f4f 	dsb	sy
 8010c0e:	61bb      	str	r3, [r7, #24]
}
 8010c10:	bf00      	nop
 8010c12:	e7fe      	b.n	8010c12 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010c14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8010c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10a      	bne.n	8010c32 <xTimerCreateStatic+0x4c>
	__asm volatile
 8010c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c20:	f383 8811 	msr	BASEPRI, r3
 8010c24:	f3bf 8f6f 	isb	sy
 8010c28:	f3bf 8f4f 	dsb	sy
 8010c2c:	617b      	str	r3, [r7, #20]
}
 8010c2e:	bf00      	nop
 8010c30:	e7fe      	b.n	8010c30 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8010c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c34:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8010c36:	69fb      	ldr	r3, [r7, #28]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d00d      	beq.n	8010c58 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	2202      	movs	r2, #2
 8010c40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010c44:	69fb      	ldr	r3, [r7, #28]
 8010c46:	9301      	str	r3, [sp, #4]
 8010c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c4a:	9300      	str	r3, [sp, #0]
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	68b9      	ldr	r1, [r7, #8]
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f000 f805 	bl	8010c62 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010c58:	69fb      	ldr	r3, [r7, #28]
	}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3720      	adds	r7, #32
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010c62:	b580      	push	{r7, lr}
 8010c64:	b086      	sub	sp, #24
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	60f8      	str	r0, [r7, #12]
 8010c6a:	60b9      	str	r1, [r7, #8]
 8010c6c:	607a      	str	r2, [r7, #4]
 8010c6e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d10a      	bne.n	8010c8c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8010c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7a:	f383 8811 	msr	BASEPRI, r3
 8010c7e:	f3bf 8f6f 	isb	sy
 8010c82:	f3bf 8f4f 	dsb	sy
 8010c86:	617b      	str	r3, [r7, #20]
}
 8010c88:	bf00      	nop
 8010c8a:	e7fe      	b.n	8010c8a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8010c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d01e      	beq.n	8010cd0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8010c92:	f000 fae7 	bl	8011264 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8010c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c98:	68fa      	ldr	r2, [r7, #12]
 8010c9a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9e:	68ba      	ldr	r2, [r7, #8]
 8010ca0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8010ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca4:	683a      	ldr	r2, [r7, #0]
 8010ca6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010caa:	6a3a      	ldr	r2, [r7, #32]
 8010cac:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8010cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb0:	3304      	adds	r3, #4
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7fd fcd0 	bl	800e658 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d008      	beq.n	8010cd0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cc4:	f043 0304 	orr.w	r3, r3, #4
 8010cc8:	b2da      	uxtb	r2, r3
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8010cd0:	bf00      	nop
 8010cd2:	3718      	adds	r7, #24
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b08a      	sub	sp, #40	; 0x28
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	60f8      	str	r0, [r7, #12]
 8010ce0:	60b9      	str	r1, [r7, #8]
 8010ce2:	607a      	str	r2, [r7, #4]
 8010ce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d10a      	bne.n	8010d06 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf4:	f383 8811 	msr	BASEPRI, r3
 8010cf8:	f3bf 8f6f 	isb	sy
 8010cfc:	f3bf 8f4f 	dsb	sy
 8010d00:	623b      	str	r3, [r7, #32]
}
 8010d02:	bf00      	nop
 8010d04:	e7fe      	b.n	8010d04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010d06:	4b1a      	ldr	r3, [pc, #104]	; (8010d70 <xTimerGenericCommand+0x98>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d02a      	beq.n	8010d64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	2b05      	cmp	r3, #5
 8010d1e:	dc18      	bgt.n	8010d52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010d20:	f7ff fb18 	bl	8010354 <xTaskGetSchedulerState>
 8010d24:	4603      	mov	r3, r0
 8010d26:	2b02      	cmp	r3, #2
 8010d28:	d109      	bne.n	8010d3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010d2a:	4b11      	ldr	r3, [pc, #68]	; (8010d70 <xTimerGenericCommand+0x98>)
 8010d2c:	6818      	ldr	r0, [r3, #0]
 8010d2e:	f107 0110 	add.w	r1, r7, #16
 8010d32:	2300      	movs	r3, #0
 8010d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d36:	f7fd fead 	bl	800ea94 <xQueueGenericSend>
 8010d3a:	6278      	str	r0, [r7, #36]	; 0x24
 8010d3c:	e012      	b.n	8010d64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010d3e:	4b0c      	ldr	r3, [pc, #48]	; (8010d70 <xTimerGenericCommand+0x98>)
 8010d40:	6818      	ldr	r0, [r3, #0]
 8010d42:	f107 0110 	add.w	r1, r7, #16
 8010d46:	2300      	movs	r3, #0
 8010d48:	2200      	movs	r2, #0
 8010d4a:	f7fd fea3 	bl	800ea94 <xQueueGenericSend>
 8010d4e:	6278      	str	r0, [r7, #36]	; 0x24
 8010d50:	e008      	b.n	8010d64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010d52:	4b07      	ldr	r3, [pc, #28]	; (8010d70 <xTimerGenericCommand+0x98>)
 8010d54:	6818      	ldr	r0, [r3, #0]
 8010d56:	f107 0110 	add.w	r1, r7, #16
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	683a      	ldr	r2, [r7, #0]
 8010d5e:	f7fd ff97 	bl	800ec90 <xQueueGenericSendFromISR>
 8010d62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3728      	adds	r7, #40	; 0x28
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	200011d8 	.word	0x200011d8

08010d74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b088      	sub	sp, #32
 8010d78:	af02      	add	r7, sp, #8
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d7e:	4b22      	ldr	r3, [pc, #136]	; (8010e08 <prvProcessExpiredTimer+0x94>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	68db      	ldr	r3, [r3, #12]
 8010d86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	3304      	adds	r3, #4
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7fd fccd 	bl	800e72c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d98:	f003 0304 	and.w	r3, r3, #4
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d022      	beq.n	8010de6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	699a      	ldr	r2, [r3, #24]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	18d1      	adds	r1, r2, r3
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	683a      	ldr	r2, [r7, #0]
 8010dac:	6978      	ldr	r0, [r7, #20]
 8010dae:	f000 f8d1 	bl	8010f54 <prvInsertTimerInActiveList>
 8010db2:	4603      	mov	r3, r0
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d01f      	beq.n	8010df8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010db8:	2300      	movs	r3, #0
 8010dba:	9300      	str	r3, [sp, #0]
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	687a      	ldr	r2, [r7, #4]
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	6978      	ldr	r0, [r7, #20]
 8010dc4:	f7ff ff88 	bl	8010cd8 <xTimerGenericCommand>
 8010dc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d113      	bne.n	8010df8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd4:	f383 8811 	msr	BASEPRI, r3
 8010dd8:	f3bf 8f6f 	isb	sy
 8010ddc:	f3bf 8f4f 	dsb	sy
 8010de0:	60fb      	str	r3, [r7, #12]
}
 8010de2:	bf00      	nop
 8010de4:	e7fe      	b.n	8010de4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dec:	f023 0301 	bic.w	r3, r3, #1
 8010df0:	b2da      	uxtb	r2, r3
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	6a1b      	ldr	r3, [r3, #32]
 8010dfc:	6978      	ldr	r0, [r7, #20]
 8010dfe:	4798      	blx	r3
}
 8010e00:	bf00      	nop
 8010e02:	3718      	adds	r7, #24
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	200011d0 	.word	0x200011d0

08010e0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010e14:	f107 0308 	add.w	r3, r7, #8
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f000 f857 	bl	8010ecc <prvGetNextExpireTime>
 8010e1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	4619      	mov	r1, r3
 8010e24:	68f8      	ldr	r0, [r7, #12]
 8010e26:	f000 f803 	bl	8010e30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010e2a:	f000 f8d5 	bl	8010fd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010e2e:	e7f1      	b.n	8010e14 <prvTimerTask+0x8>

08010e30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b084      	sub	sp, #16
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010e3a:	f7fe fe9f 	bl	800fb7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010e3e:	f107 0308 	add.w	r3, r7, #8
 8010e42:	4618      	mov	r0, r3
 8010e44:	f000 f866 	bl	8010f14 <prvSampleTimeNow>
 8010e48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d130      	bne.n	8010eb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d10a      	bne.n	8010e6c <prvProcessTimerOrBlockTask+0x3c>
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d806      	bhi.n	8010e6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010e5e:	f7fe fe9b 	bl	800fb98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010e62:	68f9      	ldr	r1, [r7, #12]
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f7ff ff85 	bl	8010d74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010e6a:	e024      	b.n	8010eb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d008      	beq.n	8010e84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010e72:	4b13      	ldr	r3, [pc, #76]	; (8010ec0 <prvProcessTimerOrBlockTask+0x90>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d101      	bne.n	8010e80 <prvProcessTimerOrBlockTask+0x50>
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	e000      	b.n	8010e82 <prvProcessTimerOrBlockTask+0x52>
 8010e80:	2300      	movs	r3, #0
 8010e82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010e84:	4b0f      	ldr	r3, [pc, #60]	; (8010ec4 <prvProcessTimerOrBlockTask+0x94>)
 8010e86:	6818      	ldr	r0, [r3, #0]
 8010e88:	687a      	ldr	r2, [r7, #4]
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	1ad3      	subs	r3, r2, r3
 8010e8e:	683a      	ldr	r2, [r7, #0]
 8010e90:	4619      	mov	r1, r3
 8010e92:	f7fe fbe3 	bl	800f65c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010e96:	f7fe fe7f 	bl	800fb98 <xTaskResumeAll>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d10a      	bne.n	8010eb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010ea0:	4b09      	ldr	r3, [pc, #36]	; (8010ec8 <prvProcessTimerOrBlockTask+0x98>)
 8010ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ea6:	601a      	str	r2, [r3, #0]
 8010ea8:	f3bf 8f4f 	dsb	sy
 8010eac:	f3bf 8f6f 	isb	sy
}
 8010eb0:	e001      	b.n	8010eb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010eb2:	f7fe fe71 	bl	800fb98 <xTaskResumeAll>
}
 8010eb6:	bf00      	nop
 8010eb8:	3710      	adds	r7, #16
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	200011d4 	.word	0x200011d4
 8010ec4:	200011d8 	.word	0x200011d8
 8010ec8:	e000ed04 	.word	0xe000ed04

08010ecc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b085      	sub	sp, #20
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010ed4:	4b0e      	ldr	r3, [pc, #56]	; (8010f10 <prvGetNextExpireTime+0x44>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d101      	bne.n	8010ee2 <prvGetNextExpireTime+0x16>
 8010ede:	2201      	movs	r2, #1
 8010ee0:	e000      	b.n	8010ee4 <prvGetNextExpireTime+0x18>
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d105      	bne.n	8010efc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ef0:	4b07      	ldr	r3, [pc, #28]	; (8010f10 <prvGetNextExpireTime+0x44>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	68db      	ldr	r3, [r3, #12]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	60fb      	str	r3, [r7, #12]
 8010efa:	e001      	b.n	8010f00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010efc:	2300      	movs	r3, #0
 8010efe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010f00:	68fb      	ldr	r3, [r7, #12]
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3714      	adds	r7, #20
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr
 8010f0e:	bf00      	nop
 8010f10:	200011d0 	.word	0x200011d0

08010f14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b084      	sub	sp, #16
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010f1c:	f7fe feda 	bl	800fcd4 <xTaskGetTickCount>
 8010f20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010f22:	4b0b      	ldr	r3, [pc, #44]	; (8010f50 <prvSampleTimeNow+0x3c>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	68fa      	ldr	r2, [r7, #12]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d205      	bcs.n	8010f38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010f2c:	f000 f936 	bl	801119c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2201      	movs	r2, #1
 8010f34:	601a      	str	r2, [r3, #0]
 8010f36:	e002      	b.n	8010f3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010f3e:	4a04      	ldr	r2, [pc, #16]	; (8010f50 <prvSampleTimeNow+0x3c>)
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010f44:	68fb      	ldr	r3, [r7, #12]
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3710      	adds	r7, #16
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	200011e0 	.word	0x200011e0

08010f54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b086      	sub	sp, #24
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	60f8      	str	r0, [r7, #12]
 8010f5c:	60b9      	str	r1, [r7, #8]
 8010f5e:	607a      	str	r2, [r7, #4]
 8010f60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010f62:	2300      	movs	r3, #0
 8010f64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	68ba      	ldr	r2, [r7, #8]
 8010f6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	68fa      	ldr	r2, [r7, #12]
 8010f70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010f72:	68ba      	ldr	r2, [r7, #8]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d812      	bhi.n	8010fa0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f7a:	687a      	ldr	r2, [r7, #4]
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	1ad2      	subs	r2, r2, r3
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	699b      	ldr	r3, [r3, #24]
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d302      	bcc.n	8010f8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	617b      	str	r3, [r7, #20]
 8010f8c:	e01b      	b.n	8010fc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010f8e:	4b10      	ldr	r3, [pc, #64]	; (8010fd0 <prvInsertTimerInActiveList+0x7c>)
 8010f90:	681a      	ldr	r2, [r3, #0]
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	3304      	adds	r3, #4
 8010f96:	4619      	mov	r1, r3
 8010f98:	4610      	mov	r0, r2
 8010f9a:	f7fd fb8e 	bl	800e6ba <vListInsert>
 8010f9e:	e012      	b.n	8010fc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010fa0:	687a      	ldr	r2, [r7, #4]
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d206      	bcs.n	8010fb6 <prvInsertTimerInActiveList+0x62>
 8010fa8:	68ba      	ldr	r2, [r7, #8]
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d302      	bcc.n	8010fb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	617b      	str	r3, [r7, #20]
 8010fb4:	e007      	b.n	8010fc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010fb6:	4b07      	ldr	r3, [pc, #28]	; (8010fd4 <prvInsertTimerInActiveList+0x80>)
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	3304      	adds	r3, #4
 8010fbe:	4619      	mov	r1, r3
 8010fc0:	4610      	mov	r0, r2
 8010fc2:	f7fd fb7a 	bl	800e6ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010fc6:	697b      	ldr	r3, [r7, #20]
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3718      	adds	r7, #24
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}
 8010fd0:	200011d4 	.word	0x200011d4
 8010fd4:	200011d0 	.word	0x200011d0

08010fd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b08e      	sub	sp, #56	; 0x38
 8010fdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010fde:	e0ca      	b.n	8011176 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	da18      	bge.n	8011018 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010fe6:	1d3b      	adds	r3, r7, #4
 8010fe8:	3304      	adds	r3, #4
 8010fea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d10a      	bne.n	8011008 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff6:	f383 8811 	msr	BASEPRI, r3
 8010ffa:	f3bf 8f6f 	isb	sy
 8010ffe:	f3bf 8f4f 	dsb	sy
 8011002:	61fb      	str	r3, [r7, #28]
}
 8011004:	bf00      	nop
 8011006:	e7fe      	b.n	8011006 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801100e:	6850      	ldr	r0, [r2, #4]
 8011010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011012:	6892      	ldr	r2, [r2, #8]
 8011014:	4611      	mov	r1, r2
 8011016:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2b00      	cmp	r3, #0
 801101c:	f2c0 80aa 	blt.w	8011174 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011026:	695b      	ldr	r3, [r3, #20]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d004      	beq.n	8011036 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102e:	3304      	adds	r3, #4
 8011030:	4618      	mov	r0, r3
 8011032:	f7fd fb7b 	bl	800e72c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011036:	463b      	mov	r3, r7
 8011038:	4618      	mov	r0, r3
 801103a:	f7ff ff6b 	bl	8010f14 <prvSampleTimeNow>
 801103e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2b09      	cmp	r3, #9
 8011044:	f200 8097 	bhi.w	8011176 <prvProcessReceivedCommands+0x19e>
 8011048:	a201      	add	r2, pc, #4	; (adr r2, 8011050 <prvProcessReceivedCommands+0x78>)
 801104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801104e:	bf00      	nop
 8011050:	08011079 	.word	0x08011079
 8011054:	08011079 	.word	0x08011079
 8011058:	08011079 	.word	0x08011079
 801105c:	080110ed 	.word	0x080110ed
 8011060:	08011101 	.word	0x08011101
 8011064:	0801114b 	.word	0x0801114b
 8011068:	08011079 	.word	0x08011079
 801106c:	08011079 	.word	0x08011079
 8011070:	080110ed 	.word	0x080110ed
 8011074:	08011101 	.word	0x08011101
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801107a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801107e:	f043 0301 	orr.w	r3, r3, #1
 8011082:	b2da      	uxtb	r2, r3
 8011084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801108a:	68ba      	ldr	r2, [r7, #8]
 801108c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801108e:	699b      	ldr	r3, [r3, #24]
 8011090:	18d1      	adds	r1, r2, r3
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011098:	f7ff ff5c 	bl	8010f54 <prvInsertTimerInActiveList>
 801109c:	4603      	mov	r3, r0
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d069      	beq.n	8011176 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80110a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a4:	6a1b      	ldr	r3, [r3, #32]
 80110a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80110aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110b0:	f003 0304 	and.w	r3, r3, #4
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d05e      	beq.n	8011176 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80110b8:	68ba      	ldr	r2, [r7, #8]
 80110ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110bc:	699b      	ldr	r3, [r3, #24]
 80110be:	441a      	add	r2, r3
 80110c0:	2300      	movs	r3, #0
 80110c2:	9300      	str	r3, [sp, #0]
 80110c4:	2300      	movs	r3, #0
 80110c6:	2100      	movs	r1, #0
 80110c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110ca:	f7ff fe05 	bl	8010cd8 <xTimerGenericCommand>
 80110ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80110d0:	6a3b      	ldr	r3, [r7, #32]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d14f      	bne.n	8011176 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80110d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110da:	f383 8811 	msr	BASEPRI, r3
 80110de:	f3bf 8f6f 	isb	sy
 80110e2:	f3bf 8f4f 	dsb	sy
 80110e6:	61bb      	str	r3, [r7, #24]
}
 80110e8:	bf00      	nop
 80110ea:	e7fe      	b.n	80110ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80110ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110f2:	f023 0301 	bic.w	r3, r3, #1
 80110f6:	b2da      	uxtb	r2, r3
 80110f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80110fe:	e03a      	b.n	8011176 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011106:	f043 0301 	orr.w	r3, r3, #1
 801110a:	b2da      	uxtb	r2, r3
 801110c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801110e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011112:	68ba      	ldr	r2, [r7, #8]
 8011114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011116:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801111a:	699b      	ldr	r3, [r3, #24]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d10a      	bne.n	8011136 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011124:	f383 8811 	msr	BASEPRI, r3
 8011128:	f3bf 8f6f 	isb	sy
 801112c:	f3bf 8f4f 	dsb	sy
 8011130:	617b      	str	r3, [r7, #20]
}
 8011132:	bf00      	nop
 8011134:	e7fe      	b.n	8011134 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011138:	699a      	ldr	r2, [r3, #24]
 801113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113c:	18d1      	adds	r1, r2, r3
 801113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011144:	f7ff ff06 	bl	8010f54 <prvInsertTimerInActiveList>
					break;
 8011148:	e015      	b.n	8011176 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801114c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011150:	f003 0302 	and.w	r3, r3, #2
 8011154:	2b00      	cmp	r3, #0
 8011156:	d103      	bne.n	8011160 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801115a:	f000 fc01 	bl	8011960 <vPortFree>
 801115e:	e00a      	b.n	8011176 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011166:	f023 0301 	bic.w	r3, r3, #1
 801116a:	b2da      	uxtb	r2, r3
 801116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801116e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011172:	e000      	b.n	8011176 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011174:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011176:	4b08      	ldr	r3, [pc, #32]	; (8011198 <prvProcessReceivedCommands+0x1c0>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	1d39      	adds	r1, r7, #4
 801117c:	2200      	movs	r2, #0
 801117e:	4618      	mov	r0, r3
 8011180:	f7fd feae 	bl	800eee0 <xQueueReceive>
 8011184:	4603      	mov	r3, r0
 8011186:	2b00      	cmp	r3, #0
 8011188:	f47f af2a 	bne.w	8010fe0 <prvProcessReceivedCommands+0x8>
	}
}
 801118c:	bf00      	nop
 801118e:	bf00      	nop
 8011190:	3730      	adds	r7, #48	; 0x30
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	200011d8 	.word	0x200011d8

0801119c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b088      	sub	sp, #32
 80111a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80111a2:	e048      	b.n	8011236 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80111a4:	4b2d      	ldr	r3, [pc, #180]	; (801125c <prvSwitchTimerLists+0xc0>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	68db      	ldr	r3, [r3, #12]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111ae:	4b2b      	ldr	r3, [pc, #172]	; (801125c <prvSwitchTimerLists+0xc0>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	68db      	ldr	r3, [r3, #12]
 80111b4:	68db      	ldr	r3, [r3, #12]
 80111b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	3304      	adds	r3, #4
 80111bc:	4618      	mov	r0, r3
 80111be:	f7fd fab5 	bl	800e72c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	6a1b      	ldr	r3, [r3, #32]
 80111c6:	68f8      	ldr	r0, [r7, #12]
 80111c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80111d0:	f003 0304 	and.w	r3, r3, #4
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d02e      	beq.n	8011236 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	699b      	ldr	r3, [r3, #24]
 80111dc:	693a      	ldr	r2, [r7, #16]
 80111de:	4413      	add	r3, r2
 80111e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80111e2:	68ba      	ldr	r2, [r7, #8]
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d90e      	bls.n	8011208 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	68ba      	ldr	r2, [r7, #8]
 80111ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	68fa      	ldr	r2, [r7, #12]
 80111f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80111f6:	4b19      	ldr	r3, [pc, #100]	; (801125c <prvSwitchTimerLists+0xc0>)
 80111f8:	681a      	ldr	r2, [r3, #0]
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	3304      	adds	r3, #4
 80111fe:	4619      	mov	r1, r3
 8011200:	4610      	mov	r0, r2
 8011202:	f7fd fa5a 	bl	800e6ba <vListInsert>
 8011206:	e016      	b.n	8011236 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011208:	2300      	movs	r3, #0
 801120a:	9300      	str	r3, [sp, #0]
 801120c:	2300      	movs	r3, #0
 801120e:	693a      	ldr	r2, [r7, #16]
 8011210:	2100      	movs	r1, #0
 8011212:	68f8      	ldr	r0, [r7, #12]
 8011214:	f7ff fd60 	bl	8010cd8 <xTimerGenericCommand>
 8011218:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d10a      	bne.n	8011236 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011224:	f383 8811 	msr	BASEPRI, r3
 8011228:	f3bf 8f6f 	isb	sy
 801122c:	f3bf 8f4f 	dsb	sy
 8011230:	603b      	str	r3, [r7, #0]
}
 8011232:	bf00      	nop
 8011234:	e7fe      	b.n	8011234 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011236:	4b09      	ldr	r3, [pc, #36]	; (801125c <prvSwitchTimerLists+0xc0>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d1b1      	bne.n	80111a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011240:	4b06      	ldr	r3, [pc, #24]	; (801125c <prvSwitchTimerLists+0xc0>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011246:	4b06      	ldr	r3, [pc, #24]	; (8011260 <prvSwitchTimerLists+0xc4>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	4a04      	ldr	r2, [pc, #16]	; (801125c <prvSwitchTimerLists+0xc0>)
 801124c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801124e:	4a04      	ldr	r2, [pc, #16]	; (8011260 <prvSwitchTimerLists+0xc4>)
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	6013      	str	r3, [r2, #0]
}
 8011254:	bf00      	nop
 8011256:	3718      	adds	r7, #24
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	200011d0 	.word	0x200011d0
 8011260:	200011d4 	.word	0x200011d4

08011264 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b082      	sub	sp, #8
 8011268:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801126a:	f000 f98b 	bl	8011584 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801126e:	4b15      	ldr	r3, [pc, #84]	; (80112c4 <prvCheckForValidListAndQueue+0x60>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d120      	bne.n	80112b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011276:	4814      	ldr	r0, [pc, #80]	; (80112c8 <prvCheckForValidListAndQueue+0x64>)
 8011278:	f7fd f9ce 	bl	800e618 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801127c:	4813      	ldr	r0, [pc, #76]	; (80112cc <prvCheckForValidListAndQueue+0x68>)
 801127e:	f7fd f9cb 	bl	800e618 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011282:	4b13      	ldr	r3, [pc, #76]	; (80112d0 <prvCheckForValidListAndQueue+0x6c>)
 8011284:	4a10      	ldr	r2, [pc, #64]	; (80112c8 <prvCheckForValidListAndQueue+0x64>)
 8011286:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011288:	4b12      	ldr	r3, [pc, #72]	; (80112d4 <prvCheckForValidListAndQueue+0x70>)
 801128a:	4a10      	ldr	r2, [pc, #64]	; (80112cc <prvCheckForValidListAndQueue+0x68>)
 801128c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801128e:	2300      	movs	r3, #0
 8011290:	9300      	str	r3, [sp, #0]
 8011292:	4b11      	ldr	r3, [pc, #68]	; (80112d8 <prvCheckForValidListAndQueue+0x74>)
 8011294:	4a11      	ldr	r2, [pc, #68]	; (80112dc <prvCheckForValidListAndQueue+0x78>)
 8011296:	2110      	movs	r1, #16
 8011298:	200a      	movs	r0, #10
 801129a:	f7fd fad9 	bl	800e850 <xQueueGenericCreateStatic>
 801129e:	4603      	mov	r3, r0
 80112a0:	4a08      	ldr	r2, [pc, #32]	; (80112c4 <prvCheckForValidListAndQueue+0x60>)
 80112a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80112a4:	4b07      	ldr	r3, [pc, #28]	; (80112c4 <prvCheckForValidListAndQueue+0x60>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d005      	beq.n	80112b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80112ac:	4b05      	ldr	r3, [pc, #20]	; (80112c4 <prvCheckForValidListAndQueue+0x60>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	490b      	ldr	r1, [pc, #44]	; (80112e0 <prvCheckForValidListAndQueue+0x7c>)
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7fe f9a8 	bl	800f608 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80112b8:	f000 f994 	bl	80115e4 <vPortExitCritical>
}
 80112bc:	bf00      	nop
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	200011d8 	.word	0x200011d8
 80112c8:	200011a8 	.word	0x200011a8
 80112cc:	200011bc 	.word	0x200011bc
 80112d0:	200011d0 	.word	0x200011d0
 80112d4:	200011d4 	.word	0x200011d4
 80112d8:	20001284 	.word	0x20001284
 80112dc:	200011e4 	.word	0x200011e4
 80112e0:	0801314c 	.word	0x0801314c

080112e4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b086      	sub	sp, #24
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d10a      	bne.n	801130c <pvTimerGetTimerID+0x28>
	__asm volatile
 80112f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112fa:	f383 8811 	msr	BASEPRI, r3
 80112fe:	f3bf 8f6f 	isb	sy
 8011302:	f3bf 8f4f 	dsb	sy
 8011306:	60fb      	str	r3, [r7, #12]
}
 8011308:	bf00      	nop
 801130a:	e7fe      	b.n	801130a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 801130c:	f000 f93a 	bl	8011584 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	69db      	ldr	r3, [r3, #28]
 8011314:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8011316:	f000 f965 	bl	80115e4 <vPortExitCritical>

	return pvReturn;
 801131a:	693b      	ldr	r3, [r7, #16]
}
 801131c:	4618      	mov	r0, r3
 801131e:	3718      	adds	r7, #24
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011324:	b480      	push	{r7}
 8011326:	b085      	sub	sp, #20
 8011328:	af00      	add	r7, sp, #0
 801132a:	60f8      	str	r0, [r7, #12]
 801132c:	60b9      	str	r1, [r7, #8]
 801132e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	3b04      	subs	r3, #4
 8011334:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801133c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	3b04      	subs	r3, #4
 8011342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	f023 0201 	bic.w	r2, r3, #1
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	3b04      	subs	r3, #4
 8011352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011354:	4a0c      	ldr	r2, [pc, #48]	; (8011388 <pxPortInitialiseStack+0x64>)
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	3b14      	subs	r3, #20
 801135e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	3b04      	subs	r3, #4
 801136a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	f06f 0202 	mvn.w	r2, #2
 8011372:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	3b20      	subs	r3, #32
 8011378:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801137a:	68fb      	ldr	r3, [r7, #12]
}
 801137c:	4618      	mov	r0, r3
 801137e:	3714      	adds	r7, #20
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr
 8011388:	0801138d 	.word	0x0801138d

0801138c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801138c:	b480      	push	{r7}
 801138e:	b085      	sub	sp, #20
 8011390:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011392:	2300      	movs	r3, #0
 8011394:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011396:	4b12      	ldr	r3, [pc, #72]	; (80113e0 <prvTaskExitError+0x54>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801139e:	d00a      	beq.n	80113b6 <prvTaskExitError+0x2a>
	__asm volatile
 80113a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a4:	f383 8811 	msr	BASEPRI, r3
 80113a8:	f3bf 8f6f 	isb	sy
 80113ac:	f3bf 8f4f 	dsb	sy
 80113b0:	60fb      	str	r3, [r7, #12]
}
 80113b2:	bf00      	nop
 80113b4:	e7fe      	b.n	80113b4 <prvTaskExitError+0x28>
	__asm volatile
 80113b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ba:	f383 8811 	msr	BASEPRI, r3
 80113be:	f3bf 8f6f 	isb	sy
 80113c2:	f3bf 8f4f 	dsb	sy
 80113c6:	60bb      	str	r3, [r7, #8]
}
 80113c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80113ca:	bf00      	nop
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d0fc      	beq.n	80113cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80113d2:	bf00      	nop
 80113d4:	bf00      	nop
 80113d6:	3714      	adds	r7, #20
 80113d8:	46bd      	mov	sp, r7
 80113da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113de:	4770      	bx	lr
 80113e0:	2000012c 	.word	0x2000012c
	...

080113f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80113f0:	4b07      	ldr	r3, [pc, #28]	; (8011410 <pxCurrentTCBConst2>)
 80113f2:	6819      	ldr	r1, [r3, #0]
 80113f4:	6808      	ldr	r0, [r1, #0]
 80113f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113fa:	f380 8809 	msr	PSP, r0
 80113fe:	f3bf 8f6f 	isb	sy
 8011402:	f04f 0000 	mov.w	r0, #0
 8011406:	f380 8811 	msr	BASEPRI, r0
 801140a:	4770      	bx	lr
 801140c:	f3af 8000 	nop.w

08011410 <pxCurrentTCBConst2>:
 8011410:	20000ca8 	.word	0x20000ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011414:	bf00      	nop
 8011416:	bf00      	nop

08011418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011418:	4808      	ldr	r0, [pc, #32]	; (801143c <prvPortStartFirstTask+0x24>)
 801141a:	6800      	ldr	r0, [r0, #0]
 801141c:	6800      	ldr	r0, [r0, #0]
 801141e:	f380 8808 	msr	MSP, r0
 8011422:	f04f 0000 	mov.w	r0, #0
 8011426:	f380 8814 	msr	CONTROL, r0
 801142a:	b662      	cpsie	i
 801142c:	b661      	cpsie	f
 801142e:	f3bf 8f4f 	dsb	sy
 8011432:	f3bf 8f6f 	isb	sy
 8011436:	df00      	svc	0
 8011438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801143a:	bf00      	nop
 801143c:	e000ed08 	.word	0xe000ed08

08011440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b086      	sub	sp, #24
 8011444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011446:	4b46      	ldr	r3, [pc, #280]	; (8011560 <xPortStartScheduler+0x120>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	4a46      	ldr	r2, [pc, #280]	; (8011564 <xPortStartScheduler+0x124>)
 801144c:	4293      	cmp	r3, r2
 801144e:	d10a      	bne.n	8011466 <xPortStartScheduler+0x26>
	__asm volatile
 8011450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011454:	f383 8811 	msr	BASEPRI, r3
 8011458:	f3bf 8f6f 	isb	sy
 801145c:	f3bf 8f4f 	dsb	sy
 8011460:	613b      	str	r3, [r7, #16]
}
 8011462:	bf00      	nop
 8011464:	e7fe      	b.n	8011464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011466:	4b3e      	ldr	r3, [pc, #248]	; (8011560 <xPortStartScheduler+0x120>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	4a3f      	ldr	r2, [pc, #252]	; (8011568 <xPortStartScheduler+0x128>)
 801146c:	4293      	cmp	r3, r2
 801146e:	d10a      	bne.n	8011486 <xPortStartScheduler+0x46>
	__asm volatile
 8011470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011474:	f383 8811 	msr	BASEPRI, r3
 8011478:	f3bf 8f6f 	isb	sy
 801147c:	f3bf 8f4f 	dsb	sy
 8011480:	60fb      	str	r3, [r7, #12]
}
 8011482:	bf00      	nop
 8011484:	e7fe      	b.n	8011484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011486:	4b39      	ldr	r3, [pc, #228]	; (801156c <xPortStartScheduler+0x12c>)
 8011488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	b2db      	uxtb	r3, r3
 8011490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	22ff      	movs	r2, #255	; 0xff
 8011496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	b2db      	uxtb	r3, r3
 801149e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80114a0:	78fb      	ldrb	r3, [r7, #3]
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80114a8:	b2da      	uxtb	r2, r3
 80114aa:	4b31      	ldr	r3, [pc, #196]	; (8011570 <xPortStartScheduler+0x130>)
 80114ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80114ae:	4b31      	ldr	r3, [pc, #196]	; (8011574 <xPortStartScheduler+0x134>)
 80114b0:	2207      	movs	r2, #7
 80114b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80114b4:	e009      	b.n	80114ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80114b6:	4b2f      	ldr	r3, [pc, #188]	; (8011574 <xPortStartScheduler+0x134>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	3b01      	subs	r3, #1
 80114bc:	4a2d      	ldr	r2, [pc, #180]	; (8011574 <xPortStartScheduler+0x134>)
 80114be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80114c0:	78fb      	ldrb	r3, [r7, #3]
 80114c2:	b2db      	uxtb	r3, r3
 80114c4:	005b      	lsls	r3, r3, #1
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80114ca:	78fb      	ldrb	r3, [r7, #3]
 80114cc:	b2db      	uxtb	r3, r3
 80114ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114d2:	2b80      	cmp	r3, #128	; 0x80
 80114d4:	d0ef      	beq.n	80114b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80114d6:	4b27      	ldr	r3, [pc, #156]	; (8011574 <xPortStartScheduler+0x134>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f1c3 0307 	rsb	r3, r3, #7
 80114de:	2b04      	cmp	r3, #4
 80114e0:	d00a      	beq.n	80114f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80114e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e6:	f383 8811 	msr	BASEPRI, r3
 80114ea:	f3bf 8f6f 	isb	sy
 80114ee:	f3bf 8f4f 	dsb	sy
 80114f2:	60bb      	str	r3, [r7, #8]
}
 80114f4:	bf00      	nop
 80114f6:	e7fe      	b.n	80114f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80114f8:	4b1e      	ldr	r3, [pc, #120]	; (8011574 <xPortStartScheduler+0x134>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	021b      	lsls	r3, r3, #8
 80114fe:	4a1d      	ldr	r2, [pc, #116]	; (8011574 <xPortStartScheduler+0x134>)
 8011500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011502:	4b1c      	ldr	r3, [pc, #112]	; (8011574 <xPortStartScheduler+0x134>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801150a:	4a1a      	ldr	r2, [pc, #104]	; (8011574 <xPortStartScheduler+0x134>)
 801150c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	b2da      	uxtb	r2, r3
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011516:	4b18      	ldr	r3, [pc, #96]	; (8011578 <xPortStartScheduler+0x138>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	4a17      	ldr	r2, [pc, #92]	; (8011578 <xPortStartScheduler+0x138>)
 801151c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011522:	4b15      	ldr	r3, [pc, #84]	; (8011578 <xPortStartScheduler+0x138>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	4a14      	ldr	r2, [pc, #80]	; (8011578 <xPortStartScheduler+0x138>)
 8011528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801152c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801152e:	f000 f8dd 	bl	80116ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011532:	4b12      	ldr	r3, [pc, #72]	; (801157c <xPortStartScheduler+0x13c>)
 8011534:	2200      	movs	r2, #0
 8011536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011538:	f000 f8fc 	bl	8011734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801153c:	4b10      	ldr	r3, [pc, #64]	; (8011580 <xPortStartScheduler+0x140>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	4a0f      	ldr	r2, [pc, #60]	; (8011580 <xPortStartScheduler+0x140>)
 8011542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011548:	f7ff ff66 	bl	8011418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801154c:	f7fe fc8c 	bl	800fe68 <vTaskSwitchContext>
	prvTaskExitError();
 8011550:	f7ff ff1c 	bl	801138c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011554:	2300      	movs	r3, #0
}
 8011556:	4618      	mov	r0, r3
 8011558:	3718      	adds	r7, #24
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
 801155e:	bf00      	nop
 8011560:	e000ed00 	.word	0xe000ed00
 8011564:	410fc271 	.word	0x410fc271
 8011568:	410fc270 	.word	0x410fc270
 801156c:	e000e400 	.word	0xe000e400
 8011570:	200012d4 	.word	0x200012d4
 8011574:	200012d8 	.word	0x200012d8
 8011578:	e000ed20 	.word	0xe000ed20
 801157c:	2000012c 	.word	0x2000012c
 8011580:	e000ef34 	.word	0xe000ef34

08011584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011584:	b480      	push	{r7}
 8011586:	b083      	sub	sp, #12
 8011588:	af00      	add	r7, sp, #0
	__asm volatile
 801158a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801158e:	f383 8811 	msr	BASEPRI, r3
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	f3bf 8f4f 	dsb	sy
 801159a:	607b      	str	r3, [r7, #4]
}
 801159c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801159e:	4b0f      	ldr	r3, [pc, #60]	; (80115dc <vPortEnterCritical+0x58>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	3301      	adds	r3, #1
 80115a4:	4a0d      	ldr	r2, [pc, #52]	; (80115dc <vPortEnterCritical+0x58>)
 80115a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80115a8:	4b0c      	ldr	r3, [pc, #48]	; (80115dc <vPortEnterCritical+0x58>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	2b01      	cmp	r3, #1
 80115ae:	d10f      	bne.n	80115d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80115b0:	4b0b      	ldr	r3, [pc, #44]	; (80115e0 <vPortEnterCritical+0x5c>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	b2db      	uxtb	r3, r3
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d00a      	beq.n	80115d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80115ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115be:	f383 8811 	msr	BASEPRI, r3
 80115c2:	f3bf 8f6f 	isb	sy
 80115c6:	f3bf 8f4f 	dsb	sy
 80115ca:	603b      	str	r3, [r7, #0]
}
 80115cc:	bf00      	nop
 80115ce:	e7fe      	b.n	80115ce <vPortEnterCritical+0x4a>
	}
}
 80115d0:	bf00      	nop
 80115d2:	370c      	adds	r7, #12
 80115d4:	46bd      	mov	sp, r7
 80115d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115da:	4770      	bx	lr
 80115dc:	2000012c 	.word	0x2000012c
 80115e0:	e000ed04 	.word	0xe000ed04

080115e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80115e4:	b480      	push	{r7}
 80115e6:	b083      	sub	sp, #12
 80115e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80115ea:	4b12      	ldr	r3, [pc, #72]	; (8011634 <vPortExitCritical+0x50>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d10a      	bne.n	8011608 <vPortExitCritical+0x24>
	__asm volatile
 80115f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f6:	f383 8811 	msr	BASEPRI, r3
 80115fa:	f3bf 8f6f 	isb	sy
 80115fe:	f3bf 8f4f 	dsb	sy
 8011602:	607b      	str	r3, [r7, #4]
}
 8011604:	bf00      	nop
 8011606:	e7fe      	b.n	8011606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011608:	4b0a      	ldr	r3, [pc, #40]	; (8011634 <vPortExitCritical+0x50>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	3b01      	subs	r3, #1
 801160e:	4a09      	ldr	r2, [pc, #36]	; (8011634 <vPortExitCritical+0x50>)
 8011610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011612:	4b08      	ldr	r3, [pc, #32]	; (8011634 <vPortExitCritical+0x50>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d105      	bne.n	8011626 <vPortExitCritical+0x42>
 801161a:	2300      	movs	r3, #0
 801161c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	f383 8811 	msr	BASEPRI, r3
}
 8011624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011626:	bf00      	nop
 8011628:	370c      	adds	r7, #12
 801162a:	46bd      	mov	sp, r7
 801162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011630:	4770      	bx	lr
 8011632:	bf00      	nop
 8011634:	2000012c 	.word	0x2000012c
	...

08011640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011640:	f3ef 8009 	mrs	r0, PSP
 8011644:	f3bf 8f6f 	isb	sy
 8011648:	4b15      	ldr	r3, [pc, #84]	; (80116a0 <pxCurrentTCBConst>)
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	f01e 0f10 	tst.w	lr, #16
 8011650:	bf08      	it	eq
 8011652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801165a:	6010      	str	r0, [r2, #0]
 801165c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011664:	f380 8811 	msr	BASEPRI, r0
 8011668:	f3bf 8f4f 	dsb	sy
 801166c:	f3bf 8f6f 	isb	sy
 8011670:	f7fe fbfa 	bl	800fe68 <vTaskSwitchContext>
 8011674:	f04f 0000 	mov.w	r0, #0
 8011678:	f380 8811 	msr	BASEPRI, r0
 801167c:	bc09      	pop	{r0, r3}
 801167e:	6819      	ldr	r1, [r3, #0]
 8011680:	6808      	ldr	r0, [r1, #0]
 8011682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011686:	f01e 0f10 	tst.w	lr, #16
 801168a:	bf08      	it	eq
 801168c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011690:	f380 8809 	msr	PSP, r0
 8011694:	f3bf 8f6f 	isb	sy
 8011698:	4770      	bx	lr
 801169a:	bf00      	nop
 801169c:	f3af 8000 	nop.w

080116a0 <pxCurrentTCBConst>:
 80116a0:	20000ca8 	.word	0x20000ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80116a4:	bf00      	nop
 80116a6:	bf00      	nop

080116a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
	__asm volatile
 80116ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b2:	f383 8811 	msr	BASEPRI, r3
 80116b6:	f3bf 8f6f 	isb	sy
 80116ba:	f3bf 8f4f 	dsb	sy
 80116be:	607b      	str	r3, [r7, #4]
}
 80116c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80116c2:	f7fe fb17 	bl	800fcf4 <xTaskIncrementTick>
 80116c6:	4603      	mov	r3, r0
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d003      	beq.n	80116d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80116cc:	4b06      	ldr	r3, [pc, #24]	; (80116e8 <xPortSysTickHandler+0x40>)
 80116ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116d2:	601a      	str	r2, [r3, #0]
 80116d4:	2300      	movs	r3, #0
 80116d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	f383 8811 	msr	BASEPRI, r3
}
 80116de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80116e0:	bf00      	nop
 80116e2:	3708      	adds	r7, #8
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	e000ed04 	.word	0xe000ed04

080116ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80116ec:	b480      	push	{r7}
 80116ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80116f0:	4b0b      	ldr	r3, [pc, #44]	; (8011720 <vPortSetupTimerInterrupt+0x34>)
 80116f2:	2200      	movs	r2, #0
 80116f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80116f6:	4b0b      	ldr	r3, [pc, #44]	; (8011724 <vPortSetupTimerInterrupt+0x38>)
 80116f8:	2200      	movs	r2, #0
 80116fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80116fc:	4b0a      	ldr	r3, [pc, #40]	; (8011728 <vPortSetupTimerInterrupt+0x3c>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	4a0a      	ldr	r2, [pc, #40]	; (801172c <vPortSetupTimerInterrupt+0x40>)
 8011702:	fba2 2303 	umull	r2, r3, r2, r3
 8011706:	099b      	lsrs	r3, r3, #6
 8011708:	4a09      	ldr	r2, [pc, #36]	; (8011730 <vPortSetupTimerInterrupt+0x44>)
 801170a:	3b01      	subs	r3, #1
 801170c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801170e:	4b04      	ldr	r3, [pc, #16]	; (8011720 <vPortSetupTimerInterrupt+0x34>)
 8011710:	2207      	movs	r2, #7
 8011712:	601a      	str	r2, [r3, #0]
}
 8011714:	bf00      	nop
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop
 8011720:	e000e010 	.word	0xe000e010
 8011724:	e000e018 	.word	0xe000e018
 8011728:	20000010 	.word	0x20000010
 801172c:	10624dd3 	.word	0x10624dd3
 8011730:	e000e014 	.word	0xe000e014

08011734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011744 <vPortEnableVFP+0x10>
 8011738:	6801      	ldr	r1, [r0, #0]
 801173a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801173e:	6001      	str	r1, [r0, #0]
 8011740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011742:	bf00      	nop
 8011744:	e000ed88 	.word	0xe000ed88

08011748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011748:	b480      	push	{r7}
 801174a:	b085      	sub	sp, #20
 801174c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801174e:	f3ef 8305 	mrs	r3, IPSR
 8011752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2b0f      	cmp	r3, #15
 8011758:	d914      	bls.n	8011784 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801175a:	4a17      	ldr	r2, [pc, #92]	; (80117b8 <vPortValidateInterruptPriority+0x70>)
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	4413      	add	r3, r2
 8011760:	781b      	ldrb	r3, [r3, #0]
 8011762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011764:	4b15      	ldr	r3, [pc, #84]	; (80117bc <vPortValidateInterruptPriority+0x74>)
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	7afa      	ldrb	r2, [r7, #11]
 801176a:	429a      	cmp	r2, r3
 801176c:	d20a      	bcs.n	8011784 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801176e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011772:	f383 8811 	msr	BASEPRI, r3
 8011776:	f3bf 8f6f 	isb	sy
 801177a:	f3bf 8f4f 	dsb	sy
 801177e:	607b      	str	r3, [r7, #4]
}
 8011780:	bf00      	nop
 8011782:	e7fe      	b.n	8011782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011784:	4b0e      	ldr	r3, [pc, #56]	; (80117c0 <vPortValidateInterruptPriority+0x78>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801178c:	4b0d      	ldr	r3, [pc, #52]	; (80117c4 <vPortValidateInterruptPriority+0x7c>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	429a      	cmp	r2, r3
 8011792:	d90a      	bls.n	80117aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011798:	f383 8811 	msr	BASEPRI, r3
 801179c:	f3bf 8f6f 	isb	sy
 80117a0:	f3bf 8f4f 	dsb	sy
 80117a4:	603b      	str	r3, [r7, #0]
}
 80117a6:	bf00      	nop
 80117a8:	e7fe      	b.n	80117a8 <vPortValidateInterruptPriority+0x60>
	}
 80117aa:	bf00      	nop
 80117ac:	3714      	adds	r7, #20
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop
 80117b8:	e000e3f0 	.word	0xe000e3f0
 80117bc:	200012d4 	.word	0x200012d4
 80117c0:	e000ed0c 	.word	0xe000ed0c
 80117c4:	200012d8 	.word	0x200012d8

080117c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b08a      	sub	sp, #40	; 0x28
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80117d0:	2300      	movs	r3, #0
 80117d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80117d4:	f7fe f9d2 	bl	800fb7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80117d8:	4b5b      	ldr	r3, [pc, #364]	; (8011948 <pvPortMalloc+0x180>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d101      	bne.n	80117e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80117e0:	f000 f920 	bl	8011a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80117e4:	4b59      	ldr	r3, [pc, #356]	; (801194c <pvPortMalloc+0x184>)
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4013      	ands	r3, r2
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	f040 8093 	bne.w	8011918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d01d      	beq.n	8011834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80117f8:	2208      	movs	r2, #8
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	4413      	add	r3, r2
 80117fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f003 0307 	and.w	r3, r3, #7
 8011806:	2b00      	cmp	r3, #0
 8011808:	d014      	beq.n	8011834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f023 0307 	bic.w	r3, r3, #7
 8011810:	3308      	adds	r3, #8
 8011812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f003 0307 	and.w	r3, r3, #7
 801181a:	2b00      	cmp	r3, #0
 801181c:	d00a      	beq.n	8011834 <pvPortMalloc+0x6c>
	__asm volatile
 801181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011822:	f383 8811 	msr	BASEPRI, r3
 8011826:	f3bf 8f6f 	isb	sy
 801182a:	f3bf 8f4f 	dsb	sy
 801182e:	617b      	str	r3, [r7, #20]
}
 8011830:	bf00      	nop
 8011832:	e7fe      	b.n	8011832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d06e      	beq.n	8011918 <pvPortMalloc+0x150>
 801183a:	4b45      	ldr	r3, [pc, #276]	; (8011950 <pvPortMalloc+0x188>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	687a      	ldr	r2, [r7, #4]
 8011840:	429a      	cmp	r2, r3
 8011842:	d869      	bhi.n	8011918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011844:	4b43      	ldr	r3, [pc, #268]	; (8011954 <pvPortMalloc+0x18c>)
 8011846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011848:	4b42      	ldr	r3, [pc, #264]	; (8011954 <pvPortMalloc+0x18c>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801184e:	e004      	b.n	801185a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	687a      	ldr	r2, [r7, #4]
 8011860:	429a      	cmp	r2, r3
 8011862:	d903      	bls.n	801186c <pvPortMalloc+0xa4>
 8011864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d1f1      	bne.n	8011850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801186c:	4b36      	ldr	r3, [pc, #216]	; (8011948 <pvPortMalloc+0x180>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011872:	429a      	cmp	r2, r3
 8011874:	d050      	beq.n	8011918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011876:	6a3b      	ldr	r3, [r7, #32]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	2208      	movs	r2, #8
 801187c:	4413      	add	r3, r2
 801187e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011882:	681a      	ldr	r2, [r3, #0]
 8011884:	6a3b      	ldr	r3, [r7, #32]
 8011886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188a:	685a      	ldr	r2, [r3, #4]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	1ad2      	subs	r2, r2, r3
 8011890:	2308      	movs	r3, #8
 8011892:	005b      	lsls	r3, r3, #1
 8011894:	429a      	cmp	r2, r3
 8011896:	d91f      	bls.n	80118d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	4413      	add	r3, r2
 801189e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80118a0:	69bb      	ldr	r3, [r7, #24]
 80118a2:	f003 0307 	and.w	r3, r3, #7
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d00a      	beq.n	80118c0 <pvPortMalloc+0xf8>
	__asm volatile
 80118aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ae:	f383 8811 	msr	BASEPRI, r3
 80118b2:	f3bf 8f6f 	isb	sy
 80118b6:	f3bf 8f4f 	dsb	sy
 80118ba:	613b      	str	r3, [r7, #16]
}
 80118bc:	bf00      	nop
 80118be:	e7fe      	b.n	80118be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80118c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c2:	685a      	ldr	r2, [r3, #4]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	1ad2      	subs	r2, r2, r3
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80118cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80118d2:	69b8      	ldr	r0, [r7, #24]
 80118d4:	f000 f908 	bl	8011ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80118d8:	4b1d      	ldr	r3, [pc, #116]	; (8011950 <pvPortMalloc+0x188>)
 80118da:	681a      	ldr	r2, [r3, #0]
 80118dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	1ad3      	subs	r3, r2, r3
 80118e2:	4a1b      	ldr	r2, [pc, #108]	; (8011950 <pvPortMalloc+0x188>)
 80118e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80118e6:	4b1a      	ldr	r3, [pc, #104]	; (8011950 <pvPortMalloc+0x188>)
 80118e8:	681a      	ldr	r2, [r3, #0]
 80118ea:	4b1b      	ldr	r3, [pc, #108]	; (8011958 <pvPortMalloc+0x190>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	429a      	cmp	r2, r3
 80118f0:	d203      	bcs.n	80118fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80118f2:	4b17      	ldr	r3, [pc, #92]	; (8011950 <pvPortMalloc+0x188>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	4a18      	ldr	r2, [pc, #96]	; (8011958 <pvPortMalloc+0x190>)
 80118f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80118fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fc:	685a      	ldr	r2, [r3, #4]
 80118fe:	4b13      	ldr	r3, [pc, #76]	; (801194c <pvPortMalloc+0x184>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	431a      	orrs	r2, r3
 8011904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190a:	2200      	movs	r2, #0
 801190c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801190e:	4b13      	ldr	r3, [pc, #76]	; (801195c <pvPortMalloc+0x194>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	3301      	adds	r3, #1
 8011914:	4a11      	ldr	r2, [pc, #68]	; (801195c <pvPortMalloc+0x194>)
 8011916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011918:	f7fe f93e 	bl	800fb98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	f003 0307 	and.w	r3, r3, #7
 8011922:	2b00      	cmp	r3, #0
 8011924:	d00a      	beq.n	801193c <pvPortMalloc+0x174>
	__asm volatile
 8011926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801192a:	f383 8811 	msr	BASEPRI, r3
 801192e:	f3bf 8f6f 	isb	sy
 8011932:	f3bf 8f4f 	dsb	sy
 8011936:	60fb      	str	r3, [r7, #12]
}
 8011938:	bf00      	nop
 801193a:	e7fe      	b.n	801193a <pvPortMalloc+0x172>
	return pvReturn;
 801193c:	69fb      	ldr	r3, [r7, #28]
}
 801193e:	4618      	mov	r0, r3
 8011940:	3728      	adds	r7, #40	; 0x28
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	200039f4 	.word	0x200039f4
 801194c:	20003a08 	.word	0x20003a08
 8011950:	200039f8 	.word	0x200039f8
 8011954:	200039ec 	.word	0x200039ec
 8011958:	200039fc 	.word	0x200039fc
 801195c:	20003a00 	.word	0x20003a00

08011960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b086      	sub	sp, #24
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d04d      	beq.n	8011a0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011972:	2308      	movs	r3, #8
 8011974:	425b      	negs	r3, r3
 8011976:	697a      	ldr	r2, [r7, #20]
 8011978:	4413      	add	r3, r2
 801197a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011980:	693b      	ldr	r3, [r7, #16]
 8011982:	685a      	ldr	r2, [r3, #4]
 8011984:	4b24      	ldr	r3, [pc, #144]	; (8011a18 <vPortFree+0xb8>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	4013      	ands	r3, r2
 801198a:	2b00      	cmp	r3, #0
 801198c:	d10a      	bne.n	80119a4 <vPortFree+0x44>
	__asm volatile
 801198e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011992:	f383 8811 	msr	BASEPRI, r3
 8011996:	f3bf 8f6f 	isb	sy
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	60fb      	str	r3, [r7, #12]
}
 80119a0:	bf00      	nop
 80119a2:	e7fe      	b.n	80119a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d00a      	beq.n	80119c2 <vPortFree+0x62>
	__asm volatile
 80119ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b0:	f383 8811 	msr	BASEPRI, r3
 80119b4:	f3bf 8f6f 	isb	sy
 80119b8:	f3bf 8f4f 	dsb	sy
 80119bc:	60bb      	str	r3, [r7, #8]
}
 80119be:	bf00      	nop
 80119c0:	e7fe      	b.n	80119c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	685a      	ldr	r2, [r3, #4]
 80119c6:	4b14      	ldr	r3, [pc, #80]	; (8011a18 <vPortFree+0xb8>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	4013      	ands	r3, r2
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d01e      	beq.n	8011a0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d11a      	bne.n	8011a0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	685a      	ldr	r2, [r3, #4]
 80119dc:	4b0e      	ldr	r3, [pc, #56]	; (8011a18 <vPortFree+0xb8>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	43db      	mvns	r3, r3
 80119e2:	401a      	ands	r2, r3
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80119e8:	f7fe f8c8 	bl	800fb7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	685a      	ldr	r2, [r3, #4]
 80119f0:	4b0a      	ldr	r3, [pc, #40]	; (8011a1c <vPortFree+0xbc>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	4413      	add	r3, r2
 80119f6:	4a09      	ldr	r2, [pc, #36]	; (8011a1c <vPortFree+0xbc>)
 80119f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80119fa:	6938      	ldr	r0, [r7, #16]
 80119fc:	f000 f874 	bl	8011ae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011a00:	4b07      	ldr	r3, [pc, #28]	; (8011a20 <vPortFree+0xc0>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	3301      	adds	r3, #1
 8011a06:	4a06      	ldr	r2, [pc, #24]	; (8011a20 <vPortFree+0xc0>)
 8011a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011a0a:	f7fe f8c5 	bl	800fb98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011a0e:	bf00      	nop
 8011a10:	3718      	adds	r7, #24
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	20003a08 	.word	0x20003a08
 8011a1c:	200039f8 	.word	0x200039f8
 8011a20:	20003a04 	.word	0x20003a04

08011a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011a24:	b480      	push	{r7}
 8011a26:	b085      	sub	sp, #20
 8011a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011a2a:	f242 7310 	movw	r3, #10000	; 0x2710
 8011a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011a30:	4b27      	ldr	r3, [pc, #156]	; (8011ad0 <prvHeapInit+0xac>)
 8011a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f003 0307 	and.w	r3, r3, #7
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d00c      	beq.n	8011a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	3307      	adds	r3, #7
 8011a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	f023 0307 	bic.w	r3, r3, #7
 8011a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011a4c:	68ba      	ldr	r2, [r7, #8]
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	1ad3      	subs	r3, r2, r3
 8011a52:	4a1f      	ldr	r2, [pc, #124]	; (8011ad0 <prvHeapInit+0xac>)
 8011a54:	4413      	add	r3, r2
 8011a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011a5c:	4a1d      	ldr	r2, [pc, #116]	; (8011ad4 <prvHeapInit+0xb0>)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011a62:	4b1c      	ldr	r3, [pc, #112]	; (8011ad4 <prvHeapInit+0xb0>)
 8011a64:	2200      	movs	r2, #0
 8011a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	68ba      	ldr	r2, [r7, #8]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011a70:	2208      	movs	r2, #8
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	1a9b      	subs	r3, r3, r2
 8011a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f023 0307 	bic.w	r3, r3, #7
 8011a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	4a15      	ldr	r2, [pc, #84]	; (8011ad8 <prvHeapInit+0xb4>)
 8011a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011a86:	4b14      	ldr	r3, [pc, #80]	; (8011ad8 <prvHeapInit+0xb4>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011a8e:	4b12      	ldr	r3, [pc, #72]	; (8011ad8 <prvHeapInit+0xb4>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	2200      	movs	r2, #0
 8011a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	68fa      	ldr	r2, [r7, #12]
 8011a9e:	1ad2      	subs	r2, r2, r3
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011aa4:	4b0c      	ldr	r3, [pc, #48]	; (8011ad8 <prvHeapInit+0xb4>)
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	685b      	ldr	r3, [r3, #4]
 8011ab0:	4a0a      	ldr	r2, [pc, #40]	; (8011adc <prvHeapInit+0xb8>)
 8011ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	4a09      	ldr	r2, [pc, #36]	; (8011ae0 <prvHeapInit+0xbc>)
 8011aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011abc:	4b09      	ldr	r3, [pc, #36]	; (8011ae4 <prvHeapInit+0xc0>)
 8011abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011ac2:	601a      	str	r2, [r3, #0]
}
 8011ac4:	bf00      	nop
 8011ac6:	3714      	adds	r7, #20
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ace:	4770      	bx	lr
 8011ad0:	200012dc 	.word	0x200012dc
 8011ad4:	200039ec 	.word	0x200039ec
 8011ad8:	200039f4 	.word	0x200039f4
 8011adc:	200039fc 	.word	0x200039fc
 8011ae0:	200039f8 	.word	0x200039f8
 8011ae4:	20003a08 	.word	0x20003a08

08011ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b085      	sub	sp, #20
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011af0:	4b28      	ldr	r3, [pc, #160]	; (8011b94 <prvInsertBlockIntoFreeList+0xac>)
 8011af2:	60fb      	str	r3, [r7, #12]
 8011af4:	e002      	b.n	8011afc <prvInsertBlockIntoFreeList+0x14>
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	60fb      	str	r3, [r7, #12]
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	687a      	ldr	r2, [r7, #4]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d8f7      	bhi.n	8011af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	68ba      	ldr	r2, [r7, #8]
 8011b10:	4413      	add	r3, r2
 8011b12:	687a      	ldr	r2, [r7, #4]
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d108      	bne.n	8011b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	685a      	ldr	r2, [r3, #4]
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	441a      	add	r2, r3
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	68ba      	ldr	r2, [r7, #8]
 8011b34:	441a      	add	r2, r3
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d118      	bne.n	8011b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	681a      	ldr	r2, [r3, #0]
 8011b42:	4b15      	ldr	r3, [pc, #84]	; (8011b98 <prvInsertBlockIntoFreeList+0xb0>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d00d      	beq.n	8011b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	685a      	ldr	r2, [r3, #4]
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	685b      	ldr	r3, [r3, #4]
 8011b54:	441a      	add	r2, r3
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	681a      	ldr	r2, [r3, #0]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	601a      	str	r2, [r3, #0]
 8011b64:	e008      	b.n	8011b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011b66:	4b0c      	ldr	r3, [pc, #48]	; (8011b98 <prvInsertBlockIntoFreeList+0xb0>)
 8011b68:	681a      	ldr	r2, [r3, #0]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	601a      	str	r2, [r3, #0]
 8011b6e:	e003      	b.n	8011b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011b78:	68fa      	ldr	r2, [r7, #12]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d002      	beq.n	8011b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	687a      	ldr	r2, [r7, #4]
 8011b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011b86:	bf00      	nop
 8011b88:	3714      	adds	r7, #20
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop
 8011b94:	200039ec 	.word	0x200039ec
 8011b98:	200039f4 	.word	0x200039f4

08011b9c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	4912      	ldr	r1, [pc, #72]	; (8011bec <MX_USB_Device_Init+0x50>)
 8011ba4:	4812      	ldr	r0, [pc, #72]	; (8011bf0 <MX_USB_Device_Init+0x54>)
 8011ba6:	f7fa fad9 	bl	800c15c <USBD_Init>
 8011baa:	4603      	mov	r3, r0
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d001      	beq.n	8011bb4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011bb0:	f7ef fa40 	bl	8001034 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011bb4:	490f      	ldr	r1, [pc, #60]	; (8011bf4 <MX_USB_Device_Init+0x58>)
 8011bb6:	480e      	ldr	r0, [pc, #56]	; (8011bf0 <MX_USB_Device_Init+0x54>)
 8011bb8:	f7fa fb00 	bl	800c1bc <USBD_RegisterClass>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d001      	beq.n	8011bc6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011bc2:	f7ef fa37 	bl	8001034 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011bc6:	490c      	ldr	r1, [pc, #48]	; (8011bf8 <MX_USB_Device_Init+0x5c>)
 8011bc8:	4809      	ldr	r0, [pc, #36]	; (8011bf0 <MX_USB_Device_Init+0x54>)
 8011bca:	f7fa fa51 	bl	800c070 <USBD_CDC_RegisterInterface>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d001      	beq.n	8011bd8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011bd4:	f7ef fa2e 	bl	8001034 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011bd8:	4805      	ldr	r0, [pc, #20]	; (8011bf0 <MX_USB_Device_Init+0x54>)
 8011bda:	f7fa fb16 	bl	800c20a <USBD_Start>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d001      	beq.n	8011be8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011be4:	f7ef fa26 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011be8:	bf00      	nop
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	20000144 	.word	0x20000144
 8011bf0:	20004008 	.word	0x20004008
 8011bf4:	20000028 	.word	0x20000028
 8011bf8:	20000130 	.word	0x20000130

08011bfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011c00:	2200      	movs	r2, #0
 8011c02:	4905      	ldr	r1, [pc, #20]	; (8011c18 <CDC_Init_FS+0x1c>)
 8011c04:	4805      	ldr	r0, [pc, #20]	; (8011c1c <CDC_Init_FS+0x20>)
 8011c06:	f7fa fa48 	bl	800c09a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011c0a:	4905      	ldr	r1, [pc, #20]	; (8011c20 <CDC_Init_FS+0x24>)
 8011c0c:	4803      	ldr	r0, [pc, #12]	; (8011c1c <CDC_Init_FS+0x20>)
 8011c0e:	f7fa fa62 	bl	800c0d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011c12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	20004ad8 	.word	0x20004ad8
 8011c1c:	20004008 	.word	0x20004008
 8011c20:	200042d8 	.word	0x200042d8

08011c24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011c24:	b480      	push	{r7}
 8011c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011c28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr

08011c34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011c34:	b480      	push	{r7}
 8011c36:	b083      	sub	sp, #12
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	6039      	str	r1, [r7, #0]
 8011c3e:	71fb      	strb	r3, [r7, #7]
 8011c40:	4613      	mov	r3, r2
 8011c42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011c44:	79fb      	ldrb	r3, [r7, #7]
 8011c46:	2b23      	cmp	r3, #35	; 0x23
 8011c48:	d84a      	bhi.n	8011ce0 <CDC_Control_FS+0xac>
 8011c4a:	a201      	add	r2, pc, #4	; (adr r2, 8011c50 <CDC_Control_FS+0x1c>)
 8011c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c50:	08011ce1 	.word	0x08011ce1
 8011c54:	08011ce1 	.word	0x08011ce1
 8011c58:	08011ce1 	.word	0x08011ce1
 8011c5c:	08011ce1 	.word	0x08011ce1
 8011c60:	08011ce1 	.word	0x08011ce1
 8011c64:	08011ce1 	.word	0x08011ce1
 8011c68:	08011ce1 	.word	0x08011ce1
 8011c6c:	08011ce1 	.word	0x08011ce1
 8011c70:	08011ce1 	.word	0x08011ce1
 8011c74:	08011ce1 	.word	0x08011ce1
 8011c78:	08011ce1 	.word	0x08011ce1
 8011c7c:	08011ce1 	.word	0x08011ce1
 8011c80:	08011ce1 	.word	0x08011ce1
 8011c84:	08011ce1 	.word	0x08011ce1
 8011c88:	08011ce1 	.word	0x08011ce1
 8011c8c:	08011ce1 	.word	0x08011ce1
 8011c90:	08011ce1 	.word	0x08011ce1
 8011c94:	08011ce1 	.word	0x08011ce1
 8011c98:	08011ce1 	.word	0x08011ce1
 8011c9c:	08011ce1 	.word	0x08011ce1
 8011ca0:	08011ce1 	.word	0x08011ce1
 8011ca4:	08011ce1 	.word	0x08011ce1
 8011ca8:	08011ce1 	.word	0x08011ce1
 8011cac:	08011ce1 	.word	0x08011ce1
 8011cb0:	08011ce1 	.word	0x08011ce1
 8011cb4:	08011ce1 	.word	0x08011ce1
 8011cb8:	08011ce1 	.word	0x08011ce1
 8011cbc:	08011ce1 	.word	0x08011ce1
 8011cc0:	08011ce1 	.word	0x08011ce1
 8011cc4:	08011ce1 	.word	0x08011ce1
 8011cc8:	08011ce1 	.word	0x08011ce1
 8011ccc:	08011ce1 	.word	0x08011ce1
 8011cd0:	08011ce1 	.word	0x08011ce1
 8011cd4:	08011ce1 	.word	0x08011ce1
 8011cd8:	08011ce1 	.word	0x08011ce1
 8011cdc:	08011ce1 	.word	0x08011ce1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011ce0:	bf00      	nop
  }

  return (USBD_OK);
 8011ce2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	370c      	adds	r7, #12
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr

08011cf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b082      	sub	sp, #8
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011cfa:	6879      	ldr	r1, [r7, #4]
 8011cfc:	4805      	ldr	r0, [pc, #20]	; (8011d14 <CDC_Receive_FS+0x24>)
 8011cfe:	f7fa f9ea 	bl	800c0d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011d02:	4804      	ldr	r0, [pc, #16]	; (8011d14 <CDC_Receive_FS+0x24>)
 8011d04:	f7fa fa00 	bl	800c108 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011d08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3708      	adds	r7, #8
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	20004008 	.word	0x20004008

08011d18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b087      	sub	sp, #28
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	60f8      	str	r0, [r7, #12]
 8011d20:	60b9      	str	r1, [r7, #8]
 8011d22:	4613      	mov	r3, r2
 8011d24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011d26:	2300      	movs	r3, #0
 8011d28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	371c      	adds	r7, #28
 8011d32:	46bd      	mov	sp, r7
 8011d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d38:	4770      	bx	lr
	...

08011d3c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	4603      	mov	r3, r0
 8011d44:	6039      	str	r1, [r7, #0]
 8011d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	2212      	movs	r2, #18
 8011d4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8011d4e:	4b03      	ldr	r3, [pc, #12]	; (8011d5c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	370c      	adds	r7, #12
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr
 8011d5c:	20000164 	.word	0x20000164

08011d60 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b083      	sub	sp, #12
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	4603      	mov	r3, r0
 8011d68:	6039      	str	r1, [r7, #0]
 8011d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	2204      	movs	r2, #4
 8011d70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011d72:	4b03      	ldr	r3, [pc, #12]	; (8011d80 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	370c      	adds	r7, #12
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7e:	4770      	bx	lr
 8011d80:	20000178 	.word	0x20000178

08011d84 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	6039      	str	r1, [r7, #0]
 8011d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011d90:	79fb      	ldrb	r3, [r7, #7]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d105      	bne.n	8011da2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011d96:	683a      	ldr	r2, [r7, #0]
 8011d98:	4907      	ldr	r1, [pc, #28]	; (8011db8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011d9a:	4808      	ldr	r0, [pc, #32]	; (8011dbc <USBD_CDC_ProductStrDescriptor+0x38>)
 8011d9c:	f7fb fa1d 	bl	800d1da <USBD_GetString>
 8011da0:	e004      	b.n	8011dac <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011da2:	683a      	ldr	r2, [r7, #0]
 8011da4:	4904      	ldr	r1, [pc, #16]	; (8011db8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011da6:	4805      	ldr	r0, [pc, #20]	; (8011dbc <USBD_CDC_ProductStrDescriptor+0x38>)
 8011da8:	f7fb fa17 	bl	800d1da <USBD_GetString>
  }
  return USBD_StrDesc;
 8011dac:	4b02      	ldr	r3, [pc, #8]	; (8011db8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	3708      	adds	r7, #8
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	bf00      	nop
 8011db8:	200052d8 	.word	0x200052d8
 8011dbc:	08013154 	.word	0x08013154

08011dc0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	6039      	str	r1, [r7, #0]
 8011dca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011dcc:	683a      	ldr	r2, [r7, #0]
 8011dce:	4904      	ldr	r1, [pc, #16]	; (8011de0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011dd0:	4804      	ldr	r0, [pc, #16]	; (8011de4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011dd2:	f7fb fa02 	bl	800d1da <USBD_GetString>
  return USBD_StrDesc;
 8011dd6:	4b02      	ldr	r3, [pc, #8]	; (8011de0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3708      	adds	r7, #8
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}
 8011de0:	200052d8 	.word	0x200052d8
 8011de4:	0801316c 	.word	0x0801316c

08011de8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	4603      	mov	r3, r0
 8011df0:	6039      	str	r1, [r7, #0]
 8011df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	221a      	movs	r2, #26
 8011df8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011dfa:	f000 f843 	bl	8011e84 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011dfe:	4b02      	ldr	r3, [pc, #8]	; (8011e08 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011e00:	4618      	mov	r0, r3
 8011e02:	3708      	adds	r7, #8
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	2000017c 	.word	0x2000017c

08011e0c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	4603      	mov	r3, r0
 8011e14:	6039      	str	r1, [r7, #0]
 8011e16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011e18:	79fb      	ldrb	r3, [r7, #7]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d105      	bne.n	8011e2a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011e1e:	683a      	ldr	r2, [r7, #0]
 8011e20:	4907      	ldr	r1, [pc, #28]	; (8011e40 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011e22:	4808      	ldr	r0, [pc, #32]	; (8011e44 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011e24:	f7fb f9d9 	bl	800d1da <USBD_GetString>
 8011e28:	e004      	b.n	8011e34 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011e2a:	683a      	ldr	r2, [r7, #0]
 8011e2c:	4904      	ldr	r1, [pc, #16]	; (8011e40 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011e2e:	4805      	ldr	r0, [pc, #20]	; (8011e44 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011e30:	f7fb f9d3 	bl	800d1da <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e34:	4b02      	ldr	r3, [pc, #8]	; (8011e40 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3708      	adds	r7, #8
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	200052d8 	.word	0x200052d8
 8011e44:	08013180 	.word	0x08013180

08011e48 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	4603      	mov	r3, r0
 8011e50:	6039      	str	r1, [r7, #0]
 8011e52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011e54:	79fb      	ldrb	r3, [r7, #7]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d105      	bne.n	8011e66 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011e5a:	683a      	ldr	r2, [r7, #0]
 8011e5c:	4907      	ldr	r1, [pc, #28]	; (8011e7c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011e5e:	4808      	ldr	r0, [pc, #32]	; (8011e80 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011e60:	f7fb f9bb 	bl	800d1da <USBD_GetString>
 8011e64:	e004      	b.n	8011e70 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011e66:	683a      	ldr	r2, [r7, #0]
 8011e68:	4904      	ldr	r1, [pc, #16]	; (8011e7c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011e6a:	4805      	ldr	r0, [pc, #20]	; (8011e80 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011e6c:	f7fb f9b5 	bl	800d1da <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e70:	4b02      	ldr	r3, [pc, #8]	; (8011e7c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	200052d8 	.word	0x200052d8
 8011e80:	0801318c 	.word	0x0801318c

08011e84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b084      	sub	sp, #16
 8011e88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011e8a:	4b0f      	ldr	r3, [pc, #60]	; (8011ec8 <Get_SerialNum+0x44>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011e90:	4b0e      	ldr	r3, [pc, #56]	; (8011ecc <Get_SerialNum+0x48>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011e96:	4b0e      	ldr	r3, [pc, #56]	; (8011ed0 <Get_SerialNum+0x4c>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	4413      	add	r3, r2
 8011ea2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d009      	beq.n	8011ebe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011eaa:	2208      	movs	r2, #8
 8011eac:	4909      	ldr	r1, [pc, #36]	; (8011ed4 <Get_SerialNum+0x50>)
 8011eae:	68f8      	ldr	r0, [r7, #12]
 8011eb0:	f000 f814 	bl	8011edc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011eb4:	2204      	movs	r2, #4
 8011eb6:	4908      	ldr	r1, [pc, #32]	; (8011ed8 <Get_SerialNum+0x54>)
 8011eb8:	68b8      	ldr	r0, [r7, #8]
 8011eba:	f000 f80f 	bl	8011edc <IntToUnicode>
  }
}
 8011ebe:	bf00      	nop
 8011ec0:	3710      	adds	r7, #16
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}
 8011ec6:	bf00      	nop
 8011ec8:	1fff7590 	.word	0x1fff7590
 8011ecc:	1fff7594 	.word	0x1fff7594
 8011ed0:	1fff7598 	.word	0x1fff7598
 8011ed4:	2000017e 	.word	0x2000017e
 8011ed8:	2000018e 	.word	0x2000018e

08011edc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011edc:	b480      	push	{r7}
 8011ede:	b087      	sub	sp, #28
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	60f8      	str	r0, [r7, #12]
 8011ee4:	60b9      	str	r1, [r7, #8]
 8011ee6:	4613      	mov	r3, r2
 8011ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011eea:	2300      	movs	r3, #0
 8011eec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011eee:	2300      	movs	r3, #0
 8011ef0:	75fb      	strb	r3, [r7, #23]
 8011ef2:	e027      	b.n	8011f44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	0f1b      	lsrs	r3, r3, #28
 8011ef8:	2b09      	cmp	r3, #9
 8011efa:	d80b      	bhi.n	8011f14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	0f1b      	lsrs	r3, r3, #28
 8011f00:	b2da      	uxtb	r2, r3
 8011f02:	7dfb      	ldrb	r3, [r7, #23]
 8011f04:	005b      	lsls	r3, r3, #1
 8011f06:	4619      	mov	r1, r3
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	440b      	add	r3, r1
 8011f0c:	3230      	adds	r2, #48	; 0x30
 8011f0e:	b2d2      	uxtb	r2, r2
 8011f10:	701a      	strb	r2, [r3, #0]
 8011f12:	e00a      	b.n	8011f2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	0f1b      	lsrs	r3, r3, #28
 8011f18:	b2da      	uxtb	r2, r3
 8011f1a:	7dfb      	ldrb	r3, [r7, #23]
 8011f1c:	005b      	lsls	r3, r3, #1
 8011f1e:	4619      	mov	r1, r3
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	440b      	add	r3, r1
 8011f24:	3237      	adds	r2, #55	; 0x37
 8011f26:	b2d2      	uxtb	r2, r2
 8011f28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	011b      	lsls	r3, r3, #4
 8011f2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011f30:	7dfb      	ldrb	r3, [r7, #23]
 8011f32:	005b      	lsls	r3, r3, #1
 8011f34:	3301      	adds	r3, #1
 8011f36:	68ba      	ldr	r2, [r7, #8]
 8011f38:	4413      	add	r3, r2
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011f3e:	7dfb      	ldrb	r3, [r7, #23]
 8011f40:	3301      	adds	r3, #1
 8011f42:	75fb      	strb	r3, [r7, #23]
 8011f44:	7dfa      	ldrb	r2, [r7, #23]
 8011f46:	79fb      	ldrb	r3, [r7, #7]
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d3d3      	bcc.n	8011ef4 <IntToUnicode+0x18>
  }
}
 8011f4c:	bf00      	nop
 8011f4e:	bf00      	nop
 8011f50:	371c      	adds	r7, #28
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr

08011f5a <LL_AHB2_GRP1_EnableClock>:
{
 8011f5a:	b480      	push	{r7}
 8011f5c:	b085      	sub	sp, #20
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8011f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	4313      	orrs	r3, r2
 8011f70:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8011f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	4013      	ands	r3, r2
 8011f7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
}
 8011f80:	bf00      	nop
 8011f82:	3714      	adds	r7, #20
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr

08011f8c <LL_APB1_GRP1_EnableClock>:
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	b085      	sub	sp, #20
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011f98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	4313      	orrs	r3, r2
 8011fa2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8011fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011fa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	4013      	ands	r3, r2
 8011fae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011fb0:	68fb      	ldr	r3, [r7, #12]
}
 8011fb2:	bf00      	nop
 8011fb4:	3714      	adds	r7, #20
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbc:	4770      	bx	lr
	...

08011fc0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b088      	sub	sp, #32
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011fc8:	f107 030c 	add.w	r3, r7, #12
 8011fcc:	2200      	movs	r2, #0
 8011fce:	601a      	str	r2, [r3, #0]
 8011fd0:	605a      	str	r2, [r3, #4]
 8011fd2:	609a      	str	r2, [r3, #8]
 8011fd4:	60da      	str	r2, [r3, #12]
 8011fd6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	4a1d      	ldr	r2, [pc, #116]	; (8012054 <HAL_PCD_MspInit+0x94>)
 8011fde:	4293      	cmp	r3, r2
 8011fe0:	d134      	bne.n	801204c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011fe2:	2001      	movs	r0, #1
 8011fe4:	f7ff ffb9 	bl	8011f5a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011fe8:	2004      	movs	r0, #4
 8011fea:	f7ff ffb6 	bl	8011f5a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    PC9     ------> USB_NOE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8011fee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011ff2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ff4:	2302      	movs	r3, #2
 8011ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8012000:	230a      	movs	r3, #10
 8012002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012004:	f107 030c 	add.w	r3, r7, #12
 8012008:	4619      	mov	r1, r3
 801200a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801200e:	f7f0 fe65 	bl	8002cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8012012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012016:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012018:	2302      	movs	r3, #2
 801201a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801201c:	2300      	movs	r3, #0
 801201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012020:	2300      	movs	r3, #0
 8012022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8012024:	230a      	movs	r3, #10
 8012026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012028:	f107 030c 	add.w	r3, r7, #12
 801202c:	4619      	mov	r1, r3
 801202e:	480a      	ldr	r0, [pc, #40]	; (8012058 <HAL_PCD_MspInit+0x98>)
 8012030:	f7f0 fe54 	bl	8002cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012034:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8012038:	f7ff ffa8 	bl	8011f8c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801203c:	2200      	movs	r2, #0
 801203e:	2105      	movs	r1, #5
 8012040:	2014      	movs	r0, #20
 8012042:	f7f0 fe23 	bl	8002c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012046:	2014      	movs	r0, #20
 8012048:	f7f0 fe3a 	bl	8002cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801204c:	bf00      	nop
 801204e:	3720      	adds	r7, #32
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	40006800 	.word	0x40006800
 8012058:	48000800 	.word	0x48000800

0801205c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012070:	4619      	mov	r1, r3
 8012072:	4610      	mov	r0, r2
 8012074:	f7fa f914 	bl	800c2a0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012078:	bf00      	nop
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b082      	sub	sp, #8
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
 8012088:	460b      	mov	r3, r1
 801208a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8012092:	78fa      	ldrb	r2, [r7, #3]
 8012094:	6879      	ldr	r1, [r7, #4]
 8012096:	4613      	mov	r3, r2
 8012098:	009b      	lsls	r3, r3, #2
 801209a:	4413      	add	r3, r2
 801209c:	00db      	lsls	r3, r3, #3
 801209e:	440b      	add	r3, r1
 80120a0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	78fb      	ldrb	r3, [r7, #3]
 80120a8:	4619      	mov	r1, r3
 80120aa:	f7fa f94e 	bl	800c34a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80120ae:	bf00      	nop
 80120b0:	3708      	adds	r7, #8
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}

080120b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120b6:	b580      	push	{r7, lr}
 80120b8:	b082      	sub	sp, #8
 80120ba:	af00      	add	r7, sp, #0
 80120bc:	6078      	str	r0, [r7, #4]
 80120be:	460b      	mov	r3, r1
 80120c0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80120c8:	78fa      	ldrb	r2, [r7, #3]
 80120ca:	6879      	ldr	r1, [r7, #4]
 80120cc:	4613      	mov	r3, r2
 80120ce:	009b      	lsls	r3, r3, #2
 80120d0:	4413      	add	r3, r2
 80120d2:	00db      	lsls	r3, r3, #3
 80120d4:	440b      	add	r3, r1
 80120d6:	333c      	adds	r3, #60	; 0x3c
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	78fb      	ldrb	r3, [r7, #3]
 80120dc:	4619      	mov	r1, r3
 80120de:	f7fa f997 	bl	800c410 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80120e2:	bf00      	nop
 80120e4:	3708      	adds	r7, #8
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}

080120ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120ea:	b580      	push	{r7, lr}
 80120ec:	b082      	sub	sp, #8
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7fa faab 	bl	800c654 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80120fe:	bf00      	nop
 8012100:	3708      	adds	r7, #8
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}

08012106 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012106:	b580      	push	{r7, lr}
 8012108:	b084      	sub	sp, #16
 801210a:	af00      	add	r7, sp, #0
 801210c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801210e:	2301      	movs	r3, #1
 8012110:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	689b      	ldr	r3, [r3, #8]
 8012116:	2b02      	cmp	r3, #2
 8012118:	d001      	beq.n	801211e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801211a:	f7ee ff8b 	bl	8001034 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012124:	7bfa      	ldrb	r2, [r7, #15]
 8012126:	4611      	mov	r1, r2
 8012128:	4618      	mov	r0, r3
 801212a:	f7fa fa55 	bl	800c5d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012134:	4618      	mov	r0, r3
 8012136:	f7fa fa01 	bl	800c53c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801213a:	bf00      	nop
 801213c:	3710      	adds	r7, #16
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
	...

08012144 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b082      	sub	sp, #8
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012152:	4618      	mov	r0, r3
 8012154:	f7fa fa50 	bl	800c5f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	699b      	ldr	r3, [r3, #24]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d005      	beq.n	801216c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012160:	4b04      	ldr	r3, [pc, #16]	; (8012174 <HAL_PCD_SuspendCallback+0x30>)
 8012162:	691b      	ldr	r3, [r3, #16]
 8012164:	4a03      	ldr	r2, [pc, #12]	; (8012174 <HAL_PCD_SuspendCallback+0x30>)
 8012166:	f043 0306 	orr.w	r3, r3, #6
 801216a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801216c:	bf00      	nop
 801216e:	3708      	adds	r7, #8
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}
 8012174:	e000ed00 	.word	0xe000ed00

08012178 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	699b      	ldr	r3, [r3, #24]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d007      	beq.n	8012198 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012188:	4b08      	ldr	r3, [pc, #32]	; (80121ac <HAL_PCD_ResumeCallback+0x34>)
 801218a:	691b      	ldr	r3, [r3, #16]
 801218c:	4a07      	ldr	r2, [pc, #28]	; (80121ac <HAL_PCD_ResumeCallback+0x34>)
 801218e:	f023 0306 	bic.w	r3, r3, #6
 8012192:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012194:	f000 f9fc 	bl	8012590 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801219e:	4618      	mov	r0, r3
 80121a0:	f7fa fa40 	bl	800c624 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80121a4:	bf00      	nop
 80121a6:	3708      	adds	r7, #8
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}
 80121ac:	e000ed00 	.word	0xe000ed00

080121b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80121b8:	4a2c      	ldr	r2, [pc, #176]	; (801226c <USBD_LL_Init+0xbc>)
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	4a2a      	ldr	r2, [pc, #168]	; (801226c <USBD_LL_Init+0xbc>)
 80121c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80121c8:	f7f3 fae6 	bl	8005798 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80121cc:	4b27      	ldr	r3, [pc, #156]	; (801226c <USBD_LL_Init+0xbc>)
 80121ce:	4a28      	ldr	r2, [pc, #160]	; (8012270 <USBD_LL_Init+0xc0>)
 80121d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80121d2:	4b26      	ldr	r3, [pc, #152]	; (801226c <USBD_LL_Init+0xbc>)
 80121d4:	2208      	movs	r2, #8
 80121d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80121d8:	4b24      	ldr	r3, [pc, #144]	; (801226c <USBD_LL_Init+0xbc>)
 80121da:	2202      	movs	r2, #2
 80121dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80121de:	4b23      	ldr	r3, [pc, #140]	; (801226c <USBD_LL_Init+0xbc>)
 80121e0:	2202      	movs	r2, #2
 80121e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80121e4:	4b21      	ldr	r3, [pc, #132]	; (801226c <USBD_LL_Init+0xbc>)
 80121e6:	2200      	movs	r2, #0
 80121e8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80121ea:	4b20      	ldr	r3, [pc, #128]	; (801226c <USBD_LL_Init+0xbc>)
 80121ec:	2200      	movs	r2, #0
 80121ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80121f0:	4b1e      	ldr	r3, [pc, #120]	; (801226c <USBD_LL_Init+0xbc>)
 80121f2:	2200      	movs	r2, #0
 80121f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80121f6:	4b1d      	ldr	r3, [pc, #116]	; (801226c <USBD_LL_Init+0xbc>)
 80121f8:	2200      	movs	r2, #0
 80121fa:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80121fc:	481b      	ldr	r0, [pc, #108]	; (801226c <USBD_LL_Init+0xbc>)
 80121fe:	f7f1 fd79 	bl	8003cf4 <HAL_PCD_Init>
 8012202:	4603      	mov	r3, r0
 8012204:	2b00      	cmp	r3, #0
 8012206:	d001      	beq.n	801220c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8012208:	f7ee ff14 	bl	8001034 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012212:	2318      	movs	r3, #24
 8012214:	2200      	movs	r2, #0
 8012216:	2100      	movs	r1, #0
 8012218:	f7f3 fa32 	bl	8005680 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012222:	2358      	movs	r3, #88	; 0x58
 8012224:	2200      	movs	r2, #0
 8012226:	2180      	movs	r1, #128	; 0x80
 8012228:	f7f3 fa2a 	bl	8005680 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012232:	23c0      	movs	r3, #192	; 0xc0
 8012234:	2200      	movs	r2, #0
 8012236:	2181      	movs	r1, #129	; 0x81
 8012238:	f7f3 fa22 	bl	8005680 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012242:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012246:	2200      	movs	r2, #0
 8012248:	2101      	movs	r1, #1
 801224a:	f7f3 fa19 	bl	8005680 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012258:	2200      	movs	r2, #0
 801225a:	2182      	movs	r1, #130	; 0x82
 801225c:	f7f3 fa10 	bl	8005680 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012260:	2300      	movs	r3, #0
}
 8012262:	4618      	mov	r0, r3
 8012264:	3708      	adds	r7, #8
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
 801226a:	bf00      	nop
 801226c:	200054d8 	.word	0x200054d8
 8012270:	40006800 	.word	0x40006800

08012274 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b084      	sub	sp, #16
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801227c:	2300      	movs	r3, #0
 801227e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012280:	2300      	movs	r3, #0
 8012282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801228a:	4618      	mov	r0, r3
 801228c:	f7f1 fe17 	bl	8003ebe <HAL_PCD_Start>
 8012290:	4603      	mov	r3, r0
 8012292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012294:	7bfb      	ldrb	r3, [r7, #15]
 8012296:	4618      	mov	r0, r3
 8012298:	f000 f980 	bl	801259c <USBD_Get_USB_Status>
 801229c:	4603      	mov	r3, r0
 801229e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3710      	adds	r7, #16
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}

080122aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80122aa:	b580      	push	{r7, lr}
 80122ac:	b084      	sub	sp, #16
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
 80122b2:	4608      	mov	r0, r1
 80122b4:	4611      	mov	r1, r2
 80122b6:	461a      	mov	r2, r3
 80122b8:	4603      	mov	r3, r0
 80122ba:	70fb      	strb	r3, [r7, #3]
 80122bc:	460b      	mov	r3, r1
 80122be:	70bb      	strb	r3, [r7, #2]
 80122c0:	4613      	mov	r3, r2
 80122c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122c4:	2300      	movs	r3, #0
 80122c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122c8:	2300      	movs	r3, #0
 80122ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80122d2:	78bb      	ldrb	r3, [r7, #2]
 80122d4:	883a      	ldrh	r2, [r7, #0]
 80122d6:	78f9      	ldrb	r1, [r7, #3]
 80122d8:	f7f1 ff5f 	bl	800419a <HAL_PCD_EP_Open>
 80122dc:	4603      	mov	r3, r0
 80122de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122e0:	7bfb      	ldrb	r3, [r7, #15]
 80122e2:	4618      	mov	r0, r3
 80122e4:	f000 f95a 	bl	801259c <USBD_Get_USB_Status>
 80122e8:	4603      	mov	r3, r0
 80122ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3710      	adds	r7, #16
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}

080122f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122f6:	b580      	push	{r7, lr}
 80122f8:	b084      	sub	sp, #16
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
 80122fe:	460b      	mov	r3, r1
 8012300:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012302:	2300      	movs	r3, #0
 8012304:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012306:	2300      	movs	r3, #0
 8012308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012310:	78fa      	ldrb	r2, [r7, #3]
 8012312:	4611      	mov	r1, r2
 8012314:	4618      	mov	r0, r3
 8012316:	f7f1 ffa6 	bl	8004266 <HAL_PCD_EP_Close>
 801231a:	4603      	mov	r3, r0
 801231c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801231e:	7bfb      	ldrb	r3, [r7, #15]
 8012320:	4618      	mov	r0, r3
 8012322:	f000 f93b 	bl	801259c <USBD_Get_USB_Status>
 8012326:	4603      	mov	r3, r0
 8012328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801232a:	7bbb      	ldrb	r3, [r7, #14]
}
 801232c:	4618      	mov	r0, r3
 801232e:	3710      	adds	r7, #16
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	460b      	mov	r3, r1
 801233e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012340:	2300      	movs	r3, #0
 8012342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012344:	2300      	movs	r3, #0
 8012346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801234e:	78fa      	ldrb	r2, [r7, #3]
 8012350:	4611      	mov	r1, r2
 8012352:	4618      	mov	r0, r3
 8012354:	f7f2 f867 	bl	8004426 <HAL_PCD_EP_SetStall>
 8012358:	4603      	mov	r3, r0
 801235a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801235c:	7bfb      	ldrb	r3, [r7, #15]
 801235e:	4618      	mov	r0, r3
 8012360:	f000 f91c 	bl	801259c <USBD_Get_USB_Status>
 8012364:	4603      	mov	r3, r0
 8012366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012368:	7bbb      	ldrb	r3, [r7, #14]
}
 801236a:	4618      	mov	r0, r3
 801236c:	3710      	adds	r7, #16
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}

08012372 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012372:	b580      	push	{r7, lr}
 8012374:	b084      	sub	sp, #16
 8012376:	af00      	add	r7, sp, #0
 8012378:	6078      	str	r0, [r7, #4]
 801237a:	460b      	mov	r3, r1
 801237c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801237e:	2300      	movs	r3, #0
 8012380:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012382:	2300      	movs	r3, #0
 8012384:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801238c:	78fa      	ldrb	r2, [r7, #3]
 801238e:	4611      	mov	r1, r2
 8012390:	4618      	mov	r0, r3
 8012392:	f7f2 f89a 	bl	80044ca <HAL_PCD_EP_ClrStall>
 8012396:	4603      	mov	r3, r0
 8012398:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801239a:	7bfb      	ldrb	r3, [r7, #15]
 801239c:	4618      	mov	r0, r3
 801239e:	f000 f8fd 	bl	801259c <USBD_Get_USB_Status>
 80123a2:	4603      	mov	r3, r0
 80123a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3710      	adds	r7, #16
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80123b0:	b480      	push	{r7}
 80123b2:	b085      	sub	sp, #20
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	460b      	mov	r3, r1
 80123ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80123c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80123c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	da0c      	bge.n	80123e6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80123cc:	78fb      	ldrb	r3, [r7, #3]
 80123ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123d2:	68f9      	ldr	r1, [r7, #12]
 80123d4:	1c5a      	adds	r2, r3, #1
 80123d6:	4613      	mov	r3, r2
 80123d8:	009b      	lsls	r3, r3, #2
 80123da:	4413      	add	r3, r2
 80123dc:	00db      	lsls	r3, r3, #3
 80123de:	440b      	add	r3, r1
 80123e0:	3302      	adds	r3, #2
 80123e2:	781b      	ldrb	r3, [r3, #0]
 80123e4:	e00b      	b.n	80123fe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80123e6:	78fb      	ldrb	r3, [r7, #3]
 80123e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80123ec:	68f9      	ldr	r1, [r7, #12]
 80123ee:	4613      	mov	r3, r2
 80123f0:	009b      	lsls	r3, r3, #2
 80123f2:	4413      	add	r3, r2
 80123f4:	00db      	lsls	r3, r3, #3
 80123f6:	440b      	add	r3, r1
 80123f8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80123fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80123fe:	4618      	mov	r0, r3
 8012400:	3714      	adds	r7, #20
 8012402:	46bd      	mov	sp, r7
 8012404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012408:	4770      	bx	lr

0801240a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801240a:	b580      	push	{r7, lr}
 801240c:	b084      	sub	sp, #16
 801240e:	af00      	add	r7, sp, #0
 8012410:	6078      	str	r0, [r7, #4]
 8012412:	460b      	mov	r3, r1
 8012414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012416:	2300      	movs	r3, #0
 8012418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801241a:	2300      	movs	r3, #0
 801241c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012424:	78fa      	ldrb	r2, [r7, #3]
 8012426:	4611      	mov	r1, r2
 8012428:	4618      	mov	r0, r3
 801242a:	f7f1 fe91 	bl	8004150 <HAL_PCD_SetAddress>
 801242e:	4603      	mov	r3, r0
 8012430:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012432:	7bfb      	ldrb	r3, [r7, #15]
 8012434:	4618      	mov	r0, r3
 8012436:	f000 f8b1 	bl	801259c <USBD_Get_USB_Status>
 801243a:	4603      	mov	r3, r0
 801243c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801243e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012440:	4618      	mov	r0, r3
 8012442:	3710      	adds	r7, #16
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b086      	sub	sp, #24
 801244c:	af00      	add	r7, sp, #0
 801244e:	60f8      	str	r0, [r7, #12]
 8012450:	607a      	str	r2, [r7, #4]
 8012452:	603b      	str	r3, [r7, #0]
 8012454:	460b      	mov	r3, r1
 8012456:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012458:	2300      	movs	r3, #0
 801245a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801245c:	2300      	movs	r3, #0
 801245e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012466:	7af9      	ldrb	r1, [r7, #11]
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	687a      	ldr	r2, [r7, #4]
 801246c:	f7f1 ff98 	bl	80043a0 <HAL_PCD_EP_Transmit>
 8012470:	4603      	mov	r3, r0
 8012472:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012474:	7dfb      	ldrb	r3, [r7, #23]
 8012476:	4618      	mov	r0, r3
 8012478:	f000 f890 	bl	801259c <USBD_Get_USB_Status>
 801247c:	4603      	mov	r3, r0
 801247e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012480:	7dbb      	ldrb	r3, [r7, #22]
}
 8012482:	4618      	mov	r0, r3
 8012484:	3718      	adds	r7, #24
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801248a:	b580      	push	{r7, lr}
 801248c:	b086      	sub	sp, #24
 801248e:	af00      	add	r7, sp, #0
 8012490:	60f8      	str	r0, [r7, #12]
 8012492:	607a      	str	r2, [r7, #4]
 8012494:	603b      	str	r3, [r7, #0]
 8012496:	460b      	mov	r3, r1
 8012498:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801249a:	2300      	movs	r3, #0
 801249c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801249e:	2300      	movs	r3, #0
 80124a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80124a8:	7af9      	ldrb	r1, [r7, #11]
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	f7f1 ff22 	bl	80042f6 <HAL_PCD_EP_Receive>
 80124b2:	4603      	mov	r3, r0
 80124b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124b6:	7dfb      	ldrb	r3, [r7, #23]
 80124b8:	4618      	mov	r0, r3
 80124ba:	f000 f86f 	bl	801259c <USBD_Get_USB_Status>
 80124be:	4603      	mov	r3, r0
 80124c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80124c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3718      	adds	r7, #24
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}

080124cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	460b      	mov	r3, r1
 80124d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80124de:	78fa      	ldrb	r2, [r7, #3]
 80124e0:	4611      	mov	r1, r2
 80124e2:	4618      	mov	r0, r3
 80124e4:	f7f1 ff44 	bl	8004370 <HAL_PCD_EP_GetRxCount>
 80124e8:	4603      	mov	r3, r0
}
 80124ea:	4618      	mov	r0, r3
 80124ec:	3708      	adds	r7, #8
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}
	...

080124f4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b082      	sub	sp, #8
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	460b      	mov	r3, r1
 80124fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8012500:	78fb      	ldrb	r3, [r7, #3]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d002      	beq.n	801250c <HAL_PCDEx_LPM_Callback+0x18>
 8012506:	2b01      	cmp	r3, #1
 8012508:	d013      	beq.n	8012532 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801250a:	e023      	b.n	8012554 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	699b      	ldr	r3, [r3, #24]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d007      	beq.n	8012524 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012514:	f000 f83c 	bl	8012590 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012518:	4b10      	ldr	r3, [pc, #64]	; (801255c <HAL_PCDEx_LPM_Callback+0x68>)
 801251a:	691b      	ldr	r3, [r3, #16]
 801251c:	4a0f      	ldr	r2, [pc, #60]	; (801255c <HAL_PCDEx_LPM_Callback+0x68>)
 801251e:	f023 0306 	bic.w	r3, r3, #6
 8012522:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801252a:	4618      	mov	r0, r3
 801252c:	f7fa f87a 	bl	800c624 <USBD_LL_Resume>
    break;
 8012530:	e010      	b.n	8012554 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012538:	4618      	mov	r0, r3
 801253a:	f7fa f85d 	bl	800c5f8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	699b      	ldr	r3, [r3, #24]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d005      	beq.n	8012552 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012546:	4b05      	ldr	r3, [pc, #20]	; (801255c <HAL_PCDEx_LPM_Callback+0x68>)
 8012548:	691b      	ldr	r3, [r3, #16]
 801254a:	4a04      	ldr	r2, [pc, #16]	; (801255c <HAL_PCDEx_LPM_Callback+0x68>)
 801254c:	f043 0306 	orr.w	r3, r3, #6
 8012550:	6113      	str	r3, [r2, #16]
    break;
 8012552:	bf00      	nop
}
 8012554:	bf00      	nop
 8012556:	3708      	adds	r7, #8
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}
 801255c:	e000ed00 	.word	0xe000ed00

08012560 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012560:	b480      	push	{r7}
 8012562:	b083      	sub	sp, #12
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012568:	4b03      	ldr	r3, [pc, #12]	; (8012578 <USBD_static_malloc+0x18>)
}
 801256a:	4618      	mov	r0, r3
 801256c:	370c      	adds	r7, #12
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr
 8012576:	bf00      	nop
 8012578:	20003a0c 	.word	0x20003a0c

0801257c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801257c:	b480      	push	{r7}
 801257e:	b083      	sub	sp, #12
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]

}
 8012584:	bf00      	nop
 8012586:	370c      	adds	r7, #12
 8012588:	46bd      	mov	sp, r7
 801258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258e:	4770      	bx	lr

08012590 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012594:	f7ee fc82 	bl	8000e9c <SystemClock_Config>
}
 8012598:	bf00      	nop
 801259a:	bd80      	pop	{r7, pc}

0801259c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801259c:	b480      	push	{r7}
 801259e:	b085      	sub	sp, #20
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	4603      	mov	r3, r0
 80125a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125a6:	2300      	movs	r3, #0
 80125a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80125aa:	79fb      	ldrb	r3, [r7, #7]
 80125ac:	2b03      	cmp	r3, #3
 80125ae:	d817      	bhi.n	80125e0 <USBD_Get_USB_Status+0x44>
 80125b0:	a201      	add	r2, pc, #4	; (adr r2, 80125b8 <USBD_Get_USB_Status+0x1c>)
 80125b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125b6:	bf00      	nop
 80125b8:	080125c9 	.word	0x080125c9
 80125bc:	080125cf 	.word	0x080125cf
 80125c0:	080125d5 	.word	0x080125d5
 80125c4:	080125db 	.word	0x080125db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80125c8:	2300      	movs	r3, #0
 80125ca:	73fb      	strb	r3, [r7, #15]
    break;
 80125cc:	e00b      	b.n	80125e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80125ce:	2303      	movs	r3, #3
 80125d0:	73fb      	strb	r3, [r7, #15]
    break;
 80125d2:	e008      	b.n	80125e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80125d4:	2301      	movs	r3, #1
 80125d6:	73fb      	strb	r3, [r7, #15]
    break;
 80125d8:	e005      	b.n	80125e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80125da:	2303      	movs	r3, #3
 80125dc:	73fb      	strb	r3, [r7, #15]
    break;
 80125de:	e002      	b.n	80125e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80125e0:	2303      	movs	r3, #3
 80125e2:	73fb      	strb	r3, [r7, #15]
    break;
 80125e4:	bf00      	nop
  }
  return usb_status;
 80125e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	3714      	adds	r7, #20
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr

080125f4 <powf>:
 80125f4:	b508      	push	{r3, lr}
 80125f6:	ed2d 8b04 	vpush	{d8-d9}
 80125fa:	eeb0 9a40 	vmov.f32	s18, s0
 80125fe:	eef0 8a60 	vmov.f32	s17, s1
 8012602:	f000 f88f 	bl	8012724 <__ieee754_powf>
 8012606:	4b43      	ldr	r3, [pc, #268]	; (8012714 <powf+0x120>)
 8012608:	f993 3000 	ldrsb.w	r3, [r3]
 801260c:	3301      	adds	r3, #1
 801260e:	eeb0 8a40 	vmov.f32	s16, s0
 8012612:	d012      	beq.n	801263a <powf+0x46>
 8012614:	eef4 8a68 	vcmp.f32	s17, s17
 8012618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801261c:	d60d      	bvs.n	801263a <powf+0x46>
 801261e:	eeb4 9a49 	vcmp.f32	s18, s18
 8012622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012626:	d70d      	bvc.n	8012644 <powf+0x50>
 8012628:	eef5 8a40 	vcmp.f32	s17, #0.0
 801262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012630:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012634:	bf08      	it	eq
 8012636:	eeb0 8a67 	vmoveq.f32	s16, s15
 801263a:	eeb0 0a48 	vmov.f32	s0, s16
 801263e:	ecbd 8b04 	vpop	{d8-d9}
 8012642:	bd08      	pop	{r3, pc}
 8012644:	eddf 9a34 	vldr	s19, [pc, #208]	; 8012718 <powf+0x124>
 8012648:	eeb4 9a69 	vcmp.f32	s18, s19
 801264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012650:	d116      	bne.n	8012680 <powf+0x8c>
 8012652:	eef4 8a69 	vcmp.f32	s17, s19
 8012656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801265a:	d057      	beq.n	801270c <powf+0x118>
 801265c:	eeb0 0a68 	vmov.f32	s0, s17
 8012660:	f000 fb2a 	bl	8012cb8 <finitef>
 8012664:	2800      	cmp	r0, #0
 8012666:	d0e8      	beq.n	801263a <powf+0x46>
 8012668:	eef4 8ae9 	vcmpe.f32	s17, s19
 801266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012670:	d5e3      	bpl.n	801263a <powf+0x46>
 8012672:	f000 fc03 	bl	8012e7c <__errno>
 8012676:	2321      	movs	r3, #33	; 0x21
 8012678:	6003      	str	r3, [r0, #0]
 801267a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801271c <powf+0x128>
 801267e:	e7dc      	b.n	801263a <powf+0x46>
 8012680:	f000 fb1a 	bl	8012cb8 <finitef>
 8012684:	bb50      	cbnz	r0, 80126dc <powf+0xe8>
 8012686:	eeb0 0a49 	vmov.f32	s0, s18
 801268a:	f000 fb15 	bl	8012cb8 <finitef>
 801268e:	b328      	cbz	r0, 80126dc <powf+0xe8>
 8012690:	eeb0 0a68 	vmov.f32	s0, s17
 8012694:	f000 fb10 	bl	8012cb8 <finitef>
 8012698:	b300      	cbz	r0, 80126dc <powf+0xe8>
 801269a:	eeb4 8a48 	vcmp.f32	s16, s16
 801269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126a2:	d706      	bvc.n	80126b2 <powf+0xbe>
 80126a4:	f000 fbea 	bl	8012e7c <__errno>
 80126a8:	2321      	movs	r3, #33	; 0x21
 80126aa:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 80126ae:	6003      	str	r3, [r0, #0]
 80126b0:	e7c3      	b.n	801263a <powf+0x46>
 80126b2:	f000 fbe3 	bl	8012e7c <__errno>
 80126b6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80126ba:	2322      	movs	r3, #34	; 0x22
 80126bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c0:	6003      	str	r3, [r0, #0]
 80126c2:	d508      	bpl.n	80126d6 <powf+0xe2>
 80126c4:	eeb0 0a68 	vmov.f32	s0, s17
 80126c8:	f000 fb0a 	bl	8012ce0 <rintf>
 80126cc:	eeb4 0a68 	vcmp.f32	s0, s17
 80126d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126d4:	d1d1      	bne.n	801267a <powf+0x86>
 80126d6:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8012720 <powf+0x12c>
 80126da:	e7ae      	b.n	801263a <powf+0x46>
 80126dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80126e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126e4:	d1a9      	bne.n	801263a <powf+0x46>
 80126e6:	eeb0 0a49 	vmov.f32	s0, s18
 80126ea:	f000 fae5 	bl	8012cb8 <finitef>
 80126ee:	2800      	cmp	r0, #0
 80126f0:	d0a3      	beq.n	801263a <powf+0x46>
 80126f2:	eeb0 0a68 	vmov.f32	s0, s17
 80126f6:	f000 fadf 	bl	8012cb8 <finitef>
 80126fa:	2800      	cmp	r0, #0
 80126fc:	d09d      	beq.n	801263a <powf+0x46>
 80126fe:	f000 fbbd 	bl	8012e7c <__errno>
 8012702:	2322      	movs	r3, #34	; 0x22
 8012704:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8012718 <powf+0x124>
 8012708:	6003      	str	r3, [r0, #0]
 801270a:	e796      	b.n	801263a <powf+0x46>
 801270c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012710:	e793      	b.n	801263a <powf+0x46>
 8012712:	bf00      	nop
 8012714:	20000196 	.word	0x20000196
 8012718:	00000000 	.word	0x00000000
 801271c:	ff800000 	.word	0xff800000
 8012720:	7f800000 	.word	0x7f800000

08012724 <__ieee754_powf>:
 8012724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012728:	ee10 5a90 	vmov	r5, s1
 801272c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8012730:	ed2d 8b02 	vpush	{d8}
 8012734:	eeb0 8a40 	vmov.f32	s16, s0
 8012738:	eef0 8a60 	vmov.f32	s17, s1
 801273c:	f000 8291 	beq.w	8012c62 <__ieee754_powf+0x53e>
 8012740:	ee10 8a10 	vmov	r8, s0
 8012744:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8012748:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801274c:	dc06      	bgt.n	801275c <__ieee754_powf+0x38>
 801274e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8012752:	dd0a      	ble.n	801276a <__ieee754_powf+0x46>
 8012754:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012758:	f000 8283 	beq.w	8012c62 <__ieee754_powf+0x53e>
 801275c:	ecbd 8b02 	vpop	{d8}
 8012760:	48d8      	ldr	r0, [pc, #864]	; (8012ac4 <__ieee754_powf+0x3a0>)
 8012762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012766:	f000 bab5 	b.w	8012cd4 <nanf>
 801276a:	f1b8 0f00 	cmp.w	r8, #0
 801276e:	da1f      	bge.n	80127b0 <__ieee754_powf+0x8c>
 8012770:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8012774:	da2e      	bge.n	80127d4 <__ieee754_powf+0xb0>
 8012776:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801277a:	f2c0 827b 	blt.w	8012c74 <__ieee754_powf+0x550>
 801277e:	15fb      	asrs	r3, r7, #23
 8012780:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012784:	fa47 f603 	asr.w	r6, r7, r3
 8012788:	fa06 f303 	lsl.w	r3, r6, r3
 801278c:	42bb      	cmp	r3, r7
 801278e:	f040 8271 	bne.w	8012c74 <__ieee754_powf+0x550>
 8012792:	f006 0601 	and.w	r6, r6, #1
 8012796:	f1c6 0602 	rsb	r6, r6, #2
 801279a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801279e:	d120      	bne.n	80127e2 <__ieee754_powf+0xbe>
 80127a0:	2d00      	cmp	r5, #0
 80127a2:	f280 8264 	bge.w	8012c6e <__ieee754_powf+0x54a>
 80127a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80127aa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80127ae:	e00d      	b.n	80127cc <__ieee754_powf+0xa8>
 80127b0:	2600      	movs	r6, #0
 80127b2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80127b6:	d1f0      	bne.n	801279a <__ieee754_powf+0x76>
 80127b8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80127bc:	f000 8251 	beq.w	8012c62 <__ieee754_powf+0x53e>
 80127c0:	dd0a      	ble.n	80127d8 <__ieee754_powf+0xb4>
 80127c2:	2d00      	cmp	r5, #0
 80127c4:	f280 8250 	bge.w	8012c68 <__ieee754_powf+0x544>
 80127c8:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8012ac8 <__ieee754_powf+0x3a4>
 80127cc:	ecbd 8b02 	vpop	{d8}
 80127d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127d4:	2602      	movs	r6, #2
 80127d6:	e7ec      	b.n	80127b2 <__ieee754_powf+0x8e>
 80127d8:	2d00      	cmp	r5, #0
 80127da:	daf5      	bge.n	80127c8 <__ieee754_powf+0xa4>
 80127dc:	eeb1 0a68 	vneg.f32	s0, s17
 80127e0:	e7f4      	b.n	80127cc <__ieee754_powf+0xa8>
 80127e2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80127e6:	d102      	bne.n	80127ee <__ieee754_powf+0xca>
 80127e8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80127ec:	e7ee      	b.n	80127cc <__ieee754_powf+0xa8>
 80127ee:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80127f2:	eeb0 0a48 	vmov.f32	s0, s16
 80127f6:	d108      	bne.n	801280a <__ieee754_powf+0xe6>
 80127f8:	f1b8 0f00 	cmp.w	r8, #0
 80127fc:	db05      	blt.n	801280a <__ieee754_powf+0xe6>
 80127fe:	ecbd 8b02 	vpop	{d8}
 8012802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012806:	f000 ba4d 	b.w	8012ca4 <__ieee754_sqrtf>
 801280a:	f000 fa4e 	bl	8012caa <fabsf>
 801280e:	b124      	cbz	r4, 801281a <__ieee754_powf+0xf6>
 8012810:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8012814:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012818:	d117      	bne.n	801284a <__ieee754_powf+0x126>
 801281a:	2d00      	cmp	r5, #0
 801281c:	bfbc      	itt	lt
 801281e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8012822:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8012826:	f1b8 0f00 	cmp.w	r8, #0
 801282a:	dacf      	bge.n	80127cc <__ieee754_powf+0xa8>
 801282c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8012830:	ea54 0306 	orrs.w	r3, r4, r6
 8012834:	d104      	bne.n	8012840 <__ieee754_powf+0x11c>
 8012836:	ee70 7a40 	vsub.f32	s15, s0, s0
 801283a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801283e:	e7c5      	b.n	80127cc <__ieee754_powf+0xa8>
 8012840:	2e01      	cmp	r6, #1
 8012842:	d1c3      	bne.n	80127cc <__ieee754_powf+0xa8>
 8012844:	eeb1 0a40 	vneg.f32	s0, s0
 8012848:	e7c0      	b.n	80127cc <__ieee754_powf+0xa8>
 801284a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801284e:	3801      	subs	r0, #1
 8012850:	ea56 0300 	orrs.w	r3, r6, r0
 8012854:	d104      	bne.n	8012860 <__ieee754_powf+0x13c>
 8012856:	ee38 8a48 	vsub.f32	s16, s16, s16
 801285a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801285e:	e7b5      	b.n	80127cc <__ieee754_powf+0xa8>
 8012860:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8012864:	dd6b      	ble.n	801293e <__ieee754_powf+0x21a>
 8012866:	4b99      	ldr	r3, [pc, #612]	; (8012acc <__ieee754_powf+0x3a8>)
 8012868:	429c      	cmp	r4, r3
 801286a:	dc06      	bgt.n	801287a <__ieee754_powf+0x156>
 801286c:	2d00      	cmp	r5, #0
 801286e:	daab      	bge.n	80127c8 <__ieee754_powf+0xa4>
 8012870:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8012ad0 <__ieee754_powf+0x3ac>
 8012874:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012878:	e7a8      	b.n	80127cc <__ieee754_powf+0xa8>
 801287a:	4b96      	ldr	r3, [pc, #600]	; (8012ad4 <__ieee754_powf+0x3b0>)
 801287c:	429c      	cmp	r4, r3
 801287e:	dd02      	ble.n	8012886 <__ieee754_powf+0x162>
 8012880:	2d00      	cmp	r5, #0
 8012882:	dcf5      	bgt.n	8012870 <__ieee754_powf+0x14c>
 8012884:	e7a0      	b.n	80127c8 <__ieee754_powf+0xa4>
 8012886:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801288a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801288e:	eddf 6a92 	vldr	s13, [pc, #584]	; 8012ad8 <__ieee754_powf+0x3b4>
 8012892:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8012896:	eee0 6a67 	vfms.f32	s13, s0, s15
 801289a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801289e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80128a2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80128a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80128aa:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8012adc <__ieee754_powf+0x3b8>
 80128ae:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80128b2:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8012ae0 <__ieee754_powf+0x3bc>
 80128b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80128ba:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8012ae4 <__ieee754_powf+0x3c0>
 80128be:	eef0 6a67 	vmov.f32	s13, s15
 80128c2:	eee0 6a07 	vfma.f32	s13, s0, s14
 80128c6:	ee16 3a90 	vmov	r3, s13
 80128ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80128ce:	f023 030f 	bic.w	r3, r3, #15
 80128d2:	ee00 3a90 	vmov	s1, r3
 80128d6:	eee0 0a47 	vfms.f32	s1, s0, s14
 80128da:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80128de:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80128e2:	f025 050f 	bic.w	r5, r5, #15
 80128e6:	ee07 5a10 	vmov	s14, r5
 80128ea:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80128ee:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80128f2:	ee07 3a90 	vmov	s15, r3
 80128f6:	eee7 0a27 	vfma.f32	s1, s14, s15
 80128fa:	3e01      	subs	r6, #1
 80128fc:	ea56 0200 	orrs.w	r2, r6, r0
 8012900:	ee07 5a10 	vmov	s14, r5
 8012904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012908:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801290c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8012910:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012914:	ee17 4a10 	vmov	r4, s14
 8012918:	bf08      	it	eq
 801291a:	eeb0 8a40 	vmoveq.f32	s16, s0
 801291e:	2c00      	cmp	r4, #0
 8012920:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012924:	f340 8184 	ble.w	8012c30 <__ieee754_powf+0x50c>
 8012928:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801292c:	f340 80fc 	ble.w	8012b28 <__ieee754_powf+0x404>
 8012930:	eddf 7a67 	vldr	s15, [pc, #412]	; 8012ad0 <__ieee754_powf+0x3ac>
 8012934:	ee28 0a27 	vmul.f32	s0, s16, s15
 8012938:	ee20 0a27 	vmul.f32	s0, s0, s15
 801293c:	e746      	b.n	80127cc <__ieee754_powf+0xa8>
 801293e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8012942:	bf01      	itttt	eq
 8012944:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8012ae8 <__ieee754_powf+0x3c4>
 8012948:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801294c:	f06f 0217 	mvneq.w	r2, #23
 8012950:	ee17 4a90 	vmoveq	r4, s15
 8012954:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8012958:	bf18      	it	ne
 801295a:	2200      	movne	r2, #0
 801295c:	3b7f      	subs	r3, #127	; 0x7f
 801295e:	4413      	add	r3, r2
 8012960:	4a62      	ldr	r2, [pc, #392]	; (8012aec <__ieee754_powf+0x3c8>)
 8012962:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8012966:	4294      	cmp	r4, r2
 8012968:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801296c:	dd06      	ble.n	801297c <__ieee754_powf+0x258>
 801296e:	4a60      	ldr	r2, [pc, #384]	; (8012af0 <__ieee754_powf+0x3cc>)
 8012970:	4294      	cmp	r4, r2
 8012972:	f340 80a4 	ble.w	8012abe <__ieee754_powf+0x39a>
 8012976:	3301      	adds	r3, #1
 8012978:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801297c:	2400      	movs	r4, #0
 801297e:	4a5d      	ldr	r2, [pc, #372]	; (8012af4 <__ieee754_powf+0x3d0>)
 8012980:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8012984:	ee07 1a90 	vmov	s15, r1
 8012988:	ed92 7a00 	vldr	s14, [r2]
 801298c:	4a5a      	ldr	r2, [pc, #360]	; (8012af8 <__ieee754_powf+0x3d4>)
 801298e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8012992:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012996:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801299a:	1049      	asrs	r1, r1, #1
 801299c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80129a0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80129a4:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80129a8:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80129ac:	ee06 1a10 	vmov	s12, r1
 80129b0:	ee65 4a26 	vmul.f32	s9, s10, s13
 80129b4:	ee36 7a47 	vsub.f32	s14, s12, s14
 80129b8:	ee14 7a90 	vmov	r7, s9
 80129bc:	4017      	ands	r7, r2
 80129be:	ee05 7a90 	vmov	s11, r7
 80129c2:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80129c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129ca:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8012afc <__ieee754_powf+0x3d8>
 80129ce:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80129d2:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80129d6:	ee25 6a26 	vmul.f32	s12, s10, s13
 80129da:	eddf 6a49 	vldr	s13, [pc, #292]	; 8012b00 <__ieee754_powf+0x3dc>
 80129de:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80129e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8012b04 <__ieee754_powf+0x3e0>
 80129e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80129ea:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8012ad8 <__ieee754_powf+0x3b4>
 80129ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80129f2:	eddf 6a45 	vldr	s13, [pc, #276]	; 8012b08 <__ieee754_powf+0x3e4>
 80129f6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80129fa:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8012b0c <__ieee754_powf+0x3e8>
 80129fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a02:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8012a06:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8012a0a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012a0e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8012a12:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8012a16:	eef0 7a45 	vmov.f32	s15, s10
 8012a1a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8012a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a22:	ee17 1a90 	vmov	r1, s15
 8012a26:	4011      	ands	r1, r2
 8012a28:	ee07 1a90 	vmov	s15, r1
 8012a2c:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8012a30:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8012a34:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012a38:	ee27 7a24 	vmul.f32	s14, s14, s9
 8012a3c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012a40:	eeb0 6a47 	vmov.f32	s12, s14
 8012a44:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8012a48:	ee16 1a10 	vmov	r1, s12
 8012a4c:	4011      	ands	r1, r2
 8012a4e:	ee06 1a90 	vmov	s13, r1
 8012a52:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8012a56:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8012b10 <__ieee754_powf+0x3ec>
 8012a5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8012b14 <__ieee754_powf+0x3f0>
 8012a5e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012a62:	ee06 1a10 	vmov	s12, r1
 8012a66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012a6a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012b18 <__ieee754_powf+0x3f4>
 8012a6e:	492b      	ldr	r1, [pc, #172]	; (8012b1c <__ieee754_powf+0x3f8>)
 8012a70:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012a74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012a78:	edd1 7a00 	vldr	s15, [r1]
 8012a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012a80:	ee07 3a90 	vmov	s15, r3
 8012a84:	4b26      	ldr	r3, [pc, #152]	; (8012b20 <__ieee754_powf+0x3fc>)
 8012a86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012a8a:	eef0 7a47 	vmov.f32	s15, s14
 8012a8e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012a92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012a96:	edd4 0a00 	vldr	s1, [r4]
 8012a9a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012aa2:	ee17 3a90 	vmov	r3, s15
 8012aa6:	4013      	ands	r3, r2
 8012aa8:	ee07 3a90 	vmov	s15, r3
 8012aac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8012ab0:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8012ab4:	eee6 6a65 	vfms.f32	s13, s12, s11
 8012ab8:	ee77 7a66 	vsub.f32	s15, s14, s13
 8012abc:	e70f      	b.n	80128de <__ieee754_powf+0x1ba>
 8012abe:	2401      	movs	r4, #1
 8012ac0:	e75d      	b.n	801297e <__ieee754_powf+0x25a>
 8012ac2:	bf00      	nop
 8012ac4:	0801335c 	.word	0x0801335c
 8012ac8:	00000000 	.word	0x00000000
 8012acc:	3f7ffff7 	.word	0x3f7ffff7
 8012ad0:	7149f2ca 	.word	0x7149f2ca
 8012ad4:	3f800007 	.word	0x3f800007
 8012ad8:	3eaaaaab 	.word	0x3eaaaaab
 8012adc:	3fb8aa3b 	.word	0x3fb8aa3b
 8012ae0:	36eca570 	.word	0x36eca570
 8012ae4:	3fb8aa00 	.word	0x3fb8aa00
 8012ae8:	4b800000 	.word	0x4b800000
 8012aec:	001cc471 	.word	0x001cc471
 8012af0:	005db3d6 	.word	0x005db3d6
 8012af4:	08013360 	.word	0x08013360
 8012af8:	fffff000 	.word	0xfffff000
 8012afc:	3e6c3255 	.word	0x3e6c3255
 8012b00:	3e53f142 	.word	0x3e53f142
 8012b04:	3e8ba305 	.word	0x3e8ba305
 8012b08:	3edb6db7 	.word	0x3edb6db7
 8012b0c:	3f19999a 	.word	0x3f19999a
 8012b10:	3f76384f 	.word	0x3f76384f
 8012b14:	3f763800 	.word	0x3f763800
 8012b18:	369dc3a0 	.word	0x369dc3a0
 8012b1c:	08013370 	.word	0x08013370
 8012b20:	08013368 	.word	0x08013368
 8012b24:	3338aa3c 	.word	0x3338aa3c
 8012b28:	f040 8092 	bne.w	8012c50 <__ieee754_powf+0x52c>
 8012b2c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8012b24 <__ieee754_powf+0x400>
 8012b30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012b34:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8012b38:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b40:	f73f aef6 	bgt.w	8012930 <__ieee754_powf+0x20c>
 8012b44:	15db      	asrs	r3, r3, #23
 8012b46:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8012b4a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012b4e:	4103      	asrs	r3, r0
 8012b50:	4423      	add	r3, r4
 8012b52:	4949      	ldr	r1, [pc, #292]	; (8012c78 <__ieee754_powf+0x554>)
 8012b54:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012b58:	3a7f      	subs	r2, #127	; 0x7f
 8012b5a:	4111      	asrs	r1, r2
 8012b5c:	ea23 0101 	bic.w	r1, r3, r1
 8012b60:	ee07 1a10 	vmov	s14, r1
 8012b64:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8012b68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012b6c:	f1c2 0217 	rsb	r2, r2, #23
 8012b70:	4110      	asrs	r0, r2
 8012b72:	2c00      	cmp	r4, #0
 8012b74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b78:	bfb8      	it	lt
 8012b7a:	4240      	neglt	r0, r0
 8012b7c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8012b80:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8012c7c <__ieee754_powf+0x558>
 8012b84:	ee17 3a10 	vmov	r3, s14
 8012b88:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012b8c:	f023 030f 	bic.w	r3, r3, #15
 8012b90:	ee07 3a10 	vmov	s14, r3
 8012b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b98:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8012b9c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8012c80 <__ieee754_powf+0x55c>
 8012ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ba4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8012ba8:	eddf 6a36 	vldr	s13, [pc, #216]	; 8012c84 <__ieee754_powf+0x560>
 8012bac:	eeb0 0a67 	vmov.f32	s0, s15
 8012bb0:	eea7 0a26 	vfma.f32	s0, s14, s13
 8012bb4:	eeb0 6a40 	vmov.f32	s12, s0
 8012bb8:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012bbc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012bc0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012bc4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8012c88 <__ieee754_powf+0x564>
 8012bc8:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8012c8c <__ieee754_powf+0x568>
 8012bcc:	eea7 6a26 	vfma.f32	s12, s14, s13
 8012bd0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8012c90 <__ieee754_powf+0x56c>
 8012bd4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012bd8:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8012c94 <__ieee754_powf+0x570>
 8012bdc:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012be0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8012c98 <__ieee754_powf+0x574>
 8012be4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012be8:	eeb0 6a40 	vmov.f32	s12, s0
 8012bec:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8012bf0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012bf4:	eeb0 7a46 	vmov.f32	s14, s12
 8012bf8:	ee77 6a66 	vsub.f32	s13, s14, s13
 8012bfc:	ee20 6a06 	vmul.f32	s12, s0, s12
 8012c00:	eee0 7a27 	vfma.f32	s15, s0, s15
 8012c04:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8012c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c0c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012c10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012c14:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012c18:	ee10 3a10 	vmov	r3, s0
 8012c1c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8012c20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012c24:	da1a      	bge.n	8012c5c <__ieee754_powf+0x538>
 8012c26:	f000 f8b7 	bl	8012d98 <scalbnf>
 8012c2a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012c2e:	e5cd      	b.n	80127cc <__ieee754_powf+0xa8>
 8012c30:	4a1a      	ldr	r2, [pc, #104]	; (8012c9c <__ieee754_powf+0x578>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	dd02      	ble.n	8012c3c <__ieee754_powf+0x518>
 8012c36:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8012ca0 <__ieee754_powf+0x57c>
 8012c3a:	e67b      	b.n	8012934 <__ieee754_powf+0x210>
 8012c3c:	d108      	bne.n	8012c50 <__ieee754_powf+0x52c>
 8012c3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c42:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8012c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c4a:	f6ff af7b 	blt.w	8012b44 <__ieee754_powf+0x420>
 8012c4e:	e7f2      	b.n	8012c36 <__ieee754_powf+0x512>
 8012c50:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8012c54:	f73f af76 	bgt.w	8012b44 <__ieee754_powf+0x420>
 8012c58:	2000      	movs	r0, #0
 8012c5a:	e78f      	b.n	8012b7c <__ieee754_powf+0x458>
 8012c5c:	ee00 3a10 	vmov	s0, r3
 8012c60:	e7e3      	b.n	8012c2a <__ieee754_powf+0x506>
 8012c62:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012c66:	e5b1      	b.n	80127cc <__ieee754_powf+0xa8>
 8012c68:	eeb0 0a68 	vmov.f32	s0, s17
 8012c6c:	e5ae      	b.n	80127cc <__ieee754_powf+0xa8>
 8012c6e:	eeb0 0a48 	vmov.f32	s0, s16
 8012c72:	e5ab      	b.n	80127cc <__ieee754_powf+0xa8>
 8012c74:	2600      	movs	r6, #0
 8012c76:	e590      	b.n	801279a <__ieee754_powf+0x76>
 8012c78:	007fffff 	.word	0x007fffff
 8012c7c:	3f317218 	.word	0x3f317218
 8012c80:	35bfbe8c 	.word	0x35bfbe8c
 8012c84:	3f317200 	.word	0x3f317200
 8012c88:	3331bb4c 	.word	0x3331bb4c
 8012c8c:	b5ddea0e 	.word	0xb5ddea0e
 8012c90:	388ab355 	.word	0x388ab355
 8012c94:	bb360b61 	.word	0xbb360b61
 8012c98:	3e2aaaab 	.word	0x3e2aaaab
 8012c9c:	43160000 	.word	0x43160000
 8012ca0:	0da24260 	.word	0x0da24260

08012ca4 <__ieee754_sqrtf>:
 8012ca4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012ca8:	4770      	bx	lr

08012caa <fabsf>:
 8012caa:	ee10 3a10 	vmov	r3, s0
 8012cae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012cb2:	ee00 3a10 	vmov	s0, r3
 8012cb6:	4770      	bx	lr

08012cb8 <finitef>:
 8012cb8:	b082      	sub	sp, #8
 8012cba:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012cbe:	9801      	ldr	r0, [sp, #4]
 8012cc0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012cc4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8012cc8:	bfac      	ite	ge
 8012cca:	2000      	movge	r0, #0
 8012ccc:	2001      	movlt	r0, #1
 8012cce:	b002      	add	sp, #8
 8012cd0:	4770      	bx	lr
	...

08012cd4 <nanf>:
 8012cd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012cdc <nanf+0x8>
 8012cd8:	4770      	bx	lr
 8012cda:	bf00      	nop
 8012cdc:	7fc00000 	.word	0x7fc00000

08012ce0 <rintf>:
 8012ce0:	ee10 2a10 	vmov	r2, s0
 8012ce4:	b513      	push	{r0, r1, r4, lr}
 8012ce6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8012cea:	397f      	subs	r1, #127	; 0x7f
 8012cec:	2916      	cmp	r1, #22
 8012cee:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8012cf2:	dc47      	bgt.n	8012d84 <rintf+0xa4>
 8012cf4:	b32b      	cbz	r3, 8012d42 <rintf+0x62>
 8012cf6:	2900      	cmp	r1, #0
 8012cf8:	ee10 3a10 	vmov	r3, s0
 8012cfc:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8012d00:	da21      	bge.n	8012d46 <rintf+0x66>
 8012d02:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8012d06:	425b      	negs	r3, r3
 8012d08:	4921      	ldr	r1, [pc, #132]	; (8012d90 <rintf+0xb0>)
 8012d0a:	0a5b      	lsrs	r3, r3, #9
 8012d0c:	0d12      	lsrs	r2, r2, #20
 8012d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012d12:	0512      	lsls	r2, r2, #20
 8012d14:	4313      	orrs	r3, r2
 8012d16:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8012d1a:	ee07 3a90 	vmov	s15, r3
 8012d1e:	edd1 6a00 	vldr	s13, [r1]
 8012d22:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8012d26:	ed8d 7a01 	vstr	s14, [sp, #4]
 8012d2a:	eddd 7a01 	vldr	s15, [sp, #4]
 8012d2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012d32:	ee17 3a90 	vmov	r3, s15
 8012d36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d3a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8012d3e:	ee00 3a10 	vmov	s0, r3
 8012d42:	b002      	add	sp, #8
 8012d44:	bd10      	pop	{r4, pc}
 8012d46:	4a13      	ldr	r2, [pc, #76]	; (8012d94 <rintf+0xb4>)
 8012d48:	410a      	asrs	r2, r1
 8012d4a:	4213      	tst	r3, r2
 8012d4c:	d0f9      	beq.n	8012d42 <rintf+0x62>
 8012d4e:	0854      	lsrs	r4, r2, #1
 8012d50:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8012d54:	d006      	beq.n	8012d64 <rintf+0x84>
 8012d56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012d5a:	ea23 0304 	bic.w	r3, r3, r4
 8012d5e:	fa42 f101 	asr.w	r1, r2, r1
 8012d62:	430b      	orrs	r3, r1
 8012d64:	4a0a      	ldr	r2, [pc, #40]	; (8012d90 <rintf+0xb0>)
 8012d66:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8012d6a:	ed90 7a00 	vldr	s14, [r0]
 8012d6e:	ee07 3a90 	vmov	s15, r3
 8012d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d76:	edcd 7a01 	vstr	s15, [sp, #4]
 8012d7a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8012d7e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012d82:	e7de      	b.n	8012d42 <rintf+0x62>
 8012d84:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012d88:	d3db      	bcc.n	8012d42 <rintf+0x62>
 8012d8a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012d8e:	e7d8      	b.n	8012d42 <rintf+0x62>
 8012d90:	08013378 	.word	0x08013378
 8012d94:	007fffff 	.word	0x007fffff

08012d98 <scalbnf>:
 8012d98:	ee10 3a10 	vmov	r3, s0
 8012d9c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012da0:	d025      	beq.n	8012dee <scalbnf+0x56>
 8012da2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012da6:	d302      	bcc.n	8012dae <scalbnf+0x16>
 8012da8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012dac:	4770      	bx	lr
 8012dae:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8012db2:	d122      	bne.n	8012dfa <scalbnf+0x62>
 8012db4:	4b2a      	ldr	r3, [pc, #168]	; (8012e60 <scalbnf+0xc8>)
 8012db6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012e64 <scalbnf+0xcc>
 8012dba:	4298      	cmp	r0, r3
 8012dbc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012dc0:	db16      	blt.n	8012df0 <scalbnf+0x58>
 8012dc2:	ee10 3a10 	vmov	r3, s0
 8012dc6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012dca:	3a19      	subs	r2, #25
 8012dcc:	4402      	add	r2, r0
 8012dce:	2afe      	cmp	r2, #254	; 0xfe
 8012dd0:	dd15      	ble.n	8012dfe <scalbnf+0x66>
 8012dd2:	ee10 3a10 	vmov	r3, s0
 8012dd6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8012e68 <scalbnf+0xd0>
 8012dda:	eddf 6a24 	vldr	s13, [pc, #144]	; 8012e6c <scalbnf+0xd4>
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	eeb0 7a67 	vmov.f32	s14, s15
 8012de4:	bfb8      	it	lt
 8012de6:	eef0 7a66 	vmovlt.f32	s15, s13
 8012dea:	ee27 0a27 	vmul.f32	s0, s14, s15
 8012dee:	4770      	bx	lr
 8012df0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012e70 <scalbnf+0xd8>
 8012df4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012df8:	4770      	bx	lr
 8012dfa:	0dd2      	lsrs	r2, r2, #23
 8012dfc:	e7e6      	b.n	8012dcc <scalbnf+0x34>
 8012dfe:	2a00      	cmp	r2, #0
 8012e00:	dd06      	ble.n	8012e10 <scalbnf+0x78>
 8012e02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012e06:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012e0a:	ee00 3a10 	vmov	s0, r3
 8012e0e:	4770      	bx	lr
 8012e10:	f112 0f16 	cmn.w	r2, #22
 8012e14:	da1a      	bge.n	8012e4c <scalbnf+0xb4>
 8012e16:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012e1a:	4298      	cmp	r0, r3
 8012e1c:	ee10 3a10 	vmov	r3, s0
 8012e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e24:	dd0a      	ble.n	8012e3c <scalbnf+0xa4>
 8012e26:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8012e68 <scalbnf+0xd0>
 8012e2a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012e6c <scalbnf+0xd4>
 8012e2e:	eef0 7a40 	vmov.f32	s15, s0
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	bf18      	it	ne
 8012e36:	eeb0 0a47 	vmovne.f32	s0, s14
 8012e3a:	e7db      	b.n	8012df4 <scalbnf+0x5c>
 8012e3c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012e70 <scalbnf+0xd8>
 8012e40:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8012e74 <scalbnf+0xdc>
 8012e44:	eef0 7a40 	vmov.f32	s15, s0
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	e7f3      	b.n	8012e34 <scalbnf+0x9c>
 8012e4c:	3219      	adds	r2, #25
 8012e4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012e52:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012e56:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012e78 <scalbnf+0xe0>
 8012e5a:	ee07 3a10 	vmov	s14, r3
 8012e5e:	e7c4      	b.n	8012dea <scalbnf+0x52>
 8012e60:	ffff3cb0 	.word	0xffff3cb0
 8012e64:	4c000000 	.word	0x4c000000
 8012e68:	7149f2ca 	.word	0x7149f2ca
 8012e6c:	f149f2ca 	.word	0xf149f2ca
 8012e70:	0da24260 	.word	0x0da24260
 8012e74:	8da24260 	.word	0x8da24260
 8012e78:	33000000 	.word	0x33000000

08012e7c <__errno>:
 8012e7c:	4b01      	ldr	r3, [pc, #4]	; (8012e84 <__errno+0x8>)
 8012e7e:	6818      	ldr	r0, [r3, #0]
 8012e80:	4770      	bx	lr
 8012e82:	bf00      	nop
 8012e84:	20000198 	.word	0x20000198

08012e88 <__libc_init_array>:
 8012e88:	b570      	push	{r4, r5, r6, lr}
 8012e8a:	4d0d      	ldr	r5, [pc, #52]	; (8012ec0 <__libc_init_array+0x38>)
 8012e8c:	4c0d      	ldr	r4, [pc, #52]	; (8012ec4 <__libc_init_array+0x3c>)
 8012e8e:	1b64      	subs	r4, r4, r5
 8012e90:	10a4      	asrs	r4, r4, #2
 8012e92:	2600      	movs	r6, #0
 8012e94:	42a6      	cmp	r6, r4
 8012e96:	d109      	bne.n	8012eac <__libc_init_array+0x24>
 8012e98:	4d0b      	ldr	r5, [pc, #44]	; (8012ec8 <__libc_init_array+0x40>)
 8012e9a:	4c0c      	ldr	r4, [pc, #48]	; (8012ecc <__libc_init_array+0x44>)
 8012e9c:	f000 f8f6 	bl	801308c <_init>
 8012ea0:	1b64      	subs	r4, r4, r5
 8012ea2:	10a4      	asrs	r4, r4, #2
 8012ea4:	2600      	movs	r6, #0
 8012ea6:	42a6      	cmp	r6, r4
 8012ea8:	d105      	bne.n	8012eb6 <__libc_init_array+0x2e>
 8012eaa:	bd70      	pop	{r4, r5, r6, pc}
 8012eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8012eb0:	4798      	blx	r3
 8012eb2:	3601      	adds	r6, #1
 8012eb4:	e7ee      	b.n	8012e94 <__libc_init_array+0xc>
 8012eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012eba:	4798      	blx	r3
 8012ebc:	3601      	adds	r6, #1
 8012ebe:	e7f2      	b.n	8012ea6 <__libc_init_array+0x1e>
 8012ec0:	080133e0 	.word	0x080133e0
 8012ec4:	080133e0 	.word	0x080133e0
 8012ec8:	080133e0 	.word	0x080133e0
 8012ecc:	080133ec 	.word	0x080133ec

08012ed0 <__retarget_lock_acquire_recursive>:
 8012ed0:	4770      	bx	lr

08012ed2 <__retarget_lock_release_recursive>:
 8012ed2:	4770      	bx	lr

08012ed4 <memcpy>:
 8012ed4:	440a      	add	r2, r1
 8012ed6:	4291      	cmp	r1, r2
 8012ed8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012edc:	d100      	bne.n	8012ee0 <memcpy+0xc>
 8012ede:	4770      	bx	lr
 8012ee0:	b510      	push	{r4, lr}
 8012ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012eea:	4291      	cmp	r1, r2
 8012eec:	d1f9      	bne.n	8012ee2 <memcpy+0xe>
 8012eee:	bd10      	pop	{r4, pc}

08012ef0 <memset>:
 8012ef0:	4402      	add	r2, r0
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	4293      	cmp	r3, r2
 8012ef6:	d100      	bne.n	8012efa <memset+0xa>
 8012ef8:	4770      	bx	lr
 8012efa:	f803 1b01 	strb.w	r1, [r3], #1
 8012efe:	e7f9      	b.n	8012ef4 <memset+0x4>

08012f00 <cleanup_glue>:
 8012f00:	b538      	push	{r3, r4, r5, lr}
 8012f02:	460c      	mov	r4, r1
 8012f04:	6809      	ldr	r1, [r1, #0]
 8012f06:	4605      	mov	r5, r0
 8012f08:	b109      	cbz	r1, 8012f0e <cleanup_glue+0xe>
 8012f0a:	f7ff fff9 	bl	8012f00 <cleanup_glue>
 8012f0e:	4621      	mov	r1, r4
 8012f10:	4628      	mov	r0, r5
 8012f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f16:	f000 b869 	b.w	8012fec <_free_r>
	...

08012f1c <_reclaim_reent>:
 8012f1c:	4b2c      	ldr	r3, [pc, #176]	; (8012fd0 <_reclaim_reent+0xb4>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	4283      	cmp	r3, r0
 8012f22:	b570      	push	{r4, r5, r6, lr}
 8012f24:	4604      	mov	r4, r0
 8012f26:	d051      	beq.n	8012fcc <_reclaim_reent+0xb0>
 8012f28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012f2a:	b143      	cbz	r3, 8012f3e <_reclaim_reent+0x22>
 8012f2c:	68db      	ldr	r3, [r3, #12]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d14a      	bne.n	8012fc8 <_reclaim_reent+0xac>
 8012f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f34:	6819      	ldr	r1, [r3, #0]
 8012f36:	b111      	cbz	r1, 8012f3e <_reclaim_reent+0x22>
 8012f38:	4620      	mov	r0, r4
 8012f3a:	f000 f857 	bl	8012fec <_free_r>
 8012f3e:	6961      	ldr	r1, [r4, #20]
 8012f40:	b111      	cbz	r1, 8012f48 <_reclaim_reent+0x2c>
 8012f42:	4620      	mov	r0, r4
 8012f44:	f000 f852 	bl	8012fec <_free_r>
 8012f48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012f4a:	b111      	cbz	r1, 8012f52 <_reclaim_reent+0x36>
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	f000 f84d 	bl	8012fec <_free_r>
 8012f52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012f54:	b111      	cbz	r1, 8012f5c <_reclaim_reent+0x40>
 8012f56:	4620      	mov	r0, r4
 8012f58:	f000 f848 	bl	8012fec <_free_r>
 8012f5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012f5e:	b111      	cbz	r1, 8012f66 <_reclaim_reent+0x4a>
 8012f60:	4620      	mov	r0, r4
 8012f62:	f000 f843 	bl	8012fec <_free_r>
 8012f66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012f68:	b111      	cbz	r1, 8012f70 <_reclaim_reent+0x54>
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	f000 f83e 	bl	8012fec <_free_r>
 8012f70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012f72:	b111      	cbz	r1, 8012f7a <_reclaim_reent+0x5e>
 8012f74:	4620      	mov	r0, r4
 8012f76:	f000 f839 	bl	8012fec <_free_r>
 8012f7a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012f7c:	b111      	cbz	r1, 8012f84 <_reclaim_reent+0x68>
 8012f7e:	4620      	mov	r0, r4
 8012f80:	f000 f834 	bl	8012fec <_free_r>
 8012f84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f86:	b111      	cbz	r1, 8012f8e <_reclaim_reent+0x72>
 8012f88:	4620      	mov	r0, r4
 8012f8a:	f000 f82f 	bl	8012fec <_free_r>
 8012f8e:	69a3      	ldr	r3, [r4, #24]
 8012f90:	b1e3      	cbz	r3, 8012fcc <_reclaim_reent+0xb0>
 8012f92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012f94:	4620      	mov	r0, r4
 8012f96:	4798      	blx	r3
 8012f98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012f9a:	b1b9      	cbz	r1, 8012fcc <_reclaim_reent+0xb0>
 8012f9c:	4620      	mov	r0, r4
 8012f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012fa2:	f7ff bfad 	b.w	8012f00 <cleanup_glue>
 8012fa6:	5949      	ldr	r1, [r1, r5]
 8012fa8:	b941      	cbnz	r1, 8012fbc <_reclaim_reent+0xa0>
 8012faa:	3504      	adds	r5, #4
 8012fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012fae:	2d80      	cmp	r5, #128	; 0x80
 8012fb0:	68d9      	ldr	r1, [r3, #12]
 8012fb2:	d1f8      	bne.n	8012fa6 <_reclaim_reent+0x8a>
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	f000 f819 	bl	8012fec <_free_r>
 8012fba:	e7ba      	b.n	8012f32 <_reclaim_reent+0x16>
 8012fbc:	680e      	ldr	r6, [r1, #0]
 8012fbe:	4620      	mov	r0, r4
 8012fc0:	f000 f814 	bl	8012fec <_free_r>
 8012fc4:	4631      	mov	r1, r6
 8012fc6:	e7ef      	b.n	8012fa8 <_reclaim_reent+0x8c>
 8012fc8:	2500      	movs	r5, #0
 8012fca:	e7ef      	b.n	8012fac <_reclaim_reent+0x90>
 8012fcc:	bd70      	pop	{r4, r5, r6, pc}
 8012fce:	bf00      	nop
 8012fd0:	20000198 	.word	0x20000198

08012fd4 <__malloc_lock>:
 8012fd4:	4801      	ldr	r0, [pc, #4]	; (8012fdc <__malloc_lock+0x8>)
 8012fd6:	f7ff bf7b 	b.w	8012ed0 <__retarget_lock_acquire_recursive>
 8012fda:	bf00      	nop
 8012fdc:	200057d0 	.word	0x200057d0

08012fe0 <__malloc_unlock>:
 8012fe0:	4801      	ldr	r0, [pc, #4]	; (8012fe8 <__malloc_unlock+0x8>)
 8012fe2:	f7ff bf76 	b.w	8012ed2 <__retarget_lock_release_recursive>
 8012fe6:	bf00      	nop
 8012fe8:	200057d0 	.word	0x200057d0

08012fec <_free_r>:
 8012fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012fee:	2900      	cmp	r1, #0
 8012ff0:	d048      	beq.n	8013084 <_free_r+0x98>
 8012ff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ff6:	9001      	str	r0, [sp, #4]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	f1a1 0404 	sub.w	r4, r1, #4
 8012ffe:	bfb8      	it	lt
 8013000:	18e4      	addlt	r4, r4, r3
 8013002:	f7ff ffe7 	bl	8012fd4 <__malloc_lock>
 8013006:	4a20      	ldr	r2, [pc, #128]	; (8013088 <_free_r+0x9c>)
 8013008:	9801      	ldr	r0, [sp, #4]
 801300a:	6813      	ldr	r3, [r2, #0]
 801300c:	4615      	mov	r5, r2
 801300e:	b933      	cbnz	r3, 801301e <_free_r+0x32>
 8013010:	6063      	str	r3, [r4, #4]
 8013012:	6014      	str	r4, [r2, #0]
 8013014:	b003      	add	sp, #12
 8013016:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801301a:	f7ff bfe1 	b.w	8012fe0 <__malloc_unlock>
 801301e:	42a3      	cmp	r3, r4
 8013020:	d90b      	bls.n	801303a <_free_r+0x4e>
 8013022:	6821      	ldr	r1, [r4, #0]
 8013024:	1862      	adds	r2, r4, r1
 8013026:	4293      	cmp	r3, r2
 8013028:	bf04      	itt	eq
 801302a:	681a      	ldreq	r2, [r3, #0]
 801302c:	685b      	ldreq	r3, [r3, #4]
 801302e:	6063      	str	r3, [r4, #4]
 8013030:	bf04      	itt	eq
 8013032:	1852      	addeq	r2, r2, r1
 8013034:	6022      	streq	r2, [r4, #0]
 8013036:	602c      	str	r4, [r5, #0]
 8013038:	e7ec      	b.n	8013014 <_free_r+0x28>
 801303a:	461a      	mov	r2, r3
 801303c:	685b      	ldr	r3, [r3, #4]
 801303e:	b10b      	cbz	r3, 8013044 <_free_r+0x58>
 8013040:	42a3      	cmp	r3, r4
 8013042:	d9fa      	bls.n	801303a <_free_r+0x4e>
 8013044:	6811      	ldr	r1, [r2, #0]
 8013046:	1855      	adds	r5, r2, r1
 8013048:	42a5      	cmp	r5, r4
 801304a:	d10b      	bne.n	8013064 <_free_r+0x78>
 801304c:	6824      	ldr	r4, [r4, #0]
 801304e:	4421      	add	r1, r4
 8013050:	1854      	adds	r4, r2, r1
 8013052:	42a3      	cmp	r3, r4
 8013054:	6011      	str	r1, [r2, #0]
 8013056:	d1dd      	bne.n	8013014 <_free_r+0x28>
 8013058:	681c      	ldr	r4, [r3, #0]
 801305a:	685b      	ldr	r3, [r3, #4]
 801305c:	6053      	str	r3, [r2, #4]
 801305e:	4421      	add	r1, r4
 8013060:	6011      	str	r1, [r2, #0]
 8013062:	e7d7      	b.n	8013014 <_free_r+0x28>
 8013064:	d902      	bls.n	801306c <_free_r+0x80>
 8013066:	230c      	movs	r3, #12
 8013068:	6003      	str	r3, [r0, #0]
 801306a:	e7d3      	b.n	8013014 <_free_r+0x28>
 801306c:	6825      	ldr	r5, [r4, #0]
 801306e:	1961      	adds	r1, r4, r5
 8013070:	428b      	cmp	r3, r1
 8013072:	bf04      	itt	eq
 8013074:	6819      	ldreq	r1, [r3, #0]
 8013076:	685b      	ldreq	r3, [r3, #4]
 8013078:	6063      	str	r3, [r4, #4]
 801307a:	bf04      	itt	eq
 801307c:	1949      	addeq	r1, r1, r5
 801307e:	6021      	streq	r1, [r4, #0]
 8013080:	6054      	str	r4, [r2, #4]
 8013082:	e7c7      	b.n	8013014 <_free_r+0x28>
 8013084:	b003      	add	sp, #12
 8013086:	bd30      	pop	{r4, r5, pc}
 8013088:	20003c2c 	.word	0x20003c2c

0801308c <_init>:
 801308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801308e:	bf00      	nop
 8013090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013092:	bc08      	pop	{r3}
 8013094:	469e      	mov	lr, r3
 8013096:	4770      	bx	lr

08013098 <_fini>:
 8013098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801309a:	bf00      	nop
 801309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801309e:	bc08      	pop	{r3}
 80130a0:	469e      	mov	lr, r3
 80130a2:	4770      	bx	lr
