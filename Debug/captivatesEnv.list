
captivatesEnv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012184  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  080122c4  080122c4  000222c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  08012594  08012594  00022594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000008  080125a0  080125a0  000225a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000004  080125a8  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005570  200001f0  08012794  000301f0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20005760  08012794  00035760  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00057aff  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000096c0  00000000  00000000  00087d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003478  00000000  00000000  000913e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003120  00000000  00000000  00094858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037dc0  00000000  00000000  00097978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000407d9  00000000  00000000  000cf738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0011f333  00000000  00000000  0010ff11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0022f244  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000dfe8  00000000  00000000  0022f298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	080122ac 	.word	0x080122ac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	080122ac 	.word	0x080122ac

08000180 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800018c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4313      	orrs	r3, r2
 8000196:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800019c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	4013      	ands	r3, r2
 80001a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a4:	68fb      	ldr	r3, [r7, #12]
}
 80001a6:	bf00      	nop
 80001a8:	3714      	adds	r7, #20
 80001aa:	46bd      	mov	sp, r7
 80001ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001b0:	4770      	bx	lr
	...

080001b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ba:	463b      	mov	r3, r7
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
 80001c0:	605a      	str	r2, [r3, #4]
 80001c2:	609a      	str	r2, [r3, #8]
 80001c4:	60da      	str	r2, [r3, #12]
 80001c6:	611a      	str	r2, [r3, #16]
 80001c8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ca:	4b29      	ldr	r3, [pc, #164]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001cc:	4a29      	ldr	r2, [pc, #164]	; (8000274 <MX_ADC1_Init+0xc0>)
 80001ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001d0:	4b27      	ldr	r3, [pc, #156]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001d6:	4b26      	ldr	r3, [pc, #152]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001d8:	2200      	movs	r2, #0
 80001da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001dc:	4b24      	ldr	r3, [pc, #144]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001de:	2200      	movs	r2, #0
 80001e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001e2:	4b23      	ldr	r3, [pc, #140]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80001e8:	4b21      	ldr	r3, [pc, #132]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001ea:	2204      	movs	r2, #4
 80001ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80001ee:	4b20      	ldr	r3, [pc, #128]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80001f4:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80001fa:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000200:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000202:	2200      	movs	r2, #0
 8000204:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000208:	4b19      	ldr	r3, [pc, #100]	; (8000270 <MX_ADC1_Init+0xbc>)
 800020a:	2200      	movs	r2, #0
 800020c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800020e:	4b18      	ldr	r3, [pc, #96]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000210:	2200      	movs	r2, #0
 8000212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000214:	4b16      	ldr	r3, [pc, #88]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000216:	2200      	movs	r2, #0
 8000218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <MX_ADC1_Init+0xbc>)
 800021e:	2200      	movs	r2, #0
 8000220:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000222:	4b13      	ldr	r3, [pc, #76]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000224:	2200      	movs	r2, #0
 8000226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800022a:	4811      	ldr	r0, [pc, #68]	; (8000270 <MX_ADC1_Init+0xbc>)
 800022c:	f001 fd4c 	bl	8001cc8 <HAL_ADC_Init>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000236:	f000 fcff 	bl	8000c38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <MX_ADC1_Init+0xc4>)
 800023c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800023e:	2306      	movs	r3, #6
 8000240:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000246:	237f      	movs	r3, #127	; 0x7f
 8000248:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800024a:	2304      	movs	r3, #4
 800024c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000252:	463b      	mov	r3, r7
 8000254:	4619      	mov	r1, r3
 8000256:	4806      	ldr	r0, [pc, #24]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000258:	f001 fe82 	bl	8001f60 <HAL_ADC_ConfigChannel>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000262:	f000 fce9 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000266:	bf00      	nop
 8000268:	3718      	adds	r7, #24
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20003bf8 	.word	0x20003bf8
 8000274:	50040000 	.word	0x50040000
 8000278:	19200040 	.word	0x19200040

0800027c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	f107 030c 	add.w	r3, r7, #12
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <HAL_ADC_MspInit+0x54>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d113      	bne.n	80002c6 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800029e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80002a2:	f7ff ff6d 	bl	8000180 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	2001      	movs	r0, #1
 80002a8:	f7ff ff6a 	bl	8000180 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002b0:	2303      	movs	r3, #3
 80002b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b4:	2300      	movs	r3, #0
 80002b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 80002b8:	f107 030c 	add.w	r3, r7, #12
 80002bc:	4619      	mov	r1, r3
 80002be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c2:	f002 faf3 	bl	80028ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002c6:	bf00      	nop
 80002c8:	3720      	adds	r7, #32
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	50040000 	.word	0x50040000

080002d4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80002dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002e0:	4a0a      	ldr	r2, [pc, #40]	; (800030c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80002e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80002e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80002ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	021b      	lsls	r3, r3, #8
 80002f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002fa:	4313      	orrs	r3, r2
 80002fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	cafecafe 	.word	0xcafecafe

08000310 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800031c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800033a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800033e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800035c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000364:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000368:	d101      	bne.n	800036e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800036a:	2301      	movs	r3, #1
 800036c:	e000      	b.n	8000370 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800036e:	2300      	movs	r3, #0
}
 8000370:	4618      	mov	r0, r3
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800037e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800038e:	d101      	bne.n	8000394 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000390:	2301      	movs	r3, #1
 8000392:	e000      	b.n	8000396 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000394:	2300      	movs	r3, #0
}
 8000396:	4618      	mov	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80003a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80003b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4013      	ands	r3, r2
 80003c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003c4:	68fb      	ldr	r3, [r7, #12]
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685a      	ldr	r2, [r3, #4]
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	041b      	lsls	r3, r3, #16
 80003e4:	431a      	orrs	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	685a      	ldr	r2, [r3, #4]
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	431a      	orrs	r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	605a      	str	r2, [r3, #4]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	041b      	lsls	r3, r3, #16
 800042a:	431a      	orrs	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	615a      	str	r2, [r3, #20]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	431a      	orrs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	615a      	str	r2, [r3, #20]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	609a      	str	r2, [r3, #8]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	619a      	str	r2, [r3, #24]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <LL_LPM_EnableSleep+0x1c>)
 800049e:	691b      	ldr	r3, [r3, #16]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <LL_LPM_EnableSleep+0x1c>)
 80004a2:	f023 0304 	bic.w	r3, r3, #4
 80004a6:	6113      	str	r3, [r2, #16]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e000ed00 	.word	0xe000ed00

080004b8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <MX_APPE_Config+0x18>)
 80004be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004c2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 80004c4:	f000 f806 	bl	80004d4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80004c8:	f000 f846 	bl	8000558 <Config_HSE>

  return;
 80004cc:	bf00      	nop
}
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	58004000 	.word	0x58004000

080004d4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80004d8:	f000 f804 	bl	80004e4 <Reset_BackupDomain>

  Reset_IPCC();
 80004dc:	f000 f81a 	bl	8000514 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 80004e0:	bf00      	nop
}
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80004e8:	f7ff ff34 	bl	8000354 <LL_RCC_IsActiveFlag_PINRST>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d00d      	beq.n	800050e <Reset_BackupDomain+0x2a>
 80004f2:	f7ff ff42 	bl	800037a <LL_RCC_IsActiveFlag_SFTRST>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d108      	bne.n	800050e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80004fc:	f004 ff16 	bl	800532c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000500:	f004 ff14 	bl	800532c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000504:	f7ff ff04 	bl	8000310 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000508:	f7ff ff13 	bl	8000332 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800050c:	bf00      	nop
 800050e:	bf00      	nop
}
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000518:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800051c:	f7ff ff40 	bl	80003a0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000520:	213f      	movs	r1, #63	; 0x3f
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <Reset_IPCC+0x40>)
 8000524:	f7ff ff9b 	bl	800045e <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000528:	213f      	movs	r1, #63	; 0x3f
 800052a:	480a      	ldr	r0, [pc, #40]	; (8000554 <Reset_IPCC+0x40>)
 800052c:	f7ff ffa5 	bl	800047a <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000530:	213f      	movs	r1, #63	; 0x3f
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <Reset_IPCC+0x40>)
 8000534:	f7ff ff4d 	bl	80003d2 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000538:	213f      	movs	r1, #63	; 0x3f
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <Reset_IPCC+0x40>)
 800053c:	f7ff ff6c 	bl	8000418 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000540:	213f      	movs	r1, #63	; 0x3f
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <Reset_IPCC+0x40>)
 8000544:	f7ff ff57 	bl	80003f6 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000548:	213f      	movs	r1, #63	; 0x3f
 800054a:	4802      	ldr	r0, [pc, #8]	; (8000554 <Reset_IPCC+0x40>)
 800054c:	f7ff ff76 	bl	800043c <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000550:	bf00      	nop
}
 8000552:	bd80      	pop	{r7, pc}
 8000554:	58000c00 	.word	0x58000c00

08000558 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800055e:	2000      	movs	r0, #0
 8000560:	f00c fd04 	bl	800cf6c <OTP_Read>
 8000564:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d005      	beq.n	8000578 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	799b      	ldrb	r3, [r3, #6]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff feaf 	bl	80002d4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000576:	bf00      	nop
 8000578:	bf00      	nop
}
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000588:	f001 f9ee 	bl	8001968 <HAL_GetTick>
 800058c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000598:	d00a      	beq.n	80005b0 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800059a:	f001 f9fd 	bl	8001998 <HAL_GetTickFreq>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005a8:	e002      	b.n	80005b0 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80005aa:	f7ff ff75 	bl	8000498 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 80005ae:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80005b0:	f001 f9da 	bl	8001968 <HAL_GetTick>
 80005b4:	4602      	mov	r2, r0
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d8f4      	bhi.n	80005aa <HAL_Delay+0x2a>
  }
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osMutexNew(&messageI2C_Lock_attributes);
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <_Z16MX_FREERTOS_Initv+0x34>)
 80005d2:	f00d fb6b 	bl	800dcac <osMutexNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <_Z16MX_FREERTOS_Initv+0x38>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	/* creation of lightsSimpleQueue */
	lightsComplexQueueHandle = osMessageQueueNew(3, sizeof(union ColorComplex),
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <_Z16MX_FREERTOS_Initv+0x3c>)
 80005de:	2112      	movs	r1, #18
 80005e0:	2003      	movs	r0, #3
 80005e2:	f00d fbe9 	bl	800ddb8 <osMessageQueueNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a08      	ldr	r2, [pc, #32]	; (800060c <_Z16MX_FREERTOS_Initv+0x40>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* creation of frontLightsThre */
//  frontLightsThreHandle = osThreadNew(ThreadFrontLightsComplexTask, NULL, &frontLightsThre_attributes);

  /* creation of thermopileTask */
  thermopileTaskHandle = osThreadNew(Thermopile_Task, NULL, &thermopileTask_attributes);
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <_Z16MX_FREERTOS_Initv+0x44>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <_Z16MX_FREERTOS_Initv+0x48>)
 80005f2:	f00d f907 	bl	800d804 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <_Z16MX_FREERTOS_Initv+0x4c>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	080123f4 	.word	0x080123f4
 8000604:	20000214 	.word	0x20000214
 8000608:	080123b8 	.word	0x080123b8
 800060c:	2000020c 	.word	0x2000020c
 8000610:	080123d0 	.word	0x080123d0
 8000614:	080013e9 	.word	0x080013e9
 8000618:	20000210 	.word	0x20000210

0800061c <LL_AHB2_GRP1_EnableClock>:
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000628:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800062a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000638:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4013      	ands	r3, r2
 800063e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000640:	68fb      	ldr	r3, [r7, #12]
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <MX_GPIO_Init>:

/** Configure pins
     PA1   ------> SharedAnalog_PA1
*/
void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	2001      	movs	r0, #1
 8000666:	f7ff ffd9 	bl	800061c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	2004      	movs	r0, #4
 800066c:	f7ff ffd6 	bl	800061c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	2002      	movs	r0, #2
 8000672:	f7ff ffd3 	bl	800061c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000676:	2008      	movs	r0, #8
 8000678:	f7ff ffd0 	bl	800061c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000682:	481d      	ldr	r0, [pc, #116]	; (80006f8 <MX_GPIO_Init+0xa8>)
 8000684:	f002 fa82 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 8000688:	2302      	movs	r3, #2
 800068a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068c:	2303      	movs	r3, #3
 800068e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f002 f906 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 80006a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4619      	mov	r1, r3
 80006b6:	4810      	ldr	r0, [pc, #64]	; (80006f8 <MX_GPIO_Init+0xa8>)
 80006b8:	f002 f8f8 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA9_Pin;
 80006bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(PA9_GPIO_Port, &GPIO_InitStruct);
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d2:	f002 f8eb 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = PD4_Pin|PD9_Pin;
 80006d6:	f44f 7304 	mov.w	r3, #528	; 0x210
 80006da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_GPIO_Init+0xac>)
 80006ea:	f002 f8df 	bl	80028ac <HAL_GPIO_Init>

}
 80006ee:	bf00      	nop
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	48000800 	.word	0x48000800
 80006fc:	48000c00 	.word	0x48000c00

08000700 <LL_AHB2_GRP1_EnableClock>:
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800070c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800070e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4313      	orrs	r3, r2
 8000716:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800071c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4013      	ands	r3, r2
 8000722:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000724:	68fb      	ldr	r3, [r7, #12]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000732:	b480      	push	{r7}
 8000734:	b085      	sub	sp, #20
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800073a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800073e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000740:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4313      	orrs	r3, r2
 8000748:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800074a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800074e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4013      	ands	r3, r2
 8000754:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000756:	68fb      	ldr	r3, [r7, #12]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_I2C1_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <MX_I2C1_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <MX_I2C1_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_I2C1_Init+0x74>)
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <MX_I2C1_Init+0x74>)
 80007a0:	f002 fa30 	bl	8002c04 <HAL_I2C_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007aa:	f000 fa45 	bl	8000c38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <MX_I2C1_Init+0x74>)
 80007b2:	f002 ff69 	bl	8003688 <HAL_I2CEx_ConfigAnalogFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007bc:	f000 fa3c 	bl	8000c38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_I2C1_Init+0x74>)
 80007c4:	f002 ffab 	bl	800371e <HAL_I2CEx_ConfigDigitalFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 fa33 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20003ca8 	.word	0x20003ca8
 80007dc:	40005400 	.word	0x40005400
 80007e0:	10707dbc 	.word	0x10707dbc

080007e4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_I2C3_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_I2C3_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_I2C3_Init+0x74>)
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <MX_I2C3_Init+0x7c>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_I2C3_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_I2C3_Init+0x74>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_I2C3_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_I2C3_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_I2C3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_I2C3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_I2C3_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800081e:	480e      	ldr	r0, [pc, #56]	; (8000858 <MX_I2C3_Init+0x74>)
 8000820:	f002 f9f0 	bl	8002c04 <HAL_I2C_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800082a:	f000 fa05 	bl	8000c38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800082e:	2100      	movs	r1, #0
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <MX_I2C3_Init+0x74>)
 8000832:	f002 ff29 	bl	8003688 <HAL_I2CEx_ConfigAnalogFilter>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800083c:	f000 f9fc 	bl	8000c38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_I2C3_Init+0x74>)
 8000844:	f002 ff6b 	bl	800371e <HAL_I2CEx_ConfigDigitalFilter>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 f9f3 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20003c5c 	.word	0x20003c5c
 800085c:	40005c00 	.word	0x40005c00
 8000860:	10707dbc 	.word	0x10707dbc

08000864 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b09c      	sub	sp, #112	; 0x70
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2250      	movs	r2, #80	; 0x50
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f011 fc43 	bl	8012110 <memset>
  if(i2cHandle->Instance==I2C1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a3f      	ldr	r2, [pc, #252]	; (800098c <HAL_I2C_MspInit+0x128>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d12f      	bne.n	80008f4 <HAL_I2C_MspInit+0x90>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000894:	2304      	movs	r3, #4
 8000896:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000898:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4618      	mov	r0, r3
 80008a4:	f006 fad8 	bl	8006e58 <HAL_RCCEx_PeriphCLKConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008ae:	f000 f9c3 	bl	8000c38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2002      	movs	r0, #2
 80008b4:	f7ff ff24 	bl	8000700 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 80008b8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008be:	2312      	movs	r3, #18
 80008c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c6:	2302      	movs	r3, #2
 80008c8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ca:	2304      	movs	r3, #4
 80008cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008d2:	4619      	mov	r1, r3
 80008d4:	482e      	ldr	r0, [pc, #184]	; (8000990 <HAL_I2C_MspInit+0x12c>)
 80008d6:	f001 ffe9 	bl	80028ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008da:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80008de:	f7ff ff28 	bl	8000732 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2105      	movs	r1, #5
 80008e6:	201e      	movs	r0, #30
 80008e8:	f001 ffb8 	bl	800285c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008ec:	201e      	movs	r0, #30
 80008ee:	f001 ffcf 	bl	8002890 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80008f2:	e046      	b.n	8000982 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a26      	ldr	r2, [pc, #152]	; (8000994 <HAL_I2C_MspInit+0x130>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d141      	bne.n	8000982 <HAL_I2C_MspInit+0x11e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80008fe:	2308      	movs	r3, #8
 8000900:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000902:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4618      	mov	r0, r3
 800090e:	f006 faa3 	bl	8006e58 <HAL_RCCEx_PeriphCLKConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_I2C_MspInit+0xb8>
      Error_Handler();
 8000918:	f000 f98e 	bl	8000c38 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800091c:	2004      	movs	r0, #4
 800091e:	f7ff feef 	bl	8000700 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff feec 	bl	8000700 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000928:	2302      	movs	r3, #2
 800092a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092c:	2312      	movs	r3, #18
 800092e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000930:	2301      	movs	r3, #1
 8000932:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000934:	2302      	movs	r3, #2
 8000936:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000938:	2304      	movs	r3, #4
 800093a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000940:	4619      	mov	r1, r3
 8000942:	4815      	ldr	r0, [pc, #84]	; (8000998 <HAL_I2C_MspInit+0x134>)
 8000944:	f001 ffb2 	bl	80028ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094c:	2312      	movs	r3, #18
 800094e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000950:	2301      	movs	r3, #1
 8000952:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000954:	2302      	movs	r3, #2
 8000956:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000958:	2304      	movs	r3, #4
 800095a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000960:	4619      	mov	r1, r3
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f001 ffa1 	bl	80028ac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800096a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800096e:	f7ff fee0 	bl	8000732 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	2020      	movs	r0, #32
 8000978:	f001 ff70 	bl	800285c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800097c:	2020      	movs	r0, #32
 800097e:	f001 ff87 	bl	8002890 <HAL_NVIC_EnableIRQ>
}
 8000982:	bf00      	nop
 8000984:	3770      	adds	r7, #112	; 0x70
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40005400 	.word	0x40005400
 8000990:	48000400 	.word	0x48000400
 8000994:	40005c00 	.word	0x40005c00
 8000998:	48000800 	.word	0x48000800

0800099c <LL_AHB3_GRP1_EnableClock>:
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80009a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80009b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4013      	ands	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009c0:	68fb      	ldr	r3, [r7, #12]
}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_IPCC_Init+0x20>)
 80009d6:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <MX_IPCC_Init+0x24>)
 80009d8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_IPCC_Init+0x20>)
 80009dc:	f002 feec 	bl	80037b8 <HAL_IPCC_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80009e6:	f000 f927 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20003cf4 	.word	0x20003cf4
 80009f4:	58000c00 	.word	0x58000c00

080009f8 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <HAL_IPCC_MspInit+0x24>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d103      	bne.n	8000a12 <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8000a0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a0e:	f7ff ffc5 	bl	800099c <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	58000c00 	.word	0x58000c00

08000a20 <LL_RCC_LSE_SetDriveCapability>:
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a30:	f023 0218 	bic.w	r2, r3, #24
 8000a34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f000 ff56 	bl	8001900 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8000a54:	f7ff fd30 	bl	80004b8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a58:	f000 f822 	bl	8000aa0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a5c:	f000 f89e 	bl	8000b9c <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8000a60:	f7ff ffb6 	bl	80009d0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a64:	f7ff fdf4 	bl	8000650 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a68:	f7ff fba4 	bl	80001b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a6c:	f7ff fe7a 	bl	8000764 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000a70:	f7ff feb8 	bl	80007e4 <MX_I2C3_Init>
  MX_RF_Init();
 8000a74:	f000 f8e5 	bl	8000c42 <MX_RF_Init>
  MX_RTC_Init();
 8000a78:	f000 f914 	bl	8000ca4 <MX_RTC_Init>
  MX_SAI1_Init();
 8000a7c:	f000 f982 	bl	8000d84 <MX_SAI1_Init>
  MX_SPI1_Init();
 8000a80:	f000 fa7c 	bl	8000f7c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a84:	f000 fab8 	bl	8000ff8 <MX_SPI2_Init>
  MX_TIM16_Init();
 8000a88:	f000 fe3e 	bl	8001708 <MX_TIM16_Init>
  MX_USB_Device_Init();
 8000a8c:	f010 f996 	bl	8010dbc <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a90:	f00c fe6e 	bl	800d770 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a94:	f7ff fd9a 	bl	80005cc <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 8000a98:	f00c fe8e 	bl	800d7b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000a9c:	e7fe      	b.n	8000a9c <main+0x50>
	...

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b09a      	sub	sp, #104	; 0x68
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0320 	add.w	r3, r7, #32
 8000aaa:	2248      	movs	r2, #72	; 0x48
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f011 fb2e 	bl	8012110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
 8000ac2:	615a      	str	r2, [r3, #20]
 8000ac4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ac6:	f004 fc31 	bl	800532c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff ffa8 	bl	8000a20 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad0:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <SystemClock_Config+0xf8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ad8:	4a2f      	ldr	r2, [pc, #188]	; (8000b98 <SystemClock_Config+0xf8>)
 8000ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <SystemClock_Config+0xf8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000aec:	2327      	movs	r3, #39	; 0x27
 8000aee:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000af6:	2301      	movs	r3, #1
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b04:	2340      	movs	r3, #64	; 0x40
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b14:	2301      	movs	r3, #1
 8000b16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b24:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000b26:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000b2a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b30:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	4618      	mov	r0, r3
 8000b38:	f004 ffa8 	bl	8005a8c <HAL_RCC_OscConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	bf14      	ite	ne
 8000b42:	2301      	movne	r3, #1
 8000b44:	2300      	moveq	r3, #0
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b4c:	f000 f874 	bl	8000c38 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000b50:	236f      	movs	r3, #111	; 0x6f
 8000b52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b54:	2303      	movs	r3, #3
 8000b56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2103      	movs	r1, #3
 8000b70:	4618      	mov	r0, r3
 8000b72:	f005 fb17 	bl	80061a4 <HAL_RCC_ClockConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	bf14      	ite	ne
 8000b7c:	2301      	movne	r3, #1
 8000b7e:	2300      	moveq	r3, #0
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000b86:	f000 f857 	bl	8000c38 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b8a:	f006 fef2 	bl	8007972 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b8e:	bf00      	nop
 8000b90:	3768      	adds	r7, #104	; 0x68
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	58000400 	.word	0x58000400

08000b9c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b094      	sub	sp, #80	; 0x50
 8000ba0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2250      	movs	r2, #80	; 0x50
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f011 fab1 	bl	8012110 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8000bae:	f44f 5355 	mov.w	r3, #13632	; 0x3540
 8000bb2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 12;
 8000bb4:	230c      	movs	r3, #12
 8000bb6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000bb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bc2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000bc4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bc8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_USBCLK
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_Z24PeriphCommonClock_Configv+0x74>)
 8000bcc:	617b      	str	r3, [r7, #20]
                              |RCC_PLLSAI1_ADCCLK;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000bd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000bde:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000be2:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000be4:	2300      	movs	r3, #0
 8000be6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000be8:	2310      	movs	r3, #16
 8000bea:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f006 f932 	bl	8006e58 <HAL_RCCEx_PeriphCLKConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <_Z24PeriphCommonClock_Configv+0x6c>
  {
    Error_Handler();
 8000c04:	f000 f818 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000c08:	bf00      	nop
 8000c0a:	3750      	adds	r7, #80	; 0x50
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	11010000 	.word	0x11010000

08000c14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d101      	bne.n	8000c2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c26:	f000 fe8b 	bl	8001940 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40012c00 	.word	0x40012c00

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>

08000c42 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_RCC_EnableRTC>:
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LL_APB1_GRP1_EnableClock>:
{
 8000c72:	b480      	push	{r7}
 8000c74:	b085      	sub	sp, #20
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4013      	ands	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_RTC_Init+0x4c>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <MX_RTC_Init+0x50>)
 8000cac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <MX_RTC_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_RTC_Init+0x4c>)
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <MX_RTC_Init+0x4c>)
 8000cbc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000cc0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_RTC_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_RTC_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_RTC_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_RTC_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_RTC_Init+0x4c>)
 8000cdc:	f007 f90e 	bl	8007efc <HAL_RTC_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000ce6:	f7ff ffa7 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20003d30 	.word	0x20003d30
 8000cf4:	40002800 	.word	0x40002800

08000cf8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b096      	sub	sp, #88	; 0x58
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	2250      	movs	r2, #80	; 0x50
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f011 fa01 	bl	8012110 <memset>
  if(rtcHandle->Instance==RTC)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_RTC_MspInit+0x54>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d115      	bne.n	8000d44 <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d1c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d22:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f006 f895 	bl	8006e58 <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d34:	f7ff ff80 	bl	8000c38 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d38:	f7ff ff8a 	bl	8000c50 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d40:	f7ff ff97 	bl	8000c72 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d44:	bf00      	nop
 8000d46:	3758      	adds	r7, #88	; 0x58
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40002800 	.word	0x40002800

08000d50 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d74:	68fb      	ldr	r3, [r7, #12]
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_SAI1_Init+0x68>)
 8000d8a:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <MX_SAI1_Init+0x6c>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_SAI1_Init+0x68>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_SAI1_Init+0x68>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_SAI1_Init+0x68>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_SAI1_Init+0x68>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_SAI1_Init+0x68>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_SAI1_Init+0x68>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_SAI1_Init+0x68>)
 8000db4:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <MX_SAI1_Init+0x70>)
 8000db6:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_SAI1_Init+0x68>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_SAI1_Init+0x68>)
 8000dc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_SAI1_Init+0x68>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <MX_SAI1_Init+0x68>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_SAI1_Init+0x68>)
 8000dda:	f007 f97d 	bl	80080d8 <HAL_SAI_InitProtocol>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_SAI1_Init+0x64>
  {
    Error_Handler();
 8000de4:	f7ff ff28 	bl	8000c38 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20003d54 	.word	0x20003d54
 8000df0:	40015404 	.word	0x40015404
 8000df4:	0002ee00 	.word	0x0002ee00

08000df8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1a      	ldr	r2, [pc, #104]	; (8000e70 <HAL_SAI_MspInit+0x78>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12d      	bne.n	8000e66 <HAL_SAI_MspInit+0x6e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <HAL_SAI_MspInit+0x7c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d103      	bne.n	8000e1a <HAL_SAI_MspInit+0x22>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000e12:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000e16:	f7ff ff9b 	bl	8000d50 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HAL_SAI_MspInit+0x7c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <HAL_SAI_MspInit+0x7c>)
 8000e22:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB13     ------> SAI1_SCK_A
    PB12     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e24:	2308      	movs	r3, #8
 8000e26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000e34:	230d      	movs	r3, #13
 8000e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <HAL_SAI_MspInit+0x80>)
 8000e40:	f001 fd34 	bl	80028ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000e44:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000e56:	230d      	movs	r3, #13
 8000e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4806      	ldr	r0, [pc, #24]	; (8000e7c <HAL_SAI_MspInit+0x84>)
 8000e62:	f001 fd23 	bl	80028ac <HAL_GPIO_Init>

    }
}
 8000e66:	bf00      	nop
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40015404 	.word	0x40015404
 8000e74:	20000218 	.word	0x20000218
 8000e78:	48000800 	.word	0x48000800
 8000e7c:	48000400 	.word	0x48000400

08000e80 <_Z41__static_initialization_and_destruction_0ii>:
	}
}

static void triggerSpectrometerSample(void *argument) {
	osThreadFlagsSet(specTaskHandle, GRAB_SAMPLE_BIT);
}
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d107      	bne.n	8000ea0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d102      	bne.n	8000ea0 <_Z41__static_initialization_and_destruction_0ii+0x20>
Adafruit_AS7341 specSensor;
 8000e9a:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000e9c:	f00c f88e 	bl	800cfbc <_ZN15Adafruit_AS7341C1Ev>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d107      	bne.n	8000eb6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d102      	bne.n	8000eb6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000eb0:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000eb2:	f00c f89d 	bl	800cff0 <_ZN15Adafruit_AS7341D1Ev>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000021c 	.word	0x2000021c

08000ec4 <_GLOBAL__sub_I_periodicSpecTimer_id>:
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f7ff ffd7 	bl	8000e80 <_Z41__static_initialization_and_destruction_0ii>
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_GLOBAL__sub_D_periodicSpecTimer_id>:
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff ffcf 	bl	8000e80 <_Z41__static_initialization_and_destruction_0ii>
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <LL_AHB2_GRP1_EnableClock>:
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ef2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4013      	ands	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f08:	68fb      	ldr	r3, [r7, #12]
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <LL_APB1_GRP1_EnableClock>:
{
 8000f16:	b480      	push	{r7}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4013      	ands	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_APB2_GRP1_EnableClock>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000f82:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <MX_SPI1_Init+0x78>)
 8000f84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000f88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000f96:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000faa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000fca:	2207      	movs	r2, #7
 8000fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000fdc:	f007 fbae 	bl	800873c <HAL_SPI_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fe6:	f7ff fe27 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20003e50 	.word	0x20003e50
 8000ff4:	40013000 	.word	0x40013000

08000ff8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_SPI2_Init+0x74>)
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <MX_SPI2_Init+0x78>)
 8001000:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_SPI2_Init+0x74>)
 8001004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001008:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_SPI2_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_SPI2_Init+0x74>)
 8001012:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001016:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_SPI2_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <MX_SPI2_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_SPI2_Init+0x74>)
 8001026:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800102a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_SPI2_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_SPI2_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_SPI2_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <MX_SPI2_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_SPI2_Init+0x74>)
 8001046:	2207      	movs	r2, #7
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <MX_SPI2_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_SPI2_Init+0x74>)
 8001052:	2208      	movs	r2, #8
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_SPI2_Init+0x74>)
 8001058:	f007 fb70 	bl	800873c <HAL_SPI_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001062:	f7ff fde9 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20003dec 	.word	0x20003dec
 8001070:	40003800 	.word	0x40003800

08001074 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a31      	ldr	r2, [pc, #196]	; (8001158 <HAL_SPI_MspInit+0xe4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d12c      	bne.n	80010f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001096:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800109a:	f7ff ff55 	bl	8000f48 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2002      	movs	r0, #2
 80010a0:	f7ff ff20 	bl	8000ee4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff1d 	bl	8000ee4 <LL_AHB2_GRP1_EnableClock>
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 80010aa:	2338      	movs	r3, #56	; 0x38
 80010ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ba:	2305      	movs	r3, #5
 80010bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	4619      	mov	r1, r3
 80010c4:	4825      	ldr	r0, [pc, #148]	; (800115c <HAL_SPI_MspInit+0xe8>)
 80010c6:	f001 fbf1 	bl	80028ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010dc:	2305      	movs	r3, #5
 80010de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f001 fbdf 	bl	80028ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80010ee:	e02f      	b.n	8001150 <HAL_SPI_MspInit+0xdc>
  else if(spiHandle->Instance==SPI2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1a      	ldr	r2, [pc, #104]	; (8001160 <HAL_SPI_MspInit+0xec>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12a      	bne.n	8001150 <HAL_SPI_MspInit+0xdc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010fe:	f7ff ff0a 	bl	8000f16 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001102:	2008      	movs	r0, #8
 8001104:	f7ff feee 	bl	8000ee4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	2002      	movs	r0, #2
 800110a:	f7ff feeb 	bl	8000ee4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800110e:	2303      	movs	r3, #3
 8001110:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800111e:	2305      	movs	r3, #5
 8001120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4619      	mov	r1, r3
 8001128:	480e      	ldr	r0, [pc, #56]	; (8001164 <HAL_SPI_MspInit+0xf0>)
 800112a:	f001 fbbf 	bl	80028ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800112e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001132:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001140:	2305      	movs	r3, #5
 8001142:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4619      	mov	r1, r3
 800114a:	4804      	ldr	r0, [pc, #16]	; (800115c <HAL_SPI_MspInit+0xe8>)
 800114c:	f001 fbae 	bl	80028ac <HAL_GPIO_Init>
}
 8001150:	bf00      	nop
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40013000 	.word	0x40013000
 800115c:	48000400 	.word	0x48000400
 8001160:	40003800 	.word	0x40003800
 8001164:	48000c00 	.word	0x48000c00

08001168 <LL_AHB3_GRP1_EnableClock>:
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4313      	orrs	r3, r2
 800117e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800118c:	68fb      	ldr	r3, [r7, #12]
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800119e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011a2:	f7ff ffe1 	bl	8001168 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	210f      	movs	r1, #15
 80011aa:	f06f 0001 	mvn.w	r0, #1
 80011ae:	f001 fb55 	bl	800285c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2105      	movs	r1, #5
 80011b6:	202e      	movs	r0, #46	; 0x2e
 80011b8:	f001 fb50 	bl	800285c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80011bc:	202e      	movs	r0, #46	; 0x2e
 80011be:	f001 fb67 	bl	8002890 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <LL_APB2_GRP1_EnableClock>:
{
 80011c6:	b480      	push	{r7}
 80011c8:	b085      	sub	sp, #20
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80011ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4313      	orrs	r3, r2
 80011dc:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4013      	ands	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	2019      	movs	r0, #25
 800120e:	f001 fb25 	bl	800285c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001212:	2019      	movs	r0, #25
 8001214:	f001 fb3c 	bl	8002890 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001218:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800121c:	f7ff ffd3 	bl	80011c6 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f005 f990 	bl	8006550 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001230:	f005 f978 	bl	8006524 <HAL_RCC_GetPCLK2Freq>
 8001234:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_InitTick+0x8c>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0c9b      	lsrs	r3, r3, #18
 8001240:	3b01      	subs	r3, #1
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_InitTick+0x90>)
 8001246:	4a11      	ldr	r2, [pc, #68]	; (800128c <HAL_InitTick+0x94>)
 8001248:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_InitTick+0x90>)
 800124c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001250:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001252:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_InitTick+0x90>)
 8001254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001256:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_InitTick+0x90>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_InitTick+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001264:	4808      	ldr	r0, [pc, #32]	; (8001288 <HAL_InitTick+0x90>)
 8001266:	f007 fb0c 	bl	8008882 <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d104      	bne.n	800127a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <HAL_InitTick+0x90>)
 8001272:	f007 fb5d 	bl	8008930 <HAL_TIM_Base_Start_IT>
 8001276:	4603      	mov	r3, r0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3730      	adds	r7, #48	; 0x30
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	431bde83 	.word	0x431bde83
 8001288:	20003eb4 	.word	0x20003eb4
 800128c:	40012c00 	.word	0x40012c00

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <NMI_Handler+0x4>

08001296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler+0x4>

080012a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler+0x4>

080012ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <USB_LP_IRQHandler+0x10>)
 80012c2:	f002 fc06 	bl	8003ad2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20005460 	.word	0x20005460

080012d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80012d6:	f007 fbda 	bl	8008a8e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80012dc:	f007 fbd7 	bl	8008a8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20003eb4 	.word	0x20003eb4
 80012e8:	20003f00 	.word	0x20003f00

080012ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <I2C1_EV_IRQHandler+0x10>)
 80012f2:	f001 ff45 	bl	8003180 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20003ca8 	.word	0x20003ca8

08001300 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <I2C3_EV_IRQHandler+0x10>)
 8001306:	f001 ff3b 	bl	8003180 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20003c5c 	.word	0x20003c5c

08001314 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001318:	f001 fc50 	bl	8002bbc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <SystemInit+0x98>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132a:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <SystemInit+0x98>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001348:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800134c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800134e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <SystemInit+0x9c>)
 800135a:	4013      	ands	r3, r2
 800135c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800135e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800136a:	f023 0305 	bic.w	r3, r3, #5
 800136e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001376:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800137a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800137e:	f023 0301 	bic.w	r3, r3, #1
 8001382:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138a:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <SystemInit+0xa0>)
 800138c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <SystemInit+0xa0>)
 8001394:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	faf6fefb 	.word	0xfaf6fefb
 80013c0:	22041000 	.word	0x22041000

080013c4 <_ZN8CALIPILEC1Ev>:
#define cycTime_60ms  0x01
#define cycTime_120ms 0x02
#define cycTime_140ms 0x03


class CALIPILE
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	721a      	strb	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <Thermopile_Task>:
void grabThermopileSamples(thermopile_packet *data, CALIPILE *tp);

uint16_t thermIdx;
uint32_t thermID;

void Thermopile_Task(void *argument) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	SensorPacket *packet = NULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
//	tp_nose_bridge.setup((uint8_t) THERMOPLE_NOSE_BRIDGE_ADDR, &hi2c1, THERMOPLE_NOSE_BRIDGE_ID);
//	tp_nose_bridge.wake(); 		// wakeup thermopile sensors on i2c1 bus
//	tp_temple_front.setup((uint8_t) THERMOPLE_TEMPLE_FRONT_ADDR, &hi2c3, THERMOPLE_TEMPLE_FRONT_ADDR_ID);
//	tp_temple_front.wake(); 	// wakeup thermopile sensors on i2c3 bus

	initThermopiles(&tp_nose_tip,		THERMOPLE_NOSE_TIP_ADDR,	&hi2c1,	THERMOPLE_NOSE_TIP_ID);
 80013f4:	2301      	movs	r3, #1
 80013f6:	4a4d      	ldr	r2, [pc, #308]	; (800152c <Thermopile_Task+0x144>)
 80013f8:	210c      	movs	r1, #12
 80013fa:	484d      	ldr	r0, [pc, #308]	; (8001530 <Thermopile_Task+0x148>)
 80013fc:	f000 f8b0 	bl	8001560 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_nose_bridge,	THERMOPLE_NOSE_BRIDGE_ADDR,	&hi2c1, THERMOPLE_NOSE_BRIDGE_ID);
 8001400:	2302      	movs	r3, #2
 8001402:	4a4a      	ldr	r2, [pc, #296]	; (800152c <Thermopile_Task+0x144>)
 8001404:	210d      	movs	r1, #13
 8001406:	484b      	ldr	r0, [pc, #300]	; (8001534 <Thermopile_Task+0x14c>)
 8001408:	f000 f8aa 	bl	8001560 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_front,	THERMOPLE_TEMPLE_FRONT_ADDR,&hi2c3, THERMOPLE_TEMPLE_FRONT_ADDR_ID);
 800140c:	2303      	movs	r3, #3
 800140e:	4a4a      	ldr	r2, [pc, #296]	; (8001538 <Thermopile_Task+0x150>)
 8001410:	210f      	movs	r1, #15
 8001412:	484a      	ldr	r0, [pc, #296]	; (800153c <Thermopile_Task+0x154>)
 8001414:	f000 f8a4 	bl	8001560 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_mid,		THERMOPLE_TEMPLE_MID_ADDR,	&hi2c3, THERMOPLE_TEMPLE_MID_ADDR_ID);
 8001418:	2304      	movs	r3, #4
 800141a:	4a47      	ldr	r2, [pc, #284]	; (8001538 <Thermopile_Task+0x150>)
 800141c:	210e      	movs	r1, #14
 800141e:	4848      	ldr	r0, [pc, #288]	; (8001540 <Thermopile_Task+0x158>)
 8001420:	f000 f89e 	bl	8001560 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_back,	THERMOPLE_TEMPLE_BACK_ADDR,	&hi2c3, THERMOPLE_TEMPLE_BACK_ADDR_ID);
 8001424:	2305      	movs	r3, #5
 8001426:	4a44      	ldr	r2, [pc, #272]	; (8001538 <Thermopile_Task+0x150>)
 8001428:	210c      	movs	r1, #12
 800142a:	4846      	ldr	r0, [pc, #280]	; (8001544 <Thermopile_Task+0x15c>)
 800142c:	f000 f898 	bl	8001560 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>

	header.payloadLength = MAX_THERMOPILE_SAMPLES_PACKET
 8001430:	4b45      	ldr	r3, [pc, #276]	; (8001548 <Thermopile_Task+0x160>)
 8001432:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8001436:	60da      	str	r2, [r3, #12]
			* sizeof(thermopile_packet);
	header.reserved[0] = THERMOPILE_SAMPLE_PERIOD_MS;
 8001438:	4b43      	ldr	r3, [pc, #268]	; (8001548 <Thermopile_Task+0x160>)
 800143a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800143e:	611a      	str	r2, [r3, #16]
	header.reserved[1] = THERMOPILE_CNT;
 8001440:	4b41      	ldr	r3, [pc, #260]	; (8001548 <Thermopile_Task+0x160>)
 8001442:	2202      	movs	r2, #2
 8001444:	615a      	str	r2, [r3, #20]

	thermIdx = 0;
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <Thermopile_Task+0x164>)
 8001448:	2200      	movs	r2, #0
 800144a:	801a      	strh	r2, [r3, #0]
	thermID = 0;
 800144c:	4b40      	ldr	r3, [pc, #256]	; (8001550 <Thermopile_Task+0x168>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

	periodicThermopileTimer_id = osTimerNew(triggerThermopileSample,
 8001452:	2300      	movs	r3, #0
 8001454:	2200      	movs	r2, #0
 8001456:	2101      	movs	r1, #1
 8001458:	483e      	ldr	r0, [pc, #248]	; (8001554 <Thermopile_Task+0x16c>)
 800145a:	f00c fb49 	bl	800daf0 <osTimerNew>
 800145e:	4603      	mov	r3, r0
 8001460:	4a3d      	ldr	r2, [pc, #244]	; (8001558 <Thermopile_Task+0x170>)
 8001462:	6013      	str	r3, [r2, #0]
			osTimerPeriodic, NULL, NULL);
	osTimerStart(periodicThermopileTimer_id, THERMOPILE_SAMPLE_PERIOD_MS);
 8001464:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <Thermopile_Task+0x170>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800146c:	4618      	mov	r0, r3
 800146e:	f00c fbbb 	bl	800dbe8 <osTimerStart>

	while (1) {

		flags = osThreadFlagsWait(GRAB_SAMPLE_BIT | TERMINATE_THREAD_BIT,
 8001472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001476:	2100      	movs	r1, #0
 8001478:	f44f 7040 	mov.w	r0, #768	; 0x300
 800147c:	f00c faa2 	bl	800d9c4 <osThreadFlagsWait>
 8001480:	60b8      	str	r0, [r7, #8]
				osFlagsWaitAny, osWaitForever);

		if ((flags & GRAB_SAMPLE_BIT) == GRAB_SAMPLE_BIT) {
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d040      	beq.n	800150e <Thermopile_Task+0x126>

			// sample nose
			grabThermopileSamples(&thermopileData[thermIdx], &tp_nose_tip);
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <Thermopile_Task+0x164>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4a30      	ldr	r2, [pc, #192]	; (800155c <Thermopile_Task+0x174>)
 800149c:	4413      	add	r3, r2
 800149e:	4924      	ldr	r1, [pc, #144]	; (8001530 <Thermopile_Task+0x148>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f880 	bl	80015a6 <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
//			queueThermopilePkt(&thermopileData[thermIdx]);

			grabThermopileSamples(&thermopileData[thermIdx], &tp_nose_bridge);
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <Thermopile_Task+0x164>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4a29      	ldr	r2, [pc, #164]	; (800155c <Thermopile_Task+0x174>)
 80014b6:	4413      	add	r3, r2
 80014b8:	491e      	ldr	r1, [pc, #120]	; (8001534 <Thermopile_Task+0x14c>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f873 	bl	80015a6 <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
////			queueThermopilePkt(&thermopileData[thermIdx]);
//
//			// sample temple
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_front);
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <Thermopile_Task+0x164>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4613      	mov	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4a23      	ldr	r2, [pc, #140]	; (800155c <Thermopile_Task+0x174>)
 80014d0:	4413      	add	r3, r2
 80014d2:	491a      	ldr	r1, [pc, #104]	; (800153c <Thermopile_Task+0x154>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f866 	bl	80015a6 <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
////			queueThermopilePkt(&thermopileData[thermIdx]);
////
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_mid);
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <Thermopile_Task+0x164>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4a1c      	ldr	r2, [pc, #112]	; (800155c <Thermopile_Task+0x174>)
 80014ea:	4413      	add	r3, r2
 80014ec:	4914      	ldr	r1, [pc, #80]	; (8001540 <Thermopile_Task+0x158>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f859 	bl	80015a6 <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
////			queueThermopilePkt(&thermopileData[thermIdx]);
////
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_back);
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <Thermopile_Task+0x164>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4a16      	ldr	r2, [pc, #88]	; (800155c <Thermopile_Task+0x174>)
 8001504:	4413      	add	r3, r2
 8001506:	490f      	ldr	r1, [pc, #60]	; (8001544 <Thermopile_Task+0x15c>)
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f84c 	bl	80015a6 <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
//			queueThermopilePkt(&thermopileData[thermIdx]);
		}

		if ((flags & TERMINATE_THREAD_BIT) == TERMINATE_THREAD_BIT) {
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0ac      	beq.n	8001472 <Thermopile_Task+0x8a>
			osTimerDelete(periodicThermopileTimer_id);
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <Thermopile_Task+0x170>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f00c fb91 	bl	800dc44 <osTimerDelete>
			break;
 8001522:	bf00      	nop
		}
	}

}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20003ca8 	.word	0x20003ca8
 8001530:	20000434 	.word	0x20000434
 8001534:	20000458 	.word	0x20000458
 8001538:	20003c5c 	.word	0x20003c5c
 800153c:	2000047c 	.word	0x2000047c
 8001540:	200004a0 	.word	0x200004a0
 8001544:	200004c4 	.word	0x200004c4
 8001548:	2000040c 	.word	0x2000040c
 800154c:	200004e8 	.word	0x200004e8
 8001550:	200004ec 	.word	0x200004ec
 8001554:	0800161d 	.word	0x0800161d
 8001558:	20000430 	.word	0x20000430
 800155c:	20000244 	.word	0x20000244

08001560 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>:

void initThermopiles(CALIPILE *tp, uint8_t address, I2C_HandleTypeDef* i2c_handle, uint8_t descriptor){
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	461a      	mov	r2, r3
 800156c:	460b      	mov	r3, r1
 800156e:	72fb      	strb	r3, [r7, #11]
 8001570:	4613      	mov	r3, r2
 8001572:	72bb      	strb	r3, [r7, #10]

	uint16_t Tcounts = 0x83; // set threshold for over temperature interrupt, 0x83 == 67072 counts
 8001574:	2383      	movs	r3, #131	; 0x83
 8001576:	82fb      	strh	r3, [r7, #22]
	uint32_t flags = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
	//	uint8_t intStatus;


	tp->setup((uint8_t) address, i2c_handle, descriptor);
 800157c:	7abb      	ldrb	r3, [r7, #10]
 800157e:	7af9      	ldrb	r1, [r7, #11]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f00b fdea 	bl	800d15c <_ZN8CALIPILE5setupEhP19__I2C_HandleTypeDefh>

//	if(wakeupFlag==0){
//		tp->wake();
//		wakeupFlag=1;
//	}
	tp->wake();
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f00b fe02 	bl	800d192 <_ZN8CALIPILE4wakeEv>
	tp->readEEPROM(); // Verify protocol number and checksum and get calibration constants
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f00b fe1a 	bl	800d1c8 <_ZN8CALIPILE10readEEPROMEv>
	//  tp_outer.initMotion(tcLP1, tcLP2, LPsource, cycTime); // configure presence and motion interrupts
	tp->initTempThr(Tcounts);  // choose something ~5% above TPAMB
 8001594:	8afb      	ldrh	r3, [r7, #22]
 8001596:	4619      	mov	r1, r3
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f00b ff13 	bl	800d3c4 <_ZN8CALIPILE11initTempThrEt>
	// read interrupt status register(s) to unlatch interrupt before entering main loop
//	intStatus  = tp.checkIntStatus(); //dont do if not using interrupts

}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>:
		thermID++;
		thermIdx = 0;
	}
}

void grabThermopileSamples(thermopile_packet *data, CALIPILE *tp) {
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
	data->descriptor = tp->descriptor;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	781a      	ldrb	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	701a      	strb	r2, [r3, #0]
	data->timestamp = HAL_GetTick();
 80015b8:	f000 f9d6 	bl	8001968 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	605a      	str	r2, [r3, #4]
	data->ambientRaw = tp->getTPAMB();
 80015c2:	6838      	ldr	r0, [r7, #0]
 80015c4:	f00b ff3e 	bl	800d444 <_ZN8CALIPILE8getTPAMBEv>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	811a      	strh	r2, [r3, #8]
	data->objectRaw = tp->getTPOBJ();
 80015d0:	6838      	ldr	r0, [r7, #0]
 80015d2:	f00b ff57 	bl	800d484 <_ZN8CALIPILE8getTPOBJEv>
 80015d6:	4602      	mov	r2, r0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	60da      	str	r2, [r3, #12]
	data->ambientTemp = tp->getTamb(data->ambientRaw);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	891b      	ldrh	r3, [r3, #8]
 80015e0:	4619      	mov	r1, r3
 80015e2:	6838      	ldr	r0, [r7, #0]
 80015e4:	f00b ff76 	bl	800d4d4 <_ZN8CALIPILE7getTambEt>
 80015e8:	eef0 7a40 	vmov.f32	s15, s0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	edc3 7a04 	vstr	s15, [r3, #16]
	data->objectTemp = tp->getTobj(data->objectRaw, data->ambientTemp);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	4611      	mov	r1, r2
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f00b ff98 	bl	800d538 <_ZN8CALIPILE7getTobjEmf>
 8001608:	eef0 7a40 	vmov.f32	s15, s0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <triggerThermopileSample>:

static void triggerThermopileSample(void *argument) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(thermopileTaskHandle, GRAB_SAMPLE_BIT);
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <triggerThermopileSample+0x20>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	4618      	mov	r0, r3
 800162e:	f00c f97b 	bl	800d928 <osThreadFlagsSet>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000210 	.word	0x20000210

08001640 <_Z41__static_initialization_and_destruction_0ii>:
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d113      	bne.n	8001678 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001656:	4293      	cmp	r3, r2
 8001658:	d10e      	bne.n	8001678 <_Z41__static_initialization_and_destruction_0ii+0x38>
CALIPILE tp_nose_tip;
 800165a:	4809      	ldr	r0, [pc, #36]	; (8001680 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800165c:	f7ff feb2 	bl	80013c4 <_ZN8CALIPILEC1Ev>
CALIPILE tp_nose_bridge;
 8001660:	4808      	ldr	r0, [pc, #32]	; (8001684 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001662:	f7ff feaf 	bl	80013c4 <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_front;
 8001666:	4808      	ldr	r0, [pc, #32]	; (8001688 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001668:	f7ff feac 	bl	80013c4 <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_mid;
 800166c:	4807      	ldr	r0, [pc, #28]	; (800168c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800166e:	f7ff fea9 	bl	80013c4 <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_back;
 8001672:	4807      	ldr	r0, [pc, #28]	; (8001690 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001674:	f7ff fea6 	bl	80013c4 <_ZN8CALIPILEC1Ev>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000434 	.word	0x20000434
 8001684:	20000458 	.word	0x20000458
 8001688:	2000047c 	.word	0x2000047c
 800168c:	200004a0 	.word	0x200004a0
 8001690:	200004c4 	.word	0x200004c4

08001694 <_GLOBAL__sub_I_periodicThermopileTimer_id>:
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
 8001698:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800169c:	2001      	movs	r0, #1
 800169e:	f7ff ffcf 	bl	8001640 <_Z41__static_initialization_and_destruction_0ii>
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <LL_AHB2_GRP1_EnableClock>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016c8:	68fb      	ldr	r3, [r7, #12]
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_APB2_GRP1_EnableClock>:
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80016de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4013      	ands	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	; 0x50
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800170e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001722:	463b      	mov	r3, r7
 8001724:	2234      	movs	r2, #52	; 0x34
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f010 fcf1 	bl	8012110 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800172e:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <MX_TIM16_Init+0xec>)
 8001730:	4a31      	ldr	r2, [pc, #196]	; (80017f8 <MX_TIM16_Init+0xf0>)
 8001732:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <MX_TIM16_Init+0xec>)
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <MX_TIM16_Init+0xec>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001740:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <MX_TIM16_Init+0xec>)
 8001742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001746:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <MX_TIM16_Init+0xec>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <MX_TIM16_Init+0xec>)
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <MX_TIM16_Init+0xec>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800175a:	4826      	ldr	r0, [pc, #152]	; (80017f4 <MX_TIM16_Init+0xec>)
 800175c:	f007 f891 	bl	8008882 <HAL_TIM_Base_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001766:	f7ff fa67 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800176a:	4822      	ldr	r0, [pc, #136]	; (80017f4 <MX_TIM16_Init+0xec>)
 800176c:	f007 f92e 	bl	80089cc <HAL_TIM_PWM_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001776:	f7ff fa5f 	bl	8000c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177a:	2360      	movs	r3, #96	; 0x60
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001782:	2300      	movs	r3, #0
 8001784:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001786:	2300      	movs	r3, #0
 8001788:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001796:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800179a:	2200      	movs	r2, #0
 800179c:	4619      	mov	r1, r3
 800179e:	4815      	ldr	r0, [pc, #84]	; (80017f4 <MX_TIM16_Init+0xec>)
 80017a0:	f007 fa94 	bl	8008ccc <HAL_TIM_PWM_ConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80017aa:	f7ff fa45 	bl	8000c38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80017d0:	463b      	mov	r3, r7
 80017d2:	4619      	mov	r1, r3
 80017d4:	4807      	ldr	r0, [pc, #28]	; (80017f4 <MX_TIM16_Init+0xec>)
 80017d6:	f007 fe97 	bl	8009508 <HAL_TIMEx_ConfigBreakDeadTime>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80017e0:	f7ff fa2a 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <MX_TIM16_Init+0xec>)
 80017e6:	f000 f825 	bl	8001834 <HAL_TIM_MspPostInit>

}
 80017ea:	bf00      	nop
 80017ec:	3750      	adds	r7, #80	; 0x50
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20003f00 	.word	0x20003f00
 80017f8:	40014400 	.word	0x40014400

080017fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_TIM_Base_MspInit+0x34>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d10b      	bne.n	8001826 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800180e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001812:	f7ff ff60 	bl	80016d6 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	210f      	movs	r1, #15
 800181a:	2019      	movs	r0, #25
 800181c:	f001 f81e 	bl	800285c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001820:	2019      	movs	r0, #25
 8001822:	f001 f835 	bl	8002890 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40014400 	.word	0x40014400

08001834 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <HAL_TIM_MspPostInit+0x54>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d113      	bne.n	800187e <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2002      	movs	r0, #2
 8001858:	f7ff ff24 	bl	80016a4 <LL_AHB2_GRP1_EnableClock>
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BLINK_PWM_Pin;
 800185c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001860:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800186e:	230e      	movs	r3, #14
 8001870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLINK_PWM_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	4619      	mov	r1, r3
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <HAL_TIM_MspPostInit+0x58>)
 800187a:	f001 f817 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	3720      	adds	r7, #32
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40014400 	.word	0x40014400
 800188c:	48000400 	.word	0x48000400

08001890 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001890:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001892:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001894:	3304      	adds	r3, #4

08001896 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001896:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001898:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800189a:	d3f9      	bcc.n	8001890 <CopyDataInit>
  bx lr
 800189c:	4770      	bx	lr

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800189e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80018a0:	3004      	adds	r0, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80018a2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>
  bx lr
 80018a6:	4770      	bx	lr

080018a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80018aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018ac:	f7ff fd38 	bl	8001320 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <LoopForever+0x8>)
 80018b2:	490c      	ldr	r1, [pc, #48]	; (80018e4 <LoopForever+0xc>)
 80018b4:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <LoopForever+0x10>)
 80018b6:	2300      	movs	r3, #0
 80018b8:	f7ff ffed 	bl	8001896 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80018bc:	480b      	ldr	r0, [pc, #44]	; (80018ec <LoopForever+0x14>)
 80018be:	490c      	ldr	r1, [pc, #48]	; (80018f0 <LoopForever+0x18>)
 80018c0:	2300      	movs	r3, #0
 80018c2:	f7ff ffee 	bl	80018a2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80018c6:	480b      	ldr	r0, [pc, #44]	; (80018f4 <LoopForever+0x1c>)
 80018c8:	490b      	ldr	r1, [pc, #44]	; (80018f8 <LoopForever+0x20>)
 80018ca:	2300      	movs	r3, #0
 80018cc:	f7ff ffe9 	bl	80018a2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018d0:	f010 fbea 	bl	80120a8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80018d4:	f7ff f8ba 	bl	8000a4c <main>

080018d8 <LoopForever>:

LoopForever:
  b LoopForever
 80018d8:	e7fe      	b.n	80018d8 <LoopForever>
 80018da:	0000      	.short	0x0000
  ldr   r0, =_estack
 80018dc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80018e0:	20000004 	.word	0x20000004
 80018e4:	200001f0 	.word	0x200001f0
 80018e8:	080125a8 	.word	0x080125a8
  INIT_BSS _sbss, _ebss
 80018ec:	200001f0 	.word	0x200001f0
 80018f0:	20005760 	.word	0x20005760
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80018f4:	20030000 	.word	0x20030000
 80018f8:	20030000 	.word	0x20030000

080018fc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC1_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_Init+0x3c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <HAL_Init+0x3c>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001916:	2003      	movs	r0, #3
 8001918:	f000 ff95 	bl	8002846 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800191c:	200f      	movs	r0, #15
 800191e:	f7ff fc6b 	bl	80011f8 <HAL_InitTick>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	e001      	b.n	8001932 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800192e:	f7ff fc34 	bl	800119a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001932:	79fb      	ldrb	r3, [r7, #7]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	58004000 	.word	0x58004000

08001940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	2000000c 	.word	0x2000000c
 8001964:	20003f4c 	.word	0x20003f4c

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20003f4c 	.word	0x20003f4c

08001980 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GetTickPrio+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000008 	.word	0x20000008

08001998 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_GetTickFreq+0x14>)
 800199e:	781b      	ldrb	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	2000000c 	.word	0x2000000c

080019b0 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	609a      	str	r2, [r3, #8]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3360      	adds	r3, #96	; 0x60
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <LL_ADC_SetOffset+0x44>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	4313      	orrs	r3, r2
 8001a48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a50:	bf00      	nop
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	03fff000 	.word	0x03fff000

08001a60 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3360      	adds	r3, #96	; 0x60
 8001a6e:	461a      	mov	r2, r3
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3360      	adds	r3, #96	; 0x60
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ab6:	bf00      	nop
 8001ab8:	371c      	adds	r7, #28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b087      	sub	sp, #28
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3330      	adds	r3, #48	; 0x30
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	4413      	add	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	211f      	movs	r1, #31
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	401a      	ands	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	0e9b      	lsrs	r3, r3, #26
 8001afa:	f003 011f 	and.w	r1, r3, #31
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001b0e:	bf00      	nop
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b087      	sub	sp, #28
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3314      	adds	r3, #20
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	0e5b      	lsrs	r3, r3, #25
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	0d1b      	lsrs	r3, r3, #20
 8001b42:	f003 031f 	and.w	r3, r3, #31
 8001b46:	2107      	movs	r1, #7
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	401a      	ands	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	0d1b      	lsrs	r3, r3, #20
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001b64:	bf00      	nop
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0318 	and.w	r3, r3, #24
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b94:	40d9      	lsrs	r1, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	400b      	ands	r3, r1
 8001b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	0007ffff 	.word	0x0007ffff

08001bb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6093      	str	r3, [r2, #8]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bf0:	d101      	bne.n	8001bf6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c40:	d101      	bne.n	8001c46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <LL_ADC_IsEnabled+0x18>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <LL_ADC_IsEnabled+0x1a>
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d101      	bne.n	8001c92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d101      	bne.n	8001cb8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e12e      	b.n	8001f44 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7fe fac1 	bl	800027c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff65 	bl	8001bdc <LL_ADC_IsDeepPowerDownEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff4b 	bl	8001bb8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff80 	bl	8001c2c <LL_ADC_IsInternalRegulatorEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d115      	bne.n	8001d5e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff64 	bl	8001c04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d3c:	4b83      	ldr	r3, [pc, #524]	; (8001f4c <HAL_ADC_Init+0x284>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	4a83      	ldr	r2, [pc, #524]	; (8001f50 <HAL_ADC_Init+0x288>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff62 	bl	8001c2c <LL_ADC_IsInternalRegulatorEnabled>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10d      	bne.n	8001d8a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	f043 0210 	orr.w	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff73 	bl	8001c7a <LL_ADC_REG_IsConversionOngoing>
 8001d94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 80c7 	bne.w	8001f32 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 80c3 	bne.w	8001f32 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001db4:	f043 0202 	orr.w	r2, r3, #2
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff47 	bl	8001c54 <LL_ADC_IsEnabled>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10b      	bne.n	8001de4 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dcc:	4861      	ldr	r0, [pc, #388]	; (8001f54 <HAL_ADC_Init+0x28c>)
 8001dce:	f7ff ff41 	bl	8001c54 <LL_ADC_IsEnabled>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	485e      	ldr	r0, [pc, #376]	; (8001f58 <HAL_ADC_Init+0x290>)
 8001de0:	f7ff fde6 	bl	80019b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7e5b      	ldrb	r3, [r3, #25]
 8001de8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001df4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001dfa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e02:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001e04:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d106      	bne.n	8001e24 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	045b      	lsls	r3, r3, #17
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d009      	beq.n	8001e40 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	4b45      	ldr	r3, [pc, #276]	; (8001f5c <HAL_ADC_Init+0x294>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	69b9      	ldr	r1, [r7, #24]
 8001e50:	430b      	orrs	r3, r1
 8001e52:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff0e 	bl	8001c7a <LL_ADC_REG_IsConversionOngoing>
 8001e5e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff1b 	bl	8001ca0 <LL_ADC_INJ_IsConversionOngoing>
 8001e6a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d13d      	bne.n	8001eee <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d13a      	bne.n	8001eee <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e7c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e84:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e94:	f023 0302 	bic.w	r3, r3, #2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	69b9      	ldr	r1, [r7, #24]
 8001e9e:	430b      	orrs	r3, r1
 8001ea0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d118      	bne.n	8001ede <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001eb6:	f023 0304 	bic.w	r3, r3, #4
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ec2:	4311      	orrs	r1, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ec8:	4311      	orrs	r1, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	611a      	str	r2, [r3, #16]
 8001edc:	e007      	b.n	8001eee <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d10c      	bne.n	8001f10 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	f023 010f 	bic.w	r1, r3, #15
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f0e:	e007      	b.n	8001f20 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 020f 	bic.w	r2, r2, #15
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	f023 0303 	bic.w	r3, r3, #3
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	655a      	str	r2, [r3, #84]	; 0x54
 8001f30:	e007      	b.n	8001f42 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f36:	f043 0210 	orr.w	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f42:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000004 	.word	0x20000004
 8001f50:	053e2d63 	.word	0x053e2d63
 8001f54:	50040000 	.word	0x50040000
 8001f58:	50040300 	.word	0x50040300
 8001f5c:	fff0c007 	.word	0xfff0c007

08001f60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b0b6      	sub	sp, #216	; 0xd8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x22>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e39f      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x762>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fe73 	bl	8001c7a <LL_ADC_REG_IsConversionOngoing>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 8384 	bne.w	80026a4 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f7ff fd8a 	bl	8001ac2 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fe61 	bl	8001c7a <LL_ADC_REG_IsConversionOngoing>
 8001fb8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fe6d 	bl	8001ca0 <LL_ADC_INJ_IsConversionOngoing>
 8001fc6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 81a6 	bne.w	8002320 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f040 81a1 	bne.w	8002320 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6819      	ldr	r1, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	461a      	mov	r2, r3
 8001fec:	f7ff fd95 	bl	8001b1a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	08db      	lsrs	r3, r3, #3
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b04      	cmp	r3, #4
 8002010:	d00a      	beq.n	8002028 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6919      	ldr	r1, [r3, #16]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002022:	f7ff fcf9 	bl	8001a18 <LL_ADC_SetOffset>
 8002026:	e17b      	b.n	8002320 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fd16 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10a      	bne.n	8002054 <HAL_ADC_ConfigChannel+0xf4>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fd0b 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 800204a:	4603      	mov	r3, r0
 800204c:	0e9b      	lsrs	r3, r3, #26
 800204e:	f003 021f 	and.w	r2, r3, #31
 8002052:	e01e      	b.n	8002092 <HAL_ADC_ConfigChannel+0x132>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fd00 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002060:	4603      	mov	r3, r0
 8002062:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002072:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002076:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800207a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002082:	2320      	movs	r3, #32
 8002084:	e004      	b.n	8002090 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002086:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209a:	2b00      	cmp	r3, #0
 800209c:	d105      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x14a>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0e9b      	lsrs	r3, r3, #26
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	e018      	b.n	80020dc <HAL_ADC_ConfigChannel+0x17c>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80020be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80020c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80020ce:	2320      	movs	r3, #32
 80020d0:	e004      	b.n	80020dc <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80020d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	429a      	cmp	r2, r3
 80020de:	d106      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2200      	movs	r2, #0
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fccf 	bl	8001a8c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2101      	movs	r1, #1
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fcb3 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10a      	bne.n	800211a <HAL_ADC_ConfigChannel+0x1ba>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2101      	movs	r1, #1
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fca8 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	0e9b      	lsrs	r3, r3, #26
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	e01e      	b.n	8002158 <HAL_ADC_ConfigChannel+0x1f8>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2101      	movs	r1, #1
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fc9d 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002126:	4603      	mov	r3, r0
 8002128:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002138:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800213c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002140:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002148:	2320      	movs	r3, #32
 800214a:	e004      	b.n	8002156 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800214c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x210>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	0e9b      	lsrs	r3, r3, #26
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	e018      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x242>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002184:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800218c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002194:	2320      	movs	r3, #32
 8002196:	e004      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d106      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	2101      	movs	r1, #1
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fc6c 	bl	8001a8c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2102      	movs	r1, #2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fc50 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10a      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x280>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2102      	movs	r1, #2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fc45 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	f003 021f 	and.w	r2, r3, #31
 80021de:	e01e      	b.n	800221e <HAL_ADC_ConfigChannel+0x2be>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2102      	movs	r1, #2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fc3a 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80021fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002206:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800220e:	2320      	movs	r3, #32
 8002210:	e004      	b.n	800221c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002212:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x2d6>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	0e9b      	lsrs	r3, r3, #26
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	e016      	b.n	8002264 <HAL_ADC_ConfigChannel+0x304>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002248:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800224a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800224e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002256:	2320      	movs	r3, #32
 8002258:	e004      	b.n	8002264 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800225a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	429a      	cmp	r2, r3
 8002266:	d106      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2200      	movs	r2, #0
 800226e:	2102      	movs	r1, #2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fc0b 	bl	8001a8c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2103      	movs	r1, #3
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fbef 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10a      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x342>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2103      	movs	r1, #3
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fbe4 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	0e9b      	lsrs	r3, r3, #26
 800229c:	f003 021f 	and.w	r2, r3, #31
 80022a0:	e017      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x372>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2103      	movs	r1, #3
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fbd9 	bl	8001a60 <LL_ADC_GetOffsetChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80022ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022bc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80022be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e003      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80022c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x38a>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	0e9b      	lsrs	r3, r3, #26
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	e011      	b.n	800230e <HAL_ADC_ConfigChannel+0x3ae>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80022fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002302:	2320      	movs	r3, #32
 8002304:	e003      	b.n	800230e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	429a      	cmp	r2, r3
 8002310:	d106      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2200      	movs	r2, #0
 8002318:	2103      	movs	r1, #3
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fbb6 	bl	8001a8c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fc95 	bl	8001c54 <LL_ADC_IsEnabled>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	f040 81c2 	bne.w	80026b6 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6819      	ldr	r1, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	461a      	mov	r2, r3
 8002340:	f7ff fc16 	bl	8001b70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a8e      	ldr	r2, [pc, #568]	; (8002584 <HAL_ADC_ConfigChannel+0x624>)
 800234a:	4293      	cmp	r3, r2
 800234c:	f040 8130 	bne.w	80025b0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x418>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	3301      	adds	r3, #1
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	2b09      	cmp	r3, #9
 800236e:	bf94      	ite	ls
 8002370:	2301      	movls	r3, #1
 8002372:	2300      	movhi	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	e019      	b.n	80023ac <HAL_ADC_ConfigChannel+0x44c>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002388:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800238a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002390:	2320      	movs	r3, #32
 8002392:	e003      	b.n	800239c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3301      	adds	r3, #1
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	2b09      	cmp	r3, #9
 80023a4:	bf94      	ite	ls
 80023a6:	2301      	movls	r3, #1
 80023a8:	2300      	movhi	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d079      	beq.n	80024a4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x46c>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0e9b      	lsrs	r3, r3, #26
 80023c2:	3301      	adds	r3, #1
 80023c4:	069b      	lsls	r3, r3, #26
 80023c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ca:	e015      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x498>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80023e4:	2320      	movs	r3, #32
 80023e6:	e003      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80023e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	069b      	lsls	r3, r3, #26
 80023f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x4b8>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	3301      	adds	r3, #1
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	2101      	movs	r1, #1
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	e017      	b.n	8002448 <HAL_ADC_ConfigChannel+0x4e8>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002428:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800242a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002430:	2320      	movs	r3, #32
 8002432:	e003      	b.n	800243c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	2101      	movs	r1, #1
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	ea42 0103 	orr.w	r1, r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10a      	bne.n	800246e <HAL_ADC_ConfigChannel+0x50e>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0e9b      	lsrs	r3, r3, #26
 800245e:	3301      	adds	r3, #1
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	051b      	lsls	r3, r3, #20
 800246c:	e018      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x540>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800247c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002486:	2320      	movs	r3, #32
 8002488:	e003      	b.n	8002492 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800248a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	3301      	adds	r3, #1
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a0:	430b      	orrs	r3, r1
 80024a2:	e080      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x560>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0e9b      	lsrs	r3, r3, #26
 80024b6:	3301      	adds	r3, #1
 80024b8:	069b      	lsls	r3, r3, #26
 80024ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024be:	e015      	b.n	80024ec <HAL_ADC_ConfigChannel+0x58c>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e003      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	3301      	adds	r3, #1
 80024e6:	069b      	lsls	r3, r3, #26
 80024e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <HAL_ADC_ConfigChannel+0x5ac>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0e9b      	lsrs	r3, r3, #26
 80024fe:	3301      	adds	r3, #1
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	2101      	movs	r1, #1
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	e017      	b.n	800253c <HAL_ADC_ConfigChannel+0x5dc>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	61fb      	str	r3, [r7, #28]
  return result;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e003      	b.n	8002530 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	3301      	adds	r3, #1
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	ea42 0103 	orr.w	r1, r2, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10d      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x608>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0e9b      	lsrs	r3, r3, #26
 8002552:	3301      	adds	r3, #1
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	3b1e      	subs	r3, #30
 8002560:	051b      	lsls	r3, r3, #20
 8002562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002566:	e01d      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x644>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	613b      	str	r3, [r7, #16]
  return result;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d103      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e005      	b.n	8002590 <HAL_ADC_ConfigChannel+0x630>
 8002584:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	f003 021f 	and.w	r2, r3, #31
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	3b1e      	subs	r3, #30
 800259e:	051b      	lsls	r3, r3, #20
 80025a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a4:	430b      	orrs	r3, r1
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	4619      	mov	r1, r3
 80025ac:	f7ff fab5 	bl	8001b1a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b45      	ldr	r3, [pc, #276]	; (80026cc <HAL_ADC_ConfigChannel+0x76c>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d07c      	beq.n	80026b6 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025bc:	4844      	ldr	r0, [pc, #272]	; (80026d0 <HAL_ADC_ConfigChannel+0x770>)
 80025be:	f7ff fa1d 	bl	80019fc <LL_ADC_GetCommonPathInternalCh>
 80025c2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c6:	4843      	ldr	r0, [pc, #268]	; (80026d4 <HAL_ADC_ConfigChannel+0x774>)
 80025c8:	f7ff fb44 	bl	8001c54 <LL_ADC_IsEnabled>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d15e      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a40      	ldr	r2, [pc, #256]	; (80026d8 <HAL_ADC_ConfigChannel+0x778>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d127      	bne.n	800262c <HAL_ADC_ConfigChannel+0x6cc>
 80025dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d121      	bne.n	800262c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a39      	ldr	r2, [pc, #228]	; (80026d4 <HAL_ADC_ConfigChannel+0x774>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d161      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025fa:	4619      	mov	r1, r3
 80025fc:	4834      	ldr	r0, [pc, #208]	; (80026d0 <HAL_ADC_ConfigChannel+0x770>)
 80025fe:	f7ff f9ea 	bl	80019d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002602:	4b36      	ldr	r3, [pc, #216]	; (80026dc <HAL_ADC_ConfigChannel+0x77c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	099b      	lsrs	r3, r3, #6
 8002608:	4a35      	ldr	r2, [pc, #212]	; (80026e0 <HAL_ADC_ConfigChannel+0x780>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	099b      	lsrs	r3, r3, #6
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800261c:	e002      	b.n	8002624 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3b01      	subs	r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f9      	bne.n	800261e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800262a:	e044      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2c      	ldr	r2, [pc, #176]	; (80026e4 <HAL_ADC_ConfigChannel+0x784>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d113      	bne.n	800265e <HAL_ADC_ConfigChannel+0x6fe>
 8002636:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800263a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10d      	bne.n	800265e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a23      	ldr	r2, [pc, #140]	; (80026d4 <HAL_ADC_ConfigChannel+0x774>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d134      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800264c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002650:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002654:	4619      	mov	r1, r3
 8002656:	481e      	ldr	r0, [pc, #120]	; (80026d0 <HAL_ADC_ConfigChannel+0x770>)
 8002658:	f7ff f9bd 	bl	80019d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800265c:	e02b      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <HAL_ADC_ConfigChannel+0x788>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d126      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x756>
 8002668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800266c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d120      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <HAL_ADC_ConfigChannel+0x774>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d11b      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800267e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002682:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002686:	4619      	mov	r1, r3
 8002688:	4811      	ldr	r0, [pc, #68]	; (80026d0 <HAL_ADC_ConfigChannel+0x770>)
 800268a:	f7ff f9a4 	bl	80019d6 <LL_ADC_SetCommonPathInternalCh>
 800268e:	e012      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80026a2:	e008      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80026be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	37d8      	adds	r7, #216	; 0xd8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	80080000 	.word	0x80080000
 80026d0:	50040300 	.word	0x50040300
 80026d4:	50040000 	.word	0x50040000
 80026d8:	c7520000 	.word	0xc7520000
 80026dc:	20000004 	.word	0x20000004
 80026e0:	053e2d63 	.word	0x053e2d63
 80026e4:	cb840000 	.word	0xcb840000
 80026e8:	80000001 	.word	0x80000001

080026ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	db0b      	blt.n	800277a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4907      	ldr	r1, [pc, #28]	; (8002788 <__NVIC_EnableIRQ+0x38>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2001      	movs	r0, #1
 8002772:	fa00 f202 	lsl.w	r2, r0, r2
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000e100 	.word	0xe000e100

0800278c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	; (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	; (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f1c3 0307 	rsb	r3, r3, #7
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf28      	it	cs
 80027fe:	2304      	movcs	r3, #4
 8002800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	2b06      	cmp	r3, #6
 8002808:	d902      	bls.n	8002810 <NVIC_EncodePriority+0x30>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3b03      	subs	r3, #3
 800280e:	e000      	b.n	8002812 <NVIC_EncodePriority+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002828:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43d9      	mvns	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	4313      	orrs	r3, r2
         );
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	; 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff ff4c 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800286a:	f7ff ff63 	bl	8002734 <__NVIC_GetPriorityGrouping>
 800286e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68b9      	ldr	r1, [r7, #8]
 8002874:	6978      	ldr	r0, [r7, #20]
 8002876:	f7ff ffb3 	bl	80027e0 <NVIC_EncodePriority>
 800287a:	4602      	mov	r2, r0
 800287c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff82 	bl	800278c <__NVIC_SetPriority>
}
 8002888:	bf00      	nop
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff56 	bl	8002750 <__NVIC_EnableIRQ>
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ba:	e14c      	b.n	8002b56 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	4013      	ands	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 813e 	beq.w	8002b50 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d005      	beq.n	80028ec <HAL_GPIO_Init+0x40>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d130      	bne.n	800294e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002922:	2201      	movs	r2, #1
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	f003 0201 	and.w	r2, r3, #1
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b03      	cmp	r3, #3
 8002958:	d017      	beq.n	800298a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d123      	bne.n	80029de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	08da      	lsrs	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3208      	adds	r2, #8
 80029d8:	6939      	ldr	r1, [r7, #16]
 80029da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	2203      	movs	r2, #3
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0203 	and.w	r2, r3, #3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8098 	beq.w	8002b50 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002a20:	4a54      	ldr	r2, [pc, #336]	; (8002b74 <HAL_GPIO_Init+0x2c8>)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	3302      	adds	r3, #2
 8002a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	220f      	movs	r2, #15
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a4a:	d019      	beq.n	8002a80 <HAL_GPIO_Init+0x1d4>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a4a      	ldr	r2, [pc, #296]	; (8002b78 <HAL_GPIO_Init+0x2cc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d013      	beq.n	8002a7c <HAL_GPIO_Init+0x1d0>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a49      	ldr	r2, [pc, #292]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00d      	beq.n	8002a78 <HAL_GPIO_Init+0x1cc>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a48      	ldr	r2, [pc, #288]	; (8002b80 <HAL_GPIO_Init+0x2d4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d007      	beq.n	8002a74 <HAL_GPIO_Init+0x1c8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a47      	ldr	r2, [pc, #284]	; (8002b84 <HAL_GPIO_Init+0x2d8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d101      	bne.n	8002a70 <HAL_GPIO_Init+0x1c4>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	e008      	b.n	8002a82 <HAL_GPIO_Init+0x1d6>
 8002a70:	2307      	movs	r3, #7
 8002a72:	e006      	b.n	8002a82 <HAL_GPIO_Init+0x1d6>
 8002a74:	2303      	movs	r3, #3
 8002a76:	e004      	b.n	8002a82 <HAL_GPIO_Init+0x1d6>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e002      	b.n	8002a82 <HAL_GPIO_Init+0x1d6>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_GPIO_Init+0x1d6>
 8002a80:	2300      	movs	r3, #0
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	f002 0203 	and.w	r2, r2, #3
 8002a88:	0092      	lsls	r2, r2, #2
 8002a8a:	4093      	lsls	r3, r2
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a92:	4938      	ldr	r1, [pc, #224]	; (8002b74 <HAL_GPIO_Init+0x2c8>)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	3302      	adds	r3, #2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aa0:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <HAL_GPIO_Init+0x2dc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ac4:	4a30      	ldr	r2, [pc, #192]	; (8002b88 <HAL_GPIO_Init+0x2dc>)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002aca:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <HAL_GPIO_Init+0x2dc>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aee:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <HAL_GPIO_Init+0x2dc>)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002af4:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_GPIO_Init+0x2dc>)
 8002af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b1a:	4a1b      	ldr	r2, [pc, #108]	; (8002b88 <HAL_GPIO_Init+0x2dc>)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002b22:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_GPIO_Init+0x2dc>)
 8002b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b48:	4a0f      	ldr	r2, [pc, #60]	; (8002b88 <HAL_GPIO_Init+0x2dc>)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3301      	adds	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f47f aeab 	bne.w	80028bc <HAL_GPIO_Init+0x10>
  }
}
 8002b66:	bf00      	nop
 8002b68:	bf00      	nop
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40010000 	.word	0x40010000
 8002b78:	48000400 	.word	0x48000400
 8002b7c:	48000800 	.word	0x48000800
 8002b80:	48000c00 	.word	0x48000c00
 8002b84:	48001000 	.word	0x48001000
 8002b88:	58000800 	.word	0x58000800

08002b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_HSEM_IRQHandler+0x30>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002bc8:	4b08      	ldr	r3, [pc, #32]	; (8002bec <HAL_HSEM_IRQHandler+0x30>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	4906      	ldr	r1, [pc, #24]	; (8002bec <HAL_HSEM_IRQHandler+0x30>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002bd6:	4a05      	ldr	r2, [pc, #20]	; (8002bec <HAL_HSEM_IRQHandler+0x30>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f807 	bl	8002bf0 <HAL_HSEM_FreeCallback>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	58001500 	.word	0x58001500

08002bf0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e081      	b.n	8002d1a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fd fe1a 	bl	8000864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2224      	movs	r2, #36	; 0x24
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d107      	bne.n	8002c7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	e006      	b.n	8002c8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d104      	bne.n	8002c9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69d9      	ldr	r1, [r3, #28]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1a      	ldr	r2, [r3, #32]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	4611      	mov	r1, r2
 8002d30:	461a      	mov	r2, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	817b      	strh	r3, [r7, #10]
 8002d36:	460b      	mov	r3, r1
 8002d38:	813b      	strh	r3, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	f040 80f9 	bne.w	8002f3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_I2C_Mem_Write+0x34>
 8002d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0ed      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2C_Mem_Write+0x4e>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e0e6      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d7a:	f7fe fdf5 	bl	8001968 <HAL_GetTick>
 8002d7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	2319      	movs	r3, #25
 8002d86:	2201      	movs	r2, #1
 8002d88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fadd 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0d1      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2221      	movs	r2, #33	; 0x21
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2240      	movs	r2, #64	; 0x40
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a3a      	ldr	r2, [r7, #32]
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dc4:	88f8      	ldrh	r0, [r7, #6]
 8002dc6:	893a      	ldrh	r2, [r7, #8]
 8002dc8:	8979      	ldrh	r1, [r7, #10]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f9ed 	bl	80031b4 <I2C_RequestMemoryWrite>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0a9      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2bff      	cmp	r3, #255	; 0xff
 8002df4:	d90e      	bls.n	8002e14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	22ff      	movs	r2, #255	; 0xff
 8002dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	8979      	ldrh	r1, [r7, #10]
 8002e04:	2300      	movs	r3, #0
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fc09 	bl	8003624 <I2C_TransferConfig>
 8002e12:	e00f      	b.n	8002e34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	8979      	ldrh	r1, [r7, #10]
 8002e26:	2300      	movs	r3, #0
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fbf8 	bl	8003624 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fac7 	bl	80033cc <I2C_WaitOnTXISFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e07b      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d034      	beq.n	8002eec <HAL_I2C_Mem_Write+0x1c8>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d130      	bne.n	8002eec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	2200      	movs	r2, #0
 8002e92:	2180      	movs	r1, #128	; 0x80
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fa59 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e04d      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2bff      	cmp	r3, #255	; 0xff
 8002eac:	d90e      	bls.n	8002ecc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	22ff      	movs	r2, #255	; 0xff
 8002eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	8979      	ldrh	r1, [r7, #10]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 fbad 	bl	8003624 <I2C_TransferConfig>
 8002eca:	e00f      	b.n	8002eec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	8979      	ldrh	r1, [r7, #10]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 fb9c 	bl	8003624 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d19e      	bne.n	8002e34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 faa6 	bl	800344c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e01a      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_I2C_Mem_Write+0x224>)
 8002f1e:	400b      	ands	r3, r1
 8002f20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
  }
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	fe00e800 	.word	0xfe00e800

08002f4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	4608      	mov	r0, r1
 8002f56:	4611      	mov	r1, r2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	817b      	strh	r3, [r7, #10]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	813b      	strh	r3, [r7, #8]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	f040 80fd 	bne.w	800316e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_I2C_Mem_Read+0x34>
 8002f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0f1      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_I2C_Mem_Read+0x4e>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e0ea      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fa2:	f7fe fce1 	bl	8001968 <HAL_GetTick>
 8002fa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2319      	movs	r3, #25
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f9c9 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0d5      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2222      	movs	r2, #34	; 0x22
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2240      	movs	r2, #64	; 0x40
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a3a      	ldr	r2, [r7, #32]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fec:	88f8      	ldrh	r0, [r7, #6]
 8002fee:	893a      	ldrh	r2, [r7, #8]
 8002ff0:	8979      	ldrh	r1, [r7, #10]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f92d 	bl	800325c <I2C_RequestMemoryRead>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0ad      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	2bff      	cmp	r3, #255	; 0xff
 800301c:	d90e      	bls.n	800303c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	22ff      	movs	r2, #255	; 0xff
 8003022:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003028:	b2da      	uxtb	r2, r3
 800302a:	8979      	ldrh	r1, [r7, #10]
 800302c:	4b52      	ldr	r3, [pc, #328]	; (8003178 <HAL_I2C_Mem_Read+0x22c>)
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 faf5 	bl	8003624 <I2C_TransferConfig>
 800303a:	e00f      	b.n	800305c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	b2da      	uxtb	r2, r3
 800304c:	8979      	ldrh	r1, [r7, #10]
 800304e:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <HAL_I2C_Mem_Read+0x22c>)
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fae4 	bl	8003624 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	2200      	movs	r2, #0
 8003064:	2104      	movs	r1, #4
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f970 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07c      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d034      	beq.n	800311c <HAL_I2C_Mem_Read+0x1d0>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d130      	bne.n	800311c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	2200      	movs	r2, #0
 80030c2:	2180      	movs	r1, #128	; 0x80
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f941 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e04d      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2bff      	cmp	r3, #255	; 0xff
 80030dc:	d90e      	bls.n	80030fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	22ff      	movs	r2, #255	; 0xff
 80030e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	8979      	ldrh	r1, [r7, #10]
 80030ec:	2300      	movs	r3, #0
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fa95 	bl	8003624 <I2C_TransferConfig>
 80030fa:	e00f      	b.n	800311c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	b2da      	uxtb	r2, r3
 800310c:	8979      	ldrh	r1, [r7, #10]
 800310e:	2300      	movs	r3, #0
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fa84 	bl	8003624 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d19a      	bne.n	800305c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f98e 	bl	800344c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e01a      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2220      	movs	r2, #32
 8003140:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_I2C_Mem_Read+0x230>)
 800314e:	400b      	ands	r3, r1
 8003150:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	80002400 	.word	0x80002400
 800317c:	fe00e800 	.word	0xfe00e800

08003180 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	68f9      	ldr	r1, [r7, #12]
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
  }
}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	4608      	mov	r0, r1
 80031be:	4611      	mov	r1, r2
 80031c0:	461a      	mov	r2, r3
 80031c2:	4603      	mov	r3, r0
 80031c4:	817b      	strh	r3, [r7, #10]
 80031c6:	460b      	mov	r3, r1
 80031c8:	813b      	strh	r3, [r7, #8]
 80031ca:	4613      	mov	r3, r2
 80031cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	8979      	ldrh	r1, [r7, #10]
 80031d4:	4b20      	ldr	r3, [pc, #128]	; (8003258 <I2C_RequestMemoryWrite+0xa4>)
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fa21 	bl	8003624 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	69b9      	ldr	r1, [r7, #24]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f8f0 	bl	80033cc <I2C_WaitOnTXISFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e02c      	b.n	8003250 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d105      	bne.n	8003208 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031fc:	893b      	ldrh	r3, [r7, #8]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
 8003206:	e015      	b.n	8003234 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003208:	893b      	ldrh	r3, [r7, #8]
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	b29b      	uxth	r3, r3
 800320e:	b2da      	uxtb	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	69b9      	ldr	r1, [r7, #24]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f8d6 	bl	80033cc <I2C_WaitOnTXISFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e012      	b.n	8003250 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800322a:	893b      	ldrh	r3, [r7, #8]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2200      	movs	r2, #0
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f884 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	80002000 	.word	0x80002000

0800325c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	4608      	mov	r0, r1
 8003266:	4611      	mov	r1, r2
 8003268:	461a      	mov	r2, r3
 800326a:	4603      	mov	r3, r0
 800326c:	817b      	strh	r3, [r7, #10]
 800326e:	460b      	mov	r3, r1
 8003270:	813b      	strh	r3, [r7, #8]
 8003272:	4613      	mov	r3, r2
 8003274:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	8979      	ldrh	r1, [r7, #10]
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <I2C_RequestMemoryRead+0xa4>)
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2300      	movs	r3, #0
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f9ce 	bl	8003624 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	69b9      	ldr	r1, [r7, #24]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f89d 	bl	80033cc <I2C_WaitOnTXISFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e02c      	b.n	80032f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032a2:	893b      	ldrh	r3, [r7, #8]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
 80032ac:	e015      	b.n	80032da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032ae:	893b      	ldrh	r3, [r7, #8]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	69b9      	ldr	r1, [r7, #24]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f883 	bl	80033cc <I2C_WaitOnTXISFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e012      	b.n	80032f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032d0:	893b      	ldrh	r3, [r7, #8]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2200      	movs	r2, #0
 80032e2:	2140      	movs	r1, #64	; 0x40
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f831 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	80002000 	.word	0x80002000

08003304 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d103      	bne.n	8003322 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2200      	movs	r2, #0
 8003320:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d007      	beq.n	8003340 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	619a      	str	r2, [r3, #24]
  }
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800335c:	e022      	b.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003364:	d01e      	beq.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fe faff 	bl	8001968 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d113      	bne.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	f043 0220 	orr.w	r2, r3, #32
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e00f      	b.n	80033c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4013      	ands	r3, r2
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d0cd      	beq.n	800335e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033d8:	e02c      	b.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f870 	bl	80034c4 <I2C_IsErrorOccurred>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e02a      	b.n	8003444 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f4:	d01e      	beq.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7fe fab7 	bl	8001968 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d113      	bne.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e007      	b.n	8003444 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d1cb      	bne.n	80033da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003458:	e028      	b.n	80034ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f830 	bl	80034c4 <I2C_IsErrorOccurred>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e026      	b.n	80034bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346e:	f7fe fa7b 	bl	8001968 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d113      	bne.n	80034ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e007      	b.n	80034bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	d1cf      	bne.n	800345a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d040      	beq.n	800356c <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034f8:	d01d      	beq.n	8003536 <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003508:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800350a:	e014      	b.n	8003536 <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003512:	d010      	beq.n	8003536 <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003514:	f7fe fa28 	bl	8001968 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	429a      	cmp	r2, r3
 8003522:	d302      	bcc.n	800352a <I2C_IsErrorOccurred+0x66>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f043 0320 	orr.w	r3, r3, #32
 8003530:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b20      	cmp	r3, #32
 8003542:	d002      	beq.n	800354a <I2C_IsErrorOccurred+0x86>
 8003544:	7ffb      	ldrb	r3, [r7, #31]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0e0      	beq.n	800350c <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800354a:	7ffb      	ldrb	r3, [r7, #31]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d103      	bne.n	8003558 <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2220      	movs	r2, #32
 8003556:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2210      	movs	r2, #16
 800355e:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800358e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f043 0308 	orr.w	r3, r3, #8
 80035a4:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f043 0302 	orr.w	r3, r3, #2
 80035c4:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 80035d4:	7ffb      	ldrb	r3, [r7, #31]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d01c      	beq.n	8003614 <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f7ff fe92 	bl	8003304 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <I2C_IsErrorOccurred+0x15c>)
 80035ec:	400b      	ands	r3, r1
 80035ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003614:	7ffb      	ldrb	r3, [r7, #31]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	fe00e800 	.word	0xfe00e800

08003624 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	460b      	mov	r3, r1
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	4613      	mov	r3, r2
 8003634:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003636:	897b      	ldrh	r3, [r7, #10]
 8003638:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800363c:	7a7b      	ldrb	r3, [r7, #9]
 800363e:	041b      	lsls	r3, r3, #16
 8003640:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003644:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	4313      	orrs	r3, r2
 800364e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003652:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	0d5b      	lsrs	r3, r3, #21
 800365e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <I2C_TransferConfig+0x60>)
 8003664:	430b      	orrs	r3, r1
 8003666:	43db      	mvns	r3, r3
 8003668:	ea02 0103 	and.w	r1, r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	03ff63ff 	.word	0x03ff63ff

08003688 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b20      	cmp	r3, #32
 800369c:	d138      	bne.n	8003710 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e032      	b.n	8003712 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	; 0x24
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	e000      	b.n	8003712 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003710:	2302      	movs	r3, #2
  }
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b20      	cmp	r3, #32
 8003732:	d139      	bne.n	80037a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800373e:	2302      	movs	r3, #2
 8003740:	e033      	b.n	80037aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2224      	movs	r2, #36	; 0x24
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003770:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	e000      	b.n	80037aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037a8:	2302      	movs	r3, #2
  }
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01e      	beq.n	8003808 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_IPCC_Init+0x60>)
 80037cc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd f90c 	bl	80009f8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80037e0:	68b8      	ldr	r0, [r7, #8]
 80037e2:	f000 f85b 	bl	800389c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f82c 	bl	8003850 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003806:	e001      	b.n	800380c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800380c:	7bfb      	ldrb	r3, [r7, #15]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	58000c00 	.word	0x58000c00

0800381c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	4613      	mov	r3, r2
 8003842:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e00f      	b.n	800387e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	4a0b      	ldr	r2, [pc, #44]	; (8003894 <IPCC_SetDefaultCallbacks+0x44>)
 8003868:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3306      	adds	r3, #6
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	4a08      	ldr	r2, [pc, #32]	; (8003898 <IPCC_SetDefaultCallbacks+0x48>)
 8003876:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3301      	adds	r3, #1
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b05      	cmp	r3, #5
 8003882:	d9ec      	bls.n	800385e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	0800381d 	.word	0x0800381d
 8003898:	08003837 	.word	0x08003837

0800389c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80038b0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	223f      	movs	r2, #63	; 0x3f
 80038b6:	609a      	str	r2, [r3, #8]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	b08b      	sub	sp, #44	; 0x2c
 80038c8:	af06      	add	r7, sp, #24
 80038ca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e0d7      	b.n	8003a86 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f00d fc78 	bl	80111e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2203      	movs	r2, #3
 80038f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f005 fec8 	bl	8009692 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
 8003906:	e04c      	b.n	80039a2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	3301      	adds	r3, #1
 800391a:	2201      	movs	r2, #1
 800391c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	7bfa      	ldrb	r2, [r7, #15]
 8003930:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	b298      	uxth	r0, r3
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	440b      	add	r3, r1
 8003944:	3336      	adds	r3, #54	; 0x36
 8003946:	4602      	mov	r2, r0
 8003948:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	3303      	adds	r3, #3
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	440b      	add	r3, r1
 800396e:	3338      	adds	r3, #56	; 0x38
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	440b      	add	r3, r1
 8003982:	333c      	adds	r3, #60	; 0x3c
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	440b      	add	r3, r1
 8003996:	3340      	adds	r3, #64	; 0x40
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	3301      	adds	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
 80039a2:	7bfa      	ldrb	r2, [r7, #15]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d3ad      	bcc.n	8003908 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ac:	2300      	movs	r3, #0
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e044      	b.n	8003a3c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039b2:	7bfa      	ldrb	r2, [r7, #15]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	440b      	add	r3, r1
 80039c0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80039c4:	2200      	movs	r2, #0
 80039c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	440b      	add	r3, r1
 80039ec:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039f4:	7bfa      	ldrb	r2, [r7, #15]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	440b      	add	r3, r1
 8003a02:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a0a:	7bfa      	ldrb	r2, [r7, #15]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	440b      	add	r3, r1
 8003a18:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	440b      	add	r3, r1
 8003a2e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d3b5      	bcc.n	80039b2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	687e      	ldr	r6, [r7, #4]
 8003a4e:	466d      	mov	r5, sp
 8003a50:	f106 0410 	add.w	r4, r6, #16
 8003a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	602b      	str	r3, [r5, #0]
 8003a5c:	1d33      	adds	r3, r6, #4
 8003a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a60:	6838      	ldr	r0, [r7, #0]
 8003a62:	f005 fe31 	bl	80096c8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d102      	bne.n	8003a84 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f001 fc29 	bl	80052d6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_PCD_Start+0x16>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e012      	b.n	8003aca <HAL_PCD_Start+0x3c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f005 fdd7 	bl	8009664 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f007 fd8c 	bl	800b5d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f007 fd91 	bl	800b606 <USB_ReadInterrupts>
 8003ae4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fb26 	bl	8004142 <PCD_EP_ISR_Handler>

    return;
 8003af6:	e110      	b.n	8003d1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d013      	beq.n	8003b2a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b14:	b292      	uxth	r2, r2
 8003b16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f00d fc03 	bl	8011326 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b20:	2100      	movs	r1, #0
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8fc 	bl	8003d20 <HAL_PCD_SetAddress>

    return;
 8003b28:	e0f7      	b.n	8003d1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00c      	beq.n	8003b4e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b46:	b292      	uxth	r2, r2
 8003b48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b4c:	e0e5      	b.n	8003d1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00c      	beq.n	8003b72 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b6a:	b292      	uxth	r2, r2
 8003b6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b70:	e0d3      	b.n	8003d1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d034      	beq.n	8003be6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0204 	bic.w	r2, r2, #4
 8003b8e:	b292      	uxth	r2, r2
 8003b90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0208 	bic.w	r2, r2, #8
 8003ba6:	b292      	uxth	r2, r2
 8003ba8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d107      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f00d fda7 	bl	8011714 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f00d fbe6 	bl	8011398 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bde:	b292      	uxth	r2, r2
 8003be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003be4:	e099      	b.n	8003d1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d027      	beq.n	8003c40 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0208 	orr.w	r2, r2, #8
 8003c02:	b292      	uxth	r2, r2
 8003c04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c1a:	b292      	uxth	r2, r2
 8003c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0204 	orr.w	r2, r2, #4
 8003c32:	b292      	uxth	r2, r2
 8003c34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f00d fb93 	bl	8011364 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003c3e:	e06c      	b.n	8003d1a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d040      	beq.n	8003ccc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c5c:	b292      	uxth	r2, r2
 8003c5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d12b      	bne.n	8003cc4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0204 	orr.w	r2, r2, #4
 8003c7e:	b292      	uxth	r2, r2
 8003c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0208 	orr.w	r2, r2, #8
 8003c96:	b292      	uxth	r2, r2
 8003c98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	089b      	lsrs	r3, r3, #2
 8003cb0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003cba:	2101      	movs	r1, #1
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f00d fd29 	bl	8011714 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003cc2:	e02a      	b.n	8003d1a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f00d fb4d 	bl	8011364 <HAL_PCD_SuspendCallback>
    return;
 8003cca:	e026      	b.n	8003d1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00f      	beq.n	8003cf6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ce8:	b292      	uxth	r2, r2
 8003cea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f00d fb0b 	bl	801130a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003cf4:	e011      	b.n	8003d1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00c      	beq.n	8003d1a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d12:	b292      	uxth	r2, r2
 8003d14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003d18:	bf00      	nop
  }
}
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_PCD_SetAddress+0x1a>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e013      	b.n	8003d62 <HAL_PCD_SetAddress+0x42>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f007 fc2c 	bl	800b5b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	4608      	mov	r0, r1
 8003d74:	4611      	mov	r1, r2
 8003d76:	461a      	mov	r2, r3
 8003d78:	4603      	mov	r3, r0
 8003d7a:	70fb      	strb	r3, [r7, #3]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	803b      	strh	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	da0e      	bge.n	8003dae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4413      	add	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	705a      	strb	r2, [r3, #1]
 8003dac:	e00e      	b.n	8003dcc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	f003 0207 	and.w	r2, r3, #7
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003dd8:	883a      	ldrh	r2, [r7, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	78ba      	ldrb	r2, [r7, #2]
 8003de2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	785b      	ldrb	r3, [r3, #1]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003df6:	78bb      	ldrb	r3, [r7, #2]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d102      	bne.n	8003e02 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_PCD_EP_Open+0xa6>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e00e      	b.n	8003e2e <HAL_PCD_EP_Open+0xc4>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68f9      	ldr	r1, [r7, #12]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f005 fc74 	bl	800970c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003e2c:	7afb      	ldrb	r3, [r7, #11]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	da0e      	bge.n	8003e68 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	705a      	strb	r2, [r3, #1]
 8003e66:	e00e      	b.n	8003e86 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	f003 0207 	and.w	r2, r3, #7
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_PCD_EP_Close+0x6a>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e00e      	b.n	8003ebe <HAL_PCD_EP_Close+0x88>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f005 ffc0 	bl	8009e34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b086      	sub	sp, #24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ed6:	7afb      	ldrb	r3, [r7, #11]
 8003ed8:	f003 0207 	and.w	r2, r3, #7
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2200      	movs	r2, #0
 8003f04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f06:	7afb      	ldrb	r3, [r7, #11]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d106      	bne.n	8003f2a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6979      	ldr	r1, [r7, #20]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f006 f973 	bl	800a20e <USB_EPStartXfer>
 8003f28:	e005      	b.n	8003f36 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6979      	ldr	r1, [r7, #20]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f006 f96c 	bl	800a20e <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	f003 0207 	and.w	r2, r3, #7
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	440b      	add	r3, r1
 8003f5e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f80:	7afb      	ldrb	r3, [r7, #11]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fbc:	7afb      	ldrb	r3, [r7, #11]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fc8:	7afb      	ldrb	r3, [r7, #11]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6979      	ldr	r1, [r7, #20]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f006 f918 	bl	800a20e <USB_EPStartXfer>
 8003fde:	e005      	b.n	8003fec <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6979      	ldr	r1, [r7, #20]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f006 f911 	bl	800a20e <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	460b      	mov	r3, r1
 8004000:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	f003 0207 	and.w	r2, r3, #7
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	429a      	cmp	r2, r3
 800400e:	d901      	bls.n	8004014 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e03e      	b.n	8004092 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004018:	2b00      	cmp	r3, #0
 800401a:	da0e      	bge.n	800403a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4413      	add	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	705a      	strb	r2, [r3, #1]
 8004038:	e00c      	b.n	8004054 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4413      	add	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	b2da      	uxtb	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_PCD_EP_SetStall+0x7e>
 8004070:	2302      	movs	r3, #2
 8004072:	e00e      	b.n	8004092 <HAL_PCD_EP_SetStall+0x9c>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68f9      	ldr	r1, [r7, #12]
 8004082:	4618      	mov	r0, r3
 8004084:	f007 f995 	bl	800b3b2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	f003 020f 	and.w	r2, r3, #15
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d901      	bls.n	80040b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e040      	b.n	800413a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	da0e      	bge.n	80040de <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	4413      	add	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	705a      	strb	r2, [r3, #1]
 80040dc:	e00e      	b.n	80040fc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040de:	78fb      	ldrb	r3, [r7, #3]
 80040e0:	f003 0207 	and.w	r2, r3, #7
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	4413      	add	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_PCD_EP_ClrStall+0x82>
 8004118:	2302      	movs	r3, #2
 800411a:	e00e      	b.n	800413a <HAL_PCD_EP_ClrStall+0xa0>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68f9      	ldr	r1, [r7, #12]
 800412a:	4618      	mov	r0, r3
 800412c:	f007 f992 	bl	800b454 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b096      	sub	sp, #88	; 0x58
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800414a:	e39c      	b.n	8004886 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004154:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004158:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004166:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800416a:	2b00      	cmp	r3, #0
 800416c:	f040 815e 	bne.w	800442c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004170:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	d150      	bne.n	800421e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418c:	81fb      	strh	r3, [r7, #14]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	89fb      	ldrh	r3, [r7, #14]
 8004194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419c:	b29b      	uxth	r3, r3
 800419e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3328      	adds	r3, #40	; 0x28
 80041a4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4413      	add	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	4413      	add	r3, r2
 80041c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80041ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	441a      	add	r2, r3
 80041d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041da:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80041dc:	2100      	movs	r1, #0
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f00d f879 	bl	80112d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 834a 	beq.w	8004886 <PCD_EP_ISR_Handler+0x744>
 80041f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 8345 	bne.w	8004886 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004208:	b2da      	uxtb	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	b292      	uxth	r2, r2
 8004210:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800421c:	e333      	b.n	8004886 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004224:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004230:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004238:	2b00      	cmp	r3, #0
 800423a:	d032      	beq.n	80042a2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004244:	b29b      	uxth	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4413      	add	r3, r2
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	4413      	add	r3, r2
 8004256:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004262:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800426e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004270:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004274:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004276:	b29b      	uxth	r3, r3
 8004278:	f007 fa17 	bl	800b6aa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29a      	uxth	r2, r3
 8004284:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004288:	4013      	ands	r3, r2
 800428a:	823b      	strh	r3, [r7, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	8a3a      	ldrh	r2, [r7, #16]
 8004292:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004296:	b292      	uxth	r2, r2
 8004298:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f00c ffee 	bl	801127c <HAL_PCD_SetupStageCallback>
 80042a0:	e2f1      	b.n	8004886 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80042a2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f280 82ed 	bge.w	8004886 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80042b8:	4013      	ands	r3, r2
 80042ba:	83fb      	strh	r3, [r7, #30]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	8bfa      	ldrh	r2, [r7, #30]
 80042c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042c6:	b292      	uxth	r2, r2
 80042c8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4413      	add	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	4413      	add	r3, r2
 80042e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80042f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d019      	beq.n	800432e <PCD_EP_ISR_Handler+0x1ec>
 80042fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d015      	beq.n	800432e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004308:	6959      	ldr	r1, [r3, #20]
 800430a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800430e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004310:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004312:	b29b      	uxth	r3, r3
 8004314:	f007 f9c9 	bl	800b6aa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	441a      	add	r2, r3
 8004322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004324:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004326:	2100      	movs	r1, #0
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f00c ffb9 	bl	80112a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800433a:	2b00      	cmp	r3, #0
 800433c:	f040 82a3 	bne.w	8004886 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	4413      	add	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b3e      	cmp	r3, #62	; 0x3e
 8004366:	d918      	bls.n	800439a <PCD_EP_ISR_Handler+0x258>
 8004368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	647b      	str	r3, [r7, #68]	; 0x44
 8004370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	2b00      	cmp	r3, #0
 800437a:	d102      	bne.n	8004382 <PCD_EP_ISR_Handler+0x240>
 800437c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437e:	3b01      	subs	r3, #1
 8004380:	647b      	str	r3, [r7, #68]	; 0x44
 8004382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004384:	b29b      	uxth	r3, r3
 8004386:	029b      	lsls	r3, r3, #10
 8004388:	b29b      	uxth	r3, r3
 800438a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800438e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004392:	b29a      	uxth	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	801a      	strh	r2, [r3, #0]
 8004398:	e029      	b.n	80043ee <PCD_EP_ISR_Handler+0x2ac>
 800439a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d112      	bne.n	80043c8 <PCD_EP_ISR_Handler+0x286>
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	801a      	strh	r2, [r3, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	801a      	strh	r2, [r3, #0]
 80043c6:	e012      	b.n	80043ee <PCD_EP_ISR_Handler+0x2ac>
 80043c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	647b      	str	r3, [r7, #68]	; 0x44
 80043d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <PCD_EP_ISR_Handler+0x2a0>
 80043dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043de:	3301      	adds	r3, #1
 80043e0:	647b      	str	r3, [r7, #68]	; 0x44
 80043e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	029b      	lsls	r3, r3, #10
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fe:	827b      	strh	r3, [r7, #18]
 8004400:	8a7b      	ldrh	r3, [r7, #18]
 8004402:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004406:	827b      	strh	r3, [r7, #18]
 8004408:	8a7b      	ldrh	r3, [r7, #18]
 800440a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800440e:	827b      	strh	r3, [r7, #18]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	8a7b      	ldrh	r3, [r7, #18]
 8004416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800441a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800441e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004426:	b29b      	uxth	r3, r3
 8004428:	8013      	strh	r3, [r2, #0]
 800442a:	e22c      	b.n	8004886 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004440:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004444:	2b00      	cmp	r3, #0
 8004446:	f280 80f6 	bge.w	8004636 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29a      	uxth	r2, r3
 800445c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004460:	4013      	ands	r3, r2
 8004462:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004478:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800447c:	b292      	uxth	r2, r2
 800447e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004480:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004498:	7b1b      	ldrb	r3, [r3, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d123      	bne.n	80044e6 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4413      	add	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	4413      	add	r3, r2
 80044b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80044c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 808e 	beq.w	80045ec <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d6:	6959      	ldr	r1, [r3, #20]
 80044d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044da:	88da      	ldrh	r2, [r3, #6]
 80044dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80044e0:	f007 f8e3 	bl	800b6aa <USB_ReadPMA>
 80044e4:	e082      	b.n	80045ec <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80044e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e8:	78db      	ldrb	r3, [r3, #3]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d10a      	bne.n	8004504 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80044ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80044f2:	461a      	mov	r2, r3
 80044f4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f9d3 	bl	80048a2 <HAL_PCD_EP_DB_Receive>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004502:	e073      	b.n	80045ec <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	441a      	add	r2, r3
 8004530:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800453c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004540:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004544:	b29b      	uxth	r3, r3
 8004546:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d022      	beq.n	80045a8 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800456a:	b29b      	uxth	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4413      	add	r3, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	4413      	add	r3, r2
 800457c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004586:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800458a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800458e:	2b00      	cmp	r3, #0
 8004590:	d02c      	beq.n	80045ec <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004598:	6959      	ldr	r1, [r3, #20]
 800459a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459c:	891a      	ldrh	r2, [r3, #8]
 800459e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045a2:	f007 f882 	bl	800b6aa <USB_ReadPMA>
 80045a6:	e021      	b.n	80045ec <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	4413      	add	r3, r2
 80045c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80045d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045de:	6959      	ldr	r1, [r3, #20]
 80045e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e2:	895a      	ldrh	r2, [r3, #10]
 80045e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045e8:	f007 f85f 	bl	800b6aa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80045ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045f4:	441a      	add	r2, r3
 80045f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80045fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004602:	441a      	add	r2, r3
 8004604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004606:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <PCD_EP_ISR_Handler+0x4da>
 8004610:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	429a      	cmp	r2, r3
 800461a:	d206      	bcs.n	800462a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800461c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f00c fe3c 	bl	80112a0 <HAL_PCD_DataOutStageCallback>
 8004628:	e005      	b.n	8004636 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004630:	4618      	mov	r0, r3
 8004632:	f005 fdec 	bl	800a20e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004636:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800463a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 8121 	beq.w	8004886 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8004644:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29b      	uxth	r3, r3
 800466a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800466e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004672:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	441a      	add	r2, r3
 8004684:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800468c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004690:	b29b      	uxth	r3, r3
 8004692:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8004694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004696:	78db      	ldrb	r3, [r3, #3]
 8004698:	2b02      	cmp	r3, #2
 800469a:	f000 80a2 	beq.w	80047e2 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800469e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a0:	2200      	movs	r2, #0
 80046a2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80046a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a6:	7b1b      	ldrb	r3, [r3, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8093 	beq.w	80047d4 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80046b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d046      	beq.n	8004748 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046bc:	785b      	ldrb	r3, [r3, #1]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d126      	bne.n	8004710 <PCD_EP_ISR_Handler+0x5ce>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	4413      	add	r3, r2
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
 80046da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	00da      	lsls	r2, r3, #3
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	4413      	add	r3, r2
 80046e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004708:	b29a      	uxth	r2, r3
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	801a      	strh	r2, [r3, #0]
 800470e:	e061      	b.n	80047d4 <PCD_EP_ISR_Handler+0x692>
 8004710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004712:	785b      	ldrb	r3, [r3, #1]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d15d      	bne.n	80047d4 <PCD_EP_ISR_Handler+0x692>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004726:	b29b      	uxth	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	4413      	add	r3, r2
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	00da      	lsls	r2, r3, #3
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	4413      	add	r3, r2
 800473a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	2200      	movs	r2, #0
 8004744:	801a      	strh	r2, [r3, #0]
 8004746:	e045      	b.n	80047d4 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800474e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004750:	785b      	ldrb	r3, [r3, #1]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d126      	bne.n	80047a4 <PCD_EP_ISR_Handler+0x662>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	637b      	str	r3, [r7, #52]	; 0x34
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004764:	b29b      	uxth	r3, r3
 8004766:	461a      	mov	r2, r3
 8004768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476a:	4413      	add	r3, r2
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
 800476e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	00da      	lsls	r2, r3, #3
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004776:	4413      	add	r3, r2
 8004778:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800477c:	633b      	str	r3, [r7, #48]	; 0x30
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004788:	b29a      	uxth	r2, r3
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	801a      	strh	r2, [r3, #0]
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800479c:	b29a      	uxth	r2, r3
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	801a      	strh	r2, [r3, #0]
 80047a2:	e017      	b.n	80047d4 <PCD_EP_ISR_Handler+0x692>
 80047a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a6:	785b      	ldrb	r3, [r3, #1]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d113      	bne.n	80047d4 <PCD_EP_ISR_Handler+0x692>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ba:	4413      	add	r3, r2
 80047bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	00da      	lsls	r2, r3, #3
 80047c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c6:	4413      	add	r3, r2
 80047c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	2200      	movs	r2, #0
 80047d2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	4619      	mov	r1, r3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f00c fd7b 	bl	80112d6 <HAL_PCD_DataInStageCallback>
 80047e0:	e051      	b.n	8004886 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80047e2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d144      	bne.n	8004878 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4413      	add	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	4413      	add	r3, r2
 8004808:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004812:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800481e:	429a      	cmp	r2, r3
 8004820:	d907      	bls.n	8004832 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800482a:	1ad2      	subs	r2, r2, r3
 800482c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482e:	619a      	str	r2, [r3, #24]
 8004830:	e002      	b.n	8004838 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8004832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004834:	2200      	movs	r2, #0
 8004836:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	4619      	mov	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f00c fd45 	bl	80112d6 <HAL_PCD_DataInStageCallback>
 800484c:	e01b      	b.n	8004886 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800484e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004856:	441a      	add	r2, r3
 8004858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800485c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004864:	441a      	add	r2, r3
 8004866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004868:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004870:	4618      	mov	r0, r3
 8004872:	f005 fccc 	bl	800a20e <USB_EPStartXfer>
 8004876:	e006      	b.n	8004886 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004878:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800487c:	461a      	mov	r2, r3
 800487e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f917 	bl	8004ab4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800488e:	b29b      	uxth	r3, r3
 8004890:	b21b      	sxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	f6ff ac5a 	blt.w	800414c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3758      	adds	r7, #88	; 0x58
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b088      	sub	sp, #32
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	4613      	mov	r3, r2
 80048ae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d07c      	beq.n	80049b4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	461a      	mov	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	4413      	add	r3, r2
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	4413      	add	r3, r2
 80048d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048de:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	699a      	ldr	r2, [r3, #24]
 80048e4:	8b7b      	ldrh	r3, [r7, #26]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d306      	bcc.n	80048f8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	8b7b      	ldrh	r3, [r7, #26]
 80048f0:	1ad2      	subs	r2, r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	619a      	str	r2, [r3, #24]
 80048f6:	e002      	b.n	80048fe <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d123      	bne.n	800494e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800491c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004920:	833b      	strh	r3, [r7, #24]
 8004922:	8b3b      	ldrh	r3, [r7, #24]
 8004924:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004928:	833b      	strh	r3, [r7, #24]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	441a      	add	r2, r3
 8004938:	8b3b      	ldrh	r3, [r7, #24]
 800493a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800493e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494a:	b29b      	uxth	r3, r3
 800494c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01f      	beq.n	8004998 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004972:	82fb      	strh	r3, [r7, #22]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	441a      	add	r2, r3
 8004982:	8afb      	ldrh	r3, [r7, #22]
 8004984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004990:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004994:	b29b      	uxth	r3, r3
 8004996:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004998:	8b7b      	ldrh	r3, [r7, #26]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8085 	beq.w	8004aaa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	6959      	ldr	r1, [r3, #20]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	891a      	ldrh	r2, [r3, #8]
 80049ac:	8b7b      	ldrh	r3, [r7, #26]
 80049ae:	f006 fe7c 	bl	800b6aa <USB_ReadPMA>
 80049b2:	e07a      	b.n	8004aaa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049bc:	b29b      	uxth	r3, r3
 80049be:	461a      	mov	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	4413      	add	r3, r2
 80049ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	8b7b      	ldrh	r3, [r7, #26]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d306      	bcc.n	80049f2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	699a      	ldr	r2, [r3, #24]
 80049e8:	8b7b      	ldrh	r3, [r7, #26]
 80049ea:	1ad2      	subs	r2, r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	619a      	str	r2, [r3, #24]
 80049f0:	e002      	b.n	80049f8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2200      	movs	r2, #0
 80049f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d123      	bne.n	8004a48 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1a:	83fb      	strh	r3, [r7, #30]
 8004a1c:	8bfb      	ldrh	r3, [r7, #30]
 8004a1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a22:	83fb      	strh	r3, [r7, #30]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	8bfb      	ldrh	r3, [r7, #30]
 8004a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11f      	bne.n	8004a92 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6c:	83bb      	strh	r3, [r7, #28]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	441a      	add	r2, r3
 8004a7c:	8bbb      	ldrh	r3, [r7, #28]
 8004a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a92:	8b7b      	ldrh	r3, [r7, #26]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6959      	ldr	r1, [r3, #20]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	895a      	ldrh	r2, [r3, #10]
 8004aa4:	8b7b      	ldrh	r3, [r7, #26]
 8004aa6:	f006 fe00 	bl	800b6aa <USB_ReadPMA>
    }
  }

  return count;
 8004aaa:	8b7b      	ldrh	r3, [r7, #26]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b0a2      	sub	sp, #136	; 0x88
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 81c5 	beq.w	8004e58 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004af2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d907      	bls.n	8004b12 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b0a:	1ad2      	subs	r2, r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	619a      	str	r2, [r3, #24]
 8004b10:	e002      	b.n	8004b18 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2200      	movs	r2, #0
 8004b16:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f040 80b9 	bne.w	8004c94 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	785b      	ldrb	r3, [r3, #1]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d126      	bne.n	8004b78 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	4413      	add	r3, r2
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	00da      	lsls	r2, r3, #3
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	801a      	strh	r2, [r3, #0]
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	801a      	strh	r2, [r3, #0]
 8004b76:	e01a      	b.n	8004bae <HAL_PCD_EP_DB_Transmit+0xfa>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d116      	bne.n	8004bae <HAL_PCD_EP_DB_Transmit+0xfa>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	633b      	str	r3, [r7, #48]	; 0x30
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	4413      	add	r3, r2
 8004b96:	633b      	str	r3, [r7, #48]	; 0x30
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	00da      	lsls	r2, r3, #3
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	2200      	movs	r2, #0
 8004bac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	623b      	str	r3, [r7, #32]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d126      	bne.n	8004c0a <HAL_PCD_EP_DB_Transmit+0x156>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	00da      	lsls	r2, r3, #3
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	801a      	strh	r2, [r3, #0]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	801a      	strh	r2, [r3, #0]
 8004c08:	e017      	b.n	8004c3a <HAL_PCD_EP_DB_Transmit+0x186>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d113      	bne.n	8004c3a <HAL_PCD_EP_DB_Transmit+0x186>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	4413      	add	r3, r2
 8004c22:	623b      	str	r3, [r7, #32]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	00da      	lsls	r2, r3, #3
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	2200      	movs	r2, #0
 8004c38:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f00c fb48 	bl	80112d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 82d2 	beq.w	80051f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6c:	827b      	strh	r3, [r7, #18]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	441a      	add	r2, r3
 8004c7c:	8a7b      	ldrh	r3, [r7, #18]
 8004c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	8013      	strh	r3, [r2, #0]
 8004c92:	e2b0      	b.n	80051f6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d021      	beq.n	8004ce2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	f040 8284 	bne.w	80051f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	695a      	ldr	r2, [r3, #20]
 8004cf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cf6:	441a      	add	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d04:	441a      	add	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d309      	bcc.n	8004d2a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	6a1a      	ldr	r2, [r3, #32]
 8004d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d22:	1ad2      	subs	r2, r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	621a      	str	r2, [r3, #32]
 8004d28:	e015      	b.n	8004d56 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d107      	bne.n	8004d42 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004d32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d40:	e009      	b.n	8004d56 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2200      	movs	r2, #0
 8004d54:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d155      	bne.n	8004e0a <HAL_PCD_EP_DB_Transmit+0x356>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	4413      	add	r3, r2
 8004d74:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	00da      	lsls	r2, r3, #3
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7e:	4413      	add	r3, r2
 8004d80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
 8004d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d88:	2b3e      	cmp	r3, #62	; 0x3e
 8004d8a:	d916      	bls.n	8004dba <HAL_PCD_EP_DB_Transmit+0x306>
 8004d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	029b      	lsls	r3, r3, #10
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	801a      	strh	r2, [r3, #0]
 8004db8:	e043      	b.n	8004e42 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d112      	bne.n	8004de6 <HAL_PCD_EP_DB_Transmit+0x332>
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dce:	801a      	strh	r2, [r3, #0]
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de2:	801a      	strh	r2, [r3, #0]
 8004de4:	e02d      	b.n	8004e42 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_PCD_EP_DB_Transmit+0x348>
 8004df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df8:	3301      	adds	r3, #1
 8004dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	029b      	lsls	r3, r3, #10
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	e01b      	b.n	8004e42 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d117      	bne.n	8004e42 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	643b      	str	r3, [r7, #64]	; 0x40
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e26:	4413      	add	r3, r2
 8004e28:	643b      	str	r3, [r7, #64]	; 0x40
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	00da      	lsls	r2, r3, #3
 8004e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e32:	4413      	add	r3, r2
 8004e34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e40:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	6959      	ldr	r1, [r3, #20]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	891a      	ldrh	r2, [r3, #8]
 8004e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f006 fbe8 	bl	800b626 <USB_WritePMA>
 8004e56:	e1ce      	b.n	80051f6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	4413      	add	r3, r2
 8004e72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	699a      	ldr	r2, [r3, #24]
 8004e84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d307      	bcc.n	8004e9c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	699a      	ldr	r2, [r3, #24]
 8004e90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e94:	1ad2      	subs	r2, r2, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	619a      	str	r2, [r3, #24]
 8004e9a:	e002      	b.n	8004ea2 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f040 80c4 	bne.w	8005034 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d126      	bne.n	8004f02 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ec8:	4413      	add	r3, r2
 8004eca:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	00da      	lsls	r2, r3, #3
 8004ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004eda:	667b      	str	r3, [r7, #100]	; 0x64
 8004edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004efe:	801a      	strh	r2, [r3, #0]
 8004f00:	e01a      	b.n	8004f38 <HAL_PCD_EP_DB_Transmit+0x484>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	785b      	ldrb	r3, [r3, #1]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d116      	bne.n	8004f38 <HAL_PCD_EP_DB_Transmit+0x484>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f1e:	4413      	add	r3, r2
 8004f20:	673b      	str	r3, [r7, #112]	; 0x70
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	00da      	lsls	r2, r3, #3
 8004f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f34:	2200      	movs	r2, #0
 8004f36:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d12f      	bne.n	8004fa6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f5e:	4413      	add	r3, r2
 8004f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	00da      	lsls	r2, r3, #3
 8004f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f6e:	4413      	add	r3, r2
 8004f70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	e017      	b.n	8004fd6 <HAL_PCD_EP_DB_Transmit+0x522>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	785b      	ldrb	r3, [r3, #1]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d113      	bne.n	8004fd6 <HAL_PCD_EP_DB_Transmit+0x522>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fbc:	4413      	add	r3, r2
 8004fbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	00da      	lsls	r2, r3, #3
 8004fc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fc8:	4413      	add	r3, r2
 8004fca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fce:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	4619      	mov	r1, r3
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f00c f97a 	bl	80112d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f040 8104 	bne.w	80051f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005008:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	441a      	add	r2, r3
 800501a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800501e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800502a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502e:	b29b      	uxth	r3, r3
 8005030:	8013      	strh	r3, [r2, #0]
 8005032:	e0e0      	b.n	80051f6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d121      	bne.n	8005082 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005058:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	441a      	add	r2, r3
 800506a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005088:	2b01      	cmp	r3, #1
 800508a:	f040 80b4 	bne.w	80051f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005096:	441a      	add	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050a4:	441a      	add	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	6a1a      	ldr	r2, [r3, #32]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d309      	bcc.n	80050ca <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6a1a      	ldr	r2, [r3, #32]
 80050c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c2:	1ad2      	subs	r2, r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	621a      	str	r2, [r3, #32]
 80050c8:	e015      	b.n	80050f6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d107      	bne.n	80050e2 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80050d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80050e0:	e009      	b.n	80050f6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2200      	movs	r2, #0
 80050ec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	663b      	str	r3, [r7, #96]	; 0x60
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d155      	bne.n	80051b0 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	65bb      	str	r3, [r7, #88]	; 0x58
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005112:	b29b      	uxth	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005118:	4413      	add	r3, r2
 800511a:	65bb      	str	r3, [r7, #88]	; 0x58
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	00da      	lsls	r2, r3, #3
 8005122:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005124:	4413      	add	r3, r2
 8005126:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800512a:	657b      	str	r3, [r7, #84]	; 0x54
 800512c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800512e:	2b3e      	cmp	r3, #62	; 0x3e
 8005130:	d916      	bls.n	8005160 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	677b      	str	r3, [r7, #116]	; 0x74
 8005138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800513a:	f003 031f 	and.w	r3, r3, #31
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <HAL_PCD_EP_DB_Transmit+0x694>
 8005142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005144:	3b01      	subs	r3, #1
 8005146:	677b      	str	r3, [r7, #116]	; 0x74
 8005148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800514a:	b29b      	uxth	r3, r3
 800514c:	029b      	lsls	r3, r3, #10
 800514e:	b29b      	uxth	r3, r3
 8005150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005158:	b29a      	uxth	r2, r3
 800515a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800515c:	801a      	strh	r2, [r3, #0]
 800515e:	e040      	b.n	80051e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005162:	2b00      	cmp	r3, #0
 8005164:	d112      	bne.n	800518c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005170:	b29a      	uxth	r2, r3
 8005172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005174:	801a      	strh	r2, [r3, #0]
 8005176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005184:	b29a      	uxth	r2, r3
 8005186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	e02a      	b.n	80051e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800518c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	677b      	str	r3, [r7, #116]	; 0x74
 8005192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800519c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800519e:	3301      	adds	r3, #1
 80051a0:	677b      	str	r3, [r7, #116]	; 0x74
 80051a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	029b      	lsls	r3, r3, #10
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ac:	801a      	strh	r2, [r3, #0]
 80051ae:	e018      	b.n	80051e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d114      	bne.n	80051e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051c6:	4413      	add	r3, r2
 80051c8:	663b      	str	r3, [r7, #96]	; 0x60
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	00da      	lsls	r2, r3, #3
 80051d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051d2:	4413      	add	r3, r2
 80051d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051dc:	b29a      	uxth	r2, r3
 80051de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6959      	ldr	r1, [r3, #20]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	895a      	ldrh	r2, [r3, #10]
 80051ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f006 fa18 	bl	800b626 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005210:	823b      	strh	r3, [r7, #16]
 8005212:	8a3b      	ldrh	r3, [r7, #16]
 8005214:	f083 0310 	eor.w	r3, r3, #16
 8005218:	823b      	strh	r3, [r7, #16]
 800521a:	8a3b      	ldrh	r3, [r7, #16]
 800521c:	f083 0320 	eor.w	r3, r3, #32
 8005220:	823b      	strh	r3, [r7, #16]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	441a      	add	r2, r3
 8005230:	8a3b      	ldrh	r3, [r7, #16]
 8005232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800523a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005242:	b29b      	uxth	r3, r3
 8005244:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3788      	adds	r7, #136	; 0x88
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	607b      	str	r3, [r7, #4]
 800525a:	460b      	mov	r3, r1
 800525c:	817b      	strh	r3, [r7, #10]
 800525e:	4613      	mov	r3, r2
 8005260:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005262:	897b      	ldrh	r3, [r7, #10]
 8005264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00b      	beq.n	8005286 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800526e:	897b      	ldrh	r3, [r7, #10]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4413      	add	r3, r2
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e009      	b.n	800529a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005286:	897a      	ldrh	r2, [r7, #10]
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800529a:	893b      	ldrh	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d107      	bne.n	80052b0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2200      	movs	r2, #0
 80052a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	80da      	strh	r2, [r3, #6]
 80052ae:	e00b      	b.n	80052c8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2201      	movs	r2, #1
 80052b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800530e:	b29b      	uxth	r3, r3
 8005310:	f043 0302 	orr.w	r3, r3, #2
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a04      	ldr	r2, [pc, #16]	; (8005348 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800533a:	6013      	str	r3, [r2, #0]
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	58000400 	.word	0x58000400

0800534c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005350:	4b04      	ldr	r3, [pc, #16]	; (8005364 <HAL_PWREx_GetVoltageRange+0x18>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	58000400 	.word	0x58000400

08005368 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_PWREx_EnableVddUSB+0x1c>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4a04      	ldr	r2, [pc, #16]	; (8005384 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005376:	6053      	str	r3, [r2, #4]
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	58000400 	.word	0x58000400

08005388 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800538c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800539a:	d101      	bne.n	80053a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <LL_RCC_HSE_Enable>:
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80053b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053be:	6013      	str	r3, [r2, #0]
}
 80053c0:	bf00      	nop
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <LL_RCC_HSE_Disable>:
{
 80053ca:	b480      	push	{r7}
 80053cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80053ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053dc:	6013      	str	r3, [r2, #0]
}
 80053de:	bf00      	nop
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <LL_RCC_HSE_IsReady>:
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80053ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053fa:	d101      	bne.n	8005400 <LL_RCC_HSE_IsReady+0x18>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <LL_RCC_HSE_IsReady+0x1a>
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <LL_RCC_HSI_Enable>:
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800541a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800541e:	6013      	str	r3, [r2, #0]
}
 8005420:	bf00      	nop
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <LL_RCC_HSI_Disable>:
{
 800542a:	b480      	push	{r7}
 800542c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800542e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800543c:	6013      	str	r3, [r2, #0]
}
 800543e:	bf00      	nop
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <LL_RCC_HSI_IsReady>:
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800544c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545a:	d101      	bne.n	8005460 <LL_RCC_HSI_IsReady+0x18>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <LL_RCC_HSI_IsReady+0x1a>
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <LL_RCC_HSI_SetCalibTrimming>:
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	061b      	lsls	r3, r3, #24
 8005482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005486:	4313      	orrs	r3, r2
 8005488:	604b      	str	r3, [r1, #4]
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <LL_RCC_HSI48_Enable>:
{
 8005496:	b480      	push	{r7}
 8005498:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800549a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800549e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054a6:	f043 0301 	orr.w	r3, r3, #1
 80054aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80054ae:	bf00      	nop
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <LL_RCC_HSI48_Disable>:
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80054bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054c8:	f023 0301 	bic.w	r3, r3, #1
 80054cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80054d0:	bf00      	nop
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <LL_RCC_HSI48_IsReady>:
{
 80054da:	b480      	push	{r7}
 80054dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80054de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d101      	bne.n	80054f2 <LL_RCC_HSI48_IsReady+0x18>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <LL_RCC_HSI48_IsReady+0x1a>
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <LL_RCC_LSE_Enable>:
{
 80054fe:	b480      	push	{r7}
 8005500:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005516:	bf00      	nop
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <LL_RCC_LSE_Disable>:
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005538:	bf00      	nop
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <LL_RCC_LSE_EnableBypass>:
{
 8005542:	b480      	push	{r7}
 8005544:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005552:	f043 0304 	orr.w	r3, r3, #4
 8005556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800555a:	bf00      	nop
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <LL_RCC_LSE_DisableBypass>:
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005574:	f023 0304 	bic.w	r3, r3, #4
 8005578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800557c:	bf00      	nop
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <LL_RCC_LSE_IsReady>:
{
 8005586:	b480      	push	{r7}
 8005588:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800558a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b02      	cmp	r3, #2
 8005598:	d101      	bne.n	800559e <LL_RCC_LSE_IsReady+0x18>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <LL_RCC_LSE_IsReady+0x1a>
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <LL_RCC_LSI1_Enable>:
{
 80055aa:	b480      	push	{r7}
 80055ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80055ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80055c2:	bf00      	nop
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <LL_RCC_LSI1_Disable>:
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80055d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055dc:	f023 0301 	bic.w	r3, r3, #1
 80055e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <LL_RCC_LSI1_IsReady>:
{
 80055ee:	b480      	push	{r7}
 80055f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80055f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d101      	bne.n	8005606 <LL_RCC_LSI1_IsReady+0x18>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <LL_RCC_LSI1_IsReady+0x1a>
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <LL_RCC_LSI2_Enable>:
{
 8005612:	b480      	push	{r7}
 8005614:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800561e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005622:	f043 0304 	orr.w	r3, r3, #4
 8005626:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800562a:	bf00      	nop
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <LL_RCC_LSI2_Disable>:
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005644:	f023 0304 	bic.w	r3, r3, #4
 8005648:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800564c:	bf00      	nop
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <LL_RCC_LSI2_IsReady>:
{
 8005656:	b480      	push	{r7}
 8005658:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800565a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b08      	cmp	r3, #8
 8005668:	d101      	bne.n	800566e <LL_RCC_LSI2_IsReady+0x18>
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <LL_RCC_LSI2_IsReady+0x1a>
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <LL_RCC_LSI2_SetTrimming>:
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800568a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	021b      	lsls	r3, r3, #8
 8005692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <LL_RCC_MSI_Enable>:
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80056ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	6013      	str	r3, [r2, #0]
}
 80056bc:	bf00      	nop
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <LL_RCC_MSI_Disable>:
{
 80056c6:	b480      	push	{r7}
 80056c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80056ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056d4:	f023 0301 	bic.w	r3, r3, #1
 80056d8:	6013      	str	r3, [r2, #0]
}
 80056da:	bf00      	nop
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <LL_RCC_MSI_IsReady>:
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80056e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d101      	bne.n	80056fa <LL_RCC_MSI_IsReady+0x16>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <LL_RCC_MSI_IsReady+0x18>
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <LL_RCC_MSI_SetRange>:
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800570e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005718:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4313      	orrs	r3, r2
 8005720:	600b      	str	r3, [r1, #0]
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <LL_RCC_MSI_GetRange>:
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800573e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2bb0      	cmp	r3, #176	; 0xb0
 8005744:	d901      	bls.n	800574a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005746:	23b0      	movs	r3, #176	; 0xb0
 8005748:	607b      	str	r3, [r7, #4]
  return msiRange;
 800574a:	687b      	ldr	r3, [r7, #4]
}
 800574c:	4618      	mov	r0, r3
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	021b      	lsls	r3, r3, #8
 800576e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005772:	4313      	orrs	r3, r2
 8005774:	604b      	str	r3, [r1, #4]
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <LL_RCC_SetSysClkSource>:
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800578a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f023 0203 	bic.w	r2, r3, #3
 8005794:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4313      	orrs	r3, r2
 800579c:	608b      	str	r3, [r1, #8]
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <LL_RCC_GetSysClkSource>:
{
 80057aa:	b480      	push	{r7}
 80057ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80057ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f003 030c 	and.w	r3, r3, #12
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <LL_RCC_SetAHBPrescaler>:
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80057ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4313      	orrs	r3, r2
 80057dc:	608b      	str	r3, [r1, #8]
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <LL_C2_RCC_SetAHBPrescaler>:
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80057f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80057fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <LL_RCC_SetAHB4Prescaler>:
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800581e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005822:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005826:	f023 020f 	bic.w	r2, r3, #15
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <LL_RCC_SetAPB1Prescaler>:
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800584c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005856:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4313      	orrs	r3, r2
 800585e:	608b      	str	r3, [r1, #8]
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <LL_RCC_SetAPB2Prescaler>:
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800587e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4313      	orrs	r3, r2
 8005886:	608b      	str	r3, [r1, #8]
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <LL_RCC_GetAHBPrescaler>:
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <LL_C2_RCC_GetAHBPrescaler>:
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80058b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80058b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <LL_RCC_GetAHB4Prescaler>:
{
 80058c6:	b480      	push	{r7}
 80058c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80058ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <LL_RCC_GetAPB1Prescaler>:
{
 80058e2:	b480      	push	{r7}
 80058e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80058e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <LL_RCC_GetAPB2Prescaler>:
{
 80058fa:	b480      	push	{r7}
 80058fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80058fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005908:	4618      	mov	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <LL_RCC_PLL_Enable>:
{
 8005912:	b480      	push	{r7}
 8005914:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005924:	6013      	str	r3, [r2, #0]
}
 8005926:	bf00      	nop
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <LL_RCC_PLL_Disable>:
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800593e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005942:	6013      	str	r3, [r2, #0]
}
 8005944:	bf00      	nop
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <LL_RCC_PLL_IsReady>:
{
 800594e:	b480      	push	{r7}
 8005950:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005960:	d101      	bne.n	8005966 <LL_RCC_PLL_IsReady+0x18>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <LL_RCC_PLL_IsReady+0x1a>
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <LL_RCC_PLL_GetN>:
{
 8005972:	b480      	push	{r7}
 8005974:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	0a1b      	lsrs	r3, r3, #8
 800597e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005982:	4618      	mov	r0, r3
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <LL_RCC_PLL_GetR>:
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800599a:	4618      	mov	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <LL_RCC_PLL_GetDivider>:
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80059a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <LL_RCC_PLL_GetMainSource>:
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80059c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f003 0303 	and.w	r3, r3, #3
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <LL_RCC_IsActiveFlag_HPRE>:
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80059d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e6:	d101      	bne.n	80059ec <LL_RCC_IsActiveFlag_HPRE+0x18>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80059fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a00:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a0c:	d101      	bne.n	8005a12 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005a1e:	b480      	push	{r7}
 8005a20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a32:	d101      	bne.n	8005a38 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a56:	d101      	bne.n	8005a5c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e000      	b.n	8005a5e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a7a:	d101      	bne.n	8005a80 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a8c:	b590      	push	{r4, r7, lr}
 8005a8e:	b08d      	sub	sp, #52	; 0x34
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e37e      	b.n	800619c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 8092 	beq.w	8005bd0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aac:	f7ff fe7d 	bl	80057aa <LL_RCC_GetSysClkSource>
 8005ab0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ab2:	f7ff ff83 	bl	80059bc <LL_RCC_PLL_GetMainSource>
 8005ab6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_RCC_OscConfig+0x3e>
 8005abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac0:	2b0c      	cmp	r3, #12
 8005ac2:	d14c      	bne.n	8005b5e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d149      	bne.n	8005b5e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005aca:	f7ff fe0b 	bl	80056e4 <LL_RCC_MSI_IsReady>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x54>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e35d      	b.n	800619c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005ae4:	f7ff fe23 	bl	800572e <LL_RCC_MSI_GetRange>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	429c      	cmp	r4, r3
 8005aec:	d914      	bls.n	8005b18 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fd5e 	bl	80065b4 <RCC_SetFlashLatencyFromMSIRange>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e34c      	b.n	800619c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff fdfd 	bl	8005706 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff fe21 	bl	8005758 <LL_RCC_MSI_SetCalibTrimming>
 8005b16:	e013      	b.n	8005b40 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff fdf2 	bl	8005706 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fe16 	bl	8005758 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fd3f 	bl	80065b4 <RCC_SetFlashLatencyFromMSIRange>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e32d      	b.n	800619c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b40:	f000 fcdc 	bl	80064fc <HAL_RCC_GetHCLKFreq>
 8005b44:	4603      	mov	r3, r0
 8005b46:	4ab3      	ldr	r2, [pc, #716]	; (8005e14 <HAL_RCC_OscConfig+0x388>)
 8005b48:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b4a:	4bb3      	ldr	r3, [pc, #716]	; (8005e18 <HAL_RCC_OscConfig+0x38c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fb fb52 	bl	80011f8 <HAL_InitTick>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d039      	beq.n	8005bce <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e31e      	b.n	800619c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01e      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b66:	f7ff fd9f 	bl	80056a8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b6a:	f7fb fefd 	bl	8001968 <HAL_GetTick>
 8005b6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b72:	f7fb fef9 	bl	8001968 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e30b      	b.n	800619c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005b84:	f7ff fdae 	bl	80056e4 <LL_RCC_MSI_IsReady>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f1      	beq.n	8005b72 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff fdb7 	bl	8005706 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff fddb 	bl	8005758 <LL_RCC_MSI_SetCalibTrimming>
 8005ba2:	e015      	b.n	8005bd0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ba4:	f7ff fd8f 	bl	80056c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ba8:	f7fb fede 	bl	8001968 <HAL_GetTick>
 8005bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bb0:	f7fb feda 	bl	8001968 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e2ec      	b.n	800619c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005bc2:	f7ff fd8f 	bl	80056e4 <LL_RCC_MSI_IsReady>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f1      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x124>
 8005bcc:	e000      	b.n	8005bd0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005bce:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d04e      	beq.n	8005c7a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bdc:	f7ff fde5 	bl	80057aa <LL_RCC_GetSysClkSource>
 8005be0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005be2:	f7ff feeb 	bl	80059bc <LL_RCC_PLL_GetMainSource>
 8005be6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d005      	beq.n	8005bfa <HAL_RCC_OscConfig+0x16e>
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	2b0c      	cmp	r3, #12
 8005bf2:	d10d      	bne.n	8005c10 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d10a      	bne.n	8005c10 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bfa:	f7ff fbf5 	bl	80053e8 <LL_RCC_HSE_IsReady>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d039      	beq.n	8005c78 <HAL_RCC_OscConfig+0x1ec>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d135      	bne.n	8005c78 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e2c5      	b.n	800619c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c18:	d102      	bne.n	8005c20 <HAL_RCC_OscConfig+0x194>
 8005c1a:	f7ff fbc7 	bl	80053ac <LL_RCC_HSE_Enable>
 8005c1e:	e001      	b.n	8005c24 <HAL_RCC_OscConfig+0x198>
 8005c20:	f7ff fbd3 	bl	80053ca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d012      	beq.n	8005c52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fb fe9c 	bl	8001968 <HAL_GetTick>
 8005c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c34:	f7fb fe98 	bl	8001968 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b64      	cmp	r3, #100	; 0x64
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e2aa      	b.n	800619c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005c46:	f7ff fbcf 	bl	80053e8 <LL_RCC_HSE_IsReady>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f1      	beq.n	8005c34 <HAL_RCC_OscConfig+0x1a8>
 8005c50:	e013      	b.n	8005c7a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c52:	f7fb fe89 	bl	8001968 <HAL_GetTick>
 8005c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c5a:	f7fb fe85 	bl	8001968 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b64      	cmp	r3, #100	; 0x64
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e297      	b.n	800619c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c6c:	f7ff fbbc 	bl	80053e8 <LL_RCC_HSE_IsReady>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f1      	bne.n	8005c5a <HAL_RCC_OscConfig+0x1ce>
 8005c76:	e000      	b.n	8005c7a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c78:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d051      	beq.n	8005d2a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c86:	f7ff fd90 	bl	80057aa <LL_RCC_GetSysClkSource>
 8005c8a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c8c:	f7ff fe96 	bl	80059bc <LL_RCC_PLL_GetMainSource>
 8005c90:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b04      	cmp	r3, #4
 8005c96:	d005      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x218>
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b0c      	cmp	r3, #12
 8005c9c:	d113      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d110      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ca4:	f7ff fbd0 	bl	8005448 <LL_RCC_HSI_IsReady>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <HAL_RCC_OscConfig+0x22e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e270      	b.n	800619c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fbd4 	bl	800546c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cc4:	e031      	b.n	8005d2a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d019      	beq.n	8005d02 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cce:	f7ff fb9d 	bl	800540c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd2:	f7fb fe49 	bl	8001968 <HAL_GetTick>
 8005cd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005cd8:	e008      	b.n	8005cec <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cda:	f7fb fe45 	bl	8001968 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e257      	b.n	800619c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005cec:	f7ff fbac 	bl	8005448 <LL_RCC_HSI_IsReady>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f1      	beq.n	8005cda <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff fbb6 	bl	800546c <LL_RCC_HSI_SetCalibTrimming>
 8005d00:	e013      	b.n	8005d2a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d02:	f7ff fb92 	bl	800542a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d06:	f7fb fe2f 	bl	8001968 <HAL_GetTick>
 8005d0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d0e:	f7fb fe2b 	bl	8001968 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e23d      	b.n	800619c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005d20:	f7ff fb92 	bl	8005448 <LL_RCC_HSI_IsReady>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f1      	bne.n	8005d0e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 80a3 	beq.w	8005e8a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d076      	beq.n	8005e3a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d046      	beq.n	8005de6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005d58:	f7ff fc49 	bl	80055ee <LL_RCC_LSI1_IsReady>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d113      	bne.n	8005d8a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005d62:	f7ff fc22 	bl	80055aa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d66:	f7fb fdff 	bl	8001968 <HAL_GetTick>
 8005d6a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005d6e:	f7fb fdfb 	bl	8001968 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e20d      	b.n	800619c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005d80:	f7ff fc35 	bl	80055ee <LL_RCC_LSI1_IsReady>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0f1      	beq.n	8005d6e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005d8a:	f7ff fc42 	bl	8005612 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8e:	f7fb fdeb 	bl	8001968 <HAL_GetTick>
 8005d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005d96:	f7fb fde7 	bl	8001968 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e1f9      	b.n	800619c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005da8:	f7ff fc55 	bl	8005656 <LL_RCC_LSI2_IsReady>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f1      	beq.n	8005d96 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fc5f 	bl	800567a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005dbc:	f7ff fc06 	bl	80055cc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fb fdd2 	bl	8001968 <HAL_GetTick>
 8005dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005dc8:	f7fb fdce 	bl	8001968 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e1e0      	b.n	800619c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005dda:	f7ff fc08 	bl	80055ee <LL_RCC_LSI1_IsReady>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1f1      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x33c>
 8005de4:	e051      	b.n	8005e8a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005de6:	f7ff fbe0 	bl	80055aa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dea:	f7fb fdbd 	bl	8001968 <HAL_GetTick>
 8005dee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005df2:	f7fb fdb9 	bl	8001968 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e1cb      	b.n	800619c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005e04:	f7ff fbf3 	bl	80055ee <LL_RCC_LSI1_IsReady>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0f1      	beq.n	8005df2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005e0e:	f7ff fc11 	bl	8005634 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005e12:	e00c      	b.n	8005e2e <HAL_RCC_OscConfig+0x3a2>
 8005e14:	20000004 	.word	0x20000004
 8005e18:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005e1c:	f7fb fda4 	bl	8001968 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e1b6      	b.n	800619c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005e2e:	f7ff fc12 	bl	8005656 <LL_RCC_LSI2_IsReady>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f1      	bne.n	8005e1c <HAL_RCC_OscConfig+0x390>
 8005e38:	e027      	b.n	8005e8a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005e3a:	f7ff fbfb 	bl	8005634 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e3e:	f7fb fd93 	bl	8001968 <HAL_GetTick>
 8005e42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005e44:	e008      	b.n	8005e58 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005e46:	f7fb fd8f 	bl	8001968 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e1a1      	b.n	800619c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005e58:	f7ff fbfd 	bl	8005656 <LL_RCC_LSI2_IsReady>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f1      	bne.n	8005e46 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005e62:	f7ff fbb3 	bl	80055cc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e66:	f7fb fd7f 	bl	8001968 <HAL_GetTick>
 8005e6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005e6e:	f7fb fd7b 	bl	8001968 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e18d      	b.n	800619c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005e80:	f7ff fbb5 	bl	80055ee <LL_RCC_LSI1_IsReady>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1f1      	bne.n	8005e6e <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d05b      	beq.n	8005f4e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e96:	4bb5      	ldr	r3, [pc, #724]	; (800616c <HAL_RCC_OscConfig+0x6e0>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d114      	bne.n	8005ecc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005ea2:	f7ff fa43 	bl	800532c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ea6:	f7fb fd5f 	bl	8001968 <HAL_GetTick>
 8005eaa:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eac:	e008      	b.n	8005ec0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eae:	f7fb fd5b 	bl	8001968 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e16d      	b.n	800619c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ec0:	4baa      	ldr	r3, [pc, #680]	; (800616c <HAL_RCC_OscConfig+0x6e0>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0f0      	beq.n	8005eae <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d102      	bne.n	8005eda <HAL_RCC_OscConfig+0x44e>
 8005ed4:	f7ff fb13 	bl	80054fe <LL_RCC_LSE_Enable>
 8005ed8:	e00c      	b.n	8005ef4 <HAL_RCC_OscConfig+0x468>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2b05      	cmp	r3, #5
 8005ee0:	d104      	bne.n	8005eec <HAL_RCC_OscConfig+0x460>
 8005ee2:	f7ff fb2e 	bl	8005542 <LL_RCC_LSE_EnableBypass>
 8005ee6:	f7ff fb0a 	bl	80054fe <LL_RCC_LSE_Enable>
 8005eea:	e003      	b.n	8005ef4 <HAL_RCC_OscConfig+0x468>
 8005eec:	f7ff fb18 	bl	8005520 <LL_RCC_LSE_Disable>
 8005ef0:	f7ff fb38 	bl	8005564 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d014      	beq.n	8005f26 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efc:	f7fb fd34 	bl	8001968 <HAL_GetTick>
 8005f00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005f02:	e00a      	b.n	8005f1a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f04:	f7fb fd30 	bl	8001968 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e140      	b.n	800619c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005f1a:	f7ff fb34 	bl	8005586 <LL_RCC_LSE_IsReady>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0ef      	beq.n	8005f04 <HAL_RCC_OscConfig+0x478>
 8005f24:	e013      	b.n	8005f4e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f26:	f7fb fd1f 	bl	8001968 <HAL_GetTick>
 8005f2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f2c:	e00a      	b.n	8005f44 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f2e:	f7fb fd1b 	bl	8001968 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e12b      	b.n	800619c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f44:	f7ff fb1f 	bl	8005586 <LL_RCC_LSE_IsReady>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1ef      	bne.n	8005f2e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d02c      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d014      	beq.n	8005f8c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f62:	f7ff fa98 	bl	8005496 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f66:	f7fb fcff 	bl	8001968 <HAL_GetTick>
 8005f6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f6e:	f7fb fcfb 	bl	8001968 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e10d      	b.n	800619c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005f80:	f7ff faab 	bl	80054da <LL_RCC_HSI48_IsReady>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f1      	beq.n	8005f6e <HAL_RCC_OscConfig+0x4e2>
 8005f8a:	e013      	b.n	8005fb4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f8c:	f7ff fa94 	bl	80054b8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7fb fcea 	bl	8001968 <HAL_GetTick>
 8005f94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f98:	f7fb fce6 	bl	8001968 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e0f8      	b.n	800619c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005faa:	f7ff fa96 	bl	80054da <LL_RCC_HSI48_IsReady>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1f1      	bne.n	8005f98 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 80ee 	beq.w	800619a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fbe:	f7ff fbf4 	bl	80057aa <LL_RCC_GetSysClkSource>
 8005fc2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	f040 80af 	bne.w	8006134 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0203 	and.w	r2, r3, #3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d123      	bne.n	800602c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d11c      	bne.n	800602c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	0a1b      	lsrs	r3, r3, #8
 8005ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d114      	bne.n	800602c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800600c:	429a      	cmp	r2, r3
 800600e:	d10d      	bne.n	800602c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800601a:	429a      	cmp	r2, r3
 800601c:	d106      	bne.n	800602c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006028:	429a      	cmp	r2, r3
 800602a:	d05d      	beq.n	80060e8 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b0c      	cmp	r3, #12
 8006030:	d058      	beq.n	80060e4 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e0ab      	b.n	800619c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006044:	f7ff fc74 	bl	8005930 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006048:	f7fb fc8e 	bl	8001968 <HAL_GetTick>
 800604c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006050:	f7fb fc8a 	bl	8001968 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e09c      	b.n	800619c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1ef      	bne.n	8006050 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	4b3e      	ldr	r3, [pc, #248]	; (8006170 <HAL_RCC_OscConfig+0x6e4>)
 8006078:	4013      	ands	r3, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006082:	4311      	orrs	r1, r2
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006088:	0212      	lsls	r2, r2, #8
 800608a:	4311      	orrs	r1, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006090:	4311      	orrs	r1, r2
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006096:	4311      	orrs	r1, r2
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800609c:	430a      	orrs	r2, r1
 800609e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80060a6:	f7ff fc34 	bl	8005912 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060ba:	f7fb fc55 	bl	8001968 <HAL_GetTick>
 80060be:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c2:	f7fb fc51 	bl	8001968 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e063      	b.n	800619c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0ef      	beq.n	80060c2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060e2:	e05a      	b.n	800619a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e059      	b.n	800619c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d151      	bne.n	800619a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80060f6:	f7ff fc0c 	bl	8005912 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006108:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800610a:	f7fb fc2d 	bl	8001968 <HAL_GetTick>
 800610e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006110:	e008      	b.n	8006124 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006112:	f7fb fc29 	bl	8001968 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e03b      	b.n	800619c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0ef      	beq.n	8006112 <HAL_RCC_OscConfig+0x686>
 8006132:	e032      	b.n	800619a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	2b0c      	cmp	r3, #12
 8006138:	d02d      	beq.n	8006196 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800613a:	f7ff fbf9 	bl	8005930 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800613e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006148:	f023 0303 	bic.w	r3, r3, #3
 800614c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800614e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006158:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800615c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006160:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006162:	f7fb fc01 	bl	8001968 <HAL_GetTick>
 8006166:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006168:	e00d      	b.n	8006186 <HAL_RCC_OscConfig+0x6fa>
 800616a:	bf00      	nop
 800616c:	58000400 	.word	0x58000400
 8006170:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006174:	f7fb fbf8 	bl	8001968 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e00a      	b.n	800619c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1ef      	bne.n	8006174 <HAL_RCC_OscConfig+0x6e8>
 8006194:	e001      	b.n	800619a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3734      	adds	r7, #52	; 0x34
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd90      	pop	{r4, r7, pc}

080061a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e12d      	b.n	8006414 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061b8:	4b98      	ldr	r3, [pc, #608]	; (800641c <HAL_RCC_ClockConfig+0x278>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d91b      	bls.n	80061fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061c6:	4b95      	ldr	r3, [pc, #596]	; (800641c <HAL_RCC_ClockConfig+0x278>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f023 0207 	bic.w	r2, r3, #7
 80061ce:	4993      	ldr	r1, [pc, #588]	; (800641c <HAL_RCC_ClockConfig+0x278>)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d6:	f7fb fbc7 	bl	8001968 <HAL_GetTick>
 80061da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80061de:	f7fb fbc3 	bl	8001968 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e111      	b.n	8006414 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f0:	4b8a      	ldr	r3, [pc, #552]	; (800641c <HAL_RCC_ClockConfig+0x278>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d1ef      	bne.n	80061de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d016      	beq.n	8006238 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff fad7 	bl	80057c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006214:	f7fb fba8 	bl	8001968 <HAL_GetTick>
 8006218:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800621a:	e008      	b.n	800622e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800621c:	f7fb fba4 	bl	8001968 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e0f2      	b.n	8006414 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800622e:	f7ff fbd1 	bl	80059d4 <LL_RCC_IsActiveFlag_HPRE>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0f1      	beq.n	800621c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b00      	cmp	r3, #0
 8006242:	d016      	beq.n	8006272 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff face 	bl	80057ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800624e:	f7fb fb8b 	bl	8001968 <HAL_GetTick>
 8006252:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006254:	e008      	b.n	8006268 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006256:	f7fb fb87 	bl	8001968 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e0d5      	b.n	8006414 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006268:	f7ff fbc6 	bl	80059f8 <LL_RCC_IsActiveFlag_C2HPRE>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0f1      	beq.n	8006256 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d016      	beq.n	80062ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff fac7 	bl	8005816 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006288:	f7fb fb6e 	bl	8001968 <HAL_GetTick>
 800628c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006290:	f7fb fb6a 	bl	8001968 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e0b8      	b.n	8006414 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80062a2:	f7ff fbbc 	bl	8005a1e <LL_RCC_IsActiveFlag_SHDHPRE>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0f1      	beq.n	8006290 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d016      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff fac1 	bl	8005844 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80062c2:	f7fb fb51 	bl	8001968 <HAL_GetTick>
 80062c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80062c8:	e008      	b.n	80062dc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80062ca:	f7fb fb4d 	bl	8001968 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e09b      	b.n	8006414 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80062dc:	f7ff fbb2 	bl	8005a44 <LL_RCC_IsActiveFlag_PPRE1>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f1      	beq.n	80062ca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d017      	beq.n	8006322 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff fab7 	bl	800586c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80062fe:	f7fb fb33 	bl	8001968 <HAL_GetTick>
 8006302:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006304:	e008      	b.n	8006318 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006306:	f7fb fb2f 	bl	8001968 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d901      	bls.n	8006318 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e07d      	b.n	8006414 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006318:	f7ff fba6 	bl	8005a68 <LL_RCC_IsActiveFlag_PPRE2>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f1      	beq.n	8006306 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d043      	beq.n	80063b6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d106      	bne.n	8006344 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006336:	f7ff f857 	bl	80053e8 <LL_RCC_HSE_IsReady>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d11e      	bne.n	800637e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e067      	b.n	8006414 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b03      	cmp	r3, #3
 800634a:	d106      	bne.n	800635a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800634c:	f7ff faff 	bl	800594e <LL_RCC_PLL_IsReady>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d113      	bne.n	800637e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e05c      	b.n	8006414 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006362:	f7ff f9bf 	bl	80056e4 <LL_RCC_MSI_IsReady>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d108      	bne.n	800637e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e051      	b.n	8006414 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006370:	f7ff f86a 	bl	8005448 <LL_RCC_HSI_IsReady>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e04a      	b.n	8006414 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff f9fd 	bl	8005782 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006388:	f7fb faee 	bl	8001968 <HAL_GetTick>
 800638c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638e:	e00a      	b.n	80063a6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006390:	f7fb faea 	bl	8001968 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	f241 3288 	movw	r2, #5000	; 0x1388
 800639e:	4293      	cmp	r3, r2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e036      	b.n	8006414 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063a6:	f7ff fa00 	bl	80057aa <LL_RCC_GetSysClkSource>
 80063aa:	4602      	mov	r2, r0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d1ec      	bne.n	8006390 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063b6:	4b19      	ldr	r3, [pc, #100]	; (800641c <HAL_RCC_ClockConfig+0x278>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d21b      	bcs.n	80063fc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063c4:	4b15      	ldr	r3, [pc, #84]	; (800641c <HAL_RCC_ClockConfig+0x278>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f023 0207 	bic.w	r2, r3, #7
 80063cc:	4913      	ldr	r1, [pc, #76]	; (800641c <HAL_RCC_ClockConfig+0x278>)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063d4:	f7fb fac8 	bl	8001968 <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063da:	e008      	b.n	80063ee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80063dc:	f7fb fac4 	bl	8001968 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e012      	b.n	8006414 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <HAL_RCC_ClockConfig+0x278>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d1ef      	bne.n	80063dc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80063fc:	f000 f87e 	bl	80064fc <HAL_RCC_GetHCLKFreq>
 8006400:	4603      	mov	r3, r0
 8006402:	4a07      	ldr	r2, [pc, #28]	; (8006420 <HAL_RCC_ClockConfig+0x27c>)
 8006404:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006406:	f7fb fabb 	bl	8001980 <HAL_GetTickPrio>
 800640a:	4603      	mov	r3, r0
 800640c:	4618      	mov	r0, r3
 800640e:	f7fa fef3 	bl	80011f8 <HAL_InitTick>
 8006412:	4603      	mov	r3, r0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	58004000 	.word	0x58004000
 8006420:	20000004 	.word	0x20000004

08006424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006424:	b590      	push	{r4, r7, lr}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800642a:	f7ff f9be 	bl	80057aa <LL_RCC_GetSysClkSource>
 800642e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10a      	bne.n	800644c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006436:	f7ff f97a 	bl	800572e <LL_RCC_MSI_GetRange>
 800643a:	4603      	mov	r3, r0
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	4a2b      	ldr	r2, [pc, #172]	; (80064f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	e04b      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b04      	cmp	r3, #4
 8006450:	d102      	bne.n	8006458 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006452:	4b28      	ldr	r3, [pc, #160]	; (80064f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	e045      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b08      	cmp	r3, #8
 800645c:	d10a      	bne.n	8006474 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800645e:	f7fe ff93 	bl	8005388 <LL_RCC_HSE_IsEnabledDiv2>
 8006462:	4603      	mov	r3, r0
 8006464:	2b01      	cmp	r3, #1
 8006466:	d102      	bne.n	800646e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006468:	4b22      	ldr	r3, [pc, #136]	; (80064f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	e03a      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800646e:	4b22      	ldr	r3, [pc, #136]	; (80064f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	e037      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006474:	f7ff faa2 	bl	80059bc <LL_RCC_PLL_GetMainSource>
 8006478:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d003      	beq.n	8006488 <HAL_RCC_GetSysClockFreq+0x64>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b03      	cmp	r3, #3
 8006484:	d003      	beq.n	800648e <HAL_RCC_GetSysClockFreq+0x6a>
 8006486:	e00d      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006488:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800648a:	60bb      	str	r3, [r7, #8]
        break;
 800648c:	e015      	b.n	80064ba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800648e:	f7fe ff7b 	bl	8005388 <LL_RCC_HSE_IsEnabledDiv2>
 8006492:	4603      	mov	r3, r0
 8006494:	2b01      	cmp	r3, #1
 8006496:	d102      	bne.n	800649e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006498:	4b16      	ldr	r3, [pc, #88]	; (80064f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800649a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800649c:	e00d      	b.n	80064ba <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800649e:	4b16      	ldr	r3, [pc, #88]	; (80064f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80064a0:	60bb      	str	r3, [r7, #8]
        break;
 80064a2:	e00a      	b.n	80064ba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80064a4:	f7ff f943 	bl	800572e <LL_RCC_MSI_GetRange>
 80064a8:	4603      	mov	r3, r0
 80064aa:	091b      	lsrs	r3, r3, #4
 80064ac:	f003 030f 	and.w	r3, r3, #15
 80064b0:	4a0f      	ldr	r2, [pc, #60]	; (80064f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80064b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064b6:	60bb      	str	r3, [r7, #8]
        break;
 80064b8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80064ba:	f7ff fa5a 	bl	8005972 <LL_RCC_PLL_GetN>
 80064be:	4602      	mov	r2, r0
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	fb03 f402 	mul.w	r4, r3, r2
 80064c6:	f7ff fa6d 	bl	80059a4 <LL_RCC_PLL_GetDivider>
 80064ca:	4603      	mov	r3, r0
 80064cc:	091b      	lsrs	r3, r3, #4
 80064ce:	3301      	adds	r3, #1
 80064d0:	fbb4 f4f3 	udiv	r4, r4, r3
 80064d4:	f7ff fa5a 	bl	800598c <LL_RCC_PLL_GetR>
 80064d8:	4603      	mov	r3, r0
 80064da:	0f5b      	lsrs	r3, r3, #29
 80064dc:	3301      	adds	r3, #1
 80064de:	fbb4 f3f3 	udiv	r3, r4, r3
 80064e2:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80064e4:	68fb      	ldr	r3, [r7, #12]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd90      	pop	{r4, r7, pc}
 80064ee:	bf00      	nop
 80064f0:	08012464 	.word	0x08012464
 80064f4:	00f42400 	.word	0x00f42400
 80064f8:	01e84800 	.word	0x01e84800

080064fc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064fc:	b598      	push	{r3, r4, r7, lr}
 80064fe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006500:	f7ff ff90 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 8006504:	4604      	mov	r4, r0
 8006506:	f7ff f9c5 	bl	8005894 <LL_RCC_GetAHBPrescaler>
 800650a:	4603      	mov	r3, r0
 800650c:	091b      	lsrs	r3, r3, #4
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	4a03      	ldr	r2, [pc, #12]	; (8006520 <HAL_RCC_GetHCLKFreq+0x24>)
 8006514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006518:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800651c:	4618      	mov	r0, r3
 800651e:	bd98      	pop	{r3, r4, r7, pc}
 8006520:	08012404 	.word	0x08012404

08006524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006524:	b598      	push	{r3, r4, r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006528:	f7ff ffe8 	bl	80064fc <HAL_RCC_GetHCLKFreq>
 800652c:	4604      	mov	r4, r0
 800652e:	f7ff f9e4 	bl	80058fa <LL_RCC_GetAPB2Prescaler>
 8006532:	4603      	mov	r3, r0
 8006534:	0adb      	lsrs	r3, r3, #11
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	4a04      	ldr	r2, [pc, #16]	; (800654c <HAL_RCC_GetPCLK2Freq+0x28>)
 800653c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006548:	4618      	mov	r0, r3
 800654a:	bd98      	pop	{r3, r4, r7, pc}
 800654c:	08012444 	.word	0x08012444

08006550 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	226f      	movs	r2, #111	; 0x6f
 800655e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8006560:	f7ff f923 	bl	80057aa <LL_RCC_GetSysClkSource>
 8006564:	4602      	mov	r2, r0
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800656a:	f7ff f993 	bl	8005894 <LL_RCC_GetAHBPrescaler>
 800656e:	4602      	mov	r2, r0
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8006574:	f7ff f9b5 	bl	80058e2 <LL_RCC_GetAPB1Prescaler>
 8006578:	4602      	mov	r2, r0
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800657e:	f7ff f9bc 	bl	80058fa <LL_RCC_GetAPB2Prescaler>
 8006582:	4602      	mov	r2, r0
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006588:	f7ff f990 	bl	80058ac <LL_C2_RCC_GetAHBPrescaler>
 800658c:	4602      	mov	r2, r0
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8006592:	f7ff f998 	bl	80058c6 <LL_RCC_GetAHB4Prescaler>
 8006596:	4602      	mov	r2, r0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800659c:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <HAL_RCC_GetClockConfig+0x60>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0207 	and.w	r2, r3, #7
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	601a      	str	r2, [r3, #0]
}
 80065a8:	bf00      	nop
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	58004000 	.word	0x58004000

080065b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80065b4:	b590      	push	{r4, r7, lr}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2bb0      	cmp	r3, #176	; 0xb0
 80065c0:	d903      	bls.n	80065ca <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80065c2:	4b15      	ldr	r3, [pc, #84]	; (8006618 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	e007      	b.n	80065da <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	091b      	lsrs	r3, r3, #4
 80065ce:	f003 030f 	and.w	r3, r3, #15
 80065d2:	4a11      	ldr	r2, [pc, #68]	; (8006618 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80065d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80065da:	f7ff f974 	bl	80058c6 <LL_RCC_GetAHB4Prescaler>
 80065de:	4603      	mov	r3, r0
 80065e0:	091b      	lsrs	r3, r3, #4
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	4a0d      	ldr	r2, [pc, #52]	; (800661c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80065e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4a0a      	ldr	r2, [pc, #40]	; (8006620 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80065f8:	fba2 2303 	umull	r2, r3, r2, r3
 80065fc:	0c9c      	lsrs	r4, r3, #18
 80065fe:	f7fe fea5 	bl	800534c <HAL_PWREx_GetVoltageRange>
 8006602:	4603      	mov	r3, r0
 8006604:	4619      	mov	r1, r3
 8006606:	4620      	mov	r0, r4
 8006608:	f000 f80c 	bl	8006624 <RCC_SetFlashLatency>
 800660c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	bd90      	pop	{r4, r7, pc}
 8006616:	bf00      	nop
 8006618:	08012464 	.word	0x08012464
 800661c:	08012404 	.word	0x08012404
 8006620:	431bde83 	.word	0x431bde83

08006624 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006624:	b590      	push	{r4, r7, lr}
 8006626:	b093      	sub	sp, #76	; 0x4c
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800662e:	4b39      	ldr	r3, [pc, #228]	; (8006714 <RCC_SetFlashLatency+0xf0>)
 8006630:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006636:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800663a:	4a37      	ldr	r2, [pc, #220]	; (8006718 <RCC_SetFlashLatency+0xf4>)
 800663c:	f107 031c 	add.w	r3, r7, #28
 8006640:	ca07      	ldmia	r2, {r0, r1, r2}
 8006642:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006646:	4b35      	ldr	r3, [pc, #212]	; (800671c <RCC_SetFlashLatency+0xf8>)
 8006648:	f107 040c 	add.w	r4, r7, #12
 800664c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800664e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006652:	2300      	movs	r3, #0
 8006654:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665c:	d11c      	bne.n	8006698 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800665e:	2300      	movs	r3, #0
 8006660:	643b      	str	r3, [r7, #64]	; 0x40
 8006662:	e015      	b.n	8006690 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800666c:	4413      	add	r3, r2
 800666e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	d808      	bhi.n	800668a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006680:	4413      	add	r3, r2
 8006682:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006686:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006688:	e022      	b.n	80066d0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800668a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800668c:	3301      	adds	r3, #1
 800668e:	643b      	str	r3, [r7, #64]	; 0x40
 8006690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006692:	2b03      	cmp	r3, #3
 8006694:	d9e6      	bls.n	8006664 <RCC_SetFlashLatency+0x40>
 8006696:	e01b      	b.n	80066d0 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006698:	2300      	movs	r3, #0
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800669c:	e015      	b.n	80066ca <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800669e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80066a6:	4413      	add	r3, r2
 80066a8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d808      	bhi.n	80066c4 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80066b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80066ba:	4413      	add	r3, r2
 80066bc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80066c0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80066c2:	e005      	b.n	80066d0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80066c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c6:	3301      	adds	r3, #1
 80066c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d9e6      	bls.n	800669e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80066d0:	4b13      	ldr	r3, [pc, #76]	; (8006720 <RCC_SetFlashLatency+0xfc>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f023 0207 	bic.w	r2, r3, #7
 80066d8:	4911      	ldr	r1, [pc, #68]	; (8006720 <RCC_SetFlashLatency+0xfc>)
 80066da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066dc:	4313      	orrs	r3, r2
 80066de:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066e0:	f7fb f942 	bl	8001968 <HAL_GetTick>
 80066e4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80066e6:	e008      	b.n	80066fa <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80066e8:	f7fb f93e 	bl	8001968 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e007      	b.n	800670a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80066fa:	4b09      	ldr	r3, [pc, #36]	; (8006720 <RCC_SetFlashLatency+0xfc>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006704:	429a      	cmp	r2, r3
 8006706:	d1ef      	bne.n	80066e8 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	374c      	adds	r7, #76	; 0x4c
 800670e:	46bd      	mov	sp, r7
 8006710:	bd90      	pop	{r4, r7, pc}
 8006712:	bf00      	nop
 8006714:	08012328 	.word	0x08012328
 8006718:	08012338 	.word	0x08012338
 800671c:	08012344 	.word	0x08012344
 8006720:	58004000 	.word	0x58004000

08006724 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006736:	d101      	bne.n	800673c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <LL_RCC_HSE_IsReady>:
{
 8006748:	b480      	push	{r7}
 800674a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800674c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800675a:	d101      	bne.n	8006760 <LL_RCC_HSE_IsReady+0x18>
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <LL_RCC_HSE_IsReady+0x1a>
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <LL_RCC_HSI_IsReady>:
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800677a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677e:	d101      	bne.n	8006784 <LL_RCC_HSI_IsReady+0x18>
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <LL_RCC_HSI_IsReady+0x1a>
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <LL_RCC_HSI48_IsReady>:
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006798:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d101      	bne.n	80067a8 <LL_RCC_HSI48_IsReady+0x18>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e000      	b.n	80067aa <LL_RCC_HSI48_IsReady+0x1a>
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <LL_RCC_LSE_IsEnabled>:
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80067b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <LL_RCC_LSE_IsEnabled+0x18>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e000      	b.n	80067ce <LL_RCC_LSE_IsEnabled+0x1a>
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <LL_RCC_LSE_IsReady>:
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80067dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d101      	bne.n	80067f0 <LL_RCC_LSE_IsReady+0x18>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e000      	b.n	80067f2 <LL_RCC_LSE_IsReady+0x1a>
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <LL_RCC_LSI1_IsReady>:
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b02      	cmp	r3, #2
 800680e:	d101      	bne.n	8006814 <LL_RCC_LSI1_IsReady+0x18>
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <LL_RCC_LSI1_IsReady+0x1a>
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <LL_RCC_LSI2_IsReady>:
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b08      	cmp	r3, #8
 8006832:	d101      	bne.n	8006838 <LL_RCC_LSI2_IsReady+0x18>
 8006834:	2301      	movs	r3, #1
 8006836:	e000      	b.n	800683a <LL_RCC_LSI2_IsReady+0x1a>
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <LL_RCC_MSI_IsReady>:
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b02      	cmp	r3, #2
 8006854:	d101      	bne.n	800685a <LL_RCC_MSI_IsReady+0x16>
 8006856:	2301      	movs	r3, #1
 8006858:	e000      	b.n	800685c <LL_RCC_MSI_IsReady+0x18>
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <LL_RCC_MSI_EnablePLLMode>:
{
 8006866:	b480      	push	{r7}
 8006868:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800686a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006874:	f043 0304 	orr.w	r3, r3, #4
 8006878:	6013      	str	r3, [r2, #0]
}
 800687a:	bf00      	nop
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <LL_RCC_MSI_GetRange>:
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800688a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006894:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2bb0      	cmp	r3, #176	; 0xb0
 800689a:	d901      	bls.n	80068a0 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800689c:	23b0      	movs	r3, #176	; 0xb0
 800689e:	607b      	str	r3, [r7, #4]
  return msiRange;
 80068a0:	687b      	ldr	r3, [r7, #4]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <LL_RCC_SetRFWKPClockSource>:
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80068b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <LL_RCC_GetRFWKPClockSource>:
{
 80068da:	b480      	push	{r7}
 80068dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 80068de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <LL_RCC_GetAHBPrescaler>:
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80068f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006902:	4618      	mov	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <LL_RCC_GetAPB1Prescaler>:
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800691a:	4618      	mov	r0, r3
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <LL_RCC_GetAPB2Prescaler>:
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006932:	4618      	mov	r0, r3
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <LL_RCC_SetSMPSClockSource>:
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	f023 0203 	bic.w	r2, r3, #3
 800694e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4313      	orrs	r3, r2
 8006956:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <LL_RCC_GetSMPSClockSource>:
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8006968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006972:	4618      	mov	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <LL_RCC_SetSMPSPrescaler>:
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800698e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4313      	orrs	r3, r2
 8006996:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <LL_RCC_GetSMPSPrescaler>:
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 80069a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <LL_RCC_SetUSARTClockSource>:
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80069c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069cc:	f023 0203 	bic.w	r2, r3, #3
 80069d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <LL_RCC_SetLPUARTClockSource>:
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80069f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80069fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <LL_RCC_SetI2CClockSource>:
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a20:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	091b      	lsrs	r3, r3, #4
 8006a28:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	401a      	ands	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <LL_RCC_SetLPTIMClockSource>:
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	0c1b      	lsrs	r3, r3, #16
 8006a62:	041b      	lsls	r3, r3, #16
 8006a64:	43db      	mvns	r3, r3
 8006a66:	401a      	ands	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a70:	4313      	orrs	r3, r2
 8006a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <LL_RCC_SetSAIClockSource>:
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <LL_RCC_SetRNGClockSource>:
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <LL_RCC_SetCLK48ClockSource>:
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <LL_RCC_SetUSBClockSource>:
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff ffe3 	bl	8006ada <LL_RCC_SetCLK48ClockSource>
}
 8006b14:	bf00      	nop
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <LL_RCC_SetADCClockSource>:
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <LL_RCC_GetUSARTClockSource>:
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4013      	ands	r3, r2
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <LL_RCC_GetLPUARTClockSource>:
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4013      	ands	r3, r2
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <LL_RCC_GetI2CClockSource>:
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8006b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	091a      	lsrs	r2, r3, #4
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	011b      	lsls	r3, r3, #4
 8006ba2:	4313      	orrs	r3, r2
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <LL_RCC_GetLPTIMClockSource>:
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8006bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	0c1a      	lsrs	r2, r3, #16
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4313      	orrs	r3, r2
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <LL_RCC_GetSAIClockSource>:
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 8006bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4013      	ands	r3, r2
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <LL_RCC_GetRNGClockSource>:
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 8006bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4013      	ands	r3, r2
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <LL_RCC_GetCLK48ClockSource>:
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8006c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4013      	ands	r3, r2
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <LL_RCC_GetUSBClockSource>:
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff ffe9 	bl	8006c16 <LL_RCC_GetCLK48ClockSource>
 8006c44:	4603      	mov	r3, r0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <LL_RCC_GetADCClockSource>:
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8006c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4013      	ands	r3, r2
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <LL_RCC_SetRTCClockSource>:
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <LL_RCC_GetRTCClockSource>:
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <LL_RCC_ForceBackupDomainReset>:
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006ccc:	bf00      	nop
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cee:	bf00      	nop
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <LL_RCC_PLL_IsReady>:
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d0a:	d101      	bne.n	8006d10 <LL_RCC_PLL_IsReady+0x18>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <LL_RCC_PLL_IsReady+0x1a>
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <LL_RCC_PLL_GetN>:
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	0a1b      	lsrs	r3, r3, #8
 8006d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <LL_RCC_PLL_GetP>:
{
 8006d36:	b480      	push	{r7}
 8006d38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <LL_RCC_PLL_GetQ>:
{
 8006d4e:	b480      	push	{r7}
 8006d50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8006d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <LL_RCC_PLL_GetDivider>:
{
 8006d66:	b480      	push	{r7}
 8006d68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <LL_RCC_PLLSAI1_Enable>:
{
 8006d7e:	b480      	push	{r7}
 8006d80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d90:	6013      	str	r3, [r2, #0]
}
 8006d92:	bf00      	nop
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <LL_RCC_PLLSAI1_Disable>:
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006daa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006dae:	6013      	str	r3, [r2, #0]
}
 8006db0:	bf00      	nop
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <LL_RCC_PLLSAI1_IsReady>:
{
 8006dba:	b480      	push	{r7}
 8006dbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dcc:	d101      	bne.n	8006dd2 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e000      	b.n	8006dd4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <LL_RCC_PLLSAI1_GetN>:
{
 8006dde:	b480      	push	{r7}
 8006de0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8006de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	0a1b      	lsrs	r3, r3, #8
 8006dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <LL_RCC_PLLSAI1_GetP>:
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8006dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <LL_RCC_PLLSAI1_GetQ>:
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8006e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <LL_RCC_PLLSAI1_GetR>:
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8006e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <LL_RCC_PLL_GetMainSource>:
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f003 0303 	and.w	r3, r3, #3
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006e60:	2300      	movs	r3, #0
 8006e62:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006e64:	2300      	movs	r3, #0
 8006e66:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d034      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e7c:	d021      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006e7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e82:	d81b      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e88:	d01d      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006e8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e8e:	d815      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00b      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e98:	d110      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ea8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006eaa:	e00d      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fd64 	bl	800797e <RCCEx_PLLSAI1_ConfigNP>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006eba:	e005      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	77fb      	strb	r3, [r7, #31]
        break;
 8006ec0:	e002      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006ec2:	bf00      	nop
 8006ec4:	e000      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec8:	7ffb      	ldrb	r3, [r7, #31]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d105      	bne.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff fdd5 	bl	8006a82 <LL_RCC_SetSAIClockSource>
 8006ed8:	e001      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eda:	7ffb      	ldrb	r3, [r7, #31]
 8006edc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d046      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006eea:	f7ff fed6 	bl	8006c9a <LL_RCC_GetRTCClockSource>
 8006eee:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d03c      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006efa:	f7fe fa17 	bl	800532c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d105      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff feb0 	bl	8006c6e <LL_RCC_SetRTCClockSource>
 8006f0e:	e02e      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f18:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006f1a:	f7ff fecb 	bl	8006cb4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006f1e:	f7ff feda 	bl	8006cd6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006f3a:	f7ff fc3b 	bl	80067b4 <LL_RCC_LSE_IsEnabled>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d114      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f44:	f7fa fd10 	bl	8001968 <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006f4a:	e00b      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f4c:	f7fa fd0c 	bl	8001968 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d902      	bls.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	77fb      	strb	r3, [r7, #31]
              break;
 8006f62:	e004      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006f64:	f7ff fc38 	bl	80067d8 <LL_RCC_LSE_IsReady>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d1ee      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006f6e:	7ffb      	ldrb	r3, [r7, #31]
 8006f70:	77bb      	strb	r3, [r7, #30]
 8006f72:	e001      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f74:	7ffb      	ldrb	r3, [r7, #31]
 8006f76:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d004      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff fd17 	bl	80069bc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d004      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff fd22 	bl	80069e8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0310 	and.w	r3, r3, #16
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d004      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff fd4a 	bl	8006a4e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d004      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7ff fd3f 	bl	8006a4e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff fd17 	bl	8006a14 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d004      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff fd0c 	bl	8006a14 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007004:	2b00      	cmp	r3, #0
 8007006:	d022      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff fd7a 	bl	8006b06 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800701a:	d107      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800701c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800702a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007030:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007034:	d10b      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3304      	adds	r3, #4
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fcfa 	bl	8007a34 <RCCEx_PLLSAI1_ConfigNQ>
 8007040:	4603      	mov	r3, r0
 8007042:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007044:	7ffb      	ldrb	r3, [r7, #31]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800704a:	7ffb      	ldrb	r3, [r7, #31]
 800704c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007056:	2b00      	cmp	r3, #0
 8007058:	d02b      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007062:	d008      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800706c:	d003      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007072:	2b00      	cmp	r3, #0
 8007074:	d105      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707a:	4618      	mov	r0, r3
 800707c:	f7ff fd17 	bl	8006aae <LL_RCC_SetRNGClockSource>
 8007080:	e00a      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	2000      	movs	r0, #0
 800708e:	f7ff fd0e 	bl	8006aae <LL_RCC_SetRNGClockSource>
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff fd21 	bl	8006ada <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80070a0:	d107      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80070a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070b0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d022      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff fd2a 	bl	8006b1c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070d0:	d107      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070ea:	d10b      	bne.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3304      	adds	r3, #4
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fcfa 	bl	8007aea <RCCEx_PLLSAI1_ConfigNR>
 80070f6:	4603      	mov	r3, r0
 80070f8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80070fa:	7ffb      	ldrb	r3, [r7, #31]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8007100:	7ffb      	ldrb	r3, [r7, #31]
 8007102:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff fbca 	bl	80068ae <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d009      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712a:	4618      	mov	r0, r3
 800712c:	f7ff fc26 	bl	800697c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff fc01 	bl	800693c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800713a:	7fbb      	ldrb	r3, [r7, #30]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3720      	adds	r7, #32
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007144:	b590      	push	{r4, r7, lr}
 8007146:	b093      	sub	sp, #76	; 0x4c
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	647b      	str	r3, [r7, #68]	; 0x44
  
#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 8007150:	f7ff fc28 	bl	80069a4 <LL_RCC_GetSMPSPrescaler>
 8007154:	4603      	mov	r3, r0
 8007156:	091b      	lsrs	r3, r3, #4
 8007158:	643b      	str	r3, [r7, #64]	; 0x40
#endif
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007160:	d12d      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 8007162:	f7ff fd9a 	bl	8006c9a <LL_RCC_GetRTCClockSource>
 8007166:	6138      	str	r0, [r7, #16]
    
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800716e:	d109      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007170:	f7ff fb32 	bl	80067d8 <LL_RCC_LSE_IsReady>
 8007174:	4603      	mov	r3, r0
 8007176:	2b01      	cmp	r3, #1
 8007178:	f040 83d8 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800717c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007180:	647b      	str	r3, [r7, #68]	; 0x44
 8007182:	e3d3      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800718a:	d110      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800718c:	f7ff fb36 	bl	80067fc <LL_RCC_LSI1_IsReady>
 8007190:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007192:	f7ff fb45 	bl	8006820 <LL_RCC_LSI2_IsReady>
 8007196:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d003      	beq.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	f040 83c3 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 80071a6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80071aa:	647b      	str	r3, [r7, #68]	; 0x44
 80071ac:	e3be      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071b4:	f040 83ba 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 32U;
 80071b8:	4bba      	ldr	r3, [pc, #744]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80071ba:	647b      	str	r3, [r7, #68]	; 0x44
 80071bc:	e3b6      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b40      	cmp	r3, #64	; 0x40
 80071c2:	d130      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 80071c4:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80071c8:	f7ff fd05 	bl	8006bd6 <LL_RCC_GetSAIClockSource>
 80071cc:	4603      	mov	r3, r0
 80071ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071d2:	d008      	beq.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 80071d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071d8:	d822      	bhi.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00c      	beq.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80071de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071e2:	d013      	beq.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80071e4:	e01c      	b.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
    case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
      if (LL_RCC_HSI_IsReady() == 1U)
 80071e6:	f7ff fac1 	bl	800676c <LL_RCC_HSI_IsReady>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	f040 837e 	bne.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      {
        frequency = HSI_VALUE;
 80071f2:	4bad      	ldr	r3, [pc, #692]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80071f4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80071f6:	e37a      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      
#if defined(SAI1)
    case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80071f8:	f7ff fddf 	bl	8006dba <LL_RCC_PLLSAI1_IsReady>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b01      	cmp	r3, #1
 8007200:	f040 8377 	bne.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_P();
 8007204:	f000 fdce 	bl	8007da4 <RCC_PLLSAI1_GetFreqDomain_P>
 8007208:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800720a:	e372      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
#endif
      
    case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 800720c:	f7ff fd74 	bl	8006cf8 <LL_RCC_PLL_IsReady>
 8007210:	4603      	mov	r3, r0
 8007212:	2b01      	cmp	r3, #1
 8007214:	f040 836f 	bne.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      {
        frequency = RCC_PLL_GetFreqDomain_P();
 8007218:	f000 fcc2 	bl	8007ba0 <RCC_PLL_GetFreqDomain_P>
 800721c:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800721e:	e36a      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      
    default: /* External input clock used as SAI1 clock source */
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007220:	4ba2      	ldr	r3, [pc, #648]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8007222:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8007224:	e382      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800722c:	d168      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 800722e:	f000 fb87 	bl	8007940 <HAL_RCCEx_GetRngCLKSource>
 8007232:	61f8      	str	r0, [r7, #28]
    
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723a:	d110      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800723c:	f7ff fade 	bl	80067fc <LL_RCC_LSI1_IsReady>
 8007240:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007242:	f7ff faed 	bl	8006820 <LL_RCC_LSI2_IsReady>
 8007246:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d003      	beq.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b01      	cmp	r3, #1
 8007252:	f040 836b 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8007256:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800725a:	647b      	str	r3, [r7, #68]	; 0x44
 800725c:	e366      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007264:	d109      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007266:	f7ff fab7 	bl	80067d8 <LL_RCC_LSE_IsReady>
 800726a:	4603      	mov	r3, r0
 800726c:	2b01      	cmp	r3, #1
 800726e:	f040 835d 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8007272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007276:	647b      	str	r3, [r7, #68]	; 0x44
 8007278:	e358      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007280:	d10e      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 8007282:	f7ff fd39 	bl	8006cf8 <LL_RCC_PLL_IsReady>
 8007286:	4603      	mov	r3, r0
 8007288:	2b01      	cmp	r3, #1
 800728a:	f040 834f 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 800728e:	f000 fcdd 	bl	8007c4c <RCC_PLL_GetFreqDomain_Q>
 8007292:	4603      	mov	r3, r0
 8007294:	4a86      	ldr	r2, [pc, #536]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	647b      	str	r3, [r7, #68]	; 0x44
 800729e:	e345      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 80072a6:	d114      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 80072a8:	f7ff facc 	bl	8006844 <LL_RCC_MSI_IsReady>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	f040 833c 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 80072b4:	f7ff fae6 	bl	8006884 <LL_RCC_MSI_GetRange>
 80072b8:	4603      	mov	r3, r0
 80072ba:	091b      	lsrs	r3, r3, #4
 80072bc:	f003 030f 	and.w	r3, r3, #15
 80072c0:	4a7c      	ldr	r2, [pc, #496]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80072c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c6:	4a7a      	ldr	r2, [pc, #488]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80072c8:	fba2 2303 	umull	r2, r3, r2, r3
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	647b      	str	r3, [r7, #68]	; 0x44
 80072d0:	e32c      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 80072d8:	d109      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80072da:	f7ff fd6e 	bl	8006dba <LL_RCC_PLLSAI1_IsReady>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	f040 8323 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 80072e6:	f000 fdb3 	bl	8007e50 <RCC_PLLSAI1_GetFreqDomain_Q>
 80072ea:	6478      	str	r0, [r7, #68]	; 0x44
 80072ec:	e31e      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 80072ee:	f7ff fa4f 	bl	8006790 <LL_RCC_HSI48_IsReady>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	f040 8319 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI48_VALUE / 3U;
 80072fa:	4b6b      	ldr	r3, [pc, #428]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80072fc:	647b      	str	r3, [r7, #68]	; 0x44
 80072fe:	e315      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      /* Nothing to do as frequency already initialized to 0U */
#endif
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007306:	d13f      	bne.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 8007308:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 800730c:	f7ff fc93 	bl	8006c36 <LL_RCC_GetUSBClockSource>
 8007310:	4603      	mov	r3, r0
 8007312:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007316:	d01d      	beq.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8007318:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800731c:	d82b      	bhi.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 800731e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007322:	d003      	beq.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8007324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007328:	d00a      	beq.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800732a:	e024      	b.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
    case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800732c:	f7ff fd45 	bl	8006dba <LL_RCC_PLLSAI1_IsReady>
 8007330:	4603      	mov	r3, r0
 8007332:	2b01      	cmp	r3, #1
 8007334:	f040 82e1 	bne.w	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8007338:	f000 fd8a 	bl	8007e50 <RCC_PLLSAI1_GetFreqDomain_Q>
 800733c:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800733e:	e2dc      	b.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
#endif
      
    case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8007340:	f7ff fcda 	bl	8006cf8 <LL_RCC_PLL_IsReady>
 8007344:	4603      	mov	r3, r0
 8007346:	2b01      	cmp	r3, #1
 8007348:	f040 82d9 	bne.w	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      {
        frequency = RCC_PLL_GetFreqDomain_Q();
 800734c:	f000 fc7e 	bl	8007c4c <RCC_PLL_GetFreqDomain_Q>
 8007350:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007352:	e2d4      	b.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      
    case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
      if (LL_RCC_MSI_IsReady() == 1U)
 8007354:	f7ff fa76 	bl	8006844 <LL_RCC_MSI_IsReady>
 8007358:	4603      	mov	r3, r0
 800735a:	2b01      	cmp	r3, #1
 800735c:	f040 82d1 	bne.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007360:	f7ff fa90 	bl	8006884 <LL_RCC_MSI_GetRange>
 8007364:	4603      	mov	r3, r0
 8007366:	091b      	lsrs	r3, r3, #4
 8007368:	f003 030f 	and.w	r3, r3, #15
 800736c:	4a51      	ldr	r2, [pc, #324]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800736e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007372:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007374:	e2c5      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      
    default: /* HSI48 clock used as USB clock source */
      if (LL_RCC_HSI48_IsReady() == 1U)
 8007376:	f7ff fa0b 	bl	8006790 <LL_RCC_HSI48_IsReady>
 800737a:	4603      	mov	r3, r0
 800737c:	2b01      	cmp	r3, #1
 800737e:	f040 82c2 	bne.w	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
      {
        frequency = HSI48_VALUE;
 8007382:	4b4d      	ldr	r3, [pc, #308]	; (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8007384:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007386:	e2be      	b.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d140      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 800738e:	2003      	movs	r0, #3
 8007390:	f7ff fbda 	bl	8006b48 <LL_RCC_GetUSARTClockSource>
 8007394:	4603      	mov	r3, r0
 8007396:	2b03      	cmp	r3, #3
 8007398:	d013      	beq.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 800739a:	2b03      	cmp	r3, #3
 800739c:	d81b      	bhi.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d002      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d004      	beq.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80073a6:	e016      	b.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80073a8:	f7ff f83c 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 80073ac:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80073ae:	e2bd      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80073b0:	f7ff f9dc 	bl	800676c <LL_RCC_HSI_IsReady>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	f040 82a7 	bne.w	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      {
        frequency = HSI_VALUE;
 80073bc:	4b3a      	ldr	r3, [pc, #232]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80073be:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80073c0:	e2a3      	b.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      
    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 80073c2:	f7ff fa09 	bl	80067d8 <LL_RCC_LSE_IsReady>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	f040 82a0 	bne.w	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      {
        frequency = LSE_VALUE;
 80073ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d2:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80073d4:	e29b      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      
    default: /* USART1 Clock is PCLK2 */
      frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80073d6:	f7ff f825 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 80073da:	4604      	mov	r4, r0
 80073dc:	f7ff fa8a 	bl	80068f4 <LL_RCC_GetAHBPrescaler>
 80073e0:	4603      	mov	r3, r0
 80073e2:	091b      	lsrs	r3, r3, #4
 80073e4:	f003 030f 	and.w	r3, r3, #15
 80073e8:	4a34      	ldr	r2, [pc, #208]	; (80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80073ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ee:	fbb4 f4f3 	udiv	r4, r4, r3
 80073f2:	f7ff fa97 	bl	8006924 <LL_RCC_GetAPB2Prescaler>
 80073f6:	4603      	mov	r3, r0
 80073f8:	0adb      	lsrs	r3, r3, #11
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	4a30      	ldr	r2, [pc, #192]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8007400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	fa24 f303 	lsr.w	r3, r4, r3
 800740c:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB2Prescaler());
      break;
 800740e:	e28d      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d156      	bne.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 8007416:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800741a:	f7ff fba5 	bl	8006b68 <LL_RCC_GetLPUARTClockSource>
 800741e:	4603      	mov	r3, r0
 8007420:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007424:	d016      	beq.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8007426:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800742a:	d81d      	bhi.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800742c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007430:	d003      	beq.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8007432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007436:	d004      	beq.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8007438:	e016      	b.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 800743a:	f7fe fff3 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 800743e:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007440:	e274      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8007442:	f7ff f993 	bl	800676c <LL_RCC_HSI_IsReady>
 8007446:	4603      	mov	r3, r0
 8007448:	2b01      	cmp	r3, #1
 800744a:	f040 8262 	bne.w	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      {
        frequency = HSI_VALUE;
 800744e:	4b16      	ldr	r3, [pc, #88]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8007450:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007452:	e25e      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      
    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8007454:	f7ff f9c0 	bl	80067d8 <LL_RCC_LSE_IsReady>
 8007458:	4603      	mov	r3, r0
 800745a:	2b01      	cmp	r3, #1
 800745c:	f040 825b 	bne.w	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = LSE_VALUE;
 8007460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007464:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007466:	e256      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      
    default: /* LPUART1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8007468:	f7fe ffdc 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 800746c:	4604      	mov	r4, r0
 800746e:	f7ff fa41 	bl	80068f4 <LL_RCC_GetAHBPrescaler>
 8007472:	4603      	mov	r3, r0
 8007474:	091b      	lsrs	r3, r3, #4
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	4a10      	ldr	r2, [pc, #64]	; (80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800747c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007480:	fbb4 f4f3 	udiv	r4, r4, r3
 8007484:	f7ff fa42 	bl	800690c <LL_RCC_GetAPB1Prescaler>
 8007488:	4603      	mov	r3, r0
 800748a:	0a1b      	lsrs	r3, r3, #8
 800748c:	f003 0307 	and.w	r3, r3, #7
 8007490:	4a0b      	ldr	r2, [pc, #44]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8007492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007496:	f003 031f 	and.w	r3, r3, #31
 800749a:	fa24 f303 	lsr.w	r3, r4, r3
 800749e:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80074a0:	e244      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 80074a2:	bf00      	nop
 80074a4:	000f4240 	.word	0x000f4240
 80074a8:	00f42400 	.word	0x00f42400
 80074ac:	001fff68 	.word	0x001fff68
 80074b0:	aaaaaaab 	.word	0xaaaaaaab
 80074b4:	08012464 	.word	0x08012464
 80074b8:	02dc6c00 	.word	0x02dc6c00
 80074bc:	08012404 	.word	0x08012404
 80074c0:	08012444 	.word	0x08012444
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ca:	d12a      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 80074cc:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 80074d0:	f7ff fbbd 	bl	8006c4e <LL_RCC_GetADCClockSource>
 80074d4:	4603      	mov	r3, r0
 80074d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074da:	d014      	beq.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80074dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074e0:	f200 821b 	bhi.w	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 80074e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074e8:	d003      	beq.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80074ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074ee:	d00e      	beq.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
      
    default: /* No clock used as ADC clock source */
      break;
 80074f0:	e213      	b.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80074f2:	f7ff fc62 	bl	8006dba <LL_RCC_PLLSAI1_IsReady>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	f040 8210 	bne.w	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        frequency = RCC_PLLSAI1_GetFreqDomain_R();
 80074fe:	f000 fbfb 	bl	8007cf8 <RCC_PLLSAI1_GetFreqDomain_R>
 8007502:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007504:	e20b      	b.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      frequency = HAL_RCC_GetSysClockFreq();
 8007506:	f7fe ff8d 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 800750a:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800750c:	e20e      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      if (LL_RCC_PLL_IsReady() == 1U)
 800750e:	f7ff fbf3 	bl	8006cf8 <LL_RCC_PLL_IsReady>
 8007512:	4603      	mov	r3, r0
 8007514:	2b01      	cmp	r3, #1
 8007516:	f040 8204 	bne.w	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
        frequency = RCC_PLL_GetFreqDomain_P();
 800751a:	f000 fb41 	bl	8007ba0 <RCC_PLL_GetFreqDomain_P>
 800751e:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007520:	e1ff      	b.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b04      	cmp	r3, #4
 8007526:	d135      	bne.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 8007528:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800752c:	f7ff fb2c 	bl	8006b88 <LL_RCC_GetI2CClockSource>
 8007530:	4603      	mov	r3, r0
 8007532:	4ab7      	ldr	r2, [pc, #732]	; (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d003      	beq.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8007538:	4ab6      	ldr	r2, [pc, #728]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d004      	beq.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 800753e:	e00c      	b.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
    case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8007540:	f7fe ff70 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 8007544:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007546:	e1f1      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8007548:	f7ff f910 	bl	800676c <LL_RCC_HSI_IsReady>
 800754c:	4603      	mov	r3, r0
 800754e:	2b01      	cmp	r3, #1
 8007550:	f040 81e9 	bne.w	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      {
        frequency = HSI_VALUE;
 8007554:	4bb0      	ldr	r3, [pc, #704]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8007556:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007558:	e1e5      	b.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      
    default: /* I2C1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800755a:	f7fe ff63 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 800755e:	4604      	mov	r4, r0
 8007560:	f7ff f9c8 	bl	80068f4 <LL_RCC_GetAHBPrescaler>
 8007564:	4603      	mov	r3, r0
 8007566:	091b      	lsrs	r3, r3, #4
 8007568:	f003 030f 	and.w	r3, r3, #15
 800756c:	4aab      	ldr	r2, [pc, #684]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800756e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007572:	fbb4 f4f3 	udiv	r4, r4, r3
 8007576:	f7ff f9c9 	bl	800690c <LL_RCC_GetAPB1Prescaler>
 800757a:	4603      	mov	r3, r0
 800757c:	0a1b      	lsrs	r3, r3, #8
 800757e:	f003 0307 	and.w	r3, r3, #7
 8007582:	4aa7      	ldr	r2, [pc, #668]	; (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8007584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007588:	f003 031f 	and.w	r3, r3, #31
 800758c:	fa24 f303 	lsr.w	r3, r4, r3
 8007590:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8007592:	e1cb      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b08      	cmp	r3, #8
 8007598:	d135      	bne.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 800759a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800759e:	f7ff faf3 	bl	8006b88 <LL_RCC_GetI2CClockSource>
 80075a2:	4603      	mov	r3, r0
 80075a4:	4a9f      	ldr	r2, [pc, #636]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d003      	beq.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80075aa:	4a9f      	ldr	r2, [pc, #636]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d004      	beq.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80075b0:	e00c      	b.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
    {
    case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80075b2:	f7fe ff37 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 80075b6:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80075b8:	e1b8      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80075ba:	f7ff f8d7 	bl	800676c <LL_RCC_HSI_IsReady>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	f040 81b2 	bne.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      {
        frequency = HSI_VALUE;
 80075c6:	4b94      	ldr	r3, [pc, #592]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80075c8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80075ca:	e1ae      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      
    default: /* I2C3 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80075cc:	f7fe ff2a 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 80075d0:	4604      	mov	r4, r0
 80075d2:	f7ff f98f 	bl	80068f4 <LL_RCC_GetAHBPrescaler>
 80075d6:	4603      	mov	r3, r0
 80075d8:	091b      	lsrs	r3, r3, #4
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	4a8f      	ldr	r2, [pc, #572]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80075e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075e4:	fbb4 f4f3 	udiv	r4, r4, r3
 80075e8:	f7ff f990 	bl	800690c <LL_RCC_GetAPB1Prescaler>
 80075ec:	4603      	mov	r3, r0
 80075ee:	0a1b      	lsrs	r3, r3, #8
 80075f0:	f003 0307 	and.w	r3, r3, #7
 80075f4:	4a8a      	ldr	r2, [pc, #552]	; (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80075f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075fa:	f003 031f 	and.w	r3, r3, #31
 80075fe:	fa24 f303 	lsr.w	r3, r4, r3
 8007602:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8007604:	e192      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b10      	cmp	r3, #16
 800760a:	d151      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 800760c:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8007610:	f7ff face 	bl	8006bb0 <LL_RCC_GetLPTIMClockSource>
 8007614:	62b8      	str	r0, [r7, #40]	; 0x28
    
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	4a84      	ldr	r2, [pc, #528]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d110      	bne.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800761e:	f7ff f8ed 	bl	80067fc <LL_RCC_LSI1_IsReady>
 8007622:	6278      	str	r0, [r7, #36]	; 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007624:	f7ff f8fc 	bl	8006820 <LL_RCC_LSI2_IsReady>
 8007628:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	2b01      	cmp	r3, #1
 800762e:	d003      	beq.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	2b01      	cmp	r3, #1
 8007634:	f040 817a 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8007638:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800763c:	647b      	str	r3, [r7, #68]	; 0x44
 800763e:	e175      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	4a7b      	ldr	r2, [pc, #492]	; (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d108      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8007648:	f7ff f890 	bl	800676c <LL_RCC_HSI_IsReady>
 800764c:	4603      	mov	r3, r0
 800764e:	2b01      	cmp	r3, #1
 8007650:	f040 816c 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 8007654:	4b70      	ldr	r3, [pc, #448]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8007656:	647b      	str	r3, [r7, #68]	; 0x44
 8007658:	e168      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 800765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765c:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8007660:	d109      	bne.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x532>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007662:	f7ff f8b9 	bl	80067d8 <LL_RCC_LSE_IsReady>
 8007666:	4603      	mov	r3, r0
 8007668:	2b01      	cmp	r3, #1
 800766a:	f040 815f 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800766e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007672:	647b      	str	r3, [r7, #68]	; 0x44
 8007674:	e15a      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 8007676:	f7fe fed5 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 800767a:	4604      	mov	r4, r0
 800767c:	f7ff f93a 	bl	80068f4 <LL_RCC_GetAHBPrescaler>
 8007680:	4603      	mov	r3, r0
 8007682:	091b      	lsrs	r3, r3, #4
 8007684:	f003 030f 	and.w	r3, r3, #15
 8007688:	4a64      	ldr	r2, [pc, #400]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800768a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800768e:	fbb4 f4f3 	udiv	r4, r4, r3
 8007692:	f7ff f93b 	bl	800690c <LL_RCC_GetAPB1Prescaler>
 8007696:	4603      	mov	r3, r0
 8007698:	0a1b      	lsrs	r3, r3, #8
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	4a60      	ldr	r2, [pc, #384]	; (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80076a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	fa24 f303 	lsr.w	r3, r4, r3
 80076ac:	647b      	str	r3, [r7, #68]	; 0x44
 80076ae:	e13d      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b20      	cmp	r3, #32
 80076b4:	d151      	bne.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 80076b6:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80076ba:	f7ff fa79 	bl	8006bb0 <LL_RCC_GetLPTIMClockSource>
 80076be:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 80076c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c2:	4a5c      	ldr	r2, [pc, #368]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d110      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80076c8:	f7ff f898 	bl	80067fc <LL_RCC_LSI1_IsReady>
 80076cc:	6338      	str	r0, [r7, #48]	; 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80076ce:	f7ff f8a7 	bl	8006820 <LL_RCC_LSI2_IsReady>
 80076d2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d003      	beq.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076dc:	2b01      	cmp	r3, #1
 80076de:	f040 8125 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 80076e2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80076e6:	647b      	str	r3, [r7, #68]	; 0x44
 80076e8:	e120      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 80076ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ec:	4a52      	ldr	r2, [pc, #328]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d108      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 80076f2:	f7ff f83b 	bl	800676c <LL_RCC_HSI_IsReady>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	f040 8117 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 80076fe:	4b46      	ldr	r3, [pc, #280]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8007700:	647b      	str	r3, [r7, #68]	; 0x44
 8007702:	e113      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8007704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007706:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800770a:	d109      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 800770c:	f7ff f864 	bl	80067d8 <LL_RCC_LSE_IsReady>
 8007710:	4603      	mov	r3, r0
 8007712:	2b01      	cmp	r3, #1
 8007714:	f040 810a 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8007718:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800771c:	647b      	str	r3, [r7, #68]	; 0x44
 800771e:	e105      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 8007720:	f7fe fe80 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 8007724:	4604      	mov	r4, r0
 8007726:	f7ff f8e5 	bl	80068f4 <LL_RCC_GetAHBPrescaler>
 800772a:	4603      	mov	r3, r0
 800772c:	091b      	lsrs	r3, r3, #4
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	4a3a      	ldr	r2, [pc, #232]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8007734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007738:	fbb4 f4f3 	udiv	r4, r4, r3
 800773c:	f7ff f8e6 	bl	800690c <LL_RCC_GetAPB1Prescaler>
 8007740:	4603      	mov	r3, r0
 8007742:	0a1b      	lsrs	r3, r3, #8
 8007744:	f003 0307 	and.w	r3, r3, #7
 8007748:	4a35      	ldr	r2, [pc, #212]	; (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800774a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800774e:	f003 031f 	and.w	r3, r3, #31
 8007752:	fa24 f303 	lsr.w	r3, r4, r3
 8007756:	647b      	str	r3, [r7, #68]	; 0x44
 8007758:	e0e8      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007760:	d119      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 8007762:	f7ff f8ba 	bl	80068da <LL_RCC_GetRFWKPClockSource>
 8007766:	63b8      	str	r0, [r7, #56]	; 0x38
    
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800776e:	d109      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007770:	f7ff f832 	bl	80067d8 <LL_RCC_LSE_IsReady>
 8007774:	4603      	mov	r3, r0
 8007776:	2b01      	cmp	r3, #1
 8007778:	f040 80d8 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800777c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007780:	647b      	str	r3, [r7, #68]	; 0x44
 8007782:	e0d3      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800778a:	f040 80cf 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 1024U;
 800778e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007792:	647b      	str	r3, [r7, #68]	; 0x44
 8007794:	e0ca      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800779c:	f040 80c6 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 80077a0:	f7ff f8e0 	bl	8006964 <LL_RCC_GetSMPSClockSource>
 80077a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 80077a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d115      	bne.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 80077ac:	f7fe ffde 	bl	800676c <LL_RCC_HSI_IsReady>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	f040 80ba 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 80077b8:	4920      	ldr	r1, [pc, #128]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 80077ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077bc:	4613      	mov	r3, r2
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	4413      	add	r3, r2
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	440b      	add	r3, r1
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a13      	ldr	r2, [pc, #76]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80077ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ce:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 80077d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077d2:	085b      	lsrs	r3, r3, #1
 80077d4:	647b      	str	r3, [r7, #68]	; 0x44
 80077d6:	e0a9      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 80077d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077de:	d131      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 80077e0:	f7fe ffb2 	bl	8006748 <LL_RCC_HSE_IsReady>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	f040 80a0 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 80077ec:	4913      	ldr	r1, [pc, #76]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 80077ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077f0:	4613      	mov	r3, r2
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	4413      	add	r3, r2
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	440b      	add	r3, r1
 80077fa:	3314      	adds	r3, #20
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a10      	ldr	r2, [pc, #64]	; (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8007800:	fbb2 f3f3 	udiv	r3, r2, r3
 8007804:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8007806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007808:	085b      	lsrs	r3, r3, #1
 800780a:	647b      	str	r3, [r7, #68]	; 0x44
 800780c:	e08e      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800780e:	bf00      	nop
 8007810:	00030100 	.word	0x00030100
 8007814:	00030200 	.word	0x00030200
 8007818:	00f42400 	.word	0x00f42400
 800781c:	08012404 	.word	0x08012404
 8007820:	08012444 	.word	0x08012444
 8007824:	00301000 	.word	0x00301000
 8007828:	00302000 	.word	0x00302000
 800782c:	000c0004 	.word	0x000c0004
 8007830:	000c0008 	.word	0x000c0008
 8007834:	00300010 	.word	0x00300010
 8007838:	00300020 	.word	0x00300020
 800783c:	080124a4 	.word	0x080124a4
 8007840:	01e84800 	.word	0x01e84800
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8007844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784a:	d16f      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      switch (LL_RCC_MSI_GetRange())
 800784c:	f7ff f81a 	bl	8006884 <LL_RCC_MSI_GetRange>
 8007850:	4603      	mov	r3, r0
 8007852:	2bb0      	cmp	r3, #176	; 0xb0
 8007854:	d037      	beq.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007856:	2bb0      	cmp	r3, #176	; 0xb0
 8007858:	d844      	bhi.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800785a:	2ba0      	cmp	r3, #160	; 0xa0
 800785c:	d024      	beq.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 800785e:	2ba0      	cmp	r3, #160	; 0xa0
 8007860:	d840      	bhi.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8007862:	2b80      	cmp	r3, #128	; 0x80
 8007864:	d002      	beq.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007866:	2b90      	cmp	r3, #144	; 0x90
 8007868:	d00f      	beq.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        break;
      case LL_RCC_MSIRANGE_11:
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
        break;
      default:
        break;
 800786a:	e03b      	b.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 800786c:	4b32      	ldr	r3, [pc, #200]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800786e:	6a19      	ldr	r1, [r3, #32]
 8007870:	4832      	ldr	r0, [pc, #200]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8007872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007874:	4613      	mov	r3, r2
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	4413      	add	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	4403      	add	r3, r0
 800787e:	3310      	adds	r3, #16
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	fbb1 f3f3 	udiv	r3, r1, r3
 8007886:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007888:	e02d      	b.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 800788a:	4b2b      	ldr	r3, [pc, #172]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800788c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800788e:	482b      	ldr	r0, [pc, #172]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8007890:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007892:	4613      	mov	r3, r2
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	4413      	add	r3, r2
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	4403      	add	r3, r0
 800789c:	330c      	adds	r3, #12
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80078a4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80078a6:	e01e      	b.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 80078a8:	4b23      	ldr	r3, [pc, #140]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80078aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80078ac:	4823      	ldr	r0, [pc, #140]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80078ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078b0:	4613      	mov	r3, r2
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	4413      	add	r3, r2
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	4403      	add	r3, r0
 80078ba:	3308      	adds	r3, #8
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	fbb1 f3f3 	udiv	r3, r1, r3
 80078c2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80078c4:	e00f      	b.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 80078c6:	4b1c      	ldr	r3, [pc, #112]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80078c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80078ca:	481c      	ldr	r0, [pc, #112]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80078cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078ce:	4613      	mov	r3, r2
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	4413      	add	r3, r2
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	4403      	add	r3, r0
 80078d8:	3304      	adds	r3, #4
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80078e0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80078e2:	e000      	b.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        break;
 80078e4:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 80078e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e8:	085b      	lsrs	r3, r3, #1
 80078ea:	647b      	str	r3, [r7, #68]	; 0x44
 80078ec:	e01e      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80078ee:	bf00      	nop
 80078f0:	e01c      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80078f2:	bf00      	nop
 80078f4:	e01a      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80078f6:	bf00      	nop
 80078f8:	e018      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80078fa:	bf00      	nop
 80078fc:	e016      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80078fe:	bf00      	nop
 8007900:	e014      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007902:	bf00      	nop
 8007904:	e012      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007906:	bf00      	nop
 8007908:	e010      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800790a:	bf00      	nop
 800790c:	e00e      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800790e:	bf00      	nop
 8007910:	e00c      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007912:	bf00      	nop
 8007914:	e00a      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007916:	bf00      	nop
 8007918:	e008      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800791a:	bf00      	nop
 800791c:	e006      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800791e:	bf00      	nop
 8007920:	e004      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007922:	bf00      	nop
 8007924:	e002      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007926:	bf00      	nop
 8007928:	e000      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800792a:	bf00      	nop
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif
  return (frequency);
 800792c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800792e:	4618      	mov	r0, r3
 8007930:	374c      	adds	r7, #76	; 0x4c
 8007932:	46bd      	mov	sp, r7
 8007934:	bd90      	pop	{r4, r7, pc}
 8007936:	bf00      	nop
 8007938:	08012464 	.word	0x08012464
 800793c:	080124a4 	.word	0x080124a4

08007940 <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 8007946:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 800794a:	f7ff f954 	bl	8006bf6 <LL_RCC_GetRNGClockSource>
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d108      	bne.n	8007968 <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 8007956:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 800795a:	f7ff f95c 	bl	8006c16 <LL_RCC_GetCLK48ClockSource>
 800795e:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007966:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 8007968:	687b      	ldr	r3, [r7, #4]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007976:	f7fe ff76 	bl	8006866 <LL_RCC_MSI_EnablePLLMode>
}
 800797a:	bf00      	nop
 800797c:	bd80      	pop	{r7, pc}

0800797e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800798a:	f7ff fa07 	bl	8006d9c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800798e:	f7f9 ffeb 	bl	8001968 <HAL_GetTick>
 8007992:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007994:	e009      	b.n	80079aa <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007996:	f7f9 ffe7 	bl	8001968 <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d902      	bls.n	80079aa <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	73fb      	strb	r3, [r7, #15]
      break;
 80079a8:	e004      	b.n	80079b4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079aa:	f7ff fa06 	bl	8006dba <LL_RCC_PLLSAI1_IsReady>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1f0      	bne.n	8007996 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d137      	bne.n	8007a2a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80079ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079ce:	4313      	orrs	r3, r2
 80079d0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80079d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079e4:	4313      	orrs	r3, r2
 80079e6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80079e8:	f7ff f9c9 	bl	8006d7e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ec:	f7f9 ffbc 	bl	8001968 <HAL_GetTick>
 80079f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80079f2:	e009      	b.n	8007a08 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079f4:	f7f9 ffb8 	bl	8001968 <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d902      	bls.n	8007a08 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	73fb      	strb	r3, [r7, #15]
        break;
 8007a06:	e004      	b.n	8007a12 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a08:	f7ff f9d7 	bl	8006dba <LL_RCC_PLLSAI1_IsReady>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d1f0      	bne.n	80079f4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d108      	bne.n	8007a2a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a1c:	691a      	ldr	r2, [r3, #16]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a26:	4313      	orrs	r3, r2
 8007a28:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007a40:	f7ff f9ac 	bl	8006d9c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a44:	f7f9 ff90 	bl	8001968 <HAL_GetTick>
 8007a48:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007a4a:	e009      	b.n	8007a60 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a4c:	f7f9 ff8c 	bl	8001968 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d902      	bls.n	8007a60 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a5e:	e004      	b.n	8007a6a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007a60:	f7ff f9ab 	bl	8006dba <LL_RCC_PLLSAI1_IsReady>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1f0      	bne.n	8007a4c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d137      	bne.n	8007ae0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a84:	4313      	orrs	r3, r2
 8007a86:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007a9e:	f7ff f96e 	bl	8006d7e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aa2:	f7f9 ff61 	bl	8001968 <HAL_GetTick>
 8007aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007aa8:	e009      	b.n	8007abe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007aaa:	f7f9 ff5d 	bl	8001968 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d902      	bls.n	8007abe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	73fb      	strb	r3, [r7, #15]
        break;
 8007abc:	e004      	b.n	8007ac8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007abe:	f7ff f97c 	bl	8006dba <LL_RCC_PLLSAI1_IsReady>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d1f0      	bne.n	8007aaa <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d108      	bne.n	8007ae0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007adc:	4313      	orrs	r3, r2
 8007ade:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007af6:	f7ff f951 	bl	8006d9c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007afa:	f7f9 ff35 	bl	8001968 <HAL_GetTick>
 8007afe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b00:	e009      	b.n	8007b16 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b02:	f7f9 ff31 	bl	8001968 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d902      	bls.n	8007b16 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	73fb      	strb	r3, [r7, #15]
      break;
 8007b14:	e004      	b.n	8007b20 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b16:	f7ff f950 	bl	8006dba <LL_RCC_PLLSAI1_IsReady>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1f0      	bne.n	8007b02 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d137      	bne.n	8007b96 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	021b      	lsls	r3, r3, #8
 8007b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b50:	4313      	orrs	r3, r2
 8007b52:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007b54:	f7ff f913 	bl	8006d7e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b58:	f7f9 ff06 	bl	8001968 <HAL_GetTick>
 8007b5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b5e:	e009      	b.n	8007b74 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b60:	f7f9 ff02 	bl	8001968 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d902      	bls.n	8007b74 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	73fb      	strb	r3, [r7, #15]
        break;
 8007b72:	e004      	b.n	8007b7e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b74:	f7ff f921 	bl	8006dba <LL_RCC_PLLSAI1_IsReady>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d1f0      	bne.n	8007b60 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d108      	bne.n	8007b96 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b88:	691a      	ldr	r2, [r3, #16]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b92:	4313      	orrs	r3, r2
 8007b94:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 8007ba0:	b590      	push	{r4, r7, lr}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007ba6:	f7ff f94b 	bl	8006e40 <LL_RCC_PLL_GetMainSource>
 8007baa:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d017      	beq.n	8007be2 <RCC_PLL_GetFreqDomain_P+0x42>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d81f      	bhi.n	8007bf8 <RCC_PLL_GetFreqDomain_P+0x58>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d003      	beq.n	8007bc6 <RCC_PLL_GetFreqDomain_P+0x26>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d00b      	beq.n	8007bdc <RCC_PLL_GetFreqDomain_P+0x3c>
 8007bc4:	e018      	b.n	8007bf8 <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007bc6:	f7fe fe5d 	bl	8006884 <LL_RCC_MSI_GetRange>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	091b      	lsrs	r3, r3, #4
 8007bce:	f003 030f 	and.w	r3, r3, #15
 8007bd2:	4a1b      	ldr	r2, [pc, #108]	; (8007c40 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8007bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bd8:	607b      	str	r3, [r7, #4]
      break;
 8007bda:	e018      	b.n	8007c0e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007bdc:	4b19      	ldr	r3, [pc, #100]	; (8007c44 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8007bde:	607b      	str	r3, [r7, #4]
      break;
 8007be0:	e015      	b.n	8007c0e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007be2:	f7fe fd9f 	bl	8006724 <LL_RCC_HSE_IsEnabledDiv2>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d102      	bne.n	8007bf2 <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007bec:	4b15      	ldr	r3, [pc, #84]	; (8007c44 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8007bee:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007bf0:	e00d      	b.n	8007c0e <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8007bf2:	4b15      	ldr	r3, [pc, #84]	; (8007c48 <RCC_PLL_GetFreqDomain_P+0xa8>)
 8007bf4:	607b      	str	r3, [r7, #4]
      break;
 8007bf6:	e00a      	b.n	8007c0e <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007bf8:	f7fe fe44 	bl	8006884 <LL_RCC_MSI_GetRange>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	091b      	lsrs	r3, r3, #4
 8007c00:	f003 030f 	and.w	r3, r3, #15
 8007c04:	4a0e      	ldr	r2, [pc, #56]	; (8007c40 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8007c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c0a:	607b      	str	r3, [r7, #4]
      break;
 8007c0c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007c0e:	f7ff f885 	bl	8006d1c <LL_RCC_PLL_GetN>
 8007c12:	4602      	mov	r2, r0
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	fb03 f402 	mul.w	r4, r3, r2
 8007c1a:	f7ff f8a4 	bl	8006d66 <LL_RCC_PLL_GetDivider>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	091b      	lsrs	r3, r3, #4
 8007c22:	3301      	adds	r3, #1
 8007c24:	fbb4 f4f3 	udiv	r4, r4, r3
 8007c28:	f7ff f885 	bl	8006d36 <LL_RCC_PLL_GetP>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	0c5b      	lsrs	r3, r3, #17
 8007c30:	3301      	adds	r3, #1
 8007c32:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd90      	pop	{r4, r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	08012464 	.word	0x08012464
 8007c44:	00f42400 	.word	0x00f42400
 8007c48:	01e84800 	.word	0x01e84800

08007c4c <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 8007c4c:	b590      	push	{r4, r7, lr}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007c52:	f7ff f8f5 	bl	8006e40 <LL_RCC_PLL_GetMainSource>
 8007c56:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d017      	beq.n	8007c8e <RCC_PLL_GetFreqDomain_Q+0x42>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d81f      	bhi.n	8007ca4 <RCC_PLL_GetFreqDomain_Q+0x58>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d003      	beq.n	8007c72 <RCC_PLL_GetFreqDomain_Q+0x26>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d00b      	beq.n	8007c88 <RCC_PLL_GetFreqDomain_Q+0x3c>
 8007c70:	e018      	b.n	8007ca4 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007c72:	f7fe fe07 	bl	8006884 <LL_RCC_MSI_GetRange>
 8007c76:	4603      	mov	r3, r0
 8007c78:	091b      	lsrs	r3, r3, #4
 8007c7a:	f003 030f 	and.w	r3, r3, #15
 8007c7e:	4a1b      	ldr	r2, [pc, #108]	; (8007cec <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8007c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c84:	607b      	str	r3, [r7, #4]
      break;
 8007c86:	e018      	b.n	8007cba <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007c88:	4b19      	ldr	r3, [pc, #100]	; (8007cf0 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8007c8a:	607b      	str	r3, [r7, #4]
      break;
 8007c8c:	e015      	b.n	8007cba <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007c8e:	f7fe fd49 	bl	8006724 <LL_RCC_HSE_IsEnabledDiv2>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d102      	bne.n	8007c9e <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007c98:	4b15      	ldr	r3, [pc, #84]	; (8007cf0 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8007c9a:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 8007c9c:	e00d      	b.n	8007cba <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8007c9e:	4b15      	ldr	r3, [pc, #84]	; (8007cf4 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 8007ca0:	607b      	str	r3, [r7, #4]
      break;
 8007ca2:	e00a      	b.n	8007cba <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007ca4:	f7fe fdee 	bl	8006884 <LL_RCC_MSI_GetRange>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	091b      	lsrs	r3, r3, #4
 8007cac:	f003 030f 	and.w	r3, r3, #15
 8007cb0:	4a0e      	ldr	r2, [pc, #56]	; (8007cec <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8007cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb6:	607b      	str	r3, [r7, #4]
      break;
 8007cb8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007cba:	f7ff f82f 	bl	8006d1c <LL_RCC_PLL_GetN>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	fb03 f402 	mul.w	r4, r3, r2
 8007cc6:	f7ff f84e 	bl	8006d66 <LL_RCC_PLL_GetDivider>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	091b      	lsrs	r3, r3, #4
 8007cce:	3301      	adds	r3, #1
 8007cd0:	fbb4 f4f3 	udiv	r4, r4, r3
 8007cd4:	f7ff f83b 	bl	8006d4e <LL_RCC_PLL_GetQ>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	0e5b      	lsrs	r3, r3, #25
 8007cdc:	3301      	adds	r3, #1
 8007cde:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd90      	pop	{r4, r7, pc}
 8007cea:	bf00      	nop
 8007cec:	08012464 	.word	0x08012464
 8007cf0:	00f42400 	.word	0x00f42400
 8007cf4:	01e84800 	.word	0x01e84800

08007cf8 <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 8007cf8:	b590      	push	{r4, r7, lr}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007cfe:	f7ff f89f 	bl	8006e40 <LL_RCC_PLL_GetMainSource>
 8007d02:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d017      	beq.n	8007d3a <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d81f      	bhi.n	8007d50 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d003      	beq.n	8007d1e <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d00b      	beq.n	8007d34 <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 8007d1c:	e018      	b.n	8007d50 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007d1e:	f7fe fdb1 	bl	8006884 <LL_RCC_MSI_GetRange>
 8007d22:	4603      	mov	r3, r0
 8007d24:	091b      	lsrs	r3, r3, #4
 8007d26:	f003 030f 	and.w	r3, r3, #15
 8007d2a:	4a1b      	ldr	r2, [pc, #108]	; (8007d98 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8007d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d30:	607b      	str	r3, [r7, #4]
      break;
 8007d32:	e018      	b.n	8007d66 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8007d34:	4b19      	ldr	r3, [pc, #100]	; (8007d9c <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8007d36:	607b      	str	r3, [r7, #4]
      break;
 8007d38:	e015      	b.n	8007d66 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007d3a:	f7fe fcf3 	bl	8006724 <LL_RCC_HSE_IsEnabledDiv2>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d102      	bne.n	8007d4a <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007d44:	4b15      	ldr	r3, [pc, #84]	; (8007d9c <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8007d46:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007d48:	e00d      	b.n	8007d66 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 8007d4a:	4b15      	ldr	r3, [pc, #84]	; (8007da0 <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 8007d4c:	607b      	str	r3, [r7, #4]
      break;
 8007d4e:	e00a      	b.n	8007d66 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007d50:	f7fe fd98 	bl	8006884 <LL_RCC_MSI_GetRange>
 8007d54:	4603      	mov	r3, r0
 8007d56:	091b      	lsrs	r3, r3, #4
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	4a0e      	ldr	r2, [pc, #56]	; (8007d98 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8007d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d62:	607b      	str	r3, [r7, #4]
      break;
 8007d64:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007d66:	f7ff f83a 	bl	8006dde <LL_RCC_PLLSAI1_GetN>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	fb03 f402 	mul.w	r4, r3, r2
 8007d72:	f7fe fff8 	bl	8006d66 <LL_RCC_PLL_GetDivider>
 8007d76:	4603      	mov	r3, r0
 8007d78:	091b      	lsrs	r3, r3, #4
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	fbb4 f4f3 	udiv	r4, r4, r3
 8007d80:	f7ff f852 	bl	8006e28 <LL_RCC_PLLSAI1_GetR>
 8007d84:	4603      	mov	r3, r0
 8007d86:	0f5b      	lsrs	r3, r3, #29
 8007d88:	3301      	adds	r3, #1
 8007d8a:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd90      	pop	{r4, r7, pc}
 8007d96:	bf00      	nop
 8007d98:	08012464 	.word	0x08012464
 8007d9c:	00f42400 	.word	0x00f42400
 8007da0:	01e84800 	.word	0x01e84800

08007da4 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 8007da4:	b590      	push	{r4, r7, lr}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007daa:	f7ff f849 	bl	8006e40 <LL_RCC_PLL_GetMainSource>
 8007dae:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d017      	beq.n	8007de6 <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d81f      	bhi.n	8007dfc <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d003      	beq.n	8007dca <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d00b      	beq.n	8007de0 <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 8007dc8:	e018      	b.n	8007dfc <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007dca:	f7fe fd5b 	bl	8006884 <LL_RCC_MSI_GetRange>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	091b      	lsrs	r3, r3, #4
 8007dd2:	f003 030f 	and.w	r3, r3, #15
 8007dd6:	4a1b      	ldr	r2, [pc, #108]	; (8007e44 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8007dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ddc:	607b      	str	r3, [r7, #4]
      break;
 8007dde:	e018      	b.n	8007e12 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8007de0:	4b19      	ldr	r3, [pc, #100]	; (8007e48 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8007de2:	607b      	str	r3, [r7, #4]
      break;
 8007de4:	e015      	b.n	8007e12 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007de6:	f7fe fc9d 	bl	8006724 <LL_RCC_HSE_IsEnabledDiv2>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d102      	bne.n	8007df6 <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007df0:	4b15      	ldr	r3, [pc, #84]	; (8007e48 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8007df2:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007df4:	e00d      	b.n	8007e12 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8007df6:	4b15      	ldr	r3, [pc, #84]	; (8007e4c <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 8007df8:	607b      	str	r3, [r7, #4]
      break;
 8007dfa:	e00a      	b.n	8007e12 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007dfc:	f7fe fd42 	bl	8006884 <LL_RCC_MSI_GetRange>
 8007e00:	4603      	mov	r3, r0
 8007e02:	091b      	lsrs	r3, r3, #4
 8007e04:	f003 030f 	and.w	r3, r3, #15
 8007e08:	4a0e      	ldr	r2, [pc, #56]	; (8007e44 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8007e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e0e:	607b      	str	r3, [r7, #4]
      break;
 8007e10:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007e12:	f7fe ffe4 	bl	8006dde <LL_RCC_PLLSAI1_GetN>
 8007e16:	4602      	mov	r2, r0
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	fb03 f402 	mul.w	r4, r3, r2
 8007e1e:	f7fe ffa2 	bl	8006d66 <LL_RCC_PLL_GetDivider>
 8007e22:	4603      	mov	r3, r0
 8007e24:	091b      	lsrs	r3, r3, #4
 8007e26:	3301      	adds	r3, #1
 8007e28:	fbb4 f4f3 	udiv	r4, r4, r3
 8007e2c:	f7fe ffe4 	bl	8006df8 <LL_RCC_PLLSAI1_GetP>
 8007e30:	4603      	mov	r3, r0
 8007e32:	0c5b      	lsrs	r3, r3, #17
 8007e34:	3301      	adds	r3, #1
 8007e36:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd90      	pop	{r4, r7, pc}
 8007e42:	bf00      	nop
 8007e44:	08012464 	.word	0x08012464
 8007e48:	00f42400 	.word	0x00f42400
 8007e4c:	01e84800 	.word	0x01e84800

08007e50 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8007e50:	b590      	push	{r4, r7, lr}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007e56:	f7fe fff3 	bl	8006e40 <LL_RCC_PLL_GetMainSource>
 8007e5a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d017      	beq.n	8007e92 <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d81f      	bhi.n	8007ea8 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d003      	beq.n	8007e76 <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d00b      	beq.n	8007e8c <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 8007e74:	e018      	b.n	8007ea8 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007e76:	f7fe fd05 	bl	8006884 <LL_RCC_MSI_GetRange>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	091b      	lsrs	r3, r3, #4
 8007e7e:	f003 030f 	and.w	r3, r3, #15
 8007e82:	4a1b      	ldr	r2, [pc, #108]	; (8007ef0 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8007e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e88:	607b      	str	r3, [r7, #4]
      break;
 8007e8a:	e018      	b.n	8007ebe <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8007e8c:	4b19      	ldr	r3, [pc, #100]	; (8007ef4 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8007e8e:	607b      	str	r3, [r7, #4]
      break;
 8007e90:	e015      	b.n	8007ebe <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007e92:	f7fe fc47 	bl	8006724 <LL_RCC_HSE_IsEnabledDiv2>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d102      	bne.n	8007ea2 <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007e9c:	4b15      	ldr	r3, [pc, #84]	; (8007ef4 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8007e9e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007ea0:	e00d      	b.n	8007ebe <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8007ea2:	4b15      	ldr	r3, [pc, #84]	; (8007ef8 <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 8007ea4:	607b      	str	r3, [r7, #4]
      break;
 8007ea6:	e00a      	b.n	8007ebe <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007ea8:	f7fe fcec 	bl	8006884 <LL_RCC_MSI_GetRange>
 8007eac:	4603      	mov	r3, r0
 8007eae:	091b      	lsrs	r3, r3, #4
 8007eb0:	f003 030f 	and.w	r3, r3, #15
 8007eb4:	4a0e      	ldr	r2, [pc, #56]	; (8007ef0 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8007eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eba:	607b      	str	r3, [r7, #4]
      break;
 8007ebc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007ebe:	f7fe ff8e 	bl	8006dde <LL_RCC_PLLSAI1_GetN>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	fb03 f402 	mul.w	r4, r3, r2
 8007eca:	f7fe ff4c 	bl	8006d66 <LL_RCC_PLL_GetDivider>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	091b      	lsrs	r3, r3, #4
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	fbb4 f4f3 	udiv	r4, r4, r3
 8007ed8:	f7fe ff9a 	bl	8006e10 <LL_RCC_PLLSAI1_GetQ>
 8007edc:	4603      	mov	r3, r0
 8007ede:	0e5b      	lsrs	r3, r3, #25
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd90      	pop	{r4, r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	08012464 	.word	0x08012464
 8007ef4:	00f42400 	.word	0x00f42400
 8007ef8:	01e84800 	.word	0x01e84800

08007efc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e090      	b.n	8008030 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d106      	bne.n	8007f28 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7f8 fee8 	bl	8000cf8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	22ca      	movs	r2, #202	; 0xca
 8007f36:	625a      	str	r2, [r3, #36]	; 0x24
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2253      	movs	r2, #83	; 0x53
 8007f3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f89f 	bl	8008084 <RTC_EnterInitMode>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d009      	beq.n	8007f60 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	22ff      	movs	r2, #255	; 0xff
 8007f52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2204      	movs	r2, #4
 8007f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e067      	b.n	8008030 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	6812      	ldr	r2, [r2, #0]
 8007f6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f72:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6899      	ldr	r1, [r3, #8]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	431a      	orrs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	68d2      	ldr	r2, [r2, #12]
 8007f9a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6919      	ldr	r1, [r3, #16]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	041a      	lsls	r2, r3, #16
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fbe:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0203 	bic.w	r2, r2, #3
 8007fce:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	69da      	ldr	r2, [r3, #28]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d113      	bne.n	800801e <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f81e 	bl	8008038 <HAL_RTC_WaitForSynchro>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00d      	beq.n	800801e <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	22ff      	movs	r2, #255	; 0xff
 8008008:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2204      	movs	r2, #4
 800800e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e008      	b.n	8008030 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	22ff      	movs	r2, #255	; 0xff
 8008024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800802e:	2300      	movs	r3, #0
  }
}
 8008030:	4618      	mov	r0, r3
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800804e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008050:	f7f9 fc8a 	bl	8001968 <HAL_GetTick>
 8008054:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008056:	e009      	b.n	800806c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008058:	f7f9 fc86 	bl	8001968 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008066:	d901      	bls.n	800806c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e007      	b.n	800807c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0ee      	beq.n	8008058 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d119      	bne.n	80080ce <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080a2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80080a4:	f7f9 fc60 	bl	8001968 <HAL_GetTick>
 80080a8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80080aa:	e009      	b.n	80080c0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80080ac:	f7f9 fc5c 	bl	8001968 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ba:	d901      	bls.n	80080c0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e007      	b.n	80080d0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0ee      	beq.n	80080ac <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d904      	bls.n	80080f6 <HAL_SAI_InitProtocol+0x1e>
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	3b03      	subs	r3, #3
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d812      	bhi.n	800811a <HAL_SAI_InitProtocol+0x42>
 80080f4:	e008      	b.n	8008108 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	68b9      	ldr	r1, [r7, #8]
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 f9af 	bl	8008460 <SAI_InitI2S>
 8008102:	4603      	mov	r3, r0
 8008104:	75fb      	strb	r3, [r7, #23]
      break;
 8008106:	e00b      	b.n	8008120 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	68b9      	ldr	r1, [r7, #8]
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fa58 	bl	80085c4 <SAI_InitPCM>
 8008114:	4603      	mov	r3, r0
 8008116:	75fb      	strb	r3, [r7, #23]
      break;
 8008118:	e002      	b.n	8008120 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	75fb      	strb	r3, [r7, #23]
      break;
 800811e:	bf00      	nop
  }

  if (status == HAL_OK)
 8008120:	7dfb      	ldrb	r3, [r7, #23]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d104      	bne.n	8008130 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 f808 	bl	800813c <HAL_SAI_Init>
 800812c:	4603      	mov	r3, r0
 800812e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008130:	7dfb      	ldrb	r3, [r7, #23]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e17c      	b.n	8008448 <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008154:	2b01      	cmp	r3, #1
 8008156:	d10e      	bne.n	8008176 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a5c      	ldr	r2, [pc, #368]	; (80082d0 <HAL_SAI_Init+0x194>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d107      	bne.n	8008172 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8008166:	2b01      	cmp	r3, #1
 8008168:	d103      	bne.n	8008172 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e168      	b.n	8008448 <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d106      	bne.n	8008190 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7f8 fe34 	bl	8000df8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fa99 	bl	80086c8 <SAI_Disable>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e153      	b.n	8008448 <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2202      	movs	r2, #2
 80081a4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <HAL_SAI_Init+0x7a>
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d003      	beq.n	80081bc <HAL_SAI_Init+0x80>
 80081b4:	e006      	b.n	80081c4 <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	61bb      	str	r3, [r7, #24]
      break;
 80081ba:	e006      	b.n	80081ca <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80081bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081c0:	61bb      	str	r3, [r7, #24]
      break;
 80081c2:	e002      	b.n	80081ca <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	61bb      	str	r3, [r7, #24]
      break;
 80081c8:	bf00      	nop
  }

  SAI1->GCR = 0;
 80081ca:	4b42      	ldr	r3, [pc, #264]	; (80082d4 <HAL_SAI_Init+0x198>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d062      	beq.n	800829e <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80081d8:	2040      	movs	r0, #64	; 0x40
 80081da:	f7fe ffb3 	bl	8007144 <HAL_RCCEx_GetPeriphCLKFreq>
 80081de:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081e8:	d120      	bne.n	800822c <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d102      	bne.n	80081f8 <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80081f2:	2340      	movs	r3, #64	; 0x40
 80081f4:	613b      	str	r3, [r7, #16]
 80081f6:	e00a      	b.n	800820e <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d103      	bne.n	8008208 <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8008200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008204:	613b      	str	r3, [r7, #16]
 8008206:	e002      	b.n	800820e <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800820c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4613      	mov	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	4619      	mov	r1, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	fb02 f303 	mul.w	r3, r2, r3
 8008224:	fbb1 f3f3 	udiv	r3, r1, r3
 8008228:	617b      	str	r3, [r7, #20]
 800822a:	e017      	b.n	800825c <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008234:	d101      	bne.n	800823a <HAL_SAI_Init+0xfe>
 8008236:	2302      	movs	r3, #2
 8008238:	e000      	b.n	800823c <HAL_SAI_Init+0x100>
 800823a:	2301      	movs	r3, #1
 800823c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	4613      	mov	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	4619      	mov	r1, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	fb02 f303 	mul.w	r3, r2, r3
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	fbb1 f3f3 	udiv	r3, r1, r3
 800825a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	4a1e      	ldr	r2, [pc, #120]	; (80082d8 <HAL_SAI_Init+0x19c>)
 8008260:	fba2 2303 	umull	r2, r3, r2, r3
 8008264:	08da      	lsrs	r2, r3, #3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800826a:	6979      	ldr	r1, [r7, #20]
 800826c:	4b1a      	ldr	r3, [pc, #104]	; (80082d8 <HAL_SAI_Init+0x19c>)
 800826e:	fba3 2301 	umull	r2, r3, r3, r1
 8008272:	08da      	lsrs	r2, r3, #3
 8008274:	4613      	mov	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	1aca      	subs	r2, r1, r3
 800827e:	2a08      	cmp	r2, #8
 8008280:	d904      	bls.n	800828c <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008290:	2b04      	cmp	r3, #4
 8008292:	d104      	bne.n	800829e <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	085a      	lsrs	r2, r3, #1
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <HAL_SAI_Init+0x172>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d109      	bne.n	80082c2 <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d101      	bne.n	80082ba <HAL_SAI_Init+0x17e>
 80082b6:	2300      	movs	r3, #0
 80082b8:	e001      	b.n	80082be <HAL_SAI_Init+0x182>
 80082ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082be:	61fb      	str	r3, [r7, #28]
 80082c0:	e00e      	b.n	80082e0 <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d108      	bne.n	80082dc <HAL_SAI_Init+0x1a0>
 80082ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ce:	e006      	b.n	80082de <HAL_SAI_Init+0x1a2>
 80082d0:	40015404 	.word	0x40015404
 80082d4:	40015400 	.word	0x40015400
 80082d8:	cccccccd 	.word	0xcccccccd
 80082dc:	2300      	movs	r3, #0
 80082de:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6819      	ldr	r1, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	4b59      	ldr	r3, [pc, #356]	; (8008450 <HAL_SAI_Init+0x314>)
 80082ec:	400b      	ands	r3, r1
 80082ee:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6819      	ldr	r1, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fe:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008304:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800830a:	431a      	orrs	r2, r3
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8008318:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008324:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	051b      	lsls	r3, r3, #20
 800832c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008332:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6812      	ldr	r2, [r2, #0]
 800834c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008350:	f023 030f 	bic.w	r3, r3, #15
 8008354:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6859      	ldr	r1, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	69da      	ldr	r2, [r3, #28]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008364:	431a      	orrs	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6899      	ldr	r1, [r3, #8]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	4b35      	ldr	r3, [pc, #212]	; (8008454 <HAL_SAI_Init+0x318>)
 8008380:	400b      	ands	r3, r1
 8008382:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6899      	ldr	r1, [r3, #8]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800838e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008394:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800839a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80083a0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a6:	3b01      	subs	r3, #1
 80083a8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80083aa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68d9      	ldr	r1, [r3, #12]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	f24f 0320 	movw	r3, #61472	; 0xf020
 80083c2:	400b      	ands	r3, r1
 80083c4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68d9      	ldr	r1, [r3, #12]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083d4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083da:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80083dc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e2:	3b01      	subs	r3, #1
 80083e4:	021b      	lsls	r3, r3, #8
 80083e6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a18      	ldr	r2, [pc, #96]	; (8008458 <HAL_SAI_Init+0x31c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d119      	bne.n	800842e <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80083fa:	4b18      	ldr	r3, [pc, #96]	; (800845c <HAL_SAI_Init+0x320>)
 80083fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fe:	4a17      	ldr	r2, [pc, #92]	; (800845c <HAL_SAI_Init+0x320>)
 8008400:	f023 0301 	bic.w	r3, r3, #1
 8008404:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800840c:	2b01      	cmp	r3, #1
 800840e:	d10e      	bne.n	800842e <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008418:	3b01      	subs	r3, #1
 800841a:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800841c:	490f      	ldr	r1, [pc, #60]	; (800845c <HAL_SAI_Init+0x320>)
 800841e:	4313      	orrs	r3, r2
 8008420:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8008422:	4b0e      	ldr	r3, [pc, #56]	; (800845c <HAL_SAI_Init+0x320>)
 8008424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008426:	4a0d      	ldr	r2, [pc, #52]	; (800845c <HAL_SAI_Init+0x320>)
 8008428:	f043 0301 	orr.w	r3, r3, #1
 800842c:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3720      	adds	r7, #32
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	f005c010 	.word	0xf005c010
 8008454:	fff88000 	.word	0xfff88000
 8008458:	40015404 	.word	0x40015404
 800845c:	40015400 	.word	0x40015400

08008460 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <SAI_InitI2S+0x2e>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	2b02      	cmp	r3, #2
 800848c:	d103      	bne.n	8008496 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	651a      	str	r2, [r3, #80]	; 0x50
 8008494:	e002      	b.n	800849c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2201      	movs	r2, #1
 800849a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80084a2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084aa:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e077      	b.n	80085b6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d107      	bne.n	80084dc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80084d8:	665a      	str	r2, [r3, #100]	; 0x64
 80084da:	e006      	b.n	80084ea <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80084e2:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	665a      	str	r2, [r3, #100]	; 0x64
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d84f      	bhi.n	8008590 <SAI_InitI2S+0x130>
 80084f0:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <SAI_InitI2S+0x98>)
 80084f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f6:	bf00      	nop
 80084f8:	08008509 	.word	0x08008509
 80084fc:	0800852b 	.word	0x0800852b
 8008500:	0800854d 	.word	0x0800854d
 8008504:	0800856f 	.word	0x0800856f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2280      	movs	r2, #128	; 0x80
 800850c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	085b      	lsrs	r3, r3, #1
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	085b      	lsrs	r3, r3, #1
 800851c:	011a      	lsls	r2, r3, #4
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2240      	movs	r2, #64	; 0x40
 8008526:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008528:	e035      	b.n	8008596 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2280      	movs	r2, #128	; 0x80
 800852e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	085b      	lsrs	r3, r3, #1
 8008534:	019a      	lsls	r2, r3, #6
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	085b      	lsrs	r3, r3, #1
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2280      	movs	r2, #128	; 0x80
 8008548:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800854a:	e024      	b.n	8008596 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	22c0      	movs	r2, #192	; 0xc0
 8008550:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	085b      	lsrs	r3, r3, #1
 8008556:	019a      	lsls	r2, r3, #6
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	085b      	lsrs	r3, r3, #1
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2280      	movs	r2, #128	; 0x80
 800856a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800856c:	e013      	b.n	8008596 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	22e0      	movs	r2, #224	; 0xe0
 8008572:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	085b      	lsrs	r3, r3, #1
 8008578:	019a      	lsls	r2, r3, #6
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	085b      	lsrs	r3, r3, #1
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2280      	movs	r2, #128	; 0x80
 800858c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800858e:	e002      	b.n	8008596 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	75fb      	strb	r3, [r7, #23]
      break;
 8008594:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b02      	cmp	r3, #2
 800859a:	d10b      	bne.n	80085b4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d102      	bne.n	80085a8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2210      	movs	r2, #16
 80085a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d102      	bne.n	80085b4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2208      	movs	r2, #8
 80085b2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop

080085c4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <SAI_InitPCM+0x2e>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d103      	bne.n	80085fa <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2201      	movs	r2, #1
 80085f6:	651a      	str	r2, [r3, #80]	; 0x50
 80085f8:	e002      	b.n	8008600 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800860c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008614:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008628:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b04      	cmp	r3, #4
 800862e:	d103      	bne.n	8008638 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	659a      	str	r2, [r3, #88]	; 0x58
 8008636:	e002      	b.n	800863e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	220d      	movs	r2, #13
 800863c:	659a      	str	r2, [r3, #88]	; 0x58
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b03      	cmp	r3, #3
 8008642:	d837      	bhi.n	80086b4 <SAI_InitPCM+0xf0>
 8008644:	a201      	add	r2, pc, #4	; (adr r2, 800864c <SAI_InitPCM+0x88>)
 8008646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864a:	bf00      	nop
 800864c:	0800865d 	.word	0x0800865d
 8008650:	08008673 	.word	0x08008673
 8008654:	08008689 	.word	0x08008689
 8008658:	0800869f 	.word	0x0800869f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2280      	movs	r2, #128	; 0x80
 8008660:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	011a      	lsls	r2, r3, #4
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2240      	movs	r2, #64	; 0x40
 800866e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008670:	e023      	b.n	80086ba <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2280      	movs	r2, #128	; 0x80
 8008676:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2280      	movs	r2, #128	; 0x80
 8008684:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008686:	e018      	b.n	80086ba <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	22c0      	movs	r2, #192	; 0xc0
 800868c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2280      	movs	r2, #128	; 0x80
 800869a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800869c:	e00d      	b.n	80086ba <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	22e0      	movs	r2, #224	; 0xe0
 80086a2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2280      	movs	r2, #128	; 0x80
 80086b0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80086b2:	e002      	b.n	80086ba <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	75fb      	strb	r3, [r7, #23]
      break;
 80086b8:	bf00      	nop
  }

  return status;
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	371c      	adds	r7, #28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80086d0:	4b18      	ldr	r3, [pc, #96]	; (8008734 <SAI_Disable+0x6c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a18      	ldr	r2, [pc, #96]	; (8008738 <SAI_Disable+0x70>)
 80086d6:	fba2 2303 	umull	r2, r3, r2, r3
 80086da:	0b1b      	lsrs	r3, r3, #12
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80086f2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10a      	bne.n	8008710 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008700:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	72fb      	strb	r3, [r7, #11]
      break;
 800870e:	e009      	b.n	8008724 <SAI_Disable+0x5c>
    }
    count--;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3b01      	subs	r3, #1
 8008714:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e7      	bne.n	80086f4 <SAI_Disable+0x2c>

  return status;
 8008724:	7afb      	ldrb	r3, [r7, #11]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20000004 	.word	0x20000004
 8008738:	95cbec1b 	.word	0x95cbec1b

0800873c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e095      	b.n	800887a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	2b00      	cmp	r3, #0
 8008754:	d108      	bne.n	8008768 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800875e:	d009      	beq.n	8008774 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	61da      	str	r2, [r3, #28]
 8008766:	e005      	b.n	8008774 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d106      	bne.n	8008794 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7f8 fc70 	bl	8001074 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087b4:	d902      	bls.n	80087bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80087b6:	2300      	movs	r3, #0
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	e002      	b.n	80087c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80087bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80087ca:	d007      	beq.n	80087dc <HAL_SPI_Init+0xa0>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087d4:	d002      	beq.n	80087dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80087ec:	431a      	orrs	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	431a      	orrs	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	431a      	orrs	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800880a:	431a      	orrs	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008814:	431a      	orrs	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800881e:	ea42 0103 	orr.w	r1, r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	0c1b      	lsrs	r3, r3, #16
 8008838:	f003 0204 	and.w	r2, r3, #4
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	f003 0310 	and.w	r3, r3, #16
 8008844:	431a      	orrs	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884a:	f003 0308 	and.w	r3, r3, #8
 800884e:	431a      	orrs	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008858:	ea42 0103 	orr.w	r1, r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e049      	b.n	8008928 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b00      	cmp	r3, #0
 800889e:	d106      	bne.n	80088ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7f8 ffa7 	bl	80017fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2202      	movs	r2, #2
 80088b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	3304      	adds	r3, #4
 80088be:	4619      	mov	r1, r3
 80088c0:	4610      	mov	r0, r2
 80088c2:	f000 fb3f 	bl	8008f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b01      	cmp	r3, #1
 8008942:	d001      	beq.n	8008948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e036      	b.n	80089b6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f042 0201 	orr.w	r2, r2, #1
 800895e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a17      	ldr	r2, [pc, #92]	; (80089c4 <HAL_TIM_Base_Start_IT+0x94>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d004      	beq.n	8008974 <HAL_TIM_Base_Start_IT+0x44>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008972:	d115      	bne.n	80089a0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689a      	ldr	r2, [r3, #8]
 800897a:	4b13      	ldr	r3, [pc, #76]	; (80089c8 <HAL_TIM_Base_Start_IT+0x98>)
 800897c:	4013      	ands	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b06      	cmp	r3, #6
 8008984:	d015      	beq.n	80089b2 <HAL_TIM_Base_Start_IT+0x82>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800898c:	d011      	beq.n	80089b2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f042 0201 	orr.w	r2, r2, #1
 800899c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800899e:	e008      	b.n	80089b2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f042 0201 	orr.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	e000      	b.n	80089b4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	40012c00 	.word	0x40012c00
 80089c8:	00010007 	.word	0x00010007

080089cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e049      	b.n	8008a72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d106      	bne.n	80089f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f841 	bl	8008a7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3304      	adds	r3, #4
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	f000 fa9a 	bl	8008f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b083      	sub	sp, #12
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a82:	bf00      	nop
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d122      	bne.n	8008aea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d11b      	bne.n	8008aea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f06f 0202 	mvn.w	r2, #2
 8008aba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	f003 0303 	and.w	r3, r3, #3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fa19 	bl	8008f08 <HAL_TIM_IC_CaptureCallback>
 8008ad6:	e005      	b.n	8008ae4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fa0b 	bl	8008ef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fa1c 	bl	8008f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b04      	cmp	r3, #4
 8008af6:	d122      	bne.n	8008b3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f003 0304 	and.w	r3, r3, #4
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d11b      	bne.n	8008b3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f06f 0204 	mvn.w	r2, #4
 8008b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d003      	beq.n	8008b2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f9ef 	bl	8008f08 <HAL_TIM_IC_CaptureCallback>
 8008b2a:	e005      	b.n	8008b38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f9e1 	bl	8008ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f9f2 	bl	8008f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	f003 0308 	and.w	r3, r3, #8
 8008b48:	2b08      	cmp	r3, #8
 8008b4a:	d122      	bne.n	8008b92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f003 0308 	and.w	r3, r3, #8
 8008b56:	2b08      	cmp	r3, #8
 8008b58:	d11b      	bne.n	8008b92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f06f 0208 	mvn.w	r2, #8
 8008b62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2204      	movs	r2, #4
 8008b68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	f003 0303 	and.w	r3, r3, #3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d003      	beq.n	8008b80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f9c5 	bl	8008f08 <HAL_TIM_IC_CaptureCallback>
 8008b7e:	e005      	b.n	8008b8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f9b7 	bl	8008ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f9c8 	bl	8008f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	f003 0310 	and.w	r3, r3, #16
 8008b9c:	2b10      	cmp	r3, #16
 8008b9e:	d122      	bne.n	8008be6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f003 0310 	and.w	r3, r3, #16
 8008baa:	2b10      	cmp	r3, #16
 8008bac:	d11b      	bne.n	8008be6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f06f 0210 	mvn.w	r2, #16
 8008bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2208      	movs	r2, #8
 8008bbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f99b 	bl	8008f08 <HAL_TIM_IC_CaptureCallback>
 8008bd2:	e005      	b.n	8008be0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f98d 	bl	8008ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f99e 	bl	8008f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d10e      	bne.n	8008c12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d107      	bne.n	8008c12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f06f 0201 	mvn.w	r2, #1
 8008c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7f8 f801 	bl	8000c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c1c:	2b80      	cmp	r3, #128	; 0x80
 8008c1e:	d10e      	bne.n	8008c3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2a:	2b80      	cmp	r3, #128	; 0x80
 8008c2c:	d107      	bne.n	8008c3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fcff 	bl	800963c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4c:	d10e      	bne.n	8008c6c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c58:	2b80      	cmp	r3, #128	; 0x80
 8008c5a:	d107      	bne.n	8008c6c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fcf2 	bl	8009650 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c76:	2b40      	cmp	r3, #64	; 0x40
 8008c78:	d10e      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c84:	2b40      	cmp	r3, #64	; 0x40
 8008c86:	d107      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f94c 	bl	8008f30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f003 0320 	and.w	r3, r3, #32
 8008ca2:	2b20      	cmp	r3, #32
 8008ca4:	d10e      	bne.n	8008cc4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f003 0320 	and.w	r3, r3, #32
 8008cb0:	2b20      	cmp	r3, #32
 8008cb2:	d107      	bne.n	8008cc4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f06f 0220 	mvn.w	r2, #32
 8008cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fcb2 	bl	8009628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d101      	bne.n	8008cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	e0ff      	b.n	8008eea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b14      	cmp	r3, #20
 8008cf6:	f200 80f0 	bhi.w	8008eda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008cfa:	a201      	add	r2, pc, #4	; (adr r2, 8008d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d00:	08008d55 	.word	0x08008d55
 8008d04:	08008edb 	.word	0x08008edb
 8008d08:	08008edb 	.word	0x08008edb
 8008d0c:	08008edb 	.word	0x08008edb
 8008d10:	08008d95 	.word	0x08008d95
 8008d14:	08008edb 	.word	0x08008edb
 8008d18:	08008edb 	.word	0x08008edb
 8008d1c:	08008edb 	.word	0x08008edb
 8008d20:	08008dd7 	.word	0x08008dd7
 8008d24:	08008edb 	.word	0x08008edb
 8008d28:	08008edb 	.word	0x08008edb
 8008d2c:	08008edb 	.word	0x08008edb
 8008d30:	08008e17 	.word	0x08008e17
 8008d34:	08008edb 	.word	0x08008edb
 8008d38:	08008edb 	.word	0x08008edb
 8008d3c:	08008edb 	.word	0x08008edb
 8008d40:	08008e59 	.word	0x08008e59
 8008d44:	08008edb 	.word	0x08008edb
 8008d48:	08008edb 	.word	0x08008edb
 8008d4c:	08008edb 	.word	0x08008edb
 8008d50:	08008e99 	.word	0x08008e99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f956 	bl	800900c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	699a      	ldr	r2, [r3, #24]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 0208 	orr.w	r2, r2, #8
 8008d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	699a      	ldr	r2, [r3, #24]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 0204 	bic.w	r2, r2, #4
 8008d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6999      	ldr	r1, [r3, #24]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	691a      	ldr	r2, [r3, #16]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	619a      	str	r2, [r3, #24]
      break;
 8008d92:	e0a5      	b.n	8008ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68b9      	ldr	r1, [r7, #8]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 f9b2 	bl	8009104 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	699a      	ldr	r2, [r3, #24]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	699a      	ldr	r2, [r3, #24]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	6999      	ldr	r1, [r3, #24]
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	021a      	lsls	r2, r3, #8
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	619a      	str	r2, [r3, #24]
      break;
 8008dd4:	e084      	b.n	8008ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68b9      	ldr	r1, [r7, #8]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fa0b 	bl	80091f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69da      	ldr	r2, [r3, #28]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f042 0208 	orr.w	r2, r2, #8
 8008df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69da      	ldr	r2, [r3, #28]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 0204 	bic.w	r2, r2, #4
 8008e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	69d9      	ldr	r1, [r3, #28]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	691a      	ldr	r2, [r3, #16]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	61da      	str	r2, [r3, #28]
      break;
 8008e14:	e064      	b.n	8008ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68b9      	ldr	r1, [r7, #8]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 fa63 	bl	80092e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	69da      	ldr	r2, [r3, #28]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	69da      	ldr	r2, [r3, #28]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	69d9      	ldr	r1, [r3, #28]
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	021a      	lsls	r2, r3, #8
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	61da      	str	r2, [r3, #28]
      break;
 8008e56:	e043      	b.n	8008ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 faa0 	bl	80093a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f042 0208 	orr.w	r2, r2, #8
 8008e72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 0204 	bic.w	r2, r2, #4
 8008e82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	691a      	ldr	r2, [r3, #16]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e96:	e023      	b.n	8008ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fad8 	bl	8009454 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008eb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ec2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	021a      	lsls	r2, r3, #8
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ed8:	e002      	b.n	8008ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	75fb      	strb	r3, [r7, #23]
      break;
 8008ede:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3718      	adds	r7, #24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop

08008ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a2a      	ldr	r2, [pc, #168]	; (8009000 <TIM_Base_SetConfig+0xbc>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d003      	beq.n	8008f64 <TIM_Base_SetConfig+0x20>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f62:	d108      	bne.n	8008f76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a21      	ldr	r2, [pc, #132]	; (8009000 <TIM_Base_SetConfig+0xbc>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d00b      	beq.n	8008f96 <TIM_Base_SetConfig+0x52>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f84:	d007      	beq.n	8008f96 <TIM_Base_SetConfig+0x52>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a1e      	ldr	r2, [pc, #120]	; (8009004 <TIM_Base_SetConfig+0xc0>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d003      	beq.n	8008f96 <TIM_Base_SetConfig+0x52>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a1d      	ldr	r2, [pc, #116]	; (8009008 <TIM_Base_SetConfig+0xc4>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d108      	bne.n	8008fa8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	689a      	ldr	r2, [r3, #8]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a0c      	ldr	r2, [pc, #48]	; (8009000 <TIM_Base_SetConfig+0xbc>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d007      	beq.n	8008fe4 <TIM_Base_SetConfig+0xa0>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a0b      	ldr	r2, [pc, #44]	; (8009004 <TIM_Base_SetConfig+0xc0>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d003      	beq.n	8008fe4 <TIM_Base_SetConfig+0xa0>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a0a      	ldr	r2, [pc, #40]	; (8009008 <TIM_Base_SetConfig+0xc4>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d103      	bne.n	8008fec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	691a      	ldr	r2, [r3, #16]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	615a      	str	r2, [r3, #20]
}
 8008ff2:	bf00      	nop
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	40012c00 	.word	0x40012c00
 8009004:	40014400 	.word	0x40014400
 8009008:	40014800 	.word	0x40014800

0800900c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	f023 0201 	bic.w	r2, r3, #1
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800903a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800903e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f023 0303 	bic.w	r3, r3, #3
 8009046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	4313      	orrs	r3, r2
 8009050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f023 0302 	bic.w	r3, r3, #2
 8009058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	4313      	orrs	r3, r2
 8009062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a24      	ldr	r2, [pc, #144]	; (80090f8 <TIM_OC1_SetConfig+0xec>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d007      	beq.n	800907c <TIM_OC1_SetConfig+0x70>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a23      	ldr	r2, [pc, #140]	; (80090fc <TIM_OC1_SetConfig+0xf0>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d003      	beq.n	800907c <TIM_OC1_SetConfig+0x70>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a22      	ldr	r2, [pc, #136]	; (8009100 <TIM_OC1_SetConfig+0xf4>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d10c      	bne.n	8009096 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f023 0308 	bic.w	r3, r3, #8
 8009082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	4313      	orrs	r3, r2
 800908c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f023 0304 	bic.w	r3, r3, #4
 8009094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a17      	ldr	r2, [pc, #92]	; (80090f8 <TIM_OC1_SetConfig+0xec>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d007      	beq.n	80090ae <TIM_OC1_SetConfig+0xa2>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a17      	ldr	r2, [pc, #92]	; (8009100 <TIM_OC1_SetConfig+0xf4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d003      	beq.n	80090ae <TIM_OC1_SetConfig+0xa2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a14      	ldr	r2, [pc, #80]	; (80090fc <TIM_OC1_SetConfig+0xf0>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d111      	bne.n	80090d2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	621a      	str	r2, [r3, #32]
}
 80090ec:	bf00      	nop
 80090ee:	371c      	adds	r7, #28
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	40012c00 	.word	0x40012c00
 80090fc:	40014800 	.word	0x40014800
 8009100:	40014400 	.word	0x40014400

08009104 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	f023 0210 	bic.w	r2, r3, #16
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800913e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	021b      	lsls	r3, r3, #8
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	4313      	orrs	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f023 0320 	bic.w	r3, r3, #32
 8009152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	011b      	lsls	r3, r3, #4
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	4313      	orrs	r3, r2
 800915e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a22      	ldr	r2, [pc, #136]	; (80091ec <TIM_OC2_SetConfig+0xe8>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d10d      	bne.n	8009184 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800916e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	011b      	lsls	r3, r3, #4
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	4313      	orrs	r3, r2
 800917a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009182:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a19      	ldr	r2, [pc, #100]	; (80091ec <TIM_OC2_SetConfig+0xe8>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d007      	beq.n	800919c <TIM_OC2_SetConfig+0x98>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a18      	ldr	r2, [pc, #96]	; (80091f0 <TIM_OC2_SetConfig+0xec>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d003      	beq.n	800919c <TIM_OC2_SetConfig+0x98>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a17      	ldr	r2, [pc, #92]	; (80091f4 <TIM_OC2_SetConfig+0xf0>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d113      	bne.n	80091c4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	621a      	str	r2, [r3, #32]
}
 80091de:	bf00      	nop
 80091e0:	371c      	adds	r7, #28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	40012c00 	.word	0x40012c00
 80091f0:	40014400 	.word	0x40014400
 80091f4:	40014800 	.word	0x40014800

080091f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f023 0303 	bic.w	r3, r3, #3
 8009232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	4313      	orrs	r3, r2
 800923c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	021b      	lsls	r3, r3, #8
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	4313      	orrs	r3, r2
 8009250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a21      	ldr	r2, [pc, #132]	; (80092dc <TIM_OC3_SetConfig+0xe4>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d10d      	bne.n	8009276 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	021b      	lsls	r3, r3, #8
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	4313      	orrs	r3, r2
 800926c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a18      	ldr	r2, [pc, #96]	; (80092dc <TIM_OC3_SetConfig+0xe4>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d007      	beq.n	800928e <TIM_OC3_SetConfig+0x96>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a17      	ldr	r2, [pc, #92]	; (80092e0 <TIM_OC3_SetConfig+0xe8>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d003      	beq.n	800928e <TIM_OC3_SetConfig+0x96>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a16      	ldr	r2, [pc, #88]	; (80092e4 <TIM_OC3_SetConfig+0xec>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d113      	bne.n	80092b6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800929c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	011b      	lsls	r3, r3, #4
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	621a      	str	r2, [r3, #32]
}
 80092d0:	bf00      	nop
 80092d2:	371c      	adds	r7, #28
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	40012c00 	.word	0x40012c00
 80092e0:	40014400 	.word	0x40014400
 80092e4:	40014800 	.word	0x40014800

080092e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800931a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	021b      	lsls	r3, r3, #8
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	4313      	orrs	r3, r2
 800932e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	031b      	lsls	r3, r3, #12
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	4313      	orrs	r3, r2
 8009342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a14      	ldr	r2, [pc, #80]	; (8009398 <TIM_OC4_SetConfig+0xb0>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d007      	beq.n	800935c <TIM_OC4_SetConfig+0x74>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a13      	ldr	r2, [pc, #76]	; (800939c <TIM_OC4_SetConfig+0xb4>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d003      	beq.n	800935c <TIM_OC4_SetConfig+0x74>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a12      	ldr	r2, [pc, #72]	; (80093a0 <TIM_OC4_SetConfig+0xb8>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d109      	bne.n	8009370 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009362:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	019b      	lsls	r3, r3, #6
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	4313      	orrs	r3, r2
 800936e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	621a      	str	r2, [r3, #32]
}
 800938a:	bf00      	nop
 800938c:	371c      	adds	r7, #28
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	40012c00 	.word	0x40012c00
 800939c:	40014400 	.word	0x40014400
 80093a0:	40014800 	.word	0x40014800

080093a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	041b      	lsls	r3, r3, #16
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a13      	ldr	r2, [pc, #76]	; (8009448 <TIM_OC5_SetConfig+0xa4>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d007      	beq.n	800940e <TIM_OC5_SetConfig+0x6a>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a12      	ldr	r2, [pc, #72]	; (800944c <TIM_OC5_SetConfig+0xa8>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d003      	beq.n	800940e <TIM_OC5_SetConfig+0x6a>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a11      	ldr	r2, [pc, #68]	; (8009450 <TIM_OC5_SetConfig+0xac>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d109      	bne.n	8009422 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009414:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	021b      	lsls	r3, r3, #8
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	4313      	orrs	r3, r2
 8009420:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	685a      	ldr	r2, [r3, #4]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	621a      	str	r2, [r3, #32]
}
 800943c:	bf00      	nop
 800943e:	371c      	adds	r7, #28
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	40012c00 	.word	0x40012c00
 800944c:	40014400 	.word	0x40014400
 8009450:	40014800 	.word	0x40014800

08009454 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800947a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	4313      	orrs	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800949a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	051b      	lsls	r3, r3, #20
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a14      	ldr	r2, [pc, #80]	; (80094fc <TIM_OC6_SetConfig+0xa8>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d007      	beq.n	80094c0 <TIM_OC6_SetConfig+0x6c>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a13      	ldr	r2, [pc, #76]	; (8009500 <TIM_OC6_SetConfig+0xac>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d003      	beq.n	80094c0 <TIM_OC6_SetConfig+0x6c>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a12      	ldr	r2, [pc, #72]	; (8009504 <TIM_OC6_SetConfig+0xb0>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d109      	bne.n	80094d4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	029b      	lsls	r3, r3, #10
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	621a      	str	r2, [r3, #32]
}
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	40012c00 	.word	0x40012c00
 8009500:	40014400 	.word	0x40014400
 8009504:	40014800 	.word	0x40014800

08009508 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800951c:	2b01      	cmp	r3, #1
 800951e:	d101      	bne.n	8009524 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009520:	2302      	movs	r3, #2
 8009522:	e078      	b.n	8009616 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	4313      	orrs	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	4313      	orrs	r3, r2
 8009546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	4313      	orrs	r3, r2
 8009554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4313      	orrs	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	4313      	orrs	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	695b      	ldr	r3, [r3, #20]
 800957c:	4313      	orrs	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	041b      	lsls	r3, r3, #16
 800959a:	4313      	orrs	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a20      	ldr	r2, [pc, #128]	; (8009624 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d106      	bne.n	80095b6 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a1a      	ldr	r2, [pc, #104]	; (8009624 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d121      	bne.n	8009604 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ca:	051b      	lsls	r3, r3, #20
 80095cc:	4313      	orrs	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	4313      	orrs	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	4313      	orrs	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a0c      	ldr	r2, [pc, #48]	; (8009624 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d106      	bne.n	8009604 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009600:	4313      	orrs	r3, r2
 8009602:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	40012c00 	.word	0x40012c00

08009628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009674:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009678:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	b29a      	uxth	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009692:	b480      	push	{r7}
 8009694:	b085      	sub	sp, #20
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800969a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800969e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	43db      	mvns	r3, r3
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	4013      	ands	r3, r2
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80096c8:	b084      	sub	sp, #16
 80096ca:	b480      	push	{r7}
 80096cc:	b083      	sub	sp, #12
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	f107 0014 	add.w	r0, r7, #20
 80096d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	b004      	add	sp, #16
 8009708:	4770      	bx	lr
	...

0800970c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800970c:	b480      	push	{r7}
 800970e:	b09d      	sub	sp, #116	; 0x74
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	b29b      	uxth	r3, r3
 800972a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800972e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009732:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	78db      	ldrb	r3, [r3, #3]
 800973a:	2b03      	cmp	r3, #3
 800973c:	d81f      	bhi.n	800977e <USB_ActivateEndpoint+0x72>
 800973e:	a201      	add	r2, pc, #4	; (adr r2, 8009744 <USB_ActivateEndpoint+0x38>)
 8009740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009744:	08009755 	.word	0x08009755
 8009748:	08009771 	.word	0x08009771
 800974c:	08009787 	.word	0x08009787
 8009750:	08009763 	.word	0x08009763
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009754:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009758:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800975c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009760:	e012      	b.n	8009788 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009762:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009766:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800976a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800976e:	e00b      	b.n	8009788 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009770:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009774:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009778:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800977c:	e004      	b.n	8009788 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009784:	e000      	b.n	8009788 <USB_ActivateEndpoint+0x7c>
      break;
 8009786:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	441a      	add	r2, r3
 8009792:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800979a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800979e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	b21b      	sxth	r3, r3
 80097ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097c2:	b21a      	sxth	r2, r3
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	b21b      	sxth	r3, r3
 80097ca:	4313      	orrs	r3, r2
 80097cc:	b21b      	sxth	r3, r3
 80097ce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	441a      	add	r2, r3
 80097dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80097e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	7b1b      	ldrb	r3, [r3, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f040 8149 	bne.w	8009a90 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	785b      	ldrb	r3, [r3, #1]
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 8084 	beq.w	8009910 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	61bb      	str	r3, [r7, #24]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009812:	b29b      	uxth	r3, r3
 8009814:	461a      	mov	r2, r3
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	4413      	add	r3, r2
 800981a:	61bb      	str	r3, [r7, #24]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	00da      	lsls	r2, r3, #3
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	4413      	add	r3, r2
 8009826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800982a:	617b      	str	r3, [r7, #20]
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	88db      	ldrh	r3, [r3, #6]
 8009830:	085b      	lsrs	r3, r3, #1
 8009832:	b29b      	uxth	r3, r3
 8009834:	005b      	lsls	r3, r3, #1
 8009836:	b29a      	uxth	r2, r3
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	827b      	strh	r3, [r7, #18]
 800984a:	8a7b      	ldrh	r3, [r7, #18]
 800984c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009850:	2b00      	cmp	r3, #0
 8009852:	d01b      	beq.n	800988c <USB_ActivateEndpoint+0x180>
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	b29b      	uxth	r3, r3
 8009862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800986a:	823b      	strh	r3, [r7, #16]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	441a      	add	r2, r3
 8009876:	8a3b      	ldrh	r3, [r7, #16]
 8009878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800987c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009884:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009888:	b29b      	uxth	r3, r3
 800988a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	78db      	ldrb	r3, [r3, #3]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d020      	beq.n	80098d6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098aa:	81bb      	strh	r3, [r7, #12]
 80098ac:	89bb      	ldrh	r3, [r7, #12]
 80098ae:	f083 0320 	eor.w	r3, r3, #32
 80098b2:	81bb      	strh	r3, [r7, #12]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	441a      	add	r2, r3
 80098be:	89bb      	ldrh	r3, [r7, #12]
 80098c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	8013      	strh	r3, [r2, #0]
 80098d4:	e2a6      	b.n	8009e24 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ec:	81fb      	strh	r3, [r7, #14]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	441a      	add	r2, r3
 80098f8:	89fb      	ldrh	r3, [r7, #14]
 80098fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800990a:	b29b      	uxth	r3, r3
 800990c:	8013      	strh	r3, [r2, #0]
 800990e:	e289      	b.n	8009e24 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	633b      	str	r3, [r7, #48]	; 0x30
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800991a:	b29b      	uxth	r3, r3
 800991c:	461a      	mov	r2, r3
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	4413      	add	r3, r2
 8009922:	633b      	str	r3, [r7, #48]	; 0x30
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	00da      	lsls	r2, r3, #3
 800992a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992c:	4413      	add	r3, r2
 800992e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	88db      	ldrh	r3, [r3, #6]
 8009938:	085b      	lsrs	r3, r3, #1
 800993a:	b29b      	uxth	r3, r3
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	b29a      	uxth	r2, r3
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009942:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	62bb      	str	r3, [r7, #40]	; 0x28
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800994e:	b29b      	uxth	r3, r3
 8009950:	461a      	mov	r2, r3
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009954:	4413      	add	r3, r2
 8009956:	62bb      	str	r3, [r7, #40]	; 0x28
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	00da      	lsls	r2, r3, #3
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	4413      	add	r3, r2
 8009962:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009966:	627b      	str	r3, [r7, #36]	; 0x24
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	2b3e      	cmp	r3, #62	; 0x3e
 800996e:	d918      	bls.n	80099a2 <USB_ActivateEndpoint+0x296>
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	095b      	lsrs	r3, r3, #5
 8009976:	66bb      	str	r3, [r7, #104]	; 0x68
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	f003 031f 	and.w	r3, r3, #31
 8009980:	2b00      	cmp	r3, #0
 8009982:	d102      	bne.n	800998a <USB_ActivateEndpoint+0x27e>
 8009984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009986:	3b01      	subs	r3, #1
 8009988:	66bb      	str	r3, [r7, #104]	; 0x68
 800998a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800998c:	b29b      	uxth	r3, r3
 800998e:	029b      	lsls	r3, r3, #10
 8009990:	b29b      	uxth	r3, r3
 8009992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800999a:	b29a      	uxth	r2, r3
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	801a      	strh	r2, [r3, #0]
 80099a0:	e029      	b.n	80099f6 <USB_ActivateEndpoint+0x2ea>
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d112      	bne.n	80099d0 <USB_ActivateEndpoint+0x2c4>
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	801a      	strh	r2, [r3, #0]
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	801a      	strh	r2, [r3, #0]
 80099ce:	e012      	b.n	80099f6 <USB_ActivateEndpoint+0x2ea>
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	085b      	lsrs	r3, r3, #1
 80099d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	f003 0301 	and.w	r3, r3, #1
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <USB_ActivateEndpoint+0x2de>
 80099e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099e6:	3301      	adds	r3, #1
 80099e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80099ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	029b      	lsls	r3, r3, #10
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8009a04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d01b      	beq.n	8009a46 <USB_ActivateEndpoint+0x33a>
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a24:	843b      	strh	r3, [r7, #32]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	441a      	add	r2, r3
 8009a30:	8c3b      	ldrh	r3, [r7, #32]
 8009a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	881b      	ldrh	r3, [r3, #0]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a5c:	83fb      	strh	r3, [r7, #30]
 8009a5e:	8bfb      	ldrh	r3, [r7, #30]
 8009a60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a64:	83fb      	strh	r3, [r7, #30]
 8009a66:	8bfb      	ldrh	r3, [r7, #30]
 8009a68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a6c:	83fb      	strh	r3, [r7, #30]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	441a      	add	r2, r3
 8009a78:	8bfb      	ldrh	r3, [r7, #30]
 8009a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	8013      	strh	r3, [r2, #0]
 8009a8e:	e1c9      	b.n	8009e24 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	78db      	ldrb	r3, [r3, #3]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d11e      	bne.n	8009ad6 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	441a      	add	r2, r3
 8009abc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ac8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	8013      	strh	r3, [r2, #0]
 8009ad4:	e01d      	b.n	8009b12 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	441a      	add	r2, r3
 8009afa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	461a      	mov	r2, r3
 8009b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b22:	4413      	add	r3, r2
 8009b24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	00da      	lsls	r2, r3, #3
 8009b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b34:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	891b      	ldrh	r3, [r3, #8]
 8009b3a:	085b      	lsrs	r3, r3, #1
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	005b      	lsls	r3, r3, #1
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b44:	801a      	strh	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	657b      	str	r3, [r7, #84]	; 0x54
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	461a      	mov	r2, r3
 8009b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b56:	4413      	add	r3, r2
 8009b58:	657b      	str	r3, [r7, #84]	; 0x54
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	00da      	lsls	r2, r3, #3
 8009b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b62:	4413      	add	r3, r2
 8009b64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b68:	653b      	str	r3, [r7, #80]	; 0x50
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	895b      	ldrh	r3, [r3, #10]
 8009b6e:	085b      	lsrs	r3, r3, #1
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b78:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	785b      	ldrb	r3, [r3, #1]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f040 8093 	bne.w	8009caa <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d01b      	beq.n	8009bd8 <USB_ActivateEndpoint+0x4cc>
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	441a      	add	r2, r3
 8009bc2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009be6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01b      	beq.n	8009c28 <USB_ActivateEndpoint+0x51c>
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	881b      	ldrh	r3, [r3, #0]
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c06:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	441a      	add	r2, r3
 8009c12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	881b      	ldrh	r3, [r3, #0]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c3e:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c46:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c4e:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	441a      	add	r2, r3
 8009c5a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c86:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	441a      	add	r2, r3
 8009c92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	8013      	strh	r3, [r2, #0]
 8009ca8:	e0bc      	b.n	8009e24 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	881b      	ldrh	r3, [r3, #0]
 8009cb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009cba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d01d      	beq.n	8009d02 <USB_ActivateEndpoint+0x5f6>
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cdc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	441a      	add	r2, r3
 8009cea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009d12:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d01d      	beq.n	8009d5a <USB_ActivateEndpoint+0x64e>
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d34:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	441a      	add	r2, r3
 8009d42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	78db      	ldrb	r3, [r3, #3]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d024      	beq.n	8009dac <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d78:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009d7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d80:	f083 0320 	eor.w	r3, r3, #32
 8009d84:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	441a      	add	r2, r3
 8009d92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	8013      	strh	r3, [r2, #0]
 8009daa:	e01d      	b.n	8009de8 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4413      	add	r3, r2
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dc2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	441a      	add	r2, r3
 8009dd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4413      	add	r3, r2
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	441a      	add	r2, r3
 8009e0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009e24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3774      	adds	r7, #116	; 0x74
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b08d      	sub	sp, #52	; 0x34
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	7b1b      	ldrb	r3, [r3, #12]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f040 808e 	bne.w	8009f64 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	785b      	ldrb	r3, [r3, #1]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d044      	beq.n	8009eda <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	881b      	ldrh	r3, [r3, #0]
 8009e5c:	81bb      	strh	r3, [r7, #12]
 8009e5e:	89bb      	ldrh	r3, [r7, #12]
 8009e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d01b      	beq.n	8009ea0 <USB_DeactivateEndpoint+0x6c>
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	881b      	ldrh	r3, [r3, #0]
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e7e:	817b      	strh	r3, [r7, #10]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	441a      	add	r2, r3
 8009e8a:	897b      	ldrh	r3, [r7, #10]
 8009e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	881b      	ldrh	r3, [r3, #0]
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eb6:	813b      	strh	r3, [r7, #8]
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	441a      	add	r2, r3
 8009ec2:	893b      	ldrh	r3, [r7, #8]
 8009ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	8013      	strh	r3, [r2, #0]
 8009ed8:	e192      	b.n	800a200 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	827b      	strh	r3, [r7, #18]
 8009ee8:	8a7b      	ldrh	r3, [r7, #18]
 8009eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d01b      	beq.n	8009f2a <USB_DeactivateEndpoint+0xf6>
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	881b      	ldrh	r3, [r3, #0]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f08:	823b      	strh	r3, [r7, #16]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	441a      	add	r2, r3
 8009f14:	8a3b      	ldrh	r3, [r7, #16]
 8009f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	881b      	ldrh	r3, [r3, #0]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f40:	81fb      	strh	r3, [r7, #14]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	441a      	add	r2, r3
 8009f4c:	89fb      	ldrh	r3, [r7, #14]
 8009f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	8013      	strh	r3, [r2, #0]
 8009f62:	e14d      	b.n	800a200 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	785b      	ldrb	r3, [r3, #1]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f040 80a5 	bne.w	800a0b8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	843b      	strh	r3, [r7, #32]
 8009f7c:	8c3b      	ldrh	r3, [r7, #32]
 8009f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d01b      	beq.n	8009fbe <USB_DeactivateEndpoint+0x18a>
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f9c:	83fb      	strh	r3, [r7, #30]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	441a      	add	r2, r3
 8009fa8:	8bfb      	ldrh	r3, [r7, #30]
 8009faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	881b      	ldrh	r3, [r3, #0]
 8009fca:	83bb      	strh	r3, [r7, #28]
 8009fcc:	8bbb      	ldrh	r3, [r7, #28]
 8009fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d01b      	beq.n	800a00e <USB_DeactivateEndpoint+0x1da>
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	881b      	ldrh	r3, [r3, #0]
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fec:	837b      	strh	r3, [r7, #26]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	441a      	add	r2, r3
 8009ff8:	8b7b      	ldrh	r3, [r7, #26]
 8009ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a006:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a024:	833b      	strh	r3, [r7, #24]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	441a      	add	r2, r3
 800a030:	8b3b      	ldrh	r3, [r7, #24]
 800a032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a03a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a03e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a042:	b29b      	uxth	r3, r3
 800a044:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4413      	add	r3, r2
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	b29b      	uxth	r3, r3
 800a054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a05c:	82fb      	strh	r3, [r7, #22]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	441a      	add	r2, r3
 800a068:	8afb      	ldrh	r3, [r7, #22]
 800a06a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a06e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a094:	82bb      	strh	r3, [r7, #20]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	441a      	add	r2, r3
 800a0a0:	8abb      	ldrh	r3, [r7, #20]
 800a0a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	8013      	strh	r3, [r2, #0]
 800a0b6:	e0a3      	b.n	800a200 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	881b      	ldrh	r3, [r3, #0]
 800a0c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a0c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d01b      	beq.n	800a108 <USB_DeactivateEndpoint+0x2d4>
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	881b      	ldrh	r3, [r3, #0]
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	441a      	add	r2, r3
 800a0f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a0f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a104:	b29b      	uxth	r3, r3
 800a106:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a116:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d01b      	beq.n	800a158 <USB_DeactivateEndpoint+0x324>
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a136:	853b      	strh	r3, [r7, #40]	; 0x28
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	441a      	add	r2, r3
 800a142:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a14c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a150:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a154:	b29b      	uxth	r3, r3
 800a156:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4413      	add	r3, r2
 800a162:	881b      	ldrh	r3, [r3, #0]
 800a164:	b29b      	uxth	r3, r3
 800a166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a16a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a16e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	441a      	add	r2, r3
 800a17a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a17c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a184:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	441a      	add	r2, r3
 800a1b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1de:	847b      	strh	r3, [r7, #34]	; 0x22
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	441a      	add	r2, r3
 800a1ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3734      	adds	r7, #52	; 0x34
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b0c2      	sub	sp, #264	; 0x108
 800a212:	af00      	add	r7, sp, #0
 800a214:	1d3b      	adds	r3, r7, #4
 800a216:	6018      	str	r0, [r3, #0]
 800a218:	463b      	mov	r3, r7
 800a21a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a21c:	463b      	mov	r3, r7
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	785b      	ldrb	r3, [r3, #1]
 800a222:	2b01      	cmp	r3, #1
 800a224:	f040 8509 	bne.w	800ac3a <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a228:	463b      	mov	r3, r7
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	699a      	ldr	r2, [r3, #24]
 800a22e:	463b      	mov	r3, r7
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	429a      	cmp	r2, r3
 800a236:	d905      	bls.n	800a244 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800a238:	463b      	mov	r3, r7
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a242:	e004      	b.n	800a24e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800a244:	463b      	mov	r3, r7
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a24e:	463b      	mov	r3, r7
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	7b1b      	ldrb	r3, [r3, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d128      	bne.n	800a2aa <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a258:	463b      	mov	r3, r7
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6959      	ldr	r1, [r3, #20]
 800a25e:	463b      	mov	r3, r7
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	88da      	ldrh	r2, [r3, #6]
 800a264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a268:	b29b      	uxth	r3, r3
 800a26a:	1d38      	adds	r0, r7, #4
 800a26c:	6800      	ldr	r0, [r0, #0]
 800a26e:	f001 f9da 	bl	800b626 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a272:	1d3b      	adds	r3, r7, #4
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	613b      	str	r3, [r7, #16]
 800a278:	1d3b      	adds	r3, r7, #4
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a280:	b29b      	uxth	r3, r3
 800a282:	461a      	mov	r2, r3
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	4413      	add	r3, r2
 800a288:	613b      	str	r3, [r7, #16]
 800a28a:	463b      	mov	r3, r7
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	00da      	lsls	r2, r3, #3
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	4413      	add	r3, r2
 800a296:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	801a      	strh	r2, [r3, #0]
 800a2a6:	f000 bc9f 	b.w	800abe8 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a2aa:	463b      	mov	r3, r7
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	78db      	ldrb	r3, [r3, #3]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	f040 8347 	bne.w	800a944 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a2b6:	463b      	mov	r3, r7
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6a1a      	ldr	r2, [r3, #32]
 800a2bc:	463b      	mov	r3, r7
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	f240 82eb 	bls.w	800a89e <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a2c8:	1d3b      	adds	r3, r7, #4
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	463b      	mov	r3, r7
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a2e6:	1d3b      	adds	r3, r7, #4
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	463b      	mov	r3, r7
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	441a      	add	r2, r3
 800a2f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a300:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a308:	b29b      	uxth	r3, r3
 800a30a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a30c:	463b      	mov	r3, r7
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6a1a      	ldr	r2, [r3, #32]
 800a312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a316:	1ad2      	subs	r2, r2, r3
 800a318:	463b      	mov	r3, r7
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a31e:	1d3b      	adds	r3, r7, #4
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	463b      	mov	r3, r7
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	881b      	ldrh	r3, [r3, #0]
 800a32e:	b29b      	uxth	r3, r3
 800a330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a334:	2b00      	cmp	r3, #0
 800a336:	f000 8159 	beq.w	800a5ec <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a33a:	1d3b      	adds	r3, r7, #4
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	633b      	str	r3, [r7, #48]	; 0x30
 800a340:	463b      	mov	r3, r7
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	785b      	ldrb	r3, [r3, #1]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d164      	bne.n	800a414 <USB_EPStartXfer+0x206>
 800a34a:	1d3b      	adds	r3, r7, #4
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a350:	1d3b      	adds	r3, r7, #4
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a358:	b29b      	uxth	r3, r3
 800a35a:	461a      	mov	r2, r3
 800a35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35e:	4413      	add	r3, r2
 800a360:	62bb      	str	r3, [r7, #40]	; 0x28
 800a362:	463b      	mov	r3, r7
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	00da      	lsls	r2, r3, #3
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	4413      	add	r3, r2
 800a36e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a372:	627b      	str	r3, [r7, #36]	; 0x24
 800a374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a378:	2b3e      	cmp	r3, #62	; 0x3e
 800a37a:	d91c      	bls.n	800a3b6 <USB_EPStartXfer+0x1a8>
 800a37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a380:	095b      	lsrs	r3, r3, #5
 800a382:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a38a:	f003 031f 	and.w	r3, r3, #31
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d104      	bne.n	800a39c <USB_EPStartXfer+0x18e>
 800a392:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a396:	3b01      	subs	r3, #1
 800a398:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a39c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	029b      	lsls	r3, r3, #10
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	801a      	strh	r2, [r3, #0]
 800a3b4:	e04a      	b.n	800a44c <USB_EPStartXfer+0x23e>
 800a3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d112      	bne.n	800a3e4 <USB_EPStartXfer+0x1d6>
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	801a      	strh	r2, [r3, #0]
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	801a      	strh	r2, [r3, #0]
 800a3e2:	e033      	b.n	800a44c <USB_EPStartXfer+0x23e>
 800a3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e8:	085b      	lsrs	r3, r3, #1
 800a3ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d004      	beq.n	800a404 <USB_EPStartXfer+0x1f6>
 800a3fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3fe:	3301      	adds	r3, #1
 800a400:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a404:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a408:	b29b      	uxth	r3, r3
 800a40a:	029b      	lsls	r3, r3, #10
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	801a      	strh	r2, [r3, #0]
 800a412:	e01b      	b.n	800a44c <USB_EPStartXfer+0x23e>
 800a414:	463b      	mov	r3, r7
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	785b      	ldrb	r3, [r3, #1]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d116      	bne.n	800a44c <USB_EPStartXfer+0x23e>
 800a41e:	1d3b      	adds	r3, r7, #4
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a426:	b29b      	uxth	r3, r3
 800a428:	461a      	mov	r2, r3
 800a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42c:	4413      	add	r3, r2
 800a42e:	633b      	str	r3, [r7, #48]	; 0x30
 800a430:	463b      	mov	r3, r7
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	00da      	lsls	r2, r3, #3
 800a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43a:	4413      	add	r3, r2
 800a43c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a440:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a446:	b29a      	uxth	r2, r3
 800a448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a44c:	463b      	mov	r3, r7
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	895b      	ldrh	r3, [r3, #10]
 800a452:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a456:	463b      	mov	r3, r7
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	6959      	ldr	r1, [r3, #20]
 800a45c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a460:	b29b      	uxth	r3, r3
 800a462:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a466:	1d38      	adds	r0, r7, #4
 800a468:	6800      	ldr	r0, [r0, #0]
 800a46a:	f001 f8dc 	bl	800b626 <USB_WritePMA>
            ep->xfer_buff += len;
 800a46e:	463b      	mov	r3, r7
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	695a      	ldr	r2, [r3, #20]
 800a474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a478:	441a      	add	r2, r3
 800a47a:	463b      	mov	r3, r7
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a480:	463b      	mov	r3, r7
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6a1a      	ldr	r2, [r3, #32]
 800a486:	463b      	mov	r3, r7
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d909      	bls.n	800a4a4 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800a490:	463b      	mov	r3, r7
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6a1a      	ldr	r2, [r3, #32]
 800a496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a49a:	1ad2      	subs	r2, r2, r3
 800a49c:	463b      	mov	r3, r7
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	621a      	str	r2, [r3, #32]
 800a4a2:	e008      	b.n	800a4b6 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800a4a4:	463b      	mov	r3, r7
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a4ae:	463b      	mov	r3, r7
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a4b6:	463b      	mov	r3, r7
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	785b      	ldrb	r3, [r3, #1]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d164      	bne.n	800a58a <USB_EPStartXfer+0x37c>
 800a4c0:	1d3b      	adds	r3, r7, #4
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	61bb      	str	r3, [r7, #24]
 800a4c6:	1d3b      	adds	r3, r7, #4
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	61bb      	str	r3, [r7, #24]
 800a4d8:	463b      	mov	r3, r7
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	00da      	lsls	r2, r3, #3
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4e8:	617b      	str	r3, [r7, #20]
 800a4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ee:	2b3e      	cmp	r3, #62	; 0x3e
 800a4f0:	d91c      	bls.n	800a52c <USB_EPStartXfer+0x31e>
 800a4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f6:	095b      	lsrs	r3, r3, #5
 800a4f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a500:	f003 031f 	and.w	r3, r3, #31
 800a504:	2b00      	cmp	r3, #0
 800a506:	d104      	bne.n	800a512 <USB_EPStartXfer+0x304>
 800a508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a50c:	3b01      	subs	r3, #1
 800a50e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a516:	b29b      	uxth	r3, r3
 800a518:	029b      	lsls	r3, r3, #10
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a524:	b29a      	uxth	r2, r3
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	801a      	strh	r2, [r3, #0]
 800a52a:	e04d      	b.n	800a5c8 <USB_EPStartXfer+0x3ba>
 800a52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a530:	2b00      	cmp	r3, #0
 800a532:	d112      	bne.n	800a55a <USB_EPStartXfer+0x34c>
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	881b      	ldrh	r3, [r3, #0]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a53e:	b29a      	uxth	r2, r3
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	801a      	strh	r2, [r3, #0]
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	881b      	ldrh	r3, [r3, #0]
 800a548:	b29b      	uxth	r3, r3
 800a54a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a54e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a552:	b29a      	uxth	r2, r3
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	801a      	strh	r2, [r3, #0]
 800a558:	e036      	b.n	800a5c8 <USB_EPStartXfer+0x3ba>
 800a55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a55e:	085b      	lsrs	r3, r3, #1
 800a560:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d004      	beq.n	800a57a <USB_EPStartXfer+0x36c>
 800a570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a574:	3301      	adds	r3, #1
 800a576:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a57a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a57e:	b29b      	uxth	r3, r3
 800a580:	029b      	lsls	r3, r3, #10
 800a582:	b29a      	uxth	r2, r3
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	801a      	strh	r2, [r3, #0]
 800a588:	e01e      	b.n	800a5c8 <USB_EPStartXfer+0x3ba>
 800a58a:	463b      	mov	r3, r7
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	785b      	ldrb	r3, [r3, #1]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d119      	bne.n	800a5c8 <USB_EPStartXfer+0x3ba>
 800a594:	1d3b      	adds	r3, r7, #4
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	623b      	str	r3, [r7, #32]
 800a59a:	1d3b      	adds	r3, r7, #4
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	6a3b      	ldr	r3, [r7, #32]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	623b      	str	r3, [r7, #32]
 800a5ac:	463b      	mov	r3, r7
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	00da      	lsls	r2, r3, #3
 800a5b4:	6a3b      	ldr	r3, [r7, #32]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a5bc:	61fb      	str	r3, [r7, #28]
 800a5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a5c8:	463b      	mov	r3, r7
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	891b      	ldrh	r3, [r3, #8]
 800a5ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5d2:	463b      	mov	r3, r7
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6959      	ldr	r1, [r3, #20]
 800a5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a5e2:	1d38      	adds	r0, r7, #4
 800a5e4:	6800      	ldr	r0, [r0, #0]
 800a5e6:	f001 f81e 	bl	800b626 <USB_WritePMA>
 800a5ea:	e2fd      	b.n	800abe8 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a5ec:	463b      	mov	r3, r7
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	785b      	ldrb	r3, [r3, #1]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d164      	bne.n	800a6c0 <USB_EPStartXfer+0x4b2>
 800a5f6:	1d3b      	adds	r3, r7, #4
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5fc:	1d3b      	adds	r3, r7, #4
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a604:	b29b      	uxth	r3, r3
 800a606:	461a      	mov	r2, r3
 800a608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a60a:	4413      	add	r3, r2
 800a60c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a60e:	463b      	mov	r3, r7
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	00da      	lsls	r2, r3, #3
 800a616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a618:	4413      	add	r3, r2
 800a61a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a61e:	647b      	str	r3, [r7, #68]	; 0x44
 800a620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a624:	2b3e      	cmp	r3, #62	; 0x3e
 800a626:	d91c      	bls.n	800a662 <USB_EPStartXfer+0x454>
 800a628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62c:	095b      	lsrs	r3, r3, #5
 800a62e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a636:	f003 031f 	and.w	r3, r3, #31
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d104      	bne.n	800a648 <USB_EPStartXfer+0x43a>
 800a63e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a642:	3b01      	subs	r3, #1
 800a644:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a648:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	029b      	lsls	r3, r3, #10
 800a650:	b29b      	uxth	r3, r3
 800a652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a65e:	801a      	strh	r2, [r3, #0]
 800a660:	e04d      	b.n	800a6fe <USB_EPStartXfer+0x4f0>
 800a662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a666:	2b00      	cmp	r3, #0
 800a668:	d112      	bne.n	800a690 <USB_EPStartXfer+0x482>
 800a66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a66c:	881b      	ldrh	r3, [r3, #0]
 800a66e:	b29b      	uxth	r3, r3
 800a670:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a674:	b29a      	uxth	r2, r3
 800a676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a678:	801a      	strh	r2, [r3, #0]
 800a67a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	b29b      	uxth	r3, r3
 800a680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a688:	b29a      	uxth	r2, r3
 800a68a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a68c:	801a      	strh	r2, [r3, #0]
 800a68e:	e036      	b.n	800a6fe <USB_EPStartXfer+0x4f0>
 800a690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a694:	085b      	lsrs	r3, r3, #1
 800a696:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a69e:	f003 0301 	and.w	r3, r3, #1
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d004      	beq.n	800a6b0 <USB_EPStartXfer+0x4a2>
 800a6a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	029b      	lsls	r3, r3, #10
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6bc:	801a      	strh	r2, [r3, #0]
 800a6be:	e01e      	b.n	800a6fe <USB_EPStartXfer+0x4f0>
 800a6c0:	463b      	mov	r3, r7
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	785b      	ldrb	r3, [r3, #1]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d119      	bne.n	800a6fe <USB_EPStartXfer+0x4f0>
 800a6ca:	1d3b      	adds	r3, r7, #4
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	653b      	str	r3, [r7, #80]	; 0x50
 800a6d0:	1d3b      	adds	r3, r7, #4
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	461a      	mov	r2, r3
 800a6dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6de:	4413      	add	r3, r2
 800a6e0:	653b      	str	r3, [r7, #80]	; 0x50
 800a6e2:	463b      	mov	r3, r7
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	00da      	lsls	r2, r3, #3
 800a6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a6fe:	463b      	mov	r3, r7
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	891b      	ldrh	r3, [r3, #8]
 800a704:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a708:	463b      	mov	r3, r7
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6959      	ldr	r1, [r3, #20]
 800a70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a712:	b29b      	uxth	r3, r3
 800a714:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a718:	1d38      	adds	r0, r7, #4
 800a71a:	6800      	ldr	r0, [r0, #0]
 800a71c:	f000 ff83 	bl	800b626 <USB_WritePMA>
            ep->xfer_buff += len;
 800a720:	463b      	mov	r3, r7
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	695a      	ldr	r2, [r3, #20]
 800a726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72a:	441a      	add	r2, r3
 800a72c:	463b      	mov	r3, r7
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a732:	463b      	mov	r3, r7
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	6a1a      	ldr	r2, [r3, #32]
 800a738:	463b      	mov	r3, r7
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d909      	bls.n	800a756 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800a742:	463b      	mov	r3, r7
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6a1a      	ldr	r2, [r3, #32]
 800a748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a74c:	1ad2      	subs	r2, r2, r3
 800a74e:	463b      	mov	r3, r7
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	621a      	str	r2, [r3, #32]
 800a754:	e008      	b.n	800a768 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800a756:	463b      	mov	r3, r7
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6a1b      	ldr	r3, [r3, #32]
 800a75c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a760:	463b      	mov	r3, r7
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2200      	movs	r2, #0
 800a766:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a768:	1d3b      	adds	r3, r7, #4
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	643b      	str	r3, [r7, #64]	; 0x40
 800a76e:	463b      	mov	r3, r7
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	785b      	ldrb	r3, [r3, #1]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d164      	bne.n	800a842 <USB_EPStartXfer+0x634>
 800a778:	1d3b      	adds	r3, r7, #4
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a77e:	1d3b      	adds	r3, r7, #4
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a786:	b29b      	uxth	r3, r3
 800a788:	461a      	mov	r2, r3
 800a78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78c:	4413      	add	r3, r2
 800a78e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a790:	463b      	mov	r3, r7
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	00da      	lsls	r2, r3, #3
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	4413      	add	r3, r2
 800a79c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7a0:	637b      	str	r3, [r7, #52]	; 0x34
 800a7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a6:	2b3e      	cmp	r3, #62	; 0x3e
 800a7a8:	d91c      	bls.n	800a7e4 <USB_EPStartXfer+0x5d6>
 800a7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ae:	095b      	lsrs	r3, r3, #5
 800a7b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b8:	f003 031f 	and.w	r3, r3, #31
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d104      	bne.n	800a7ca <USB_EPStartXfer+0x5bc>
 800a7c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	029b      	lsls	r3, r3, #10
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e0:	801a      	strh	r2, [r3, #0]
 800a7e2:	e04a      	b.n	800a87a <USB_EPStartXfer+0x66c>
 800a7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d112      	bne.n	800a812 <USB_EPStartXfer+0x604>
 800a7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7fa:	801a      	strh	r2, [r3, #0]
 800a7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	b29b      	uxth	r3, r3
 800a802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a80e:	801a      	strh	r2, [r3, #0]
 800a810:	e033      	b.n	800a87a <USB_EPStartXfer+0x66c>
 800a812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a816:	085b      	lsrs	r3, r3, #1
 800a818:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a820:	f003 0301 	and.w	r3, r3, #1
 800a824:	2b00      	cmp	r3, #0
 800a826:	d004      	beq.n	800a832 <USB_EPStartXfer+0x624>
 800a828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a82c:	3301      	adds	r3, #1
 800a82e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a836:	b29b      	uxth	r3, r3
 800a838:	029b      	lsls	r3, r3, #10
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a83e:	801a      	strh	r2, [r3, #0]
 800a840:	e01b      	b.n	800a87a <USB_EPStartXfer+0x66c>
 800a842:	463b      	mov	r3, r7
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	785b      	ldrb	r3, [r3, #1]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d116      	bne.n	800a87a <USB_EPStartXfer+0x66c>
 800a84c:	1d3b      	adds	r3, r7, #4
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a854:	b29b      	uxth	r3, r3
 800a856:	461a      	mov	r2, r3
 800a858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a85a:	4413      	add	r3, r2
 800a85c:	643b      	str	r3, [r7, #64]	; 0x40
 800a85e:	463b      	mov	r3, r7
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	00da      	lsls	r2, r3, #3
 800a866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a868:	4413      	add	r3, r2
 800a86a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a86e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a874:	b29a      	uxth	r2, r3
 800a876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a878:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a87a:	463b      	mov	r3, r7
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	895b      	ldrh	r3, [r3, #10]
 800a880:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a884:	463b      	mov	r3, r7
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	6959      	ldr	r1, [r3, #20]
 800a88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88e:	b29b      	uxth	r3, r3
 800a890:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a894:	1d38      	adds	r0, r7, #4
 800a896:	6800      	ldr	r0, [r0, #0]
 800a898:	f000 fec5 	bl	800b626 <USB_WritePMA>
 800a89c:	e1a4      	b.n	800abe8 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a89e:	463b      	mov	r3, r7
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	6a1b      	ldr	r3, [r3, #32]
 800a8a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a8a8:	1d3b      	adds	r3, r7, #4
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	463b      	mov	r3, r7
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	881b      	ldrh	r3, [r3, #0]
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a8be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8c2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a8c6:	1d3b      	adds	r3, r7, #4
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	463b      	mov	r3, r7
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	441a      	add	r2, r3
 800a8d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a8d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a8ec:	1d3b      	adds	r3, r7, #4
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8f2:	1d3b      	adds	r3, r7, #4
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a900:	4413      	add	r3, r2
 800a902:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a904:	463b      	mov	r3, r7
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	00da      	lsls	r2, r3, #3
 800a90c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a90e:	4413      	add	r3, r2
 800a910:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a914:	65bb      	str	r3, [r7, #88]	; 0x58
 800a916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a91e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a920:	463b      	mov	r3, r7
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	891b      	ldrh	r3, [r3, #8]
 800a926:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a92a:	463b      	mov	r3, r7
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	6959      	ldr	r1, [r3, #20]
 800a930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a934:	b29b      	uxth	r3, r3
 800a936:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a93a:	1d38      	adds	r0, r7, #4
 800a93c:	6800      	ldr	r0, [r0, #0]
 800a93e:	f000 fe72 	bl	800b626 <USB_WritePMA>
 800a942:	e151      	b.n	800abe8 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a944:	463b      	mov	r3, r7
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	6a1a      	ldr	r2, [r3, #32]
 800a94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a94e:	1ad2      	subs	r2, r2, r3
 800a950:	463b      	mov	r3, r7
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a956:	1d3b      	adds	r3, r7, #4
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	463b      	mov	r3, r7
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	b29b      	uxth	r3, r3
 800a968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 809b 	beq.w	800aaa8 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a972:	1d3b      	adds	r3, r7, #4
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	673b      	str	r3, [r7, #112]	; 0x70
 800a978:	463b      	mov	r3, r7
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	785b      	ldrb	r3, [r3, #1]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d164      	bne.n	800aa4c <USB_EPStartXfer+0x83e>
 800a982:	1d3b      	adds	r3, r7, #4
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	66bb      	str	r3, [r7, #104]	; 0x68
 800a988:	1d3b      	adds	r3, r7, #4
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a990:	b29b      	uxth	r3, r3
 800a992:	461a      	mov	r2, r3
 800a994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a996:	4413      	add	r3, r2
 800a998:	66bb      	str	r3, [r7, #104]	; 0x68
 800a99a:	463b      	mov	r3, r7
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	00da      	lsls	r2, r3, #3
 800a9a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9aa:	667b      	str	r3, [r7, #100]	; 0x64
 800a9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b0:	2b3e      	cmp	r3, #62	; 0x3e
 800a9b2:	d91c      	bls.n	800a9ee <USB_EPStartXfer+0x7e0>
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b8:	095b      	lsrs	r3, r3, #5
 800a9ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c2:	f003 031f 	and.w	r3, r3, #31
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d104      	bne.n	800a9d4 <USB_EPStartXfer+0x7c6>
 800a9ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a9d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	029b      	lsls	r3, r3, #10
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9ea:	801a      	strh	r2, [r3, #0]
 800a9ec:	e04a      	b.n	800aa84 <USB_EPStartXfer+0x876>
 800a9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d112      	bne.n	800aa1c <USB_EPStartXfer+0x80e>
 800a9f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9f8:	881b      	ldrh	r3, [r3, #0]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa04:	801a      	strh	r2, [r3, #0]
 800aa06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa18:	801a      	strh	r2, [r3, #0]
 800aa1a:	e033      	b.n	800aa84 <USB_EPStartXfer+0x876>
 800aa1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa20:	085b      	lsrs	r3, r3, #1
 800aa22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aa26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2a:	f003 0301 	and.w	r3, r3, #1
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d004      	beq.n	800aa3c <USB_EPStartXfer+0x82e>
 800aa32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aa36:	3301      	adds	r3, #1
 800aa38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aa3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	029b      	lsls	r3, r3, #10
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa48:	801a      	strh	r2, [r3, #0]
 800aa4a:	e01b      	b.n	800aa84 <USB_EPStartXfer+0x876>
 800aa4c:	463b      	mov	r3, r7
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	785b      	ldrb	r3, [r3, #1]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d116      	bne.n	800aa84 <USB_EPStartXfer+0x876>
 800aa56:	1d3b      	adds	r3, r7, #4
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	461a      	mov	r2, r3
 800aa62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa64:	4413      	add	r3, r2
 800aa66:	673b      	str	r3, [r7, #112]	; 0x70
 800aa68:	463b      	mov	r3, r7
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	00da      	lsls	r2, r3, #3
 800aa70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa72:	4413      	add	r3, r2
 800aa74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa78:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa82:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800aa84:	463b      	mov	r3, r7
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	895b      	ldrh	r3, [r3, #10]
 800aa8a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa8e:	463b      	mov	r3, r7
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	6959      	ldr	r1, [r3, #20]
 800aa94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa9e:	1d38      	adds	r0, r7, #4
 800aaa0:	6800      	ldr	r0, [r0, #0]
 800aaa2:	f000 fdc0 	bl	800b626 <USB_WritePMA>
 800aaa6:	e09f      	b.n	800abe8 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aaa8:	463b      	mov	r3, r7
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	785b      	ldrb	r3, [r3, #1]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d164      	bne.n	800ab7c <USB_EPStartXfer+0x96e>
 800aab2:	1d3b      	adds	r3, r7, #4
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aab8:	1d3b      	adds	r3, r7, #4
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	461a      	mov	r2, r3
 800aac4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aac6:	4413      	add	r3, r2
 800aac8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aaca:	463b      	mov	r3, r7
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	00da      	lsls	r2, r3, #3
 800aad2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aad4:	4413      	add	r3, r2
 800aad6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aada:	67bb      	str	r3, [r7, #120]	; 0x78
 800aadc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aae0:	2b3e      	cmp	r3, #62	; 0x3e
 800aae2:	d91c      	bls.n	800ab1e <USB_EPStartXfer+0x910>
 800aae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aae8:	095b      	lsrs	r3, r3, #5
 800aaea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aaee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf2:	f003 031f 	and.w	r3, r3, #31
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d104      	bne.n	800ab04 <USB_EPStartXfer+0x8f6>
 800aafa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aafe:	3b01      	subs	r3, #1
 800ab00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	029b      	lsls	r3, r3, #10
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab1a:	801a      	strh	r2, [r3, #0]
 800ab1c:	e053      	b.n	800abc6 <USB_EPStartXfer+0x9b8>
 800ab1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d112      	bne.n	800ab4c <USB_EPStartXfer+0x93e>
 800ab26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab34:	801a      	strh	r2, [r3, #0]
 800ab36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab38:	881b      	ldrh	r3, [r3, #0]
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab48:	801a      	strh	r2, [r3, #0]
 800ab4a:	e03c      	b.n	800abc6 <USB_EPStartXfer+0x9b8>
 800ab4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab50:	085b      	lsrs	r3, r3, #1
 800ab52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d004      	beq.n	800ab6c <USB_EPStartXfer+0x95e>
 800ab62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab66:	3301      	adds	r3, #1
 800ab68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	029b      	lsls	r3, r3, #10
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab78:	801a      	strh	r2, [r3, #0]
 800ab7a:	e024      	b.n	800abc6 <USB_EPStartXfer+0x9b8>
 800ab7c:	463b      	mov	r3, r7
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	785b      	ldrb	r3, [r3, #1]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d11f      	bne.n	800abc6 <USB_EPStartXfer+0x9b8>
 800ab86:	1d3b      	adds	r3, r7, #4
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab8e:	1d3b      	adds	r3, r7, #4
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	461a      	mov	r2, r3
 800ab9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab9e:	4413      	add	r3, r2
 800aba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aba4:	463b      	mov	r3, r7
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	00da      	lsls	r2, r3, #3
 800abac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abb0:	4413      	add	r3, r2
 800abb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800abb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800abba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800abc4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800abc6:	463b      	mov	r3, r7
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	891b      	ldrh	r3, [r3, #8]
 800abcc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abd0:	463b      	mov	r3, r7
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	6959      	ldr	r1, [r3, #20]
 800abd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abda:	b29b      	uxth	r3, r3
 800abdc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800abe0:	1d38      	adds	r0, r7, #4
 800abe2:	6800      	ldr	r0, [r0, #0]
 800abe4:	f000 fd1f 	bl	800b626 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800abe8:	1d3b      	adds	r3, r7, #4
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	463b      	mov	r3, r7
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac02:	817b      	strh	r3, [r7, #10]
 800ac04:	897b      	ldrh	r3, [r7, #10]
 800ac06:	f083 0310 	eor.w	r3, r3, #16
 800ac0a:	817b      	strh	r3, [r7, #10]
 800ac0c:	897b      	ldrh	r3, [r7, #10]
 800ac0e:	f083 0320 	eor.w	r3, r3, #32
 800ac12:	817b      	strh	r3, [r7, #10]
 800ac14:	1d3b      	adds	r3, r7, #4
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	463b      	mov	r3, r7
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	441a      	add	r2, r3
 800ac22:	897b      	ldrh	r3, [r7, #10]
 800ac24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	8013      	strh	r3, [r2, #0]
 800ac38:	e3b5      	b.n	800b3a6 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ac3a:	463b      	mov	r3, r7
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	7b1b      	ldrb	r3, [r3, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f040 8090 	bne.w	800ad66 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ac46:	463b      	mov	r3, r7
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	699a      	ldr	r2, [r3, #24]
 800ac4c:	463b      	mov	r3, r7
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d90e      	bls.n	800ac74 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800ac56:	463b      	mov	r3, r7
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800ac60:	463b      	mov	r3, r7
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	699a      	ldr	r2, [r3, #24]
 800ac66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6a:	1ad2      	subs	r2, r2, r3
 800ac6c:	463b      	mov	r3, r7
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	619a      	str	r2, [r3, #24]
 800ac72:	e008      	b.n	800ac86 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800ac74:	463b      	mov	r3, r7
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800ac7e:	463b      	mov	r3, r7
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2200      	movs	r2, #0
 800ac84:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ac86:	1d3b      	adds	r3, r7, #4
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac8e:	1d3b      	adds	r3, r7, #4
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	461a      	mov	r2, r3
 800ac9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac9e:	4413      	add	r3, r2
 800aca0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aca4:	463b      	mov	r3, r7
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	00da      	lsls	r2, r3, #3
 800acac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800acb0:	4413      	add	r3, r2
 800acb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800acb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800acba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acbe:	2b3e      	cmp	r3, #62	; 0x3e
 800acc0:	d91d      	bls.n	800acfe <USB_EPStartXfer+0xaf0>
 800acc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc6:	095b      	lsrs	r3, r3, #5
 800acc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800accc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd0:	f003 031f 	and.w	r3, r3, #31
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d104      	bne.n	800ace2 <USB_EPStartXfer+0xad4>
 800acd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800acdc:	3b01      	subs	r3, #1
 800acde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ace2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	029b      	lsls	r3, r3, #10
 800acea:	b29b      	uxth	r3, r3
 800acec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acfa:	801a      	strh	r2, [r3, #0]
 800acfc:	e325      	b.n	800b34a <USB_EPStartXfer+0x113c>
 800acfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d116      	bne.n	800ad34 <USB_EPStartXfer+0xb26>
 800ad06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad0a:	881b      	ldrh	r3, [r3, #0]
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad18:	801a      	strh	r2, [r3, #0]
 800ad1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad30:	801a      	strh	r2, [r3, #0]
 800ad32:	e30a      	b.n	800b34a <USB_EPStartXfer+0x113c>
 800ad34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad38:	085b      	lsrs	r3, r3, #1
 800ad3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d004      	beq.n	800ad54 <USB_EPStartXfer+0xb46>
 800ad4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad4e:	3301      	adds	r3, #1
 800ad50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	029b      	lsls	r3, r3, #10
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad62:	801a      	strh	r2, [r3, #0]
 800ad64:	e2f1      	b.n	800b34a <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ad66:	463b      	mov	r3, r7
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	78db      	ldrb	r3, [r3, #3]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	f040 818f 	bne.w	800b090 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ad72:	463b      	mov	r3, r7
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	785b      	ldrb	r3, [r3, #1]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d175      	bne.n	800ae68 <USB_EPStartXfer+0xc5a>
 800ad7c:	1d3b      	adds	r3, r7, #4
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad84:	1d3b      	adds	r3, r7, #4
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	461a      	mov	r2, r3
 800ad90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad94:	4413      	add	r3, r2
 800ad96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad9a:	463b      	mov	r3, r7
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	00da      	lsls	r2, r3, #3
 800ada2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ada6:	4413      	add	r3, r2
 800ada8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800adb0:	463b      	mov	r3, r7
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	2b3e      	cmp	r3, #62	; 0x3e
 800adb8:	d91f      	bls.n	800adfa <USB_EPStartXfer+0xbec>
 800adba:	463b      	mov	r3, r7
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	095b      	lsrs	r3, r3, #5
 800adc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800adc6:	463b      	mov	r3, r7
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	f003 031f 	and.w	r3, r3, #31
 800add0:	2b00      	cmp	r3, #0
 800add2:	d104      	bne.n	800adde <USB_EPStartXfer+0xbd0>
 800add4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800add8:	3b01      	subs	r3, #1
 800adda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800adde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	029b      	lsls	r3, r3, #10
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800adf6:	801a      	strh	r2, [r3, #0]
 800adf8:	e05c      	b.n	800aeb4 <USB_EPStartXfer+0xca6>
 800adfa:	463b      	mov	r3, r7
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d116      	bne.n	800ae32 <USB_EPStartXfer+0xc24>
 800ae04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae16:	801a      	strh	r2, [r3, #0]
 800ae18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae1c:	881b      	ldrh	r3, [r3, #0]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae2e:	801a      	strh	r2, [r3, #0]
 800ae30:	e040      	b.n	800aeb4 <USB_EPStartXfer+0xca6>
 800ae32:	463b      	mov	r3, r7
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	085b      	lsrs	r3, r3, #1
 800ae3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae3e:	463b      	mov	r3, r7
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d004      	beq.n	800ae56 <USB_EPStartXfer+0xc48>
 800ae4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae50:	3301      	adds	r3, #1
 800ae52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	029b      	lsls	r3, r3, #10
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae64:	801a      	strh	r2, [r3, #0]
 800ae66:	e025      	b.n	800aeb4 <USB_EPStartXfer+0xca6>
 800ae68:	463b      	mov	r3, r7
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	785b      	ldrb	r3, [r3, #1]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d120      	bne.n	800aeb4 <USB_EPStartXfer+0xca6>
 800ae72:	1d3b      	adds	r3, r7, #4
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae7a:	1d3b      	adds	r3, r7, #4
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	461a      	mov	r2, r3
 800ae86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae90:	463b      	mov	r3, r7
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	00da      	lsls	r2, r3, #3
 800ae98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ae9c:	4413      	add	r3, r2
 800ae9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aea6:	463b      	mov	r3, r7
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	b29a      	uxth	r2, r3
 800aeae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aeb2:	801a      	strh	r2, [r3, #0]
 800aeb4:	1d3b      	adds	r3, r7, #4
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aebc:	463b      	mov	r3, r7
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	785b      	ldrb	r3, [r3, #1]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d175      	bne.n	800afb2 <USB_EPStartXfer+0xda4>
 800aec6:	1d3b      	adds	r3, r7, #4
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aece:	1d3b      	adds	r3, r7, #4
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	461a      	mov	r2, r3
 800aeda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aede:	4413      	add	r3, r2
 800aee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aee4:	463b      	mov	r3, r7
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	00da      	lsls	r2, r3, #3
 800aeec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aef0:	4413      	add	r3, r2
 800aef2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aef6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aefa:	463b      	mov	r3, r7
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	2b3e      	cmp	r3, #62	; 0x3e
 800af02:	d91f      	bls.n	800af44 <USB_EPStartXfer+0xd36>
 800af04:	463b      	mov	r3, r7
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	095b      	lsrs	r3, r3, #5
 800af0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af10:	463b      	mov	r3, r7
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	f003 031f 	and.w	r3, r3, #31
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d104      	bne.n	800af28 <USB_EPStartXfer+0xd1a>
 800af1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af22:	3b01      	subs	r3, #1
 800af24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	029b      	lsls	r3, r3, #10
 800af30:	b29b      	uxth	r3, r3
 800af32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af40:	801a      	strh	r2, [r3, #0]
 800af42:	e058      	b.n	800aff6 <USB_EPStartXfer+0xde8>
 800af44:	463b      	mov	r3, r7
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d116      	bne.n	800af7c <USB_EPStartXfer+0xd6e>
 800af4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	b29b      	uxth	r3, r3
 800af56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af60:	801a      	strh	r2, [r3, #0]
 800af62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	b29b      	uxth	r3, r3
 800af6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af72:	b29a      	uxth	r2, r3
 800af74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af78:	801a      	strh	r2, [r3, #0]
 800af7a:	e03c      	b.n	800aff6 <USB_EPStartXfer+0xde8>
 800af7c:	463b      	mov	r3, r7
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	085b      	lsrs	r3, r3, #1
 800af84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af88:	463b      	mov	r3, r7
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	f003 0301 	and.w	r3, r3, #1
 800af92:	2b00      	cmp	r3, #0
 800af94:	d004      	beq.n	800afa0 <USB_EPStartXfer+0xd92>
 800af96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af9a:	3301      	adds	r3, #1
 800af9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800afa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	029b      	lsls	r3, r3, #10
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800afae:	801a      	strh	r2, [r3, #0]
 800afb0:	e021      	b.n	800aff6 <USB_EPStartXfer+0xde8>
 800afb2:	463b      	mov	r3, r7
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	785b      	ldrb	r3, [r3, #1]
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d11c      	bne.n	800aff6 <USB_EPStartXfer+0xde8>
 800afbc:	1d3b      	adds	r3, r7, #4
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	461a      	mov	r2, r3
 800afc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800afcc:	4413      	add	r3, r2
 800afce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800afd2:	463b      	mov	r3, r7
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	00da      	lsls	r2, r3, #3
 800afda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800afde:	4413      	add	r3, r2
 800afe0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800afe4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800afe8:	463b      	mov	r3, r7
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	b29a      	uxth	r2, r3
 800aff0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aff4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800aff6:	463b      	mov	r3, r7
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	69db      	ldr	r3, [r3, #28]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 81a4 	beq.w	800b34a <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b002:	1d3b      	adds	r3, r7, #4
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	463b      	mov	r3, r7
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b016:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b01a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d005      	beq.n	800b02e <USB_EPStartXfer+0xe20>
 800b022:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10d      	bne.n	800b04a <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b02e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b036:	2b00      	cmp	r3, #0
 800b038:	f040 8187 	bne.w	800b34a <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b03c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b044:	2b00      	cmp	r3, #0
 800b046:	f040 8180 	bne.w	800b34a <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b04a:	1d3b      	adds	r3, r7, #4
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	463b      	mov	r3, r7
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	4413      	add	r3, r2
 800b058:	881b      	ldrh	r3, [r3, #0]
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b064:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b068:	1d3b      	adds	r3, r7, #4
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	463b      	mov	r3, r7
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	441a      	add	r2, r3
 800b076:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b07a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b07e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b086:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	8013      	strh	r3, [r2, #0]
 800b08e:	e15c      	b.n	800b34a <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b090:	463b      	mov	r3, r7
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	78db      	ldrb	r3, [r3, #3]
 800b096:	2b01      	cmp	r3, #1
 800b098:	f040 8155 	bne.w	800b346 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b09c:	463b      	mov	r3, r7
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	699a      	ldr	r2, [r3, #24]
 800b0a2:	463b      	mov	r3, r7
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d90e      	bls.n	800b0ca <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 800b0ac:	463b      	mov	r3, r7
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b0b6:	463b      	mov	r3, r7
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	699a      	ldr	r2, [r3, #24]
 800b0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c0:	1ad2      	subs	r2, r2, r3
 800b0c2:	463b      	mov	r3, r7
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	619a      	str	r2, [r3, #24]
 800b0c8:	e008      	b.n	800b0dc <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800b0ca:	463b      	mov	r3, r7
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	699b      	ldr	r3, [r3, #24]
 800b0d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b0d4:	463b      	mov	r3, r7
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b0dc:	463b      	mov	r3, r7
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	785b      	ldrb	r3, [r3, #1]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d16f      	bne.n	800b1c6 <USB_EPStartXfer+0xfb8>
 800b0e6:	1d3b      	adds	r3, r7, #4
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b0ee:	1d3b      	adds	r3, r7, #4
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b0fe:	4413      	add	r3, r2
 800b100:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b104:	463b      	mov	r3, r7
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	00da      	lsls	r2, r3, #3
 800b10c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b110:	4413      	add	r3, r2
 800b112:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b116:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b11e:	2b3e      	cmp	r3, #62	; 0x3e
 800b120:	d91d      	bls.n	800b15e <USB_EPStartXfer+0xf50>
 800b122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b126:	095b      	lsrs	r3, r3, #5
 800b128:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b130:	f003 031f 	and.w	r3, r3, #31
 800b134:	2b00      	cmp	r3, #0
 800b136:	d104      	bne.n	800b142 <USB_EPStartXfer+0xf34>
 800b138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b13c:	3b01      	subs	r3, #1
 800b13e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b146:	b29b      	uxth	r3, r3
 800b148:	029b      	lsls	r3, r3, #10
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b154:	b29a      	uxth	r2, r3
 800b156:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b15a:	801a      	strh	r2, [r3, #0]
 800b15c:	e058      	b.n	800b210 <USB_EPStartXfer+0x1002>
 800b15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b162:	2b00      	cmp	r3, #0
 800b164:	d116      	bne.n	800b194 <USB_EPStartXfer+0xf86>
 800b166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b172:	b29a      	uxth	r2, r3
 800b174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b178:	801a      	strh	r2, [r3, #0]
 800b17a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b17e:	881b      	ldrh	r3, [r3, #0]
 800b180:	b29b      	uxth	r3, r3
 800b182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b18a:	b29a      	uxth	r2, r3
 800b18c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b190:	801a      	strh	r2, [r3, #0]
 800b192:	e03d      	b.n	800b210 <USB_EPStartXfer+0x1002>
 800b194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b198:	085b      	lsrs	r3, r3, #1
 800b19a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d004      	beq.n	800b1b4 <USB_EPStartXfer+0xfa6>
 800b1aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b1b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	029b      	lsls	r3, r3, #10
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1c2:	801a      	strh	r2, [r3, #0]
 800b1c4:	e024      	b.n	800b210 <USB_EPStartXfer+0x1002>
 800b1c6:	463b      	mov	r3, r7
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	785b      	ldrb	r3, [r3, #1]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d11f      	bne.n	800b210 <USB_EPStartXfer+0x1002>
 800b1d0:	1d3b      	adds	r3, r7, #4
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b1d8:	1d3b      	adds	r3, r7, #4
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1e8:	4413      	add	r3, r2
 800b1ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b1ee:	463b      	mov	r3, r7
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	00da      	lsls	r2, r3, #3
 800b1f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b200:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b208:	b29a      	uxth	r2, r3
 800b20a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b20e:	801a      	strh	r2, [r3, #0]
 800b210:	1d3b      	adds	r3, r7, #4
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b218:	463b      	mov	r3, r7
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	785b      	ldrb	r3, [r3, #1]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d16f      	bne.n	800b302 <USB_EPStartXfer+0x10f4>
 800b222:	1d3b      	adds	r3, r7, #4
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b22a:	1d3b      	adds	r3, r7, #4
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b232:	b29b      	uxth	r3, r3
 800b234:	461a      	mov	r2, r3
 800b236:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b23a:	4413      	add	r3, r2
 800b23c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b240:	463b      	mov	r3, r7
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	00da      	lsls	r2, r3, #3
 800b248:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b24c:	4413      	add	r3, r2
 800b24e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b252:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b25a:	2b3e      	cmp	r3, #62	; 0x3e
 800b25c:	d91d      	bls.n	800b29a <USB_EPStartXfer+0x108c>
 800b25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b262:	095b      	lsrs	r3, r3, #5
 800b264:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26c:	f003 031f 	and.w	r3, r3, #31
 800b270:	2b00      	cmp	r3, #0
 800b272:	d104      	bne.n	800b27e <USB_EPStartXfer+0x1070>
 800b274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b278:	3b01      	subs	r3, #1
 800b27a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b27e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b282:	b29b      	uxth	r3, r3
 800b284:	029b      	lsls	r3, r3, #10
 800b286:	b29b      	uxth	r3, r3
 800b288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b28c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b290:	b29a      	uxth	r2, r3
 800b292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b296:	801a      	strh	r2, [r3, #0]
 800b298:	e057      	b.n	800b34a <USB_EPStartXfer+0x113c>
 800b29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d116      	bne.n	800b2d0 <USB_EPStartXfer+0x10c2>
 800b2a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b2a6:	881b      	ldrh	r3, [r3, #0]
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b2b4:	801a      	strh	r2, [r3, #0]
 800b2b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b2ba:	881b      	ldrh	r3, [r3, #0]
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b2cc:	801a      	strh	r2, [r3, #0]
 800b2ce:	e03c      	b.n	800b34a <USB_EPStartXfer+0x113c>
 800b2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d4:	085b      	lsrs	r3, r3, #1
 800b2d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d004      	beq.n	800b2f0 <USB_EPStartXfer+0x10e2>
 800b2e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b2f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	029b      	lsls	r3, r3, #10
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b2fe:	801a      	strh	r2, [r3, #0]
 800b300:	e023      	b.n	800b34a <USB_EPStartXfer+0x113c>
 800b302:	463b      	mov	r3, r7
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	785b      	ldrb	r3, [r3, #1]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d11e      	bne.n	800b34a <USB_EPStartXfer+0x113c>
 800b30c:	1d3b      	adds	r3, r7, #4
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b314:	b29b      	uxth	r3, r3
 800b316:	461a      	mov	r2, r3
 800b318:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b31c:	4413      	add	r3, r2
 800b31e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b322:	463b      	mov	r3, r7
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	00da      	lsls	r2, r3, #3
 800b32a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b32e:	4413      	add	r3, r2
 800b330:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b342:	801a      	strh	r2, [r3, #0]
 800b344:	e001      	b.n	800b34a <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e02e      	b.n	800b3a8 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b34a:	1d3b      	adds	r3, r7, #4
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	463b      	mov	r3, r7
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	881b      	ldrh	r3, [r3, #0]
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b364:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b368:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b36c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b370:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b374:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b378:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b37c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b380:	1d3b      	adds	r3, r7, #4
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	463b      	mov	r3, r7
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	441a      	add	r2, r3
 800b38e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b39a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b39e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	b085      	sub	sp, #20
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	785b      	ldrb	r3, [r3, #1]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d020      	beq.n	800b406 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	4413      	add	r3, r2
 800b3ce:	881b      	ldrh	r3, [r3, #0]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3da:	81bb      	strh	r3, [r7, #12]
 800b3dc:	89bb      	ldrh	r3, [r7, #12]
 800b3de:	f083 0310 	eor.w	r3, r3, #16
 800b3e2:	81bb      	strh	r3, [r7, #12]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	441a      	add	r2, r3
 800b3ee:	89bb      	ldrh	r3, [r7, #12]
 800b3f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b400:	b29b      	uxth	r3, r3
 800b402:	8013      	strh	r3, [r2, #0]
 800b404:	e01f      	b.n	800b446 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	881b      	ldrh	r3, [r3, #0]
 800b412:	b29b      	uxth	r3, r3
 800b414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b41c:	81fb      	strh	r3, [r7, #14]
 800b41e:	89fb      	ldrh	r3, [r7, #14]
 800b420:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b424:	81fb      	strh	r3, [r7, #14]
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	441a      	add	r2, r3
 800b430:	89fb      	ldrh	r3, [r7, #14]
 800b432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b43a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b43e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b442:	b29b      	uxth	r3, r3
 800b444:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3714      	adds	r7, #20
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	7b1b      	ldrb	r3, [r3, #12]
 800b462:	2b00      	cmp	r3, #0
 800b464:	f040 809d 	bne.w	800b5a2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	785b      	ldrb	r3, [r3, #1]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d04c      	beq.n	800b50a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	881b      	ldrh	r3, [r3, #0]
 800b47c:	823b      	strh	r3, [r7, #16]
 800b47e:	8a3b      	ldrh	r3, [r7, #16]
 800b480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b484:	2b00      	cmp	r3, #0
 800b486:	d01b      	beq.n	800b4c0 <USB_EPClearStall+0x6c>
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	b29b      	uxth	r3, r3
 800b496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b49e:	81fb      	strh	r3, [r7, #14]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	441a      	add	r2, r3
 800b4aa:	89fb      	ldrh	r3, [r7, #14]
 800b4ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	78db      	ldrb	r3, [r3, #3]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d06c      	beq.n	800b5a2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	4413      	add	r3, r2
 800b4d2:	881b      	ldrh	r3, [r3, #0]
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4de:	81bb      	strh	r3, [r7, #12]
 800b4e0:	89bb      	ldrh	r3, [r7, #12]
 800b4e2:	f083 0320 	eor.w	r3, r3, #32
 800b4e6:	81bb      	strh	r3, [r7, #12]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	441a      	add	r2, r3
 800b4f2:	89bb      	ldrh	r3, [r7, #12]
 800b4f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b504:	b29b      	uxth	r3, r3
 800b506:	8013      	strh	r3, [r2, #0]
 800b508:	e04b      	b.n	800b5a2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	4413      	add	r3, r2
 800b514:	881b      	ldrh	r3, [r3, #0]
 800b516:	82fb      	strh	r3, [r7, #22]
 800b518:	8afb      	ldrh	r3, [r7, #22]
 800b51a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d01b      	beq.n	800b55a <USB_EPClearStall+0x106>
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4413      	add	r3, r2
 800b52c:	881b      	ldrh	r3, [r3, #0]
 800b52e:	b29b      	uxth	r3, r3
 800b530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b538:	82bb      	strh	r3, [r7, #20]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	441a      	add	r2, r3
 800b544:	8abb      	ldrh	r3, [r7, #20]
 800b546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b54a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b54e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b556:	b29b      	uxth	r3, r3
 800b558:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4413      	add	r3, r2
 800b564:	881b      	ldrh	r3, [r3, #0]
 800b566:	b29b      	uxth	r3, r3
 800b568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b56c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b570:	827b      	strh	r3, [r7, #18]
 800b572:	8a7b      	ldrh	r3, [r7, #18]
 800b574:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b578:	827b      	strh	r3, [r7, #18]
 800b57a:	8a7b      	ldrh	r3, [r7, #18]
 800b57c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b580:	827b      	strh	r3, [r7, #18]
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	441a      	add	r2, r3
 800b58c:	8a7b      	ldrh	r3, [r7, #18]
 800b58e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b59a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	371c      	adds	r7, #28
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b5bc:	78fb      	ldrb	r3, [r7, #3]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d103      	bne.n	800b5ca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2280      	movs	r2, #128	; 0x80
 800b5c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	370c      	adds	r7, #12
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b606:	b480      	push	{r7}
 800b608:	b085      	sub	sp, #20
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b614:	b29b      	uxth	r3, r3
 800b616:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b618:	68fb      	ldr	r3, [r7, #12]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3714      	adds	r7, #20
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr

0800b626 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b626:	b480      	push	{r7}
 800b628:	b08d      	sub	sp, #52	; 0x34
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	60f8      	str	r0, [r7, #12]
 800b62e:	60b9      	str	r1, [r7, #8]
 800b630:	4611      	mov	r1, r2
 800b632:	461a      	mov	r2, r3
 800b634:	460b      	mov	r3, r1
 800b636:	80fb      	strh	r3, [r7, #6]
 800b638:	4613      	mov	r3, r2
 800b63a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b63c:	88bb      	ldrh	r3, [r7, #4]
 800b63e:	3301      	adds	r3, #1
 800b640:	085b      	lsrs	r3, r3, #1
 800b642:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b64c:	88fa      	ldrh	r2, [r7, #6]
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	4413      	add	r3, r2
 800b652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b656:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b65c:	e01b      	b.n	800b696 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800b65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b666:	3301      	adds	r3, #1
 800b668:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	021b      	lsls	r3, r3, #8
 800b672:	b29b      	uxth	r3, r3
 800b674:	461a      	mov	r2, r3
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	4313      	orrs	r3, r2
 800b67a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	b29a      	uxth	r2, r3
 800b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b682:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b686:	3302      	adds	r3, #2
 800b688:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	3301      	adds	r3, #1
 800b68e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b692:	3b01      	subs	r3, #1
 800b694:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1e0      	bne.n	800b65e <USB_WritePMA+0x38>
  }
}
 800b69c:	bf00      	nop
 800b69e:	bf00      	nop
 800b6a0:	3734      	adds	r7, #52	; 0x34
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b08b      	sub	sp, #44	; 0x2c
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	60f8      	str	r0, [r7, #12]
 800b6b2:	60b9      	str	r1, [r7, #8]
 800b6b4:	4611      	mov	r1, r2
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	80fb      	strh	r3, [r7, #6]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b6c0:	88bb      	ldrh	r3, [r7, #4]
 800b6c2:	085b      	lsrs	r3, r3, #1
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b6d0:	88fa      	ldrh	r2, [r7, #6]
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6da:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	627b      	str	r3, [r7, #36]	; 0x24
 800b6e0:	e018      	b.n	800b714 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	881b      	ldrh	r3, [r3, #0]
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b6ea:	6a3b      	ldr	r3, [r7, #32]
 800b6ec:	3302      	adds	r3, #2
 800b6ee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	0a1b      	lsrs	r3, r3, #8
 800b702:	b2da      	uxtb	r2, r3
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	3301      	adds	r3, #1
 800b70c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b710:	3b01      	subs	r3, #1
 800b712:	627b      	str	r3, [r7, #36]	; 0x24
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1e3      	bne.n	800b6e2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b71a:	88bb      	ldrh	r3, [r7, #4]
 800b71c:	f003 0301 	and.w	r3, r3, #1
 800b720:	b29b      	uxth	r3, r3
 800b722:	2b00      	cmp	r3, #0
 800b724:	d007      	beq.n	800b736 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	881b      	ldrh	r3, [r3, #0]
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	b2da      	uxtb	r2, r3
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	701a      	strb	r2, [r3, #0]
  }
}
 800b736:	bf00      	nop
 800b738:	372c      	adds	r7, #44	; 0x2c
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	460b      	mov	r3, r1
 800b74c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b74e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b752:	f006 f815 	bl	8011780 <USBD_static_malloc>
 800b756:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d105      	bne.n	800b76a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b766:	2302      	movs	r3, #2
 800b768:	e066      	b.n	800b838 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	7c1b      	ldrb	r3, [r3, #16]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d119      	bne.n	800b7ae <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b77a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b77e:	2202      	movs	r2, #2
 800b780:	2181      	movs	r1, #129	; 0x81
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f005 fea1 	bl	80114ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b78e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b792:	2202      	movs	r2, #2
 800b794:	2101      	movs	r1, #1
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f005 fe97 	bl	80114ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2210      	movs	r2, #16
 800b7a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b7ac:	e016      	b.n	800b7dc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b7ae:	2340      	movs	r3, #64	; 0x40
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	2181      	movs	r1, #129	; 0x81
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f005 fe88 	bl	80114ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b7c0:	2340      	movs	r3, #64	; 0x40
 800b7c2:	2202      	movs	r2, #2
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f005 fe7f 	bl	80114ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2210      	movs	r2, #16
 800b7d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b7dc:	2308      	movs	r3, #8
 800b7de:	2203      	movs	r2, #3
 800b7e0:	2182      	movs	r1, #130	; 0x82
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f005 fe71 	bl	80114ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2200      	movs	r2, #0
 800b806:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	7c1b      	ldrb	r3, [r3, #16]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d109      	bne.n	800b826 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b81c:	2101      	movs	r1, #1
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f005 ff43 	bl	80116aa <USBD_LL_PrepareReceive>
 800b824:	e007      	b.n	800b836 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b82c:	2340      	movs	r3, #64	; 0x40
 800b82e:	2101      	movs	r1, #1
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f005 ff3a 	bl	80116aa <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	460b      	mov	r3, r1
 800b84a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b84c:	2181      	movs	r1, #129	; 0x81
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f005 fe61 	bl	8011516 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b85a:	2101      	movs	r1, #1
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f005 fe5a 	bl	8011516 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b86a:	2182      	movs	r1, #130	; 0x82
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f005 fe52 	bl	8011516 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00e      	beq.n	800b8aa <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b89c:	4618      	mov	r0, r3
 800b89e:	f005 ff7d 	bl	801179c <USBD_static_free>
    pdev->pClassData = NULL;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b8d8:	2303      	movs	r3, #3
 800b8da:	e0af      	b.n	800ba3c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d03f      	beq.n	800b968 <USBD_CDC_Setup+0xb4>
 800b8e8:	2b20      	cmp	r3, #32
 800b8ea:	f040 809f 	bne.w	800ba2c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	88db      	ldrh	r3, [r3, #6]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d02e      	beq.n	800b954 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	b25b      	sxtb	r3, r3
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	da16      	bge.n	800b92e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b90c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	88d2      	ldrh	r2, [r2, #6]
 800b912:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	88db      	ldrh	r3, [r3, #6]
 800b918:	2b07      	cmp	r3, #7
 800b91a:	bf28      	it	cs
 800b91c:	2307      	movcs	r3, #7
 800b91e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	89fa      	ldrh	r2, [r7, #14]
 800b924:	4619      	mov	r1, r3
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f001 fa9f 	bl	800ce6a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b92c:	e085      	b.n	800ba3a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	785a      	ldrb	r2, [r3, #1]
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	88db      	ldrh	r3, [r3, #6]
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b944:	6939      	ldr	r1, [r7, #16]
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	88db      	ldrh	r3, [r3, #6]
 800b94a:	461a      	mov	r2, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f001 fab8 	bl	800cec2 <USBD_CtlPrepareRx>
      break;
 800b952:	e072      	b.n	800ba3a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	683a      	ldr	r2, [r7, #0]
 800b95e:	7850      	ldrb	r0, [r2, #1]
 800b960:	2200      	movs	r2, #0
 800b962:	6839      	ldr	r1, [r7, #0]
 800b964:	4798      	blx	r3
      break;
 800b966:	e068      	b.n	800ba3a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	785b      	ldrb	r3, [r3, #1]
 800b96c:	2b0b      	cmp	r3, #11
 800b96e:	d852      	bhi.n	800ba16 <USBD_CDC_Setup+0x162>
 800b970:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <USBD_CDC_Setup+0xc4>)
 800b972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b976:	bf00      	nop
 800b978:	0800b9a9 	.word	0x0800b9a9
 800b97c:	0800ba25 	.word	0x0800ba25
 800b980:	0800ba17 	.word	0x0800ba17
 800b984:	0800ba17 	.word	0x0800ba17
 800b988:	0800ba17 	.word	0x0800ba17
 800b98c:	0800ba17 	.word	0x0800ba17
 800b990:	0800ba17 	.word	0x0800ba17
 800b994:	0800ba17 	.word	0x0800ba17
 800b998:	0800ba17 	.word	0x0800ba17
 800b99c:	0800ba17 	.word	0x0800ba17
 800b9a0:	0800b9d3 	.word	0x0800b9d3
 800b9a4:	0800b9fd 	.word	0x0800b9fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b03      	cmp	r3, #3
 800b9b2:	d107      	bne.n	800b9c4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b9b4:	f107 030a 	add.w	r3, r7, #10
 800b9b8:	2202      	movs	r2, #2
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f001 fa54 	bl	800ce6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b9c2:	e032      	b.n	800ba2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b9c4:	6839      	ldr	r1, [r7, #0]
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f001 f9de 	bl	800cd88 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	75fb      	strb	r3, [r7, #23]
          break;
 800b9d0:	e02b      	b.n	800ba2a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b03      	cmp	r3, #3
 800b9dc:	d107      	bne.n	800b9ee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b9de:	f107 030d 	add.w	r3, r7, #13
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f001 fa3f 	bl	800ce6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b9ec:	e01d      	b.n	800ba2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f001 f9c9 	bl	800cd88 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	75fb      	strb	r3, [r7, #23]
          break;
 800b9fa:	e016      	b.n	800ba2a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	2b03      	cmp	r3, #3
 800ba06:	d00f      	beq.n	800ba28 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ba08:	6839      	ldr	r1, [r7, #0]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f001 f9bc 	bl	800cd88 <USBD_CtlError>
            ret = USBD_FAIL;
 800ba10:	2303      	movs	r3, #3
 800ba12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ba14:	e008      	b.n	800ba28 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ba16:	6839      	ldr	r1, [r7, #0]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f001 f9b5 	bl	800cd88 <USBD_CtlError>
          ret = USBD_FAIL;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	75fb      	strb	r3, [r7, #23]
          break;
 800ba22:	e002      	b.n	800ba2a <USBD_CDC_Setup+0x176>
          break;
 800ba24:	bf00      	nop
 800ba26:	e008      	b.n	800ba3a <USBD_CDC_Setup+0x186>
          break;
 800ba28:	bf00      	nop
      }
      break;
 800ba2a:	e006      	b.n	800ba3a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ba2c:	6839      	ldr	r1, [r7, #0]
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f001 f9aa 	bl	800cd88 <USBD_CtlError>
      ret = USBD_FAIL;
 800ba34:	2303      	movs	r3, #3
 800ba36:	75fb      	strb	r3, [r7, #23]
      break;
 800ba38:	bf00      	nop
  }

  return (uint8_t)ret;
 800ba3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3718      	adds	r7, #24
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e04f      	b.n	800bb06 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ba6e:	78fa      	ldrb	r2, [r7, #3]
 800ba70:	6879      	ldr	r1, [r7, #4]
 800ba72:	4613      	mov	r3, r2
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	4413      	add	r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	440b      	add	r3, r1
 800ba7c:	3318      	adds	r3, #24
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d029      	beq.n	800bad8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ba84:	78fa      	ldrb	r2, [r7, #3]
 800ba86:	6879      	ldr	r1, [r7, #4]
 800ba88:	4613      	mov	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	440b      	add	r3, r1
 800ba92:	3318      	adds	r3, #24
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	78f9      	ldrb	r1, [r7, #3]
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	440b      	add	r3, r1
 800baa0:	00db      	lsls	r3, r3, #3
 800baa2:	4403      	add	r3, r0
 800baa4:	3338      	adds	r3, #56	; 0x38
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	fbb2 f1f3 	udiv	r1, r2, r3
 800baac:	fb03 f301 	mul.w	r3, r3, r1
 800bab0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d110      	bne.n	800bad8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bab6:	78fa      	ldrb	r2, [r7, #3]
 800bab8:	6879      	ldr	r1, [r7, #4]
 800baba:	4613      	mov	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	440b      	add	r3, r1
 800bac4:	3318      	adds	r3, #24
 800bac6:	2200      	movs	r2, #0
 800bac8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800baca:	78f9      	ldrb	r1, [r7, #3]
 800bacc:	2300      	movs	r3, #0
 800bace:	2200      	movs	r2, #0
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f005 fdc9 	bl	8011668 <USBD_LL_Transmit>
 800bad6:	e015      	b.n	800bb04 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2200      	movs	r2, #0
 800badc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00b      	beq.n	800bb04 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bb00:	78fa      	ldrb	r2, [r7, #3]
 800bb02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b084      	sub	sp, #16
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	460b      	mov	r3, r1
 800bb18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d101      	bne.n	800bb30 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	e015      	b.n	800bb5c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	4619      	mov	r1, r3
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f005 fdd9 	bl	80116ec <USBD_LL_GetRxDataSize>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bb56:	4611      	mov	r1, r2
 800bb58:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d101      	bne.n	800bb7e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e01b      	b.n	800bbb6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d015      	beq.n	800bbb4 <USBD_CDC_EP0_RxReady+0x50>
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bb8e:	2bff      	cmp	r3, #255	; 0xff
 800bb90:	d010      	beq.n	800bbb4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bba0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bba8:	b292      	uxth	r2, r2
 800bbaa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	22ff      	movs	r2, #255	; 0xff
 800bbb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
	...

0800bbc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2243      	movs	r2, #67	; 0x43
 800bbcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bbce:	4b03      	ldr	r3, [pc, #12]	; (800bbdc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	20000098 	.word	0x20000098

0800bbe0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2243      	movs	r2, #67	; 0x43
 800bbec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bbee:	4b03      	ldr	r3, [pc, #12]	; (800bbfc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	20000054 	.word	0x20000054

0800bc00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2243      	movs	r2, #67	; 0x43
 800bc0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bc0e:	4b03      	ldr	r3, [pc, #12]	; (800bc1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	200000dc 	.word	0x200000dc

0800bc20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	220a      	movs	r2, #10
 800bc2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bc2e:	4b03      	ldr	r3, [pc, #12]	; (800bc3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	20000010 	.word	0x20000010

0800bc40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d101      	bne.n	800bc54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bc50:	2303      	movs	r3, #3
 800bc52:	e004      	b.n	800bc5e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	370c      	adds	r7, #12
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b087      	sub	sp, #28
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	60f8      	str	r0, [r7, #12]
 800bc72:	60b9      	str	r1, [r7, #8]
 800bc74:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc7c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d101      	bne.n	800bc88 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bc84:	2303      	movs	r3, #3
 800bc86:	e008      	b.n	800bc9a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	371c      	adds	r7, #28
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b085      	sub	sp, #20
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcb6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e004      	b.n	800bccc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3714      	adds	r7, #20
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bce6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	e016      	b.n	800bd24 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	7c1b      	ldrb	r3, [r3, #16]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d109      	bne.n	800bd12 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd08:	2101      	movs	r1, #1
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f005 fccd 	bl	80116aa <USBD_LL_PrepareReceive>
 800bd10:	e007      	b.n	800bd22 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd18:	2340      	movs	r3, #64	; 0x40
 800bd1a:	2101      	movs	r1, #1
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f005 fcc4 	bl	80116aa <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	4613      	mov	r3, r2
 800bd38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d101      	bne.n	800bd44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bd40:	2303      	movs	r3, #3
 800bd42:	e01f      	b.n	800bd84 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d003      	beq.n	800bd6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	79fa      	ldrb	r2, [r7, #7]
 800bd76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f005 fb29 	bl	80113d0 <USBD_LL_Init>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bd82:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3718      	adds	r7, #24
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd96:	2300      	movs	r3, #0
 800bd98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d101      	bne.n	800bda4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bda0:	2303      	movs	r3, #3
 800bda2:	e016      	b.n	800bdd2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	683a      	ldr	r2, [r7, #0]
 800bda8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00b      	beq.n	800bdd0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc0:	f107 020e 	add.w	r2, r7, #14
 800bdc4:	4610      	mov	r0, r2
 800bdc6:	4798      	blx	r3
 800bdc8:	4602      	mov	r2, r0
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b082      	sub	sp, #8
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f005 fb56 	bl	8011494 <USBD_LL_Start>
 800bde8:	4603      	mov	r3, r0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b083      	sub	sp, #12
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	460b      	mov	r3, r1
 800be12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800be14:	2303      	movs	r3, #3
 800be16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d009      	beq.n	800be36 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	78fa      	ldrb	r2, [r7, #3]
 800be2c:	4611      	mov	r1, r2
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	4798      	blx	r3
 800be32:	4603      	mov	r3, r0
 800be34:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800be36:	7bfb      	ldrb	r3, [r7, #15]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	460b      	mov	r3, r1
 800be4a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be52:	2b00      	cmp	r3, #0
 800be54:	d007      	beq.n	800be66 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	78fa      	ldrb	r2, [r7, #3]
 800be60:	4611      	mov	r1, r2
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	4798      	blx	r3
  }

  return USBD_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	4618      	mov	r0, r3
 800be84:	f000 ff46 	bl	800cd14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800be96:	461a      	mov	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bea4:	f003 031f 	and.w	r3, r3, #31
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d01a      	beq.n	800bee2 <USBD_LL_SetupStage+0x72>
 800beac:	2b02      	cmp	r3, #2
 800beae:	d822      	bhi.n	800bef6 <USBD_LL_SetupStage+0x86>
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d002      	beq.n	800beba <USBD_LL_SetupStage+0x4a>
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d00a      	beq.n	800bece <USBD_LL_SetupStage+0x5e>
 800beb8:	e01d      	b.n	800bef6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bec0:	4619      	mov	r1, r3
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f9ee 	bl	800c2a4 <USBD_StdDevReq>
 800bec8:	4603      	mov	r3, r0
 800beca:	73fb      	strb	r3, [r7, #15]
      break;
 800becc:	e020      	b.n	800bf10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fa52 	bl	800c380 <USBD_StdItfReq>
 800bedc:	4603      	mov	r3, r0
 800bede:	73fb      	strb	r3, [r7, #15]
      break;
 800bee0:	e016      	b.n	800bf10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bee8:	4619      	mov	r1, r3
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fa91 	bl	800c412 <USBD_StdEPReq>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73fb      	strb	r3, [r7, #15]
      break;
 800bef4:	e00c      	b.n	800bf10 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800befc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	4619      	mov	r1, r3
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f005 fb25 	bl	8011554 <USBD_LL_StallEP>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	73fb      	strb	r3, [r7, #15]
      break;
 800bf0e:	bf00      	nop
  }

  return ret;
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b086      	sub	sp, #24
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	460b      	mov	r3, r1
 800bf24:	607a      	str	r2, [r7, #4]
 800bf26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bf28:	7afb      	ldrb	r3, [r7, #11]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d138      	bne.n	800bfa0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bf34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf3c:	2b03      	cmp	r3, #3
 800bf3e:	d14a      	bne.n	800bfd6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	689a      	ldr	r2, [r3, #8]
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d913      	bls.n	800bf74 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	689a      	ldr	r2, [r3, #8]
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	1ad2      	subs	r2, r2, r3
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	68da      	ldr	r2, [r3, #12]
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	4293      	cmp	r3, r2
 800bf64:	bf28      	it	cs
 800bf66:	4613      	movcs	r3, r2
 800bf68:	461a      	mov	r2, r3
 800bf6a:	6879      	ldr	r1, [r7, #4]
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f000 ffc5 	bl	800cefc <USBD_CtlContinueRx>
 800bf72:	e030      	b.n	800bfd6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	2b03      	cmp	r3, #3
 800bf7e:	d10b      	bne.n	800bf98 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d005      	beq.n	800bf98 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f000 ffc0 	bl	800cf1e <USBD_CtlSendStatus>
 800bf9e:	e01a      	b.n	800bfd6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	2b03      	cmp	r3, #3
 800bfaa:	d114      	bne.n	800bfd6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfb2:	699b      	ldr	r3, [r3, #24]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00e      	beq.n	800bfd6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfbe:	699b      	ldr	r3, [r3, #24]
 800bfc0:	7afa      	ldrb	r2, [r7, #11]
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	4798      	blx	r3
 800bfc8:	4603      	mov	r3, r0
 800bfca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bfcc:	7dfb      	ldrb	r3, [r7, #23]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d001      	beq.n	800bfd6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
 800bfd4:	e000      	b.n	800bfd8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	607a      	str	r2, [r7, #4]
 800bfec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bfee:	7afb      	ldrb	r3, [r7, #11]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d16b      	bne.n	800c0cc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	3314      	adds	r3, #20
 800bff8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c000:	2b02      	cmp	r3, #2
 800c002:	d156      	bne.n	800c0b2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	689a      	ldr	r2, [r3, #8]
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d914      	bls.n	800c03a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	689a      	ldr	r2, [r3, #8]
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	1ad2      	subs	r2, r2, r3
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	461a      	mov	r2, r3
 800c024:	6879      	ldr	r1, [r7, #4]
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f000 ff3a 	bl	800cea0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c02c:	2300      	movs	r3, #0
 800c02e:	2200      	movs	r2, #0
 800c030:	2100      	movs	r1, #0
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f005 fb39 	bl	80116aa <USBD_LL_PrepareReceive>
 800c038:	e03b      	b.n	800c0b2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	68da      	ldr	r2, [r3, #12]
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	429a      	cmp	r2, r3
 800c044:	d11c      	bne.n	800c080 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	685a      	ldr	r2, [r3, #4]
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c04e:	429a      	cmp	r2, r3
 800c050:	d316      	bcc.n	800c080 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	685a      	ldr	r2, [r3, #4]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d20f      	bcs.n	800c080 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c060:	2200      	movs	r2, #0
 800c062:	2100      	movs	r1, #0
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f000 ff1b 	bl	800cea0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c072:	2300      	movs	r3, #0
 800c074:	2200      	movs	r2, #0
 800c076:	2100      	movs	r1, #0
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f005 fb16 	bl	80116aa <USBD_LL_PrepareReceive>
 800c07e:	e018      	b.n	800c0b2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c086:	b2db      	uxtb	r3, r3
 800c088:	2b03      	cmp	r3, #3
 800c08a:	d10b      	bne.n	800c0a4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d005      	beq.n	800c0a4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0a4:	2180      	movs	r1, #128	; 0x80
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f005 fa54 	bl	8011554 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f000 ff49 	bl	800cf44 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d122      	bne.n	800c102 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f7ff fe98 	bl	800bdf2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c0ca:	e01a      	b.n	800c102 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	2b03      	cmp	r3, #3
 800c0d6:	d114      	bne.n	800c102 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0de:	695b      	ldr	r3, [r3, #20]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00e      	beq.n	800c102 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ea:	695b      	ldr	r3, [r3, #20]
 800c0ec:	7afa      	ldrb	r2, [r7, #11]
 800c0ee:	4611      	mov	r1, r2
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	4798      	blx	r3
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c0f8:	7dfb      	ldrb	r3, [r7, #23]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c0fe:	7dfb      	ldrb	r3, [r7, #23]
 800c100:	e000      	b.n	800c104 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c102:	2300      	movs	r3, #0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3718      	adds	r7, #24
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d101      	bne.n	800c140 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c13c:	2303      	movs	r3, #3
 800c13e:	e02f      	b.n	800c1a0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00f      	beq.n	800c16a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d009      	beq.n	800c16a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	6852      	ldr	r2, [r2, #4]
 800c162:	b2d2      	uxtb	r2, r2
 800c164:	4611      	mov	r1, r2
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c16a:	2340      	movs	r3, #64	; 0x40
 800c16c:	2200      	movs	r2, #0
 800c16e:	2100      	movs	r1, #0
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f005 f9aa 	bl	80114ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2240      	movs	r2, #64	; 0x40
 800c182:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c186:	2340      	movs	r3, #64	; 0x40
 800c188:	2200      	movs	r2, #0
 800c18a:	2180      	movs	r1, #128	; 0x80
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f005 f99c 	bl	80114ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2201      	movs	r2, #1
 800c196:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2240      	movs	r2, #64	; 0x40
 800c19c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	78fa      	ldrb	r2, [r7, #3]
 800c1b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2204      	movs	r2, #4
 800c1e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c202:	b2db      	uxtb	r3, r3
 800c204:	2b04      	cmp	r3, #4
 800c206:	d106      	bne.n	800c216 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c216:	2300      	movs	r3, #0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c236:	2303      	movs	r3, #3
 800c238:	e012      	b.n	800c260 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b03      	cmp	r3, #3
 800c244:	d10b      	bne.n	800c25e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c24c:	69db      	ldr	r3, [r3, #28]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d005      	beq.n	800c25e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c268:	b480      	push	{r7}
 800c26a:	b087      	sub	sp, #28
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	3301      	adds	r3, #1
 800c27e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c286:	8a3b      	ldrh	r3, [r7, #16]
 800c288:	021b      	lsls	r3, r3, #8
 800c28a:	b21a      	sxth	r2, r3
 800c28c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c290:	4313      	orrs	r3, r2
 800c292:	b21b      	sxth	r3, r3
 800c294:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c296:	89fb      	ldrh	r3, [r7, #14]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	371c      	adds	r7, #28
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2ba:	2b40      	cmp	r3, #64	; 0x40
 800c2bc:	d005      	beq.n	800c2ca <USBD_StdDevReq+0x26>
 800c2be:	2b40      	cmp	r3, #64	; 0x40
 800c2c0:	d853      	bhi.n	800c36a <USBD_StdDevReq+0xc6>
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00b      	beq.n	800c2de <USBD_StdDevReq+0x3a>
 800c2c6:	2b20      	cmp	r3, #32
 800c2c8:	d14f      	bne.n	800c36a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	4798      	blx	r3
 800c2d8:	4603      	mov	r3, r0
 800c2da:	73fb      	strb	r3, [r7, #15]
      break;
 800c2dc:	e04a      	b.n	800c374 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	785b      	ldrb	r3, [r3, #1]
 800c2e2:	2b09      	cmp	r3, #9
 800c2e4:	d83b      	bhi.n	800c35e <USBD_StdDevReq+0xba>
 800c2e6:	a201      	add	r2, pc, #4	; (adr r2, 800c2ec <USBD_StdDevReq+0x48>)
 800c2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ec:	0800c341 	.word	0x0800c341
 800c2f0:	0800c355 	.word	0x0800c355
 800c2f4:	0800c35f 	.word	0x0800c35f
 800c2f8:	0800c34b 	.word	0x0800c34b
 800c2fc:	0800c35f 	.word	0x0800c35f
 800c300:	0800c31f 	.word	0x0800c31f
 800c304:	0800c315 	.word	0x0800c315
 800c308:	0800c35f 	.word	0x0800c35f
 800c30c:	0800c337 	.word	0x0800c337
 800c310:	0800c329 	.word	0x0800c329
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f9de 	bl	800c6d8 <USBD_GetDescriptor>
          break;
 800c31c:	e024      	b.n	800c368 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c31e:	6839      	ldr	r1, [r7, #0]
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 fb6d 	bl	800ca00 <USBD_SetAddress>
          break;
 800c326:	e01f      	b.n	800c368 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fbac 	bl	800ca88 <USBD_SetConfig>
 800c330:	4603      	mov	r3, r0
 800c332:	73fb      	strb	r3, [r7, #15]
          break;
 800c334:	e018      	b.n	800c368 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 fc4b 	bl	800cbd4 <USBD_GetConfig>
          break;
 800c33e:	e013      	b.n	800c368 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fc7c 	bl	800cc40 <USBD_GetStatus>
          break;
 800c348:	e00e      	b.n	800c368 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fcab 	bl	800cca8 <USBD_SetFeature>
          break;
 800c352:	e009      	b.n	800c368 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fcba 	bl	800ccd0 <USBD_ClrFeature>
          break;
 800c35c:	e004      	b.n	800c368 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c35e:	6839      	ldr	r1, [r7, #0]
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fd11 	bl	800cd88 <USBD_CtlError>
          break;
 800c366:	bf00      	nop
      }
      break;
 800c368:	e004      	b.n	800c374 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 fd0b 	bl	800cd88 <USBD_CtlError>
      break;
 800c372:	bf00      	nop
  }

  return ret;
 800c374:	7bfb      	ldrb	r3, [r7, #15]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop

0800c380 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c396:	2b40      	cmp	r3, #64	; 0x40
 800c398:	d005      	beq.n	800c3a6 <USBD_StdItfReq+0x26>
 800c39a:	2b40      	cmp	r3, #64	; 0x40
 800c39c:	d82f      	bhi.n	800c3fe <USBD_StdItfReq+0x7e>
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d001      	beq.n	800c3a6 <USBD_StdItfReq+0x26>
 800c3a2:	2b20      	cmp	r3, #32
 800c3a4:	d12b      	bne.n	800c3fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	d81d      	bhi.n	800c3f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	889b      	ldrh	r3, [r3, #4]
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d813      	bhi.n	800c3e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	4798      	blx	r3
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	88db      	ldrh	r3, [r3, #6]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d110      	bne.n	800c3fa <USBD_StdItfReq+0x7a>
 800c3d8:	7bfb      	ldrb	r3, [r7, #15]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10d      	bne.n	800c3fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fd9d 	bl	800cf1e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3e4:	e009      	b.n	800c3fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fccd 	bl	800cd88 <USBD_CtlError>
          break;
 800c3ee:	e004      	b.n	800c3fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fcc8 	bl	800cd88 <USBD_CtlError>
          break;
 800c3f8:	e000      	b.n	800c3fc <USBD_StdItfReq+0x7c>
          break;
 800c3fa:	bf00      	nop
      }
      break;
 800c3fc:	e004      	b.n	800c408 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c3fe:	6839      	ldr	r1, [r7, #0]
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 fcc1 	bl	800cd88 <USBD_CtlError>
      break;
 800c406:	bf00      	nop
  }

  return ret;
 800c408:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
 800c41a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c41c:	2300      	movs	r3, #0
 800c41e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	889b      	ldrh	r3, [r3, #4]
 800c424:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c42e:	2b40      	cmp	r3, #64	; 0x40
 800c430:	d007      	beq.n	800c442 <USBD_StdEPReq+0x30>
 800c432:	2b40      	cmp	r3, #64	; 0x40
 800c434:	f200 8145 	bhi.w	800c6c2 <USBD_StdEPReq+0x2b0>
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d00c      	beq.n	800c456 <USBD_StdEPReq+0x44>
 800c43c:	2b20      	cmp	r3, #32
 800c43e:	f040 8140 	bne.w	800c6c2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	4798      	blx	r3
 800c450:	4603      	mov	r3, r0
 800c452:	73fb      	strb	r3, [r7, #15]
      break;
 800c454:	e13a      	b.n	800c6cc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	785b      	ldrb	r3, [r3, #1]
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	d007      	beq.n	800c46e <USBD_StdEPReq+0x5c>
 800c45e:	2b03      	cmp	r3, #3
 800c460:	f300 8129 	bgt.w	800c6b6 <USBD_StdEPReq+0x2a4>
 800c464:	2b00      	cmp	r3, #0
 800c466:	d07f      	beq.n	800c568 <USBD_StdEPReq+0x156>
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d03c      	beq.n	800c4e6 <USBD_StdEPReq+0xd4>
 800c46c:	e123      	b.n	800c6b6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c474:	b2db      	uxtb	r3, r3
 800c476:	2b02      	cmp	r3, #2
 800c478:	d002      	beq.n	800c480 <USBD_StdEPReq+0x6e>
 800c47a:	2b03      	cmp	r3, #3
 800c47c:	d016      	beq.n	800c4ac <USBD_StdEPReq+0x9a>
 800c47e:	e02c      	b.n	800c4da <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c480:	7bbb      	ldrb	r3, [r7, #14]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00d      	beq.n	800c4a2 <USBD_StdEPReq+0x90>
 800c486:	7bbb      	ldrb	r3, [r7, #14]
 800c488:	2b80      	cmp	r3, #128	; 0x80
 800c48a:	d00a      	beq.n	800c4a2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c48c:	7bbb      	ldrb	r3, [r7, #14]
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f005 f85f 	bl	8011554 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c496:	2180      	movs	r1, #128	; 0x80
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f005 f85b 	bl	8011554 <USBD_LL_StallEP>
 800c49e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4a0:	e020      	b.n	800c4e4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c4a2:	6839      	ldr	r1, [r7, #0]
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 fc6f 	bl	800cd88 <USBD_CtlError>
              break;
 800c4aa:	e01b      	b.n	800c4e4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	885b      	ldrh	r3, [r3, #2]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d10e      	bne.n	800c4d2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4b4:	7bbb      	ldrb	r3, [r7, #14]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00b      	beq.n	800c4d2 <USBD_StdEPReq+0xc0>
 800c4ba:	7bbb      	ldrb	r3, [r7, #14]
 800c4bc:	2b80      	cmp	r3, #128	; 0x80
 800c4be:	d008      	beq.n	800c4d2 <USBD_StdEPReq+0xc0>
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	88db      	ldrh	r3, [r3, #6]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d104      	bne.n	800c4d2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4c8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f005 f841 	bl	8011554 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 fd23 	bl	800cf1e <USBD_CtlSendStatus>

              break;
 800c4d8:	e004      	b.n	800c4e4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c4da:	6839      	ldr	r1, [r7, #0]
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fc53 	bl	800cd88 <USBD_CtlError>
              break;
 800c4e2:	bf00      	nop
          }
          break;
 800c4e4:	e0ec      	b.n	800c6c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	2b02      	cmp	r3, #2
 800c4f0:	d002      	beq.n	800c4f8 <USBD_StdEPReq+0xe6>
 800c4f2:	2b03      	cmp	r3, #3
 800c4f4:	d016      	beq.n	800c524 <USBD_StdEPReq+0x112>
 800c4f6:	e030      	b.n	800c55a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4f8:	7bbb      	ldrb	r3, [r7, #14]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00d      	beq.n	800c51a <USBD_StdEPReq+0x108>
 800c4fe:	7bbb      	ldrb	r3, [r7, #14]
 800c500:	2b80      	cmp	r3, #128	; 0x80
 800c502:	d00a      	beq.n	800c51a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c504:	7bbb      	ldrb	r3, [r7, #14]
 800c506:	4619      	mov	r1, r3
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f005 f823 	bl	8011554 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c50e:	2180      	movs	r1, #128	; 0x80
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f005 f81f 	bl	8011554 <USBD_LL_StallEP>
 800c516:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c518:	e025      	b.n	800c566 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 fc33 	bl	800cd88 <USBD_CtlError>
              break;
 800c522:	e020      	b.n	800c566 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	885b      	ldrh	r3, [r3, #2]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d11b      	bne.n	800c564 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c532:	2b00      	cmp	r3, #0
 800c534:	d004      	beq.n	800c540 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c536:	7bbb      	ldrb	r3, [r7, #14]
 800c538:	4619      	mov	r1, r3
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f005 f829 	bl	8011592 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 fcec 	bl	800cf1e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	6839      	ldr	r1, [r7, #0]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	4798      	blx	r3
 800c554:	4603      	mov	r3, r0
 800c556:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c558:	e004      	b.n	800c564 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fc13 	bl	800cd88 <USBD_CtlError>
              break;
 800c562:	e000      	b.n	800c566 <USBD_StdEPReq+0x154>
              break;
 800c564:	bf00      	nop
          }
          break;
 800c566:	e0ab      	b.n	800c6c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b02      	cmp	r3, #2
 800c572:	d002      	beq.n	800c57a <USBD_StdEPReq+0x168>
 800c574:	2b03      	cmp	r3, #3
 800c576:	d032      	beq.n	800c5de <USBD_StdEPReq+0x1cc>
 800c578:	e097      	b.n	800c6aa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c57a:	7bbb      	ldrb	r3, [r7, #14]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d007      	beq.n	800c590 <USBD_StdEPReq+0x17e>
 800c580:	7bbb      	ldrb	r3, [r7, #14]
 800c582:	2b80      	cmp	r3, #128	; 0x80
 800c584:	d004      	beq.n	800c590 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c586:	6839      	ldr	r1, [r7, #0]
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fbfd 	bl	800cd88 <USBD_CtlError>
                break;
 800c58e:	e091      	b.n	800c6b4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c594:	2b00      	cmp	r3, #0
 800c596:	da0b      	bge.n	800c5b0 <USBD_StdEPReq+0x19e>
 800c598:	7bbb      	ldrb	r3, [r7, #14]
 800c59a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c59e:	4613      	mov	r3, r2
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	4413      	add	r3, r2
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	3310      	adds	r3, #16
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	e00b      	b.n	800c5c8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c5b0:	7bbb      	ldrb	r3, [r7, #14]
 800c5b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	3304      	adds	r3, #4
 800c5c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 fc47 	bl	800ce6a <USBD_CtlSendData>
              break;
 800c5dc:	e06a      	b.n	800c6b4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c5de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	da11      	bge.n	800c60a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c5e6:	7bbb      	ldrb	r3, [r7, #14]
 800c5e8:	f003 020f 	and.w	r2, r3, #15
 800c5ec:	6879      	ldr	r1, [r7, #4]
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4413      	add	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	440b      	add	r3, r1
 800c5f8:	3324      	adds	r3, #36	; 0x24
 800c5fa:	881b      	ldrh	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d117      	bne.n	800c630 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c600:	6839      	ldr	r1, [r7, #0]
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fbc0 	bl	800cd88 <USBD_CtlError>
                  break;
 800c608:	e054      	b.n	800c6b4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c60a:	7bbb      	ldrb	r3, [r7, #14]
 800c60c:	f003 020f 	and.w	r2, r3, #15
 800c610:	6879      	ldr	r1, [r7, #4]
 800c612:	4613      	mov	r3, r2
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	4413      	add	r3, r2
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	440b      	add	r3, r1
 800c61c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c620:	881b      	ldrh	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d104      	bne.n	800c630 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fbad 	bl	800cd88 <USBD_CtlError>
                  break;
 800c62e:	e041      	b.n	800c6b4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c634:	2b00      	cmp	r3, #0
 800c636:	da0b      	bge.n	800c650 <USBD_StdEPReq+0x23e>
 800c638:	7bbb      	ldrb	r3, [r7, #14]
 800c63a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c63e:	4613      	mov	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4413      	add	r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	3310      	adds	r3, #16
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	4413      	add	r3, r2
 800c64c:	3304      	adds	r3, #4
 800c64e:	e00b      	b.n	800c668 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c650:	7bbb      	ldrb	r3, [r7, #14]
 800c652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c656:	4613      	mov	r3, r2
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	4413      	add	r3, r2
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	4413      	add	r3, r2
 800c666:	3304      	adds	r3, #4
 800c668:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c66a:	7bbb      	ldrb	r3, [r7, #14]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d002      	beq.n	800c676 <USBD_StdEPReq+0x264>
 800c670:	7bbb      	ldrb	r3, [r7, #14]
 800c672:	2b80      	cmp	r3, #128	; 0x80
 800c674:	d103      	bne.n	800c67e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	2200      	movs	r2, #0
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	e00e      	b.n	800c69c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c67e:	7bbb      	ldrb	r3, [r7, #14]
 800c680:	4619      	mov	r1, r3
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f004 ffa4 	bl	80115d0 <USBD_LL_IsStallEP>
 800c688:	4603      	mov	r3, r0
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d003      	beq.n	800c696 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	2201      	movs	r2, #1
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	e002      	b.n	800c69c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	2200      	movs	r2, #0
 800c69a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	2202      	movs	r2, #2
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 fbe1 	bl	800ce6a <USBD_CtlSendData>
              break;
 800c6a8:	e004      	b.n	800c6b4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c6aa:	6839      	ldr	r1, [r7, #0]
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 fb6b 	bl	800cd88 <USBD_CtlError>
              break;
 800c6b2:	bf00      	nop
          }
          break;
 800c6b4:	e004      	b.n	800c6c0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 fb65 	bl	800cd88 <USBD_CtlError>
          break;
 800c6be:	bf00      	nop
      }
      break;
 800c6c0:	e004      	b.n	800c6cc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c6c2:	6839      	ldr	r1, [r7, #0]
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 fb5f 	bl	800cd88 <USBD_CtlError>
      break;
 800c6ca:	bf00      	nop
  }

  return ret;
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3710      	adds	r7, #16
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
	...

0800c6d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	885b      	ldrh	r3, [r3, #2]
 800c6f2:	0a1b      	lsrs	r3, r3, #8
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	2b0e      	cmp	r3, #14
 800c6fa:	f200 8152 	bhi.w	800c9a2 <USBD_GetDescriptor+0x2ca>
 800c6fe:	a201      	add	r2, pc, #4	; (adr r2, 800c704 <USBD_GetDescriptor+0x2c>)
 800c700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c704:	0800c775 	.word	0x0800c775
 800c708:	0800c78d 	.word	0x0800c78d
 800c70c:	0800c7cd 	.word	0x0800c7cd
 800c710:	0800c9a3 	.word	0x0800c9a3
 800c714:	0800c9a3 	.word	0x0800c9a3
 800c718:	0800c943 	.word	0x0800c943
 800c71c:	0800c96f 	.word	0x0800c96f
 800c720:	0800c9a3 	.word	0x0800c9a3
 800c724:	0800c9a3 	.word	0x0800c9a3
 800c728:	0800c9a3 	.word	0x0800c9a3
 800c72c:	0800c9a3 	.word	0x0800c9a3
 800c730:	0800c9a3 	.word	0x0800c9a3
 800c734:	0800c9a3 	.word	0x0800c9a3
 800c738:	0800c9a3 	.word	0x0800c9a3
 800c73c:	0800c741 	.word	0x0800c741
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c746:	69db      	ldr	r3, [r3, #28]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00b      	beq.n	800c764 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c752:	69db      	ldr	r3, [r3, #28]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	7c12      	ldrb	r2, [r2, #16]
 800c758:	f107 0108 	add.w	r1, r7, #8
 800c75c:	4610      	mov	r0, r2
 800c75e:	4798      	blx	r3
 800c760:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c762:	e126      	b.n	800c9b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c764:	6839      	ldr	r1, [r7, #0]
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 fb0e 	bl	800cd88 <USBD_CtlError>
        err++;
 800c76c:	7afb      	ldrb	r3, [r7, #11]
 800c76e:	3301      	adds	r3, #1
 800c770:	72fb      	strb	r3, [r7, #11]
      break;
 800c772:	e11e      	b.n	800c9b2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	7c12      	ldrb	r2, [r2, #16]
 800c780:	f107 0108 	add.w	r1, r7, #8
 800c784:	4610      	mov	r0, r2
 800c786:	4798      	blx	r3
 800c788:	60f8      	str	r0, [r7, #12]
      break;
 800c78a:	e112      	b.n	800c9b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	7c1b      	ldrb	r3, [r3, #16]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10d      	bne.n	800c7b0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c79c:	f107 0208 	add.w	r2, r7, #8
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	4798      	blx	r3
 800c7a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	2202      	movs	r2, #2
 800c7ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c7ae:	e100      	b.n	800c9b2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	f107 0208 	add.w	r2, r7, #8
 800c7bc:	4610      	mov	r0, r2
 800c7be:	4798      	blx	r3
 800c7c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	2202      	movs	r2, #2
 800c7c8:	701a      	strb	r2, [r3, #0]
      break;
 800c7ca:	e0f2      	b.n	800c9b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	885b      	ldrh	r3, [r3, #2]
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2b05      	cmp	r3, #5
 800c7d4:	f200 80ac 	bhi.w	800c930 <USBD_GetDescriptor+0x258>
 800c7d8:	a201      	add	r2, pc, #4	; (adr r2, 800c7e0 <USBD_GetDescriptor+0x108>)
 800c7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7de:	bf00      	nop
 800c7e0:	0800c7f9 	.word	0x0800c7f9
 800c7e4:	0800c82d 	.word	0x0800c82d
 800c7e8:	0800c861 	.word	0x0800c861
 800c7ec:	0800c895 	.word	0x0800c895
 800c7f0:	0800c8c9 	.word	0x0800c8c9
 800c7f4:	0800c8fd 	.word	0x0800c8fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00b      	beq.n	800c81c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	7c12      	ldrb	r2, [r2, #16]
 800c810:	f107 0108 	add.w	r1, r7, #8
 800c814:	4610      	mov	r0, r2
 800c816:	4798      	blx	r3
 800c818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c81a:	e091      	b.n	800c940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fab2 	bl	800cd88 <USBD_CtlError>
            err++;
 800c824:	7afb      	ldrb	r3, [r7, #11]
 800c826:	3301      	adds	r3, #1
 800c828:	72fb      	strb	r3, [r7, #11]
          break;
 800c82a:	e089      	b.n	800c940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00b      	beq.n	800c850 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	7c12      	ldrb	r2, [r2, #16]
 800c844:	f107 0108 	add.w	r1, r7, #8
 800c848:	4610      	mov	r0, r2
 800c84a:	4798      	blx	r3
 800c84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c84e:	e077      	b.n	800c940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fa98 	bl	800cd88 <USBD_CtlError>
            err++;
 800c858:	7afb      	ldrb	r3, [r7, #11]
 800c85a:	3301      	adds	r3, #1
 800c85c:	72fb      	strb	r3, [r7, #11]
          break;
 800c85e:	e06f      	b.n	800c940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00b      	beq.n	800c884 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	7c12      	ldrb	r2, [r2, #16]
 800c878:	f107 0108 	add.w	r1, r7, #8
 800c87c:	4610      	mov	r0, r2
 800c87e:	4798      	blx	r3
 800c880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c882:	e05d      	b.n	800c940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c884:	6839      	ldr	r1, [r7, #0]
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 fa7e 	bl	800cd88 <USBD_CtlError>
            err++;
 800c88c:	7afb      	ldrb	r3, [r7, #11]
 800c88e:	3301      	adds	r3, #1
 800c890:	72fb      	strb	r3, [r7, #11]
          break;
 800c892:	e055      	b.n	800c940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00b      	beq.n	800c8b8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8a6:	691b      	ldr	r3, [r3, #16]
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	7c12      	ldrb	r2, [r2, #16]
 800c8ac:	f107 0108 	add.w	r1, r7, #8
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	4798      	blx	r3
 800c8b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8b6:	e043      	b.n	800c940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8b8:	6839      	ldr	r1, [r7, #0]
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fa64 	bl	800cd88 <USBD_CtlError>
            err++;
 800c8c0:	7afb      	ldrb	r3, [r7, #11]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c8c6:	e03b      	b.n	800c940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ce:	695b      	ldr	r3, [r3, #20]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00b      	beq.n	800c8ec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8da:	695b      	ldr	r3, [r3, #20]
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	7c12      	ldrb	r2, [r2, #16]
 800c8e0:	f107 0108 	add.w	r1, r7, #8
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4798      	blx	r3
 800c8e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ea:	e029      	b.n	800c940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8ec:	6839      	ldr	r1, [r7, #0]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fa4a 	bl	800cd88 <USBD_CtlError>
            err++;
 800c8f4:	7afb      	ldrb	r3, [r7, #11]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8fa:	e021      	b.n	800c940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00b      	beq.n	800c920 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c90e:	699b      	ldr	r3, [r3, #24]
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	7c12      	ldrb	r2, [r2, #16]
 800c914:	f107 0108 	add.w	r1, r7, #8
 800c918:	4610      	mov	r0, r2
 800c91a:	4798      	blx	r3
 800c91c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c91e:	e00f      	b.n	800c940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fa30 	bl	800cd88 <USBD_CtlError>
            err++;
 800c928:	7afb      	ldrb	r3, [r7, #11]
 800c92a:	3301      	adds	r3, #1
 800c92c:	72fb      	strb	r3, [r7, #11]
          break;
 800c92e:	e007      	b.n	800c940 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c930:	6839      	ldr	r1, [r7, #0]
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 fa28 	bl	800cd88 <USBD_CtlError>
          err++;
 800c938:	7afb      	ldrb	r3, [r7, #11]
 800c93a:	3301      	adds	r3, #1
 800c93c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c93e:	bf00      	nop
      }
      break;
 800c940:	e037      	b.n	800c9b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	7c1b      	ldrb	r3, [r3, #16]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d109      	bne.n	800c95e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c952:	f107 0208 	add.w	r2, r7, #8
 800c956:	4610      	mov	r0, r2
 800c958:	4798      	blx	r3
 800c95a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c95c:	e029      	b.n	800c9b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c95e:	6839      	ldr	r1, [r7, #0]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fa11 	bl	800cd88 <USBD_CtlError>
        err++;
 800c966:	7afb      	ldrb	r3, [r7, #11]
 800c968:	3301      	adds	r3, #1
 800c96a:	72fb      	strb	r3, [r7, #11]
      break;
 800c96c:	e021      	b.n	800c9b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	7c1b      	ldrb	r3, [r3, #16]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10d      	bne.n	800c992 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97e:	f107 0208 	add.w	r2, r7, #8
 800c982:	4610      	mov	r0, r2
 800c984:	4798      	blx	r3
 800c986:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	3301      	adds	r3, #1
 800c98c:	2207      	movs	r2, #7
 800c98e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c990:	e00f      	b.n	800c9b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c992:	6839      	ldr	r1, [r7, #0]
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 f9f7 	bl	800cd88 <USBD_CtlError>
        err++;
 800c99a:	7afb      	ldrb	r3, [r7, #11]
 800c99c:	3301      	adds	r3, #1
 800c99e:	72fb      	strb	r3, [r7, #11]
      break;
 800c9a0:	e007      	b.n	800c9b2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c9a2:	6839      	ldr	r1, [r7, #0]
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 f9ef 	bl	800cd88 <USBD_CtlError>
      err++;
 800c9aa:	7afb      	ldrb	r3, [r7, #11]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	72fb      	strb	r3, [r7, #11]
      break;
 800c9b0:	bf00      	nop
  }

  if (err != 0U)
 800c9b2:	7afb      	ldrb	r3, [r7, #11]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d11e      	bne.n	800c9f6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	88db      	ldrh	r3, [r3, #6]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d016      	beq.n	800c9ee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c9c0:	893b      	ldrh	r3, [r7, #8]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00e      	beq.n	800c9e4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	88da      	ldrh	r2, [r3, #6]
 800c9ca:	893b      	ldrh	r3, [r7, #8]
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	bf28      	it	cs
 800c9d0:	4613      	movcs	r3, r2
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9d6:	893b      	ldrh	r3, [r7, #8]
 800c9d8:	461a      	mov	r2, r3
 800c9da:	68f9      	ldr	r1, [r7, #12]
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 fa44 	bl	800ce6a <USBD_CtlSendData>
 800c9e2:	e009      	b.n	800c9f8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c9e4:	6839      	ldr	r1, [r7, #0]
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f9ce 	bl	800cd88 <USBD_CtlError>
 800c9ec:	e004      	b.n	800c9f8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 fa95 	bl	800cf1e <USBD_CtlSendStatus>
 800c9f4:	e000      	b.n	800c9f8 <USBD_GetDescriptor+0x320>
    return;
 800c9f6:	bf00      	nop
  }
}
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop

0800ca00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	889b      	ldrh	r3, [r3, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d131      	bne.n	800ca76 <USBD_SetAddress+0x76>
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	88db      	ldrh	r3, [r3, #6]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d12d      	bne.n	800ca76 <USBD_SetAddress+0x76>
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	885b      	ldrh	r3, [r3, #2]
 800ca1e:	2b7f      	cmp	r3, #127	; 0x7f
 800ca20:	d829      	bhi.n	800ca76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	885b      	ldrh	r3, [r3, #2]
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b03      	cmp	r3, #3
 800ca38:	d104      	bne.n	800ca44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f9a3 	bl	800cd88 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca42:	e01d      	b.n	800ca80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	7bfa      	ldrb	r2, [r7, #15]
 800ca48:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca4c:	7bfb      	ldrb	r3, [r7, #15]
 800ca4e:	4619      	mov	r1, r3
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f004 fdea 	bl	801162a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 fa61 	bl	800cf1e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca5c:	7bfb      	ldrb	r3, [r7, #15]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d004      	beq.n	800ca6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2202      	movs	r2, #2
 800ca66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca6a:	e009      	b.n	800ca80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2201      	movs	r2, #1
 800ca70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca74:	e004      	b.n	800ca80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 f985 	bl	800cd88 <USBD_CtlError>
  }
}
 800ca7e:	bf00      	nop
 800ca80:	bf00      	nop
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca92:	2300      	movs	r3, #0
 800ca94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	885b      	ldrh	r3, [r3, #2]
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	4b4c      	ldr	r3, [pc, #304]	; (800cbd0 <USBD_SetConfig+0x148>)
 800ca9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800caa0:	4b4b      	ldr	r3, [pc, #300]	; (800cbd0 <USBD_SetConfig+0x148>)
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d905      	bls.n	800cab4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800caa8:	6839      	ldr	r1, [r7, #0]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 f96c 	bl	800cd88 <USBD_CtlError>
    return USBD_FAIL;
 800cab0:	2303      	movs	r3, #3
 800cab2:	e088      	b.n	800cbc6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	2b02      	cmp	r3, #2
 800cabe:	d002      	beq.n	800cac6 <USBD_SetConfig+0x3e>
 800cac0:	2b03      	cmp	r3, #3
 800cac2:	d025      	beq.n	800cb10 <USBD_SetConfig+0x88>
 800cac4:	e071      	b.n	800cbaa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cac6:	4b42      	ldr	r3, [pc, #264]	; (800cbd0 <USBD_SetConfig+0x148>)
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d01c      	beq.n	800cb08 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cace:	4b40      	ldr	r3, [pc, #256]	; (800cbd0 <USBD_SetConfig+0x148>)
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	461a      	mov	r2, r3
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cad8:	4b3d      	ldr	r3, [pc, #244]	; (800cbd0 <USBD_SetConfig+0x148>)
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7ff f992 	bl	800be08 <USBD_SetClassConfig>
 800cae4:	4603      	mov	r3, r0
 800cae6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cae8:	7bfb      	ldrb	r3, [r7, #15]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d004      	beq.n	800caf8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800caee:	6839      	ldr	r1, [r7, #0]
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 f949 	bl	800cd88 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800caf6:	e065      	b.n	800cbc4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fa10 	bl	800cf1e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2203      	movs	r2, #3
 800cb02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb06:	e05d      	b.n	800cbc4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fa08 	bl	800cf1e <USBD_CtlSendStatus>
      break;
 800cb0e:	e059      	b.n	800cbc4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb10:	4b2f      	ldr	r3, [pc, #188]	; (800cbd0 <USBD_SetConfig+0x148>)
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d112      	bne.n	800cb3e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cb20:	4b2b      	ldr	r3, [pc, #172]	; (800cbd0 <USBD_SetConfig+0x148>)
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	461a      	mov	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb2a:	4b29      	ldr	r3, [pc, #164]	; (800cbd0 <USBD_SetConfig+0x148>)
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f7ff f985 	bl	800be40 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f9f1 	bl	800cf1e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb3c:	e042      	b.n	800cbc4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cb3e:	4b24      	ldr	r3, [pc, #144]	; (800cbd0 <USBD_SetConfig+0x148>)
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	461a      	mov	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d02a      	beq.n	800cba2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	4619      	mov	r1, r3
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f7ff f973 	bl	800be40 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb5a:	4b1d      	ldr	r3, [pc, #116]	; (800cbd0 <USBD_SetConfig+0x148>)
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb64:	4b1a      	ldr	r3, [pc, #104]	; (800cbd0 <USBD_SetConfig+0x148>)
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	4619      	mov	r1, r3
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f7ff f94c 	bl	800be08 <USBD_SetClassConfig>
 800cb70:	4603      	mov	r3, r0
 800cb72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00f      	beq.n	800cb9a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 f903 	bl	800cd88 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff f958 	bl	800be40 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2202      	movs	r2, #2
 800cb94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb98:	e014      	b.n	800cbc4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f9bf 	bl	800cf1e <USBD_CtlSendStatus>
      break;
 800cba0:	e010      	b.n	800cbc4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f9bb 	bl	800cf1e <USBD_CtlSendStatus>
      break;
 800cba8:	e00c      	b.n	800cbc4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cbaa:	6839      	ldr	r1, [r7, #0]
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f8eb 	bl	800cd88 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbb2:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <USBD_SetConfig+0x148>)
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f7ff f941 	bl	800be40 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cbbe:	2303      	movs	r3, #3
 800cbc0:	73fb      	strb	r3, [r7, #15]
      break;
 800cbc2:	bf00      	nop
  }

  return ret;
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	200004f0 	.word	0x200004f0

0800cbd4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	88db      	ldrh	r3, [r3, #6]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d004      	beq.n	800cbf0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cbe6:	6839      	ldr	r1, [r7, #0]
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 f8cd 	bl	800cd88 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cbee:	e023      	b.n	800cc38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	dc02      	bgt.n	800cc02 <USBD_GetConfig+0x2e>
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	dc03      	bgt.n	800cc08 <USBD_GetConfig+0x34>
 800cc00:	e015      	b.n	800cc2e <USBD_GetConfig+0x5a>
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d00b      	beq.n	800cc1e <USBD_GetConfig+0x4a>
 800cc06:	e012      	b.n	800cc2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	3308      	adds	r3, #8
 800cc12:	2201      	movs	r2, #1
 800cc14:	4619      	mov	r1, r3
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f927 	bl	800ce6a <USBD_CtlSendData>
        break;
 800cc1c:	e00c      	b.n	800cc38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	3304      	adds	r3, #4
 800cc22:	2201      	movs	r2, #1
 800cc24:	4619      	mov	r1, r3
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f91f 	bl	800ce6a <USBD_CtlSendData>
        break;
 800cc2c:	e004      	b.n	800cc38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 f8a9 	bl	800cd88 <USBD_CtlError>
        break;
 800cc36:	bf00      	nop
}
 800cc38:	bf00      	nop
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	3b01      	subs	r3, #1
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	d81e      	bhi.n	800cc96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	88db      	ldrh	r3, [r3, #6]
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d004      	beq.n	800cc6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc60:	6839      	ldr	r1, [r7, #0]
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f890 	bl	800cd88 <USBD_CtlError>
        break;
 800cc68:	e01a      	b.n	800cca0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d005      	beq.n	800cc86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	f043 0202 	orr.w	r2, r3, #2
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	330c      	adds	r3, #12
 800cc8a:	2202      	movs	r2, #2
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 f8eb 	bl	800ce6a <USBD_CtlSendData>
      break;
 800cc94:	e004      	b.n	800cca0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc96:	6839      	ldr	r1, [r7, #0]
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 f875 	bl	800cd88 <USBD_CtlError>
      break;
 800cc9e:	bf00      	nop
  }
}
 800cca0:	bf00      	nop
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	885b      	ldrh	r3, [r3, #2]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d106      	bne.n	800ccc8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 f92b 	bl	800cf1e <USBD_CtlSendStatus>
  }
}
 800ccc8:	bf00      	nop
 800ccca:	3708      	adds	r7, #8
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	3b01      	subs	r3, #1
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d80b      	bhi.n	800cd00 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	885b      	ldrh	r3, [r3, #2]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d10c      	bne.n	800cd0a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 f910 	bl	800cf1e <USBD_CtlSendStatus>
      }
      break;
 800ccfe:	e004      	b.n	800cd0a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd00:	6839      	ldr	r1, [r7, #0]
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 f840 	bl	800cd88 <USBD_CtlError>
      break;
 800cd08:	e000      	b.n	800cd0c <USBD_ClrFeature+0x3c>
      break;
 800cd0a:	bf00      	nop
  }
}
 800cd0c:	bf00      	nop
 800cd0e:	3708      	adds	r7, #8
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	781a      	ldrb	r2, [r3, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	781a      	ldrb	r2, [r3, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f7ff fa92 	bl	800c268 <SWAPBYTE>
 800cd44:	4603      	mov	r3, r0
 800cd46:	461a      	mov	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	3301      	adds	r3, #1
 800cd56:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f7ff fa85 	bl	800c268 <SWAPBYTE>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	461a      	mov	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	f7ff fa78 	bl	800c268 <SWAPBYTE>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	80da      	strh	r2, [r3, #6]
}
 800cd80:	bf00      	nop
 800cd82:	3710      	adds	r7, #16
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd92:	2180      	movs	r1, #128	; 0x80
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f004 fbdd 	bl	8011554 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f004 fbd9 	bl	8011554 <USBD_LL_StallEP>
}
 800cda2:	bf00      	nop
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b086      	sub	sp, #24
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	60f8      	str	r0, [r7, #12]
 800cdb2:	60b9      	str	r1, [r7, #8]
 800cdb4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d036      	beq.n	800ce2e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cdc4:	6938      	ldr	r0, [r7, #16]
 800cdc6:	f000 f836 	bl	800ce36 <USBD_GetLen>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	3301      	adds	r3, #1
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	005b      	lsls	r3, r3, #1
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	4413      	add	r3, r2
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	7812      	ldrb	r2, [r2, #0]
 800cde2:	701a      	strb	r2, [r3, #0]
  idx++;
 800cde4:	7dfb      	ldrb	r3, [r7, #23]
 800cde6:	3301      	adds	r3, #1
 800cde8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cdea:	7dfb      	ldrb	r3, [r7, #23]
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	4413      	add	r3, r2
 800cdf0:	2203      	movs	r2, #3
 800cdf2:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdf4:	7dfb      	ldrb	r3, [r7, #23]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cdfa:	e013      	b.n	800ce24 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cdfc:	7dfb      	ldrb	r3, [r7, #23]
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	4413      	add	r3, r2
 800ce02:	693a      	ldr	r2, [r7, #16]
 800ce04:	7812      	ldrb	r2, [r2, #0]
 800ce06:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	613b      	str	r3, [r7, #16]
    idx++;
 800ce0e:	7dfb      	ldrb	r3, [r7, #23]
 800ce10:	3301      	adds	r3, #1
 800ce12:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce14:	7dfb      	ldrb	r3, [r7, #23]
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	4413      	add	r3, r2
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce1e:	7dfb      	ldrb	r3, [r7, #23]
 800ce20:	3301      	adds	r3, #1
 800ce22:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1e7      	bne.n	800cdfc <USBD_GetString+0x52>
 800ce2c:	e000      	b.n	800ce30 <USBD_GetString+0x86>
    return;
 800ce2e:	bf00      	nop
  }
}
 800ce30:	3718      	adds	r7, #24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce36:	b480      	push	{r7}
 800ce38:	b085      	sub	sp, #20
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce46:	e005      	b.n	800ce54 <USBD_GetLen+0x1e>
  {
    len++;
 800ce48:	7bfb      	ldrb	r3, [r7, #15]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	3301      	adds	r3, #1
 800ce52:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1f5      	bne.n	800ce48 <USBD_GetLen+0x12>
  }

  return len;
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b084      	sub	sp, #16
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	60f8      	str	r0, [r7, #12]
 800ce72:	60b9      	str	r1, [r7, #8]
 800ce74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2202      	movs	r2, #2
 800ce7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	68ba      	ldr	r2, [r7, #8]
 800ce8e:	2100      	movs	r1, #0
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	f004 fbe9 	bl	8011668 <USBD_LL_Transmit>

  return USBD_OK;
 800ce96:	2300      	movs	r3, #0
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	68ba      	ldr	r2, [r7, #8]
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f004 fbd8 	bl	8011668 <USBD_LL_Transmit>

  return USBD_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b084      	sub	sp, #16
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	60f8      	str	r0, [r7, #12]
 800ceca:	60b9      	str	r1, [r7, #8]
 800cecc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2203      	movs	r2, #3
 800ced2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	68ba      	ldr	r2, [r7, #8]
 800ceea:	2100      	movs	r1, #0
 800ceec:	68f8      	ldr	r0, [r7, #12]
 800ceee:	f004 fbdc 	bl	80116aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	f004 fbcb 	bl	80116aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3710      	adds	r7, #16
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b082      	sub	sp, #8
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2204      	movs	r2, #4
 800cf2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf2e:	2300      	movs	r3, #0
 800cf30:	2200      	movs	r2, #0
 800cf32:	2100      	movs	r1, #0
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f004 fb97 	bl	8011668 <USBD_LL_Transmit>

  return USBD_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2205      	movs	r2, #5
 800cf50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf54:	2300      	movs	r3, #0
 800cf56:	2200      	movs	r2, #0
 800cf58:	2100      	movs	r1, #0
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f004 fba5 	bl	80116aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
	...

0800cf6c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b085      	sub	sp, #20
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	4603      	mov	r3, r0
 800cf74:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800cf76:	4b0f      	ldr	r3, [pc, #60]	; (800cfb4 <OTP_Read+0x48>)
 800cf78:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800cf7a:	e002      	b.n	800cf82 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	3b08      	subs	r3, #8
 800cf80:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	3307      	adds	r3, #7
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	79fa      	ldrb	r2, [r7, #7]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d003      	beq.n	800cf96 <OTP_Read+0x2a>
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	4a09      	ldr	r2, [pc, #36]	; (800cfb8 <OTP_Read+0x4c>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d1f2      	bne.n	800cf7c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	3307      	adds	r3, #7
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	79fa      	ldrb	r2, [r7, #7]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d001      	beq.n	800cfa6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3714      	adds	r7, #20
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr
 800cfb4:	1fff73f8 	.word	0x1fff73f8
 800cfb8:	1fff7000 	.word	0x1fff7000

0800cfbc <_ZN15Adafruit_AS7341C1Ev>:

/**
 * @brief Construct a new Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::Adafruit_AS7341(void) {
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	4a09      	ldr	r2, [pc, #36]	; (800cfec <_ZN15Adafruit_AS7341C1Ev+0x30>)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	601a      	str	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	711a      	strb	r2, [r3, #4]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	609a      	str	r2, [r3, #8]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	731a      	strb	r2, [r3, #12]
}
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	370c      	adds	r7, #12
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	0801250c 	.word	0x0801250c

0800cff0 <_ZN15Adafruit_AS7341D1Ev>:

/**
 * @brief Destroy the Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::~Adafruit_AS7341(void) {
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	4a04      	ldr	r2, [pc, #16]	; (800d00c <_ZN15Adafruit_AS7341D1Ev+0x1c>)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	601a      	str	r2, [r3, #0]
	//   if (temp_sensor)
	//     delete temp_sensor;
	//   if (pressure_sensor)
	//     delete pressure_sensor;
}
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	4618      	mov	r0, r3
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	0801250c 	.word	0x0801250c

0800d010 <_ZN15Adafruit_AS73415_initEl>:

/*!  @brief Initializer for post i2c/spi init
 *   @param sensor_id Optional unique ID for the sensor set
 *   @returns True if chip identified and initialized
 */
bool Adafruit_AS7341::_init(int32_t sensor_id) {
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]

	// make sure we're talking to the right chip
	if ((readRegisterByte(AS7341_WHOAMI) & 0xFC) != (AS7341_CHIP_ID << 2)) {
 800d01a:	2192      	movs	r1, #146	; 0x92
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 f882 	bl	800d126 <_ZN15Adafruit_AS734116readRegisterByteEt>
 800d022:	4603      	mov	r3, r0
 800d024:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800d028:	2b24      	cmp	r3, #36	; 0x24
 800d02a:	bf14      	ite	ne
 800d02c:	2301      	movne	r3, #1
 800d02e:	2300      	moveq	r3, #0
 800d030:	b2db      	uxtb	r3, r3
 800d032:	2b00      	cmp	r3, #0
 800d034:	d001      	beq.n	800d03a <_ZN15Adafruit_AS73415_initEl+0x2a>
		return false;
 800d036:	2300      	movs	r3, #0
 800d038:	e004      	b.n	800d044 <_ZN15Adafruit_AS73415_initEl+0x34>
	}

	powerEnable(true);
 800d03a:	2101      	movs	r1, #1
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 f805 	bl	800d04c <_ZN15Adafruit_AS734111powerEnableEb>
	return true;
 800d042:	2301      	movs	r3, #1
}
 800d044:	4618      	mov	r0, r3
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <_ZN15Adafruit_AS734111powerEnableEb>:
/**
 * @brief Sets the power state of the sensor
 *
 * @param enable_power true: on false: off
 */
void Adafruit_AS7341::powerEnable(bool enable_power) {
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	460b      	mov	r3, r1
 800d056:	70fb      	strb	r3, [r7, #3]
	uint8_t enable_reg = readRegisterByte(AS7341_ENABLE);
 800d058:	2180      	movs	r1, #128	; 0x80
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f863 	bl	800d126 <_ZN15Adafruit_AS734116readRegisterByteEt>
 800d060:	4603      	mov	r3, r0
 800d062:	73fb      	strb	r3, [r7, #15]
	enable_reg = modifyBitInByte(enable_reg, (uint8_t) enable_power, 0);
 800d064:	78fa      	ldrb	r2, [r7, #3]
 800d066:	7bf9      	ldrb	r1, [r7, #15]
 800d068:	2300      	movs	r3, #0
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 f833 	bl	800d0d6 <_ZN15Adafruit_AS734115modifyBitInByteEhhh>
 800d070:	4603      	mov	r3, r0
 800d072:	73fb      	strb	r3, [r7, #15]
	writeRegisterByte(AS7341_ENABLE, enable_reg);
 800d074:	7bfb      	ldrb	r3, [r7, #15]
 800d076:	461a      	mov	r2, r3
 800d078:	2180      	movs	r1, #128	; 0x80
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f804 	bl	800d088 <_ZN15Adafruit_AS734117writeRegisterByteEhh>
}
 800d080:	bf00      	nop
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <_ZN15Adafruit_AS734117writeRegisterByteEhh>:
	} else {
		return false;
	}
}

bool Adafruit_AS7341::writeRegisterByte(uint8_t mem_addr, uint8_t val) {
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af04      	add	r7, sp, #16
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	460b      	mov	r3, r1
 800d092:	70fb      	strb	r3, [r7, #3]
 800d094:	4613      	mov	r3, r2
 800d096:	70bb      	strb	r3, [r7, #2]
	if (HAL_OK
			== HAL_I2C_Mem_Write(i2c_han, i2c_addr, mem_addr, 1, &val, 1, 10)) {
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6898      	ldr	r0, [r3, #8]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	7b1b      	ldrb	r3, [r3, #12]
 800d0a0:	b299      	uxth	r1, r3
 800d0a2:	78fb      	ldrb	r3, [r7, #3]
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	230a      	movs	r3, #10
 800d0a8:	9302      	str	r3, [sp, #8]
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	9301      	str	r3, [sp, #4]
 800d0ae:	1cbb      	adds	r3, r7, #2
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	f7f5 fe36 	bl	8002d24 <HAL_I2C_Mem_Write>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	bf0c      	ite	eq
 800d0be:	2301      	moveq	r3, #1
 800d0c0:	2300      	movne	r3, #0
 800d0c2:	b2db      	uxtb	r3, r3
	if (HAL_OK
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d001      	beq.n	800d0cc <_ZN15Adafruit_AS734117writeRegisterByteEhh+0x44>
		return true;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e000      	b.n	800d0ce <_ZN15Adafruit_AS734117writeRegisterByteEhh+0x46>
	} else {
		return false;
 800d0cc:	2300      	movs	r3, #0
	}
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <_ZN15Adafruit_AS734115modifyBitInByteEhhh>:

uint8_t Adafruit_AS7341::modifyBitInByte(uint8_t var, uint8_t value,
		uint8_t pos) {
 800d0d6:	b480      	push	{r7}
 800d0d8:	b085      	sub	sp, #20
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	4608      	mov	r0, r1
 800d0e0:	4611      	mov	r1, r2
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	70fb      	strb	r3, [r7, #3]
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	70bb      	strb	r3, [r7, #2]
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	707b      	strb	r3, [r7, #1]
	uint8_t mask = 1 << pos;
 800d0f0:	787b      	ldrb	r3, [r7, #1]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0f8:	73fb      	strb	r3, [r7, #15]
	return ((var & ~mask) | (value << pos));
 800d0fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0fe:	43db      	mvns	r3, r3
 800d100:	b25a      	sxtb	r2, r3
 800d102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d106:	4013      	ands	r3, r2
 800d108:	b25a      	sxtb	r2, r3
 800d10a:	78b9      	ldrb	r1, [r7, #2]
 800d10c:	787b      	ldrb	r3, [r7, #1]
 800d10e:	fa01 f303 	lsl.w	r3, r1, r3
 800d112:	b25b      	sxtb	r3, r3
 800d114:	4313      	orrs	r3, r2
 800d116:	b25b      	sxtb	r3, r3
 800d118:	b2db      	uxtb	r3, r3
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <_ZN15Adafruit_AS734116readRegisterByteEt>:
	register_value |= value << pos; // and add in the new data

	return writeRegisterByte(reg, register_value);
}

uint8_t Adafruit_AS7341::readRegisterByte(uint16_t mem_addr) {
 800d126:	b580      	push	{r7, lr}
 800d128:	b088      	sub	sp, #32
 800d12a:	af04      	add	r7, sp, #16
 800d12c:	6078      	str	r0, [r7, #4]
 800d12e:	460b      	mov	r3, r1
 800d130:	807b      	strh	r3, [r7, #2]
	uint8_t data;
	HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, &data, 1, 10);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6898      	ldr	r0, [r3, #8]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	7b1b      	ldrb	r3, [r3, #12]
 800d13a:	b299      	uxth	r1, r3
 800d13c:	887a      	ldrh	r2, [r7, #2]
 800d13e:	230a      	movs	r3, #10
 800d140:	9302      	str	r3, [sp, #8]
 800d142:	2301      	movs	r3, #1
 800d144:	9301      	str	r3, [sp, #4]
 800d146:	f107 030f 	add.w	r3, r7, #15
 800d14a:	9300      	str	r3, [sp, #0]
 800d14c:	2301      	movs	r3, #1
 800d14e:	f7f5 fefd 	bl	8002f4c <HAL_I2C_Mem_Read>
	return data;
 800d152:	7bfb      	ldrb	r3, [r7, #15]
}
 800d154:	4618      	mov	r0, r3
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <_ZN8CALIPILE5setupEhP19__I2C_HandleTypeDefh>:
#include "math.h"

#define delay			HAL_Delay
#define I2C_TIMEOUT		100

void CALIPILE::setup(uint8_t i2c_address, I2C_HandleTypeDef *i2c_handle, uint8_t identifier) {
 800d15c:	b480      	push	{r7}
 800d15e:	b085      	sub	sp, #20
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	607a      	str	r2, [r7, #4]
 800d166:	461a      	mov	r2, r3
 800d168:	460b      	mov	r3, r1
 800d16a:	72fb      	strb	r3, [r7, #11]
 800d16c:	4613      	mov	r3, r2
 800d16e:	72bb      	strb	r3, [r7, #10]
	i2c_han = i2c_handle;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	605a      	str	r2, [r3, #4]
	i2c_addr = i2c_address << 1;
 800d176:	7afb      	ldrb	r3, [r7, #11]
 800d178:	005b      	lsls	r3, r3, #1
 800d17a:	b2da      	uxtb	r2, r3
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	721a      	strb	r2, [r3, #8]
	descriptor = identifier;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	7aba      	ldrb	r2, [r7, #10]
 800d184:	701a      	strb	r2, [r3, #0]
}
 800d186:	bf00      	nop
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr

0800d192 <_ZN8CALIPILE4wakeEv>:

void CALIPILE::wake() {
 800d192:	b580      	push	{r7, lr}
 800d194:	b088      	sub	sp, #32
 800d196:	af04      	add	r7, sp, #16
 800d198:	6078      	str	r0, [r7, #4]
//	writeByte(0x00, 0x04, 0x00);  // issue general call and reload command
	uint8_t data = 0;
 800d19a:	2300      	movs	r3, #0
 800d19c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c_han, 0, 0x04, 1, &data, 1, I2C_TIMEOUT);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6858      	ldr	r0, [r3, #4]
 800d1a2:	2364      	movs	r3, #100	; 0x64
 800d1a4:	9302      	str	r3, [sp, #8]
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	9301      	str	r3, [sp, #4]
 800d1aa:	f107 030f 	add.w	r3, r7, #15
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	2204      	movs	r2, #4
 800d1b4:	2100      	movs	r1, #0
 800d1b6:	f7f5 fdb5 	bl	8002d24 <HAL_I2C_Mem_Write>
	delay(1);
 800d1ba:	2001      	movs	r0, #1
 800d1bc:	f7f3 f9e0 	bl	8000580 <HAL_Delay>
}
 800d1c0:	bf00      	nop
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <_ZN8CALIPILE10readEEPROMEv>:

void CALIPILE::readEEPROM()
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	ed2d 8b02 	vpush	{d8}
 800d1ce:	b088      	sub	sp, #32
 800d1d0:	af02      	add	r7, sp, #8
 800d1d2:	6078      	str	r0, [r7, #4]

	uint8_t rawData[2] = {0, 0};
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	81bb      	strh	r3, [r7, #12]
	/* Start of EEPROM operations, just have to do once *************************************************** */
	// Check EEPROM protocol number as a test of I2C communication
	writeByte(i2c_addr, CALIPILE_EEPROM_CONTROL, 0x80);// enable EEPROM read
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	7a19      	ldrb	r1, [r3, #8]
 800d1dc:	2380      	movs	r3, #128	; 0x80
 800d1de:	221f      	movs	r2, #31
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f9e7 	bl	800d5b4 <_ZN8CALIPILE9writeByteEhhh>

	uint8_t c = readByte(i2c_addr, CALIPILE_EEPROM_PROTOCOL);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	7a1b      	ldrb	r3, [r3, #8]
 800d1ea:	2220      	movs	r2, #32
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 f9f7 	bl	800d5e2 <_ZN8CALIPILE8readByteEhh>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	73fb      	strb	r3, [r7, #15]
	//Serial.print("CaliPile EEPROM protocol number is "); //Serial.println(c);
	//Serial.println("CaliPile EEPROM protocol number should be 3");

	uint8_t d = readByte(i2c_addr, CALIPILE_SLAVE_ADDRESS);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	7a1b      	ldrb	r3, [r3, #8]
 800d1fc:	223f      	movs	r2, #63	; 0x3f
 800d1fe:	4619      	mov	r1, r3
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 f9ee 	bl	800d5e2 <_ZN8CALIPILE8readByteEhh>
 800d206:	4603      	mov	r3, r0
 800d208:	73bb      	strb	r3, [r7, #14]
	//Serial.println("CaliPile EEPROM slave address should be 140");
	//Serial.println(" ");

	// Read the EEPROM calibration constants

	_LOOKUP = readByte(i2c_addr, CALIPILE_EEPROM_LOOKUPNUM);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	7a1b      	ldrb	r3, [r3, #8]
 800d20e:	2229      	movs	r2, #41	; 0x29
 800d210:	4619      	mov	r1, r3
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 f9e5 	bl	800d5e2 <_ZN8CALIPILE8readByteEhh>
 800d218:	4603      	mov	r3, r0
 800d21a:	461a      	mov	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	765a      	strb	r2, [r3, #25]
	//Serial.print("CaliPile LookUpNumber is "); //Serial.println(_LOOKUP);

	readBytes(i2c_addr, CALIPILE_EEPROM_PTAT25, 2, &rawData[0]);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	7a19      	ldrb	r1, [r3, #8]
 800d224:	f107 030c 	add.w	r3, r7, #12
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	2302      	movs	r3, #2
 800d22c:	222a      	movs	r2, #42	; 0x2a
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 f9ec 	bl	800d60c <_ZN8CALIPILE9readBytesEhhhPh>
	_PTAT25 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d234:	7b3b      	ldrb	r3, [r7, #12]
 800d236:	021b      	lsls	r3, r3, #8
 800d238:	b21a      	sxth	r2, r3
 800d23a:	7b7b      	ldrb	r3, [r7, #13]
 800d23c:	b21b      	sxth	r3, r3
 800d23e:	4313      	orrs	r3, r2
 800d240:	b21b      	sxth	r3, r3
 800d242:	b29a      	uxth	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	815a      	strh	r2, [r3, #10]
	//Serial.print("CaliPile PTAT25 is "); //Serial.println(_PTAT25);

	readBytes(i2c_addr, CALIPILE_EEPROM_M, 2, &rawData[0]);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	7a19      	ldrb	r1, [r3, #8]
 800d24c:	f107 030c 	add.w	r3, r7, #12
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	2302      	movs	r3, #2
 800d254:	222c      	movs	r2, #44	; 0x2c
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 f9d8 	bl	800d60c <_ZN8CALIPILE9readBytesEhhhPh>
	_M = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d25c:	7b3b      	ldrb	r3, [r7, #12]
 800d25e:	021b      	lsls	r3, r3, #8
 800d260:	b21a      	sxth	r2, r3
 800d262:	7b7b      	ldrb	r3, [r7, #13]
 800d264:	b21b      	sxth	r3, r3
 800d266:	4313      	orrs	r3, r2
 800d268:	b21b      	sxth	r3, r3
 800d26a:	b29a      	uxth	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	819a      	strh	r2, [r3, #12]
	_M /= 100;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	899b      	ldrh	r3, [r3, #12]
 800d274:	4a4f      	ldr	r2, [pc, #316]	; (800d3b4 <_ZN8CALIPILE10readEEPROMEv+0x1ec>)
 800d276:	fba2 2303 	umull	r2, r3, r2, r3
 800d27a:	095b      	lsrs	r3, r3, #5
 800d27c:	b29a      	uxth	r2, r3
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	819a      	strh	r2, [r3, #12]
	//Serial.print("CaliPile M is "); //Serial.println(_M);

	readBytes(i2c_addr, CALIPILE_EEPROM_U0, 2, &rawData[0]);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	7a19      	ldrb	r1, [r3, #8]
 800d286:	f107 030c 	add.w	r3, r7, #12
 800d28a:	9300      	str	r3, [sp, #0]
 800d28c:	2302      	movs	r3, #2
 800d28e:	222e      	movs	r2, #46	; 0x2e
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 f9bb 	bl	800d60c <_ZN8CALIPILE9readBytesEhhhPh>
	_U0 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d296:	7b3b      	ldrb	r3, [r7, #12]
 800d298:	021b      	lsls	r3, r3, #8
 800d29a:	b21a      	sxth	r2, r3
 800d29c:	7b7b      	ldrb	r3, [r7, #13]
 800d29e:	b21b      	sxth	r3, r3
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	b21b      	sxth	r3, r3
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	81da      	strh	r2, [r3, #14]
	_U0 += 32768;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	89db      	ldrh	r3, [r3, #14]
 800d2ae:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	81da      	strh	r2, [r3, #14]
	//Serial.print("CaliPile U0 is "); //Serial.println(_U0);

	readBytes(i2c_addr, CALIPILE_EEPROM_UOUT1, 2, &rawData[0]);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	7a19      	ldrb	r1, [r3, #8]
 800d2bc:	f107 030c 	add.w	r3, r7, #12
 800d2c0:	9300      	str	r3, [sp, #0]
 800d2c2:	2302      	movs	r3, #2
 800d2c4:	2230      	movs	r2, #48	; 0x30
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f9a0 	bl	800d60c <_ZN8CALIPILE9readBytesEhhhPh>
	_UOUT1 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d2cc:	7b3b      	ldrb	r3, [r7, #12]
 800d2ce:	021b      	lsls	r3, r3, #8
 800d2d0:	7b7a      	ldrb	r2, [r7, #13]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	615a      	str	r2, [r3, #20]
	_UOUT1 *= 2;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	695b      	ldr	r3, [r3, #20]
 800d2de:	005a      	lsls	r2, r3, #1
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	615a      	str	r2, [r3, #20]
	//Serial.print("CaliPile UOUT1 is "); //Serial.println(_UOUT1);

	_TOBJ1 = readByte(i2c_addr, CALIPILE_EEPROM_TOBJ1);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	7a1b      	ldrb	r3, [r3, #8]
 800d2e8:	2232      	movs	r2, #50	; 0x32
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 f978 	bl	800d5e2 <_ZN8CALIPILE8readByteEhh>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	761a      	strb	r2, [r3, #24]
	//Serial.print("CaliPile TOBJ1 is "); //Serial.println(_TOBJ1);

	readBytes(i2c_addr, CALIPILE_EEPROM_CHECKSUM, 2, &rawData[0]);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	7a19      	ldrb	r1, [r3, #8]
 800d2fe:	f107 030c 	add.w	r3, r7, #12
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	2302      	movs	r3, #2
 800d306:	2221      	movs	r2, #33	; 0x21
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 f97f 	bl	800d60c <_ZN8CALIPILE9readBytesEhhhPh>
	_CHECKSUM = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d30e:	7b3b      	ldrb	r3, [r7, #12]
 800d310:	021b      	lsls	r3, r3, #8
 800d312:	b21a      	sxth	r2, r3
 800d314:	7b7b      	ldrb	r3, [r7, #13]
 800d316:	b21b      	sxth	r3, r3
 800d318:	4313      	orrs	r3, r2
 800d31a:	b21b      	sxth	r3, r3
 800d31c:	b29a      	uxth	r2, r3
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	821a      	strh	r2, [r3, #16]
	//Serial.print("CaliPile CHECKSUM is supposed to be "); //Serial.println(_CHECKSUM);

	// Calculate the checksum
	uint16_t sum = 0;
 800d322:	2300      	movs	r3, #0
 800d324:	82fb      	strh	r3, [r7, #22]
	for(int ii = 35; ii < 64; ii++)
 800d326:	2323      	movs	r3, #35	; 0x23
 800d328:	613b      	str	r3, [r7, #16]
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	2b3f      	cmp	r3, #63	; 0x3f
 800d32e:	dc10      	bgt.n	800d352 <_ZN8CALIPILE10readEEPROMEv+0x18a>
	{
		sum += readByte(i2c_addr, ii);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	7a1b      	ldrb	r3, [r3, #8]
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	b2d2      	uxtb	r2, r2
 800d338:	4619      	mov	r1, r3
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 f951 	bl	800d5e2 <_ZN8CALIPILE8readByteEhh>
 800d340:	4603      	mov	r3, r0
 800d342:	b29a      	uxth	r2, r3
 800d344:	8afb      	ldrh	r3, [r7, #22]
 800d346:	4413      	add	r3, r2
 800d348:	82fb      	strh	r3, [r7, #22]
	for(int ii = 35; ii < 64; ii++)
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	3301      	adds	r3, #1
 800d34e:	613b      	str	r3, [r7, #16]
 800d350:	e7eb      	b.n	800d32a <_ZN8CALIPILE10readEEPROMEv+0x162>
	}
	//Serial.print("CaliPile CHECKSUM is "); //Serial.println(sum + c);

	writeByte(i2c_addr, CALIPILE_EEPROM_CONTROL, 0x00); // disable EEPROM read
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	7a19      	ldrb	r1, [r3, #8]
 800d356:	2300      	movs	r3, #0
 800d358:	221f      	movs	r2, #31
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f92a 	bl	800d5b4 <_ZN8CALIPILE9writeByteEhhh>
	/* End of EEPROM operations, just have to do once *************************************************** */

	// Construct needed calibration constants (just need to calculate once)
	_k = ( (float) (_UOUT1 - _U0) )/(powf((float)(_TOBJ1 + 273.15f), 3.8f) - powf(25.0f + 273.15f, 3.8f) );
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	695b      	ldr	r3, [r3, #20]
 800d364:	687a      	ldr	r2, [r7, #4]
 800d366:	89d2      	ldrh	r2, [r2, #14]
 800d368:	1a9b      	subs	r3, r3, r2
 800d36a:	ee07 3a90 	vmov	s15, r3
 800d36e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	7e1b      	ldrb	r3, [r3, #24]
 800d376:	ee07 3a90 	vmov	s15, r3
 800d37a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d37e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800d3b8 <_ZN8CALIPILE10readEEPROMEv+0x1f0>
 800d382:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d386:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d3bc <_ZN8CALIPILE10readEEPROMEv+0x1f4>
 800d38a:	eeb0 0a67 	vmov.f32	s0, s15
 800d38e:	f004 fa41 	bl	8011814 <powf>
 800d392:	eef0 7a40 	vmov.f32	s15, s0
 800d396:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800d3c0 <_ZN8CALIPILE10readEEPROMEv+0x1f8>
 800d39a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d39e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800d3a8:	bf00      	nop
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	ecbd 8b02 	vpop	{d8}
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	51eb851f 	.word	0x51eb851f
 800d3b8:	43889333 	.word	0x43889333
 800d3bc:	40733333 	.word	0x40733333
 800d3c0:	4f16b4e3 	.word	0x4f16b4e3

0800d3c4 <_ZN8CALIPILE11initTempThrEt>:
	// select motion threshold
	writeByte(i2c_addr, CALIPILE_TP_PRES_THLD, 0x22);// presence threshold, set at 50 counts
	writeByte(i2c_addr, CALIPILE_TP_MOT_THLD, 0x0A);// motion threshold, set at 10 counts
}

void CALIPILE::initTempThr(uint16_t Tcounts) {
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af02      	add	r7, sp, #8
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	807b      	strh	r3, [r7, #2]
	uint8_t rawData[2] = {0, 0};
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	813b      	strh	r3, [r7, #8]
	// specify the over temperature interrupt threshold (2 bytes)
	writeByte(i2c_addr, CALIPILE_TPOT_THR, Tcounts);// 0x83 means 67,072 counts as threshold
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	7a19      	ldrb	r1, [r3, #8]
 800d3d8:	887b      	ldrh	r3, [r7, #2]
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	221c      	movs	r2, #28
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 f8e8 	bl	800d5b4 <_ZN8CALIPILE9writeByteEhhh>
	writeByte(i2c_addr, (CALIPILE_TPOT_THR + 1), 0x00);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	7a19      	ldrb	r1, [r3, #8]
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	221d      	movs	r2, #29
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 f8e1 	bl	800d5b4 <_ZN8CALIPILE9writeByteEhhh>
	uint8_t temp = readByte(i2c_addr, CALIPILE_SRC_SELECT);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	7a1b      	ldrb	r3, [r3, #8]
 800d3f6:	221a      	movs	r2, #26
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 f8f1 	bl	800d5e2 <_ZN8CALIPILE8readByteEhh>
 800d400:	4603      	mov	r3, r0
 800d402:	73fb      	strb	r3, [r7, #15]
	writeByte(i2c_addr, CALIPILE_SRC_SELECT, temp | 0x10);// interrupt on exceeding threshold
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	7a19      	ldrb	r1, [r3, #8]
 800d408:	7bfb      	ldrb	r3, [r7, #15]
 800d40a:	f043 0310 	orr.w	r3, r3, #16
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	221a      	movs	r2, #26
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 f8ce 	bl	800d5b4 <_ZN8CALIPILE9writeByteEhhh>
	// Verify threshold set
	readBytes(i2c_addr, CALIPILE_TPOT_THR, 2, &rawData[0]);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7a19      	ldrb	r1, [r3, #8]
 800d41c:	f107 0308 	add.w	r3, r7, #8
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	2302      	movs	r3, #2
 800d424:	221c      	movs	r2, #28
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 f8f0 	bl	800d60c <_ZN8CALIPILE9readBytesEhhhPh>
	uint16_t TPOTTHR = ((uint16_t) rawData[0] << 8) | rawData[1];
 800d42c:	7a3b      	ldrb	r3, [r7, #8]
 800d42e:	021b      	lsls	r3, r3, #8
 800d430:	b21a      	sxth	r2, r3
 800d432:	7a7b      	ldrb	r3, [r7, #9]
 800d434:	b21b      	sxth	r3, r3
 800d436:	4313      	orrs	r3, r2
 800d438:	b21b      	sxth	r3, r3
 800d43a:	81bb      	strh	r3, [r7, #12]
	//Serial.print("Overtemp threshold = "); //Serial.println(TPOTTHR * 2);
}
 800d43c:	bf00      	nop
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <_ZN8CALIPILE8getTPAMBEv>:

uint16_t CALIPILE::getTPAMB() {
 800d444:	b580      	push	{r7, lr}
 800d446:	b086      	sub	sp, #24
 800d448:	af02      	add	r7, sp, #8
 800d44a:	6078      	str	r0, [r7, #4]
	uint8_t rawData[2] = {0, 0};
 800d44c:	2300      	movs	r3, #0
 800d44e:	81bb      	strh	r3, [r7, #12]
	readBytes(i2c_addr, CALIPILE_TPAMBIENT, 2, &rawData[0]);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	7a19      	ldrb	r1, [r3, #8]
 800d454:	f107 030c 	add.w	r3, r7, #12
 800d458:	9300      	str	r3, [sp, #0]
 800d45a:	2302      	movs	r3, #2
 800d45c:	2203      	movs	r2, #3
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f000 f8d4 	bl	800d60c <_ZN8CALIPILE9readBytesEhhhPh>
	uint16_t temp = ( (uint16_t)(rawData[0] & 0x7F) << 8) | rawData[1];
 800d464:	7b3b      	ldrb	r3, [r7, #12]
 800d466:	021b      	lsls	r3, r3, #8
 800d468:	b21b      	sxth	r3, r3
 800d46a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800d46e:	b21a      	sxth	r2, r3
 800d470:	7b7b      	ldrb	r3, [r7, #13]
 800d472:	b21b      	sxth	r3, r3
 800d474:	4313      	orrs	r3, r2
 800d476:	b21b      	sxth	r3, r3
 800d478:	81fb      	strh	r3, [r7, #14]
	return temp;
 800d47a:	89fb      	ldrh	r3, [r7, #14]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <_ZN8CALIPILE8getTPOBJEv>:

uint32_t CALIPILE::getTPOBJ() {
 800d484:	b580      	push	{r7, lr}
 800d486:	b086      	sub	sp, #24
 800d488:	af02      	add	r7, sp, #8
 800d48a:	6078      	str	r0, [r7, #4]
	uint8_t rawData[3] = {0, 0, 0};
 800d48c:	4b10      	ldr	r3, [pc, #64]	; (800d4d0 <_ZN8CALIPILE8getTPOBJEv+0x4c>)
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	723b      	strb	r3, [r7, #8]
 800d492:	f107 0309 	add.w	r3, r7, #9
 800d496:	2200      	movs	r2, #0
 800d498:	801a      	strh	r2, [r3, #0]
	readBytes(i2c_addr, CALIPILE_TPOBJECT, 3, &rawData[0]);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	7a19      	ldrb	r1, [r3, #8]
 800d49e:	f107 0308 	add.w	r3, r7, #8
 800d4a2:	9300      	str	r3, [sp, #0]
 800d4a4:	2303      	movs	r3, #3
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 f8af 	bl	800d60c <_ZN8CALIPILE9readBytesEhhhPh>
	uint32_t temp = ( (uint32_t) ( (uint32_t)rawData[0] << 24) | ( (uint32_t)rawData[1] << 16) | ( (uint32_t)rawData[2] & 0x80) << 8) >> 15;
 800d4ae:	7a3b      	ldrb	r3, [r7, #8]
 800d4b0:	061a      	lsls	r2, r3, #24
 800d4b2:	7a7b      	ldrb	r3, [r7, #9]
 800d4b4:	041b      	lsls	r3, r3, #16
 800d4b6:	431a      	orrs	r2, r3
 800d4b8:	7abb      	ldrb	r3, [r7, #10]
 800d4ba:	021b      	lsls	r3, r3, #8
 800d4bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	0bdb      	lsrs	r3, r3, #15
 800d4c4:	60fb      	str	r3, [r7, #12]
	return temp;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	08012354 	.word	0x08012354

0800d4d4 <_ZN8CALIPILE7getTambEt>:
uint8_t CALIPILE::getTPAMBSHK() {
	uint8_t temp = readByte(i2c_addr, CALIPILE_TPAMB_SHOCK);
	return temp;
}

float CALIPILE::getTamb(uint16_t TPAMB) {
 800d4d4:	b480      	push	{r7}
 800d4d6:	b085      	sub	sp, #20
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	807b      	strh	r3, [r7, #2]
	float temp = 298.15f + ((float)TPAMB - (float) _PTAT25) * (1.0f/(float) _M);
 800d4e0:	887b      	ldrh	r3, [r7, #2]
 800d4e2:	ee07 3a90 	vmov	s15, r3
 800d4e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	895b      	ldrh	r3, [r3, #10]
 800d4ee:	ee07 3a90 	vmov	s15, r3
 800d4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	899b      	ldrh	r3, [r3, #12]
 800d4fe:	ee07 3a90 	vmov	s15, r3
 800d502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d506:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d50a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800d50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d512:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800d534 <_ZN8CALIPILE7getTambEt+0x60>
 800d516:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d51a:	edc7 7a03 	vstr	s15, [r7, #12]
	return temp;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	ee07 3a90 	vmov	s15, r3
}
 800d524:	eeb0 0a67 	vmov.f32	s0, s15
 800d528:	3714      	adds	r7, #20
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop
 800d534:	43951333 	.word	0x43951333

0800d538 <_ZN8CALIPILE7getTobjEmf>:

float CALIPILE::getTobj(uint32_t TPOBJ, float Tamb) {
 800d538:	b580      	push	{r7, lr}
 800d53a:	b088      	sub	sp, #32
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	ed87 0a01 	vstr	s0, [r7, #4]
	float temp0 = powf(Tamb, 3.8f);
 800d546:	eddf 0a19 	vldr	s1, [pc, #100]	; 800d5ac <_ZN8CALIPILE7getTobjEmf+0x74>
 800d54a:	ed97 0a01 	vldr	s0, [r7, #4]
 800d54e:	f004 f961 	bl	8011814 <powf>
 800d552:	ed87 0a07 	vstr	s0, [r7, #28]
	float temp1 = ( ((float) TPOBJ) - ((float) _U0) ) / _k;
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	ee07 3a90 	vmov	s15, r3
 800d55c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	89db      	ldrh	r3, [r3, #14]
 800d564:	ee07 3a90 	vmov	s15, r3
 800d568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d56c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	ed93 7a07 	vldr	s14, [r3, #28]
 800d576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d57a:	edc7 7a06 	vstr	s15, [r7, #24]
	float temp3 = powf( (temp0 + temp1), 0.2631578947f );
 800d57e:	ed97 7a07 	vldr	s14, [r7, #28]
 800d582:	edd7 7a06 	vldr	s15, [r7, #24]
 800d586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d58a:	eddf 0a09 	vldr	s1, [pc, #36]	; 800d5b0 <_ZN8CALIPILE7getTobjEmf+0x78>
 800d58e:	eeb0 0a67 	vmov.f32	s0, s15
 800d592:	f004 f93f 	bl	8011814 <powf>
 800d596:	ed87 0a05 	vstr	s0, [r7, #20]
	return temp3;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	ee07 3a90 	vmov	s15, r3
}
 800d5a0:	eeb0 0a67 	vmov.f32	s0, s15
 800d5a4:	3720      	adds	r7, #32
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	40733333 	.word	0x40733333
 800d5b0:	3e86bca2 	.word	0x3e86bca2

0800d5b4 <_ZN8CALIPILE9writeByteEhhh>:
//	//Serial.println("done\n");
//
//}

// I2C read/write functions for the BMP280 sensors
void CALIPILE::writeByte(uint8_t address, uint8_t subAddress, uint8_t data) {
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	4608      	mov	r0, r1
 800d5be:	4611      	mov	r1, r2
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	70fb      	strb	r3, [r7, #3]
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	70bb      	strb	r3, [r7, #2]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	707b      	strb	r3, [r7, #1]
	writeRegister(subAddress, &data, 1);
 800d5ce:	1c7a      	adds	r2, r7, #1
 800d5d0:	78b9      	ldrb	r1, [r7, #2]
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 f85d 	bl	800d694 <_ZN8CALIPILE13writeRegisterEhPht>
}
 800d5da:	bf00      	nop
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <_ZN8CALIPILE8readByteEhh>:

uint8_t CALIPILE::readByte(uint8_t address, uint8_t subAddress) {
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b084      	sub	sp, #16
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	70fb      	strb	r3, [r7, #3]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	70bb      	strb	r3, [r7, #2]
	uint8_t temp[1];
	readRegister(subAddress, &temp[0], 1);
 800d5f2:	78bb      	ldrb	r3, [r7, #2]
 800d5f4:	b299      	uxth	r1, r3
 800d5f6:	f107 020c 	add.w	r2, r7, #12
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 f81f 	bl	800d640 <_ZN8CALIPILE12readRegisterEtPht>
	return temp[0];
 800d602:	7b3b      	ldrb	r3, [r7, #12]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3710      	adds	r7, #16
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <_ZN8CALIPILE9readBytesEhhhPh>:

void CALIPILE::readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest) {
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	4608      	mov	r0, r1
 800d616:	4611      	mov	r1, r2
 800d618:	461a      	mov	r2, r3
 800d61a:	4603      	mov	r3, r0
 800d61c:	70fb      	strb	r3, [r7, #3]
 800d61e:	460b      	mov	r3, r1
 800d620:	70bb      	strb	r3, [r7, #2]
 800d622:	4613      	mov	r3, r2
 800d624:	707b      	strb	r3, [r7, #1]
	readRegister(subAddress, dest, count);
 800d626:	78bb      	ldrb	r3, [r7, #2]
 800d628:	b299      	uxth	r1, r3
 800d62a:	787b      	ldrb	r3, [r7, #1]
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	693a      	ldr	r2, [r7, #16]
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 f805 	bl	800d640 <_ZN8CALIPILE12readRegisterEtPht>
}
 800d636:	bf00      	nop
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
	...

0800d640 <_ZN8CALIPILE12readRegisterEtPht>:
		return false;
	}
}

HAL_StatusTypeDef test;
bool CALIPILE::readRegister(uint16_t mem_addr, uint8_t *dest, uint16_t size) {
 800d640:	b580      	push	{r7, lr}
 800d642:	b088      	sub	sp, #32
 800d644:	af04      	add	r7, sp, #16
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	607a      	str	r2, [r7, #4]
 800d64a:	461a      	mov	r2, r3
 800d64c:	460b      	mov	r3, r1
 800d64e:	817b      	strh	r3, [r7, #10]
 800d650:	4613      	mov	r3, r2
 800d652:	813b      	strh	r3, [r7, #8]
	test = HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, dest, size, I2C_TIMEOUT);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6858      	ldr	r0, [r3, #4]
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	7a1b      	ldrb	r3, [r3, #8]
 800d65c:	b299      	uxth	r1, r3
 800d65e:	897a      	ldrh	r2, [r7, #10]
 800d660:	2364      	movs	r3, #100	; 0x64
 800d662:	9302      	str	r3, [sp, #8]
 800d664:	893b      	ldrh	r3, [r7, #8]
 800d666:	9301      	str	r3, [sp, #4]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	9300      	str	r3, [sp, #0]
 800d66c:	2301      	movs	r3, #1
 800d66e:	f7f5 fc6d 	bl	8002f4c <HAL_I2C_Mem_Read>
 800d672:	4603      	mov	r3, r0
 800d674:	461a      	mov	r2, r3
 800d676:	4b06      	ldr	r3, [pc, #24]	; (800d690 <_ZN8CALIPILE12readRegisterEtPht+0x50>)
 800d678:	701a      	strb	r2, [r3, #0]
	if (HAL_OK
			== test) {
 800d67a:	4b05      	ldr	r3, [pc, #20]	; (800d690 <_ZN8CALIPILE12readRegisterEtPht+0x50>)
 800d67c:	781b      	ldrb	r3, [r3, #0]
	if (HAL_OK
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d101      	bne.n	800d686 <_ZN8CALIPILE12readRegisterEtPht+0x46>
		return true;
 800d682:	2301      	movs	r3, #1
 800d684:	e000      	b.n	800d688 <_ZN8CALIPILE12readRegisterEtPht+0x48>
	} else {
		return false;
 800d686:	2300      	movs	r3, #0
	}
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	200004f1 	.word	0x200004f1

0800d694 <_ZN8CALIPILE13writeRegisterEhPht>:

bool CALIPILE::writeRegister(uint8_t mem_addr, uint8_t *val, uint16_t size) {
 800d694:	b580      	push	{r7, lr}
 800d696:	b088      	sub	sp, #32
 800d698:	af04      	add	r7, sp, #16
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	607a      	str	r2, [r7, #4]
 800d69e:	461a      	mov	r2, r3
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	72fb      	strb	r3, [r7, #11]
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	813b      	strh	r3, [r7, #8]
	if (HAL_OK
			== HAL_I2C_Mem_Write(i2c_han, i2c_addr, mem_addr, 1, val, size, I2C_TIMEOUT)) {
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6858      	ldr	r0, [r3, #4]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	7a1b      	ldrb	r3, [r3, #8]
 800d6b0:	b299      	uxth	r1, r3
 800d6b2:	7afb      	ldrb	r3, [r7, #11]
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	2364      	movs	r3, #100	; 0x64
 800d6b8:	9302      	str	r3, [sp, #8]
 800d6ba:	893b      	ldrh	r3, [r7, #8]
 800d6bc:	9301      	str	r3, [sp, #4]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	f7f5 fb2e 	bl	8002d24 <HAL_I2C_Mem_Write>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	bf0c      	ite	eq
 800d6ce:	2301      	moveq	r3, #1
 800d6d0:	2300      	movne	r3, #0
 800d6d2:	b2db      	uxtb	r3, r3
	if (HAL_OK
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d001      	beq.n	800d6dc <_ZN8CALIPILE13writeRegisterEhPht+0x48>
		return true;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e000      	b.n	800d6de <_ZN8CALIPILE13writeRegisterEhPht+0x4a>
	} else {
		return false;
 800d6dc:	2300      	movs	r3, #0
	}
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
	...

0800d6e8 <__NVIC_SetPriority>:
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b083      	sub	sp, #12
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	6039      	str	r1, [r7, #0]
 800d6f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d6f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	db0a      	blt.n	800d712 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	b2da      	uxtb	r2, r3
 800d700:	490c      	ldr	r1, [pc, #48]	; (800d734 <__NVIC_SetPriority+0x4c>)
 800d702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d706:	0112      	lsls	r2, r2, #4
 800d708:	b2d2      	uxtb	r2, r2
 800d70a:	440b      	add	r3, r1
 800d70c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d710:	e00a      	b.n	800d728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	b2da      	uxtb	r2, r3
 800d716:	4908      	ldr	r1, [pc, #32]	; (800d738 <__NVIC_SetPriority+0x50>)
 800d718:	79fb      	ldrb	r3, [r7, #7]
 800d71a:	f003 030f 	and.w	r3, r3, #15
 800d71e:	3b04      	subs	r3, #4
 800d720:	0112      	lsls	r2, r2, #4
 800d722:	b2d2      	uxtb	r2, r2
 800d724:	440b      	add	r3, r1
 800d726:	761a      	strb	r2, [r3, #24]
}
 800d728:	bf00      	nop
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr
 800d734:	e000e100 	.word	0xe000e100
 800d738:	e000ed00 	.word	0xe000ed00

0800d73c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d73c:	b580      	push	{r7, lr}
 800d73e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d740:	4b05      	ldr	r3, [pc, #20]	; (800d758 <SysTick_Handler+0x1c>)
 800d742:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d744:	f002 f81a 	bl	800f77c <xTaskGetSchedulerState>
 800d748:	4603      	mov	r3, r0
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d001      	beq.n	800d752 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d74e:	f003 f8bb 	bl	80108c8 <xPortSysTickHandler>
  }
}
 800d752:	bf00      	nop
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	e000e010 	.word	0xe000e010

0800d75c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d75c:	b580      	push	{r7, lr}
 800d75e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d760:	2100      	movs	r1, #0
 800d762:	f06f 0004 	mvn.w	r0, #4
 800d766:	f7ff ffbf 	bl	800d6e8 <__NVIC_SetPriority>
#endif
}
 800d76a:	bf00      	nop
 800d76c:	bd80      	pop	{r7, pc}
	...

0800d770 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d776:	f3ef 8305 	mrs	r3, IPSR
 800d77a:	603b      	str	r3, [r7, #0]
  return(result);
 800d77c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d003      	beq.n	800d78a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d782:	f06f 0305 	mvn.w	r3, #5
 800d786:	607b      	str	r3, [r7, #4]
 800d788:	e00c      	b.n	800d7a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d78a:	4b0a      	ldr	r3, [pc, #40]	; (800d7b4 <osKernelInitialize+0x44>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d105      	bne.n	800d79e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d792:	4b08      	ldr	r3, [pc, #32]	; (800d7b4 <osKernelInitialize+0x44>)
 800d794:	2201      	movs	r2, #1
 800d796:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d798:	2300      	movs	r3, #0
 800d79a:	607b      	str	r3, [r7, #4]
 800d79c:	e002      	b.n	800d7a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d79e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d7a4:	687b      	ldr	r3, [r7, #4]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	370c      	adds	r7, #12
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr
 800d7b2:	bf00      	nop
 800d7b4:	200004f4 	.word	0x200004f4

0800d7b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7be:	f3ef 8305 	mrs	r3, IPSR
 800d7c2:	603b      	str	r3, [r7, #0]
  return(result);
 800d7c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d003      	beq.n	800d7d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d7ca:	f06f 0305 	mvn.w	r3, #5
 800d7ce:	607b      	str	r3, [r7, #4]
 800d7d0:	e010      	b.n	800d7f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d7d2:	4b0b      	ldr	r3, [pc, #44]	; (800d800 <osKernelStart+0x48>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d109      	bne.n	800d7ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d7da:	f7ff ffbf 	bl	800d75c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d7de:	4b08      	ldr	r3, [pc, #32]	; (800d800 <osKernelStart+0x48>)
 800d7e0:	2202      	movs	r2, #2
 800d7e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d7e4:	f001 fb6e 	bl	800eec4 <vTaskStartScheduler>
      stat = osOK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	607b      	str	r3, [r7, #4]
 800d7ec:	e002      	b.n	800d7f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d7ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d7f4:	687b      	ldr	r3, [r7, #4]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	200004f4 	.word	0x200004f4

0800d804 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d804:	b580      	push	{r7, lr}
 800d806:	b08e      	sub	sp, #56	; 0x38
 800d808:	af04      	add	r7, sp, #16
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d810:	2300      	movs	r3, #0
 800d812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d814:	f3ef 8305 	mrs	r3, IPSR
 800d818:	617b      	str	r3, [r7, #20]
  return(result);
 800d81a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d17e      	bne.n	800d91e <osThreadNew+0x11a>
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d07b      	beq.n	800d91e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d826:	2380      	movs	r3, #128	; 0x80
 800d828:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d82a:	2318      	movs	r3, #24
 800d82c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d82e:	2300      	movs	r3, #0
 800d830:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d836:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d045      	beq.n	800d8ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d002      	beq.n	800d84c <osThreadNew+0x48>
        name = attr->name;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	699b      	ldr	r3, [r3, #24]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	699b      	ldr	r3, [r3, #24]
 800d858:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d008      	beq.n	800d872 <osThreadNew+0x6e>
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	2b38      	cmp	r3, #56	; 0x38
 800d864:	d805      	bhi.n	800d872 <osThreadNew+0x6e>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	f003 0301 	and.w	r3, r3, #1
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d001      	beq.n	800d876 <osThreadNew+0x72>
        return (NULL);
 800d872:	2300      	movs	r3, #0
 800d874:	e054      	b.n	800d920 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	695b      	ldr	r3, [r3, #20]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d003      	beq.n	800d886 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	695b      	ldr	r3, [r3, #20]
 800d882:	089b      	lsrs	r3, r3, #2
 800d884:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00e      	beq.n	800d8ac <osThreadNew+0xa8>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	68db      	ldr	r3, [r3, #12]
 800d892:	2bbb      	cmp	r3, #187	; 0xbb
 800d894:	d90a      	bls.n	800d8ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d006      	beq.n	800d8ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	695b      	ldr	r3, [r3, #20]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d002      	beq.n	800d8ac <osThreadNew+0xa8>
        mem = 1;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	61bb      	str	r3, [r7, #24]
 800d8aa:	e010      	b.n	800d8ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10c      	bne.n	800d8ce <osThreadNew+0xca>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d108      	bne.n	800d8ce <osThreadNew+0xca>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	691b      	ldr	r3, [r3, #16]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d104      	bne.n	800d8ce <osThreadNew+0xca>
          mem = 0;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	61bb      	str	r3, [r7, #24]
 800d8c8:	e001      	b.n	800d8ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d110      	bne.n	800d8f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d8dc:	9202      	str	r2, [sp, #8]
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	6a3a      	ldr	r2, [r7, #32]
 800d8e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f001 f932 	bl	800eb54 <xTaskCreateStatic>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	613b      	str	r3, [r7, #16]
 800d8f4:	e013      	b.n	800d91e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d8f6:	69bb      	ldr	r3, [r7, #24]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d110      	bne.n	800d91e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	f107 0310 	add.w	r3, r7, #16
 800d904:	9301      	str	r3, [sp, #4]
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f001 f97d 	bl	800ec0e <xTaskCreate>
 800d914:	4603      	mov	r3, r0
 800d916:	2b01      	cmp	r3, #1
 800d918:	d001      	beq.n	800d91e <osThreadNew+0x11a>
            hTask = NULL;
 800d91a:	2300      	movs	r3, #0
 800d91c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d91e:	693b      	ldr	r3, [r7, #16]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3728      	adds	r7, #40	; 0x28
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800d928:	b580      	push	{r7, lr}
 800d92a:	b088      	sub	sp, #32
 800d92c:	af02      	add	r7, sp, #8
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d002      	beq.n	800d942 <osThreadFlagsSet+0x1a>
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	da03      	bge.n	800d94a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800d942:	f06f 0303 	mvn.w	r3, #3
 800d946:	60fb      	str	r3, [r7, #12]
 800d948:	e035      	b.n	800d9b6 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800d94a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d94e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d950:	f3ef 8305 	mrs	r3, IPSR
 800d954:	613b      	str	r3, [r7, #16]
  return(result);
 800d956:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d01f      	beq.n	800d99c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800d95c:	2300      	movs	r3, #0
 800d95e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800d960:	f107 0308 	add.w	r3, r7, #8
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	2300      	movs	r3, #0
 800d968:	2201      	movs	r2, #1
 800d96a:	6839      	ldr	r1, [r7, #0]
 800d96c:	6978      	ldr	r0, [r7, #20]
 800d96e:	f002 f8af 	bl	800fad0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800d972:	f107 030c 	add.w	r3, r7, #12
 800d976:	2200      	movs	r2, #0
 800d978:	9200      	str	r2, [sp, #0]
 800d97a:	2200      	movs	r2, #0
 800d97c:	2100      	movs	r1, #0
 800d97e:	6978      	ldr	r0, [r7, #20]
 800d980:	f002 f8a6 	bl	800fad0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d015      	beq.n	800d9b6 <osThreadFlagsSet+0x8e>
 800d98a:	4b0d      	ldr	r3, [pc, #52]	; (800d9c0 <osThreadFlagsSet+0x98>)
 800d98c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d990:	601a      	str	r2, [r3, #0]
 800d992:	f3bf 8f4f 	dsb	sy
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	e00c      	b.n	800d9b6 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800d99c:	2300      	movs	r3, #0
 800d99e:	2201      	movs	r2, #1
 800d9a0:	6839      	ldr	r1, [r7, #0]
 800d9a2:	6978      	ldr	r0, [r7, #20]
 800d9a4:	f001 ffd6 	bl	800f954 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800d9a8:	f107 030c 	add.w	r3, r7, #12
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	6978      	ldr	r0, [r7, #20]
 800d9b2:	f001 ffcf 	bl	800f954 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3718      	adds	r7, #24
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	e000ed04 	.word	0xe000ed04

0800d9c4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08c      	sub	sp, #48	; 0x30
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9d0:	f3ef 8305 	mrs	r3, IPSR
 800d9d4:	617b      	str	r3, [r7, #20]
  return(result);
 800d9d6:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d003      	beq.n	800d9e4 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800d9dc:	f06f 0305 	mvn.w	r3, #5
 800d9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9e2:	e06b      	b.n	800dabc <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	da03      	bge.n	800d9f2 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800d9ea:	f06f 0303 	mvn.w	r3, #3
 800d9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9f0:	e064      	b.n	800dabc <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	f003 0302 	and.w	r3, r3, #2
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d002      	beq.n	800da02 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800da00:	e001      	b.n	800da06 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800da06:	2300      	movs	r3, #0
 800da08:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800da0e:	f001 fb75 	bl	800f0fc <xTaskGetTickCount>
 800da12:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800da14:	f107 0210 	add.w	r2, r7, #16
 800da18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da1c:	2000      	movs	r0, #0
 800da1e:	f001 ff39 	bl	800f894 <xTaskNotifyWait>
 800da22:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	2b01      	cmp	r3, #1
 800da28:	d137      	bne.n	800da9a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800da2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	4013      	ands	r3, r2
 800da30:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da36:	4313      	orrs	r3, r2
 800da38:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	f003 0301 	and.w	r3, r3, #1
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00c      	beq.n	800da5e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da48:	4013      	ands	r3, r2
 800da4a:	68fa      	ldr	r2, [r7, #12]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d032      	beq.n	800dab6 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d10f      	bne.n	800da76 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800da56:	f06f 0302 	mvn.w	r3, #2
 800da5a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800da5c:	e02e      	b.n	800dabc <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800da5e:	68fa      	ldr	r2, [r7, #12]
 800da60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da62:	4013      	ands	r3, r2
 800da64:	2b00      	cmp	r3, #0
 800da66:	d128      	bne.n	800daba <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d103      	bne.n	800da76 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800da6e:	f06f 0302 	mvn.w	r3, #2
 800da72:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800da74:	e022      	b.n	800dabc <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800da76:	f001 fb41 	bl	800f0fc <xTaskGetTickCount>
 800da7a:	4602      	mov	r2, r0
 800da7c:	6a3b      	ldr	r3, [r7, #32]
 800da7e:	1ad3      	subs	r3, r2, r3
 800da80:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800da82:	69ba      	ldr	r2, [r7, #24]
 800da84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da86:	429a      	cmp	r2, r3
 800da88:	d902      	bls.n	800da90 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800da8a:	2300      	movs	r3, #0
 800da8c:	627b      	str	r3, [r7, #36]	; 0x24
 800da8e:	e00e      	b.n	800daae <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800da90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	1ad3      	subs	r3, r2, r3
 800da96:	627b      	str	r3, [r7, #36]	; 0x24
 800da98:	e009      	b.n	800daae <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d103      	bne.n	800daa8 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800daa0:	f06f 0302 	mvn.w	r3, #2
 800daa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800daa6:	e002      	b.n	800daae <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800daa8:	f06f 0301 	mvn.w	r3, #1
 800daac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800daae:	69fb      	ldr	r3, [r7, #28]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d1af      	bne.n	800da14 <osThreadFlagsWait+0x50>
 800dab4:	e002      	b.n	800dabc <osThreadFlagsWait+0xf8>
            break;
 800dab6:	bf00      	nop
 800dab8:	e000      	b.n	800dabc <osThreadFlagsWait+0xf8>
            break;
 800daba:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800dabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3730      	adds	r7, #48	; 0x30
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b084      	sub	sp, #16
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f002 fd1e 	bl	8010510 <pvTimerGetTimerID>
 800dad4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d005      	beq.n	800dae8 <TimerCallback+0x22>
    callb->func (callb->arg);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	68fa      	ldr	r2, [r7, #12]
 800dae2:	6852      	ldr	r2, [r2, #4]
 800dae4:	4610      	mov	r0, r2
 800dae6:	4798      	blx	r3
  }
}
 800dae8:	bf00      	nop
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b08c      	sub	sp, #48	; 0x30
 800daf4:	af02      	add	r7, sp, #8
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	607a      	str	r2, [r7, #4]
 800dafa:	603b      	str	r3, [r7, #0]
 800dafc:	460b      	mov	r3, r1
 800dafe:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800db00:	2300      	movs	r3, #0
 800db02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db04:	f3ef 8305 	mrs	r3, IPSR
 800db08:	613b      	str	r3, [r7, #16]
  return(result);
 800db0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d163      	bne.n	800dbd8 <osTimerNew+0xe8>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d060      	beq.n	800dbd8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800db16:	2008      	movs	r0, #8
 800db18:	f002 ff66 	bl	80109e8 <pvPortMalloc>
 800db1c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d059      	beq.n	800dbd8 <osTimerNew+0xe8>
      callb->func = func;
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	68fa      	ldr	r2, [r7, #12]
 800db28:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800db30:	7afb      	ldrb	r3, [r7, #11]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d102      	bne.n	800db3c <osTimerNew+0x4c>
        reload = pdFALSE;
 800db36:	2300      	movs	r3, #0
 800db38:	61fb      	str	r3, [r7, #28]
 800db3a:	e001      	b.n	800db40 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800db3c:	2301      	movs	r3, #1
 800db3e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800db40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db44:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800db46:	2300      	movs	r3, #0
 800db48:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d01c      	beq.n	800db8a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d002      	beq.n	800db5e <osTimerNew+0x6e>
          name = attr->name;
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d006      	beq.n	800db74 <osTimerNew+0x84>
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	2b2b      	cmp	r3, #43	; 0x2b
 800db6c:	d902      	bls.n	800db74 <osTimerNew+0x84>
          mem = 1;
 800db6e:	2301      	movs	r3, #1
 800db70:	61bb      	str	r3, [r7, #24]
 800db72:	e00c      	b.n	800db8e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d108      	bne.n	800db8e <osTimerNew+0x9e>
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d104      	bne.n	800db8e <osTimerNew+0x9e>
            mem = 0;
 800db84:	2300      	movs	r3, #0
 800db86:	61bb      	str	r3, [r7, #24]
 800db88:	e001      	b.n	800db8e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800db8a:	2300      	movs	r3, #0
 800db8c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	2b01      	cmp	r3, #1
 800db92:	d10c      	bne.n	800dbae <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	9301      	str	r3, [sp, #4]
 800db9a:	4b12      	ldr	r3, [pc, #72]	; (800dbe4 <osTimerNew+0xf4>)
 800db9c:	9300      	str	r3, [sp, #0]
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	69fa      	ldr	r2, [r7, #28]
 800dba2:	2101      	movs	r1, #1
 800dba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dba6:	f002 f934 	bl	800fe12 <xTimerCreateStatic>
 800dbaa:	6238      	str	r0, [r7, #32]
 800dbac:	e00b      	b.n	800dbc6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d108      	bne.n	800dbc6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800dbb4:	4b0b      	ldr	r3, [pc, #44]	; (800dbe4 <osTimerNew+0xf4>)
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	69fa      	ldr	r2, [r7, #28]
 800dbbc:	2101      	movs	r1, #1
 800dbbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbc0:	f002 f906 	bl	800fdd0 <xTimerCreate>
 800dbc4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800dbc6:	6a3b      	ldr	r3, [r7, #32]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d105      	bne.n	800dbd8 <osTimerNew+0xe8>
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d002      	beq.n	800dbd8 <osTimerNew+0xe8>
        vPortFree (callb);
 800dbd2:	6978      	ldr	r0, [r7, #20]
 800dbd4:	f002 ffd4 	bl	8010b80 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800dbd8:	6a3b      	ldr	r3, [r7, #32]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3728      	adds	r7, #40	; 0x28
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	0800dac7 	.word	0x0800dac7

0800dbe8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b088      	sub	sp, #32
 800dbec:	af02      	add	r7, sp, #8
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbf6:	f3ef 8305 	mrs	r3, IPSR
 800dbfa:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d003      	beq.n	800dc0a <osTimerStart+0x22>
    stat = osErrorISR;
 800dc02:	f06f 0305 	mvn.w	r3, #5
 800dc06:	617b      	str	r3, [r7, #20]
 800dc08:	e017      	b.n	800dc3a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d103      	bne.n	800dc18 <osTimerStart+0x30>
    stat = osErrorParameter;
 800dc10:	f06f 0303 	mvn.w	r3, #3
 800dc14:	617b      	str	r3, [r7, #20]
 800dc16:	e010      	b.n	800dc3a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800dc18:	2300      	movs	r3, #0
 800dc1a:	9300      	str	r3, [sp, #0]
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	683a      	ldr	r2, [r7, #0]
 800dc20:	2104      	movs	r1, #4
 800dc22:	6938      	ldr	r0, [r7, #16]
 800dc24:	f002 f96e 	bl	800ff04 <xTimerGenericCommand>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d102      	bne.n	800dc34 <osTimerStart+0x4c>
      stat = osOK;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	617b      	str	r3, [r7, #20]
 800dc32:	e002      	b.n	800dc3a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800dc34:	f06f 0302 	mvn.w	r3, #2
 800dc38:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800dc3a:	697b      	ldr	r3, [r7, #20]
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3718      	adds	r7, #24
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <osTimerDelete>:
  }

  return (running);
}

osStatus_t osTimerDelete (osTimerId_t timer_id) {
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b088      	sub	sp, #32
 800dc48:	af02      	add	r7, sp, #8
 800dc4a:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc50:	f3ef 8305 	mrs	r3, IPSR
 800dc54:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  TimerCallback_t *callb;

  if (IS_IRQ()) {
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d003      	beq.n	800dc64 <osTimerDelete+0x20>
    stat = osErrorISR;
 800dc5c:	f06f 0305 	mvn.w	r3, #5
 800dc60:	617b      	str	r3, [r7, #20]
 800dc62:	e01e      	b.n	800dca2 <osTimerDelete+0x5e>
  }
  else if (hTimer == NULL) {
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d103      	bne.n	800dc72 <osTimerDelete+0x2e>
    stat = osErrorParameter;
 800dc6a:	f06f 0303 	mvn.w	r3, #3
 800dc6e:	617b      	str	r3, [r7, #20]
 800dc70:	e017      	b.n	800dca2 <osTimerDelete+0x5e>
  }
  else {
    callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800dc72:	6938      	ldr	r0, [r7, #16]
 800dc74:	f002 fc4c 	bl	8010510 <pvTimerGetTimerID>
 800dc78:	60f8      	str	r0, [r7, #12]

    if (xTimerDelete (hTimer, 0) == pdPASS) {
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	2300      	movs	r3, #0
 800dc80:	2200      	movs	r2, #0
 800dc82:	2105      	movs	r1, #5
 800dc84:	6938      	ldr	r0, [r7, #16]
 800dc86:	f002 f93d 	bl	800ff04 <xTimerGenericCommand>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d105      	bne.n	800dc9c <osTimerDelete+0x58>
      vPortFree (callb);
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f002 ff75 	bl	8010b80 <vPortFree>
      stat = osOK;
 800dc96:	2300      	movs	r3, #0
 800dc98:	617b      	str	r3, [r7, #20]
 800dc9a:	e002      	b.n	800dca2 <osTimerDelete+0x5e>
    } else {
      stat = osErrorResource;
 800dc9c:	f06f 0302 	mvn.w	r3, #2
 800dca0:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800dca2:	697b      	ldr	r3, [r7, #20]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3718      	adds	r7, #24
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b088      	sub	sp, #32
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcb8:	f3ef 8305 	mrs	r3, IPSR
 800dcbc:	60bb      	str	r3, [r7, #8]
  return(result);
 800dcbe:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d174      	bne.n	800ddae <osMutexNew+0x102>
    if (attr != NULL) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d003      	beq.n	800dcd2 <osMutexNew+0x26>
      type = attr->attr_bits;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	61bb      	str	r3, [r7, #24]
 800dcd0:	e001      	b.n	800dcd6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	f003 0301 	and.w	r3, r3, #1
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d002      	beq.n	800dce6 <osMutexNew+0x3a>
      rmtx = 1U;
 800dce0:	2301      	movs	r3, #1
 800dce2:	617b      	str	r3, [r7, #20]
 800dce4:	e001      	b.n	800dcea <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800dce6:	2300      	movs	r3, #0
 800dce8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800dcea:	69bb      	ldr	r3, [r7, #24]
 800dcec:	f003 0308 	and.w	r3, r3, #8
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d15c      	bne.n	800ddae <osMutexNew+0x102>
      mem = -1;
 800dcf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcf8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d015      	beq.n	800dd2c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	689b      	ldr	r3, [r3, #8]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d006      	beq.n	800dd16 <osMutexNew+0x6a>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	2b4f      	cmp	r3, #79	; 0x4f
 800dd0e:	d902      	bls.n	800dd16 <osMutexNew+0x6a>
          mem = 1;
 800dd10:	2301      	movs	r3, #1
 800dd12:	613b      	str	r3, [r7, #16]
 800dd14:	e00c      	b.n	800dd30 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	689b      	ldr	r3, [r3, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d108      	bne.n	800dd30 <osMutexNew+0x84>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d104      	bne.n	800dd30 <osMutexNew+0x84>
            mem = 0;
 800dd26:	2300      	movs	r3, #0
 800dd28:	613b      	str	r3, [r7, #16]
 800dd2a:	e001      	b.n	800dd30 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d112      	bne.n	800dd5c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d007      	beq.n	800dd4c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	4619      	mov	r1, r3
 800dd42:	2004      	movs	r0, #4
 800dd44:	f000 fb03 	bl	800e34e <xQueueCreateMutexStatic>
 800dd48:	61f8      	str	r0, [r7, #28]
 800dd4a:	e016      	b.n	800dd7a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	4619      	mov	r1, r3
 800dd52:	2001      	movs	r0, #1
 800dd54:	f000 fafb 	bl	800e34e <xQueueCreateMutexStatic>
 800dd58:	61f8      	str	r0, [r7, #28]
 800dd5a:	e00e      	b.n	800dd7a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d10b      	bne.n	800dd7a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d004      	beq.n	800dd72 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800dd68:	2004      	movs	r0, #4
 800dd6a:	f000 fad8 	bl	800e31e <xQueueCreateMutex>
 800dd6e:	61f8      	str	r0, [r7, #28]
 800dd70:	e003      	b.n	800dd7a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800dd72:	2001      	movs	r0, #1
 800dd74:	f000 fad3 	bl	800e31e <xQueueCreateMutex>
 800dd78:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d00c      	beq.n	800dd9a <osMutexNew+0xee>
        if (attr != NULL) {
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d003      	beq.n	800dd8e <osMutexNew+0xe2>
          name = attr->name;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	60fb      	str	r3, [r7, #12]
 800dd8c:	e001      	b.n	800dd92 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800dd92:	68f9      	ldr	r1, [r7, #12]
 800dd94:	69f8      	ldr	r0, [r7, #28]
 800dd96:	f000 fe7f 	bl	800ea98 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d006      	beq.n	800ddae <osMutexNew+0x102>
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d003      	beq.n	800ddae <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800dda6:	69fb      	ldr	r3, [r7, #28]
 800dda8:	f043 0301 	orr.w	r3, r3, #1
 800ddac:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ddae:	69fb      	ldr	r3, [r7, #28]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3720      	adds	r7, #32
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b08a      	sub	sp, #40	; 0x28
 800ddbc:	af02      	add	r7, sp, #8
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddc8:	f3ef 8305 	mrs	r3, IPSR
 800ddcc:	613b      	str	r3, [r7, #16]
  return(result);
 800ddce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d15f      	bne.n	800de94 <osMessageQueueNew+0xdc>
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d05c      	beq.n	800de94 <osMessageQueueNew+0xdc>
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d059      	beq.n	800de94 <osMessageQueueNew+0xdc>
    mem = -1;
 800dde0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dde4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d029      	beq.n	800de40 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	689b      	ldr	r3, [r3, #8]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d012      	beq.n	800de1a <osMessageQueueNew+0x62>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	2b4f      	cmp	r3, #79	; 0x4f
 800ddfa:	d90e      	bls.n	800de1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800de00:	2b00      	cmp	r3, #0
 800de02:	d00a      	beq.n	800de1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	695a      	ldr	r2, [r3, #20]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	68b9      	ldr	r1, [r7, #8]
 800de0c:	fb01 f303 	mul.w	r3, r1, r3
 800de10:	429a      	cmp	r2, r3
 800de12:	d302      	bcc.n	800de1a <osMessageQueueNew+0x62>
        mem = 1;
 800de14:	2301      	movs	r3, #1
 800de16:	61bb      	str	r3, [r7, #24]
 800de18:	e014      	b.n	800de44 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	689b      	ldr	r3, [r3, #8]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d110      	bne.n	800de44 <osMessageQueueNew+0x8c>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d10c      	bne.n	800de44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d108      	bne.n	800de44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	695b      	ldr	r3, [r3, #20]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d104      	bne.n	800de44 <osMessageQueueNew+0x8c>
          mem = 0;
 800de3a:	2300      	movs	r3, #0
 800de3c:	61bb      	str	r3, [r7, #24]
 800de3e:	e001      	b.n	800de44 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800de40:	2300      	movs	r3, #0
 800de42:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800de44:	69bb      	ldr	r3, [r7, #24]
 800de46:	2b01      	cmp	r3, #1
 800de48:	d10b      	bne.n	800de62 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	691a      	ldr	r2, [r3, #16]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	2100      	movs	r1, #0
 800de54:	9100      	str	r1, [sp, #0]
 800de56:	68b9      	ldr	r1, [r7, #8]
 800de58:	68f8      	ldr	r0, [r7, #12]
 800de5a:	f000 f971 	bl	800e140 <xQueueGenericCreateStatic>
 800de5e:	61f8      	str	r0, [r7, #28]
 800de60:	e008      	b.n	800de74 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d105      	bne.n	800de74 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800de68:	2200      	movs	r2, #0
 800de6a:	68b9      	ldr	r1, [r7, #8]
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f000 f9df 	bl	800e230 <xQueueGenericCreate>
 800de72:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800de74:	69fb      	ldr	r3, [r7, #28]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00c      	beq.n	800de94 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d003      	beq.n	800de88 <osMessageQueueNew+0xd0>
        name = attr->name;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	617b      	str	r3, [r7, #20]
 800de86:	e001      	b.n	800de8c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800de88:	2300      	movs	r3, #0
 800de8a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800de8c:	6979      	ldr	r1, [r7, #20]
 800de8e:	69f8      	ldr	r0, [r7, #28]
 800de90:	f000 fe02 	bl	800ea98 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800de94:	69fb      	ldr	r3, [r7, #28]
}
 800de96:	4618      	mov	r0, r3
 800de98:	3720      	adds	r7, #32
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
	...

0800dea0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dea0:	b480      	push	{r7}
 800dea2:	b085      	sub	sp, #20
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	4a07      	ldr	r2, [pc, #28]	; (800decc <vApplicationGetIdleTaskMemory+0x2c>)
 800deb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	4a06      	ldr	r2, [pc, #24]	; (800ded0 <vApplicationGetIdleTaskMemory+0x30>)
 800deb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2280      	movs	r2, #128	; 0x80
 800debc:	601a      	str	r2, [r3, #0]
}
 800debe:	bf00      	nop
 800dec0:	3714      	adds	r7, #20
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop
 800decc:	200004f8 	.word	0x200004f8
 800ded0:	200005b4 	.word	0x200005b4

0800ded4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ded4:	b480      	push	{r7}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	4a07      	ldr	r2, [pc, #28]	; (800df00 <vApplicationGetTimerTaskMemory+0x2c>)
 800dee4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	4a06      	ldr	r2, [pc, #24]	; (800df04 <vApplicationGetTimerTaskMemory+0x30>)
 800deea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800def2:	601a      	str	r2, [r3, #0]
}
 800def4:	bf00      	nop
 800def6:	3714      	adds	r7, #20
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	200007b4 	.word	0x200007b4
 800df04:	20000870 	.word	0x20000870

0800df08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f103 0208 	add.w	r2, r3, #8
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f103 0208 	add.w	r2, r3, #8
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f103 0208 	add.w	r2, r3, #8
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2200      	movs	r2, #0
 800df3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800df3c:	bf00      	nop
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df56:	bf00      	nop
 800df58:	370c      	adds	r7, #12
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr

0800df62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df62:	b480      	push	{r7}
 800df64:	b085      	sub	sp, #20
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
 800df6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	68fa      	ldr	r2, [r7, #12]
 800df76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	689a      	ldr	r2, [r3, #8]
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	683a      	ldr	r2, [r7, #0]
 800df86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	683a      	ldr	r2, [r7, #0]
 800df8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	1c5a      	adds	r2, r3, #1
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	601a      	str	r2, [r3, #0]
}
 800df9e:	bf00      	nop
 800dfa0:	3714      	adds	r7, #20
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr

0800dfaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dfaa:	b480      	push	{r7}
 800dfac:	b085      	sub	sp, #20
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
 800dfb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfc0:	d103      	bne.n	800dfca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	691b      	ldr	r3, [r3, #16]
 800dfc6:	60fb      	str	r3, [r7, #12]
 800dfc8:	e00c      	b.n	800dfe4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	3308      	adds	r3, #8
 800dfce:	60fb      	str	r3, [r7, #12]
 800dfd0:	e002      	b.n	800dfd8 <vListInsert+0x2e>
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	60fb      	str	r3, [r7, #12]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	68ba      	ldr	r2, [r7, #8]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d2f6      	bcs.n	800dfd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	685a      	ldr	r2, [r3, #4]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	683a      	ldr	r2, [r7, #0]
 800dff2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	683a      	ldr	r2, [r7, #0]
 800dffe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	1c5a      	adds	r2, r3, #1
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	601a      	str	r2, [r3, #0]
}
 800e010:	bf00      	nop
 800e012:	3714      	adds	r7, #20
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e01c:	b480      	push	{r7}
 800e01e:	b085      	sub	sp, #20
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	691b      	ldr	r3, [r3, #16]
 800e028:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	6892      	ldr	r2, [r2, #8]
 800e032:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	6852      	ldr	r2, [r2, #4]
 800e03c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	429a      	cmp	r2, r3
 800e046:	d103      	bne.n	800e050 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	689a      	ldr	r2, [r3, #8]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	1e5a      	subs	r2, r3, #1
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3714      	adds	r7, #20
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr

0800e070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b084      	sub	sp, #16
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d10a      	bne.n	800e09a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e088:	f383 8811 	msr	BASEPRI, r3
 800e08c:	f3bf 8f6f 	isb	sy
 800e090:	f3bf 8f4f 	dsb	sy
 800e094:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e096:	bf00      	nop
 800e098:	e7fe      	b.n	800e098 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e09a:	f002 fb83 	bl	80107a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0a6:	68f9      	ldr	r1, [r7, #12]
 800e0a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e0aa:	fb01 f303 	mul.w	r3, r1, r3
 800e0ae:	441a      	add	r2, r3
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	68f9      	ldr	r1, [r7, #12]
 800e0ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e0d0:	fb01 f303 	mul.w	r3, r1, r3
 800e0d4:	441a      	add	r2, r3
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	22ff      	movs	r2, #255	; 0xff
 800e0de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	22ff      	movs	r2, #255	; 0xff
 800e0e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d114      	bne.n	800e11a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	691b      	ldr	r3, [r3, #16]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d01a      	beq.n	800e12e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	3310      	adds	r3, #16
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f001 f97b 	bl	800f3f8 <xTaskRemoveFromEventList>
 800e102:	4603      	mov	r3, r0
 800e104:	2b00      	cmp	r3, #0
 800e106:	d012      	beq.n	800e12e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e108:	4b0c      	ldr	r3, [pc, #48]	; (800e13c <xQueueGenericReset+0xcc>)
 800e10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e10e:	601a      	str	r2, [r3, #0]
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	f3bf 8f6f 	isb	sy
 800e118:	e009      	b.n	800e12e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	3310      	adds	r3, #16
 800e11e:	4618      	mov	r0, r3
 800e120:	f7ff fef2 	bl	800df08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	3324      	adds	r3, #36	; 0x24
 800e128:	4618      	mov	r0, r3
 800e12a:	f7ff feed 	bl	800df08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e12e:	f002 fb69 	bl	8010804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e132:	2301      	movs	r3, #1
}
 800e134:	4618      	mov	r0, r3
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	e000ed04 	.word	0xe000ed04

0800e140 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e140:	b580      	push	{r7, lr}
 800e142:	b08e      	sub	sp, #56	; 0x38
 800e144:	af02      	add	r7, sp, #8
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	607a      	str	r2, [r7, #4]
 800e14c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d10a      	bne.n	800e16a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e158:	f383 8811 	msr	BASEPRI, r3
 800e15c:	f3bf 8f6f 	isb	sy
 800e160:	f3bf 8f4f 	dsb	sy
 800e164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e166:	bf00      	nop
 800e168:	e7fe      	b.n	800e168 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10a      	bne.n	800e186 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e174:	f383 8811 	msr	BASEPRI, r3
 800e178:	f3bf 8f6f 	isb	sy
 800e17c:	f3bf 8f4f 	dsb	sy
 800e180:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e182:	bf00      	nop
 800e184:	e7fe      	b.n	800e184 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d002      	beq.n	800e192 <xQueueGenericCreateStatic+0x52>
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d001      	beq.n	800e196 <xQueueGenericCreateStatic+0x56>
 800e192:	2301      	movs	r3, #1
 800e194:	e000      	b.n	800e198 <xQueueGenericCreateStatic+0x58>
 800e196:	2300      	movs	r3, #0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d10a      	bne.n	800e1b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a0:	f383 8811 	msr	BASEPRI, r3
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	623b      	str	r3, [r7, #32]
}
 800e1ae:	bf00      	nop
 800e1b0:	e7fe      	b.n	800e1b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d102      	bne.n	800e1be <xQueueGenericCreateStatic+0x7e>
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d101      	bne.n	800e1c2 <xQueueGenericCreateStatic+0x82>
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e000      	b.n	800e1c4 <xQueueGenericCreateStatic+0x84>
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d10a      	bne.n	800e1de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1cc:	f383 8811 	msr	BASEPRI, r3
 800e1d0:	f3bf 8f6f 	isb	sy
 800e1d4:	f3bf 8f4f 	dsb	sy
 800e1d8:	61fb      	str	r3, [r7, #28]
}
 800e1da:	bf00      	nop
 800e1dc:	e7fe      	b.n	800e1dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e1de:	2350      	movs	r3, #80	; 0x50
 800e1e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	2b50      	cmp	r3, #80	; 0x50
 800e1e6:	d00a      	beq.n	800e1fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ec:	f383 8811 	msr	BASEPRI, r3
 800e1f0:	f3bf 8f6f 	isb	sy
 800e1f4:	f3bf 8f4f 	dsb	sy
 800e1f8:	61bb      	str	r3, [r7, #24]
}
 800e1fa:	bf00      	nop
 800e1fc:	e7fe      	b.n	800e1fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e1fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00d      	beq.n	800e226 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20c:	2201      	movs	r2, #1
 800e20e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e212:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	4613      	mov	r3, r2
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	68b9      	ldr	r1, [r7, #8]
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f000 f83f 	bl	800e2a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e228:	4618      	mov	r0, r3
 800e22a:	3730      	adds	r7, #48	; 0x30
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e230:	b580      	push	{r7, lr}
 800e232:	b08a      	sub	sp, #40	; 0x28
 800e234:	af02      	add	r7, sp, #8
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	4613      	mov	r3, r2
 800e23c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d10a      	bne.n	800e25a <xQueueGenericCreate+0x2a>
	__asm volatile
 800e244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e248:	f383 8811 	msr	BASEPRI, r3
 800e24c:	f3bf 8f6f 	isb	sy
 800e250:	f3bf 8f4f 	dsb	sy
 800e254:	613b      	str	r3, [r7, #16]
}
 800e256:	bf00      	nop
 800e258:	e7fe      	b.n	800e258 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	fb02 f303 	mul.w	r3, r2, r3
 800e262:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	3350      	adds	r3, #80	; 0x50
 800e268:	4618      	mov	r0, r3
 800e26a:	f002 fbbd 	bl	80109e8 <pvPortMalloc>
 800e26e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d011      	beq.n	800e29a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e276:	69bb      	ldr	r3, [r7, #24]
 800e278:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	3350      	adds	r3, #80	; 0x50
 800e27e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e280:	69bb      	ldr	r3, [r7, #24]
 800e282:	2200      	movs	r2, #0
 800e284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e288:	79fa      	ldrb	r2, [r7, #7]
 800e28a:	69bb      	ldr	r3, [r7, #24]
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	4613      	mov	r3, r2
 800e290:	697a      	ldr	r2, [r7, #20]
 800e292:	68b9      	ldr	r1, [r7, #8]
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f000 f805 	bl	800e2a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e29a:	69bb      	ldr	r3, [r7, #24]
	}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3720      	adds	r7, #32
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b084      	sub	sp, #16
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	60b9      	str	r1, [r7, #8]
 800e2ae:	607a      	str	r2, [r7, #4]
 800e2b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d103      	bne.n	800e2c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e2b8:	69bb      	ldr	r3, [r7, #24]
 800e2ba:	69ba      	ldr	r2, [r7, #24]
 800e2bc:	601a      	str	r2, [r3, #0]
 800e2be:	e002      	b.n	800e2c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	68fa      	ldr	r2, [r7, #12]
 800e2ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e2d2:	2101      	movs	r1, #1
 800e2d4:	69b8      	ldr	r0, [r7, #24]
 800e2d6:	f7ff fecb 	bl	800e070 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	78fa      	ldrb	r2, [r7, #3]
 800e2de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e2e2:	bf00      	nop
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}

0800e2ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b082      	sub	sp, #8
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d00e      	beq.n	800e316 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2200      	movs	r2, #0
 800e302:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2200      	movs	r2, #0
 800e308:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e30a:	2300      	movs	r3, #0
 800e30c:	2200      	movs	r2, #0
 800e30e:	2100      	movs	r1, #0
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 f837 	bl	800e384 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e316:	bf00      	nop
 800e318:	3708      	adds	r7, #8
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}

0800e31e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e31e:	b580      	push	{r7, lr}
 800e320:	b086      	sub	sp, #24
 800e322:	af00      	add	r7, sp, #0
 800e324:	4603      	mov	r3, r0
 800e326:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e328:	2301      	movs	r3, #1
 800e32a:	617b      	str	r3, [r7, #20]
 800e32c:	2300      	movs	r3, #0
 800e32e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e330:	79fb      	ldrb	r3, [r7, #7]
 800e332:	461a      	mov	r2, r3
 800e334:	6939      	ldr	r1, [r7, #16]
 800e336:	6978      	ldr	r0, [r7, #20]
 800e338:	f7ff ff7a 	bl	800e230 <xQueueGenericCreate>
 800e33c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f7ff ffd3 	bl	800e2ea <prvInitialiseMutex>

		return xNewQueue;
 800e344:	68fb      	ldr	r3, [r7, #12]
	}
 800e346:	4618      	mov	r0, r3
 800e348:	3718      	adds	r7, #24
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e34e:	b580      	push	{r7, lr}
 800e350:	b088      	sub	sp, #32
 800e352:	af02      	add	r7, sp, #8
 800e354:	4603      	mov	r3, r0
 800e356:	6039      	str	r1, [r7, #0]
 800e358:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e35a:	2301      	movs	r3, #1
 800e35c:	617b      	str	r3, [r7, #20]
 800e35e:	2300      	movs	r3, #0
 800e360:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e362:	79fb      	ldrb	r3, [r7, #7]
 800e364:	9300      	str	r3, [sp, #0]
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	2200      	movs	r2, #0
 800e36a:	6939      	ldr	r1, [r7, #16]
 800e36c:	6978      	ldr	r0, [r7, #20]
 800e36e:	f7ff fee7 	bl	800e140 <xQueueGenericCreateStatic>
 800e372:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f7ff ffb8 	bl	800e2ea <prvInitialiseMutex>

		return xNewQueue;
 800e37a:	68fb      	ldr	r3, [r7, #12]
	}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3718      	adds	r7, #24
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b08e      	sub	sp, #56	; 0x38
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	607a      	str	r2, [r7, #4]
 800e390:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e392:	2300      	movs	r3, #0
 800e394:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d10a      	bne.n	800e3b6 <xQueueGenericSend+0x32>
	__asm volatile
 800e3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e3b2:	bf00      	nop
 800e3b4:	e7fe      	b.n	800e3b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d103      	bne.n	800e3c4 <xQueueGenericSend+0x40>
 800e3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d101      	bne.n	800e3c8 <xQueueGenericSend+0x44>
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	e000      	b.n	800e3ca <xQueueGenericSend+0x46>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d10a      	bne.n	800e3e4 <xQueueGenericSend+0x60>
	__asm volatile
 800e3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d2:	f383 8811 	msr	BASEPRI, r3
 800e3d6:	f3bf 8f6f 	isb	sy
 800e3da:	f3bf 8f4f 	dsb	sy
 800e3de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e3e0:	bf00      	nop
 800e3e2:	e7fe      	b.n	800e3e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	2b02      	cmp	r3, #2
 800e3e8:	d103      	bne.n	800e3f2 <xQueueGenericSend+0x6e>
 800e3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d101      	bne.n	800e3f6 <xQueueGenericSend+0x72>
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	e000      	b.n	800e3f8 <xQueueGenericSend+0x74>
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d10a      	bne.n	800e412 <xQueueGenericSend+0x8e>
	__asm volatile
 800e3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e400:	f383 8811 	msr	BASEPRI, r3
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	f3bf 8f4f 	dsb	sy
 800e40c:	623b      	str	r3, [r7, #32]
}
 800e40e:	bf00      	nop
 800e410:	e7fe      	b.n	800e410 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e412:	f001 f9b3 	bl	800f77c <xTaskGetSchedulerState>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d102      	bne.n	800e422 <xQueueGenericSend+0x9e>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d101      	bne.n	800e426 <xQueueGenericSend+0xa2>
 800e422:	2301      	movs	r3, #1
 800e424:	e000      	b.n	800e428 <xQueueGenericSend+0xa4>
 800e426:	2300      	movs	r3, #0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10a      	bne.n	800e442 <xQueueGenericSend+0xbe>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e430:	f383 8811 	msr	BASEPRI, r3
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	61fb      	str	r3, [r7, #28]
}
 800e43e:	bf00      	nop
 800e440:	e7fe      	b.n	800e440 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e442:	f002 f9af 	bl	80107a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e44e:	429a      	cmp	r2, r3
 800e450:	d302      	bcc.n	800e458 <xQueueGenericSend+0xd4>
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	2b02      	cmp	r3, #2
 800e456:	d129      	bne.n	800e4ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e458:	683a      	ldr	r2, [r7, #0]
 800e45a:	68b9      	ldr	r1, [r7, #8]
 800e45c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e45e:	f000 fa0b 	bl	800e878 <prvCopyDataToQueue>
 800e462:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d010      	beq.n	800e48e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46e:	3324      	adds	r3, #36	; 0x24
 800e470:	4618      	mov	r0, r3
 800e472:	f000 ffc1 	bl	800f3f8 <xTaskRemoveFromEventList>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d013      	beq.n	800e4a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e47c:	4b3f      	ldr	r3, [pc, #252]	; (800e57c <xQueueGenericSend+0x1f8>)
 800e47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e482:	601a      	str	r2, [r3, #0]
 800e484:	f3bf 8f4f 	dsb	sy
 800e488:	f3bf 8f6f 	isb	sy
 800e48c:	e00a      	b.n	800e4a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e490:	2b00      	cmp	r3, #0
 800e492:	d007      	beq.n	800e4a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e494:	4b39      	ldr	r3, [pc, #228]	; (800e57c <xQueueGenericSend+0x1f8>)
 800e496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e49a:	601a      	str	r2, [r3, #0]
 800e49c:	f3bf 8f4f 	dsb	sy
 800e4a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e4a4:	f002 f9ae 	bl	8010804 <vPortExitCritical>
				return pdPASS;
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	e063      	b.n	800e574 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d103      	bne.n	800e4ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e4b2:	f002 f9a7 	bl	8010804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	e05c      	b.n	800e574 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d106      	bne.n	800e4ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4c0:	f107 0314 	add.w	r3, r7, #20
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f000 fffb 	bl	800f4c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e4ce:	f002 f999 	bl	8010804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e4d2:	f000 fd67 	bl	800efa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4d6:	f002 f965 	bl	80107a4 <vPortEnterCritical>
 800e4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4e0:	b25b      	sxtb	r3, r3
 800e4e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4e6:	d103      	bne.n	800e4f0 <xQueueGenericSend+0x16c>
 800e4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4f6:	b25b      	sxtb	r3, r3
 800e4f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4fc:	d103      	bne.n	800e506 <xQueueGenericSend+0x182>
 800e4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e500:	2200      	movs	r2, #0
 800e502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e506:	f002 f97d 	bl	8010804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e50a:	1d3a      	adds	r2, r7, #4
 800e50c:	f107 0314 	add.w	r3, r7, #20
 800e510:	4611      	mov	r1, r2
 800e512:	4618      	mov	r0, r3
 800e514:	f000 ffea 	bl	800f4ec <xTaskCheckForTimeOut>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d124      	bne.n	800e568 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e51e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e520:	f000 faa2 	bl	800ea68 <prvIsQueueFull>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d018      	beq.n	800e55c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52c:	3310      	adds	r3, #16
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	4611      	mov	r1, r2
 800e532:	4618      	mov	r0, r3
 800e534:	f000 ff10 	bl	800f358 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e53a:	f000 fa2d 	bl	800e998 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e53e:	f000 fd3f 	bl	800efc0 <xTaskResumeAll>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	f47f af7c 	bne.w	800e442 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e54a:	4b0c      	ldr	r3, [pc, #48]	; (800e57c <xQueueGenericSend+0x1f8>)
 800e54c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e550:	601a      	str	r2, [r3, #0]
 800e552:	f3bf 8f4f 	dsb	sy
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	e772      	b.n	800e442 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e55c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e55e:	f000 fa1b 	bl	800e998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e562:	f000 fd2d 	bl	800efc0 <xTaskResumeAll>
 800e566:	e76c      	b.n	800e442 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e56a:	f000 fa15 	bl	800e998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e56e:	f000 fd27 	bl	800efc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e572:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e574:	4618      	mov	r0, r3
 800e576:	3738      	adds	r7, #56	; 0x38
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	e000ed04 	.word	0xe000ed04

0800e580 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b090      	sub	sp, #64	; 0x40
 800e584:	af00      	add	r7, sp, #0
 800e586:	60f8      	str	r0, [r7, #12]
 800e588:	60b9      	str	r1, [r7, #8]
 800e58a:	607a      	str	r2, [r7, #4]
 800e58c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e594:	2b00      	cmp	r3, #0
 800e596:	d10a      	bne.n	800e5ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59c:	f383 8811 	msr	BASEPRI, r3
 800e5a0:	f3bf 8f6f 	isb	sy
 800e5a4:	f3bf 8f4f 	dsb	sy
 800e5a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e5aa:	bf00      	nop
 800e5ac:	e7fe      	b.n	800e5ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d103      	bne.n	800e5bc <xQueueGenericSendFromISR+0x3c>
 800e5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d101      	bne.n	800e5c0 <xQueueGenericSendFromISR+0x40>
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e000      	b.n	800e5c2 <xQueueGenericSendFromISR+0x42>
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10a      	bne.n	800e5dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ca:	f383 8811 	msr	BASEPRI, r3
 800e5ce:	f3bf 8f6f 	isb	sy
 800e5d2:	f3bf 8f4f 	dsb	sy
 800e5d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e5d8:	bf00      	nop
 800e5da:	e7fe      	b.n	800e5da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	d103      	bne.n	800e5ea <xQueueGenericSendFromISR+0x6a>
 800e5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d101      	bne.n	800e5ee <xQueueGenericSendFromISR+0x6e>
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e000      	b.n	800e5f0 <xQueueGenericSendFromISR+0x70>
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d10a      	bne.n	800e60a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f8:	f383 8811 	msr	BASEPRI, r3
 800e5fc:	f3bf 8f6f 	isb	sy
 800e600:	f3bf 8f4f 	dsb	sy
 800e604:	623b      	str	r3, [r7, #32]
}
 800e606:	bf00      	nop
 800e608:	e7fe      	b.n	800e608 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e60a:	f002 f9ad 	bl	8010968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e60e:	f3ef 8211 	mrs	r2, BASEPRI
 800e612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e616:	f383 8811 	msr	BASEPRI, r3
 800e61a:	f3bf 8f6f 	isb	sy
 800e61e:	f3bf 8f4f 	dsb	sy
 800e622:	61fa      	str	r2, [r7, #28]
 800e624:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e626:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e628:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e632:	429a      	cmp	r2, r3
 800e634:	d302      	bcc.n	800e63c <xQueueGenericSendFromISR+0xbc>
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	2b02      	cmp	r3, #2
 800e63a:	d12f      	bne.n	800e69c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e64a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e64c:	683a      	ldr	r2, [r7, #0]
 800e64e:	68b9      	ldr	r1, [r7, #8]
 800e650:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e652:	f000 f911 	bl	800e878 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e656:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e65a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e65e:	d112      	bne.n	800e686 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e664:	2b00      	cmp	r3, #0
 800e666:	d016      	beq.n	800e696 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66a:	3324      	adds	r3, #36	; 0x24
 800e66c:	4618      	mov	r0, r3
 800e66e:	f000 fec3 	bl	800f3f8 <xTaskRemoveFromEventList>
 800e672:	4603      	mov	r3, r0
 800e674:	2b00      	cmp	r3, #0
 800e676:	d00e      	beq.n	800e696 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00b      	beq.n	800e696 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2201      	movs	r2, #1
 800e682:	601a      	str	r2, [r3, #0]
 800e684:	e007      	b.n	800e696 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e686:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e68a:	3301      	adds	r3, #1
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	b25a      	sxtb	r2, r3
 800e690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e696:	2301      	movs	r3, #1
 800e698:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e69a:	e001      	b.n	800e6a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e69c:	2300      	movs	r3, #0
 800e69e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e6aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3740      	adds	r7, #64	; 0x40
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
	...

0800e6b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b08c      	sub	sp, #48	; 0x30
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d10a      	bne.n	800e6e8 <xQueueReceive+0x30>
	__asm volatile
 800e6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d6:	f383 8811 	msr	BASEPRI, r3
 800e6da:	f3bf 8f6f 	isb	sy
 800e6de:	f3bf 8f4f 	dsb	sy
 800e6e2:	623b      	str	r3, [r7, #32]
}
 800e6e4:	bf00      	nop
 800e6e6:	e7fe      	b.n	800e6e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d103      	bne.n	800e6f6 <xQueueReceive+0x3e>
 800e6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d101      	bne.n	800e6fa <xQueueReceive+0x42>
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	e000      	b.n	800e6fc <xQueueReceive+0x44>
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d10a      	bne.n	800e716 <xQueueReceive+0x5e>
	__asm volatile
 800e700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e704:	f383 8811 	msr	BASEPRI, r3
 800e708:	f3bf 8f6f 	isb	sy
 800e70c:	f3bf 8f4f 	dsb	sy
 800e710:	61fb      	str	r3, [r7, #28]
}
 800e712:	bf00      	nop
 800e714:	e7fe      	b.n	800e714 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e716:	f001 f831 	bl	800f77c <xTaskGetSchedulerState>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d102      	bne.n	800e726 <xQueueReceive+0x6e>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d101      	bne.n	800e72a <xQueueReceive+0x72>
 800e726:	2301      	movs	r3, #1
 800e728:	e000      	b.n	800e72c <xQueueReceive+0x74>
 800e72a:	2300      	movs	r3, #0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d10a      	bne.n	800e746 <xQueueReceive+0x8e>
	__asm volatile
 800e730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e734:	f383 8811 	msr	BASEPRI, r3
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	61bb      	str	r3, [r7, #24]
}
 800e742:	bf00      	nop
 800e744:	e7fe      	b.n	800e744 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e746:	f002 f82d 	bl	80107a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e74e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e752:	2b00      	cmp	r3, #0
 800e754:	d01f      	beq.n	800e796 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e756:	68b9      	ldr	r1, [r7, #8]
 800e758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e75a:	f000 f8f7 	bl	800e94c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e760:	1e5a      	subs	r2, r3, #1
 800e762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e764:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00f      	beq.n	800e78e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e770:	3310      	adds	r3, #16
 800e772:	4618      	mov	r0, r3
 800e774:	f000 fe40 	bl	800f3f8 <xTaskRemoveFromEventList>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d007      	beq.n	800e78e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e77e:	4b3d      	ldr	r3, [pc, #244]	; (800e874 <xQueueReceive+0x1bc>)
 800e780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e784:	601a      	str	r2, [r3, #0]
 800e786:	f3bf 8f4f 	dsb	sy
 800e78a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e78e:	f002 f839 	bl	8010804 <vPortExitCritical>
				return pdPASS;
 800e792:	2301      	movs	r3, #1
 800e794:	e069      	b.n	800e86a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d103      	bne.n	800e7a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e79c:	f002 f832 	bl	8010804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	e062      	b.n	800e86a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d106      	bne.n	800e7b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e7aa:	f107 0310 	add.w	r3, r7, #16
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f000 fe86 	bl	800f4c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e7b8:	f002 f824 	bl	8010804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e7bc:	f000 fbf2 	bl	800efa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e7c0:	f001 fff0 	bl	80107a4 <vPortEnterCritical>
 800e7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e7ca:	b25b      	sxtb	r3, r3
 800e7cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7d0:	d103      	bne.n	800e7da <xQueueReceive+0x122>
 800e7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7e0:	b25b      	sxtb	r3, r3
 800e7e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7e6:	d103      	bne.n	800e7f0 <xQueueReceive+0x138>
 800e7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7f0:	f002 f808 	bl	8010804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e7f4:	1d3a      	adds	r2, r7, #4
 800e7f6:	f107 0310 	add.w	r3, r7, #16
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f000 fe75 	bl	800f4ec <xTaskCheckForTimeOut>
 800e802:	4603      	mov	r3, r0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d123      	bne.n	800e850 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e80a:	f000 f917 	bl	800ea3c <prvIsQueueEmpty>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d017      	beq.n	800e844 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e816:	3324      	adds	r3, #36	; 0x24
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	4611      	mov	r1, r2
 800e81c:	4618      	mov	r0, r3
 800e81e:	f000 fd9b 	bl	800f358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e824:	f000 f8b8 	bl	800e998 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e828:	f000 fbca 	bl	800efc0 <xTaskResumeAll>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d189      	bne.n	800e746 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e832:	4b10      	ldr	r3, [pc, #64]	; (800e874 <xQueueReceive+0x1bc>)
 800e834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e838:	601a      	str	r2, [r3, #0]
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	f3bf 8f6f 	isb	sy
 800e842:	e780      	b.n	800e746 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e846:	f000 f8a7 	bl	800e998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e84a:	f000 fbb9 	bl	800efc0 <xTaskResumeAll>
 800e84e:	e77a      	b.n	800e746 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e852:	f000 f8a1 	bl	800e998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e856:	f000 fbb3 	bl	800efc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e85a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e85c:	f000 f8ee 	bl	800ea3c <prvIsQueueEmpty>
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	f43f af6f 	beq.w	800e746 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e868:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3730      	adds	r7, #48	; 0x30
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	e000ed04 	.word	0xe000ed04

0800e878 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b086      	sub	sp, #24
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e884:	2300      	movs	r3, #0
 800e886:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e88c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e892:	2b00      	cmp	r3, #0
 800e894:	d10d      	bne.n	800e8b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d14d      	bne.n	800e93a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	689b      	ldr	r3, [r3, #8]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f000 ff88 	bl	800f7b8 <xTaskPriorityDisinherit>
 800e8a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	609a      	str	r2, [r3, #8]
 800e8b0:	e043      	b.n	800e93a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d119      	bne.n	800e8ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6858      	ldr	r0, [r3, #4]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	68b9      	ldr	r1, [r7, #8]
 800e8c4:	f003 fc16 	bl	80120f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	685a      	ldr	r2, [r3, #4]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d0:	441a      	add	r2, r3
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	685a      	ldr	r2, [r3, #4]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d32b      	bcc.n	800e93a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	605a      	str	r2, [r3, #4]
 800e8ea:	e026      	b.n	800e93a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	68d8      	ldr	r0, [r3, #12]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	68b9      	ldr	r1, [r7, #8]
 800e8f8:	f003 fbfc 	bl	80120f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	68da      	ldr	r2, [r3, #12]
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e904:	425b      	negs	r3, r3
 800e906:	441a      	add	r2, r3
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	68da      	ldr	r2, [r3, #12]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	429a      	cmp	r2, r3
 800e916:	d207      	bcs.n	800e928 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	689a      	ldr	r2, [r3, #8]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e920:	425b      	negs	r3, r3
 800e922:	441a      	add	r2, r3
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b02      	cmp	r3, #2
 800e92c:	d105      	bne.n	800e93a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d002      	beq.n	800e93a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	3b01      	subs	r3, #1
 800e938:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	1c5a      	adds	r2, r3, #1
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e942:	697b      	ldr	r3, [r7, #20]
}
 800e944:	4618      	mov	r0, r3
 800e946:	3718      	adds	r7, #24
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d018      	beq.n	800e990 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	68da      	ldr	r2, [r3, #12]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e966:	441a      	add	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	68da      	ldr	r2, [r3, #12]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	429a      	cmp	r2, r3
 800e976:	d303      	bcc.n	800e980 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	68d9      	ldr	r1, [r3, #12]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e988:	461a      	mov	r2, r3
 800e98a:	6838      	ldr	r0, [r7, #0]
 800e98c:	f003 fbb2 	bl	80120f4 <memcpy>
	}
}
 800e990:	bf00      	nop
 800e992:	3708      	adds	r7, #8
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e9a0:	f001 ff00 	bl	80107a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9ac:	e011      	b.n	800e9d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d012      	beq.n	800e9dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	3324      	adds	r3, #36	; 0x24
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f000 fd1c 	bl	800f3f8 <xTaskRemoveFromEventList>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d001      	beq.n	800e9ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e9c6:	f000 fdf3 	bl	800f5b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e9ca:	7bfb      	ldrb	r3, [r7, #15]
 800e9cc:	3b01      	subs	r3, #1
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	dce9      	bgt.n	800e9ae <prvUnlockQueue+0x16>
 800e9da:	e000      	b.n	800e9de <prvUnlockQueue+0x46>
					break;
 800e9dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	22ff      	movs	r2, #255	; 0xff
 800e9e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e9e6:	f001 ff0d 	bl	8010804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e9ea:	f001 fedb 	bl	80107a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e9f6:	e011      	b.n	800ea1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	691b      	ldr	r3, [r3, #16]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d012      	beq.n	800ea26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	3310      	adds	r3, #16
 800ea04:	4618      	mov	r0, r3
 800ea06:	f000 fcf7 	bl	800f3f8 <xTaskRemoveFromEventList>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d001      	beq.n	800ea14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ea10:	f000 fdce 	bl	800f5b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ea14:	7bbb      	ldrb	r3, [r7, #14]
 800ea16:	3b01      	subs	r3, #1
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	dce9      	bgt.n	800e9f8 <prvUnlockQueue+0x60>
 800ea24:	e000      	b.n	800ea28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ea26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	22ff      	movs	r2, #255	; 0xff
 800ea2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ea30:	f001 fee8 	bl	8010804 <vPortExitCritical>
}
 800ea34:	bf00      	nop
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea44:	f001 feae 	bl	80107a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d102      	bne.n	800ea56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ea50:	2301      	movs	r3, #1
 800ea52:	60fb      	str	r3, [r7, #12]
 800ea54:	e001      	b.n	800ea5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ea56:	2300      	movs	r3, #0
 800ea58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea5a:	f001 fed3 	bl	8010804 <vPortExitCritical>

	return xReturn;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea70:	f001 fe98 	bl	80107a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d102      	bne.n	800ea86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ea80:	2301      	movs	r3, #1
 800ea82:	60fb      	str	r3, [r7, #12]
 800ea84:	e001      	b.n	800ea8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ea86:	2300      	movs	r3, #0
 800ea88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea8a:	f001 febb 	bl	8010804 <vPortExitCritical>

	return xReturn;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3710      	adds	r7, #16
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ea98:	b480      	push	{r7}
 800ea9a:	b085      	sub	sp, #20
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	60fb      	str	r3, [r7, #12]
 800eaa6:	e014      	b.n	800ead2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eaa8:	4a0f      	ldr	r2, [pc, #60]	; (800eae8 <vQueueAddToRegistry+0x50>)
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d10b      	bne.n	800eacc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eab4:	490c      	ldr	r1, [pc, #48]	; (800eae8 <vQueueAddToRegistry+0x50>)
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	683a      	ldr	r2, [r7, #0]
 800eaba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eabe:	4a0a      	ldr	r2, [pc, #40]	; (800eae8 <vQueueAddToRegistry+0x50>)
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	00db      	lsls	r3, r3, #3
 800eac4:	4413      	add	r3, r2
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eaca:	e006      	b.n	800eada <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	3301      	adds	r3, #1
 800ead0:	60fb      	str	r3, [r7, #12]
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2b07      	cmp	r3, #7
 800ead6:	d9e7      	bls.n	800eaa8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ead8:	bf00      	nop
 800eada:	bf00      	nop
 800eadc:	3714      	adds	r7, #20
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	20003f50 	.word	0x20003f50

0800eaec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	60f8      	str	r0, [r7, #12]
 800eaf4:	60b9      	str	r1, [r7, #8]
 800eaf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eafc:	f001 fe52 	bl	80107a4 <vPortEnterCritical>
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb06:	b25b      	sxtb	r3, r3
 800eb08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb0c:	d103      	bne.n	800eb16 <vQueueWaitForMessageRestricted+0x2a>
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	2200      	movs	r2, #0
 800eb12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb1c:	b25b      	sxtb	r3, r3
 800eb1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb22:	d103      	bne.n	800eb2c <vQueueWaitForMessageRestricted+0x40>
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	2200      	movs	r2, #0
 800eb28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb2c:	f001 fe6a 	bl	8010804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d106      	bne.n	800eb46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	3324      	adds	r3, #36	; 0x24
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	68b9      	ldr	r1, [r7, #8]
 800eb40:	4618      	mov	r0, r3
 800eb42:	f000 fc2d 	bl	800f3a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eb46:	6978      	ldr	r0, [r7, #20]
 800eb48:	f7ff ff26 	bl	800e998 <prvUnlockQueue>
	}
 800eb4c:	bf00      	nop
 800eb4e:	3718      	adds	r7, #24
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b08e      	sub	sp, #56	; 0x38
 800eb58:	af04      	add	r7, sp, #16
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	607a      	str	r2, [r7, #4]
 800eb60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eb62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d10a      	bne.n	800eb7e <xTaskCreateStatic+0x2a>
	__asm volatile
 800eb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb6c:	f383 8811 	msr	BASEPRI, r3
 800eb70:	f3bf 8f6f 	isb	sy
 800eb74:	f3bf 8f4f 	dsb	sy
 800eb78:	623b      	str	r3, [r7, #32]
}
 800eb7a:	bf00      	nop
 800eb7c:	e7fe      	b.n	800eb7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800eb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d10a      	bne.n	800eb9a <xTaskCreateStatic+0x46>
	__asm volatile
 800eb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb88:	f383 8811 	msr	BASEPRI, r3
 800eb8c:	f3bf 8f6f 	isb	sy
 800eb90:	f3bf 8f4f 	dsb	sy
 800eb94:	61fb      	str	r3, [r7, #28]
}
 800eb96:	bf00      	nop
 800eb98:	e7fe      	b.n	800eb98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eb9a:	23bc      	movs	r3, #188	; 0xbc
 800eb9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	2bbc      	cmp	r3, #188	; 0xbc
 800eba2:	d00a      	beq.n	800ebba <xTaskCreateStatic+0x66>
	__asm volatile
 800eba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba8:	f383 8811 	msr	BASEPRI, r3
 800ebac:	f3bf 8f6f 	isb	sy
 800ebb0:	f3bf 8f4f 	dsb	sy
 800ebb4:	61bb      	str	r3, [r7, #24]
}
 800ebb6:	bf00      	nop
 800ebb8:	e7fe      	b.n	800ebb8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ebba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ebbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d01e      	beq.n	800ec00 <xTaskCreateStatic+0xac>
 800ebc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d01b      	beq.n	800ec00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ebc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ebcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebd0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ebd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd4:	2202      	movs	r2, #2
 800ebd6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ebda:	2300      	movs	r3, #0
 800ebdc:	9303      	str	r3, [sp, #12]
 800ebde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe0:	9302      	str	r3, [sp, #8]
 800ebe2:	f107 0314 	add.w	r3, r7, #20
 800ebe6:	9301      	str	r3, [sp, #4]
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	68b9      	ldr	r1, [r7, #8]
 800ebf2:	68f8      	ldr	r0, [r7, #12]
 800ebf4:	f000 f850 	bl	800ec98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ebf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebfa:	f000 f8f3 	bl	800ede4 <prvAddNewTaskToReadyList>
 800ebfe:	e001      	b.n	800ec04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ec00:	2300      	movs	r3, #0
 800ec02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ec04:	697b      	ldr	r3, [r7, #20]
	}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3728      	adds	r7, #40	; 0x28
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}

0800ec0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b08c      	sub	sp, #48	; 0x30
 800ec12:	af04      	add	r7, sp, #16
 800ec14:	60f8      	str	r0, [r7, #12]
 800ec16:	60b9      	str	r1, [r7, #8]
 800ec18:	603b      	str	r3, [r7, #0]
 800ec1a:	4613      	mov	r3, r2
 800ec1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec1e:	88fb      	ldrh	r3, [r7, #6]
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4618      	mov	r0, r3
 800ec24:	f001 fee0 	bl	80109e8 <pvPortMalloc>
 800ec28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d00e      	beq.n	800ec4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ec30:	20bc      	movs	r0, #188	; 0xbc
 800ec32:	f001 fed9 	bl	80109e8 <pvPortMalloc>
 800ec36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d003      	beq.n	800ec46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	697a      	ldr	r2, [r7, #20]
 800ec42:	631a      	str	r2, [r3, #48]	; 0x30
 800ec44:	e005      	b.n	800ec52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ec46:	6978      	ldr	r0, [r7, #20]
 800ec48:	f001 ff9a 	bl	8010b80 <vPortFree>
 800ec4c:	e001      	b.n	800ec52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d017      	beq.n	800ec88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ec60:	88fa      	ldrh	r2, [r7, #6]
 800ec62:	2300      	movs	r3, #0
 800ec64:	9303      	str	r3, [sp, #12]
 800ec66:	69fb      	ldr	r3, [r7, #28]
 800ec68:	9302      	str	r3, [sp, #8]
 800ec6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6c:	9301      	str	r3, [sp, #4]
 800ec6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec70:	9300      	str	r3, [sp, #0]
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	68b9      	ldr	r1, [r7, #8]
 800ec76:	68f8      	ldr	r0, [r7, #12]
 800ec78:	f000 f80e 	bl	800ec98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec7c:	69f8      	ldr	r0, [r7, #28]
 800ec7e:	f000 f8b1 	bl	800ede4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ec82:	2301      	movs	r3, #1
 800ec84:	61bb      	str	r3, [r7, #24]
 800ec86:	e002      	b.n	800ec8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ec88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ec8e:	69bb      	ldr	r3, [r7, #24]
	}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3720      	adds	r7, #32
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b088      	sub	sp, #32
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
 800eca4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	461a      	mov	r2, r3
 800ecb0:	21a5      	movs	r1, #165	; 0xa5
 800ecb2:	f003 fa2d 	bl	8012110 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ecb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	4413      	add	r3, r2
 800ecc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	f023 0307 	bic.w	r3, r3, #7
 800ecce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	f003 0307 	and.w	r3, r3, #7
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00a      	beq.n	800ecf0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ecda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecde:	f383 8811 	msr	BASEPRI, r3
 800ece2:	f3bf 8f6f 	isb	sy
 800ece6:	f3bf 8f4f 	dsb	sy
 800ecea:	617b      	str	r3, [r7, #20]
}
 800ecec:	bf00      	nop
 800ecee:	e7fe      	b.n	800ecee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d01f      	beq.n	800ed36 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	61fb      	str	r3, [r7, #28]
 800ecfa:	e012      	b.n	800ed22 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ecfc:	68ba      	ldr	r2, [r7, #8]
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	4413      	add	r3, r2
 800ed02:	7819      	ldrb	r1, [r3, #0]
 800ed04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed06:	69fb      	ldr	r3, [r7, #28]
 800ed08:	4413      	add	r3, r2
 800ed0a:	3334      	adds	r3, #52	; 0x34
 800ed0c:	460a      	mov	r2, r1
 800ed0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ed10:	68ba      	ldr	r2, [r7, #8]
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	4413      	add	r3, r2
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d006      	beq.n	800ed2a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	61fb      	str	r3, [r7, #28]
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	2b0f      	cmp	r3, #15
 800ed26:	d9e9      	bls.n	800ecfc <prvInitialiseNewTask+0x64>
 800ed28:	e000      	b.n	800ed2c <prvInitialiseNewTask+0x94>
			{
				break;
 800ed2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed34:	e003      	b.n	800ed3e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ed36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed40:	2b37      	cmp	r3, #55	; 0x37
 800ed42:	d901      	bls.n	800ed48 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed44:	2337      	movs	r3, #55	; 0x37
 800ed46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ed48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ed4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ed54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed56:	2200      	movs	r2, #0
 800ed58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ed5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5c:	3304      	adds	r3, #4
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7ff f8f2 	bl	800df48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ed64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed66:	3318      	adds	r3, #24
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7ff f8ed 	bl	800df48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ed84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed86:	2200      	movs	r2, #0
 800ed88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ed8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ed94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed96:	3354      	adds	r3, #84	; 0x54
 800ed98:	2260      	movs	r2, #96	; 0x60
 800ed9a:	2100      	movs	r1, #0
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f003 f9b7 	bl	8012110 <memset>
 800eda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda4:	4a0c      	ldr	r2, [pc, #48]	; (800edd8 <prvInitialiseNewTask+0x140>)
 800eda6:	659a      	str	r2, [r3, #88]	; 0x58
 800eda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edaa:	4a0c      	ldr	r2, [pc, #48]	; (800eddc <prvInitialiseNewTask+0x144>)
 800edac:	65da      	str	r2, [r3, #92]	; 0x5c
 800edae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb0:	4a0b      	ldr	r2, [pc, #44]	; (800ede0 <prvInitialiseNewTask+0x148>)
 800edb2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800edb4:	683a      	ldr	r2, [r7, #0]
 800edb6:	68f9      	ldr	r1, [r7, #12]
 800edb8:	69b8      	ldr	r0, [r7, #24]
 800edba:	f001 fbc9 	bl	8010550 <pxPortInitialiseStack>
 800edbe:	4602      	mov	r2, r0
 800edc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800edc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d002      	beq.n	800edd0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800edca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800edd0:	bf00      	nop
 800edd2:	3720      	adds	r7, #32
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	08012554 	.word	0x08012554
 800eddc:	08012574 	.word	0x08012574
 800ede0:	08012534 	.word	0x08012534

0800ede4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800edec:	f001 fcda 	bl	80107a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800edf0:	4b2d      	ldr	r3, [pc, #180]	; (800eea8 <prvAddNewTaskToReadyList+0xc4>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	3301      	adds	r3, #1
 800edf6:	4a2c      	ldr	r2, [pc, #176]	; (800eea8 <prvAddNewTaskToReadyList+0xc4>)
 800edf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800edfa:	4b2c      	ldr	r3, [pc, #176]	; (800eeac <prvAddNewTaskToReadyList+0xc8>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d109      	bne.n	800ee16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ee02:	4a2a      	ldr	r2, [pc, #168]	; (800eeac <prvAddNewTaskToReadyList+0xc8>)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ee08:	4b27      	ldr	r3, [pc, #156]	; (800eea8 <prvAddNewTaskToReadyList+0xc4>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d110      	bne.n	800ee32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ee10:	f000 fbf2 	bl	800f5f8 <prvInitialiseTaskLists>
 800ee14:	e00d      	b.n	800ee32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ee16:	4b26      	ldr	r3, [pc, #152]	; (800eeb0 <prvAddNewTaskToReadyList+0xcc>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d109      	bne.n	800ee32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ee1e:	4b23      	ldr	r3, [pc, #140]	; (800eeac <prvAddNewTaskToReadyList+0xc8>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d802      	bhi.n	800ee32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ee2c:	4a1f      	ldr	r2, [pc, #124]	; (800eeac <prvAddNewTaskToReadyList+0xc8>)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ee32:	4b20      	ldr	r3, [pc, #128]	; (800eeb4 <prvAddNewTaskToReadyList+0xd0>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	3301      	adds	r3, #1
 800ee38:	4a1e      	ldr	r2, [pc, #120]	; (800eeb4 <prvAddNewTaskToReadyList+0xd0>)
 800ee3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ee3c:	4b1d      	ldr	r3, [pc, #116]	; (800eeb4 <prvAddNewTaskToReadyList+0xd0>)
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee48:	4b1b      	ldr	r3, [pc, #108]	; (800eeb8 <prvAddNewTaskToReadyList+0xd4>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d903      	bls.n	800ee58 <prvAddNewTaskToReadyList+0x74>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee54:	4a18      	ldr	r2, [pc, #96]	; (800eeb8 <prvAddNewTaskToReadyList+0xd4>)
 800ee56:	6013      	str	r3, [r2, #0]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	4413      	add	r3, r2
 800ee62:	009b      	lsls	r3, r3, #2
 800ee64:	4a15      	ldr	r2, [pc, #84]	; (800eebc <prvAddNewTaskToReadyList+0xd8>)
 800ee66:	441a      	add	r2, r3
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	3304      	adds	r3, #4
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	4610      	mov	r0, r2
 800ee70:	f7ff f877 	bl	800df62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ee74:	f001 fcc6 	bl	8010804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ee78:	4b0d      	ldr	r3, [pc, #52]	; (800eeb0 <prvAddNewTaskToReadyList+0xcc>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d00e      	beq.n	800ee9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ee80:	4b0a      	ldr	r3, [pc, #40]	; (800eeac <prvAddNewTaskToReadyList+0xc8>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d207      	bcs.n	800ee9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ee8e:	4b0c      	ldr	r3, [pc, #48]	; (800eec0 <prvAddNewTaskToReadyList+0xdc>)
 800ee90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee94:	601a      	str	r2, [r3, #0]
 800ee96:	f3bf 8f4f 	dsb	sy
 800ee9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee9e:	bf00      	nop
 800eea0:	3708      	adds	r7, #8
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	20001144 	.word	0x20001144
 800eeac:	20000c70 	.word	0x20000c70
 800eeb0:	20001150 	.word	0x20001150
 800eeb4:	20001160 	.word	0x20001160
 800eeb8:	2000114c 	.word	0x2000114c
 800eebc:	20000c74 	.word	0x20000c74
 800eec0:	e000ed04 	.word	0xe000ed04

0800eec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b08a      	sub	sp, #40	; 0x28
 800eec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eeca:	2300      	movs	r3, #0
 800eecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eece:	2300      	movs	r3, #0
 800eed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eed2:	463a      	mov	r2, r7
 800eed4:	1d39      	adds	r1, r7, #4
 800eed6:	f107 0308 	add.w	r3, r7, #8
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7fe ffe0 	bl	800dea0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eee0:	6839      	ldr	r1, [r7, #0]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	68ba      	ldr	r2, [r7, #8]
 800eee6:	9202      	str	r2, [sp, #8]
 800eee8:	9301      	str	r3, [sp, #4]
 800eeea:	2300      	movs	r3, #0
 800eeec:	9300      	str	r3, [sp, #0]
 800eeee:	2300      	movs	r3, #0
 800eef0:	460a      	mov	r2, r1
 800eef2:	4924      	ldr	r1, [pc, #144]	; (800ef84 <vTaskStartScheduler+0xc0>)
 800eef4:	4824      	ldr	r0, [pc, #144]	; (800ef88 <vTaskStartScheduler+0xc4>)
 800eef6:	f7ff fe2d 	bl	800eb54 <xTaskCreateStatic>
 800eefa:	4603      	mov	r3, r0
 800eefc:	4a23      	ldr	r2, [pc, #140]	; (800ef8c <vTaskStartScheduler+0xc8>)
 800eefe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ef00:	4b22      	ldr	r3, [pc, #136]	; (800ef8c <vTaskStartScheduler+0xc8>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d002      	beq.n	800ef0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	617b      	str	r3, [r7, #20]
 800ef0c:	e001      	b.n	800ef12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d102      	bne.n	800ef1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ef18:	f000 ff12 	bl	800fd40 <xTimerCreateTimerTask>
 800ef1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d11b      	bne.n	800ef5c <vTaskStartScheduler+0x98>
	__asm volatile
 800ef24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef28:	f383 8811 	msr	BASEPRI, r3
 800ef2c:	f3bf 8f6f 	isb	sy
 800ef30:	f3bf 8f4f 	dsb	sy
 800ef34:	613b      	str	r3, [r7, #16]
}
 800ef36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ef38:	4b15      	ldr	r3, [pc, #84]	; (800ef90 <vTaskStartScheduler+0xcc>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	3354      	adds	r3, #84	; 0x54
 800ef3e:	4a15      	ldr	r2, [pc, #84]	; (800ef94 <vTaskStartScheduler+0xd0>)
 800ef40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ef42:	4b15      	ldr	r3, [pc, #84]	; (800ef98 <vTaskStartScheduler+0xd4>)
 800ef44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ef4a:	4b14      	ldr	r3, [pc, #80]	; (800ef9c <vTaskStartScheduler+0xd8>)
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ef50:	4b13      	ldr	r3, [pc, #76]	; (800efa0 <vTaskStartScheduler+0xdc>)
 800ef52:	2200      	movs	r2, #0
 800ef54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ef56:	f001 fb83 	bl	8010660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ef5a:	e00e      	b.n	800ef7a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef62:	d10a      	bne.n	800ef7a <vTaskStartScheduler+0xb6>
	__asm volatile
 800ef64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef68:	f383 8811 	msr	BASEPRI, r3
 800ef6c:	f3bf 8f6f 	isb	sy
 800ef70:	f3bf 8f4f 	dsb	sy
 800ef74:	60fb      	str	r3, [r7, #12]
}
 800ef76:	bf00      	nop
 800ef78:	e7fe      	b.n	800ef78 <vTaskStartScheduler+0xb4>
}
 800ef7a:	bf00      	nop
 800ef7c:	3718      	adds	r7, #24
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	08012358 	.word	0x08012358
 800ef88:	0800f5c9 	.word	0x0800f5c9
 800ef8c:	20001168 	.word	0x20001168
 800ef90:	20000c70 	.word	0x20000c70
 800ef94:	2000018c 	.word	0x2000018c
 800ef98:	20001164 	.word	0x20001164
 800ef9c:	20001150 	.word	0x20001150
 800efa0:	20001148 	.word	0x20001148

0800efa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800efa4:	b480      	push	{r7}
 800efa6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800efa8:	4b04      	ldr	r3, [pc, #16]	; (800efbc <vTaskSuspendAll+0x18>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	3301      	adds	r3, #1
 800efae:	4a03      	ldr	r2, [pc, #12]	; (800efbc <vTaskSuspendAll+0x18>)
 800efb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800efb2:	bf00      	nop
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr
 800efbc:	2000116c 	.word	0x2000116c

0800efc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800efc6:	2300      	movs	r3, #0
 800efc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800efca:	2300      	movs	r3, #0
 800efcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800efce:	4b42      	ldr	r3, [pc, #264]	; (800f0d8 <xTaskResumeAll+0x118>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d10a      	bne.n	800efec <xTaskResumeAll+0x2c>
	__asm volatile
 800efd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efda:	f383 8811 	msr	BASEPRI, r3
 800efde:	f3bf 8f6f 	isb	sy
 800efe2:	f3bf 8f4f 	dsb	sy
 800efe6:	603b      	str	r3, [r7, #0]
}
 800efe8:	bf00      	nop
 800efea:	e7fe      	b.n	800efea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800efec:	f001 fbda 	bl	80107a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eff0:	4b39      	ldr	r3, [pc, #228]	; (800f0d8 <xTaskResumeAll+0x118>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	3b01      	subs	r3, #1
 800eff6:	4a38      	ldr	r2, [pc, #224]	; (800f0d8 <xTaskResumeAll+0x118>)
 800eff8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800effa:	4b37      	ldr	r3, [pc, #220]	; (800f0d8 <xTaskResumeAll+0x118>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d162      	bne.n	800f0c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f002:	4b36      	ldr	r3, [pc, #216]	; (800f0dc <xTaskResumeAll+0x11c>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d05e      	beq.n	800f0c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f00a:	e02f      	b.n	800f06c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f00c:	4b34      	ldr	r3, [pc, #208]	; (800f0e0 <xTaskResumeAll+0x120>)
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	68db      	ldr	r3, [r3, #12]
 800f012:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	3318      	adds	r3, #24
 800f018:	4618      	mov	r0, r3
 800f01a:	f7fe ffff 	bl	800e01c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	3304      	adds	r3, #4
 800f022:	4618      	mov	r0, r3
 800f024:	f7fe fffa 	bl	800e01c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f02c:	4b2d      	ldr	r3, [pc, #180]	; (800f0e4 <xTaskResumeAll+0x124>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	429a      	cmp	r2, r3
 800f032:	d903      	bls.n	800f03c <xTaskResumeAll+0x7c>
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f038:	4a2a      	ldr	r2, [pc, #168]	; (800f0e4 <xTaskResumeAll+0x124>)
 800f03a:	6013      	str	r3, [r2, #0]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f040:	4613      	mov	r3, r2
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	4413      	add	r3, r2
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	4a27      	ldr	r2, [pc, #156]	; (800f0e8 <xTaskResumeAll+0x128>)
 800f04a:	441a      	add	r2, r3
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	3304      	adds	r3, #4
 800f050:	4619      	mov	r1, r3
 800f052:	4610      	mov	r0, r2
 800f054:	f7fe ff85 	bl	800df62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f05c:	4b23      	ldr	r3, [pc, #140]	; (800f0ec <xTaskResumeAll+0x12c>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f062:	429a      	cmp	r2, r3
 800f064:	d302      	bcc.n	800f06c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f066:	4b22      	ldr	r3, [pc, #136]	; (800f0f0 <xTaskResumeAll+0x130>)
 800f068:	2201      	movs	r2, #1
 800f06a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f06c:	4b1c      	ldr	r3, [pc, #112]	; (800f0e0 <xTaskResumeAll+0x120>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d1cb      	bne.n	800f00c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d001      	beq.n	800f07e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f07a:	f000 fb5f 	bl	800f73c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f07e:	4b1d      	ldr	r3, [pc, #116]	; (800f0f4 <xTaskResumeAll+0x134>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d010      	beq.n	800f0ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f08a:	f000 f847 	bl	800f11c <xTaskIncrementTick>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	d002      	beq.n	800f09a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f094:	4b16      	ldr	r3, [pc, #88]	; (800f0f0 <xTaskResumeAll+0x130>)
 800f096:	2201      	movs	r2, #1
 800f098:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	3b01      	subs	r3, #1
 800f09e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d1f1      	bne.n	800f08a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f0a6:	4b13      	ldr	r3, [pc, #76]	; (800f0f4 <xTaskResumeAll+0x134>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f0ac:	4b10      	ldr	r3, [pc, #64]	; (800f0f0 <xTaskResumeAll+0x130>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d009      	beq.n	800f0c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f0b8:	4b0f      	ldr	r3, [pc, #60]	; (800f0f8 <xTaskResumeAll+0x138>)
 800f0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0be:	601a      	str	r2, [r3, #0]
 800f0c0:	f3bf 8f4f 	dsb	sy
 800f0c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0c8:	f001 fb9c 	bl	8010804 <vPortExitCritical>

	return xAlreadyYielded;
 800f0cc:	68bb      	ldr	r3, [r7, #8]
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3710      	adds	r7, #16
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	2000116c 	.word	0x2000116c
 800f0dc:	20001144 	.word	0x20001144
 800f0e0:	20001104 	.word	0x20001104
 800f0e4:	2000114c 	.word	0x2000114c
 800f0e8:	20000c74 	.word	0x20000c74
 800f0ec:	20000c70 	.word	0x20000c70
 800f0f0:	20001158 	.word	0x20001158
 800f0f4:	20001154 	.word	0x20001154
 800f0f8:	e000ed04 	.word	0xe000ed04

0800f0fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f102:	4b05      	ldr	r3, [pc, #20]	; (800f118 <xTaskGetTickCount+0x1c>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f108:	687b      	ldr	r3, [r7, #4]
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	370c      	adds	r7, #12
 800f10e:	46bd      	mov	sp, r7
 800f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f114:	4770      	bx	lr
 800f116:	bf00      	nop
 800f118:	20001148 	.word	0x20001148

0800f11c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b086      	sub	sp, #24
 800f120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f122:	2300      	movs	r3, #0
 800f124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f126:	4b4f      	ldr	r3, [pc, #316]	; (800f264 <xTaskIncrementTick+0x148>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	f040 808f 	bne.w	800f24e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f130:	4b4d      	ldr	r3, [pc, #308]	; (800f268 <xTaskIncrementTick+0x14c>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	3301      	adds	r3, #1
 800f136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f138:	4a4b      	ldr	r2, [pc, #300]	; (800f268 <xTaskIncrementTick+0x14c>)
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d120      	bne.n	800f186 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f144:	4b49      	ldr	r3, [pc, #292]	; (800f26c <xTaskIncrementTick+0x150>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00a      	beq.n	800f164 <xTaskIncrementTick+0x48>
	__asm volatile
 800f14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f152:	f383 8811 	msr	BASEPRI, r3
 800f156:	f3bf 8f6f 	isb	sy
 800f15a:	f3bf 8f4f 	dsb	sy
 800f15e:	603b      	str	r3, [r7, #0]
}
 800f160:	bf00      	nop
 800f162:	e7fe      	b.n	800f162 <xTaskIncrementTick+0x46>
 800f164:	4b41      	ldr	r3, [pc, #260]	; (800f26c <xTaskIncrementTick+0x150>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	60fb      	str	r3, [r7, #12]
 800f16a:	4b41      	ldr	r3, [pc, #260]	; (800f270 <xTaskIncrementTick+0x154>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	4a3f      	ldr	r2, [pc, #252]	; (800f26c <xTaskIncrementTick+0x150>)
 800f170:	6013      	str	r3, [r2, #0]
 800f172:	4a3f      	ldr	r2, [pc, #252]	; (800f270 <xTaskIncrementTick+0x154>)
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6013      	str	r3, [r2, #0]
 800f178:	4b3e      	ldr	r3, [pc, #248]	; (800f274 <xTaskIncrementTick+0x158>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	3301      	adds	r3, #1
 800f17e:	4a3d      	ldr	r2, [pc, #244]	; (800f274 <xTaskIncrementTick+0x158>)
 800f180:	6013      	str	r3, [r2, #0]
 800f182:	f000 fadb 	bl	800f73c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f186:	4b3c      	ldr	r3, [pc, #240]	; (800f278 <xTaskIncrementTick+0x15c>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	693a      	ldr	r2, [r7, #16]
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d349      	bcc.n	800f224 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f190:	4b36      	ldr	r3, [pc, #216]	; (800f26c <xTaskIncrementTick+0x150>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d104      	bne.n	800f1a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f19a:	4b37      	ldr	r3, [pc, #220]	; (800f278 <xTaskIncrementTick+0x15c>)
 800f19c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1a0:	601a      	str	r2, [r3, #0]
					break;
 800f1a2:	e03f      	b.n	800f224 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1a4:	4b31      	ldr	r3, [pc, #196]	; (800f26c <xTaskIncrementTick+0x150>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f1b4:	693a      	ldr	r2, [r7, #16]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d203      	bcs.n	800f1c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f1bc:	4a2e      	ldr	r2, [pc, #184]	; (800f278 <xTaskIncrementTick+0x15c>)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f1c2:	e02f      	b.n	800f224 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	3304      	adds	r3, #4
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7fe ff27 	bl	800e01c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d004      	beq.n	800f1e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	3318      	adds	r3, #24
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fe ff1e 	bl	800e01c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1e4:	4b25      	ldr	r3, [pc, #148]	; (800f27c <xTaskIncrementTick+0x160>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d903      	bls.n	800f1f4 <xTaskIncrementTick+0xd8>
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f0:	4a22      	ldr	r2, [pc, #136]	; (800f27c <xTaskIncrementTick+0x160>)
 800f1f2:	6013      	str	r3, [r2, #0]
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1f8:	4613      	mov	r3, r2
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	4413      	add	r3, r2
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	4a1f      	ldr	r2, [pc, #124]	; (800f280 <xTaskIncrementTick+0x164>)
 800f202:	441a      	add	r2, r3
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	3304      	adds	r3, #4
 800f208:	4619      	mov	r1, r3
 800f20a:	4610      	mov	r0, r2
 800f20c:	f7fe fea9 	bl	800df62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f214:	4b1b      	ldr	r3, [pc, #108]	; (800f284 <xTaskIncrementTick+0x168>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d3b8      	bcc.n	800f190 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f21e:	2301      	movs	r3, #1
 800f220:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f222:	e7b5      	b.n	800f190 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f224:	4b17      	ldr	r3, [pc, #92]	; (800f284 <xTaskIncrementTick+0x168>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f22a:	4915      	ldr	r1, [pc, #84]	; (800f280 <xTaskIncrementTick+0x164>)
 800f22c:	4613      	mov	r3, r2
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	4413      	add	r3, r2
 800f232:	009b      	lsls	r3, r3, #2
 800f234:	440b      	add	r3, r1
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d901      	bls.n	800f240 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f23c:	2301      	movs	r3, #1
 800f23e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f240:	4b11      	ldr	r3, [pc, #68]	; (800f288 <xTaskIncrementTick+0x16c>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d007      	beq.n	800f258 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f248:	2301      	movs	r3, #1
 800f24a:	617b      	str	r3, [r7, #20]
 800f24c:	e004      	b.n	800f258 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f24e:	4b0f      	ldr	r3, [pc, #60]	; (800f28c <xTaskIncrementTick+0x170>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	3301      	adds	r3, #1
 800f254:	4a0d      	ldr	r2, [pc, #52]	; (800f28c <xTaskIncrementTick+0x170>)
 800f256:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f258:	697b      	ldr	r3, [r7, #20]
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3718      	adds	r7, #24
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	2000116c 	.word	0x2000116c
 800f268:	20001148 	.word	0x20001148
 800f26c:	200010fc 	.word	0x200010fc
 800f270:	20001100 	.word	0x20001100
 800f274:	2000115c 	.word	0x2000115c
 800f278:	20001164 	.word	0x20001164
 800f27c:	2000114c 	.word	0x2000114c
 800f280:	20000c74 	.word	0x20000c74
 800f284:	20000c70 	.word	0x20000c70
 800f288:	20001158 	.word	0x20001158
 800f28c:	20001154 	.word	0x20001154

0800f290 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f290:	b480      	push	{r7}
 800f292:	b085      	sub	sp, #20
 800f294:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f296:	4b2a      	ldr	r3, [pc, #168]	; (800f340 <vTaskSwitchContext+0xb0>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d003      	beq.n	800f2a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f29e:	4b29      	ldr	r3, [pc, #164]	; (800f344 <vTaskSwitchContext+0xb4>)
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f2a4:	e046      	b.n	800f334 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f2a6:	4b27      	ldr	r3, [pc, #156]	; (800f344 <vTaskSwitchContext+0xb4>)
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2ac:	4b26      	ldr	r3, [pc, #152]	; (800f348 <vTaskSwitchContext+0xb8>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	60fb      	str	r3, [r7, #12]
 800f2b2:	e010      	b.n	800f2d6 <vTaskSwitchContext+0x46>
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d10a      	bne.n	800f2d0 <vTaskSwitchContext+0x40>
	__asm volatile
 800f2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2be:	f383 8811 	msr	BASEPRI, r3
 800f2c2:	f3bf 8f6f 	isb	sy
 800f2c6:	f3bf 8f4f 	dsb	sy
 800f2ca:	607b      	str	r3, [r7, #4]
}
 800f2cc:	bf00      	nop
 800f2ce:	e7fe      	b.n	800f2ce <vTaskSwitchContext+0x3e>
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	60fb      	str	r3, [r7, #12]
 800f2d6:	491d      	ldr	r1, [pc, #116]	; (800f34c <vTaskSwitchContext+0xbc>)
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	4613      	mov	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	4413      	add	r3, r2
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	440b      	add	r3, r1
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d0e4      	beq.n	800f2b4 <vTaskSwitchContext+0x24>
 800f2ea:	68fa      	ldr	r2, [r7, #12]
 800f2ec:	4613      	mov	r3, r2
 800f2ee:	009b      	lsls	r3, r3, #2
 800f2f0:	4413      	add	r3, r2
 800f2f2:	009b      	lsls	r3, r3, #2
 800f2f4:	4a15      	ldr	r2, [pc, #84]	; (800f34c <vTaskSwitchContext+0xbc>)
 800f2f6:	4413      	add	r3, r2
 800f2f8:	60bb      	str	r3, [r7, #8]
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	685a      	ldr	r2, [r3, #4]
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	605a      	str	r2, [r3, #4]
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	685a      	ldr	r2, [r3, #4]
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	3308      	adds	r3, #8
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d104      	bne.n	800f31a <vTaskSwitchContext+0x8a>
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	685a      	ldr	r2, [r3, #4]
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	605a      	str	r2, [r3, #4]
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	4a0b      	ldr	r2, [pc, #44]	; (800f350 <vTaskSwitchContext+0xc0>)
 800f322:	6013      	str	r3, [r2, #0]
 800f324:	4a08      	ldr	r2, [pc, #32]	; (800f348 <vTaskSwitchContext+0xb8>)
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f32a:	4b09      	ldr	r3, [pc, #36]	; (800f350 <vTaskSwitchContext+0xc0>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	3354      	adds	r3, #84	; 0x54
 800f330:	4a08      	ldr	r2, [pc, #32]	; (800f354 <vTaskSwitchContext+0xc4>)
 800f332:	6013      	str	r3, [r2, #0]
}
 800f334:	bf00      	nop
 800f336:	3714      	adds	r7, #20
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr
 800f340:	2000116c 	.word	0x2000116c
 800f344:	20001158 	.word	0x20001158
 800f348:	2000114c 	.word	0x2000114c
 800f34c:	20000c74 	.word	0x20000c74
 800f350:	20000c70 	.word	0x20000c70
 800f354:	2000018c 	.word	0x2000018c

0800f358 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d10a      	bne.n	800f37e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36c:	f383 8811 	msr	BASEPRI, r3
 800f370:	f3bf 8f6f 	isb	sy
 800f374:	f3bf 8f4f 	dsb	sy
 800f378:	60fb      	str	r3, [r7, #12]
}
 800f37a:	bf00      	nop
 800f37c:	e7fe      	b.n	800f37c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f37e:	4b07      	ldr	r3, [pc, #28]	; (800f39c <vTaskPlaceOnEventList+0x44>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	3318      	adds	r3, #24
 800f384:	4619      	mov	r1, r3
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f7fe fe0f 	bl	800dfaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f38c:	2101      	movs	r1, #1
 800f38e:	6838      	ldr	r0, [r7, #0]
 800f390:	f000 fc82 	bl	800fc98 <prvAddCurrentTaskToDelayedList>
}
 800f394:	bf00      	nop
 800f396:	3710      	adds	r7, #16
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	20000c70 	.word	0x20000c70

0800f3a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b086      	sub	sp, #24
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d10a      	bne.n	800f3c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b6:	f383 8811 	msr	BASEPRI, r3
 800f3ba:	f3bf 8f6f 	isb	sy
 800f3be:	f3bf 8f4f 	dsb	sy
 800f3c2:	617b      	str	r3, [r7, #20]
}
 800f3c4:	bf00      	nop
 800f3c6:	e7fe      	b.n	800f3c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3c8:	4b0a      	ldr	r3, [pc, #40]	; (800f3f4 <vTaskPlaceOnEventListRestricted+0x54>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	3318      	adds	r3, #24
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	68f8      	ldr	r0, [r7, #12]
 800f3d2:	f7fe fdc6 	bl	800df62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d002      	beq.n	800f3e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f3dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f3e2:	6879      	ldr	r1, [r7, #4]
 800f3e4:	68b8      	ldr	r0, [r7, #8]
 800f3e6:	f000 fc57 	bl	800fc98 <prvAddCurrentTaskToDelayedList>
	}
 800f3ea:	bf00      	nop
 800f3ec:	3718      	adds	r7, #24
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	20000c70 	.word	0x20000c70

0800f3f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b086      	sub	sp, #24
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	68db      	ldr	r3, [r3, #12]
 800f406:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d10a      	bne.n	800f424 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f412:	f383 8811 	msr	BASEPRI, r3
 800f416:	f3bf 8f6f 	isb	sy
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	60fb      	str	r3, [r7, #12]
}
 800f420:	bf00      	nop
 800f422:	e7fe      	b.n	800f422 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	3318      	adds	r3, #24
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fe fdf7 	bl	800e01c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f42e:	4b1e      	ldr	r3, [pc, #120]	; (800f4a8 <xTaskRemoveFromEventList+0xb0>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d11d      	bne.n	800f472 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f436:	693b      	ldr	r3, [r7, #16]
 800f438:	3304      	adds	r3, #4
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7fe fdee 	bl	800e01c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f444:	4b19      	ldr	r3, [pc, #100]	; (800f4ac <xTaskRemoveFromEventList+0xb4>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d903      	bls.n	800f454 <xTaskRemoveFromEventList+0x5c>
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f450:	4a16      	ldr	r2, [pc, #88]	; (800f4ac <xTaskRemoveFromEventList+0xb4>)
 800f452:	6013      	str	r3, [r2, #0]
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f458:	4613      	mov	r3, r2
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	4413      	add	r3, r2
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	4a13      	ldr	r2, [pc, #76]	; (800f4b0 <xTaskRemoveFromEventList+0xb8>)
 800f462:	441a      	add	r2, r3
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	3304      	adds	r3, #4
 800f468:	4619      	mov	r1, r3
 800f46a:	4610      	mov	r0, r2
 800f46c:	f7fe fd79 	bl	800df62 <vListInsertEnd>
 800f470:	e005      	b.n	800f47e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	3318      	adds	r3, #24
 800f476:	4619      	mov	r1, r3
 800f478:	480e      	ldr	r0, [pc, #56]	; (800f4b4 <xTaskRemoveFromEventList+0xbc>)
 800f47a:	f7fe fd72 	bl	800df62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f482:	4b0d      	ldr	r3, [pc, #52]	; (800f4b8 <xTaskRemoveFromEventList+0xc0>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f488:	429a      	cmp	r2, r3
 800f48a:	d905      	bls.n	800f498 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f48c:	2301      	movs	r3, #1
 800f48e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f490:	4b0a      	ldr	r3, [pc, #40]	; (800f4bc <xTaskRemoveFromEventList+0xc4>)
 800f492:	2201      	movs	r2, #1
 800f494:	601a      	str	r2, [r3, #0]
 800f496:	e001      	b.n	800f49c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f498:	2300      	movs	r3, #0
 800f49a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f49c:	697b      	ldr	r3, [r7, #20]
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3718      	adds	r7, #24
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	2000116c 	.word	0x2000116c
 800f4ac:	2000114c 	.word	0x2000114c
 800f4b0:	20000c74 	.word	0x20000c74
 800f4b4:	20001104 	.word	0x20001104
 800f4b8:	20000c70 	.word	0x20000c70
 800f4bc:	20001158 	.word	0x20001158

0800f4c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f4c8:	4b06      	ldr	r3, [pc, #24]	; (800f4e4 <vTaskInternalSetTimeOutState+0x24>)
 800f4ca:	681a      	ldr	r2, [r3, #0]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f4d0:	4b05      	ldr	r3, [pc, #20]	; (800f4e8 <vTaskInternalSetTimeOutState+0x28>)
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	605a      	str	r2, [r3, #4]
}
 800f4d8:	bf00      	nop
 800f4da:	370c      	adds	r7, #12
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr
 800f4e4:	2000115c 	.word	0x2000115c
 800f4e8:	20001148 	.word	0x20001148

0800f4ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b088      	sub	sp, #32
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d10a      	bne.n	800f512 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f500:	f383 8811 	msr	BASEPRI, r3
 800f504:	f3bf 8f6f 	isb	sy
 800f508:	f3bf 8f4f 	dsb	sy
 800f50c:	613b      	str	r3, [r7, #16]
}
 800f50e:	bf00      	nop
 800f510:	e7fe      	b.n	800f510 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d10a      	bne.n	800f52e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51c:	f383 8811 	msr	BASEPRI, r3
 800f520:	f3bf 8f6f 	isb	sy
 800f524:	f3bf 8f4f 	dsb	sy
 800f528:	60fb      	str	r3, [r7, #12]
}
 800f52a:	bf00      	nop
 800f52c:	e7fe      	b.n	800f52c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f52e:	f001 f939 	bl	80107a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f532:	4b1d      	ldr	r3, [pc, #116]	; (800f5a8 <xTaskCheckForTimeOut+0xbc>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	69ba      	ldr	r2, [r7, #24]
 800f53e:	1ad3      	subs	r3, r2, r3
 800f540:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f54a:	d102      	bne.n	800f552 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f54c:	2300      	movs	r3, #0
 800f54e:	61fb      	str	r3, [r7, #28]
 800f550:	e023      	b.n	800f59a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	4b15      	ldr	r3, [pc, #84]	; (800f5ac <xTaskCheckForTimeOut+0xc0>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d007      	beq.n	800f56e <xTaskCheckForTimeOut+0x82>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	69ba      	ldr	r2, [r7, #24]
 800f564:	429a      	cmp	r2, r3
 800f566:	d302      	bcc.n	800f56e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f568:	2301      	movs	r3, #1
 800f56a:	61fb      	str	r3, [r7, #28]
 800f56c:	e015      	b.n	800f59a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	697a      	ldr	r2, [r7, #20]
 800f574:	429a      	cmp	r2, r3
 800f576:	d20b      	bcs.n	800f590 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	1ad2      	subs	r2, r2, r3
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f7ff ff9b 	bl	800f4c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f58a:	2300      	movs	r3, #0
 800f58c:	61fb      	str	r3, [r7, #28]
 800f58e:	e004      	b.n	800f59a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	2200      	movs	r2, #0
 800f594:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f596:	2301      	movs	r3, #1
 800f598:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f59a:	f001 f933 	bl	8010804 <vPortExitCritical>

	return xReturn;
 800f59e:	69fb      	ldr	r3, [r7, #28]
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3720      	adds	r7, #32
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	20001148 	.word	0x20001148
 800f5ac:	2000115c 	.word	0x2000115c

0800f5b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f5b4:	4b03      	ldr	r3, [pc, #12]	; (800f5c4 <vTaskMissedYield+0x14>)
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	601a      	str	r2, [r3, #0]
}
 800f5ba:	bf00      	nop
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr
 800f5c4:	20001158 	.word	0x20001158

0800f5c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f5d0:	f000 f852 	bl	800f678 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f5d4:	4b06      	ldr	r3, [pc, #24]	; (800f5f0 <prvIdleTask+0x28>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	d9f9      	bls.n	800f5d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f5dc:	4b05      	ldr	r3, [pc, #20]	; (800f5f4 <prvIdleTask+0x2c>)
 800f5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5e2:	601a      	str	r2, [r3, #0]
 800f5e4:	f3bf 8f4f 	dsb	sy
 800f5e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f5ec:	e7f0      	b.n	800f5d0 <prvIdleTask+0x8>
 800f5ee:	bf00      	nop
 800f5f0:	20000c74 	.word	0x20000c74
 800f5f4:	e000ed04 	.word	0xe000ed04

0800f5f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f5fe:	2300      	movs	r3, #0
 800f600:	607b      	str	r3, [r7, #4]
 800f602:	e00c      	b.n	800f61e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	4613      	mov	r3, r2
 800f608:	009b      	lsls	r3, r3, #2
 800f60a:	4413      	add	r3, r2
 800f60c:	009b      	lsls	r3, r3, #2
 800f60e:	4a12      	ldr	r2, [pc, #72]	; (800f658 <prvInitialiseTaskLists+0x60>)
 800f610:	4413      	add	r3, r2
 800f612:	4618      	mov	r0, r3
 800f614:	f7fe fc78 	bl	800df08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	3301      	adds	r3, #1
 800f61c:	607b      	str	r3, [r7, #4]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2b37      	cmp	r3, #55	; 0x37
 800f622:	d9ef      	bls.n	800f604 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f624:	480d      	ldr	r0, [pc, #52]	; (800f65c <prvInitialiseTaskLists+0x64>)
 800f626:	f7fe fc6f 	bl	800df08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f62a:	480d      	ldr	r0, [pc, #52]	; (800f660 <prvInitialiseTaskLists+0x68>)
 800f62c:	f7fe fc6c 	bl	800df08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f630:	480c      	ldr	r0, [pc, #48]	; (800f664 <prvInitialiseTaskLists+0x6c>)
 800f632:	f7fe fc69 	bl	800df08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f636:	480c      	ldr	r0, [pc, #48]	; (800f668 <prvInitialiseTaskLists+0x70>)
 800f638:	f7fe fc66 	bl	800df08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f63c:	480b      	ldr	r0, [pc, #44]	; (800f66c <prvInitialiseTaskLists+0x74>)
 800f63e:	f7fe fc63 	bl	800df08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f642:	4b0b      	ldr	r3, [pc, #44]	; (800f670 <prvInitialiseTaskLists+0x78>)
 800f644:	4a05      	ldr	r2, [pc, #20]	; (800f65c <prvInitialiseTaskLists+0x64>)
 800f646:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f648:	4b0a      	ldr	r3, [pc, #40]	; (800f674 <prvInitialiseTaskLists+0x7c>)
 800f64a:	4a05      	ldr	r2, [pc, #20]	; (800f660 <prvInitialiseTaskLists+0x68>)
 800f64c:	601a      	str	r2, [r3, #0]
}
 800f64e:	bf00      	nop
 800f650:	3708      	adds	r7, #8
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	20000c74 	.word	0x20000c74
 800f65c:	200010d4 	.word	0x200010d4
 800f660:	200010e8 	.word	0x200010e8
 800f664:	20001104 	.word	0x20001104
 800f668:	20001118 	.word	0x20001118
 800f66c:	20001130 	.word	0x20001130
 800f670:	200010fc 	.word	0x200010fc
 800f674:	20001100 	.word	0x20001100

0800f678 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f67e:	e019      	b.n	800f6b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f680:	f001 f890 	bl	80107a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f684:	4b10      	ldr	r3, [pc, #64]	; (800f6c8 <prvCheckTasksWaitingTermination+0x50>)
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	68db      	ldr	r3, [r3, #12]
 800f68a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	3304      	adds	r3, #4
 800f690:	4618      	mov	r0, r3
 800f692:	f7fe fcc3 	bl	800e01c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f696:	4b0d      	ldr	r3, [pc, #52]	; (800f6cc <prvCheckTasksWaitingTermination+0x54>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	3b01      	subs	r3, #1
 800f69c:	4a0b      	ldr	r2, [pc, #44]	; (800f6cc <prvCheckTasksWaitingTermination+0x54>)
 800f69e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f6a0:	4b0b      	ldr	r3, [pc, #44]	; (800f6d0 <prvCheckTasksWaitingTermination+0x58>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	3b01      	subs	r3, #1
 800f6a6:	4a0a      	ldr	r2, [pc, #40]	; (800f6d0 <prvCheckTasksWaitingTermination+0x58>)
 800f6a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f6aa:	f001 f8ab 	bl	8010804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f000 f810 	bl	800f6d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6b4:	4b06      	ldr	r3, [pc, #24]	; (800f6d0 <prvCheckTasksWaitingTermination+0x58>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d1e1      	bne.n	800f680 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f6bc:	bf00      	nop
 800f6be:	bf00      	nop
 800f6c0:	3708      	adds	r7, #8
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	20001118 	.word	0x20001118
 800f6cc:	20001144 	.word	0x20001144
 800f6d0:	2000112c 	.word	0x2000112c

0800f6d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	3354      	adds	r3, #84	; 0x54
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f002 fd2b 	bl	801213c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d108      	bne.n	800f702 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f001 fa43 	bl	8010b80 <vPortFree>
				vPortFree( pxTCB );
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f001 fa40 	bl	8010b80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f700:	e018      	b.n	800f734 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d103      	bne.n	800f714 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f001 fa37 	bl	8010b80 <vPortFree>
	}
 800f712:	e00f      	b.n	800f734 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f71a:	2b02      	cmp	r3, #2
 800f71c:	d00a      	beq.n	800f734 <prvDeleteTCB+0x60>
	__asm volatile
 800f71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f722:	f383 8811 	msr	BASEPRI, r3
 800f726:	f3bf 8f6f 	isb	sy
 800f72a:	f3bf 8f4f 	dsb	sy
 800f72e:	60fb      	str	r3, [r7, #12]
}
 800f730:	bf00      	nop
 800f732:	e7fe      	b.n	800f732 <prvDeleteTCB+0x5e>
	}
 800f734:	bf00      	nop
 800f736:	3710      	adds	r7, #16
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f73c:	b480      	push	{r7}
 800f73e:	b083      	sub	sp, #12
 800f740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f742:	4b0c      	ldr	r3, [pc, #48]	; (800f774 <prvResetNextTaskUnblockTime+0x38>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d104      	bne.n	800f756 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f74c:	4b0a      	ldr	r3, [pc, #40]	; (800f778 <prvResetNextTaskUnblockTime+0x3c>)
 800f74e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f752:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f754:	e008      	b.n	800f768 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f756:	4b07      	ldr	r3, [pc, #28]	; (800f774 <prvResetNextTaskUnblockTime+0x38>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	68db      	ldr	r3, [r3, #12]
 800f75c:	68db      	ldr	r3, [r3, #12]
 800f75e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	4a04      	ldr	r2, [pc, #16]	; (800f778 <prvResetNextTaskUnblockTime+0x3c>)
 800f766:	6013      	str	r3, [r2, #0]
}
 800f768:	bf00      	nop
 800f76a:	370c      	adds	r7, #12
 800f76c:	46bd      	mov	sp, r7
 800f76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f772:	4770      	bx	lr
 800f774:	200010fc 	.word	0x200010fc
 800f778:	20001164 	.word	0x20001164

0800f77c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f77c:	b480      	push	{r7}
 800f77e:	b083      	sub	sp, #12
 800f780:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f782:	4b0b      	ldr	r3, [pc, #44]	; (800f7b0 <xTaskGetSchedulerState+0x34>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d102      	bne.n	800f790 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f78a:	2301      	movs	r3, #1
 800f78c:	607b      	str	r3, [r7, #4]
 800f78e:	e008      	b.n	800f7a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f790:	4b08      	ldr	r3, [pc, #32]	; (800f7b4 <xTaskGetSchedulerState+0x38>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d102      	bne.n	800f79e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f798:	2302      	movs	r3, #2
 800f79a:	607b      	str	r3, [r7, #4]
 800f79c:	e001      	b.n	800f7a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f7a2:	687b      	ldr	r3, [r7, #4]
	}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	370c      	adds	r7, #12
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr
 800f7b0:	20001150 	.word	0x20001150
 800f7b4:	2000116c 	.word	0x2000116c

0800f7b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b086      	sub	sp, #24
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d056      	beq.n	800f87c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f7ce:	4b2e      	ldr	r3, [pc, #184]	; (800f888 <xTaskPriorityDisinherit+0xd0>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	693a      	ldr	r2, [r7, #16]
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d00a      	beq.n	800f7ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7dc:	f383 8811 	msr	BASEPRI, r3
 800f7e0:	f3bf 8f6f 	isb	sy
 800f7e4:	f3bf 8f4f 	dsb	sy
 800f7e8:	60fb      	str	r3, [r7, #12]
}
 800f7ea:	bf00      	nop
 800f7ec:	e7fe      	b.n	800f7ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d10a      	bne.n	800f80c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7fa:	f383 8811 	msr	BASEPRI, r3
 800f7fe:	f3bf 8f6f 	isb	sy
 800f802:	f3bf 8f4f 	dsb	sy
 800f806:	60bb      	str	r3, [r7, #8]
}
 800f808:	bf00      	nop
 800f80a:	e7fe      	b.n	800f80a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f810:	1e5a      	subs	r2, r3, #1
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f81e:	429a      	cmp	r2, r3
 800f820:	d02c      	beq.n	800f87c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f826:	2b00      	cmp	r3, #0
 800f828:	d128      	bne.n	800f87c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	3304      	adds	r3, #4
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fe fbf4 	bl	800e01c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f840:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f84c:	4b0f      	ldr	r3, [pc, #60]	; (800f88c <xTaskPriorityDisinherit+0xd4>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	429a      	cmp	r2, r3
 800f852:	d903      	bls.n	800f85c <xTaskPriorityDisinherit+0xa4>
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f858:	4a0c      	ldr	r2, [pc, #48]	; (800f88c <xTaskPriorityDisinherit+0xd4>)
 800f85a:	6013      	str	r3, [r2, #0]
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f860:	4613      	mov	r3, r2
 800f862:	009b      	lsls	r3, r3, #2
 800f864:	4413      	add	r3, r2
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	4a09      	ldr	r2, [pc, #36]	; (800f890 <xTaskPriorityDisinherit+0xd8>)
 800f86a:	441a      	add	r2, r3
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	3304      	adds	r3, #4
 800f870:	4619      	mov	r1, r3
 800f872:	4610      	mov	r0, r2
 800f874:	f7fe fb75 	bl	800df62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f878:	2301      	movs	r3, #1
 800f87a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f87c:	697b      	ldr	r3, [r7, #20]
	}
 800f87e:	4618      	mov	r0, r3
 800f880:	3718      	adds	r7, #24
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	20000c70 	.word	0x20000c70
 800f88c:	2000114c 	.word	0x2000114c
 800f890:	20000c74 	.word	0x20000c74

0800f894 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f894:	b580      	push	{r7, lr}
 800f896:	b086      	sub	sp, #24
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	607a      	str	r2, [r7, #4]
 800f8a0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f8a2:	f000 ff7f 	bl	80107a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f8a6:	4b29      	ldr	r3, [pc, #164]	; (800f94c <xTaskNotifyWait+0xb8>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	2b02      	cmp	r3, #2
 800f8b2:	d01c      	beq.n	800f8ee <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f8b4:	4b25      	ldr	r3, [pc, #148]	; (800f94c <xTaskNotifyWait+0xb8>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	43d2      	mvns	r2, r2
 800f8c0:	400a      	ands	r2, r1
 800f8c2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f8c6:	4b21      	ldr	r3, [pc, #132]	; (800f94c <xTaskNotifyWait+0xb8>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d00b      	beq.n	800f8ee <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f8d6:	2101      	movs	r1, #1
 800f8d8:	6838      	ldr	r0, [r7, #0]
 800f8da:	f000 f9dd 	bl	800fc98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f8de:	4b1c      	ldr	r3, [pc, #112]	; (800f950 <xTaskNotifyWait+0xbc>)
 800f8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8e4:	601a      	str	r2, [r3, #0]
 800f8e6:	f3bf 8f4f 	dsb	sy
 800f8ea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f8ee:	f000 ff89 	bl	8010804 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f8f2:	f000 ff57 	bl	80107a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d005      	beq.n	800f908 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f8fc:	4b13      	ldr	r3, [pc, #76]	; (800f94c <xTaskNotifyWait+0xb8>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f908:	4b10      	ldr	r3, [pc, #64]	; (800f94c <xTaskNotifyWait+0xb8>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800f910:	b2db      	uxtb	r3, r3
 800f912:	2b02      	cmp	r3, #2
 800f914:	d002      	beq.n	800f91c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f916:	2300      	movs	r3, #0
 800f918:	617b      	str	r3, [r7, #20]
 800f91a:	e00a      	b.n	800f932 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f91c:	4b0b      	ldr	r3, [pc, #44]	; (800f94c <xTaskNotifyWait+0xb8>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f924:	68ba      	ldr	r2, [r7, #8]
 800f926:	43d2      	mvns	r2, r2
 800f928:	400a      	ands	r2, r1
 800f92a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800f92e:	2301      	movs	r3, #1
 800f930:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f932:	4b06      	ldr	r3, [pc, #24]	; (800f94c <xTaskNotifyWait+0xb8>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2200      	movs	r2, #0
 800f938:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800f93c:	f000 ff62 	bl	8010804 <vPortExitCritical>

		return xReturn;
 800f940:	697b      	ldr	r3, [r7, #20]
	}
 800f942:	4618      	mov	r0, r3
 800f944:	3718      	adds	r7, #24
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	20000c70 	.word	0x20000c70
 800f950:	e000ed04 	.word	0xe000ed04

0800f954 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f954:	b580      	push	{r7, lr}
 800f956:	b08a      	sub	sp, #40	; 0x28
 800f958:	af00      	add	r7, sp, #0
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	603b      	str	r3, [r7, #0]
 800f960:	4613      	mov	r3, r2
 800f962:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f964:	2301      	movs	r3, #1
 800f966:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d10a      	bne.n	800f984 <xTaskGenericNotify+0x30>
	__asm volatile
 800f96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f972:	f383 8811 	msr	BASEPRI, r3
 800f976:	f3bf 8f6f 	isb	sy
 800f97a:	f3bf 8f4f 	dsb	sy
 800f97e:	61bb      	str	r3, [r7, #24]
}
 800f980:	bf00      	nop
 800f982:	e7fe      	b.n	800f982 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f988:	f000 ff0c 	bl	80107a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d004      	beq.n	800f99c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f992:	6a3b      	ldr	r3, [r7, #32]
 800f994:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f99c:	6a3b      	ldr	r3, [r7, #32]
 800f99e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800f9a2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f9a4:	6a3b      	ldr	r3, [r7, #32]
 800f9a6:	2202      	movs	r2, #2
 800f9a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800f9ac:	79fb      	ldrb	r3, [r7, #7]
 800f9ae:	2b04      	cmp	r3, #4
 800f9b0:	d82d      	bhi.n	800fa0e <xTaskGenericNotify+0xba>
 800f9b2:	a201      	add	r2, pc, #4	; (adr r2, 800f9b8 <xTaskGenericNotify+0x64>)
 800f9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b8:	0800fa31 	.word	0x0800fa31
 800f9bc:	0800f9cd 	.word	0x0800f9cd
 800f9c0:	0800f9df 	.word	0x0800f9df
 800f9c4:	0800f9ef 	.word	0x0800f9ef
 800f9c8:	0800f9f9 	.word	0x0800f9f9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f9cc:	6a3b      	ldr	r3, [r7, #32]
 800f9ce:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	431a      	orrs	r2, r3
 800f9d6:	6a3b      	ldr	r3, [r7, #32]
 800f9d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800f9dc:	e02b      	b.n	800fa36 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f9de:	6a3b      	ldr	r3, [r7, #32]
 800f9e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f9e4:	1c5a      	adds	r2, r3, #1
 800f9e6:	6a3b      	ldr	r3, [r7, #32]
 800f9e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800f9ec:	e023      	b.n	800fa36 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f9ee:	6a3b      	ldr	r3, [r7, #32]
 800f9f0:	68ba      	ldr	r2, [r7, #8]
 800f9f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800f9f6:	e01e      	b.n	800fa36 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f9f8:	7ffb      	ldrb	r3, [r7, #31]
 800f9fa:	2b02      	cmp	r3, #2
 800f9fc:	d004      	beq.n	800fa08 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f9fe:	6a3b      	ldr	r3, [r7, #32]
 800fa00:	68ba      	ldr	r2, [r7, #8]
 800fa02:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fa06:	e016      	b.n	800fa36 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800fa0c:	e013      	b.n	800fa36 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fa0e:	6a3b      	ldr	r3, [r7, #32]
 800fa10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fa14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa18:	d00c      	beq.n	800fa34 <xTaskGenericNotify+0xe0>
	__asm volatile
 800fa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa1e:	f383 8811 	msr	BASEPRI, r3
 800fa22:	f3bf 8f6f 	isb	sy
 800fa26:	f3bf 8f4f 	dsb	sy
 800fa2a:	617b      	str	r3, [r7, #20]
}
 800fa2c:	bf00      	nop
 800fa2e:	e7fe      	b.n	800fa2e <xTaskGenericNotify+0xda>
					break;
 800fa30:	bf00      	nop
 800fa32:	e000      	b.n	800fa36 <xTaskGenericNotify+0xe2>

					break;
 800fa34:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fa36:	7ffb      	ldrb	r3, [r7, #31]
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d13a      	bne.n	800fab2 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa3c:	6a3b      	ldr	r3, [r7, #32]
 800fa3e:	3304      	adds	r3, #4
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7fe faeb 	bl	800e01c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fa46:	6a3b      	ldr	r3, [r7, #32]
 800fa48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa4a:	4b1d      	ldr	r3, [pc, #116]	; (800fac0 <xTaskGenericNotify+0x16c>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d903      	bls.n	800fa5a <xTaskGenericNotify+0x106>
 800fa52:	6a3b      	ldr	r3, [r7, #32]
 800fa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa56:	4a1a      	ldr	r2, [pc, #104]	; (800fac0 <xTaskGenericNotify+0x16c>)
 800fa58:	6013      	str	r3, [r2, #0]
 800fa5a:	6a3b      	ldr	r3, [r7, #32]
 800fa5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa5e:	4613      	mov	r3, r2
 800fa60:	009b      	lsls	r3, r3, #2
 800fa62:	4413      	add	r3, r2
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	4a17      	ldr	r2, [pc, #92]	; (800fac4 <xTaskGenericNotify+0x170>)
 800fa68:	441a      	add	r2, r3
 800fa6a:	6a3b      	ldr	r3, [r7, #32]
 800fa6c:	3304      	adds	r3, #4
 800fa6e:	4619      	mov	r1, r3
 800fa70:	4610      	mov	r0, r2
 800fa72:	f7fe fa76 	bl	800df62 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fa76:	6a3b      	ldr	r3, [r7, #32]
 800fa78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d00a      	beq.n	800fa94 <xTaskGenericNotify+0x140>
	__asm volatile
 800fa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa82:	f383 8811 	msr	BASEPRI, r3
 800fa86:	f3bf 8f6f 	isb	sy
 800fa8a:	f3bf 8f4f 	dsb	sy
 800fa8e:	613b      	str	r3, [r7, #16]
}
 800fa90:	bf00      	nop
 800fa92:	e7fe      	b.n	800fa92 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa94:	6a3b      	ldr	r3, [r7, #32]
 800fa96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa98:	4b0b      	ldr	r3, [pc, #44]	; (800fac8 <xTaskGenericNotify+0x174>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d907      	bls.n	800fab2 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800faa2:	4b0a      	ldr	r3, [pc, #40]	; (800facc <xTaskGenericNotify+0x178>)
 800faa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faa8:	601a      	str	r2, [r3, #0]
 800faaa:	f3bf 8f4f 	dsb	sy
 800faae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fab2:	f000 fea7 	bl	8010804 <vPortExitCritical>

		return xReturn;
 800fab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fab8:	4618      	mov	r0, r3
 800faba:	3728      	adds	r7, #40	; 0x28
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	2000114c 	.word	0x2000114c
 800fac4:	20000c74 	.word	0x20000c74
 800fac8:	20000c70 	.word	0x20000c70
 800facc:	e000ed04 	.word	0xe000ed04

0800fad0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b08e      	sub	sp, #56	; 0x38
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	603b      	str	r3, [r7, #0]
 800fadc:	4613      	mov	r3, r2
 800fade:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800fae0:	2301      	movs	r3, #1
 800fae2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d10a      	bne.n	800fb00 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800faea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faee:	f383 8811 	msr	BASEPRI, r3
 800faf2:	f3bf 8f6f 	isb	sy
 800faf6:	f3bf 8f4f 	dsb	sy
 800fafa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fafc:	bf00      	nop
 800fafe:	e7fe      	b.n	800fafe <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb00:	f000 ff32 	bl	8010968 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800fb08:	f3ef 8211 	mrs	r2, BASEPRI
 800fb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb10:	f383 8811 	msr	BASEPRI, r3
 800fb14:	f3bf 8f6f 	isb	sy
 800fb18:	f3bf 8f4f 	dsb	sy
 800fb1c:	623a      	str	r2, [r7, #32]
 800fb1e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800fb20:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fb22:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d004      	beq.n	800fb34 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb2c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb36:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800fb3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb40:	2202      	movs	r2, #2
 800fb42:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800fb46:	79fb      	ldrb	r3, [r7, #7]
 800fb48:	2b04      	cmp	r3, #4
 800fb4a:	d82f      	bhi.n	800fbac <xTaskGenericNotifyFromISR+0xdc>
 800fb4c:	a201      	add	r2, pc, #4	; (adr r2, 800fb54 <xTaskGenericNotifyFromISR+0x84>)
 800fb4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb52:	bf00      	nop
 800fb54:	0800fbcf 	.word	0x0800fbcf
 800fb58:	0800fb69 	.word	0x0800fb69
 800fb5c:	0800fb7b 	.word	0x0800fb7b
 800fb60:	0800fb8b 	.word	0x0800fb8b
 800fb64:	0800fb95 	.word	0x0800fb95
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800fb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	431a      	orrs	r2, r3
 800fb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fb78:	e02c      	b.n	800fbd4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fb80:	1c5a      	adds	r2, r3, #1
 800fb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb84:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fb88:	e024      	b.n	800fbd4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb8c:	68ba      	ldr	r2, [r7, #8]
 800fb8e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fb92:	e01f      	b.n	800fbd4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fb94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb98:	2b02      	cmp	r3, #2
 800fb9a:	d004      	beq.n	800fba6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9e:	68ba      	ldr	r2, [r7, #8]
 800fba0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fba4:	e016      	b.n	800fbd4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800fba6:	2300      	movs	r3, #0
 800fba8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800fbaa:	e013      	b.n	800fbd4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fbb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbb6:	d00c      	beq.n	800fbd2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800fbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbbc:	f383 8811 	msr	BASEPRI, r3
 800fbc0:	f3bf 8f6f 	isb	sy
 800fbc4:	f3bf 8f4f 	dsb	sy
 800fbc8:	61bb      	str	r3, [r7, #24]
}
 800fbca:	bf00      	nop
 800fbcc:	e7fe      	b.n	800fbcc <xTaskGenericNotifyFromISR+0xfc>
					break;
 800fbce:	bf00      	nop
 800fbd0:	e000      	b.n	800fbd4 <xTaskGenericNotifyFromISR+0x104>
					break;
 800fbd2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fbd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d146      	bne.n	800fc6a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d00a      	beq.n	800fbfa <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800fbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe8:	f383 8811 	msr	BASEPRI, r3
 800fbec:	f3bf 8f6f 	isb	sy
 800fbf0:	f3bf 8f4f 	dsb	sy
 800fbf4:	617b      	str	r3, [r7, #20]
}
 800fbf6:	bf00      	nop
 800fbf8:	e7fe      	b.n	800fbf8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbfa:	4b21      	ldr	r3, [pc, #132]	; (800fc80 <xTaskGenericNotifyFromISR+0x1b0>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d11d      	bne.n	800fc3e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc04:	3304      	adds	r3, #4
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7fe fa08 	bl	800e01c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc10:	4b1c      	ldr	r3, [pc, #112]	; (800fc84 <xTaskGenericNotifyFromISR+0x1b4>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d903      	bls.n	800fc20 <xTaskGenericNotifyFromISR+0x150>
 800fc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc1c:	4a19      	ldr	r2, [pc, #100]	; (800fc84 <xTaskGenericNotifyFromISR+0x1b4>)
 800fc1e:	6013      	str	r3, [r2, #0]
 800fc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc24:	4613      	mov	r3, r2
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	4413      	add	r3, r2
 800fc2a:	009b      	lsls	r3, r3, #2
 800fc2c:	4a16      	ldr	r2, [pc, #88]	; (800fc88 <xTaskGenericNotifyFromISR+0x1b8>)
 800fc2e:	441a      	add	r2, r3
 800fc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc32:	3304      	adds	r3, #4
 800fc34:	4619      	mov	r1, r3
 800fc36:	4610      	mov	r0, r2
 800fc38:	f7fe f993 	bl	800df62 <vListInsertEnd>
 800fc3c:	e005      	b.n	800fc4a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800fc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc40:	3318      	adds	r3, #24
 800fc42:	4619      	mov	r1, r3
 800fc44:	4811      	ldr	r0, [pc, #68]	; (800fc8c <xTaskGenericNotifyFromISR+0x1bc>)
 800fc46:	f7fe f98c 	bl	800df62 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc4e:	4b10      	ldr	r3, [pc, #64]	; (800fc90 <xTaskGenericNotifyFromISR+0x1c0>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d908      	bls.n	800fc6a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800fc58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d002      	beq.n	800fc64 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800fc5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc60:	2201      	movs	r2, #1
 800fc62:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800fc64:	4b0b      	ldr	r3, [pc, #44]	; (800fc94 <xTaskGenericNotifyFromISR+0x1c4>)
 800fc66:	2201      	movs	r2, #1
 800fc68:	601a      	str	r2, [r3, #0]
 800fc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	f383 8811 	msr	BASEPRI, r3
}
 800fc74:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800fc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3738      	adds	r7, #56	; 0x38
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	2000116c 	.word	0x2000116c
 800fc84:	2000114c 	.word	0x2000114c
 800fc88:	20000c74 	.word	0x20000c74
 800fc8c:	20001104 	.word	0x20001104
 800fc90:	20000c70 	.word	0x20000c70
 800fc94:	20001158 	.word	0x20001158

0800fc98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fca2:	4b21      	ldr	r3, [pc, #132]	; (800fd28 <prvAddCurrentTaskToDelayedList+0x90>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fca8:	4b20      	ldr	r3, [pc, #128]	; (800fd2c <prvAddCurrentTaskToDelayedList+0x94>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	3304      	adds	r3, #4
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7fe f9b4 	bl	800e01c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcba:	d10a      	bne.n	800fcd2 <prvAddCurrentTaskToDelayedList+0x3a>
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d007      	beq.n	800fcd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcc2:	4b1a      	ldr	r3, [pc, #104]	; (800fd2c <prvAddCurrentTaskToDelayedList+0x94>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	3304      	adds	r3, #4
 800fcc8:	4619      	mov	r1, r3
 800fcca:	4819      	ldr	r0, [pc, #100]	; (800fd30 <prvAddCurrentTaskToDelayedList+0x98>)
 800fccc:	f7fe f949 	bl	800df62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fcd0:	e026      	b.n	800fd20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fcd2:	68fa      	ldr	r2, [r7, #12]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	4413      	add	r3, r2
 800fcd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fcda:	4b14      	ldr	r3, [pc, #80]	; (800fd2c <prvAddCurrentTaskToDelayedList+0x94>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	68ba      	ldr	r2, [r7, #8]
 800fce0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fce2:	68ba      	ldr	r2, [r7, #8]
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d209      	bcs.n	800fcfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcea:	4b12      	ldr	r3, [pc, #72]	; (800fd34 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fcec:	681a      	ldr	r2, [r3, #0]
 800fcee:	4b0f      	ldr	r3, [pc, #60]	; (800fd2c <prvAddCurrentTaskToDelayedList+0x94>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	3304      	adds	r3, #4
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	4610      	mov	r0, r2
 800fcf8:	f7fe f957 	bl	800dfaa <vListInsert>
}
 800fcfc:	e010      	b.n	800fd20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcfe:	4b0e      	ldr	r3, [pc, #56]	; (800fd38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	4b0a      	ldr	r3, [pc, #40]	; (800fd2c <prvAddCurrentTaskToDelayedList+0x94>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	3304      	adds	r3, #4
 800fd08:	4619      	mov	r1, r3
 800fd0a:	4610      	mov	r0, r2
 800fd0c:	f7fe f94d 	bl	800dfaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fd10:	4b0a      	ldr	r3, [pc, #40]	; (800fd3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	68ba      	ldr	r2, [r7, #8]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d202      	bcs.n	800fd20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fd1a:	4a08      	ldr	r2, [pc, #32]	; (800fd3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	6013      	str	r3, [r2, #0]
}
 800fd20:	bf00      	nop
 800fd22:	3710      	adds	r7, #16
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	20001148 	.word	0x20001148
 800fd2c:	20000c70 	.word	0x20000c70
 800fd30:	20001130 	.word	0x20001130
 800fd34:	20001100 	.word	0x20001100
 800fd38:	200010fc 	.word	0x200010fc
 800fd3c:	20001164 	.word	0x20001164

0800fd40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b08a      	sub	sp, #40	; 0x28
 800fd44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fd46:	2300      	movs	r3, #0
 800fd48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fd4a:	f000 fba1 	bl	8010490 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fd4e:	4b1c      	ldr	r3, [pc, #112]	; (800fdc0 <xTimerCreateTimerTask+0x80>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d021      	beq.n	800fd9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fd56:	2300      	movs	r3, #0
 800fd58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fd5e:	1d3a      	adds	r2, r7, #4
 800fd60:	f107 0108 	add.w	r1, r7, #8
 800fd64:	f107 030c 	add.w	r3, r7, #12
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7fe f8b3 	bl	800ded4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fd6e:	6879      	ldr	r1, [r7, #4]
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	68fa      	ldr	r2, [r7, #12]
 800fd74:	9202      	str	r2, [sp, #8]
 800fd76:	9301      	str	r3, [sp, #4]
 800fd78:	2302      	movs	r3, #2
 800fd7a:	9300      	str	r3, [sp, #0]
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	460a      	mov	r2, r1
 800fd80:	4910      	ldr	r1, [pc, #64]	; (800fdc4 <xTimerCreateTimerTask+0x84>)
 800fd82:	4811      	ldr	r0, [pc, #68]	; (800fdc8 <xTimerCreateTimerTask+0x88>)
 800fd84:	f7fe fee6 	bl	800eb54 <xTaskCreateStatic>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	4a10      	ldr	r2, [pc, #64]	; (800fdcc <xTimerCreateTimerTask+0x8c>)
 800fd8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fd8e:	4b0f      	ldr	r3, [pc, #60]	; (800fdcc <xTimerCreateTimerTask+0x8c>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d001      	beq.n	800fd9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fd96:	2301      	movs	r3, #1
 800fd98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d10a      	bne.n	800fdb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda4:	f383 8811 	msr	BASEPRI, r3
 800fda8:	f3bf 8f6f 	isb	sy
 800fdac:	f3bf 8f4f 	dsb	sy
 800fdb0:	613b      	str	r3, [r7, #16]
}
 800fdb2:	bf00      	nop
 800fdb4:	e7fe      	b.n	800fdb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fdb6:	697b      	ldr	r3, [r7, #20]
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3718      	adds	r7, #24
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	200011a0 	.word	0x200011a0
 800fdc4:	08012360 	.word	0x08012360
 800fdc8:	08010039 	.word	0x08010039
 800fdcc:	200011a4 	.word	0x200011a4

0800fdd0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b088      	sub	sp, #32
 800fdd4:	af02      	add	r7, sp, #8
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	607a      	str	r2, [r7, #4]
 800fddc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800fdde:	202c      	movs	r0, #44	; 0x2c
 800fde0:	f000 fe02 	bl	80109e8 <pvPortMalloc>
 800fde4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d00d      	beq.n	800fe08 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	9301      	str	r3, [sp, #4]
 800fdf8:	6a3b      	ldr	r3, [r7, #32]
 800fdfa:	9300      	str	r3, [sp, #0]
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	687a      	ldr	r2, [r7, #4]
 800fe00:	68b9      	ldr	r1, [r7, #8]
 800fe02:	68f8      	ldr	r0, [r7, #12]
 800fe04:	f000 f843 	bl	800fe8e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800fe08:	697b      	ldr	r3, [r7, #20]
	}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3718      	adds	r7, #24
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b08a      	sub	sp, #40	; 0x28
 800fe16:	af02      	add	r7, sp, #8
 800fe18:	60f8      	str	r0, [r7, #12]
 800fe1a:	60b9      	str	r1, [r7, #8]
 800fe1c:	607a      	str	r2, [r7, #4]
 800fe1e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800fe20:	232c      	movs	r3, #44	; 0x2c
 800fe22:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	2b2c      	cmp	r3, #44	; 0x2c
 800fe28:	d00a      	beq.n	800fe40 <xTimerCreateStatic+0x2e>
	__asm volatile
 800fe2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2e:	f383 8811 	msr	BASEPRI, r3
 800fe32:	f3bf 8f6f 	isb	sy
 800fe36:	f3bf 8f4f 	dsb	sy
 800fe3a:	61bb      	str	r3, [r7, #24]
}
 800fe3c:	bf00      	nop
 800fe3e:	e7fe      	b.n	800fe3e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fe40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800fe42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d10a      	bne.n	800fe5e <xTimerCreateStatic+0x4c>
	__asm volatile
 800fe48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe4c:	f383 8811 	msr	BASEPRI, r3
 800fe50:	f3bf 8f6f 	isb	sy
 800fe54:	f3bf 8f4f 	dsb	sy
 800fe58:	617b      	str	r3, [r7, #20]
}
 800fe5a:	bf00      	nop
 800fe5c:	e7fe      	b.n	800fe5c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800fe5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe60:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800fe62:	69fb      	ldr	r3, [r7, #28]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00d      	beq.n	800fe84 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800fe68:	69fb      	ldr	r3, [r7, #28]
 800fe6a:	2202      	movs	r2, #2
 800fe6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800fe70:	69fb      	ldr	r3, [r7, #28]
 800fe72:	9301      	str	r3, [sp, #4]
 800fe74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe76:	9300      	str	r3, [sp, #0]
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	68b9      	ldr	r1, [r7, #8]
 800fe7e:	68f8      	ldr	r0, [r7, #12]
 800fe80:	f000 f805 	bl	800fe8e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800fe84:	69fb      	ldr	r3, [r7, #28]
	}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3720      	adds	r7, #32
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}

0800fe8e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800fe8e:	b580      	push	{r7, lr}
 800fe90:	b086      	sub	sp, #24
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	60f8      	str	r0, [r7, #12]
 800fe96:	60b9      	str	r1, [r7, #8]
 800fe98:	607a      	str	r2, [r7, #4]
 800fe9a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d10a      	bne.n	800feb8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800fea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea6:	f383 8811 	msr	BASEPRI, r3
 800feaa:	f3bf 8f6f 	isb	sy
 800feae:	f3bf 8f4f 	dsb	sy
 800feb2:	617b      	str	r3, [r7, #20]
}
 800feb4:	bf00      	nop
 800feb6:	e7fe      	b.n	800feb6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800feb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feba:	2b00      	cmp	r3, #0
 800febc:	d01e      	beq.n	800fefc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800febe:	f000 fae7 	bl	8010490 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800fec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec4:	68fa      	ldr	r2, [r7, #12]
 800fec6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800fec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feca:	68ba      	ldr	r2, [r7, #8]
 800fecc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800fece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed0:	683a      	ldr	r2, [r7, #0]
 800fed2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800fed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed6:	6a3a      	ldr	r2, [r7, #32]
 800fed8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fedc:	3304      	adds	r3, #4
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fe f832 	bl	800df48 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d008      	beq.n	800fefc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800feea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fef0:	f043 0304 	orr.w	r3, r3, #4
 800fef4:	b2da      	uxtb	r2, r3
 800fef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800fefc:	bf00      	nop
 800fefe:	3718      	adds	r7, #24
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b08a      	sub	sp, #40	; 0x28
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	607a      	str	r2, [r7, #4]
 800ff10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ff12:	2300      	movs	r3, #0
 800ff14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d10a      	bne.n	800ff32 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ff1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff20:	f383 8811 	msr	BASEPRI, r3
 800ff24:	f3bf 8f6f 	isb	sy
 800ff28:	f3bf 8f4f 	dsb	sy
 800ff2c:	623b      	str	r3, [r7, #32]
}
 800ff2e:	bf00      	nop
 800ff30:	e7fe      	b.n	800ff30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ff32:	4b1a      	ldr	r3, [pc, #104]	; (800ff9c <xTimerGenericCommand+0x98>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d02a      	beq.n	800ff90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	2b05      	cmp	r3, #5
 800ff4a:	dc18      	bgt.n	800ff7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ff4c:	f7ff fc16 	bl	800f77c <xTaskGetSchedulerState>
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b02      	cmp	r3, #2
 800ff54:	d109      	bne.n	800ff6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ff56:	4b11      	ldr	r3, [pc, #68]	; (800ff9c <xTimerGenericCommand+0x98>)
 800ff58:	6818      	ldr	r0, [r3, #0]
 800ff5a:	f107 0110 	add.w	r1, r7, #16
 800ff5e:	2300      	movs	r3, #0
 800ff60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff62:	f7fe fa0f 	bl	800e384 <xQueueGenericSend>
 800ff66:	6278      	str	r0, [r7, #36]	; 0x24
 800ff68:	e012      	b.n	800ff90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ff6a:	4b0c      	ldr	r3, [pc, #48]	; (800ff9c <xTimerGenericCommand+0x98>)
 800ff6c:	6818      	ldr	r0, [r3, #0]
 800ff6e:	f107 0110 	add.w	r1, r7, #16
 800ff72:	2300      	movs	r3, #0
 800ff74:	2200      	movs	r2, #0
 800ff76:	f7fe fa05 	bl	800e384 <xQueueGenericSend>
 800ff7a:	6278      	str	r0, [r7, #36]	; 0x24
 800ff7c:	e008      	b.n	800ff90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ff7e:	4b07      	ldr	r3, [pc, #28]	; (800ff9c <xTimerGenericCommand+0x98>)
 800ff80:	6818      	ldr	r0, [r3, #0]
 800ff82:	f107 0110 	add.w	r1, r7, #16
 800ff86:	2300      	movs	r3, #0
 800ff88:	683a      	ldr	r2, [r7, #0]
 800ff8a:	f7fe faf9 	bl	800e580 <xQueueGenericSendFromISR>
 800ff8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ff90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3728      	adds	r7, #40	; 0x28
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	200011a0 	.word	0x200011a0

0800ffa0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b088      	sub	sp, #32
 800ffa4:	af02      	add	r7, sp, #8
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffaa:	4b22      	ldr	r3, [pc, #136]	; (8010034 <prvProcessExpiredTimer+0x94>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	68db      	ldr	r3, [r3, #12]
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	3304      	adds	r3, #4
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7fe f82f 	bl	800e01c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffc4:	f003 0304 	and.w	r3, r3, #4
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d022      	beq.n	8010012 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	699a      	ldr	r2, [r3, #24]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	18d1      	adds	r1, r2, r3
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	683a      	ldr	r2, [r7, #0]
 800ffd8:	6978      	ldr	r0, [r7, #20]
 800ffda:	f000 f8d1 	bl	8010180 <prvInsertTimerInActiveList>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d01f      	beq.n	8010024 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	9300      	str	r3, [sp, #0]
 800ffe8:	2300      	movs	r3, #0
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	2100      	movs	r1, #0
 800ffee:	6978      	ldr	r0, [r7, #20]
 800fff0:	f7ff ff88 	bl	800ff04 <xTimerGenericCommand>
 800fff4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d113      	bne.n	8010024 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010000:	f383 8811 	msr	BASEPRI, r3
 8010004:	f3bf 8f6f 	isb	sy
 8010008:	f3bf 8f4f 	dsb	sy
 801000c:	60fb      	str	r3, [r7, #12]
}
 801000e:	bf00      	nop
 8010010:	e7fe      	b.n	8010010 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010018:	f023 0301 	bic.w	r3, r3, #1
 801001c:	b2da      	uxtb	r2, r3
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	6a1b      	ldr	r3, [r3, #32]
 8010028:	6978      	ldr	r0, [r7, #20]
 801002a:	4798      	blx	r3
}
 801002c:	bf00      	nop
 801002e:	3718      	adds	r7, #24
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}
 8010034:	20001198 	.word	0x20001198

08010038 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010040:	f107 0308 	add.w	r3, r7, #8
 8010044:	4618      	mov	r0, r3
 8010046:	f000 f857 	bl	80100f8 <prvGetNextExpireTime>
 801004a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	4619      	mov	r1, r3
 8010050:	68f8      	ldr	r0, [r7, #12]
 8010052:	f000 f803 	bl	801005c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010056:	f000 f8d5 	bl	8010204 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801005a:	e7f1      	b.n	8010040 <prvTimerTask+0x8>

0801005c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b084      	sub	sp, #16
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010066:	f7fe ff9d 	bl	800efa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801006a:	f107 0308 	add.w	r3, r7, #8
 801006e:	4618      	mov	r0, r3
 8010070:	f000 f866 	bl	8010140 <prvSampleTimeNow>
 8010074:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d130      	bne.n	80100de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d10a      	bne.n	8010098 <prvProcessTimerOrBlockTask+0x3c>
 8010082:	687a      	ldr	r2, [r7, #4]
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	429a      	cmp	r2, r3
 8010088:	d806      	bhi.n	8010098 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801008a:	f7fe ff99 	bl	800efc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801008e:	68f9      	ldr	r1, [r7, #12]
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f7ff ff85 	bl	800ffa0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010096:	e024      	b.n	80100e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d008      	beq.n	80100b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801009e:	4b13      	ldr	r3, [pc, #76]	; (80100ec <prvProcessTimerOrBlockTask+0x90>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d101      	bne.n	80100ac <prvProcessTimerOrBlockTask+0x50>
 80100a8:	2301      	movs	r3, #1
 80100aa:	e000      	b.n	80100ae <prvProcessTimerOrBlockTask+0x52>
 80100ac:	2300      	movs	r3, #0
 80100ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80100b0:	4b0f      	ldr	r3, [pc, #60]	; (80100f0 <prvProcessTimerOrBlockTask+0x94>)
 80100b2:	6818      	ldr	r0, [r3, #0]
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	1ad3      	subs	r3, r2, r3
 80100ba:	683a      	ldr	r2, [r7, #0]
 80100bc:	4619      	mov	r1, r3
 80100be:	f7fe fd15 	bl	800eaec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80100c2:	f7fe ff7d 	bl	800efc0 <xTaskResumeAll>
 80100c6:	4603      	mov	r3, r0
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d10a      	bne.n	80100e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80100cc:	4b09      	ldr	r3, [pc, #36]	; (80100f4 <prvProcessTimerOrBlockTask+0x98>)
 80100ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100d2:	601a      	str	r2, [r3, #0]
 80100d4:	f3bf 8f4f 	dsb	sy
 80100d8:	f3bf 8f6f 	isb	sy
}
 80100dc:	e001      	b.n	80100e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80100de:	f7fe ff6f 	bl	800efc0 <xTaskResumeAll>
}
 80100e2:	bf00      	nop
 80100e4:	3710      	adds	r7, #16
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	2000119c 	.word	0x2000119c
 80100f0:	200011a0 	.word	0x200011a0
 80100f4:	e000ed04 	.word	0xe000ed04

080100f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80100f8:	b480      	push	{r7}
 80100fa:	b085      	sub	sp, #20
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010100:	4b0e      	ldr	r3, [pc, #56]	; (801013c <prvGetNextExpireTime+0x44>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d101      	bne.n	801010e <prvGetNextExpireTime+0x16>
 801010a:	2201      	movs	r2, #1
 801010c:	e000      	b.n	8010110 <prvGetNextExpireTime+0x18>
 801010e:	2200      	movs	r2, #0
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d105      	bne.n	8010128 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801011c:	4b07      	ldr	r3, [pc, #28]	; (801013c <prvGetNextExpireTime+0x44>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	60fb      	str	r3, [r7, #12]
 8010126:	e001      	b.n	801012c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010128:	2300      	movs	r3, #0
 801012a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801012c:	68fb      	ldr	r3, [r7, #12]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3714      	adds	r7, #20
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	20001198 	.word	0x20001198

08010140 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010148:	f7fe ffd8 	bl	800f0fc <xTaskGetTickCount>
 801014c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801014e:	4b0b      	ldr	r3, [pc, #44]	; (801017c <prvSampleTimeNow+0x3c>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68fa      	ldr	r2, [r7, #12]
 8010154:	429a      	cmp	r2, r3
 8010156:	d205      	bcs.n	8010164 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010158:	f000 f936 	bl	80103c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2201      	movs	r2, #1
 8010160:	601a      	str	r2, [r3, #0]
 8010162:	e002      	b.n	801016a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2200      	movs	r2, #0
 8010168:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801016a:	4a04      	ldr	r2, [pc, #16]	; (801017c <prvSampleTimeNow+0x3c>)
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010170:	68fb      	ldr	r3, [r7, #12]
}
 8010172:	4618      	mov	r0, r3
 8010174:	3710      	adds	r7, #16
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	200011a8 	.word	0x200011a8

08010180 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b086      	sub	sp, #24
 8010184:	af00      	add	r7, sp, #0
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	607a      	str	r2, [r7, #4]
 801018c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801018e:	2300      	movs	r3, #0
 8010190:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	68ba      	ldr	r2, [r7, #8]
 8010196:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801019e:	68ba      	ldr	r2, [r7, #8]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d812      	bhi.n	80101cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	1ad2      	subs	r2, r2, r3
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	699b      	ldr	r3, [r3, #24]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d302      	bcc.n	80101ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80101b4:	2301      	movs	r3, #1
 80101b6:	617b      	str	r3, [r7, #20]
 80101b8:	e01b      	b.n	80101f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80101ba:	4b10      	ldr	r3, [pc, #64]	; (80101fc <prvInsertTimerInActiveList+0x7c>)
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	3304      	adds	r3, #4
 80101c2:	4619      	mov	r1, r3
 80101c4:	4610      	mov	r0, r2
 80101c6:	f7fd fef0 	bl	800dfaa <vListInsert>
 80101ca:	e012      	b.n	80101f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d206      	bcs.n	80101e2 <prvInsertTimerInActiveList+0x62>
 80101d4:	68ba      	ldr	r2, [r7, #8]
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	429a      	cmp	r2, r3
 80101da:	d302      	bcc.n	80101e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80101dc:	2301      	movs	r3, #1
 80101de:	617b      	str	r3, [r7, #20]
 80101e0:	e007      	b.n	80101f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80101e2:	4b07      	ldr	r3, [pc, #28]	; (8010200 <prvInsertTimerInActiveList+0x80>)
 80101e4:	681a      	ldr	r2, [r3, #0]
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	3304      	adds	r3, #4
 80101ea:	4619      	mov	r1, r3
 80101ec:	4610      	mov	r0, r2
 80101ee:	f7fd fedc 	bl	800dfaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80101f2:	697b      	ldr	r3, [r7, #20]
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3718      	adds	r7, #24
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	2000119c 	.word	0x2000119c
 8010200:	20001198 	.word	0x20001198

08010204 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b08e      	sub	sp, #56	; 0x38
 8010208:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801020a:	e0ca      	b.n	80103a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2b00      	cmp	r3, #0
 8010210:	da18      	bge.n	8010244 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010212:	1d3b      	adds	r3, r7, #4
 8010214:	3304      	adds	r3, #4
 8010216:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021a:	2b00      	cmp	r3, #0
 801021c:	d10a      	bne.n	8010234 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801021e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010222:	f383 8811 	msr	BASEPRI, r3
 8010226:	f3bf 8f6f 	isb	sy
 801022a:	f3bf 8f4f 	dsb	sy
 801022e:	61fb      	str	r3, [r7, #28]
}
 8010230:	bf00      	nop
 8010232:	e7fe      	b.n	8010232 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801023a:	6850      	ldr	r0, [r2, #4]
 801023c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801023e:	6892      	ldr	r2, [r2, #8]
 8010240:	4611      	mov	r1, r2
 8010242:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2b00      	cmp	r3, #0
 8010248:	f2c0 80aa 	blt.w	80103a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010252:	695b      	ldr	r3, [r3, #20]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d004      	beq.n	8010262 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025a:	3304      	adds	r3, #4
 801025c:	4618      	mov	r0, r3
 801025e:	f7fd fedd 	bl	800e01c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010262:	463b      	mov	r3, r7
 8010264:	4618      	mov	r0, r3
 8010266:	f7ff ff6b 	bl	8010140 <prvSampleTimeNow>
 801026a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2b09      	cmp	r3, #9
 8010270:	f200 8097 	bhi.w	80103a2 <prvProcessReceivedCommands+0x19e>
 8010274:	a201      	add	r2, pc, #4	; (adr r2, 801027c <prvProcessReceivedCommands+0x78>)
 8010276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801027a:	bf00      	nop
 801027c:	080102a5 	.word	0x080102a5
 8010280:	080102a5 	.word	0x080102a5
 8010284:	080102a5 	.word	0x080102a5
 8010288:	08010319 	.word	0x08010319
 801028c:	0801032d 	.word	0x0801032d
 8010290:	08010377 	.word	0x08010377
 8010294:	080102a5 	.word	0x080102a5
 8010298:	080102a5 	.word	0x080102a5
 801029c:	08010319 	.word	0x08010319
 80102a0:	0801032d 	.word	0x0801032d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80102a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102aa:	f043 0301 	orr.w	r3, r3, #1
 80102ae:	b2da      	uxtb	r2, r3
 80102b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80102b6:	68ba      	ldr	r2, [r7, #8]
 80102b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ba:	699b      	ldr	r3, [r3, #24]
 80102bc:	18d1      	adds	r1, r2, r3
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102c4:	f7ff ff5c 	bl	8010180 <prvInsertTimerInActiveList>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d069      	beq.n	80103a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d0:	6a1b      	ldr	r3, [r3, #32]
 80102d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80102d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102dc:	f003 0304 	and.w	r3, r3, #4
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d05e      	beq.n	80103a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102e8:	699b      	ldr	r3, [r3, #24]
 80102ea:	441a      	add	r2, r3
 80102ec:	2300      	movs	r3, #0
 80102ee:	9300      	str	r3, [sp, #0]
 80102f0:	2300      	movs	r3, #0
 80102f2:	2100      	movs	r1, #0
 80102f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102f6:	f7ff fe05 	bl	800ff04 <xTimerGenericCommand>
 80102fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80102fc:	6a3b      	ldr	r3, [r7, #32]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d14f      	bne.n	80103a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010306:	f383 8811 	msr	BASEPRI, r3
 801030a:	f3bf 8f6f 	isb	sy
 801030e:	f3bf 8f4f 	dsb	sy
 8010312:	61bb      	str	r3, [r7, #24]
}
 8010314:	bf00      	nop
 8010316:	e7fe      	b.n	8010316 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801031e:	f023 0301 	bic.w	r3, r3, #1
 8010322:	b2da      	uxtb	r2, r3
 8010324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801032a:	e03a      	b.n	80103a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801032c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010332:	f043 0301 	orr.w	r3, r3, #1
 8010336:	b2da      	uxtb	r2, r3
 8010338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801033e:	68ba      	ldr	r2, [r7, #8]
 8010340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010342:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010346:	699b      	ldr	r3, [r3, #24]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d10a      	bne.n	8010362 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801034c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010350:	f383 8811 	msr	BASEPRI, r3
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	f3bf 8f4f 	dsb	sy
 801035c:	617b      	str	r3, [r7, #20]
}
 801035e:	bf00      	nop
 8010360:	e7fe      	b.n	8010360 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010364:	699a      	ldr	r2, [r3, #24]
 8010366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010368:	18d1      	adds	r1, r2, r3
 801036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801036e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010370:	f7ff ff06 	bl	8010180 <prvInsertTimerInActiveList>
					break;
 8010374:	e015      	b.n	80103a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801037c:	f003 0302 	and.w	r3, r3, #2
 8010380:	2b00      	cmp	r3, #0
 8010382:	d103      	bne.n	801038c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010386:	f000 fbfb 	bl	8010b80 <vPortFree>
 801038a:	e00a      	b.n	80103a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801038c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801038e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010392:	f023 0301 	bic.w	r3, r3, #1
 8010396:	b2da      	uxtb	r2, r3
 8010398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801039a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801039e:	e000      	b.n	80103a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80103a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80103a2:	4b08      	ldr	r3, [pc, #32]	; (80103c4 <prvProcessReceivedCommands+0x1c0>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	1d39      	adds	r1, r7, #4
 80103a8:	2200      	movs	r2, #0
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7fe f984 	bl	800e6b8 <xQueueReceive>
 80103b0:	4603      	mov	r3, r0
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	f47f af2a 	bne.w	801020c <prvProcessReceivedCommands+0x8>
	}
}
 80103b8:	bf00      	nop
 80103ba:	bf00      	nop
 80103bc:	3730      	adds	r7, #48	; 0x30
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	bf00      	nop
 80103c4:	200011a0 	.word	0x200011a0

080103c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b088      	sub	sp, #32
 80103cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80103ce:	e048      	b.n	8010462 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80103d0:	4b2d      	ldr	r3, [pc, #180]	; (8010488 <prvSwitchTimerLists+0xc0>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	68db      	ldr	r3, [r3, #12]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103da:	4b2b      	ldr	r3, [pc, #172]	; (8010488 <prvSwitchTimerLists+0xc0>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	68db      	ldr	r3, [r3, #12]
 80103e0:	68db      	ldr	r3, [r3, #12]
 80103e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	3304      	adds	r3, #4
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7fd fe17 	bl	800e01c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	6a1b      	ldr	r3, [r3, #32]
 80103f2:	68f8      	ldr	r0, [r7, #12]
 80103f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103fc:	f003 0304 	and.w	r3, r3, #4
 8010400:	2b00      	cmp	r3, #0
 8010402:	d02e      	beq.n	8010462 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	699b      	ldr	r3, [r3, #24]
 8010408:	693a      	ldr	r2, [r7, #16]
 801040a:	4413      	add	r3, r2
 801040c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801040e:	68ba      	ldr	r2, [r7, #8]
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	429a      	cmp	r2, r3
 8010414:	d90e      	bls.n	8010434 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	68ba      	ldr	r2, [r7, #8]
 801041a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	68fa      	ldr	r2, [r7, #12]
 8010420:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010422:	4b19      	ldr	r3, [pc, #100]	; (8010488 <prvSwitchTimerLists+0xc0>)
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	3304      	adds	r3, #4
 801042a:	4619      	mov	r1, r3
 801042c:	4610      	mov	r0, r2
 801042e:	f7fd fdbc 	bl	800dfaa <vListInsert>
 8010432:	e016      	b.n	8010462 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010434:	2300      	movs	r3, #0
 8010436:	9300      	str	r3, [sp, #0]
 8010438:	2300      	movs	r3, #0
 801043a:	693a      	ldr	r2, [r7, #16]
 801043c:	2100      	movs	r1, #0
 801043e:	68f8      	ldr	r0, [r7, #12]
 8010440:	f7ff fd60 	bl	800ff04 <xTimerGenericCommand>
 8010444:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d10a      	bne.n	8010462 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801044c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010450:	f383 8811 	msr	BASEPRI, r3
 8010454:	f3bf 8f6f 	isb	sy
 8010458:	f3bf 8f4f 	dsb	sy
 801045c:	603b      	str	r3, [r7, #0]
}
 801045e:	bf00      	nop
 8010460:	e7fe      	b.n	8010460 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010462:	4b09      	ldr	r3, [pc, #36]	; (8010488 <prvSwitchTimerLists+0xc0>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d1b1      	bne.n	80103d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801046c:	4b06      	ldr	r3, [pc, #24]	; (8010488 <prvSwitchTimerLists+0xc0>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010472:	4b06      	ldr	r3, [pc, #24]	; (801048c <prvSwitchTimerLists+0xc4>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	4a04      	ldr	r2, [pc, #16]	; (8010488 <prvSwitchTimerLists+0xc0>)
 8010478:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801047a:	4a04      	ldr	r2, [pc, #16]	; (801048c <prvSwitchTimerLists+0xc4>)
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	6013      	str	r3, [r2, #0]
}
 8010480:	bf00      	nop
 8010482:	3718      	adds	r7, #24
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}
 8010488:	20001198 	.word	0x20001198
 801048c:	2000119c 	.word	0x2000119c

08010490 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b082      	sub	sp, #8
 8010494:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010496:	f000 f985 	bl	80107a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801049a:	4b15      	ldr	r3, [pc, #84]	; (80104f0 <prvCheckForValidListAndQueue+0x60>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d120      	bne.n	80104e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80104a2:	4814      	ldr	r0, [pc, #80]	; (80104f4 <prvCheckForValidListAndQueue+0x64>)
 80104a4:	f7fd fd30 	bl	800df08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80104a8:	4813      	ldr	r0, [pc, #76]	; (80104f8 <prvCheckForValidListAndQueue+0x68>)
 80104aa:	f7fd fd2d 	bl	800df08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80104ae:	4b13      	ldr	r3, [pc, #76]	; (80104fc <prvCheckForValidListAndQueue+0x6c>)
 80104b0:	4a10      	ldr	r2, [pc, #64]	; (80104f4 <prvCheckForValidListAndQueue+0x64>)
 80104b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80104b4:	4b12      	ldr	r3, [pc, #72]	; (8010500 <prvCheckForValidListAndQueue+0x70>)
 80104b6:	4a10      	ldr	r2, [pc, #64]	; (80104f8 <prvCheckForValidListAndQueue+0x68>)
 80104b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80104ba:	2300      	movs	r3, #0
 80104bc:	9300      	str	r3, [sp, #0]
 80104be:	4b11      	ldr	r3, [pc, #68]	; (8010504 <prvCheckForValidListAndQueue+0x74>)
 80104c0:	4a11      	ldr	r2, [pc, #68]	; (8010508 <prvCheckForValidListAndQueue+0x78>)
 80104c2:	2110      	movs	r1, #16
 80104c4:	200a      	movs	r0, #10
 80104c6:	f7fd fe3b 	bl	800e140 <xQueueGenericCreateStatic>
 80104ca:	4603      	mov	r3, r0
 80104cc:	4a08      	ldr	r2, [pc, #32]	; (80104f0 <prvCheckForValidListAndQueue+0x60>)
 80104ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80104d0:	4b07      	ldr	r3, [pc, #28]	; (80104f0 <prvCheckForValidListAndQueue+0x60>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d005      	beq.n	80104e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80104d8:	4b05      	ldr	r3, [pc, #20]	; (80104f0 <prvCheckForValidListAndQueue+0x60>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	490b      	ldr	r1, [pc, #44]	; (801050c <prvCheckForValidListAndQueue+0x7c>)
 80104de:	4618      	mov	r0, r3
 80104e0:	f7fe fada 	bl	800ea98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80104e4:	f000 f98e 	bl	8010804 <vPortExitCritical>
}
 80104e8:	bf00      	nop
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}
 80104ee:	bf00      	nop
 80104f0:	200011a0 	.word	0x200011a0
 80104f4:	20001170 	.word	0x20001170
 80104f8:	20001184 	.word	0x20001184
 80104fc:	20001198 	.word	0x20001198
 8010500:	2000119c 	.word	0x2000119c
 8010504:	2000124c 	.word	0x2000124c
 8010508:	200011ac 	.word	0x200011ac
 801050c:	08012368 	.word	0x08012368

08010510 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b086      	sub	sp, #24
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d10a      	bne.n	8010538 <pvTimerGetTimerID+0x28>
	__asm volatile
 8010522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010526:	f383 8811 	msr	BASEPRI, r3
 801052a:	f3bf 8f6f 	isb	sy
 801052e:	f3bf 8f4f 	dsb	sy
 8010532:	60fb      	str	r3, [r7, #12]
}
 8010534:	bf00      	nop
 8010536:	e7fe      	b.n	8010536 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8010538:	f000 f934 	bl	80107a4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	69db      	ldr	r3, [r3, #28]
 8010540:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8010542:	f000 f95f 	bl	8010804 <vPortExitCritical>

	return pvReturn;
 8010546:	693b      	ldr	r3, [r7, #16]
}
 8010548:	4618      	mov	r0, r3
 801054a:	3718      	adds	r7, #24
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010550:	b480      	push	{r7}
 8010552:	b085      	sub	sp, #20
 8010554:	af00      	add	r7, sp, #0
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	3b04      	subs	r3, #4
 8010560:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	3b04      	subs	r3, #4
 801056e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	f023 0201 	bic.w	r2, r3, #1
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	3b04      	subs	r3, #4
 801057e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010580:	4a0c      	ldr	r2, [pc, #48]	; (80105b4 <pxPortInitialiseStack+0x64>)
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	3b14      	subs	r3, #20
 801058a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	3b04      	subs	r3, #4
 8010596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f06f 0202 	mvn.w	r2, #2
 801059e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	3b20      	subs	r3, #32
 80105a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80105a6:	68fb      	ldr	r3, [r7, #12]
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3714      	adds	r7, #20
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr
 80105b4:	080105b9 	.word	0x080105b9

080105b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80105b8:	b480      	push	{r7}
 80105ba:	b085      	sub	sp, #20
 80105bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80105be:	2300      	movs	r3, #0
 80105c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80105c2:	4b12      	ldr	r3, [pc, #72]	; (801060c <prvTaskExitError+0x54>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105ca:	d00a      	beq.n	80105e2 <prvTaskExitError+0x2a>
	__asm volatile
 80105cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d0:	f383 8811 	msr	BASEPRI, r3
 80105d4:	f3bf 8f6f 	isb	sy
 80105d8:	f3bf 8f4f 	dsb	sy
 80105dc:	60fb      	str	r3, [r7, #12]
}
 80105de:	bf00      	nop
 80105e0:	e7fe      	b.n	80105e0 <prvTaskExitError+0x28>
	__asm volatile
 80105e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e6:	f383 8811 	msr	BASEPRI, r3
 80105ea:	f3bf 8f6f 	isb	sy
 80105ee:	f3bf 8f4f 	dsb	sy
 80105f2:	60bb      	str	r3, [r7, #8]
}
 80105f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80105f6:	bf00      	nop
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d0fc      	beq.n	80105f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80105fe:	bf00      	nop
 8010600:	bf00      	nop
 8010602:	3714      	adds	r7, #20
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr
 801060c:	20000120 	.word	0x20000120

08010610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010610:	4b07      	ldr	r3, [pc, #28]	; (8010630 <pxCurrentTCBConst2>)
 8010612:	6819      	ldr	r1, [r3, #0]
 8010614:	6808      	ldr	r0, [r1, #0]
 8010616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801061a:	f380 8809 	msr	PSP, r0
 801061e:	f3bf 8f6f 	isb	sy
 8010622:	f04f 0000 	mov.w	r0, #0
 8010626:	f380 8811 	msr	BASEPRI, r0
 801062a:	4770      	bx	lr
 801062c:	f3af 8000 	nop.w

08010630 <pxCurrentTCBConst2>:
 8010630:	20000c70 	.word	0x20000c70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010634:	bf00      	nop
 8010636:	bf00      	nop

08010638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010638:	4808      	ldr	r0, [pc, #32]	; (801065c <prvPortStartFirstTask+0x24>)
 801063a:	6800      	ldr	r0, [r0, #0]
 801063c:	6800      	ldr	r0, [r0, #0]
 801063e:	f380 8808 	msr	MSP, r0
 8010642:	f04f 0000 	mov.w	r0, #0
 8010646:	f380 8814 	msr	CONTROL, r0
 801064a:	b662      	cpsie	i
 801064c:	b661      	cpsie	f
 801064e:	f3bf 8f4f 	dsb	sy
 8010652:	f3bf 8f6f 	isb	sy
 8010656:	df00      	svc	0
 8010658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801065a:	bf00      	nop
 801065c:	e000ed08 	.word	0xe000ed08

08010660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b086      	sub	sp, #24
 8010664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010666:	4b46      	ldr	r3, [pc, #280]	; (8010780 <xPortStartScheduler+0x120>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a46      	ldr	r2, [pc, #280]	; (8010784 <xPortStartScheduler+0x124>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d10a      	bne.n	8010686 <xPortStartScheduler+0x26>
	__asm volatile
 8010670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010674:	f383 8811 	msr	BASEPRI, r3
 8010678:	f3bf 8f6f 	isb	sy
 801067c:	f3bf 8f4f 	dsb	sy
 8010680:	613b      	str	r3, [r7, #16]
}
 8010682:	bf00      	nop
 8010684:	e7fe      	b.n	8010684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010686:	4b3e      	ldr	r3, [pc, #248]	; (8010780 <xPortStartScheduler+0x120>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	4a3f      	ldr	r2, [pc, #252]	; (8010788 <xPortStartScheduler+0x128>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d10a      	bne.n	80106a6 <xPortStartScheduler+0x46>
	__asm volatile
 8010690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010694:	f383 8811 	msr	BASEPRI, r3
 8010698:	f3bf 8f6f 	isb	sy
 801069c:	f3bf 8f4f 	dsb	sy
 80106a0:	60fb      	str	r3, [r7, #12]
}
 80106a2:	bf00      	nop
 80106a4:	e7fe      	b.n	80106a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80106a6:	4b39      	ldr	r3, [pc, #228]	; (801078c <xPortStartScheduler+0x12c>)
 80106a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	22ff      	movs	r2, #255	; 0xff
 80106b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80106c0:	78fb      	ldrb	r3, [r7, #3]
 80106c2:	b2db      	uxtb	r3, r3
 80106c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80106c8:	b2da      	uxtb	r2, r3
 80106ca:	4b31      	ldr	r3, [pc, #196]	; (8010790 <xPortStartScheduler+0x130>)
 80106cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80106ce:	4b31      	ldr	r3, [pc, #196]	; (8010794 <xPortStartScheduler+0x134>)
 80106d0:	2207      	movs	r2, #7
 80106d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80106d4:	e009      	b.n	80106ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80106d6:	4b2f      	ldr	r3, [pc, #188]	; (8010794 <xPortStartScheduler+0x134>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	3b01      	subs	r3, #1
 80106dc:	4a2d      	ldr	r2, [pc, #180]	; (8010794 <xPortStartScheduler+0x134>)
 80106de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80106e0:	78fb      	ldrb	r3, [r7, #3]
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	005b      	lsls	r3, r3, #1
 80106e6:	b2db      	uxtb	r3, r3
 80106e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80106ea:	78fb      	ldrb	r3, [r7, #3]
 80106ec:	b2db      	uxtb	r3, r3
 80106ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106f2:	2b80      	cmp	r3, #128	; 0x80
 80106f4:	d0ef      	beq.n	80106d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80106f6:	4b27      	ldr	r3, [pc, #156]	; (8010794 <xPortStartScheduler+0x134>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f1c3 0307 	rsb	r3, r3, #7
 80106fe:	2b04      	cmp	r3, #4
 8010700:	d00a      	beq.n	8010718 <xPortStartScheduler+0xb8>
	__asm volatile
 8010702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010706:	f383 8811 	msr	BASEPRI, r3
 801070a:	f3bf 8f6f 	isb	sy
 801070e:	f3bf 8f4f 	dsb	sy
 8010712:	60bb      	str	r3, [r7, #8]
}
 8010714:	bf00      	nop
 8010716:	e7fe      	b.n	8010716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010718:	4b1e      	ldr	r3, [pc, #120]	; (8010794 <xPortStartScheduler+0x134>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	021b      	lsls	r3, r3, #8
 801071e:	4a1d      	ldr	r2, [pc, #116]	; (8010794 <xPortStartScheduler+0x134>)
 8010720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010722:	4b1c      	ldr	r3, [pc, #112]	; (8010794 <xPortStartScheduler+0x134>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801072a:	4a1a      	ldr	r2, [pc, #104]	; (8010794 <xPortStartScheduler+0x134>)
 801072c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	b2da      	uxtb	r2, r3
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010736:	4b18      	ldr	r3, [pc, #96]	; (8010798 <xPortStartScheduler+0x138>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	4a17      	ldr	r2, [pc, #92]	; (8010798 <xPortStartScheduler+0x138>)
 801073c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010742:	4b15      	ldr	r3, [pc, #84]	; (8010798 <xPortStartScheduler+0x138>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	4a14      	ldr	r2, [pc, #80]	; (8010798 <xPortStartScheduler+0x138>)
 8010748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801074c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801074e:	f000 f8dd 	bl	801090c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010752:	4b12      	ldr	r3, [pc, #72]	; (801079c <xPortStartScheduler+0x13c>)
 8010754:	2200      	movs	r2, #0
 8010756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010758:	f000 f8fc 	bl	8010954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801075c:	4b10      	ldr	r3, [pc, #64]	; (80107a0 <xPortStartScheduler+0x140>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	4a0f      	ldr	r2, [pc, #60]	; (80107a0 <xPortStartScheduler+0x140>)
 8010762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010768:	f7ff ff66 	bl	8010638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801076c:	f7fe fd90 	bl	800f290 <vTaskSwitchContext>
	prvTaskExitError();
 8010770:	f7ff ff22 	bl	80105b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010774:	2300      	movs	r3, #0
}
 8010776:	4618      	mov	r0, r3
 8010778:	3718      	adds	r7, #24
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}
 801077e:	bf00      	nop
 8010780:	e000ed00 	.word	0xe000ed00
 8010784:	410fc271 	.word	0x410fc271
 8010788:	410fc270 	.word	0x410fc270
 801078c:	e000e400 	.word	0xe000e400
 8010790:	2000129c 	.word	0x2000129c
 8010794:	200012a0 	.word	0x200012a0
 8010798:	e000ed20 	.word	0xe000ed20
 801079c:	20000120 	.word	0x20000120
 80107a0:	e000ef34 	.word	0xe000ef34

080107a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80107a4:	b480      	push	{r7}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
	__asm volatile
 80107aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ae:	f383 8811 	msr	BASEPRI, r3
 80107b2:	f3bf 8f6f 	isb	sy
 80107b6:	f3bf 8f4f 	dsb	sy
 80107ba:	607b      	str	r3, [r7, #4]
}
 80107bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80107be:	4b0f      	ldr	r3, [pc, #60]	; (80107fc <vPortEnterCritical+0x58>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	3301      	adds	r3, #1
 80107c4:	4a0d      	ldr	r2, [pc, #52]	; (80107fc <vPortEnterCritical+0x58>)
 80107c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80107c8:	4b0c      	ldr	r3, [pc, #48]	; (80107fc <vPortEnterCritical+0x58>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	2b01      	cmp	r3, #1
 80107ce:	d10f      	bne.n	80107f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80107d0:	4b0b      	ldr	r3, [pc, #44]	; (8010800 <vPortEnterCritical+0x5c>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	b2db      	uxtb	r3, r3
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d00a      	beq.n	80107f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80107da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107de:	f383 8811 	msr	BASEPRI, r3
 80107e2:	f3bf 8f6f 	isb	sy
 80107e6:	f3bf 8f4f 	dsb	sy
 80107ea:	603b      	str	r3, [r7, #0]
}
 80107ec:	bf00      	nop
 80107ee:	e7fe      	b.n	80107ee <vPortEnterCritical+0x4a>
	}
}
 80107f0:	bf00      	nop
 80107f2:	370c      	adds	r7, #12
 80107f4:	46bd      	mov	sp, r7
 80107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fa:	4770      	bx	lr
 80107fc:	20000120 	.word	0x20000120
 8010800:	e000ed04 	.word	0xe000ed04

08010804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010804:	b480      	push	{r7}
 8010806:	b083      	sub	sp, #12
 8010808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801080a:	4b12      	ldr	r3, [pc, #72]	; (8010854 <vPortExitCritical+0x50>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d10a      	bne.n	8010828 <vPortExitCritical+0x24>
	__asm volatile
 8010812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010816:	f383 8811 	msr	BASEPRI, r3
 801081a:	f3bf 8f6f 	isb	sy
 801081e:	f3bf 8f4f 	dsb	sy
 8010822:	607b      	str	r3, [r7, #4]
}
 8010824:	bf00      	nop
 8010826:	e7fe      	b.n	8010826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010828:	4b0a      	ldr	r3, [pc, #40]	; (8010854 <vPortExitCritical+0x50>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	3b01      	subs	r3, #1
 801082e:	4a09      	ldr	r2, [pc, #36]	; (8010854 <vPortExitCritical+0x50>)
 8010830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010832:	4b08      	ldr	r3, [pc, #32]	; (8010854 <vPortExitCritical+0x50>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d105      	bne.n	8010846 <vPortExitCritical+0x42>
 801083a:	2300      	movs	r3, #0
 801083c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	f383 8811 	msr	BASEPRI, r3
}
 8010844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010846:	bf00      	nop
 8010848:	370c      	adds	r7, #12
 801084a:	46bd      	mov	sp, r7
 801084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010850:	4770      	bx	lr
 8010852:	bf00      	nop
 8010854:	20000120 	.word	0x20000120
	...

08010860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010860:	f3ef 8009 	mrs	r0, PSP
 8010864:	f3bf 8f6f 	isb	sy
 8010868:	4b15      	ldr	r3, [pc, #84]	; (80108c0 <pxCurrentTCBConst>)
 801086a:	681a      	ldr	r2, [r3, #0]
 801086c:	f01e 0f10 	tst.w	lr, #16
 8010870:	bf08      	it	eq
 8010872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801087a:	6010      	str	r0, [r2, #0]
 801087c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010884:	f380 8811 	msr	BASEPRI, r0
 8010888:	f3bf 8f4f 	dsb	sy
 801088c:	f3bf 8f6f 	isb	sy
 8010890:	f7fe fcfe 	bl	800f290 <vTaskSwitchContext>
 8010894:	f04f 0000 	mov.w	r0, #0
 8010898:	f380 8811 	msr	BASEPRI, r0
 801089c:	bc09      	pop	{r0, r3}
 801089e:	6819      	ldr	r1, [r3, #0]
 80108a0:	6808      	ldr	r0, [r1, #0]
 80108a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a6:	f01e 0f10 	tst.w	lr, #16
 80108aa:	bf08      	it	eq
 80108ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80108b0:	f380 8809 	msr	PSP, r0
 80108b4:	f3bf 8f6f 	isb	sy
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop
 80108bc:	f3af 8000 	nop.w

080108c0 <pxCurrentTCBConst>:
 80108c0:	20000c70 	.word	0x20000c70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80108c4:	bf00      	nop
 80108c6:	bf00      	nop

080108c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
	__asm volatile
 80108ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d2:	f383 8811 	msr	BASEPRI, r3
 80108d6:	f3bf 8f6f 	isb	sy
 80108da:	f3bf 8f4f 	dsb	sy
 80108de:	607b      	str	r3, [r7, #4]
}
 80108e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80108e2:	f7fe fc1b 	bl	800f11c <xTaskIncrementTick>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d003      	beq.n	80108f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80108ec:	4b06      	ldr	r3, [pc, #24]	; (8010908 <xPortSysTickHandler+0x40>)
 80108ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108f2:	601a      	str	r2, [r3, #0]
 80108f4:	2300      	movs	r3, #0
 80108f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	f383 8811 	msr	BASEPRI, r3
}
 80108fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010900:	bf00      	nop
 8010902:	3708      	adds	r7, #8
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}
 8010908:	e000ed04 	.word	0xe000ed04

0801090c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801090c:	b480      	push	{r7}
 801090e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010910:	4b0b      	ldr	r3, [pc, #44]	; (8010940 <vPortSetupTimerInterrupt+0x34>)
 8010912:	2200      	movs	r2, #0
 8010914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010916:	4b0b      	ldr	r3, [pc, #44]	; (8010944 <vPortSetupTimerInterrupt+0x38>)
 8010918:	2200      	movs	r2, #0
 801091a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801091c:	4b0a      	ldr	r3, [pc, #40]	; (8010948 <vPortSetupTimerInterrupt+0x3c>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4a0a      	ldr	r2, [pc, #40]	; (801094c <vPortSetupTimerInterrupt+0x40>)
 8010922:	fba2 2303 	umull	r2, r3, r2, r3
 8010926:	099b      	lsrs	r3, r3, #6
 8010928:	4a09      	ldr	r2, [pc, #36]	; (8010950 <vPortSetupTimerInterrupt+0x44>)
 801092a:	3b01      	subs	r3, #1
 801092c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801092e:	4b04      	ldr	r3, [pc, #16]	; (8010940 <vPortSetupTimerInterrupt+0x34>)
 8010930:	2207      	movs	r2, #7
 8010932:	601a      	str	r2, [r3, #0]
}
 8010934:	bf00      	nop
 8010936:	46bd      	mov	sp, r7
 8010938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093c:	4770      	bx	lr
 801093e:	bf00      	nop
 8010940:	e000e010 	.word	0xe000e010
 8010944:	e000e018 	.word	0xe000e018
 8010948:	20000004 	.word	0x20000004
 801094c:	10624dd3 	.word	0x10624dd3
 8010950:	e000e014 	.word	0xe000e014

08010954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010964 <vPortEnableVFP+0x10>
 8010958:	6801      	ldr	r1, [r0, #0]
 801095a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801095e:	6001      	str	r1, [r0, #0]
 8010960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010962:	bf00      	nop
 8010964:	e000ed88 	.word	0xe000ed88

08010968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010968:	b480      	push	{r7}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801096e:	f3ef 8305 	mrs	r3, IPSR
 8010972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2b0f      	cmp	r3, #15
 8010978:	d914      	bls.n	80109a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801097a:	4a17      	ldr	r2, [pc, #92]	; (80109d8 <vPortValidateInterruptPriority+0x70>)
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	4413      	add	r3, r2
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010984:	4b15      	ldr	r3, [pc, #84]	; (80109dc <vPortValidateInterruptPriority+0x74>)
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	7afa      	ldrb	r2, [r7, #11]
 801098a:	429a      	cmp	r2, r3
 801098c:	d20a      	bcs.n	80109a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801098e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010992:	f383 8811 	msr	BASEPRI, r3
 8010996:	f3bf 8f6f 	isb	sy
 801099a:	f3bf 8f4f 	dsb	sy
 801099e:	607b      	str	r3, [r7, #4]
}
 80109a0:	bf00      	nop
 80109a2:	e7fe      	b.n	80109a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80109a4:	4b0e      	ldr	r3, [pc, #56]	; (80109e0 <vPortValidateInterruptPriority+0x78>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80109ac:	4b0d      	ldr	r3, [pc, #52]	; (80109e4 <vPortValidateInterruptPriority+0x7c>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d90a      	bls.n	80109ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80109b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b8:	f383 8811 	msr	BASEPRI, r3
 80109bc:	f3bf 8f6f 	isb	sy
 80109c0:	f3bf 8f4f 	dsb	sy
 80109c4:	603b      	str	r3, [r7, #0]
}
 80109c6:	bf00      	nop
 80109c8:	e7fe      	b.n	80109c8 <vPortValidateInterruptPriority+0x60>
	}
 80109ca:	bf00      	nop
 80109cc:	3714      	adds	r7, #20
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr
 80109d6:	bf00      	nop
 80109d8:	e000e3f0 	.word	0xe000e3f0
 80109dc:	2000129c 	.word	0x2000129c
 80109e0:	e000ed0c 	.word	0xe000ed0c
 80109e4:	200012a0 	.word	0x200012a0

080109e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b08a      	sub	sp, #40	; 0x28
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80109f0:	2300      	movs	r3, #0
 80109f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80109f4:	f7fe fad6 	bl	800efa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80109f8:	4b5b      	ldr	r3, [pc, #364]	; (8010b68 <pvPortMalloc+0x180>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d101      	bne.n	8010a04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010a00:	f000 f920 	bl	8010c44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010a04:	4b59      	ldr	r3, [pc, #356]	; (8010b6c <pvPortMalloc+0x184>)
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	4013      	ands	r3, r2
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f040 8093 	bne.w	8010b38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d01d      	beq.n	8010a54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010a18:	2208      	movs	r2, #8
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	4413      	add	r3, r2
 8010a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f003 0307 	and.w	r3, r3, #7
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d014      	beq.n	8010a54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f023 0307 	bic.w	r3, r3, #7
 8010a30:	3308      	adds	r3, #8
 8010a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f003 0307 	and.w	r3, r3, #7
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d00a      	beq.n	8010a54 <pvPortMalloc+0x6c>
	__asm volatile
 8010a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a42:	f383 8811 	msr	BASEPRI, r3
 8010a46:	f3bf 8f6f 	isb	sy
 8010a4a:	f3bf 8f4f 	dsb	sy
 8010a4e:	617b      	str	r3, [r7, #20]
}
 8010a50:	bf00      	nop
 8010a52:	e7fe      	b.n	8010a52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d06e      	beq.n	8010b38 <pvPortMalloc+0x150>
 8010a5a:	4b45      	ldr	r3, [pc, #276]	; (8010b70 <pvPortMalloc+0x188>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d869      	bhi.n	8010b38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010a64:	4b43      	ldr	r3, [pc, #268]	; (8010b74 <pvPortMalloc+0x18c>)
 8010a66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010a68:	4b42      	ldr	r3, [pc, #264]	; (8010b74 <pvPortMalloc+0x18c>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a6e:	e004      	b.n	8010a7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	687a      	ldr	r2, [r7, #4]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d903      	bls.n	8010a8c <pvPortMalloc+0xa4>
 8010a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d1f1      	bne.n	8010a70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010a8c:	4b36      	ldr	r3, [pc, #216]	; (8010b68 <pvPortMalloc+0x180>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d050      	beq.n	8010b38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010a96:	6a3b      	ldr	r3, [r7, #32]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	2208      	movs	r2, #8
 8010a9c:	4413      	add	r3, r2
 8010a9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa2:	681a      	ldr	r2, [r3, #0]
 8010aa4:	6a3b      	ldr	r3, [r7, #32]
 8010aa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aaa:	685a      	ldr	r2, [r3, #4]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	1ad2      	subs	r2, r2, r3
 8010ab0:	2308      	movs	r3, #8
 8010ab2:	005b      	lsls	r3, r3, #1
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d91f      	bls.n	8010af8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	4413      	add	r3, r2
 8010abe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ac0:	69bb      	ldr	r3, [r7, #24]
 8010ac2:	f003 0307 	and.w	r3, r3, #7
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d00a      	beq.n	8010ae0 <pvPortMalloc+0xf8>
	__asm volatile
 8010aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ace:	f383 8811 	msr	BASEPRI, r3
 8010ad2:	f3bf 8f6f 	isb	sy
 8010ad6:	f3bf 8f4f 	dsb	sy
 8010ada:	613b      	str	r3, [r7, #16]
}
 8010adc:	bf00      	nop
 8010ade:	e7fe      	b.n	8010ade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae2:	685a      	ldr	r2, [r3, #4]
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	1ad2      	subs	r2, r2, r3
 8010ae8:	69bb      	ldr	r3, [r7, #24]
 8010aea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aee:	687a      	ldr	r2, [r7, #4]
 8010af0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010af2:	69b8      	ldr	r0, [r7, #24]
 8010af4:	f000 f908 	bl	8010d08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010af8:	4b1d      	ldr	r3, [pc, #116]	; (8010b70 <pvPortMalloc+0x188>)
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	1ad3      	subs	r3, r2, r3
 8010b02:	4a1b      	ldr	r2, [pc, #108]	; (8010b70 <pvPortMalloc+0x188>)
 8010b04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010b06:	4b1a      	ldr	r3, [pc, #104]	; (8010b70 <pvPortMalloc+0x188>)
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	4b1b      	ldr	r3, [pc, #108]	; (8010b78 <pvPortMalloc+0x190>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d203      	bcs.n	8010b1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010b12:	4b17      	ldr	r3, [pc, #92]	; (8010b70 <pvPortMalloc+0x188>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	4a18      	ldr	r2, [pc, #96]	; (8010b78 <pvPortMalloc+0x190>)
 8010b18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1c:	685a      	ldr	r2, [r3, #4]
 8010b1e:	4b13      	ldr	r3, [pc, #76]	; (8010b6c <pvPortMalloc+0x184>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	431a      	orrs	r2, r3
 8010b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010b2e:	4b13      	ldr	r3, [pc, #76]	; (8010b7c <pvPortMalloc+0x194>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	3301      	adds	r3, #1
 8010b34:	4a11      	ldr	r2, [pc, #68]	; (8010b7c <pvPortMalloc+0x194>)
 8010b36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010b38:	f7fe fa42 	bl	800efc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b3c:	69fb      	ldr	r3, [r7, #28]
 8010b3e:	f003 0307 	and.w	r3, r3, #7
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d00a      	beq.n	8010b5c <pvPortMalloc+0x174>
	__asm volatile
 8010b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b4a:	f383 8811 	msr	BASEPRI, r3
 8010b4e:	f3bf 8f6f 	isb	sy
 8010b52:	f3bf 8f4f 	dsb	sy
 8010b56:	60fb      	str	r3, [r7, #12]
}
 8010b58:	bf00      	nop
 8010b5a:	e7fe      	b.n	8010b5a <pvPortMalloc+0x172>
	return pvReturn;
 8010b5c:	69fb      	ldr	r3, [r7, #28]
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3728      	adds	r7, #40	; 0x28
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	200039bc 	.word	0x200039bc
 8010b6c:	200039d0 	.word	0x200039d0
 8010b70:	200039c0 	.word	0x200039c0
 8010b74:	200039b4 	.word	0x200039b4
 8010b78:	200039c4 	.word	0x200039c4
 8010b7c:	200039c8 	.word	0x200039c8

08010b80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b086      	sub	sp, #24
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d04d      	beq.n	8010c2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010b92:	2308      	movs	r3, #8
 8010b94:	425b      	negs	r3, r3
 8010b96:	697a      	ldr	r2, [r7, #20]
 8010b98:	4413      	add	r3, r2
 8010b9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	685a      	ldr	r2, [r3, #4]
 8010ba4:	4b24      	ldr	r3, [pc, #144]	; (8010c38 <vPortFree+0xb8>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4013      	ands	r3, r2
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d10a      	bne.n	8010bc4 <vPortFree+0x44>
	__asm volatile
 8010bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb2:	f383 8811 	msr	BASEPRI, r3
 8010bb6:	f3bf 8f6f 	isb	sy
 8010bba:	f3bf 8f4f 	dsb	sy
 8010bbe:	60fb      	str	r3, [r7, #12]
}
 8010bc0:	bf00      	nop
 8010bc2:	e7fe      	b.n	8010bc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d00a      	beq.n	8010be2 <vPortFree+0x62>
	__asm volatile
 8010bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd0:	f383 8811 	msr	BASEPRI, r3
 8010bd4:	f3bf 8f6f 	isb	sy
 8010bd8:	f3bf 8f4f 	dsb	sy
 8010bdc:	60bb      	str	r3, [r7, #8]
}
 8010bde:	bf00      	nop
 8010be0:	e7fe      	b.n	8010be0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	685a      	ldr	r2, [r3, #4]
 8010be6:	4b14      	ldr	r3, [pc, #80]	; (8010c38 <vPortFree+0xb8>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4013      	ands	r3, r2
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d01e      	beq.n	8010c2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d11a      	bne.n	8010c2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	685a      	ldr	r2, [r3, #4]
 8010bfc:	4b0e      	ldr	r3, [pc, #56]	; (8010c38 <vPortFree+0xb8>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	43db      	mvns	r3, r3
 8010c02:	401a      	ands	r2, r3
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010c08:	f7fe f9cc 	bl	800efa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010c0c:	693b      	ldr	r3, [r7, #16]
 8010c0e:	685a      	ldr	r2, [r3, #4]
 8010c10:	4b0a      	ldr	r3, [pc, #40]	; (8010c3c <vPortFree+0xbc>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	4413      	add	r3, r2
 8010c16:	4a09      	ldr	r2, [pc, #36]	; (8010c3c <vPortFree+0xbc>)
 8010c18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010c1a:	6938      	ldr	r0, [r7, #16]
 8010c1c:	f000 f874 	bl	8010d08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010c20:	4b07      	ldr	r3, [pc, #28]	; (8010c40 <vPortFree+0xc0>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	3301      	adds	r3, #1
 8010c26:	4a06      	ldr	r2, [pc, #24]	; (8010c40 <vPortFree+0xc0>)
 8010c28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010c2a:	f7fe f9c9 	bl	800efc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010c2e:	bf00      	nop
 8010c30:	3718      	adds	r7, #24
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}
 8010c36:	bf00      	nop
 8010c38:	200039d0 	.word	0x200039d0
 8010c3c:	200039c0 	.word	0x200039c0
 8010c40:	200039cc 	.word	0x200039cc

08010c44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010c44:	b480      	push	{r7}
 8010c46:	b085      	sub	sp, #20
 8010c48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010c4a:	f242 7310 	movw	r3, #10000	; 0x2710
 8010c4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010c50:	4b27      	ldr	r3, [pc, #156]	; (8010cf0 <prvHeapInit+0xac>)
 8010c52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f003 0307 	and.w	r3, r3, #7
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d00c      	beq.n	8010c78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	3307      	adds	r3, #7
 8010c62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	f023 0307 	bic.w	r3, r3, #7
 8010c6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010c6c:	68ba      	ldr	r2, [r7, #8]
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	1ad3      	subs	r3, r2, r3
 8010c72:	4a1f      	ldr	r2, [pc, #124]	; (8010cf0 <prvHeapInit+0xac>)
 8010c74:	4413      	add	r3, r2
 8010c76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010c7c:	4a1d      	ldr	r2, [pc, #116]	; (8010cf4 <prvHeapInit+0xb0>)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010c82:	4b1c      	ldr	r3, [pc, #112]	; (8010cf4 <prvHeapInit+0xb0>)
 8010c84:	2200      	movs	r2, #0
 8010c86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	68ba      	ldr	r2, [r7, #8]
 8010c8c:	4413      	add	r3, r2
 8010c8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010c90:	2208      	movs	r2, #8
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	1a9b      	subs	r3, r3, r2
 8010c96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	f023 0307 	bic.w	r3, r3, #7
 8010c9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	4a15      	ldr	r2, [pc, #84]	; (8010cf8 <prvHeapInit+0xb4>)
 8010ca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010ca6:	4b14      	ldr	r3, [pc, #80]	; (8010cf8 <prvHeapInit+0xb4>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2200      	movs	r2, #0
 8010cac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010cae:	4b12      	ldr	r3, [pc, #72]	; (8010cf8 <prvHeapInit+0xb4>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	68fa      	ldr	r2, [r7, #12]
 8010cbe:	1ad2      	subs	r2, r2, r3
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010cc4:	4b0c      	ldr	r3, [pc, #48]	; (8010cf8 <prvHeapInit+0xb4>)
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	4a0a      	ldr	r2, [pc, #40]	; (8010cfc <prvHeapInit+0xb8>)
 8010cd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	4a09      	ldr	r2, [pc, #36]	; (8010d00 <prvHeapInit+0xbc>)
 8010cda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010cdc:	4b09      	ldr	r3, [pc, #36]	; (8010d04 <prvHeapInit+0xc0>)
 8010cde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010ce2:	601a      	str	r2, [r3, #0]
}
 8010ce4:	bf00      	nop
 8010ce6:	3714      	adds	r7, #20
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr
 8010cf0:	200012a4 	.word	0x200012a4
 8010cf4:	200039b4 	.word	0x200039b4
 8010cf8:	200039bc 	.word	0x200039bc
 8010cfc:	200039c4 	.word	0x200039c4
 8010d00:	200039c0 	.word	0x200039c0
 8010d04:	200039d0 	.word	0x200039d0

08010d08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010d08:	b480      	push	{r7}
 8010d0a:	b085      	sub	sp, #20
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010d10:	4b28      	ldr	r3, [pc, #160]	; (8010db4 <prvInsertBlockIntoFreeList+0xac>)
 8010d12:	60fb      	str	r3, [r7, #12]
 8010d14:	e002      	b.n	8010d1c <prvInsertBlockIntoFreeList+0x14>
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	60fb      	str	r3, [r7, #12]
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	687a      	ldr	r2, [r7, #4]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d8f7      	bhi.n	8010d16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	4413      	add	r3, r2
 8010d32:	687a      	ldr	r2, [r7, #4]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d108      	bne.n	8010d4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	685a      	ldr	r2, [r3, #4]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	441a      	add	r2, r3
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	68ba      	ldr	r2, [r7, #8]
 8010d54:	441a      	add	r2, r3
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d118      	bne.n	8010d90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	4b15      	ldr	r3, [pc, #84]	; (8010db8 <prvInsertBlockIntoFreeList+0xb0>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d00d      	beq.n	8010d86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	685a      	ldr	r2, [r3, #4]
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	441a      	add	r2, r3
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	681a      	ldr	r2, [r3, #0]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	601a      	str	r2, [r3, #0]
 8010d84:	e008      	b.n	8010d98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010d86:	4b0c      	ldr	r3, [pc, #48]	; (8010db8 <prvInsertBlockIntoFreeList+0xb0>)
 8010d88:	681a      	ldr	r2, [r3, #0]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	601a      	str	r2, [r3, #0]
 8010d8e:	e003      	b.n	8010d98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	681a      	ldr	r2, [r3, #0]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010d98:	68fa      	ldr	r2, [r7, #12]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d002      	beq.n	8010da6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010da6:	bf00      	nop
 8010da8:	3714      	adds	r7, #20
 8010daa:	46bd      	mov	sp, r7
 8010dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db0:	4770      	bx	lr
 8010db2:	bf00      	nop
 8010db4:	200039b4 	.word	0x200039b4
 8010db8:	200039bc 	.word	0x200039bc

08010dbc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	4912      	ldr	r1, [pc, #72]	; (8010e0c <MX_USB_Device_Init+0x50>)
 8010dc4:	4812      	ldr	r0, [pc, #72]	; (8010e10 <MX_USB_Device_Init+0x54>)
 8010dc6:	f7fa ffb1 	bl	800bd2c <USBD_Init>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d001      	beq.n	8010dd4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010dd0:	f7ef ff32 	bl	8000c38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010dd4:	490f      	ldr	r1, [pc, #60]	; (8010e14 <MX_USB_Device_Init+0x58>)
 8010dd6:	480e      	ldr	r0, [pc, #56]	; (8010e10 <MX_USB_Device_Init+0x54>)
 8010dd8:	f7fa ffd8 	bl	800bd8c <USBD_RegisterClass>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d001      	beq.n	8010de6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010de2:	f7ef ff29 	bl	8000c38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010de6:	490c      	ldr	r1, [pc, #48]	; (8010e18 <MX_USB_Device_Init+0x5c>)
 8010de8:	4809      	ldr	r0, [pc, #36]	; (8010e10 <MX_USB_Device_Init+0x54>)
 8010dea:	f7fa ff29 	bl	800bc40 <USBD_CDC_RegisterInterface>
 8010dee:	4603      	mov	r3, r0
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d001      	beq.n	8010df8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010df4:	f7ef ff20 	bl	8000c38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010df8:	4805      	ldr	r0, [pc, #20]	; (8010e10 <MX_USB_Device_Init+0x54>)
 8010dfa:	f7fa ffee 	bl	800bdda <USBD_Start>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d001      	beq.n	8010e08 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010e04:	f7ef ff18 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010e08:	bf00      	nop
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	20000138 	.word	0x20000138
 8010e10:	20003f90 	.word	0x20003f90
 8010e14:	2000001c 	.word	0x2000001c
 8010e18:	20000124 	.word	0x20000124

08010e1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010e20:	2200      	movs	r2, #0
 8010e22:	4905      	ldr	r1, [pc, #20]	; (8010e38 <CDC_Init_FS+0x1c>)
 8010e24:	4805      	ldr	r0, [pc, #20]	; (8010e3c <CDC_Init_FS+0x20>)
 8010e26:	f7fa ff20 	bl	800bc6a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010e2a:	4905      	ldr	r1, [pc, #20]	; (8010e40 <CDC_Init_FS+0x24>)
 8010e2c:	4803      	ldr	r0, [pc, #12]	; (8010e3c <CDC_Init_FS+0x20>)
 8010e2e:	f7fa ff3a 	bl	800bca6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010e32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	20004a60 	.word	0x20004a60
 8010e3c:	20003f90 	.word	0x20003f90
 8010e40:	20004260 	.word	0x20004260

08010e44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010e44:	b480      	push	{r7}
 8010e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010e48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010e54:	b480      	push	{r7}
 8010e56:	b083      	sub	sp, #12
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	6039      	str	r1, [r7, #0]
 8010e5e:	71fb      	strb	r3, [r7, #7]
 8010e60:	4613      	mov	r3, r2
 8010e62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010e64:	79fb      	ldrb	r3, [r7, #7]
 8010e66:	2b23      	cmp	r3, #35	; 0x23
 8010e68:	d84a      	bhi.n	8010f00 <CDC_Control_FS+0xac>
 8010e6a:	a201      	add	r2, pc, #4	; (adr r2, 8010e70 <CDC_Control_FS+0x1c>)
 8010e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e70:	08010f01 	.word	0x08010f01
 8010e74:	08010f01 	.word	0x08010f01
 8010e78:	08010f01 	.word	0x08010f01
 8010e7c:	08010f01 	.word	0x08010f01
 8010e80:	08010f01 	.word	0x08010f01
 8010e84:	08010f01 	.word	0x08010f01
 8010e88:	08010f01 	.word	0x08010f01
 8010e8c:	08010f01 	.word	0x08010f01
 8010e90:	08010f01 	.word	0x08010f01
 8010e94:	08010f01 	.word	0x08010f01
 8010e98:	08010f01 	.word	0x08010f01
 8010e9c:	08010f01 	.word	0x08010f01
 8010ea0:	08010f01 	.word	0x08010f01
 8010ea4:	08010f01 	.word	0x08010f01
 8010ea8:	08010f01 	.word	0x08010f01
 8010eac:	08010f01 	.word	0x08010f01
 8010eb0:	08010f01 	.word	0x08010f01
 8010eb4:	08010f01 	.word	0x08010f01
 8010eb8:	08010f01 	.word	0x08010f01
 8010ebc:	08010f01 	.word	0x08010f01
 8010ec0:	08010f01 	.word	0x08010f01
 8010ec4:	08010f01 	.word	0x08010f01
 8010ec8:	08010f01 	.word	0x08010f01
 8010ecc:	08010f01 	.word	0x08010f01
 8010ed0:	08010f01 	.word	0x08010f01
 8010ed4:	08010f01 	.word	0x08010f01
 8010ed8:	08010f01 	.word	0x08010f01
 8010edc:	08010f01 	.word	0x08010f01
 8010ee0:	08010f01 	.word	0x08010f01
 8010ee4:	08010f01 	.word	0x08010f01
 8010ee8:	08010f01 	.word	0x08010f01
 8010eec:	08010f01 	.word	0x08010f01
 8010ef0:	08010f01 	.word	0x08010f01
 8010ef4:	08010f01 	.word	0x08010f01
 8010ef8:	08010f01 	.word	0x08010f01
 8010efc:	08010f01 	.word	0x08010f01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010f00:	bf00      	nop
  }

  return (USBD_OK);
 8010f02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	370c      	adds	r7, #12
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr

08010f10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010f1a:	6879      	ldr	r1, [r7, #4]
 8010f1c:	4805      	ldr	r0, [pc, #20]	; (8010f34 <CDC_Receive_FS+0x24>)
 8010f1e:	f7fa fec2 	bl	800bca6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010f22:	4804      	ldr	r0, [pc, #16]	; (8010f34 <CDC_Receive_FS+0x24>)
 8010f24:	f7fa fed8 	bl	800bcd8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010f28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3708      	adds	r7, #8
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	20003f90 	.word	0x20003f90

08010f38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	b087      	sub	sp, #28
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	60f8      	str	r0, [r7, #12]
 8010f40:	60b9      	str	r1, [r7, #8]
 8010f42:	4613      	mov	r3, r2
 8010f44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010f46:	2300      	movs	r3, #0
 8010f48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	371c      	adds	r7, #28
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr
	...

08010f5c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b083      	sub	sp, #12
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	4603      	mov	r3, r0
 8010f64:	6039      	str	r1, [r7, #0]
 8010f66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	2212      	movs	r2, #18
 8010f6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010f6e:	4b03      	ldr	r3, [pc, #12]	; (8010f7c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	370c      	adds	r7, #12
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr
 8010f7c:	20000158 	.word	0x20000158

08010f80 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f80:	b480      	push	{r7}
 8010f82:	b083      	sub	sp, #12
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	4603      	mov	r3, r0
 8010f88:	6039      	str	r1, [r7, #0]
 8010f8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	2204      	movs	r2, #4
 8010f90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010f92:	4b03      	ldr	r3, [pc, #12]	; (8010fa0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	370c      	adds	r7, #12
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr
 8010fa0:	2000016c 	.word	0x2000016c

08010fa4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	4603      	mov	r3, r0
 8010fac:	6039      	str	r1, [r7, #0]
 8010fae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010fb0:	79fb      	ldrb	r3, [r7, #7]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d105      	bne.n	8010fc2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010fb6:	683a      	ldr	r2, [r7, #0]
 8010fb8:	4907      	ldr	r1, [pc, #28]	; (8010fd8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010fba:	4808      	ldr	r0, [pc, #32]	; (8010fdc <USBD_CDC_ProductStrDescriptor+0x38>)
 8010fbc:	f7fb fef5 	bl	800cdaa <USBD_GetString>
 8010fc0:	e004      	b.n	8010fcc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010fc2:	683a      	ldr	r2, [r7, #0]
 8010fc4:	4904      	ldr	r1, [pc, #16]	; (8010fd8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010fc6:	4805      	ldr	r0, [pc, #20]	; (8010fdc <USBD_CDC_ProductStrDescriptor+0x38>)
 8010fc8:	f7fb feef 	bl	800cdaa <USBD_GetString>
  }
  return USBD_StrDesc;
 8010fcc:	4b02      	ldr	r3, [pc, #8]	; (8010fd8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3708      	adds	r7, #8
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	20005260 	.word	0x20005260
 8010fdc:	08012370 	.word	0x08012370

08010fe0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b082      	sub	sp, #8
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	6039      	str	r1, [r7, #0]
 8010fea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010fec:	683a      	ldr	r2, [r7, #0]
 8010fee:	4904      	ldr	r1, [pc, #16]	; (8011000 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010ff0:	4804      	ldr	r0, [pc, #16]	; (8011004 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8010ff2:	f7fb feda 	bl	800cdaa <USBD_GetString>
  return USBD_StrDesc;
 8010ff6:	4b02      	ldr	r3, [pc, #8]	; (8011000 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3708      	adds	r7, #8
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	20005260 	.word	0x20005260
 8011004:	08012388 	.word	0x08012388

08011008 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	4603      	mov	r3, r0
 8011010:	6039      	str	r1, [r7, #0]
 8011012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	221a      	movs	r2, #26
 8011018:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801101a:	f000 f843 	bl	80110a4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801101e:	4b02      	ldr	r3, [pc, #8]	; (8011028 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011020:	4618      	mov	r0, r3
 8011022:	3708      	adds	r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}
 8011028:	20000170 	.word	0x20000170

0801102c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	4603      	mov	r3, r0
 8011034:	6039      	str	r1, [r7, #0]
 8011036:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011038:	79fb      	ldrb	r3, [r7, #7]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d105      	bne.n	801104a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801103e:	683a      	ldr	r2, [r7, #0]
 8011040:	4907      	ldr	r1, [pc, #28]	; (8011060 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011042:	4808      	ldr	r0, [pc, #32]	; (8011064 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011044:	f7fb feb1 	bl	800cdaa <USBD_GetString>
 8011048:	e004      	b.n	8011054 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801104a:	683a      	ldr	r2, [r7, #0]
 801104c:	4904      	ldr	r1, [pc, #16]	; (8011060 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801104e:	4805      	ldr	r0, [pc, #20]	; (8011064 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011050:	f7fb feab 	bl	800cdaa <USBD_GetString>
  }
  return USBD_StrDesc;
 8011054:	4b02      	ldr	r3, [pc, #8]	; (8011060 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011056:	4618      	mov	r0, r3
 8011058:	3708      	adds	r7, #8
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	20005260 	.word	0x20005260
 8011064:	0801239c 	.word	0x0801239c

08011068 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	4603      	mov	r3, r0
 8011070:	6039      	str	r1, [r7, #0]
 8011072:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011074:	79fb      	ldrb	r3, [r7, #7]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d105      	bne.n	8011086 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801107a:	683a      	ldr	r2, [r7, #0]
 801107c:	4907      	ldr	r1, [pc, #28]	; (801109c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801107e:	4808      	ldr	r0, [pc, #32]	; (80110a0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011080:	f7fb fe93 	bl	800cdaa <USBD_GetString>
 8011084:	e004      	b.n	8011090 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011086:	683a      	ldr	r2, [r7, #0]
 8011088:	4904      	ldr	r1, [pc, #16]	; (801109c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801108a:	4805      	ldr	r0, [pc, #20]	; (80110a0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801108c:	f7fb fe8d 	bl	800cdaa <USBD_GetString>
  }
  return USBD_StrDesc;
 8011090:	4b02      	ldr	r3, [pc, #8]	; (801109c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011092:	4618      	mov	r0, r3
 8011094:	3708      	adds	r7, #8
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	20005260 	.word	0x20005260
 80110a0:	080123a8 	.word	0x080123a8

080110a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b084      	sub	sp, #16
 80110a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80110aa:	4b0f      	ldr	r3, [pc, #60]	; (80110e8 <Get_SerialNum+0x44>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80110b0:	4b0e      	ldr	r3, [pc, #56]	; (80110ec <Get_SerialNum+0x48>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80110b6:	4b0e      	ldr	r3, [pc, #56]	; (80110f0 <Get_SerialNum+0x4c>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80110bc:	68fa      	ldr	r2, [r7, #12]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	4413      	add	r3, r2
 80110c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d009      	beq.n	80110de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80110ca:	2208      	movs	r2, #8
 80110cc:	4909      	ldr	r1, [pc, #36]	; (80110f4 <Get_SerialNum+0x50>)
 80110ce:	68f8      	ldr	r0, [r7, #12]
 80110d0:	f000 f814 	bl	80110fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80110d4:	2204      	movs	r2, #4
 80110d6:	4908      	ldr	r1, [pc, #32]	; (80110f8 <Get_SerialNum+0x54>)
 80110d8:	68b8      	ldr	r0, [r7, #8]
 80110da:	f000 f80f 	bl	80110fc <IntToUnicode>
  }
}
 80110de:	bf00      	nop
 80110e0:	3710      	adds	r7, #16
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	1fff7590 	.word	0x1fff7590
 80110ec:	1fff7594 	.word	0x1fff7594
 80110f0:	1fff7598 	.word	0x1fff7598
 80110f4:	20000172 	.word	0x20000172
 80110f8:	20000182 	.word	0x20000182

080110fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80110fc:	b480      	push	{r7}
 80110fe:	b087      	sub	sp, #28
 8011100:	af00      	add	r7, sp, #0
 8011102:	60f8      	str	r0, [r7, #12]
 8011104:	60b9      	str	r1, [r7, #8]
 8011106:	4613      	mov	r3, r2
 8011108:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801110a:	2300      	movs	r3, #0
 801110c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801110e:	2300      	movs	r3, #0
 8011110:	75fb      	strb	r3, [r7, #23]
 8011112:	e027      	b.n	8011164 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	0f1b      	lsrs	r3, r3, #28
 8011118:	2b09      	cmp	r3, #9
 801111a:	d80b      	bhi.n	8011134 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	0f1b      	lsrs	r3, r3, #28
 8011120:	b2da      	uxtb	r2, r3
 8011122:	7dfb      	ldrb	r3, [r7, #23]
 8011124:	005b      	lsls	r3, r3, #1
 8011126:	4619      	mov	r1, r3
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	440b      	add	r3, r1
 801112c:	3230      	adds	r2, #48	; 0x30
 801112e:	b2d2      	uxtb	r2, r2
 8011130:	701a      	strb	r2, [r3, #0]
 8011132:	e00a      	b.n	801114a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	0f1b      	lsrs	r3, r3, #28
 8011138:	b2da      	uxtb	r2, r3
 801113a:	7dfb      	ldrb	r3, [r7, #23]
 801113c:	005b      	lsls	r3, r3, #1
 801113e:	4619      	mov	r1, r3
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	440b      	add	r3, r1
 8011144:	3237      	adds	r2, #55	; 0x37
 8011146:	b2d2      	uxtb	r2, r2
 8011148:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	011b      	lsls	r3, r3, #4
 801114e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011150:	7dfb      	ldrb	r3, [r7, #23]
 8011152:	005b      	lsls	r3, r3, #1
 8011154:	3301      	adds	r3, #1
 8011156:	68ba      	ldr	r2, [r7, #8]
 8011158:	4413      	add	r3, r2
 801115a:	2200      	movs	r2, #0
 801115c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801115e:	7dfb      	ldrb	r3, [r7, #23]
 8011160:	3301      	adds	r3, #1
 8011162:	75fb      	strb	r3, [r7, #23]
 8011164:	7dfa      	ldrb	r2, [r7, #23]
 8011166:	79fb      	ldrb	r3, [r7, #7]
 8011168:	429a      	cmp	r2, r3
 801116a:	d3d3      	bcc.n	8011114 <IntToUnicode+0x18>
  }
}
 801116c:	bf00      	nop
 801116e:	bf00      	nop
 8011170:	371c      	adds	r7, #28
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr

0801117a <LL_AHB2_GRP1_EnableClock>:
{
 801117a:	b480      	push	{r7}
 801117c:	b085      	sub	sp, #20
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8011182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	4313      	orrs	r3, r2
 8011190:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8011192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011196:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	4013      	ands	r3, r2
 801119c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801119e:	68fb      	ldr	r3, [r7, #12]
}
 80111a0:	bf00      	nop
 80111a2:	3714      	adds	r7, #20
 80111a4:	46bd      	mov	sp, r7
 80111a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111aa:	4770      	bx	lr

080111ac <LL_APB1_GRP1_EnableClock>:
{
 80111ac:	b480      	push	{r7}
 80111ae:	b085      	sub	sp, #20
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80111b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80111b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80111ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	4313      	orrs	r3, r2
 80111c2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80111c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80111c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4013      	ands	r3, r2
 80111ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80111d0:	68fb      	ldr	r3, [r7, #12]
}
 80111d2:	bf00      	nop
 80111d4:	3714      	adds	r7, #20
 80111d6:	46bd      	mov	sp, r7
 80111d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111dc:	4770      	bx	lr
	...

080111e0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b088      	sub	sp, #32
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80111e8:	f107 030c 	add.w	r3, r7, #12
 80111ec:	2200      	movs	r2, #0
 80111ee:	601a      	str	r2, [r3, #0]
 80111f0:	605a      	str	r2, [r3, #4]
 80111f2:	609a      	str	r2, [r3, #8]
 80111f4:	60da      	str	r2, [r3, #12]
 80111f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	4a1d      	ldr	r2, [pc, #116]	; (8011274 <HAL_PCD_MspInit+0x94>)
 80111fe:	4293      	cmp	r3, r2
 8011200:	d134      	bne.n	801126c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011202:	2001      	movs	r0, #1
 8011204:	f7ff ffb9 	bl	801117a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011208:	2004      	movs	r0, #4
 801120a:	f7ff ffb6 	bl	801117a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    PC9     ------> USB_NOE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801120e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011212:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011214:	2302      	movs	r3, #2
 8011216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011218:	2300      	movs	r3, #0
 801121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801121c:	2300      	movs	r3, #0
 801121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8011220:	230a      	movs	r3, #10
 8011222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011224:	f107 030c 	add.w	r3, r7, #12
 8011228:	4619      	mov	r1, r3
 801122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801122e:	f7f1 fb3d 	bl	80028ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8011232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011236:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011238:	2302      	movs	r3, #2
 801123a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801123c:	2300      	movs	r3, #0
 801123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011240:	2300      	movs	r3, #0
 8011242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8011244:	230a      	movs	r3, #10
 8011246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011248:	f107 030c 	add.w	r3, r7, #12
 801124c:	4619      	mov	r1, r3
 801124e:	480a      	ldr	r0, [pc, #40]	; (8011278 <HAL_PCD_MspInit+0x98>)
 8011250:	f7f1 fb2c 	bl	80028ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011254:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8011258:	f7ff ffa8 	bl	80111ac <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801125c:	2200      	movs	r2, #0
 801125e:	2105      	movs	r1, #5
 8011260:	2014      	movs	r0, #20
 8011262:	f7f1 fafb 	bl	800285c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011266:	2014      	movs	r0, #20
 8011268:	f7f1 fb12 	bl	8002890 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801126c:	bf00      	nop
 801126e:	3720      	adds	r7, #32
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}
 8011274:	40006800 	.word	0x40006800
 8011278:	48000800 	.word	0x48000800

0801127c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8011290:	4619      	mov	r1, r3
 8011292:	4610      	mov	r0, r2
 8011294:	f7fa fdec 	bl	800be70 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011298:	bf00      	nop
 801129a:	3708      	adds	r7, #8
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	460b      	mov	r3, r1
 80112aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80112b2:	78fa      	ldrb	r2, [r7, #3]
 80112b4:	6879      	ldr	r1, [r7, #4]
 80112b6:	4613      	mov	r3, r2
 80112b8:	009b      	lsls	r3, r3, #2
 80112ba:	4413      	add	r3, r2
 80112bc:	00db      	lsls	r3, r3, #3
 80112be:	440b      	add	r3, r1
 80112c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80112c4:	681a      	ldr	r2, [r3, #0]
 80112c6:	78fb      	ldrb	r3, [r7, #3]
 80112c8:	4619      	mov	r1, r3
 80112ca:	f7fa fe26 	bl	800bf1a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80112ce:	bf00      	nop
 80112d0:	3708      	adds	r7, #8
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112d6:	b580      	push	{r7, lr}
 80112d8:	b082      	sub	sp, #8
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
 80112de:	460b      	mov	r3, r1
 80112e0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80112e8:	78fa      	ldrb	r2, [r7, #3]
 80112ea:	6879      	ldr	r1, [r7, #4]
 80112ec:	4613      	mov	r3, r2
 80112ee:	009b      	lsls	r3, r3, #2
 80112f0:	4413      	add	r3, r2
 80112f2:	00db      	lsls	r3, r3, #3
 80112f4:	440b      	add	r3, r1
 80112f6:	333c      	adds	r3, #60	; 0x3c
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	78fb      	ldrb	r3, [r7, #3]
 80112fc:	4619      	mov	r1, r3
 80112fe:	f7fa fe6f 	bl	800bfe0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011302:	bf00      	nop
 8011304:	3708      	adds	r7, #8
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}

0801130a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801130a:	b580      	push	{r7, lr}
 801130c:	b082      	sub	sp, #8
 801130e:	af00      	add	r7, sp, #0
 8011310:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011318:	4618      	mov	r0, r3
 801131a:	f7fa ff83 	bl	800c224 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801131e:	bf00      	nop
 8011320:	3708      	adds	r7, #8
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}

08011326 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011326:	b580      	push	{r7, lr}
 8011328:	b084      	sub	sp, #16
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801132e:	2301      	movs	r3, #1
 8011330:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	689b      	ldr	r3, [r3, #8]
 8011336:	2b02      	cmp	r3, #2
 8011338:	d001      	beq.n	801133e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801133a:	f7ef fc7d 	bl	8000c38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011344:	7bfa      	ldrb	r2, [r7, #15]
 8011346:	4611      	mov	r1, r2
 8011348:	4618      	mov	r0, r3
 801134a:	f7fa ff2d 	bl	800c1a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011354:	4618      	mov	r0, r3
 8011356:	f7fa fed9 	bl	800c10c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801135a:	bf00      	nop
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
	...

08011364 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011372:	4618      	mov	r0, r3
 8011374:	f7fa ff28 	bl	800c1c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	699b      	ldr	r3, [r3, #24]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d005      	beq.n	801138c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011380:	4b04      	ldr	r3, [pc, #16]	; (8011394 <HAL_PCD_SuspendCallback+0x30>)
 8011382:	691b      	ldr	r3, [r3, #16]
 8011384:	4a03      	ldr	r2, [pc, #12]	; (8011394 <HAL_PCD_SuspendCallback+0x30>)
 8011386:	f043 0306 	orr.w	r3, r3, #6
 801138a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801138c:	bf00      	nop
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	e000ed00 	.word	0xe000ed00

08011398 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	699b      	ldr	r3, [r3, #24]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d007      	beq.n	80113b8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80113a8:	4b08      	ldr	r3, [pc, #32]	; (80113cc <HAL_PCD_ResumeCallback+0x34>)
 80113aa:	691b      	ldr	r3, [r3, #16]
 80113ac:	4a07      	ldr	r2, [pc, #28]	; (80113cc <HAL_PCD_ResumeCallback+0x34>)
 80113ae:	f023 0306 	bic.w	r3, r3, #6
 80113b2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80113b4:	f000 f9fc 	bl	80117b0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80113be:	4618      	mov	r0, r3
 80113c0:	f7fa ff18 	bl	800c1f4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80113c4:	bf00      	nop
 80113c6:	3708      	adds	r7, #8
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	e000ed00 	.word	0xe000ed00

080113d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80113d8:	4a2c      	ldr	r2, [pc, #176]	; (801148c <USBD_LL_Init+0xbc>)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	4a2a      	ldr	r2, [pc, #168]	; (801148c <USBD_LL_Init+0xbc>)
 80113e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80113e8:	f7f3 ffbe 	bl	8005368 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80113ec:	4b27      	ldr	r3, [pc, #156]	; (801148c <USBD_LL_Init+0xbc>)
 80113ee:	4a28      	ldr	r2, [pc, #160]	; (8011490 <USBD_LL_Init+0xc0>)
 80113f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80113f2:	4b26      	ldr	r3, [pc, #152]	; (801148c <USBD_LL_Init+0xbc>)
 80113f4:	2208      	movs	r2, #8
 80113f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80113f8:	4b24      	ldr	r3, [pc, #144]	; (801148c <USBD_LL_Init+0xbc>)
 80113fa:	2202      	movs	r2, #2
 80113fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80113fe:	4b23      	ldr	r3, [pc, #140]	; (801148c <USBD_LL_Init+0xbc>)
 8011400:	2202      	movs	r2, #2
 8011402:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011404:	4b21      	ldr	r3, [pc, #132]	; (801148c <USBD_LL_Init+0xbc>)
 8011406:	2200      	movs	r2, #0
 8011408:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801140a:	4b20      	ldr	r3, [pc, #128]	; (801148c <USBD_LL_Init+0xbc>)
 801140c:	2200      	movs	r2, #0
 801140e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011410:	4b1e      	ldr	r3, [pc, #120]	; (801148c <USBD_LL_Init+0xbc>)
 8011412:	2200      	movs	r2, #0
 8011414:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011416:	4b1d      	ldr	r3, [pc, #116]	; (801148c <USBD_LL_Init+0xbc>)
 8011418:	2200      	movs	r2, #0
 801141a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801141c:	481b      	ldr	r0, [pc, #108]	; (801148c <USBD_LL_Init+0xbc>)
 801141e:	f7f2 fa51 	bl	80038c4 <HAL_PCD_Init>
 8011422:	4603      	mov	r3, r0
 8011424:	2b00      	cmp	r3, #0
 8011426:	d001      	beq.n	801142c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8011428:	f7ef fc06 	bl	8000c38 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011432:	2318      	movs	r3, #24
 8011434:	2200      	movs	r2, #0
 8011436:	2100      	movs	r1, #0
 8011438:	f7f3 ff0a 	bl	8005250 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011442:	2358      	movs	r3, #88	; 0x58
 8011444:	2200      	movs	r2, #0
 8011446:	2180      	movs	r1, #128	; 0x80
 8011448:	f7f3 ff02 	bl	8005250 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011452:	23c0      	movs	r3, #192	; 0xc0
 8011454:	2200      	movs	r2, #0
 8011456:	2181      	movs	r1, #129	; 0x81
 8011458:	f7f3 fefa 	bl	8005250 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011462:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011466:	2200      	movs	r2, #0
 8011468:	2101      	movs	r1, #1
 801146a:	f7f3 fef1 	bl	8005250 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011478:	2200      	movs	r2, #0
 801147a:	2182      	movs	r1, #130	; 0x82
 801147c:	f7f3 fee8 	bl	8005250 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011480:	2300      	movs	r3, #0
}
 8011482:	4618      	mov	r0, r3
 8011484:	3708      	adds	r7, #8
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	20005460 	.word	0x20005460
 8011490:	40006800 	.word	0x40006800

08011494 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b084      	sub	sp, #16
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801149c:	2300      	movs	r3, #0
 801149e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114a0:	2300      	movs	r3, #0
 80114a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7f2 faef 	bl	8003a8e <HAL_PCD_Start>
 80114b0:	4603      	mov	r3, r0
 80114b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114b4:	7bfb      	ldrb	r3, [r7, #15]
 80114b6:	4618      	mov	r0, r3
 80114b8:	f000 f980 	bl	80117bc <USBD_Get_USB_Status>
 80114bc:	4603      	mov	r3, r0
 80114be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3710      	adds	r7, #16
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b084      	sub	sp, #16
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
 80114d2:	4608      	mov	r0, r1
 80114d4:	4611      	mov	r1, r2
 80114d6:	461a      	mov	r2, r3
 80114d8:	4603      	mov	r3, r0
 80114da:	70fb      	strb	r3, [r7, #3]
 80114dc:	460b      	mov	r3, r1
 80114de:	70bb      	strb	r3, [r7, #2]
 80114e0:	4613      	mov	r3, r2
 80114e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114e4:	2300      	movs	r3, #0
 80114e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114e8:	2300      	movs	r3, #0
 80114ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80114f2:	78bb      	ldrb	r3, [r7, #2]
 80114f4:	883a      	ldrh	r2, [r7, #0]
 80114f6:	78f9      	ldrb	r1, [r7, #3]
 80114f8:	f7f2 fc37 	bl	8003d6a <HAL_PCD_EP_Open>
 80114fc:	4603      	mov	r3, r0
 80114fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011500:	7bfb      	ldrb	r3, [r7, #15]
 8011502:	4618      	mov	r0, r3
 8011504:	f000 f95a 	bl	80117bc <USBD_Get_USB_Status>
 8011508:	4603      	mov	r3, r0
 801150a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801150c:	7bbb      	ldrb	r3, [r7, #14]
}
 801150e:	4618      	mov	r0, r3
 8011510:	3710      	adds	r7, #16
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}

08011516 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011516:	b580      	push	{r7, lr}
 8011518:	b084      	sub	sp, #16
 801151a:	af00      	add	r7, sp, #0
 801151c:	6078      	str	r0, [r7, #4]
 801151e:	460b      	mov	r3, r1
 8011520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011522:	2300      	movs	r3, #0
 8011524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011526:	2300      	movs	r3, #0
 8011528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011530:	78fa      	ldrb	r2, [r7, #3]
 8011532:	4611      	mov	r1, r2
 8011534:	4618      	mov	r0, r3
 8011536:	f7f2 fc7e 	bl	8003e36 <HAL_PCD_EP_Close>
 801153a:	4603      	mov	r3, r0
 801153c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801153e:	7bfb      	ldrb	r3, [r7, #15]
 8011540:	4618      	mov	r0, r3
 8011542:	f000 f93b 	bl	80117bc <USBD_Get_USB_Status>
 8011546:	4603      	mov	r3, r0
 8011548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801154a:	7bbb      	ldrb	r3, [r7, #14]
}
 801154c:	4618      	mov	r0, r3
 801154e:	3710      	adds	r7, #16
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}

08011554 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	460b      	mov	r3, r1
 801155e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011560:	2300      	movs	r3, #0
 8011562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011564:	2300      	movs	r3, #0
 8011566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801156e:	78fa      	ldrb	r2, [r7, #3]
 8011570:	4611      	mov	r1, r2
 8011572:	4618      	mov	r0, r3
 8011574:	f7f2 fd3f 	bl	8003ff6 <HAL_PCD_EP_SetStall>
 8011578:	4603      	mov	r3, r0
 801157a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801157c:	7bfb      	ldrb	r3, [r7, #15]
 801157e:	4618      	mov	r0, r3
 8011580:	f000 f91c 	bl	80117bc <USBD_Get_USB_Status>
 8011584:	4603      	mov	r3, r0
 8011586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011588:	7bbb      	ldrb	r3, [r7, #14]
}
 801158a:	4618      	mov	r0, r3
 801158c:	3710      	adds	r7, #16
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}

08011592 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011592:	b580      	push	{r7, lr}
 8011594:	b084      	sub	sp, #16
 8011596:	af00      	add	r7, sp, #0
 8011598:	6078      	str	r0, [r7, #4]
 801159a:	460b      	mov	r3, r1
 801159c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801159e:	2300      	movs	r3, #0
 80115a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115a2:	2300      	movs	r3, #0
 80115a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80115ac:	78fa      	ldrb	r2, [r7, #3]
 80115ae:	4611      	mov	r1, r2
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7f2 fd72 	bl	800409a <HAL_PCD_EP_ClrStall>
 80115b6:	4603      	mov	r3, r0
 80115b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115ba:	7bfb      	ldrb	r3, [r7, #15]
 80115bc:	4618      	mov	r0, r3
 80115be:	f000 f8fd 	bl	80117bc <USBD_Get_USB_Status>
 80115c2:	4603      	mov	r3, r0
 80115c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	3710      	adds	r7, #16
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}

080115d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115d0:	b480      	push	{r7}
 80115d2:	b085      	sub	sp, #20
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
 80115d8:	460b      	mov	r3, r1
 80115da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80115e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80115e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	da0c      	bge.n	8011606 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80115ec:	78fb      	ldrb	r3, [r7, #3]
 80115ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115f2:	68f9      	ldr	r1, [r7, #12]
 80115f4:	1c5a      	adds	r2, r3, #1
 80115f6:	4613      	mov	r3, r2
 80115f8:	009b      	lsls	r3, r3, #2
 80115fa:	4413      	add	r3, r2
 80115fc:	00db      	lsls	r3, r3, #3
 80115fe:	440b      	add	r3, r1
 8011600:	3302      	adds	r3, #2
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	e00b      	b.n	801161e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011606:	78fb      	ldrb	r3, [r7, #3]
 8011608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801160c:	68f9      	ldr	r1, [r7, #12]
 801160e:	4613      	mov	r3, r2
 8011610:	009b      	lsls	r3, r3, #2
 8011612:	4413      	add	r3, r2
 8011614:	00db      	lsls	r3, r3, #3
 8011616:	440b      	add	r3, r1
 8011618:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 801161c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801161e:	4618      	mov	r0, r3
 8011620:	3714      	adds	r7, #20
 8011622:	46bd      	mov	sp, r7
 8011624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011628:	4770      	bx	lr

0801162a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801162a:	b580      	push	{r7, lr}
 801162c:	b084      	sub	sp, #16
 801162e:	af00      	add	r7, sp, #0
 8011630:	6078      	str	r0, [r7, #4]
 8011632:	460b      	mov	r3, r1
 8011634:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011636:	2300      	movs	r3, #0
 8011638:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801163a:	2300      	movs	r3, #0
 801163c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011644:	78fa      	ldrb	r2, [r7, #3]
 8011646:	4611      	mov	r1, r2
 8011648:	4618      	mov	r0, r3
 801164a:	f7f2 fb69 	bl	8003d20 <HAL_PCD_SetAddress>
 801164e:	4603      	mov	r3, r0
 8011650:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011652:	7bfb      	ldrb	r3, [r7, #15]
 8011654:	4618      	mov	r0, r3
 8011656:	f000 f8b1 	bl	80117bc <USBD_Get_USB_Status>
 801165a:	4603      	mov	r3, r0
 801165c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801165e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011660:	4618      	mov	r0, r3
 8011662:	3710      	adds	r7, #16
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}

08011668 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b086      	sub	sp, #24
 801166c:	af00      	add	r7, sp, #0
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	607a      	str	r2, [r7, #4]
 8011672:	603b      	str	r3, [r7, #0]
 8011674:	460b      	mov	r3, r1
 8011676:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011678:	2300      	movs	r3, #0
 801167a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801167c:	2300      	movs	r3, #0
 801167e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011686:	7af9      	ldrb	r1, [r7, #11]
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	f7f2 fc70 	bl	8003f70 <HAL_PCD_EP_Transmit>
 8011690:	4603      	mov	r3, r0
 8011692:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011694:	7dfb      	ldrb	r3, [r7, #23]
 8011696:	4618      	mov	r0, r3
 8011698:	f000 f890 	bl	80117bc <USBD_Get_USB_Status>
 801169c:	4603      	mov	r3, r0
 801169e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80116a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3718      	adds	r7, #24
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}

080116aa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80116aa:	b580      	push	{r7, lr}
 80116ac:	b086      	sub	sp, #24
 80116ae:	af00      	add	r7, sp, #0
 80116b0:	60f8      	str	r0, [r7, #12]
 80116b2:	607a      	str	r2, [r7, #4]
 80116b4:	603b      	str	r3, [r7, #0]
 80116b6:	460b      	mov	r3, r1
 80116b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116ba:	2300      	movs	r3, #0
 80116bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116be:	2300      	movs	r3, #0
 80116c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80116c8:	7af9      	ldrb	r1, [r7, #11]
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	687a      	ldr	r2, [r7, #4]
 80116ce:	f7f2 fbfa 	bl	8003ec6 <HAL_PCD_EP_Receive>
 80116d2:	4603      	mov	r3, r0
 80116d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116d6:	7dfb      	ldrb	r3, [r7, #23]
 80116d8:	4618      	mov	r0, r3
 80116da:	f000 f86f 	bl	80117bc <USBD_Get_USB_Status>
 80116de:	4603      	mov	r3, r0
 80116e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80116e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3718      	adds	r7, #24
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}

080116ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	460b      	mov	r3, r1
 80116f6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80116fe:	78fa      	ldrb	r2, [r7, #3]
 8011700:	4611      	mov	r1, r2
 8011702:	4618      	mov	r0, r3
 8011704:	f7f2 fc1c 	bl	8003f40 <HAL_PCD_EP_GetRxCount>
 8011708:	4603      	mov	r3, r0
}
 801170a:	4618      	mov	r0, r3
 801170c:	3708      	adds	r7, #8
 801170e:	46bd      	mov	sp, r7
 8011710:	bd80      	pop	{r7, pc}
	...

08011714 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	460b      	mov	r3, r1
 801171e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011720:	78fb      	ldrb	r3, [r7, #3]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d002      	beq.n	801172c <HAL_PCDEx_LPM_Callback+0x18>
 8011726:	2b01      	cmp	r3, #1
 8011728:	d013      	beq.n	8011752 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801172a:	e023      	b.n	8011774 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	699b      	ldr	r3, [r3, #24]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d007      	beq.n	8011744 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011734:	f000 f83c 	bl	80117b0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011738:	4b10      	ldr	r3, [pc, #64]	; (801177c <HAL_PCDEx_LPM_Callback+0x68>)
 801173a:	691b      	ldr	r3, [r3, #16]
 801173c:	4a0f      	ldr	r2, [pc, #60]	; (801177c <HAL_PCDEx_LPM_Callback+0x68>)
 801173e:	f023 0306 	bic.w	r3, r3, #6
 8011742:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801174a:	4618      	mov	r0, r3
 801174c:	f7fa fd52 	bl	800c1f4 <USBD_LL_Resume>
    break;
 8011750:	e010      	b.n	8011774 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011758:	4618      	mov	r0, r3
 801175a:	f7fa fd35 	bl	800c1c8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	699b      	ldr	r3, [r3, #24]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d005      	beq.n	8011772 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011766:	4b05      	ldr	r3, [pc, #20]	; (801177c <HAL_PCDEx_LPM_Callback+0x68>)
 8011768:	691b      	ldr	r3, [r3, #16]
 801176a:	4a04      	ldr	r2, [pc, #16]	; (801177c <HAL_PCDEx_LPM_Callback+0x68>)
 801176c:	f043 0306 	orr.w	r3, r3, #6
 8011770:	6113      	str	r3, [r2, #16]
    break;
 8011772:	bf00      	nop
}
 8011774:	bf00      	nop
 8011776:	3708      	adds	r7, #8
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}
 801177c:	e000ed00 	.word	0xe000ed00

08011780 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011780:	b480      	push	{r7}
 8011782:	b083      	sub	sp, #12
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011788:	4b03      	ldr	r3, [pc, #12]	; (8011798 <USBD_static_malloc+0x18>)
}
 801178a:	4618      	mov	r0, r3
 801178c:	370c      	adds	r7, #12
 801178e:	46bd      	mov	sp, r7
 8011790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011794:	4770      	bx	lr
 8011796:	bf00      	nop
 8011798:	200039d4 	.word	0x200039d4

0801179c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801179c:	b480      	push	{r7}
 801179e:	b083      	sub	sp, #12
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]

}
 80117a4:	bf00      	nop
 80117a6:	370c      	adds	r7, #12
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr

080117b0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80117b4:	f7ef f974 	bl	8000aa0 <SystemClock_Config>
}
 80117b8:	bf00      	nop
 80117ba:	bd80      	pop	{r7, pc}

080117bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80117bc:	b480      	push	{r7}
 80117be:	b085      	sub	sp, #20
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	4603      	mov	r3, r0
 80117c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117c6:	2300      	movs	r3, #0
 80117c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80117ca:	79fb      	ldrb	r3, [r7, #7]
 80117cc:	2b03      	cmp	r3, #3
 80117ce:	d817      	bhi.n	8011800 <USBD_Get_USB_Status+0x44>
 80117d0:	a201      	add	r2, pc, #4	; (adr r2, 80117d8 <USBD_Get_USB_Status+0x1c>)
 80117d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117d6:	bf00      	nop
 80117d8:	080117e9 	.word	0x080117e9
 80117dc:	080117ef 	.word	0x080117ef
 80117e0:	080117f5 	.word	0x080117f5
 80117e4:	080117fb 	.word	0x080117fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80117e8:	2300      	movs	r3, #0
 80117ea:	73fb      	strb	r3, [r7, #15]
    break;
 80117ec:	e00b      	b.n	8011806 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80117ee:	2303      	movs	r3, #3
 80117f0:	73fb      	strb	r3, [r7, #15]
    break;
 80117f2:	e008      	b.n	8011806 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80117f4:	2301      	movs	r3, #1
 80117f6:	73fb      	strb	r3, [r7, #15]
    break;
 80117f8:	e005      	b.n	8011806 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80117fa:	2303      	movs	r3, #3
 80117fc:	73fb      	strb	r3, [r7, #15]
    break;
 80117fe:	e002      	b.n	8011806 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011800:	2303      	movs	r3, #3
 8011802:	73fb      	strb	r3, [r7, #15]
    break;
 8011804:	bf00      	nop
  }
  return usb_status;
 8011806:	7bfb      	ldrb	r3, [r7, #15]
}
 8011808:	4618      	mov	r0, r3
 801180a:	3714      	adds	r7, #20
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <powf>:
 8011814:	b508      	push	{r3, lr}
 8011816:	ed2d 8b04 	vpush	{d8-d9}
 801181a:	eeb0 9a40 	vmov.f32	s18, s0
 801181e:	eef0 8a60 	vmov.f32	s17, s1
 8011822:	f000 f88f 	bl	8011944 <__ieee754_powf>
 8011826:	4b43      	ldr	r3, [pc, #268]	; (8011934 <powf+0x120>)
 8011828:	f993 3000 	ldrsb.w	r3, [r3]
 801182c:	3301      	adds	r3, #1
 801182e:	eeb0 8a40 	vmov.f32	s16, s0
 8011832:	d012      	beq.n	801185a <powf+0x46>
 8011834:	eef4 8a68 	vcmp.f32	s17, s17
 8011838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801183c:	d60d      	bvs.n	801185a <powf+0x46>
 801183e:	eeb4 9a49 	vcmp.f32	s18, s18
 8011842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011846:	d70d      	bvc.n	8011864 <powf+0x50>
 8011848:	eef5 8a40 	vcmp.f32	s17, #0.0
 801184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011850:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011854:	bf08      	it	eq
 8011856:	eeb0 8a67 	vmoveq.f32	s16, s15
 801185a:	eeb0 0a48 	vmov.f32	s0, s16
 801185e:	ecbd 8b04 	vpop	{d8-d9}
 8011862:	bd08      	pop	{r3, pc}
 8011864:	eddf 9a34 	vldr	s19, [pc, #208]	; 8011938 <powf+0x124>
 8011868:	eeb4 9a69 	vcmp.f32	s18, s19
 801186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011870:	d116      	bne.n	80118a0 <powf+0x8c>
 8011872:	eef4 8a69 	vcmp.f32	s17, s19
 8011876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801187a:	d057      	beq.n	801192c <powf+0x118>
 801187c:	eeb0 0a68 	vmov.f32	s0, s17
 8011880:	f000 fb2a 	bl	8011ed8 <finitef>
 8011884:	2800      	cmp	r0, #0
 8011886:	d0e8      	beq.n	801185a <powf+0x46>
 8011888:	eef4 8ae9 	vcmpe.f32	s17, s19
 801188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011890:	d5e3      	bpl.n	801185a <powf+0x46>
 8011892:	f000 fc03 	bl	801209c <__errno>
 8011896:	2321      	movs	r3, #33	; 0x21
 8011898:	6003      	str	r3, [r0, #0]
 801189a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801193c <powf+0x128>
 801189e:	e7dc      	b.n	801185a <powf+0x46>
 80118a0:	f000 fb1a 	bl	8011ed8 <finitef>
 80118a4:	bb50      	cbnz	r0, 80118fc <powf+0xe8>
 80118a6:	eeb0 0a49 	vmov.f32	s0, s18
 80118aa:	f000 fb15 	bl	8011ed8 <finitef>
 80118ae:	b328      	cbz	r0, 80118fc <powf+0xe8>
 80118b0:	eeb0 0a68 	vmov.f32	s0, s17
 80118b4:	f000 fb10 	bl	8011ed8 <finitef>
 80118b8:	b300      	cbz	r0, 80118fc <powf+0xe8>
 80118ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80118be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c2:	d706      	bvc.n	80118d2 <powf+0xbe>
 80118c4:	f000 fbea 	bl	801209c <__errno>
 80118c8:	2321      	movs	r3, #33	; 0x21
 80118ca:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 80118ce:	6003      	str	r3, [r0, #0]
 80118d0:	e7c3      	b.n	801185a <powf+0x46>
 80118d2:	f000 fbe3 	bl	801209c <__errno>
 80118d6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80118da:	2322      	movs	r3, #34	; 0x22
 80118dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e0:	6003      	str	r3, [r0, #0]
 80118e2:	d508      	bpl.n	80118f6 <powf+0xe2>
 80118e4:	eeb0 0a68 	vmov.f32	s0, s17
 80118e8:	f000 fb0a 	bl	8011f00 <rintf>
 80118ec:	eeb4 0a68 	vcmp.f32	s0, s17
 80118f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f4:	d1d1      	bne.n	801189a <powf+0x86>
 80118f6:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8011940 <powf+0x12c>
 80118fa:	e7ae      	b.n	801185a <powf+0x46>
 80118fc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011904:	d1a9      	bne.n	801185a <powf+0x46>
 8011906:	eeb0 0a49 	vmov.f32	s0, s18
 801190a:	f000 fae5 	bl	8011ed8 <finitef>
 801190e:	2800      	cmp	r0, #0
 8011910:	d0a3      	beq.n	801185a <powf+0x46>
 8011912:	eeb0 0a68 	vmov.f32	s0, s17
 8011916:	f000 fadf 	bl	8011ed8 <finitef>
 801191a:	2800      	cmp	r0, #0
 801191c:	d09d      	beq.n	801185a <powf+0x46>
 801191e:	f000 fbbd 	bl	801209c <__errno>
 8011922:	2322      	movs	r3, #34	; 0x22
 8011924:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8011938 <powf+0x124>
 8011928:	6003      	str	r3, [r0, #0]
 801192a:	e796      	b.n	801185a <powf+0x46>
 801192c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011930:	e793      	b.n	801185a <powf+0x46>
 8011932:	bf00      	nop
 8011934:	2000018a 	.word	0x2000018a
 8011938:	00000000 	.word	0x00000000
 801193c:	ff800000 	.word	0xff800000
 8011940:	7f800000 	.word	0x7f800000

08011944 <__ieee754_powf>:
 8011944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011948:	ee10 5a90 	vmov	r5, s1
 801194c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8011950:	ed2d 8b02 	vpush	{d8}
 8011954:	eeb0 8a40 	vmov.f32	s16, s0
 8011958:	eef0 8a60 	vmov.f32	s17, s1
 801195c:	f000 8291 	beq.w	8011e82 <__ieee754_powf+0x53e>
 8011960:	ee10 8a10 	vmov	r8, s0
 8011964:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8011968:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801196c:	dc06      	bgt.n	801197c <__ieee754_powf+0x38>
 801196e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8011972:	dd0a      	ble.n	801198a <__ieee754_powf+0x46>
 8011974:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8011978:	f000 8283 	beq.w	8011e82 <__ieee754_powf+0x53e>
 801197c:	ecbd 8b02 	vpop	{d8}
 8011980:	48d8      	ldr	r0, [pc, #864]	; (8011ce4 <__ieee754_powf+0x3a0>)
 8011982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011986:	f000 bab5 	b.w	8011ef4 <nanf>
 801198a:	f1b8 0f00 	cmp.w	r8, #0
 801198e:	da1f      	bge.n	80119d0 <__ieee754_powf+0x8c>
 8011990:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8011994:	da2e      	bge.n	80119f4 <__ieee754_powf+0xb0>
 8011996:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801199a:	f2c0 827b 	blt.w	8011e94 <__ieee754_powf+0x550>
 801199e:	15fb      	asrs	r3, r7, #23
 80119a0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80119a4:	fa47 f603 	asr.w	r6, r7, r3
 80119a8:	fa06 f303 	lsl.w	r3, r6, r3
 80119ac:	42bb      	cmp	r3, r7
 80119ae:	f040 8271 	bne.w	8011e94 <__ieee754_powf+0x550>
 80119b2:	f006 0601 	and.w	r6, r6, #1
 80119b6:	f1c6 0602 	rsb	r6, r6, #2
 80119ba:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80119be:	d120      	bne.n	8011a02 <__ieee754_powf+0xbe>
 80119c0:	2d00      	cmp	r5, #0
 80119c2:	f280 8264 	bge.w	8011e8e <__ieee754_powf+0x54a>
 80119c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80119ca:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80119ce:	e00d      	b.n	80119ec <__ieee754_powf+0xa8>
 80119d0:	2600      	movs	r6, #0
 80119d2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80119d6:	d1f0      	bne.n	80119ba <__ieee754_powf+0x76>
 80119d8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80119dc:	f000 8251 	beq.w	8011e82 <__ieee754_powf+0x53e>
 80119e0:	dd0a      	ble.n	80119f8 <__ieee754_powf+0xb4>
 80119e2:	2d00      	cmp	r5, #0
 80119e4:	f280 8250 	bge.w	8011e88 <__ieee754_powf+0x544>
 80119e8:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8011ce8 <__ieee754_powf+0x3a4>
 80119ec:	ecbd 8b02 	vpop	{d8}
 80119f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119f4:	2602      	movs	r6, #2
 80119f6:	e7ec      	b.n	80119d2 <__ieee754_powf+0x8e>
 80119f8:	2d00      	cmp	r5, #0
 80119fa:	daf5      	bge.n	80119e8 <__ieee754_powf+0xa4>
 80119fc:	eeb1 0a68 	vneg.f32	s0, s17
 8011a00:	e7f4      	b.n	80119ec <__ieee754_powf+0xa8>
 8011a02:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8011a06:	d102      	bne.n	8011a0e <__ieee754_powf+0xca>
 8011a08:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011a0c:	e7ee      	b.n	80119ec <__ieee754_powf+0xa8>
 8011a0e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8011a12:	eeb0 0a48 	vmov.f32	s0, s16
 8011a16:	d108      	bne.n	8011a2a <__ieee754_powf+0xe6>
 8011a18:	f1b8 0f00 	cmp.w	r8, #0
 8011a1c:	db05      	blt.n	8011a2a <__ieee754_powf+0xe6>
 8011a1e:	ecbd 8b02 	vpop	{d8}
 8011a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a26:	f000 ba4d 	b.w	8011ec4 <__ieee754_sqrtf>
 8011a2a:	f000 fa4e 	bl	8011eca <fabsf>
 8011a2e:	b124      	cbz	r4, 8011a3a <__ieee754_powf+0xf6>
 8011a30:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8011a34:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8011a38:	d117      	bne.n	8011a6a <__ieee754_powf+0x126>
 8011a3a:	2d00      	cmp	r5, #0
 8011a3c:	bfbc      	itt	lt
 8011a3e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8011a42:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011a46:	f1b8 0f00 	cmp.w	r8, #0
 8011a4a:	dacf      	bge.n	80119ec <__ieee754_powf+0xa8>
 8011a4c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8011a50:	ea54 0306 	orrs.w	r3, r4, r6
 8011a54:	d104      	bne.n	8011a60 <__ieee754_powf+0x11c>
 8011a56:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011a5a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011a5e:	e7c5      	b.n	80119ec <__ieee754_powf+0xa8>
 8011a60:	2e01      	cmp	r6, #1
 8011a62:	d1c3      	bne.n	80119ec <__ieee754_powf+0xa8>
 8011a64:	eeb1 0a40 	vneg.f32	s0, s0
 8011a68:	e7c0      	b.n	80119ec <__ieee754_powf+0xa8>
 8011a6a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8011a6e:	3801      	subs	r0, #1
 8011a70:	ea56 0300 	orrs.w	r3, r6, r0
 8011a74:	d104      	bne.n	8011a80 <__ieee754_powf+0x13c>
 8011a76:	ee38 8a48 	vsub.f32	s16, s16, s16
 8011a7a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011a7e:	e7b5      	b.n	80119ec <__ieee754_powf+0xa8>
 8011a80:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8011a84:	dd6b      	ble.n	8011b5e <__ieee754_powf+0x21a>
 8011a86:	4b99      	ldr	r3, [pc, #612]	; (8011cec <__ieee754_powf+0x3a8>)
 8011a88:	429c      	cmp	r4, r3
 8011a8a:	dc06      	bgt.n	8011a9a <__ieee754_powf+0x156>
 8011a8c:	2d00      	cmp	r5, #0
 8011a8e:	daab      	bge.n	80119e8 <__ieee754_powf+0xa4>
 8011a90:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8011cf0 <__ieee754_powf+0x3ac>
 8011a94:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011a98:	e7a8      	b.n	80119ec <__ieee754_powf+0xa8>
 8011a9a:	4b96      	ldr	r3, [pc, #600]	; (8011cf4 <__ieee754_powf+0x3b0>)
 8011a9c:	429c      	cmp	r4, r3
 8011a9e:	dd02      	ble.n	8011aa6 <__ieee754_powf+0x162>
 8011aa0:	2d00      	cmp	r5, #0
 8011aa2:	dcf5      	bgt.n	8011a90 <__ieee754_powf+0x14c>
 8011aa4:	e7a0      	b.n	80119e8 <__ieee754_powf+0xa4>
 8011aa6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011aaa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011aae:	eddf 6a92 	vldr	s13, [pc, #584]	; 8011cf8 <__ieee754_powf+0x3b4>
 8011ab2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8011ab6:	eee0 6a67 	vfms.f32	s13, s0, s15
 8011aba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011abe:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8011ac2:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011aca:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8011cfc <__ieee754_powf+0x3b8>
 8011ace:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8011ad2:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8011d00 <__ieee754_powf+0x3bc>
 8011ad6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011ada:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8011d04 <__ieee754_powf+0x3c0>
 8011ade:	eef0 6a67 	vmov.f32	s13, s15
 8011ae2:	eee0 6a07 	vfma.f32	s13, s0, s14
 8011ae6:	ee16 3a90 	vmov	r3, s13
 8011aea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011aee:	f023 030f 	bic.w	r3, r3, #15
 8011af2:	ee00 3a90 	vmov	s1, r3
 8011af6:	eee0 0a47 	vfms.f32	s1, s0, s14
 8011afa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011afe:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8011b02:	f025 050f 	bic.w	r5, r5, #15
 8011b06:	ee07 5a10 	vmov	s14, r5
 8011b0a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8011b0e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8011b12:	ee07 3a90 	vmov	s15, r3
 8011b16:	eee7 0a27 	vfma.f32	s1, s14, s15
 8011b1a:	3e01      	subs	r6, #1
 8011b1c:	ea56 0200 	orrs.w	r2, r6, r0
 8011b20:	ee07 5a10 	vmov	s14, r5
 8011b24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b28:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011b2c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8011b30:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011b34:	ee17 4a10 	vmov	r4, s14
 8011b38:	bf08      	it	eq
 8011b3a:	eeb0 8a40 	vmoveq.f32	s16, s0
 8011b3e:	2c00      	cmp	r4, #0
 8011b40:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011b44:	f340 8184 	ble.w	8011e50 <__ieee754_powf+0x50c>
 8011b48:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8011b4c:	f340 80fc 	ble.w	8011d48 <__ieee754_powf+0x404>
 8011b50:	eddf 7a67 	vldr	s15, [pc, #412]	; 8011cf0 <__ieee754_powf+0x3ac>
 8011b54:	ee28 0a27 	vmul.f32	s0, s16, s15
 8011b58:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011b5c:	e746      	b.n	80119ec <__ieee754_powf+0xa8>
 8011b5e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8011b62:	bf01      	itttt	eq
 8011b64:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8011d08 <__ieee754_powf+0x3c4>
 8011b68:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8011b6c:	f06f 0217 	mvneq.w	r2, #23
 8011b70:	ee17 4a90 	vmoveq	r4, s15
 8011b74:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8011b78:	bf18      	it	ne
 8011b7a:	2200      	movne	r2, #0
 8011b7c:	3b7f      	subs	r3, #127	; 0x7f
 8011b7e:	4413      	add	r3, r2
 8011b80:	4a62      	ldr	r2, [pc, #392]	; (8011d0c <__ieee754_powf+0x3c8>)
 8011b82:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8011b86:	4294      	cmp	r4, r2
 8011b88:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8011b8c:	dd06      	ble.n	8011b9c <__ieee754_powf+0x258>
 8011b8e:	4a60      	ldr	r2, [pc, #384]	; (8011d10 <__ieee754_powf+0x3cc>)
 8011b90:	4294      	cmp	r4, r2
 8011b92:	f340 80a4 	ble.w	8011cde <__ieee754_powf+0x39a>
 8011b96:	3301      	adds	r3, #1
 8011b98:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011b9c:	2400      	movs	r4, #0
 8011b9e:	4a5d      	ldr	r2, [pc, #372]	; (8011d14 <__ieee754_powf+0x3d0>)
 8011ba0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011ba4:	ee07 1a90 	vmov	s15, r1
 8011ba8:	ed92 7a00 	vldr	s14, [r2]
 8011bac:	4a5a      	ldr	r2, [pc, #360]	; (8011d18 <__ieee754_powf+0x3d4>)
 8011bae:	ee37 6a27 	vadd.f32	s12, s14, s15
 8011bb2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011bb6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8011bba:	1049      	asrs	r1, r1, #1
 8011bbc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8011bc0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8011bc4:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8011bc8:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8011bcc:	ee06 1a10 	vmov	s12, r1
 8011bd0:	ee65 4a26 	vmul.f32	s9, s10, s13
 8011bd4:	ee36 7a47 	vsub.f32	s14, s12, s14
 8011bd8:	ee14 7a90 	vmov	r7, s9
 8011bdc:	4017      	ands	r7, r2
 8011bde:	ee05 7a90 	vmov	s11, r7
 8011be2:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8011be6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011bea:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8011d1c <__ieee754_powf+0x3d8>
 8011bee:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8011bf2:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8011bf6:	ee25 6a26 	vmul.f32	s12, s10, s13
 8011bfa:	eddf 6a49 	vldr	s13, [pc, #292]	; 8011d20 <__ieee754_powf+0x3dc>
 8011bfe:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011c02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8011d24 <__ieee754_powf+0x3e0>
 8011c06:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011c0a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8011cf8 <__ieee754_powf+0x3b4>
 8011c0e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011c12:	eddf 6a45 	vldr	s13, [pc, #276]	; 8011d28 <__ieee754_powf+0x3e4>
 8011c16:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011c1a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8011d2c <__ieee754_powf+0x3e8>
 8011c1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011c22:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8011c26:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8011c2a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011c2e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8011c32:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8011c36:	eef0 7a45 	vmov.f32	s15, s10
 8011c3a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8011c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c42:	ee17 1a90 	vmov	r1, s15
 8011c46:	4011      	ands	r1, r2
 8011c48:	ee07 1a90 	vmov	s15, r1
 8011c4c:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8011c50:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8011c54:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011c58:	ee27 7a24 	vmul.f32	s14, s14, s9
 8011c5c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011c60:	eeb0 6a47 	vmov.f32	s12, s14
 8011c64:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8011c68:	ee16 1a10 	vmov	r1, s12
 8011c6c:	4011      	ands	r1, r2
 8011c6e:	ee06 1a90 	vmov	s13, r1
 8011c72:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8011c76:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8011d30 <__ieee754_powf+0x3ec>
 8011c7a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8011d34 <__ieee754_powf+0x3f0>
 8011c7e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011c82:	ee06 1a10 	vmov	s12, r1
 8011c86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011c8a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8011d38 <__ieee754_powf+0x3f4>
 8011c8e:	492b      	ldr	r1, [pc, #172]	; (8011d3c <__ieee754_powf+0x3f8>)
 8011c90:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011c94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011c98:	edd1 7a00 	vldr	s15, [r1]
 8011c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ca0:	ee07 3a90 	vmov	s15, r3
 8011ca4:	4b26      	ldr	r3, [pc, #152]	; (8011d40 <__ieee754_powf+0x3fc>)
 8011ca6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011caa:	eef0 7a47 	vmov.f32	s15, s14
 8011cae:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011cb2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011cb6:	edd4 0a00 	vldr	s1, [r4]
 8011cba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011cc2:	ee17 3a90 	vmov	r3, s15
 8011cc6:	4013      	ands	r3, r2
 8011cc8:	ee07 3a90 	vmov	s15, r3
 8011ccc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011cd0:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8011cd4:	eee6 6a65 	vfms.f32	s13, s12, s11
 8011cd8:	ee77 7a66 	vsub.f32	s15, s14, s13
 8011cdc:	e70f      	b.n	8011afe <__ieee754_powf+0x1ba>
 8011cde:	2401      	movs	r4, #1
 8011ce0:	e75d      	b.n	8011b9e <__ieee754_powf+0x25a>
 8011ce2:	bf00      	nop
 8011ce4:	08012510 	.word	0x08012510
 8011ce8:	00000000 	.word	0x00000000
 8011cec:	3f7ffff7 	.word	0x3f7ffff7
 8011cf0:	7149f2ca 	.word	0x7149f2ca
 8011cf4:	3f800007 	.word	0x3f800007
 8011cf8:	3eaaaaab 	.word	0x3eaaaaab
 8011cfc:	3fb8aa3b 	.word	0x3fb8aa3b
 8011d00:	36eca570 	.word	0x36eca570
 8011d04:	3fb8aa00 	.word	0x3fb8aa00
 8011d08:	4b800000 	.word	0x4b800000
 8011d0c:	001cc471 	.word	0x001cc471
 8011d10:	005db3d6 	.word	0x005db3d6
 8011d14:	08012514 	.word	0x08012514
 8011d18:	fffff000 	.word	0xfffff000
 8011d1c:	3e6c3255 	.word	0x3e6c3255
 8011d20:	3e53f142 	.word	0x3e53f142
 8011d24:	3e8ba305 	.word	0x3e8ba305
 8011d28:	3edb6db7 	.word	0x3edb6db7
 8011d2c:	3f19999a 	.word	0x3f19999a
 8011d30:	3f76384f 	.word	0x3f76384f
 8011d34:	3f763800 	.word	0x3f763800
 8011d38:	369dc3a0 	.word	0x369dc3a0
 8011d3c:	08012524 	.word	0x08012524
 8011d40:	0801251c 	.word	0x0801251c
 8011d44:	3338aa3c 	.word	0x3338aa3c
 8011d48:	f040 8092 	bne.w	8011e70 <__ieee754_powf+0x52c>
 8011d4c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8011d44 <__ieee754_powf+0x400>
 8011d50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d54:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8011d58:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d60:	f73f aef6 	bgt.w	8011b50 <__ieee754_powf+0x20c>
 8011d64:	15db      	asrs	r3, r3, #23
 8011d66:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8011d6a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011d6e:	4103      	asrs	r3, r0
 8011d70:	4423      	add	r3, r4
 8011d72:	4949      	ldr	r1, [pc, #292]	; (8011e98 <__ieee754_powf+0x554>)
 8011d74:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011d78:	3a7f      	subs	r2, #127	; 0x7f
 8011d7a:	4111      	asrs	r1, r2
 8011d7c:	ea23 0101 	bic.w	r1, r3, r1
 8011d80:	ee07 1a10 	vmov	s14, r1
 8011d84:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8011d88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8011d8c:	f1c2 0217 	rsb	r2, r2, #23
 8011d90:	4110      	asrs	r0, r2
 8011d92:	2c00      	cmp	r4, #0
 8011d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d98:	bfb8      	it	lt
 8011d9a:	4240      	neglt	r0, r0
 8011d9c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8011da0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8011e9c <__ieee754_powf+0x558>
 8011da4:	ee17 3a10 	vmov	r3, s14
 8011da8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011dac:	f023 030f 	bic.w	r3, r3, #15
 8011db0:	ee07 3a10 	vmov	s14, r3
 8011db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011db8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8011dbc:	eddf 7a38 	vldr	s15, [pc, #224]	; 8011ea0 <__ieee754_powf+0x55c>
 8011dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011dc4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8011dc8:	eddf 6a36 	vldr	s13, [pc, #216]	; 8011ea4 <__ieee754_powf+0x560>
 8011dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8011dd0:	eea7 0a26 	vfma.f32	s0, s14, s13
 8011dd4:	eeb0 6a40 	vmov.f32	s12, s0
 8011dd8:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011ddc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011de0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011de4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8011ea8 <__ieee754_powf+0x564>
 8011de8:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8011eac <__ieee754_powf+0x568>
 8011dec:	eea7 6a26 	vfma.f32	s12, s14, s13
 8011df0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8011eb0 <__ieee754_powf+0x56c>
 8011df4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011df8:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8011eb4 <__ieee754_powf+0x570>
 8011dfc:	eea6 6a87 	vfma.f32	s12, s13, s14
 8011e00:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8011eb8 <__ieee754_powf+0x574>
 8011e04:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011e08:	eeb0 6a40 	vmov.f32	s12, s0
 8011e0c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8011e10:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011e14:	eeb0 7a46 	vmov.f32	s14, s12
 8011e18:	ee77 6a66 	vsub.f32	s13, s14, s13
 8011e1c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8011e20:	eee0 7a27 	vfma.f32	s15, s0, s15
 8011e24:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8011e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e2c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011e30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011e34:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011e38:	ee10 3a10 	vmov	r3, s0
 8011e3c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8011e40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011e44:	da1a      	bge.n	8011e7c <__ieee754_powf+0x538>
 8011e46:	f000 f8b7 	bl	8011fb8 <scalbnf>
 8011e4a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011e4e:	e5cd      	b.n	80119ec <__ieee754_powf+0xa8>
 8011e50:	4a1a      	ldr	r2, [pc, #104]	; (8011ebc <__ieee754_powf+0x578>)
 8011e52:	4293      	cmp	r3, r2
 8011e54:	dd02      	ble.n	8011e5c <__ieee754_powf+0x518>
 8011e56:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8011ec0 <__ieee754_powf+0x57c>
 8011e5a:	e67b      	b.n	8011b54 <__ieee754_powf+0x210>
 8011e5c:	d108      	bne.n	8011e70 <__ieee754_powf+0x52c>
 8011e5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011e62:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8011e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e6a:	f6ff af7b 	blt.w	8011d64 <__ieee754_powf+0x420>
 8011e6e:	e7f2      	b.n	8011e56 <__ieee754_powf+0x512>
 8011e70:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8011e74:	f73f af76 	bgt.w	8011d64 <__ieee754_powf+0x420>
 8011e78:	2000      	movs	r0, #0
 8011e7a:	e78f      	b.n	8011d9c <__ieee754_powf+0x458>
 8011e7c:	ee00 3a10 	vmov	s0, r3
 8011e80:	e7e3      	b.n	8011e4a <__ieee754_powf+0x506>
 8011e82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011e86:	e5b1      	b.n	80119ec <__ieee754_powf+0xa8>
 8011e88:	eeb0 0a68 	vmov.f32	s0, s17
 8011e8c:	e5ae      	b.n	80119ec <__ieee754_powf+0xa8>
 8011e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8011e92:	e5ab      	b.n	80119ec <__ieee754_powf+0xa8>
 8011e94:	2600      	movs	r6, #0
 8011e96:	e590      	b.n	80119ba <__ieee754_powf+0x76>
 8011e98:	007fffff 	.word	0x007fffff
 8011e9c:	3f317218 	.word	0x3f317218
 8011ea0:	35bfbe8c 	.word	0x35bfbe8c
 8011ea4:	3f317200 	.word	0x3f317200
 8011ea8:	3331bb4c 	.word	0x3331bb4c
 8011eac:	b5ddea0e 	.word	0xb5ddea0e
 8011eb0:	388ab355 	.word	0x388ab355
 8011eb4:	bb360b61 	.word	0xbb360b61
 8011eb8:	3e2aaaab 	.word	0x3e2aaaab
 8011ebc:	43160000 	.word	0x43160000
 8011ec0:	0da24260 	.word	0x0da24260

08011ec4 <__ieee754_sqrtf>:
 8011ec4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011ec8:	4770      	bx	lr

08011eca <fabsf>:
 8011eca:	ee10 3a10 	vmov	r3, s0
 8011ece:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011ed2:	ee00 3a10 	vmov	s0, r3
 8011ed6:	4770      	bx	lr

08011ed8 <finitef>:
 8011ed8:	b082      	sub	sp, #8
 8011eda:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011ede:	9801      	ldr	r0, [sp, #4]
 8011ee0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011ee4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8011ee8:	bfac      	ite	ge
 8011eea:	2000      	movge	r0, #0
 8011eec:	2001      	movlt	r0, #1
 8011eee:	b002      	add	sp, #8
 8011ef0:	4770      	bx	lr
	...

08011ef4 <nanf>:
 8011ef4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011efc <nanf+0x8>
 8011ef8:	4770      	bx	lr
 8011efa:	bf00      	nop
 8011efc:	7fc00000 	.word	0x7fc00000

08011f00 <rintf>:
 8011f00:	ee10 2a10 	vmov	r2, s0
 8011f04:	b513      	push	{r0, r1, r4, lr}
 8011f06:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011f0a:	397f      	subs	r1, #127	; 0x7f
 8011f0c:	2916      	cmp	r1, #22
 8011f0e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011f12:	dc47      	bgt.n	8011fa4 <rintf+0xa4>
 8011f14:	b32b      	cbz	r3, 8011f62 <rintf+0x62>
 8011f16:	2900      	cmp	r1, #0
 8011f18:	ee10 3a10 	vmov	r3, s0
 8011f1c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8011f20:	da21      	bge.n	8011f66 <rintf+0x66>
 8011f22:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8011f26:	425b      	negs	r3, r3
 8011f28:	4921      	ldr	r1, [pc, #132]	; (8011fb0 <rintf+0xb0>)
 8011f2a:	0a5b      	lsrs	r3, r3, #9
 8011f2c:	0d12      	lsrs	r2, r2, #20
 8011f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011f32:	0512      	lsls	r2, r2, #20
 8011f34:	4313      	orrs	r3, r2
 8011f36:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8011f3a:	ee07 3a90 	vmov	s15, r3
 8011f3e:	edd1 6a00 	vldr	s13, [r1]
 8011f42:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8011f46:	ed8d 7a01 	vstr	s14, [sp, #4]
 8011f4a:	eddd 7a01 	vldr	s15, [sp, #4]
 8011f4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011f52:	ee17 3a90 	vmov	r3, s15
 8011f56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f5a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8011f5e:	ee00 3a10 	vmov	s0, r3
 8011f62:	b002      	add	sp, #8
 8011f64:	bd10      	pop	{r4, pc}
 8011f66:	4a13      	ldr	r2, [pc, #76]	; (8011fb4 <rintf+0xb4>)
 8011f68:	410a      	asrs	r2, r1
 8011f6a:	4213      	tst	r3, r2
 8011f6c:	d0f9      	beq.n	8011f62 <rintf+0x62>
 8011f6e:	0854      	lsrs	r4, r2, #1
 8011f70:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8011f74:	d006      	beq.n	8011f84 <rintf+0x84>
 8011f76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011f7a:	ea23 0304 	bic.w	r3, r3, r4
 8011f7e:	fa42 f101 	asr.w	r1, r2, r1
 8011f82:	430b      	orrs	r3, r1
 8011f84:	4a0a      	ldr	r2, [pc, #40]	; (8011fb0 <rintf+0xb0>)
 8011f86:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8011f8a:	ed90 7a00 	vldr	s14, [r0]
 8011f8e:	ee07 3a90 	vmov	s15, r3
 8011f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f96:	edcd 7a01 	vstr	s15, [sp, #4]
 8011f9a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8011f9e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011fa2:	e7de      	b.n	8011f62 <rintf+0x62>
 8011fa4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011fa8:	d3db      	bcc.n	8011f62 <rintf+0x62>
 8011faa:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011fae:	e7d8      	b.n	8011f62 <rintf+0x62>
 8011fb0:	0801252c 	.word	0x0801252c
 8011fb4:	007fffff 	.word	0x007fffff

08011fb8 <scalbnf>:
 8011fb8:	ee10 3a10 	vmov	r3, s0
 8011fbc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8011fc0:	d025      	beq.n	801200e <scalbnf+0x56>
 8011fc2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011fc6:	d302      	bcc.n	8011fce <scalbnf+0x16>
 8011fc8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011fcc:	4770      	bx	lr
 8011fce:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8011fd2:	d122      	bne.n	801201a <scalbnf+0x62>
 8011fd4:	4b2a      	ldr	r3, [pc, #168]	; (8012080 <scalbnf+0xc8>)
 8011fd6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012084 <scalbnf+0xcc>
 8011fda:	4298      	cmp	r0, r3
 8011fdc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011fe0:	db16      	blt.n	8012010 <scalbnf+0x58>
 8011fe2:	ee10 3a10 	vmov	r3, s0
 8011fe6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011fea:	3a19      	subs	r2, #25
 8011fec:	4402      	add	r2, r0
 8011fee:	2afe      	cmp	r2, #254	; 0xfe
 8011ff0:	dd15      	ble.n	801201e <scalbnf+0x66>
 8011ff2:	ee10 3a10 	vmov	r3, s0
 8011ff6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8012088 <scalbnf+0xd0>
 8011ffa:	eddf 6a24 	vldr	s13, [pc, #144]	; 801208c <scalbnf+0xd4>
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	eeb0 7a67 	vmov.f32	s14, s15
 8012004:	bfb8      	it	lt
 8012006:	eef0 7a66 	vmovlt.f32	s15, s13
 801200a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801200e:	4770      	bx	lr
 8012010:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012090 <scalbnf+0xd8>
 8012014:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012018:	4770      	bx	lr
 801201a:	0dd2      	lsrs	r2, r2, #23
 801201c:	e7e6      	b.n	8011fec <scalbnf+0x34>
 801201e:	2a00      	cmp	r2, #0
 8012020:	dd06      	ble.n	8012030 <scalbnf+0x78>
 8012022:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012026:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801202a:	ee00 3a10 	vmov	s0, r3
 801202e:	4770      	bx	lr
 8012030:	f112 0f16 	cmn.w	r2, #22
 8012034:	da1a      	bge.n	801206c <scalbnf+0xb4>
 8012036:	f24c 3350 	movw	r3, #50000	; 0xc350
 801203a:	4298      	cmp	r0, r3
 801203c:	ee10 3a10 	vmov	r3, s0
 8012040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012044:	dd0a      	ble.n	801205c <scalbnf+0xa4>
 8012046:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8012088 <scalbnf+0xd0>
 801204a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801208c <scalbnf+0xd4>
 801204e:	eef0 7a40 	vmov.f32	s15, s0
 8012052:	2b00      	cmp	r3, #0
 8012054:	bf18      	it	ne
 8012056:	eeb0 0a47 	vmovne.f32	s0, s14
 801205a:	e7db      	b.n	8012014 <scalbnf+0x5c>
 801205c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012090 <scalbnf+0xd8>
 8012060:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8012094 <scalbnf+0xdc>
 8012064:	eef0 7a40 	vmov.f32	s15, s0
 8012068:	2b00      	cmp	r3, #0
 801206a:	e7f3      	b.n	8012054 <scalbnf+0x9c>
 801206c:	3219      	adds	r2, #25
 801206e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012072:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012076:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012098 <scalbnf+0xe0>
 801207a:	ee07 3a10 	vmov	s14, r3
 801207e:	e7c4      	b.n	801200a <scalbnf+0x52>
 8012080:	ffff3cb0 	.word	0xffff3cb0
 8012084:	4c000000 	.word	0x4c000000
 8012088:	7149f2ca 	.word	0x7149f2ca
 801208c:	f149f2ca 	.word	0xf149f2ca
 8012090:	0da24260 	.word	0x0da24260
 8012094:	8da24260 	.word	0x8da24260
 8012098:	33000000 	.word	0x33000000

0801209c <__errno>:
 801209c:	4b01      	ldr	r3, [pc, #4]	; (80120a4 <__errno+0x8>)
 801209e:	6818      	ldr	r0, [r3, #0]
 80120a0:	4770      	bx	lr
 80120a2:	bf00      	nop
 80120a4:	2000018c 	.word	0x2000018c

080120a8 <__libc_init_array>:
 80120a8:	b570      	push	{r4, r5, r6, lr}
 80120aa:	4d0d      	ldr	r5, [pc, #52]	; (80120e0 <__libc_init_array+0x38>)
 80120ac:	4c0d      	ldr	r4, [pc, #52]	; (80120e4 <__libc_init_array+0x3c>)
 80120ae:	1b64      	subs	r4, r4, r5
 80120b0:	10a4      	asrs	r4, r4, #2
 80120b2:	2600      	movs	r6, #0
 80120b4:	42a6      	cmp	r6, r4
 80120b6:	d109      	bne.n	80120cc <__libc_init_array+0x24>
 80120b8:	4d0b      	ldr	r5, [pc, #44]	; (80120e8 <__libc_init_array+0x40>)
 80120ba:	4c0c      	ldr	r4, [pc, #48]	; (80120ec <__libc_init_array+0x44>)
 80120bc:	f000 f8f6 	bl	80122ac <_init>
 80120c0:	1b64      	subs	r4, r4, r5
 80120c2:	10a4      	asrs	r4, r4, #2
 80120c4:	2600      	movs	r6, #0
 80120c6:	42a6      	cmp	r6, r4
 80120c8:	d105      	bne.n	80120d6 <__libc_init_array+0x2e>
 80120ca:	bd70      	pop	{r4, r5, r6, pc}
 80120cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80120d0:	4798      	blx	r3
 80120d2:	3601      	adds	r6, #1
 80120d4:	e7ee      	b.n	80120b4 <__libc_init_array+0xc>
 80120d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80120da:	4798      	blx	r3
 80120dc:	3601      	adds	r6, #1
 80120de:	e7f2      	b.n	80120c6 <__libc_init_array+0x1e>
 80120e0:	08012594 	.word	0x08012594
 80120e4:	08012594 	.word	0x08012594
 80120e8:	08012594 	.word	0x08012594
 80120ec:	080125a0 	.word	0x080125a0

080120f0 <__retarget_lock_acquire_recursive>:
 80120f0:	4770      	bx	lr

080120f2 <__retarget_lock_release_recursive>:
 80120f2:	4770      	bx	lr

080120f4 <memcpy>:
 80120f4:	440a      	add	r2, r1
 80120f6:	4291      	cmp	r1, r2
 80120f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80120fc:	d100      	bne.n	8012100 <memcpy+0xc>
 80120fe:	4770      	bx	lr
 8012100:	b510      	push	{r4, lr}
 8012102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012106:	f803 4f01 	strb.w	r4, [r3, #1]!
 801210a:	4291      	cmp	r1, r2
 801210c:	d1f9      	bne.n	8012102 <memcpy+0xe>
 801210e:	bd10      	pop	{r4, pc}

08012110 <memset>:
 8012110:	4402      	add	r2, r0
 8012112:	4603      	mov	r3, r0
 8012114:	4293      	cmp	r3, r2
 8012116:	d100      	bne.n	801211a <memset+0xa>
 8012118:	4770      	bx	lr
 801211a:	f803 1b01 	strb.w	r1, [r3], #1
 801211e:	e7f9      	b.n	8012114 <memset+0x4>

08012120 <cleanup_glue>:
 8012120:	b538      	push	{r3, r4, r5, lr}
 8012122:	460c      	mov	r4, r1
 8012124:	6809      	ldr	r1, [r1, #0]
 8012126:	4605      	mov	r5, r0
 8012128:	b109      	cbz	r1, 801212e <cleanup_glue+0xe>
 801212a:	f7ff fff9 	bl	8012120 <cleanup_glue>
 801212e:	4621      	mov	r1, r4
 8012130:	4628      	mov	r0, r5
 8012132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012136:	f000 b869 	b.w	801220c <_free_r>
	...

0801213c <_reclaim_reent>:
 801213c:	4b2c      	ldr	r3, [pc, #176]	; (80121f0 <_reclaim_reent+0xb4>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	4283      	cmp	r3, r0
 8012142:	b570      	push	{r4, r5, r6, lr}
 8012144:	4604      	mov	r4, r0
 8012146:	d051      	beq.n	80121ec <_reclaim_reent+0xb0>
 8012148:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801214a:	b143      	cbz	r3, 801215e <_reclaim_reent+0x22>
 801214c:	68db      	ldr	r3, [r3, #12]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d14a      	bne.n	80121e8 <_reclaim_reent+0xac>
 8012152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012154:	6819      	ldr	r1, [r3, #0]
 8012156:	b111      	cbz	r1, 801215e <_reclaim_reent+0x22>
 8012158:	4620      	mov	r0, r4
 801215a:	f000 f857 	bl	801220c <_free_r>
 801215e:	6961      	ldr	r1, [r4, #20]
 8012160:	b111      	cbz	r1, 8012168 <_reclaim_reent+0x2c>
 8012162:	4620      	mov	r0, r4
 8012164:	f000 f852 	bl	801220c <_free_r>
 8012168:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801216a:	b111      	cbz	r1, 8012172 <_reclaim_reent+0x36>
 801216c:	4620      	mov	r0, r4
 801216e:	f000 f84d 	bl	801220c <_free_r>
 8012172:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012174:	b111      	cbz	r1, 801217c <_reclaim_reent+0x40>
 8012176:	4620      	mov	r0, r4
 8012178:	f000 f848 	bl	801220c <_free_r>
 801217c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801217e:	b111      	cbz	r1, 8012186 <_reclaim_reent+0x4a>
 8012180:	4620      	mov	r0, r4
 8012182:	f000 f843 	bl	801220c <_free_r>
 8012186:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012188:	b111      	cbz	r1, 8012190 <_reclaim_reent+0x54>
 801218a:	4620      	mov	r0, r4
 801218c:	f000 f83e 	bl	801220c <_free_r>
 8012190:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012192:	b111      	cbz	r1, 801219a <_reclaim_reent+0x5e>
 8012194:	4620      	mov	r0, r4
 8012196:	f000 f839 	bl	801220c <_free_r>
 801219a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801219c:	b111      	cbz	r1, 80121a4 <_reclaim_reent+0x68>
 801219e:	4620      	mov	r0, r4
 80121a0:	f000 f834 	bl	801220c <_free_r>
 80121a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121a6:	b111      	cbz	r1, 80121ae <_reclaim_reent+0x72>
 80121a8:	4620      	mov	r0, r4
 80121aa:	f000 f82f 	bl	801220c <_free_r>
 80121ae:	69a3      	ldr	r3, [r4, #24]
 80121b0:	b1e3      	cbz	r3, 80121ec <_reclaim_reent+0xb0>
 80121b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80121b4:	4620      	mov	r0, r4
 80121b6:	4798      	blx	r3
 80121b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80121ba:	b1b9      	cbz	r1, 80121ec <_reclaim_reent+0xb0>
 80121bc:	4620      	mov	r0, r4
 80121be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121c2:	f7ff bfad 	b.w	8012120 <cleanup_glue>
 80121c6:	5949      	ldr	r1, [r1, r5]
 80121c8:	b941      	cbnz	r1, 80121dc <_reclaim_reent+0xa0>
 80121ca:	3504      	adds	r5, #4
 80121cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121ce:	2d80      	cmp	r5, #128	; 0x80
 80121d0:	68d9      	ldr	r1, [r3, #12]
 80121d2:	d1f8      	bne.n	80121c6 <_reclaim_reent+0x8a>
 80121d4:	4620      	mov	r0, r4
 80121d6:	f000 f819 	bl	801220c <_free_r>
 80121da:	e7ba      	b.n	8012152 <_reclaim_reent+0x16>
 80121dc:	680e      	ldr	r6, [r1, #0]
 80121de:	4620      	mov	r0, r4
 80121e0:	f000 f814 	bl	801220c <_free_r>
 80121e4:	4631      	mov	r1, r6
 80121e6:	e7ef      	b.n	80121c8 <_reclaim_reent+0x8c>
 80121e8:	2500      	movs	r5, #0
 80121ea:	e7ef      	b.n	80121cc <_reclaim_reent+0x90>
 80121ec:	bd70      	pop	{r4, r5, r6, pc}
 80121ee:	bf00      	nop
 80121f0:	2000018c 	.word	0x2000018c

080121f4 <__malloc_lock>:
 80121f4:	4801      	ldr	r0, [pc, #4]	; (80121fc <__malloc_lock+0x8>)
 80121f6:	f7ff bf7b 	b.w	80120f0 <__retarget_lock_acquire_recursive>
 80121fa:	bf00      	nop
 80121fc:	20005758 	.word	0x20005758

08012200 <__malloc_unlock>:
 8012200:	4801      	ldr	r0, [pc, #4]	; (8012208 <__malloc_unlock+0x8>)
 8012202:	f7ff bf76 	b.w	80120f2 <__retarget_lock_release_recursive>
 8012206:	bf00      	nop
 8012208:	20005758 	.word	0x20005758

0801220c <_free_r>:
 801220c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801220e:	2900      	cmp	r1, #0
 8012210:	d048      	beq.n	80122a4 <_free_r+0x98>
 8012212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012216:	9001      	str	r0, [sp, #4]
 8012218:	2b00      	cmp	r3, #0
 801221a:	f1a1 0404 	sub.w	r4, r1, #4
 801221e:	bfb8      	it	lt
 8012220:	18e4      	addlt	r4, r4, r3
 8012222:	f7ff ffe7 	bl	80121f4 <__malloc_lock>
 8012226:	4a20      	ldr	r2, [pc, #128]	; (80122a8 <_free_r+0x9c>)
 8012228:	9801      	ldr	r0, [sp, #4]
 801222a:	6813      	ldr	r3, [r2, #0]
 801222c:	4615      	mov	r5, r2
 801222e:	b933      	cbnz	r3, 801223e <_free_r+0x32>
 8012230:	6063      	str	r3, [r4, #4]
 8012232:	6014      	str	r4, [r2, #0]
 8012234:	b003      	add	sp, #12
 8012236:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801223a:	f7ff bfe1 	b.w	8012200 <__malloc_unlock>
 801223e:	42a3      	cmp	r3, r4
 8012240:	d90b      	bls.n	801225a <_free_r+0x4e>
 8012242:	6821      	ldr	r1, [r4, #0]
 8012244:	1862      	adds	r2, r4, r1
 8012246:	4293      	cmp	r3, r2
 8012248:	bf04      	itt	eq
 801224a:	681a      	ldreq	r2, [r3, #0]
 801224c:	685b      	ldreq	r3, [r3, #4]
 801224e:	6063      	str	r3, [r4, #4]
 8012250:	bf04      	itt	eq
 8012252:	1852      	addeq	r2, r2, r1
 8012254:	6022      	streq	r2, [r4, #0]
 8012256:	602c      	str	r4, [r5, #0]
 8012258:	e7ec      	b.n	8012234 <_free_r+0x28>
 801225a:	461a      	mov	r2, r3
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	b10b      	cbz	r3, 8012264 <_free_r+0x58>
 8012260:	42a3      	cmp	r3, r4
 8012262:	d9fa      	bls.n	801225a <_free_r+0x4e>
 8012264:	6811      	ldr	r1, [r2, #0]
 8012266:	1855      	adds	r5, r2, r1
 8012268:	42a5      	cmp	r5, r4
 801226a:	d10b      	bne.n	8012284 <_free_r+0x78>
 801226c:	6824      	ldr	r4, [r4, #0]
 801226e:	4421      	add	r1, r4
 8012270:	1854      	adds	r4, r2, r1
 8012272:	42a3      	cmp	r3, r4
 8012274:	6011      	str	r1, [r2, #0]
 8012276:	d1dd      	bne.n	8012234 <_free_r+0x28>
 8012278:	681c      	ldr	r4, [r3, #0]
 801227a:	685b      	ldr	r3, [r3, #4]
 801227c:	6053      	str	r3, [r2, #4]
 801227e:	4421      	add	r1, r4
 8012280:	6011      	str	r1, [r2, #0]
 8012282:	e7d7      	b.n	8012234 <_free_r+0x28>
 8012284:	d902      	bls.n	801228c <_free_r+0x80>
 8012286:	230c      	movs	r3, #12
 8012288:	6003      	str	r3, [r0, #0]
 801228a:	e7d3      	b.n	8012234 <_free_r+0x28>
 801228c:	6825      	ldr	r5, [r4, #0]
 801228e:	1961      	adds	r1, r4, r5
 8012290:	428b      	cmp	r3, r1
 8012292:	bf04      	itt	eq
 8012294:	6819      	ldreq	r1, [r3, #0]
 8012296:	685b      	ldreq	r3, [r3, #4]
 8012298:	6063      	str	r3, [r4, #4]
 801229a:	bf04      	itt	eq
 801229c:	1949      	addeq	r1, r1, r5
 801229e:	6021      	streq	r1, [r4, #0]
 80122a0:	6054      	str	r4, [r2, #4]
 80122a2:	e7c7      	b.n	8012234 <_free_r+0x28>
 80122a4:	b003      	add	sp, #12
 80122a6:	bd30      	pop	{r4, r5, pc}
 80122a8:	20003bf4 	.word	0x20003bf4

080122ac <_init>:
 80122ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ae:	bf00      	nop
 80122b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122b2:	bc08      	pop	{r3}
 80122b4:	469e      	mov	lr, r3
 80122b6:	4770      	bx	lr

080122b8 <_fini>:
 80122b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ba:	bf00      	nop
 80122bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122be:	bc08      	pop	{r3}
 80122c0:	469e      	mov	lr, r3
 80122c2:	4770      	bx	lr
