
captivatesEnv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009de4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08009f24  08009f24  00019f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800a180  0800a180  0001a180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a188  0800a188  0001a188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000194  20000004  0800a18c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000037d8  20000198  0800a320  00020198  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003970  0800a320  00023970  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
  9 .debug_info   00061047  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00009bcd  00000000  00000000  0008120f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0002a915  00000000  00000000  0008addc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000027e8  00000000  00000000  000b56f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000030d8  00000000  00000000  000b7ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034ed0  00000000  00000000  000bafb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004c014  00000000  00000000  000efe88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011c681  00000000  00000000  0013be9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0025851d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006cec  00000000  00000000  00258570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000198 	.word	0x20000198
 800015c:	00000000 	.word	0x00000000
 8000160:	08009f0c 	.word	0x08009f0c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000019c 	.word	0x2000019c
 800017c:	08009f0c 	.word	0x08009f0c

08000180 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000180:	b500      	push	{lr}
 8000182:	b087      	sub	sp, #28

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000184:	2300      	movs	r3, #0
 8000186:	9300      	str	r3, [sp, #0]
 8000188:	9301      	str	r3, [sp, #4]
 800018a:	9302      	str	r3, [sp, #8]
 800018c:	9303      	str	r3, [sp, #12]
 800018e:	9304      	str	r3, [sp, #16]
 8000190:	9305      	str	r3, [sp, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000192:	4819      	ldr	r0, [pc, #100]	; (80001f8 <MX_ADC1_Init+0x78>)
 8000194:	4a19      	ldr	r2, [pc, #100]	; (80001fc <MX_ADC1_Init+0x7c>)
 8000196:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000198:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800019a:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800019c:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800019e:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80001a0:	2204      	movs	r2, #4
 80001a2:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80001a4:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80001a6:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 80001a8:	2201      	movs	r2, #1
 80001aa:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001ac:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001b0:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80001b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80001b4:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80001b8:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80001ba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80001be:	f000 ffe3 	bl	8001188 <HAL_ADC_Init>
 80001c2:	b990      	cbnz	r0, 80001ea <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80001c4:	4b0e      	ldr	r3, [pc, #56]	; (8000200 <MX_ADC1_Init+0x80>)
 80001c6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001c8:	2306      	movs	r3, #6
 80001ca:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80001cc:	2300      	movs	r3, #0
 80001ce:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80001d0:	227f      	movs	r2, #127	; 0x7f
 80001d2:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80001d4:	2204      	movs	r2, #4
 80001d6:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 80001d8:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001da:	4669      	mov	r1, sp
 80001dc:	4806      	ldr	r0, [pc, #24]	; (80001f8 <MX_ADC1_Init+0x78>)
 80001de:	f001 f8c1 	bl	8001364 <HAL_ADC_ConfigChannel>
 80001e2:	b928      	cbnz	r0, 80001f0 <MX_ADC1_Init+0x70>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001e4:	b007      	add	sp, #28
 80001e6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80001ea:	f000 fbbb 	bl	8000964 <Error_Handler>
 80001ee:	e7e9      	b.n	80001c4 <MX_ADC1_Init+0x44>
    Error_Handler();
 80001f0:	f000 fbb8 	bl	8000964 <Error_Handler>
}
 80001f4:	e7f6      	b.n	80001e4 <MX_ADC1_Init+0x64>
 80001f6:	bf00      	nop
 80001f8:	20001dc0 	.word	0x20001dc0
 80001fc:	50040000 	.word	0x50040000
 8000200:	19200040 	.word	0x19200040

08000204 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000204:	b500      	push	{lr}
 8000206:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000208:	2300      	movs	r3, #0
 800020a:	9303      	str	r3, [sp, #12]
 800020c:	9304      	str	r3, [sp, #16]
 800020e:	9305      	str	r3, [sp, #20]
 8000210:	9306      	str	r3, [sp, #24]
 8000212:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000214:	6802      	ldr	r2, [r0, #0]
 8000216:	4b13      	ldr	r3, [pc, #76]	; (8000264 <HAL_ADC_MspInit+0x60>)
 8000218:	429a      	cmp	r2, r3
 800021a:	d002      	beq.n	8000222 <HAL_ADC_MspInit+0x1e>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800021c:	b009      	add	sp, #36	; 0x24
 800021e:	f85d fb04 	ldr.w	pc, [sp], #4
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800022c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800022e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000230:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000234:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000236:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000238:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800023a:	f042 0201 	orr.w	r2, r2, #1
 800023e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000242:	f003 0301 	and.w	r3, r3, #1
 8000246:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000248:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 800024a:	2302      	movs	r3, #2
 800024c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800024e:	2303      	movs	r3, #3
 8000250:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000252:	2300      	movs	r3, #0
 8000254:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 8000256:	a903      	add	r1, sp, #12
 8000258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025c:	f001 fb0e 	bl	800187c <HAL_GPIO_Init>
}
 8000260:	e7dc      	b.n	800021c <HAL_ADC_MspInit+0x18>
 8000262:	bf00      	nop
 8000264:	50040000 	.word	0x50040000

08000268 <Reset_IPCC>:

  return;
}

static void Reset_IPCC( void )
{
 8000268:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800026a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800026e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000270:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000274:	651a      	str	r2, [r3, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800027c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800027e:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <Reset_IPCC+0x44>)
 8000282:	223f      	movs	r2, #63	; 0x3f
 8000284:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000286:	619a      	str	r2, [r3, #24]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000288:	685a      	ldr	r2, [r3, #4]
 800028a:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 800028e:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000290:	695a      	ldr	r2, [r3, #20]
 8000292:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 8000296:	615a      	str	r2, [r3, #20]
  SET_BIT(IPCCx->C1MR, Channel);
 8000298:	685a      	ldr	r2, [r3, #4]
 800029a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800029e:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel);
 80002a0:	695a      	ldr	r2, [r3, #20]
 80002a2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80002a6:	615a      	str	r2, [r3, #20]
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
}
 80002a8:	b002      	add	sp, #8
 80002aa:	4770      	bx	lr
 80002ac:	58000c00 	.word	0x58000c00

080002b0 <Reset_BackupDomain>:
{
 80002b0:	b508      	push	{r3, lr}
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80002b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002ba:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80002be:	d018      	beq.n	80002f2 <Reset_BackupDomain+0x42>
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80002c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002c8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80002cc:	d111      	bne.n	80002f2 <Reset_BackupDomain+0x42>
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80002ce:	f002 febb 	bl	8003048 <HAL_PWR_EnableBkUpAccess>
    HAL_PWR_EnableBkUpAccess();
 80002d2:	f002 feb9 	bl	8003048 <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80002d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002da:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80002de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80002e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80002e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80002ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80002ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 80002f2:	bd08      	pop	{r3, pc}

080002f4 <Reset_Device>:
{
 80002f4:	b508      	push	{r3, lr}
  Reset_BackupDomain();
 80002f6:	f7ff ffdb 	bl	80002b0 <Reset_BackupDomain>
  Reset_IPCC();
 80002fa:	f7ff ffb5 	bl	8000268 <Reset_IPCC>
}
 80002fe:	bd08      	pop	{r3, pc}

08000300 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000300:	b508      	push	{r3, lr}
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000302:	2000      	movs	r0, #0
 8000304:	f007 f900 	bl	8007508 <OTP_Read>
  if (p_otp)
 8000308:	b168      	cbz	r0, 8000326 <Config_HSE+0x26>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800030a:	7981      	ldrb	r1, [r0, #6]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800030c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <Config_HSE+0x28>)
 8000312:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000316:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800031a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800031e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000322:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

  return;
}
 8000326:	bd08      	pop	{r3, pc}
 8000328:	cafecafe 	.word	0xcafecafe

0800032c <MX_APPE_Config>:
{
 800032c:	b508      	push	{r3, lr}
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 800032e:	4b04      	ldr	r3, [pc, #16]	; (8000340 <MX_APPE_Config+0x14>)
 8000330:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000334:	611a      	str	r2, [r3, #16]
  Reset_Device( );
 8000336:	f7ff ffdd 	bl	80002f4 <Reset_Device>
  Config_HSE();
 800033a:	f7ff ffe1 	bl	8000300 <Config_HSE>
}
 800033e:	bd08      	pop	{r3, pc}
 8000340:	58004000 	.word	0x58004000

08000344 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000344:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800034a:	f007 f98b 	bl	8007664 <osDelay>

	while(1){
		ledStartupSequence();
 800034e:	f000 fa7b 	bl	8000848 <ledStartupSequence>
		osDelay(1500);
 8000352:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000356:	f007 f985 	bl	8007664 <osDelay>
	while(1){
 800035a:	e7f8      	b.n	800034e <StartDefaultTask+0xa>

0800035c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800035c:	b508      	push	{r3, lr}
  messageI2C_LockHandle = osMutexNew(&messageI2C_Lock_attributes);
 800035e:	480d      	ldr	r0, [pc, #52]	; (8000394 <MX_FREERTOS_Init+0x38>)
 8000360:	f007 f98e 	bl	8007680 <osMutexNew>
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_FREERTOS_Init+0x3c>)
 8000366:	6018      	str	r0, [r3, #0]
	lightsComplexQueueHandle = osMessageQueueNew(3, sizeof(union ColorComplex),
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <MX_FREERTOS_Init+0x40>)
 800036a:	2112      	movs	r1, #18
 800036c:	2003      	movs	r0, #3
 800036e:	f007 fa33 	bl	80077d8 <osMessageQueueNew>
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_FREERTOS_Init+0x44>)
 8000374:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <MX_FREERTOS_Init+0x48>)
 8000378:	2100      	movs	r1, #0
 800037a:	480b      	ldr	r0, [pc, #44]	; (80003a8 <MX_FREERTOS_Init+0x4c>)
 800037c:	f007 f914 	bl	80075a8 <osThreadNew>
 8000380:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <MX_FREERTOS_Init+0x50>)
 8000382:	6018      	str	r0, [r3, #0]
  frontLightsThreHandle = osThreadNew(ThreadFrontLightsComplexTask, NULL, &frontLightsThre_attributes);
 8000384:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <MX_FREERTOS_Init+0x54>)
 8000386:	2100      	movs	r1, #0
 8000388:	480a      	ldr	r0, [pc, #40]	; (80003b4 <MX_FREERTOS_Init+0x58>)
 800038a:	f007 f90d 	bl	80075a8 <osThreadNew>
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <MX_FREERTOS_Init+0x5c>)
 8000390:	6018      	str	r0, [r3, #0]
}
 8000392:	bd08      	pop	{r3, pc}
 8000394:	08009ff0 	.word	0x08009ff0
 8000398:	20001e28 	.word	0x20001e28
 800039c:	08009fd8 	.word	0x08009fd8
 80003a0:	20001e2c 	.word	0x20001e2c
 80003a4:	08009f90 	.word	0x08009f90
 80003a8:	08000345 	.word	0x08000345
 80003ac:	20001e24 	.word	0x20001e24
 80003b0:	08009fb4 	.word	0x08009fb4
 80003b4:	08000755 	.word	0x08000755
 80003b8:	20001e30 	.word	0x20001e30

080003bc <MX_GPIO_Init>:

/** Configure pins
     PA1   ------> SharedAnalog_PA1
*/
void MX_GPIO_Init(void)
{
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c0:	2400      	movs	r4, #0
 80003c2:	9405      	str	r4, [sp, #20]
 80003c4:	9406      	str	r4, [sp, #24]
 80003c6:	9407      	str	r4, [sp, #28]
 80003c8:	9408      	str	r4, [sp, #32]
 80003ca:	9409      	str	r4, [sp, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003d2:	f042 0201 	orr.w	r2, r2, #1
 80003d6:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003da:	f002 0201 	and.w	r2, r2, #1
 80003de:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80003e0:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003e4:	f042 0204 	orr.w	r2, r2, #4
 80003e8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003ec:	f002 0204 	and.w	r2, r2, #4
 80003f0:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80003f2:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003f6:	f042 0202 	orr.w	r2, r2, #2
 80003fa:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003fe:	f002 0202 	and.w	r2, r2, #2
 8000402:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000404:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000408:	f042 0208 	orr.w	r2, r2, #8
 800040c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800040e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000410:	f003 0308 	and.w	r3, r3, #8
 8000414:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000416:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_1_8V_Pin|MEM_WP_Pin, GPIO_PIN_RESET);
 8000418:	4d18      	ldr	r5, [pc, #96]	; (800047c <MX_GPIO_Init+0xc0>)
 800041a:	4622      	mov	r2, r4
 800041c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000420:	4628      	mov	r0, r5
 8000422:	f001 faef 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 8000426:	2302      	movs	r3, #2
 8000428:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800042a:	2303      	movs	r3, #3
 800042c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 8000430:	a905      	add	r1, sp, #20
 8000432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000436:	f001 fa21 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EN_1_8V_Pin|MEM_WP_Pin;
 800043a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800043e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000440:	2301      	movs	r3, #1
 8000442:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000448:	a905      	add	r1, sp, #20
 800044a:	4628      	mov	r0, r5
 800044c:	f001 fa16 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA9_Pin;
 8000450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000454:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000456:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PA9_GPIO_Port, &GPIO_InitStruct);
 800045a:	a905      	add	r1, sp, #20
 800045c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000460:	f001 fa0c 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = PD4_Pin|PD9_Pin;
 8000464:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000468:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800046e:	a905      	add	r1, sp, #20
 8000470:	4803      	ldr	r0, [pc, #12]	; (8000480 <MX_GPIO_Init+0xc4>)
 8000472:	f001 fa03 	bl	800187c <HAL_GPIO_Init>

}
 8000476:	b00b      	add	sp, #44	; 0x2c
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	bf00      	nop
 800047c:	48000800 	.word	0x48000800
 8000480:	48000c00 	.word	0x48000c00

08000484 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000484:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000486:	4815      	ldr	r0, [pc, #84]	; (80004dc <MX_I2C1_Init+0x58>)
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <MX_I2C1_Init+0x5c>)
 800048a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800048c:	f1a3 533e 	sub.w	r3, r3, #796917760	; 0x2f800000
 8000490:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 8000494:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8000498:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800049e:	2201      	movs	r2, #1
 80004a0:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a2:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004a4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004a6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004a8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004aa:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ac:	f001 fc1c 	bl	8001ce8 <HAL_I2C_Init>
 80004b0:	b950      	cbnz	r0, 80004c8 <MX_I2C1_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004b2:	2100      	movs	r1, #0
 80004b4:	4809      	ldr	r0, [pc, #36]	; (80004dc <MX_I2C1_Init+0x58>)
 80004b6:	f001 fd49 	bl	8001f4c <HAL_I2CEx_ConfigAnalogFilter>
 80004ba:	b940      	cbnz	r0, 80004ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004bc:	2100      	movs	r1, #0
 80004be:	4807      	ldr	r0, [pc, #28]	; (80004dc <MX_I2C1_Init+0x58>)
 80004c0:	f001 fd72 	bl	8001fa8 <HAL_I2CEx_ConfigDigitalFilter>
 80004c4:	b930      	cbnz	r0, 80004d4 <MX_I2C1_Init+0x50>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004c6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80004c8:	f000 fa4c 	bl	8000964 <Error_Handler>
 80004cc:	e7f1      	b.n	80004b2 <MX_I2C1_Init+0x2e>
    Error_Handler();
 80004ce:	f000 fa49 	bl	8000964 <Error_Handler>
 80004d2:	e7f3      	b.n	80004bc <MX_I2C1_Init+0x38>
    Error_Handler();
 80004d4:	f000 fa46 	bl	8000964 <Error_Handler>
}
 80004d8:	e7f5      	b.n	80004c6 <MX_I2C1_Init+0x42>
 80004da:	bf00      	nop
 80004dc:	20001e84 	.word	0x20001e84
 80004e0:	40005400 	.word	0x40005400

080004e4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80004e4:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80004e6:	4815      	ldr	r0, [pc, #84]	; (800053c <MX_I2C3_Init+0x58>)
 80004e8:	4b15      	ldr	r3, [pc, #84]	; (8000540 <MX_I2C3_Init+0x5c>)
 80004ea:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 80004ec:	f1a3 533e 	sub.w	r3, r3, #796917760	; 0x2f800000
 80004f0:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 80004f4:	f6a3 6344 	subw	r3, r3, #3652	; 0xe44
 80004f8:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004fe:	2201      	movs	r2, #1
 8000500:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000502:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000504:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000506:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000508:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800050a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800050c:	f001 fbec 	bl	8001ce8 <HAL_I2C_Init>
 8000510:	b950      	cbnz	r0, 8000528 <MX_I2C3_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000512:	2100      	movs	r1, #0
 8000514:	4809      	ldr	r0, [pc, #36]	; (800053c <MX_I2C3_Init+0x58>)
 8000516:	f001 fd19 	bl	8001f4c <HAL_I2CEx_ConfigAnalogFilter>
 800051a:	b940      	cbnz	r0, 800052e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800051c:	2100      	movs	r1, #0
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <MX_I2C3_Init+0x58>)
 8000520:	f001 fd42 	bl	8001fa8 <HAL_I2CEx_ConfigDigitalFilter>
 8000524:	b930      	cbnz	r0, 8000534 <MX_I2C3_Init+0x50>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000526:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000528:	f000 fa1c 	bl	8000964 <Error_Handler>
 800052c:	e7f1      	b.n	8000512 <MX_I2C3_Init+0x2e>
    Error_Handler();
 800052e:	f000 fa19 	bl	8000964 <Error_Handler>
 8000532:	e7f3      	b.n	800051c <MX_I2C3_Init+0x38>
    Error_Handler();
 8000534:	f000 fa16 	bl	8000964 <Error_Handler>
}
 8000538:	e7f5      	b.n	8000526 <MX_I2C3_Init+0x42>
 800053a:	bf00      	nop
 800053c:	20001e38 	.word	0x20001e38
 8000540:	40005c00 	.word	0x40005c00

08000544 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000544:	b510      	push	{r4, lr}
 8000546:	b09e      	sub	sp, #120	; 0x78
 8000548:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	2100      	movs	r1, #0
 800054c:	9119      	str	r1, [sp, #100]	; 0x64
 800054e:	911a      	str	r1, [sp, #104]	; 0x68
 8000550:	911b      	str	r1, [sp, #108]	; 0x6c
 8000552:	911c      	str	r1, [sp, #112]	; 0x70
 8000554:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000556:	2250      	movs	r2, #80	; 0x50
 8000558:	a805      	add	r0, sp, #20
 800055a:	f009 fccf 	bl	8009efc <memset>
  if(i2cHandle->Instance==I2C1)
 800055e:	6823      	ldr	r3, [r4, #0]
 8000560:	4a32      	ldr	r2, [pc, #200]	; (800062c <HAL_I2C_MspInit+0xe8>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d004      	beq.n	8000570 <HAL_I2C_MspInit+0x2c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C3)
 8000566:	4a32      	ldr	r2, [pc, #200]	; (8000630 <HAL_I2C_MspInit+0xec>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d030      	beq.n	80005ce <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800056c:	b01e      	add	sp, #120	; 0x78
 800056e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000570:	2304      	movs	r3, #4
 8000572:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000574:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000578:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800057a:	a805      	add	r0, sp, #20
 800057c:	f003 fdc1 	bl	8004102 <HAL_RCCEx_PeriphCLKConfig>
 8000580:	bb10      	cbnz	r0, 80005c8 <HAL_I2C_MspInit+0x84>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000582:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8000586:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800058e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000590:	f003 0302 	and.w	r3, r3, #2
 8000594:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000596:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8000598:	f44f 7310 	mov.w	r3, #576	; 0x240
 800059c:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800059e:	2312      	movs	r3, #18
 80005a0:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005a8:	2304      	movs	r3, #4
 80005aa:	931d      	str	r3, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	a919      	add	r1, sp, #100	; 0x64
 80005ae:	4821      	ldr	r0, [pc, #132]	; (8000634 <HAL_I2C_MspInit+0xf0>)
 80005b0:	f001 f964 	bl	800187c <HAL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80005b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80005b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005ba:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80005bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80005be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005c2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80005c4:	9b01      	ldr	r3, [sp, #4]
}
 80005c6:	e7d1      	b.n	800056c <HAL_I2C_MspInit+0x28>
      Error_Handler();
 80005c8:	f000 f9cc 	bl	8000964 <Error_Handler>
 80005cc:	e7d9      	b.n	8000582 <HAL_I2C_MspInit+0x3e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80005ce:	2308      	movs	r3, #8
 80005d0:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80005d2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80005d6:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005d8:	a805      	add	r0, sp, #20
 80005da:	f003 fd92 	bl	8004102 <HAL_RCCEx_PeriphCLKConfig>
 80005de:	bb08      	cbnz	r0, 8000624 <HAL_I2C_MspInit+0xe0>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005e0:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80005e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 80005f4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80005f6:	2303      	movs	r3, #3
 80005f8:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005fa:	2312      	movs	r3, #18
 80005fc:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000604:	2304      	movs	r3, #4
 8000606:	931d      	str	r3, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000608:	a919      	add	r1, sp, #100	; 0x64
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <HAL_I2C_MspInit+0xf4>)
 800060c:	f001 f936 	bl	800187c <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000610:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000612:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000616:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000618:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800061a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800061e:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8000620:	9b03      	ldr	r3, [sp, #12]
}
 8000622:	e7a3      	b.n	800056c <HAL_I2C_MspInit+0x28>
      Error_Handler();
 8000624:	f000 f99e 	bl	8000964 <Error_Handler>
 8000628:	e7da      	b.n	80005e0 <HAL_I2C_MspInit+0x9c>
 800062a:	bf00      	nop
 800062c:	40005400 	.word	0x40005400
 8000630:	40005c00 	.word	0x40005c00
 8000634:	48000400 	.word	0x48000400
 8000638:	48000800 	.word	0x48000800

0800063c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800063c:	b508      	push	{r3, lr}
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_IPCC_Init+0x18>)
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <MX_IPCC_Init+0x1c>)
 8000642:	6003      	str	r3, [r0, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000644:	f001 fcfa 	bl	800203c <HAL_IPCC_Init>
 8000648:	b900      	cbnz	r0, 800064c <MX_IPCC_Init+0x10>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800064a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800064c:	f000 f98a 	bl	8000964 <Error_Handler>
}
 8000650:	e7fb      	b.n	800064a <MX_IPCC_Init+0xe>
 8000652:	bf00      	nop
 8000654:	20001ed0 	.word	0x20001ed0
 8000658:	58000c00 	.word	0x58000c00

0800065c <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{

  if(ipccHandle->Instance==IPCC)
 800065c:	6802      	ldr	r2, [r0, #0]
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_IPCC_MspInit+0x28>)
 8000660:	429a      	cmp	r2, r3
 8000662:	d000      	beq.n	8000666 <HAL_IPCC_MspInit+0xa>
 8000664:	4770      	bx	lr
{
 8000666:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800066c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800066e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000672:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800067a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800067c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_IPCC_CLK_ENABLE();
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800067e:	b002      	add	sp, #8
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	58000c00 	.word	0x58000c00

08000688 <setup_LP5523>:
		LOG_EN, LOG_EN, LOG_EN, LOG_EN };
uint8_t deviceAddress;
uint8_t led_PWM[9] = { 0 };
uint8_t packet;

void setup_LP5523(uint8_t ADDR) {
 8000688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800068c:	b085      	sub	sp, #20

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	4d29      	ldr	r5, [pc, #164]	; (8000738 <setup_LP5523+0xb0>)
 8000692:	7028      	strb	r0, [r5, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8000694:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800074c <setup_LP5523+0xc4>
 8000698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800069c:	f8d9 0000 	ldr.w	r0, [r9]
 80006a0:	f007 f838 	bl	8007714 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 80006a4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8000750 <setup_LP5523+0xc8>
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	f888 3000 	strb.w	r3, [r8]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG,
 80006ae:	4e23      	ldr	r6, [pc, #140]	; (800073c <setup_LP5523+0xb4>)
 80006b0:	2764      	movs	r7, #100	; 0x64
 80006b2:	9702      	str	r7, [sp, #8]
 80006b4:	2401      	movs	r4, #1
 80006b6:	9401      	str	r4, [sp, #4]
 80006b8:	f8cd 8000 	str.w	r8, [sp]
 80006bc:	4623      	mov	r3, r4
 80006be:	2200      	movs	r2, #0
 80006c0:	7829      	ldrb	r1, [r5, #0]
 80006c2:	4630      	mov	r0, r6
 80006c4:	f001 fb6e 	bl	8001da4 <HAL_I2C_Mem_Write>
			1, &packet, 1, I2C_TIMEOUT);

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 80006c8:	234f      	movs	r3, #79	; 0x4f
 80006ca:	f888 3000 	strb.w	r3, [r8]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1,
 80006ce:	9702      	str	r7, [sp, #8]
 80006d0:	9401      	str	r4, [sp, #4]
 80006d2:	f8cd 8000 	str.w	r8, [sp]
 80006d6:	4623      	mov	r3, r4
 80006d8:	2236      	movs	r2, #54	; 0x36
 80006da:	7829      	ldrb	r1, [r5, #0]
 80006dc:	4630      	mov	r0, r6
 80006de:	f001 fb61 	bl	8001da4 <HAL_I2C_Mem_Write>
			&packet, 1, I2C_TIMEOUT);

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1,
 80006e2:	9702      	str	r7, [sp, #8]
 80006e4:	f04f 0809 	mov.w	r8, #9
 80006e8:	f8cd 8004 	str.w	r8, [sp, #4]
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <setup_LP5523+0xb8>)
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	4623      	mov	r3, r4
 80006f2:	2216      	movs	r2, #22
 80006f4:	7829      	ldrb	r1, [r5, #0]
 80006f6:	4630      	mov	r0, r6
 80006f8:	f001 fb54 	bl	8001da4 <HAL_I2C_Mem_Write>
			led_PWM, 9, I2C_TIMEOUT);

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress,
 80006fc:	9702      	str	r7, [sp, #8]
 80006fe:	f8cd 8004 	str.w	r8, [sp, #4]
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <setup_LP5523+0xbc>)
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	4623      	mov	r3, r4
 8000708:	2226      	movs	r2, #38	; 0x26
 800070a:	7829      	ldrb	r1, [r5, #0]
 800070c:	4630      	mov	r0, r6
 800070e:	f001 fb49 	bl	8001da4 <HAL_I2C_Mem_Write>
			LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1,
 8000712:	9702      	str	r7, [sp, #8]
 8000714:	f8cd 8004 	str.w	r8, [sp, #4]
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <setup_LP5523+0xc0>)
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	4623      	mov	r3, r4
 800071e:	2206      	movs	r2, #6
 8000720:	7829      	ldrb	r1, [r5, #0]
 8000722:	4630      	mov	r0, r6
 8000724:	f001 fb3e 	bl	8001da4 <HAL_I2C_Mem_Write>
			packet_array, 9, I2C_TIMEOUT);

	osSemaphoreRelease(messageI2C_LockHandle);
 8000728:	f8d9 0000 	ldr.w	r0, [r9]
 800072c:	f007 f826 	bl	800777c <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 8000730:	b005      	add	sp, #20
 8000732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000736:	bf00      	nop
 8000738:	20001f22 	.word	0x20001f22
 800073c:	20001e84 	.word	0x20001e84
 8000740:	200001b4 	.word	0x200001b4
 8000744:	20000004 	.word	0x20000004
 8000748:	0800a014 	.word	0x0800a014
 800074c:	20001e28 	.word	0x20001e28
 8000750:	20001f0c 	.word	0x20001f0c

08000754 <ThreadFrontLightsComplexTask>:
	    	}
#endif
}

union ColorComplex receivedColors;
void ThreadFrontLightsComplexTask(void *argument){
 8000754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000758:	b085      	sub	sp, #20

	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 800075a:	2034      	movs	r0, #52	; 0x34
 800075c:	f7ff ff94 	bl	8000688 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8000760:	2035      	movs	r0, #53	; 0x35
 8000762:	f7ff ff91 	bl	8000688 <setup_LP5523>
	HAL_StatusTypeDef state = 0;



	while (1) {
		osMessageQueueGet(lightsComplexQueueHandle, &receivedColors,
 8000766:	4c1e      	ldr	r4, [pc, #120]	; (80007e0 <ThreadFrontLightsComplexTask+0x8c>)
 8000768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800076c:	2200      	movs	r2, #0
 800076e:	4621      	mov	r1, r4
 8000770:	481c      	ldr	r0, [pc, #112]	; (80007e4 <ThreadFrontLightsComplexTask+0x90>)
 8000772:	6800      	ldr	r0, [r0, #0]
 8000774:	f007 f8be 	bl	80078f4 <osMessageQueueGet>
						0U, osWaitForever);
		memcpy(led_left_PWM, &receivedColors, 9);
 8000778:	4f1b      	ldr	r7, [pc, #108]	; (80007e8 <ThreadFrontLightsComplexTask+0x94>)
 800077a:	463b      	mov	r3, r7
 800077c:	6820      	ldr	r0, [r4, #0]
 800077e:	6861      	ldr	r1, [r4, #4]
 8000780:	c303      	stmia	r3!, {r0, r1}
 8000782:	7a22      	ldrb	r2, [r4, #8]
 8000784:	701a      	strb	r2, [r3, #0]
		memcpy(led_right_PWM, &(receivedColors.color[9]), 9);
 8000786:	4e19      	ldr	r6, [pc, #100]	; (80007ec <ThreadFrontLightsComplexTask+0x98>)
 8000788:	4633      	mov	r3, r6
 800078a:	f854 0f09 	ldr.w	r0, [r4, #9]!
 800078e:	6861      	ldr	r1, [r4, #4]
 8000790:	c303      	stmia	r3!, {r0, r1}
 8000792:	7a22      	ldrb	r2, [r4, #8]
 8000794:	701a      	strb	r2, [r3, #0]
	#ifndef DONGLE_CODE
		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8000796:	4c16      	ldr	r4, [pc, #88]	; (80007f0 <ThreadFrontLightsComplexTask+0x9c>)
 8000798:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800079c:	6820      	ldr	r0, [r4, #0]
 800079e:	f006 ffb9 	bl	8007714 <osSemaphoreAcquire>

//		HAL_I2C_Mem_Write_DMA(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1,
//				LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9);
		state = HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1,
 80007a2:	4d14      	ldr	r5, [pc, #80]	; (80007f4 <ThreadFrontLightsComplexTask+0xa0>)
 80007a4:	f04f 0905 	mov.w	r9, #5
 80007a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80007ac:	f04f 0809 	mov.w	r8, #9
 80007b0:	f8cd 8004 	str.w	r8, [sp, #4]
 80007b4:	9700      	str	r7, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	2216      	movs	r2, #22
 80007ba:	2168      	movs	r1, #104	; 0x68
 80007bc:	4628      	mov	r0, r5
 80007be:	f001 faf1 	bl	8001da4 <HAL_I2C_Mem_Write>
////			if(counter > 1000){
////				HAL_I2C_Master_Abort_IT(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1);
////			}
//		}

		state = HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1,
 80007c2:	f8cd 9008 	str.w	r9, [sp, #8]
 80007c6:	f8cd 8004 	str.w	r8, [sp, #4]
 80007ca:	9600      	str	r6, [sp, #0]
 80007cc:	2301      	movs	r3, #1
 80007ce:	2216      	movs	r2, #22
 80007d0:	216a      	movs	r1, #106	; 0x6a
 80007d2:	4628      	mov	r0, r5
 80007d4:	f001 fae6 	bl	8001da4 <HAL_I2C_Mem_Write>
//			if(counter > 1000){
//				HAL_I2C_Master_Abort_IT(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1);
//			}
//		}

		osSemaphoreRelease(messageI2C_LockHandle);
 80007d8:	6820      	ldr	r0, [r4, #0]
 80007da:	f006 ffcf 	bl	800777c <osSemaphoreRelease>
	while (1) {
 80007de:	e7c2      	b.n	8000766 <ThreadFrontLightsComplexTask+0x12>
 80007e0:	20001f10 	.word	0x20001f10
 80007e4:	20001e2c 	.word	0x20001e2c
 80007e8:	200001c0 	.word	0x200001c0
 80007ec:	200001cc 	.word	0x200001cc
 80007f0:	20001e28 	.word	0x20001e28
 80007f4:	20001e84 	.word	0x20001e84

080007f8 <resetColor>:
	receivedColor.colors_indiv.left_front_r = 255;
	receivedColor.colors_indiv.right_front_r = 255;
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
}

void resetColor(union ColorComplex * colorComplex){
 80007f8:	b430      	push	{r4, r5}
 80007fa:	4604      	mov	r4, r0
	memcpy(colorComplex,&EmptyColorComplex,sizeof(union ColorComplex));;
 80007fc:	4d04      	ldr	r5, [pc, #16]	; (8000810 <resetColor+0x18>)
 80007fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000800:	6020      	str	r0, [r4, #0]
 8000802:	6061      	str	r1, [r4, #4]
 8000804:	60a2      	str	r2, [r4, #8]
 8000806:	60e3      	str	r3, [r4, #12]
 8000808:	882b      	ldrh	r3, [r5, #0]
 800080a:	8223      	strh	r3, [r4, #16]
}
 800080c:	bc30      	pop	{r4, r5}
 800080e:	4770      	bx	lr
 8000810:	0800a000 	.word	0x0800a000

08000814 <ledDisconnectNotification>:
void ledDisconnectNotification(void){
 8000814:	b510      	push	{r4, lr}
	resetColor(&receivedColor);
 8000816:	4c0a      	ldr	r4, [pc, #40]	; (8000840 <ledDisconnectNotification+0x2c>)
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff ffed 	bl	80007f8 <resetColor>
	receivedColor.colors_indiv.left_side_g = 0;
 800081e:	2200      	movs	r2, #0
 8000820:	7162      	strb	r2, [r4, #5]
	receivedColor.colors_indiv.right_side_g = 0;
 8000822:	73a2      	strb	r2, [r4, #14]
	receivedColor.colors_indiv.left_side_b = 50;
 8000824:	2332      	movs	r3, #50	; 0x32
 8000826:	7123      	strb	r3, [r4, #4]
	receivedColor.colors_indiv.right_side_b = 50;
 8000828:	7363      	strb	r3, [r4, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 800082a:	4613      	mov	r3, r2
 800082c:	4621      	mov	r1, r4
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <ledDisconnectNotification+0x30>)
 8000830:	6800      	ldr	r0, [r0, #0]
 8000832:	f007 f81d 	bl	8007870 <osMessageQueuePut>
	osDelay(10);
 8000836:	200a      	movs	r0, #10
 8000838:	f006 ff14 	bl	8007664 <osDelay>
}
 800083c:	bd10      	pop	{r4, pc}
 800083e:	bf00      	nop
 8000840:	20001f24 	.word	0x20001f24
 8000844:	20001e2c 	.word	0x20001e2c

08000848 <ledStartupSequence>:
void ledStartupSequence(void){
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	resetColor(&receivedColor);
 800084a:	4c3e      	ldr	r4, [pc, #248]	; (8000944 <ledStartupSequence+0xfc>)
 800084c:	4620      	mov	r0, r4
 800084e:	f7ff ffd3 	bl	80007f8 <resetColor>
	receivedColor.colors_indiv.left_front_b = 255;
 8000852:	26ff      	movs	r6, #255	; 0xff
 8000854:	7066      	strb	r6, [r4, #1]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000856:	4f3c      	ldr	r7, [pc, #240]	; (8000948 <ledStartupSequence+0x100>)
 8000858:	2300      	movs	r3, #0
 800085a:	461a      	mov	r2, r3
 800085c:	4621      	mov	r1, r4
 800085e:	6838      	ldr	r0, [r7, #0]
 8000860:	f007 f806 	bl	8007870 <osMessageQueuePut>
	osDelay(LED_START_SEQ_INTERVAL);
 8000864:	20c8      	movs	r0, #200	; 0xc8
 8000866:	f006 fefd 	bl	8007664 <osDelay>
	receivedColor.colors_indiv.left_front_b = 0;
 800086a:	2500      	movs	r5, #0
 800086c:	7065      	strb	r5, [r4, #1]
	receivedColor.colors_indiv.left_front_g = 255;
 800086e:	7026      	strb	r6, [r4, #0]
	receivedColor.colors_indiv.left_top_b = 255;
 8000870:	70a6      	strb	r6, [r4, #2]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000872:	462b      	mov	r3, r5
 8000874:	462a      	mov	r2, r5
 8000876:	4621      	mov	r1, r4
 8000878:	6838      	ldr	r0, [r7, #0]
 800087a:	f006 fff9 	bl	8007870 <osMessageQueuePut>
	osDelay(LED_START_SEQ_INTERVAL);
 800087e:	20c8      	movs	r0, #200	; 0xc8
 8000880:	f006 fef0 	bl	8007664 <osDelay>
	receivedColor.colors_indiv.left_front_g = 0;
 8000884:	7025      	strb	r5, [r4, #0]
	receivedColor.colors_indiv.left_front_r = 255;
 8000886:	71a6      	strb	r6, [r4, #6]
	receivedColor.colors_indiv.left_top_b = 0;
 8000888:	70a5      	strb	r5, [r4, #2]
	receivedColor.colors_indiv.left_top_g = 255;
 800088a:	70e6      	strb	r6, [r4, #3]
	receivedColor.colors_indiv.left_side_b = 255;
 800088c:	7126      	strb	r6, [r4, #4]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 800088e:	462b      	mov	r3, r5
 8000890:	462a      	mov	r2, r5
 8000892:	4621      	mov	r1, r4
 8000894:	6838      	ldr	r0, [r7, #0]
 8000896:	f006 ffeb 	bl	8007870 <osMessageQueuePut>
	osDelay(LED_START_SEQ_INTERVAL);
 800089a:	20c8      	movs	r0, #200	; 0xc8
 800089c:	f006 fee2 	bl	8007664 <osDelay>
	receivedColor.colors_indiv.left_front_r = 0;
 80008a0:	71a5      	strb	r5, [r4, #6]
	receivedColor.colors_indiv.left_top_g = 0;
 80008a2:	70e5      	strb	r5, [r4, #3]
	receivedColor.colors_indiv.left_top_r = 255;
 80008a4:	71e6      	strb	r6, [r4, #7]
	receivedColor.colors_indiv.left_side_b = 0;
 80008a6:	7125      	strb	r5, [r4, #4]
	receivedColor.colors_indiv.left_side_g = 255;
 80008a8:	7166      	strb	r6, [r4, #5]
	receivedColor.colors_indiv.right_side_b = 255;
 80008aa:	7366      	strb	r6, [r4, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 80008ac:	462b      	mov	r3, r5
 80008ae:	462a      	mov	r2, r5
 80008b0:	4621      	mov	r1, r4
 80008b2:	6838      	ldr	r0, [r7, #0]
 80008b4:	f006 ffdc 	bl	8007870 <osMessageQueuePut>
	osDelay(LED_START_SEQ_INTERVAL);
 80008b8:	20c8      	movs	r0, #200	; 0xc8
 80008ba:	f006 fed3 	bl	8007664 <osDelay>
	receivedColor.colors_indiv.left_top_r = 0;
 80008be:	71e5      	strb	r5, [r4, #7]
	receivedColor.colors_indiv.left_side_g = 0;
 80008c0:	7165      	strb	r5, [r4, #5]
	receivedColor.colors_indiv.left_side_r = 255;
 80008c2:	7226      	strb	r6, [r4, #8]
	receivedColor.colors_indiv.right_side_b = 0;
 80008c4:	7365      	strb	r5, [r4, #13]
	receivedColor.colors_indiv.right_side_g = 255;
 80008c6:	73a6      	strb	r6, [r4, #14]
	receivedColor.colors_indiv.right_top_b = 255;
 80008c8:	72e6      	strb	r6, [r4, #11]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 80008ca:	462b      	mov	r3, r5
 80008cc:	462a      	mov	r2, r5
 80008ce:	4621      	mov	r1, r4
 80008d0:	6838      	ldr	r0, [r7, #0]
 80008d2:	f006 ffcd 	bl	8007870 <osMessageQueuePut>
	osDelay(LED_START_SEQ_INTERVAL);
 80008d6:	20c8      	movs	r0, #200	; 0xc8
 80008d8:	f006 fec4 	bl	8007664 <osDelay>
	receivedColor.colors_indiv.left_side_r = 0;
 80008dc:	7225      	strb	r5, [r4, #8]
	receivedColor.colors_indiv.right_side_g = 0;
 80008de:	73a5      	strb	r5, [r4, #14]
	receivedColor.colors_indiv.right_side_r = 255;
 80008e0:	7466      	strb	r6, [r4, #17]
	receivedColor.colors_indiv.right_top_b = 0;
 80008e2:	72e5      	strb	r5, [r4, #11]
	receivedColor.colors_indiv.right_top_g = 255;
 80008e4:	7326      	strb	r6, [r4, #12]
	receivedColor.colors_indiv.right_front_b = 255;
 80008e6:	72a6      	strb	r6, [r4, #10]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 80008e8:	462b      	mov	r3, r5
 80008ea:	462a      	mov	r2, r5
 80008ec:	4621      	mov	r1, r4
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	f006 ffbe 	bl	8007870 <osMessageQueuePut>
	osDelay(LED_START_SEQ_INTERVAL);
 80008f4:	20c8      	movs	r0, #200	; 0xc8
 80008f6:	f006 feb5 	bl	8007664 <osDelay>
	receivedColor.colors_indiv.right_side_r = 0;
 80008fa:	7465      	strb	r5, [r4, #17]
	receivedColor.colors_indiv.right_top_g = 0;
 80008fc:	7325      	strb	r5, [r4, #12]
	receivedColor.colors_indiv.right_top_r = 255;
 80008fe:	7426      	strb	r6, [r4, #16]
	receivedColor.colors_indiv.right_front_b = 0;
 8000900:	72a5      	strb	r5, [r4, #10]
	receivedColor.colors_indiv.right_front_g = 255;
 8000902:	7266      	strb	r6, [r4, #9]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000904:	462b      	mov	r3, r5
 8000906:	462a      	mov	r2, r5
 8000908:	4621      	mov	r1, r4
 800090a:	6838      	ldr	r0, [r7, #0]
 800090c:	f006 ffb0 	bl	8007870 <osMessageQueuePut>
	osDelay(LED_START_SEQ_INTERVAL);
 8000910:	20c8      	movs	r0, #200	; 0xc8
 8000912:	f006 fea7 	bl	8007664 <osDelay>
	receivedColor.colors_indiv.right_top_r = 0;
 8000916:	7425      	strb	r5, [r4, #16]
	receivedColor.colors_indiv.right_front_g = 0;
 8000918:	7265      	strb	r5, [r4, #9]
	receivedColor.colors_indiv.right_front_r = 255;
 800091a:	73e6      	strb	r6, [r4, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 800091c:	462b      	mov	r3, r5
 800091e:	462a      	mov	r2, r5
 8000920:	4621      	mov	r1, r4
 8000922:	6838      	ldr	r0, [r7, #0]
 8000924:	f006 ffa4 	bl	8007870 <osMessageQueuePut>
	osDelay(LED_START_SEQ_INTERVAL);
 8000928:	20c8      	movs	r0, #200	; 0xc8
 800092a:	f006 fe9b 	bl	8007664 <osDelay>
	receivedColor.colors_indiv.right_front_r = 0;
 800092e:	73e5      	strb	r5, [r4, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000930:	462b      	mov	r3, r5
 8000932:	462a      	mov	r2, r5
 8000934:	4621      	mov	r1, r4
 8000936:	6838      	ldr	r0, [r7, #0]
 8000938:	f006 ff9a 	bl	8007870 <osMessageQueuePut>
	ledDisconnectNotification();
 800093c:	f7ff ff6a 	bl	8000814 <ledDisconnectNotification>
}
 8000940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000942:	bf00      	nop
 8000944:	20001f24 	.word	0x20001f24
 8000948:	20001e2c 	.word	0x20001e2c

0800094c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800094e:	6802      	ldr	r2, [r0, #0]
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000952:	429a      	cmp	r2, r3
 8000954:	d000      	beq.n	8000958 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000956:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000958:	f000 fbfe 	bl	8001158 <HAL_IncTick>
}
 800095c:	e7fb      	b.n	8000956 <HAL_TIM_PeriodElapsedCallback+0xa>
 800095e:	bf00      	nop
 8000960:	40012c00 	.word	0x40012c00

08000964 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000966:	e7fe      	b.n	8000966 <Error_Handler+0x2>

08000968 <SystemClock_Config>:
{
 8000968:	b510      	push	{r4, lr}
 800096a:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096c:	2248      	movs	r2, #72	; 0x48
 800096e:	2100      	movs	r1, #0
 8000970:	a808      	add	r0, sp, #32
 8000972:	f009 fac3 	bl	8009efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000976:	2400      	movs	r4, #0
 8000978:	9401      	str	r4, [sp, #4]
 800097a:	9402      	str	r4, [sp, #8]
 800097c:	9403      	str	r4, [sp, #12]
 800097e:	9404      	str	r4, [sp, #16]
 8000980:	9405      	str	r4, [sp, #20]
 8000982:	9406      	str	r4, [sp, #24]
 8000984:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8000986:	f002 fb5f 	bl	8003048 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800098a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800098e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000992:	f023 0318 	bic.w	r3, r3, #24
 8000996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800099e:	6813      	ldr	r3, [r2, #0]
 80009a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80009a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a8:	6013      	str	r3, [r2, #0]
 80009aa:	6813      	ldr	r3, [r2, #0]
 80009ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80009b4:	232f      	movs	r3, #47	; 0x2f
 80009b6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009bc:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009be:	2301      	movs	r3, #1
 80009c0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c6:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009c8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ca:	2240      	movs	r2, #64	; 0x40
 80009cc:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009ce:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009d0:	2260      	movs	r2, #96	; 0x60
 80009d2:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009d4:	2205      	movs	r2, #5
 80009d6:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2202      	movs	r2, #2
 80009da:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009dc:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009de:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80009e0:	2320      	movs	r3, #32
 80009e2:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009e8:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009ee:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009f4:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	a808      	add	r0, sp, #32
 80009f8:	f002 fc32 	bl	8003260 <HAL_RCC_OscConfig>
 80009fc:	b990      	cbnz	r0, 8000a24 <SystemClock_Config+0xbc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80009fe:	236f      	movs	r3, #111	; 0x6f
 8000a00:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a02:	2103      	movs	r1, #3
 8000a04:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000a12:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a14:	a801      	add	r0, sp, #4
 8000a16:	f002 ffb9 	bl	800398c <HAL_RCC_ClockConfig>
 8000a1a:	b928      	cbnz	r0, 8000a28 <SystemClock_Config+0xc0>
  HAL_RCCEx_EnableMSIPLLMode();
 8000a1c:	f004 f8b2 	bl	8004b84 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a20:	b01a      	add	sp, #104	; 0x68
 8000a22:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000a24:	f7ff ff9e 	bl	8000964 <Error_Handler>
    Error_Handler();
 8000a28:	f7ff ff9c 	bl	8000964 <Error_Handler>

08000a2c <PeriphCommonClock_Config>:
{
 8000a2c:	b500      	push	{lr}
 8000a2e:	b095      	sub	sp, #84	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a30:	222c      	movs	r2, #44	; 0x2c
 8000a32:	2100      	movs	r1, #0
 8000a34:	a806      	add	r0, sp, #24
 8000a36:	f009 fa61 	bl	8009efc <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8000a3a:	f44f 5355 	mov.w	r3, #13632	; 0x3540
 8000a3e:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000a40:	2318      	movs	r3, #24
 8000a42:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a48:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a4e:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000a50:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a54:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_USBCLK
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <PeriphCommonClock_Config+0x5c>)
 8000a58:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000a5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a5e:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a64:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000a66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a6a:	9311      	str	r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000a70:	2310      	movs	r3, #16
 8000a72:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a74:	4668      	mov	r0, sp
 8000a76:	f003 fb44 	bl	8004102 <HAL_RCCEx_PeriphCLKConfig>
 8000a7a:	b910      	cbnz	r0, 8000a82 <PeriphCommonClock_Config+0x56>
}
 8000a7c:	b015      	add	sp, #84	; 0x54
 8000a7e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a82:	f7ff ff6f 	bl	8000964 <Error_Handler>
 8000a86:	bf00      	nop
 8000a88:	11010000 	.word	0x11010000

08000a8c <main>:
{
 8000a8c:	b508      	push	{r3, lr}
  HAL_Init();
 8000a8e:	f000 fb4d 	bl	800112c <HAL_Init>
  MX_APPE_Config();
 8000a92:	f7ff fc4b 	bl	800032c <MX_APPE_Config>
  SystemClock_Config();
 8000a96:	f7ff ff67 	bl	8000968 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000a9a:	f7ff ffc7 	bl	8000a2c <PeriphCommonClock_Config>
   MX_IPCC_Init();
 8000a9e:	f7ff fdcd 	bl	800063c <MX_IPCC_Init>
  MX_GPIO_Init();
 8000aa2:	f7ff fc8b 	bl	80003bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000aa6:	f7ff fb6b 	bl	8000180 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000aaa:	f7ff fceb 	bl	8000484 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000aae:	f7ff fd19 	bl	80004e4 <MX_I2C3_Init>
  MX_RF_Init();
 8000ab2:	f000 f813 	bl	8000adc <MX_RF_Init>
  MX_RTC_Init();
 8000ab6:	f000 f813 	bl	8000ae0 <MX_RTC_Init>
  MX_SAI1_Init();
 8000aba:	f000 f85b 	bl	8000b74 <MX_SAI1_Init>
  MX_SPI1_Init();
 8000abe:	f000 f8b5 	bl	8000c2c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000ac2:	f000 f8d9 	bl	8000c78 <MX_SPI2_Init>
  MX_TIM16_Init();
 8000ac6:	f000 faa5 	bl	8001014 <MX_TIM16_Init>
  MX_USB_Device_Init();
 8000aca:	f008 ff75 	bl	80099b8 <MX_USB_Device_Init>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ace:	f006 fd3d 	bl	800754c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ad2:	f7ff fc43 	bl	800035c <MX_FREERTOS_Init>
  osKernelStart();
 8000ad6:	f006 fd4b 	bl	8007570 <osKernelStart>
  while (1)
 8000ada:	e7fe      	b.n	8000ada <main+0x4e>

08000adc <MX_RF_Init>:
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000adc:	4770      	bx	lr
	...

08000ae0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ae0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ae2:	480a      	ldr	r0, [pc, #40]	; (8000b0c <MX_RTC_Init+0x2c>)
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_RTC_Init+0x30>)
 8000ae6:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000aec:	220f      	movs	r2, #15
 8000aee:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000af0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000af4:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000af6:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000af8:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000afa:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000afc:	6143      	str	r3, [r0, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000afe:	f004 f87f 	bl	8004c00 <HAL_RTC_Init>
 8000b02:	b900      	cbnz	r0, 8000b06 <MX_RTC_Init+0x26>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b04:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b06:	f7ff ff2d 	bl	8000964 <Error_Handler>
}
 8000b0a:	e7fb      	b.n	8000b04 <MX_RTC_Init+0x24>
 8000b0c:	20001f4c 	.word	0x20001f4c
 8000b10:	40002800 	.word	0x40002800

08000b14 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b14:	b510      	push	{r4, lr}
 8000b16:	b096      	sub	sp, #88	; 0x58
 8000b18:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b1a:	2250      	movs	r2, #80	; 0x50
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	a802      	add	r0, sp, #8
 8000b20:	f009 f9ec 	bl	8009efc <memset>
  if(rtcHandle->Instance==RTC)
 8000b24:	6822      	ldr	r2, [r4, #0]
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_RTC_MspInit+0x5c>)
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d001      	beq.n	8000b30 <HAL_RTC_MspInit+0x1c>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b2c:	b016      	add	sp, #88	; 0x58
 8000b2e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b34:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b3a:	9312      	str	r3, [sp, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3c:	a802      	add	r0, sp, #8
 8000b3e:	f003 fae0 	bl	8004102 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	b988      	cbnz	r0, 8000b68 <HAL_RTC_MspInit+0x54>
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b48:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b5a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b62:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000b64:	9b01      	ldr	r3, [sp, #4]
}
 8000b66:	e7e1      	b.n	8000b2c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8000b68:	f7ff fefc 	bl	8000964 <Error_Handler>
 8000b6c:	e7ea      	b.n	8000b44 <HAL_RTC_MspInit+0x30>
 8000b6e:	bf00      	nop
 8000b70:	40002800 	.word	0x40002800

08000b74 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000b74:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_SAI1_Init+0x38>)
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <MX_SAI1_Init+0x3c>)
 8000b7a:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b80:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b82:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b84:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000b86:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b88:	61c1      	str	r1, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_SAI1_Init+0x40>)
 8000b8c:	6203      	str	r3, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b8e:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8000b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b94:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b96:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b98:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	f004 fa85 	bl	80050ac <HAL_SAI_InitProtocol>
 8000ba2:	b900      	cbnz	r0, 8000ba6 <MX_SAI1_Init+0x32>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000ba4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ba6:	f7ff fedd 	bl	8000964 <Error_Handler>
}
 8000baa:	e7fb      	b.n	8000ba4 <MX_SAI1_Init+0x30>
 8000bac:	20001f70 	.word	0x20001f70
 8000bb0:	40015404 	.word	0x40015404
 8000bb4:	0002ee00 	.word	0x0002ee00

08000bb8 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8000bb8:	6802      	ldr	r2, [r0, #0]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_SAI_MspInit+0x64>)
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d000      	beq.n	8000bc2 <HAL_SAI_MspInit+0xa>
 8000bc0:	4770      	bx	lr
{
 8000bc2:	b570      	push	{r4, r5, r6, lr}
 8000bc4:	b086      	sub	sp, #24
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_SAI_MspInit+0x68>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	b953      	cbnz	r3, 8000be2 <HAL_SAI_MspInit+0x2a>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bd0:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8000bd2:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000bd6:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bd8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000bda:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8000bde:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8000be0:	9a00      	ldr	r2, [sp, #0]
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
    }
    SAI1_client ++;
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_SAI_MspInit+0x68>)
 8000be6:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB13     ------> SAI1_SCK_A
    PB12     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000be8:	2308      	movs	r3, #8
 8000bea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2602      	movs	r6, #2
 8000bee:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000bf6:	250d      	movs	r5, #13
 8000bf8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	a901      	add	r1, sp, #4
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <HAL_SAI_MspInit+0x6c>)
 8000bfe:	f000 fe3d 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000c02:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c06:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c0e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	a901      	add	r1, sp, #4
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_SAI_MspInit+0x70>)
 8000c14:	f000 fe32 	bl	800187c <HAL_GPIO_Init>

    }
}
 8000c18:	b006      	add	sp, #24
 8000c1a:	bd70      	pop	{r4, r5, r6, pc}
 8000c1c:	40015404 	.word	0x40015404
 8000c20:	200001d8 	.word	0x200001d8
 8000c24:	48000800 	.word	0x48000800
 8000c28:	48000400 	.word	0x48000400

08000c2c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c2c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c2e:	4810      	ldr	r0, [pc, #64]	; (8000c70 <MX_SPI1_Init+0x44>)
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_SPI1_Init+0x48>)
 8000c32:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c34:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c38:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c3e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c42:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c44:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c46:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c4c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c4e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c50:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c52:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c54:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c56:	2207      	movs	r2, #7
 8000c58:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c5a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c60:	f004 fa39 	bl	80050d6 <HAL_SPI_Init>
 8000c64:	b900      	cbnz	r0, 8000c68 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c66:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c68:	f7ff fe7c 	bl	8000964 <Error_Handler>
}
 8000c6c:	e7fb      	b.n	8000c66 <MX_SPI1_Init+0x3a>
 8000c6e:	bf00      	nop
 8000c70:	2000206c 	.word	0x2000206c
 8000c74:	40013000 	.word	0x40013000

08000c78 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c78:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c7a:	4810      	ldr	r0, [pc, #64]	; (8000cbc <MX_SPI2_Init+0x44>)
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_SPI2_Init+0x48>)
 8000c7e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c80:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c84:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c86:	2300      	movs	r3, #0
 8000c88:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c8e:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c90:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c92:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c98:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c9a:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ca6:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cac:	f004 fa13 	bl	80050d6 <HAL_SPI_Init>
 8000cb0:	b900      	cbnz	r0, 8000cb4 <MX_SPI2_Init+0x3c>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cb2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cb4:	f7ff fe56 	bl	8000964 <Error_Handler>
}
 8000cb8:	e7fb      	b.n	8000cb2 <MX_SPI2_Init+0x3a>
 8000cba:	bf00      	nop
 8000cbc:	20002008 	.word	0x20002008
 8000cc0:	40003800 	.word	0x40003800

08000cc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cc4:	b570      	push	{r4, r5, r6, lr}
 8000cc6:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	2300      	movs	r3, #0
 8000cca:	9307      	str	r3, [sp, #28]
 8000ccc:	9308      	str	r3, [sp, #32]
 8000cce:	9309      	str	r3, [sp, #36]	; 0x24
 8000cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8000cd2:	930b      	str	r3, [sp, #44]	; 0x2c
  if(spiHandle->Instance==SPI1)
 8000cd4:	6803      	ldr	r3, [r0, #0]
 8000cd6:	4a3a      	ldr	r2, [pc, #232]	; (8000dc0 <HAL_SPI_MspInit+0xfc>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d004      	beq.n	8000ce6 <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8000cdc:	4a39      	ldr	r2, [pc, #228]	; (8000dc4 <HAL_SPI_MspInit+0x100>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d038      	beq.n	8000d54 <HAL_SPI_MspInit+0x90>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ce2:	b00c      	add	sp, #48	; 0x30
 8000ce4:	bd70      	pop	{r4, r5, r6, pc}
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000cf0:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cf2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cf4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000cf8:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000cfa:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cfe:	f042 0202 	orr.w	r2, r2, #2
 8000d02:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d06:	f002 0202 	and.w	r2, r2, #2
 8000d0a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000d0c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d10:	f042 0201 	orr.w	r2, r2, #1
 8000d14:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000d1e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 8000d20:	2338      	movs	r3, #56	; 0x38
 8000d22:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2602      	movs	r6, #2
 8000d26:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2400      	movs	r4, #0
 8000d2a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d2e:	2505      	movs	r5, #5
 8000d30:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	a907      	add	r1, sp, #28
 8000d34:	4824      	ldr	r0, [pc, #144]	; (8000dc8 <HAL_SPI_MspInit+0x104>)
 8000d36:	f000 fda1 	bl	800187c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d46:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	a907      	add	r1, sp, #28
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4e:	f000 fd95 	bl	800187c <HAL_GPIO_Init>
 8000d52:	e7c6      	b.n	8000ce2 <HAL_SPI_MspInit+0x1e>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d5e:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d62:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d66:	9206      	str	r2, [sp, #24]
  (void)tmpreg;
 8000d68:	9a06      	ldr	r2, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d6c:	f042 0208 	orr.w	r2, r2, #8
 8000d70:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d74:	f002 0208 	and.w	r2, r2, #8
 8000d78:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 8000d7a:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d7e:	f042 0202 	orr.w	r2, r2, #2
 8000d82:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8000d8c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2602      	movs	r6, #2
 8000d94:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2400      	movs	r4, #0
 8000d98:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9c:	2505      	movs	r5, #5
 8000d9e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da0:	a907      	add	r1, sp, #28
 8000da2:	480a      	ldr	r0, [pc, #40]	; (8000dcc <HAL_SPI_MspInit+0x108>)
 8000da4:	f000 fd6a 	bl	800187c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000da8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dac:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000db4:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	a907      	add	r1, sp, #28
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <HAL_SPI_MspInit+0x104>)
 8000dba:	f000 fd5f 	bl	800187c <HAL_GPIO_Init>
}
 8000dbe:	e790      	b.n	8000ce2 <HAL_SPI_MspInit+0x1e>
 8000dc0:	40013000 	.word	0x40013000
 8000dc4:	40003800 	.word	0x40003800
 8000dc8:	48000400 	.word	0x48000400
 8000dcc:	48000c00 	.word	0x48000c00

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b500      	push	{lr}
 8000dd2:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000dda:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000dde:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000de6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000de8:	9b01      	ldr	r3, [sp, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	210f      	movs	r1, #15
 8000dee:	f06f 0001 	mvn.w	r0, #1
 8000df2:	f000 fd01 	bl	80017f8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2105      	movs	r1, #5
 8000dfa:	202e      	movs	r0, #46	; 0x2e
 8000dfc:	f000 fcfc 	bl	80017f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000e00:	202e      	movs	r0, #46	; 0x2e
 8000e02:	f000 fd2d 	bl	8001860 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	b003      	add	sp, #12
 8000e08:	f85d fb04 	ldr.w	pc, [sp], #4

08000e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b500      	push	{lr}
 8000e0e:	b08b      	sub	sp, #44	; 0x2c
 8000e10:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2019      	movs	r0, #25
 8000e16:	f000 fcef 	bl	80017f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e1a:	2019      	movs	r0, #25
 8000e1c:	f000 fd20 	bl	8001860 <HAL_NVIC_EnableIRQ>
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e2a:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e32:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000e34:	9b01      	ldr	r3, [sp, #4]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e36:	a902      	add	r1, sp, #8
 8000e38:	a803      	add	r0, sp, #12
 8000e3a:	f002 feeb 	bl	8003c14 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e3e:	f002 fed7 	bl	8003bf0 <HAL_RCC_GetPCLK2Freq>
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e44:	fba3 2300 	umull	r2, r3, r3, r0
 8000e48:	0c9b      	lsrs	r3, r3, #18
 8000e4a:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <HAL_InitTick+0x70>)
 8000e4e:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <HAL_InitTick+0x74>)
 8000e50:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e56:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e58:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e60:	f004 fbe4 	bl	800562c <HAL_TIM_Base_Init>
 8000e64:	b118      	cbz	r0, 8000e6e <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 8000e66:	2001      	movs	r0, #1
}
 8000e68:	b00b      	add	sp, #44	; 0x2c
 8000e6a:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e6e:	4803      	ldr	r0, [pc, #12]	; (8000e7c <HAL_InitTick+0x70>)
 8000e70:	f004 faa0 	bl	80053b4 <HAL_TIM_Base_Start_IT>
 8000e74:	e7f8      	b.n	8000e68 <HAL_InitTick+0x5c>
 8000e76:	bf00      	nop
 8000e78:	431bde83 	.word	0x431bde83
 8000e7c:	200020d0 	.word	0x200020d0
 8000e80:	40012c00 	.word	0x40012c00

08000e84 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler>

08000e86 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler>

08000e88 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler>

08000e8a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler>

08000e8c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler>

08000e8e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8e:	4770      	bx	lr

08000e90 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000e90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e92:	4802      	ldr	r0, [pc, #8]	; (8000e9c <USB_LP_IRQHandler+0xc>)
 8000e94:	f001 fea0 	bl	8002bd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000e98:	bd08      	pop	{r3, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000367c 	.word	0x2000367c

08000ea0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ea0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ea4:	f004 fabd 	bl	8005422 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000eaa:	f004 faba 	bl	8005422 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000eae:	bd08      	pop	{r3, pc}
 8000eb0:	200020d0 	.word	0x200020d0
 8000eb4:	2000211c 	.word	0x2000211c

08000eb8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8000eb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000eba:	f000 fda9 	bl	8001a10 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8000ebe:	bd08      	pop	{r3, pc}

08000ec0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000ec0:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <SystemInit+0x5c>)
 8000ec2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000ec6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	f042 0201 	orr.w	r2, r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000eda:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ede:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ee0:	6819      	ldr	r1, [r3, #0]
 8000ee2:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8000ee6:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8000eea:	400a      	ands	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000eee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000ef2:	f022 0205 	bic.w	r2, r2, #5
 8000ef6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000efa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f06:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <SystemInit+0x60>)
 8000f08:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f0a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f12:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00
 8000f20:	22041000 	.word	0x22041000

08000f24 <_Z41__static_initialization_and_destruction_0ii>:
	data->objectTemp = tp->getTobj(data->objectRaw, data->ambientTemp);
}

static void triggerThermopileSample(void *argument) {
	osThreadFlagsSet(thermopileTaskHandle, GRAB_SAMPLE_BIT);
}
 8000f24:	2801      	cmp	r0, #1
 8000f26:	d000      	beq.n	8000f2a <_Z41__static_initialization_and_destruction_0ii+0x6>
 8000f28:	4770      	bx	lr
 8000f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d1fa      	bne.n	8000f28 <_Z41__static_initialization_and_destruction_0ii+0x4>
#define cycTime_60ms  0x01
#define cycTime_120ms 0x02
#define cycTime_140ms 0x03


class CALIPILE
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000f34:	2300      	movs	r3, #0
 8000f36:	6053      	str	r3, [r2, #4]
 8000f38:	7213      	strb	r3, [r2, #8]
 8000f3a:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000f3c:	6053      	str	r3, [r2, #4]
 8000f3e:	7213      	strb	r3, [r2, #8]
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000f42:	6053      	str	r3, [r2, #4]
 8000f44:	7213      	strb	r3, [r2, #8]
 8000f46:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000f48:	6053      	str	r3, [r2, #4]
 8000f4a:	7213      	strb	r3, [r2, #8]
 8000f4c:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000f4e:	6053      	str	r3, [r2, #4]
 8000f50:	7213      	strb	r3, [r2, #8]
 8000f52:	e7e9      	b.n	8000f28 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8000f54:	20000200 	.word	0x20000200
 8000f58:	200001dc 	.word	0x200001dc
 8000f5c:	20000248 	.word	0x20000248
 8000f60:	2000026c 	.word	0x2000026c
 8000f64:	20000224 	.word	0x20000224

08000f68 <_GLOBAL__sub_I_thermopileTaskHandle>:
 8000f68:	b508      	push	{r3, lr}
 8000f6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f7ff ffd8 	bl	8000f24 <_Z41__static_initialization_and_destruction_0ii>
 8000f74:	bd08      	pop	{r3, pc}
	...

08000f78 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM16)
 8000f78:	6802      	ldr	r2, [r0, #0]
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d000      	beq.n	8000f82 <HAL_TIM_Base_MspInit+0xa>
 8000f80:	4770      	bx	lr
{
 8000f82:	b500      	push	{lr}
 8000f84:	b083      	sub	sp, #12
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f90:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f9a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	2019      	movs	r0, #25
 8000fa2:	f000 fc29 	bl	80017f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000fa6:	2019      	movs	r0, #25
 8000fa8:	f000 fc5a 	bl	8001860 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000fac:	b003      	add	sp, #12
 8000fae:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fb2:	bf00      	nop
 8000fb4:	40014400 	.word	0x40014400

08000fb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fb8:	b500      	push	{lr}
 8000fba:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	9303      	str	r3, [sp, #12]
 8000fc4:	9304      	str	r3, [sp, #16]
 8000fc6:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM16)
 8000fc8:	6802      	ldr	r2, [r0, #0]
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_TIM_MspPostInit+0x54>)
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d002      	beq.n	8000fd6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000fd0:	b007      	add	sp, #28
 8000fd2:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fdc:	f042 0202 	orr.w	r2, r2, #2
 8000fe0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000fea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = BLINK_PWM_Pin;
 8000fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000ffc:	230e      	movs	r3, #14
 8000ffe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BLINK_PWM_GPIO_Port, &GPIO_InitStruct);
 8001000:	a901      	add	r1, sp, #4
 8001002:	4803      	ldr	r0, [pc, #12]	; (8001010 <HAL_TIM_MspPostInit+0x58>)
 8001004:	f000 fc3a 	bl	800187c <HAL_GPIO_Init>
}
 8001008:	e7e2      	b.n	8000fd0 <HAL_TIM_MspPostInit+0x18>
 800100a:	bf00      	nop
 800100c:	40014400 	.word	0x40014400
 8001010:	48000400 	.word	0x48000400

08001014 <MX_TIM16_Init>:
{
 8001014:	b510      	push	{r4, lr}
 8001016:	b094      	sub	sp, #80	; 0x50
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001018:	2400      	movs	r4, #0
 800101a:	940d      	str	r4, [sp, #52]	; 0x34
 800101c:	940e      	str	r4, [sp, #56]	; 0x38
 800101e:	940f      	str	r4, [sp, #60]	; 0x3c
 8001020:	9410      	str	r4, [sp, #64]	; 0x40
 8001022:	9411      	str	r4, [sp, #68]	; 0x44
 8001024:	9412      	str	r4, [sp, #72]	; 0x48
 8001026:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001028:	2234      	movs	r2, #52	; 0x34
 800102a:	4621      	mov	r1, r4
 800102c:	4668      	mov	r0, sp
 800102e:	f008 ff65 	bl	8009efc <memset>
  htim16.Instance = TIM16;
 8001032:	4820      	ldr	r0, [pc, #128]	; (80010b4 <MX_TIM16_Init+0xa0>)
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <MX_TIM16_Init+0xa4>)
 8001036:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 0;
 8001038:	6044      	str	r4, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	6084      	str	r4, [r0, #8]
  htim16.Init.Period = 65535;
 800103c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001040:	60c3      	str	r3, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	6104      	str	r4, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8001044:	6144      	str	r4, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001048:	f004 faf0 	bl	800562c <HAL_TIM_Base_Init>
 800104c:	bb30      	cbnz	r0, 800109c <MX_TIM16_Init+0x88>
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800104e:	4819      	ldr	r0, [pc, #100]	; (80010b4 <MX_TIM16_Init+0xa0>)
 8001050:	f004 fb1c 	bl	800568c <HAL_TIM_PWM_Init>
 8001054:	bb28      	cbnz	r0, 80010a2 <MX_TIM16_Init+0x8e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001056:	2360      	movs	r3, #96	; 0x60
 8001058:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800105a:	2200      	movs	r2, #0
 800105c:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105e:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001060:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001062:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001064:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001066:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001068:	a90d      	add	r1, sp, #52	; 0x34
 800106a:	4812      	ldr	r0, [pc, #72]	; (80010b4 <MX_TIM16_Init+0xa0>)
 800106c:	f004 fb7a 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 8001070:	b9d0      	cbnz	r0, 80010a8 <MX_TIM16_Init+0x94>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	9300      	str	r3, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001076:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001078:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800107a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800107c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800107e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001082:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001084:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001086:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001088:	4669      	mov	r1, sp
 800108a:	480a      	ldr	r0, [pc, #40]	; (80010b4 <MX_TIM16_Init+0xa0>)
 800108c:	f004 fc08 	bl	80058a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001090:	b968      	cbnz	r0, 80010ae <MX_TIM16_Init+0x9a>
  HAL_TIM_MspPostInit(&htim16);
 8001092:	4808      	ldr	r0, [pc, #32]	; (80010b4 <MX_TIM16_Init+0xa0>)
 8001094:	f7ff ff90 	bl	8000fb8 <HAL_TIM_MspPostInit>
}
 8001098:	b014      	add	sp, #80	; 0x50
 800109a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800109c:	f7ff fc62 	bl	8000964 <Error_Handler>
 80010a0:	e7d5      	b.n	800104e <MX_TIM16_Init+0x3a>
    Error_Handler();
 80010a2:	f7ff fc5f 	bl	8000964 <Error_Handler>
 80010a6:	e7d6      	b.n	8001056 <MX_TIM16_Init+0x42>
    Error_Handler();
 80010a8:	f7ff fc5c 	bl	8000964 <Error_Handler>
 80010ac:	e7e1      	b.n	8001072 <MX_TIM16_Init+0x5e>
    Error_Handler();
 80010ae:	f7ff fc59 	bl	8000964 <Error_Handler>
 80010b2:	e7ee      	b.n	8001092 <MX_TIM16_Init+0x7e>
 80010b4:	2000211c 	.word	0x2000211c
 80010b8:	40014400 	.word	0x40014400

080010bc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80010bc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010be:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c0:	3304      	adds	r3, #4

080010c2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80010c6:	d3f9      	bcc.n	80010bc <CopyDataInit>
  bx lr
 80010c8:	4770      	bx	lr

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80010ca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80010cc:	3004      	adds	r0, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80010ce:	4288      	cmp	r0, r1
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>
  bx lr
 80010d2:	4770      	bx	lr

080010d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80010d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d8:	f7ff fef2 	bl	8000ec0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80010dc:	480b      	ldr	r0, [pc, #44]	; (800110c <LoopForever+0x8>)
 80010de:	490c      	ldr	r1, [pc, #48]	; (8001110 <LoopForever+0xc>)
 80010e0:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <LoopForever+0x10>)
 80010e2:	2300      	movs	r3, #0
 80010e4:	f7ff ffed 	bl	80010c2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <LoopForever+0x14>)
 80010ea:	490c      	ldr	r1, [pc, #48]	; (800111c <LoopForever+0x18>)
 80010ec:	2300      	movs	r3, #0
 80010ee:	f7ff ffee 	bl	80010ce <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80010f2:	480b      	ldr	r0, [pc, #44]	; (8001120 <LoopForever+0x1c>)
 80010f4:	490b      	ldr	r1, [pc, #44]	; (8001124 <LoopForever+0x20>)
 80010f6:	2300      	movs	r3, #0
 80010f8:	f7ff ffe9 	bl	80010ce <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010fc:	f008 fecc 	bl	8009e98 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001100:	f7ff fcc4 	bl	8000a8c <main>

08001104 <LoopForever>:

LoopForever:
  b LoopForever
 8001104:	e7fe      	b.n	8001104 <LoopForever>
 8001106:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001108:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800110c:	20000004 	.word	0x20000004
 8001110:	20000198 	.word	0x20000198
 8001114:	0800a18c 	.word	0x0800a18c
  INIT_BSS _sbss, _ebss
 8001118:	20000198 	.word	0x20000198
 800111c:	20003970 	.word	0x20003970
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001120:	20030000 	.word	0x20030000
 8001124:	20030000 	.word	0x20030000

08001128 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b510      	push	{r4, lr}
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112e:	4a09      	ldr	r2, [pc, #36]	; (8001154 <HAL_Init+0x28>)
 8001130:	6813      	ldr	r3, [r2, #0]
 8001132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 fb4b 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113e:	200f      	movs	r0, #15
 8001140:	f7ff fe64 	bl	8000e0c <HAL_InitTick>
 8001144:	b110      	cbz	r0, 800114c <HAL_Init+0x20>
  {
    status = HAL_ERROR;
 8001146:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8001148:	4620      	mov	r0, r4
 800114a:	bd10      	pop	{r4, pc}
 800114c:	4604      	mov	r4, r0
    HAL_MspInit();
 800114e:	f7ff fe3f 	bl	8000dd0 <HAL_MspInit>
 8001152:	e7f9      	b.n	8001148 <HAL_Init+0x1c>
 8001154:	58004000 	.word	0x58004000

08001158 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_IncTick+0x10>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4a03      	ldr	r2, [pc, #12]	; (800116c <HAL_IncTick+0x14>)
 800115e:	6811      	ldr	r1, [r2, #0]
 8001160:	440b      	add	r3, r1
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000014 	.word	0x20000014
 800116c:	20002168 	.word	0x20002168

08001170 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001170:	4b01      	ldr	r3, [pc, #4]	; (8001178 <HAL_GetTick+0x8>)
 8001172:	6818      	ldr	r0, [r3, #0]
}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20002168 	.word	0x20002168

0800117c <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 800117c:	4b01      	ldr	r3, [pc, #4]	; (8001184 <HAL_GetTickPrio+0x8>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000018 	.word	0x20000018

08001188 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001188:	b530      	push	{r4, r5, lr}
 800118a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800118c:	2300      	movs	r3, #0
 800118e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8001190:	2800      	cmp	r0, #0
 8001192:	f000 80da 	beq.w	800134a <HAL_ADC_Init+0x1c2>
 8001196:	4604      	mov	r4, r0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001198:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800119a:	b313      	cbz	r3, 80011e2 <HAL_ADC_Init+0x5a>

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800119c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80011a4:	d005      	beq.n	80011b2 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80011ac:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80011b0:	609a      	str	r2, [r3, #8]
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011b2:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011b4:	6893      	ldr	r3, [r2, #8]
 80011b6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80011ba:	d11f      	bne.n	80011fc <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 80011bc:	6893      	ldr	r3, [r2, #8]
 80011be:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ca:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011cc:	4b60      	ldr	r3, [pc, #384]	; (8001350 <HAL_ADC_Init+0x1c8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	099b      	lsrs	r3, r3, #6
 80011d2:	4a60      	ldr	r2, [pc, #384]	; (8001354 <HAL_ADC_Init+0x1cc>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	3301      	adds	r3, #1
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80011e0:	e009      	b.n	80011f6 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 80011e2:	f7ff f80f 	bl	8000204 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80011e6:	2300      	movs	r3, #0
 80011e8:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80011ea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80011ee:	e7d5      	b.n	800119c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80011f0:	9b01      	ldr	r3, [sp, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80011f6:	9b01      	ldr	r3, [sp, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f9      	bne.n	80011f0 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011fc:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011fe:	6893      	ldr	r3, [r2, #8]
 8001200:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001204:	d109      	bne.n	800121a <HAL_ADC_Init+0x92>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001206:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001216:	2001      	movs	r0, #1
 8001218:	e000      	b.n	800121c <HAL_ADC_Init+0x94>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800121a:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800121c:	6893      	ldr	r3, [r2, #8]
 800121e:	f013 0304 	ands.w	r3, r3, #4
 8001222:	d000      	beq.n	8001226 <HAL_ADC_Init+0x9e>
 8001224:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001226:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001228:	f011 0f10 	tst.w	r1, #16
 800122c:	f040 8086 	bne.w	800133c <HAL_ADC_Init+0x1b4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001230:	2b00      	cmp	r3, #0
 8001232:	f040 8083 	bne.w	800133c <HAL_ADC_Init+0x1b4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001236:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001238:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001242:	6893      	ldr	r3, [r2, #8]
 8001244:	f013 0f01 	tst.w	r3, #1
 8001248:	d10b      	bne.n	8001262 <HAL_ADC_Init+0xda>
 800124a:	4b43      	ldr	r3, [pc, #268]	; (8001358 <HAL_ADC_Init+0x1d0>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f013 0f01 	tst.w	r3, #1
 8001252:	d106      	bne.n	8001262 <HAL_ADC_Init+0xda>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001254:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001256:	4941      	ldr	r1, [pc, #260]	; (800135c <HAL_ADC_Init+0x1d4>)
 8001258:	688a      	ldr	r2, [r1, #8]
 800125a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800125e:	4313      	orrs	r3, r2
 8001260:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001262:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 8001264:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001266:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 800126a:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 800126c:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 800126e:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8001270:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001272:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.Resolution                                                  |
 8001276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800127a:	2a01      	cmp	r2, #1
 800127c:	d03e      	beq.n	80012fc <HAL_ADC_Init+0x174>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800127e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001280:	b122      	cbz	r2, 800128c <HAL_ADC_Init+0x104>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001282:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001286:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001288:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800128a:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800128c:	6821      	ldr	r1, [r4, #0]
 800128e:	68cd      	ldr	r5, [r1, #12]
 8001290:	4a33      	ldr	r2, [pc, #204]	; (8001360 <HAL_ADC_Init+0x1d8>)
 8001292:	402a      	ands	r2, r5
 8001294:	4313      	orrs	r3, r2
 8001296:	60cb      	str	r3, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001298:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800129a:	688b      	ldr	r3, [r1, #8]
 800129c:	f013 0304 	ands.w	r3, r3, #4
 80012a0:	d000      	beq.n	80012a4 <HAL_ADC_Init+0x11c>
 80012a2:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012a4:	688a      	ldr	r2, [r1, #8]
 80012a6:	f012 0208 	ands.w	r2, r2, #8
 80012aa:	d000      	beq.n	80012ae <HAL_ADC_Init+0x126>
 80012ac:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012ae:	b9b3      	cbnz	r3, 80012de <HAL_ADC_Init+0x156>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012b0:	b9aa      	cbnz	r2, 80012de <HAL_ADC_Init+0x156>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012b2:	7e22      	ldrb	r2, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012b4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80012b8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012ba:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012be:	68cb      	ldr	r3, [r1, #12]
 80012c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012c4:	f023 0302 	bic.w	r3, r3, #2
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012cc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d018      	beq.n	8001306 <HAL_ADC_Init+0x17e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012d4:	6822      	ldr	r2, [r4, #0]
 80012d6:	6913      	ldr	r3, [r2, #16]
 80012d8:	f023 0301 	bic.w	r3, r3, #1
 80012dc:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012de:	6923      	ldr	r3, [r4, #16]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d022      	beq.n	800132a <HAL_ADC_Init+0x1a2>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012e4:	6822      	ldr	r2, [r4, #0]
 80012e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012e8:	f023 030f 	bic.w	r3, r3, #15
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012f0:	f023 0303 	bic.w	r3, r3, #3
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6563      	str	r3, [r4, #84]	; 0x54
 80012fa:	e024      	b.n	8001346 <HAL_ADC_Init+0x1be>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012fe:	3a01      	subs	r2, #1
 8001300:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001304:	e7bb      	b.n	800127e <HAL_ADC_Init+0xf6>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001306:	6821      	ldr	r1, [r4, #0]
 8001308:	690b      	ldr	r3, [r1, #16]
 800130a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800130e:	f023 0304 	bic.w	r3, r3, #4
 8001312:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001314:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8001316:	432a      	orrs	r2, r5
 8001318:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800131a:	432a      	orrs	r2, r5
 800131c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800131e:	432a      	orrs	r2, r5
 8001320:	4313      	orrs	r3, r2
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	610b      	str	r3, [r1, #16]
 8001328:	e7d9      	b.n	80012de <HAL_ADC_Init+0x156>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800132a:	6821      	ldr	r1, [r4, #0]
 800132c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800132e:	f023 030f 	bic.w	r3, r3, #15
 8001332:	69e2      	ldr	r2, [r4, #28]
 8001334:	3a01      	subs	r2, #1
 8001336:	4313      	orrs	r3, r2
 8001338:	630b      	str	r3, [r1, #48]	; 0x30
 800133a:	e7d8      	b.n	80012ee <HAL_ADC_Init+0x166>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800133e:	f043 0310 	orr.w	r3, r3, #16
 8001342:	6563      	str	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001344:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001346:	b003      	add	sp, #12
 8001348:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800134a:	2001      	movs	r0, #1
 800134c:	e7fb      	b.n	8001346 <HAL_ADC_Init+0x1be>
 800134e:	bf00      	nop
 8001350:	20000010 	.word	0x20000010
 8001354:	053e2d63 	.word	0x053e2d63
 8001358:	50040000 	.word	0x50040000
 800135c:	50040300 	.word	0x50040300
 8001360:	fff0c007 	.word	0xfff0c007

08001364 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001364:	b4f0      	push	{r4, r5, r6, r7}
 8001366:	b082      	sub	sp, #8
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001368:	2200      	movs	r2, #0
 800136a:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800136c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8001370:	2a01      	cmp	r2, #1
 8001372:	f000 8225 	beq.w	80017c0 <HAL_ADC_ConfigChannel+0x45c>
 8001376:	4603      	mov	r3, r0
 8001378:	2201      	movs	r2, #1
 800137a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800137e:	6806      	ldr	r6, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001380:	68b0      	ldr	r0, [r6, #8]
 8001382:	f010 0f04 	tst.w	r0, #4
 8001386:	d00a      	beq.n	800139e <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800138a:	f042 0220 	orr.w	r2, r2, #32
 800138e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001390:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
}
 8001398:	b002      	add	sp, #8
 800139a:	bcf0      	pop	{r4, r5, r6, r7}
 800139c:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800139e:	684d      	ldr	r5, [r1, #4]
 80013a0:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013a2:	3630      	adds	r6, #48	; 0x30
 80013a4:	0a2a      	lsrs	r2, r5, #8
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 80013ac:	58b0      	ldr	r0, [r6, r2]
 80013ae:	f005 051f 	and.w	r5, r5, #31
 80013b2:	271f      	movs	r7, #31
 80013b4:	40af      	lsls	r7, r5
 80013b6:	ea20 0007 	bic.w	r0, r0, r7
 80013ba:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80013be:	40ac      	lsls	r4, r5
 80013c0:	4320      	orrs	r0, r4
 80013c2:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013c4:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013c6:	68a2      	ldr	r2, [r4, #8]
 80013c8:	f012 0204 	ands.w	r2, r2, #4
 80013cc:	d000      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0x6c>
 80013ce:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013d0:	68a0      	ldr	r0, [r4, #8]
 80013d2:	f010 0008 	ands.w	r0, r0, #8
 80013d6:	d000      	beq.n	80013da <HAL_ADC_ConfigChannel+0x76>
 80013d8:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013da:	bb52      	cbnz	r2, 8001432 <HAL_ADC_ConfigChannel+0xce>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013dc:	bb48      	cbnz	r0, 8001432 <HAL_ADC_ConfigChannel+0xce>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013de:	680e      	ldr	r6, [r1, #0]
 80013e0:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013e2:	3414      	adds	r4, #20
 80013e4:	0e72      	lsrs	r2, r6, #25
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80013ec:	58a0      	ldr	r0, [r4, r2]
 80013ee:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80013f2:	2707      	movs	r7, #7
 80013f4:	40b7      	lsls	r7, r6
 80013f6:	ea20 0007 	bic.w	r0, r0, r7
 80013fa:	40b5      	lsls	r5, r6
 80013fc:	4328      	orrs	r0, r5
 80013fe:	50a0      	str	r0, [r4, r2]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001400:	694c      	ldr	r4, [r1, #20]
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	68c2      	ldr	r2, [r0, #12]
 8001406:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800140a:	0052      	lsls	r2, r2, #1
 800140c:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001410:	690d      	ldr	r5, [r1, #16]
 8001412:	2d04      	cmp	r5, #4
 8001414:	d047      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x142>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001416:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001418:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 800141a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800141e:	4cb2      	ldr	r4, [pc, #712]	; (80016e8 <HAL_ADC_ConfigChannel+0x384>)
 8001420:	403c      	ands	r4, r7
 8001422:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001426:	4332      	orrs	r2, r6
 8001428:	4314      	orrs	r4, r2
 800142a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800142e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001432:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001434:	6882      	ldr	r2, [r0, #8]
 8001436:	f012 0f01 	tst.w	r2, #1
 800143a:	f040 81bb 	bne.w	80017b4 <HAL_ADC_ConfigChannel+0x450>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800143e:	680a      	ldr	r2, [r1, #0]
 8001440:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8001442:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8001446:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800144a:	ea24 0406 	bic.w	r4, r4, r6
 800144e:	f005 0618 	and.w	r6, r5, #24
 8001452:	4da6      	ldr	r5, [pc, #664]	; (80016ec <HAL_ADC_ConfigChannel+0x388>)
 8001454:	40f5      	lsrs	r5, r6
 8001456:	402a      	ands	r2, r5
 8001458:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800145c:	4322      	orrs	r2, r4
 800145e:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001462:	68c8      	ldr	r0, [r1, #12]
 8001464:	4aa2      	ldr	r2, [pc, #648]	; (80016f0 <HAL_ADC_ConfigChannel+0x38c>)
 8001466:	4290      	cmp	r0, r2
 8001468:	f000 8084 	beq.w	8001574 <HAL_ADC_ConfigChannel+0x210>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800146c:	680a      	ldr	r2, [r1, #0]
 800146e:	49a1      	ldr	r1, [pc, #644]	; (80016f4 <HAL_ADC_ConfigChannel+0x390>)
 8001470:	420a      	tst	r2, r1
 8001472:	f000 81a1 	beq.w	80017b8 <HAL_ADC_ConfigChannel+0x454>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001476:	49a0      	ldr	r1, [pc, #640]	; (80016f8 <HAL_ADC_ConfigChannel+0x394>)
 8001478:	6889      	ldr	r1, [r1, #8]
 800147a:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800147e:	489f      	ldr	r0, [pc, #636]	; (80016fc <HAL_ADC_ConfigChannel+0x398>)
 8001480:	6880      	ldr	r0, [r0, #8]
 8001482:	f010 0f01 	tst.w	r0, #1
 8001486:	f040 8141 	bne.w	800170c <HAL_ADC_ConfigChannel+0x3a8>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800148a:	489d      	ldr	r0, [pc, #628]	; (8001700 <HAL_ADC_ConfigChannel+0x39c>)
 800148c:	4282      	cmp	r2, r0
 800148e:	f000 8143 	beq.w	8001718 <HAL_ADC_ConfigChannel+0x3b4>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001492:	489c      	ldr	r0, [pc, #624]	; (8001704 <HAL_ADC_ConfigChannel+0x3a0>)
 8001494:	4282      	cmp	r2, r0
 8001496:	f000 8166 	beq.w	8001766 <HAL_ADC_ConfigChannel+0x402>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800149a:	489b      	ldr	r0, [pc, #620]	; (8001708 <HAL_ADC_ConfigChannel+0x3a4>)
 800149c:	4282      	cmp	r2, r0
 800149e:	f000 8176 	beq.w	800178e <HAL_ADC_ConfigChannel+0x42a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a2:	2000      	movs	r0, #0
 80014a4:	e775      	b.n	8001392 <HAL_ADC_ConfigChannel+0x2e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014a6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80014a8:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014aa:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80014ae:	680a      	ldr	r2, [r1, #0]
 80014b0:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80014b4:	bb7d      	cbnz	r5, 8001516 <HAL_ADC_ConfigChannel+0x1b2>
 80014b6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80014ba:	4294      	cmp	r4, r2
 80014bc:	d033      	beq.n	8001526 <HAL_ADC_ConfigChannel+0x1c2>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014be:	681c      	ldr	r4, [r3, #0]
 80014c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80014c2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80014c4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80014c8:	680a      	ldr	r2, [r1, #0]
 80014ca:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80014ce:	bb7d      	cbnz	r5, 8001530 <HAL_ADC_ConfigChannel+0x1cc>
 80014d0:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80014d4:	4290      	cmp	r0, r2
 80014d6:	d033      	beq.n	8001540 <HAL_ADC_ConfigChannel+0x1dc>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014d8:	681c      	ldr	r4, [r3, #0]
 80014da:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80014dc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80014de:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80014e2:	680a      	ldr	r2, [r1, #0]
 80014e4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80014e8:	bb7d      	cbnz	r5, 800154a <HAL_ADC_ConfigChannel+0x1e6>
 80014ea:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80014ee:	4290      	cmp	r0, r2
 80014f0:	d033      	beq.n	800155a <HAL_ADC_ConfigChannel+0x1f6>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014f2:	681c      	ldr	r4, [r3, #0]
 80014f4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80014f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80014f8:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80014fc:	680a      	ldr	r2, [r1, #0]
 80014fe:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8001502:	bb7d      	cbnz	r5, 8001564 <HAL_ADC_ConfigChannel+0x200>
 8001504:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001508:	4290      	cmp	r0, r2
 800150a:	d192      	bne.n	8001432 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(*preg,
 800150c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800150e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001512:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8001514:	e78d      	b.n	8001432 <HAL_ADC_ConfigChannel+0xce>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800151a:	b112      	cbz	r2, 8001522 <HAL_ADC_ConfigChannel+0x1be>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800151c:	fab2 f282 	clz	r2, r2
 8001520:	e7cb      	b.n	80014ba <HAL_ADC_ConfigChannel+0x156>
    return 32U;
 8001522:	2220      	movs	r2, #32
 8001524:	e7c9      	b.n	80014ba <HAL_ADC_ConfigChannel+0x156>
  MODIFY_REG(*preg,
 8001526:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001528:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800152c:	6602      	str	r2, [r0, #96]	; 0x60
}
 800152e:	e7c6      	b.n	80014be <HAL_ADC_ConfigChannel+0x15a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001530:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001534:	b112      	cbz	r2, 800153c <HAL_ADC_ConfigChannel+0x1d8>
  return __builtin_clz(value);
 8001536:	fab2 f282 	clz	r2, r2
 800153a:	e7cb      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x170>
    return 32U;
 800153c:	2220      	movs	r2, #32
 800153e:	e7c9      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x170>
  MODIFY_REG(*preg,
 8001540:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001542:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001546:	6662      	str	r2, [r4, #100]	; 0x64
}
 8001548:	e7c6      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x174>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800154e:	b112      	cbz	r2, 8001556 <HAL_ADC_ConfigChannel+0x1f2>
  return __builtin_clz(value);
 8001550:	fab2 f282 	clz	r2, r2
 8001554:	e7cb      	b.n	80014ee <HAL_ADC_ConfigChannel+0x18a>
    return 32U;
 8001556:	2220      	movs	r2, #32
 8001558:	e7c9      	b.n	80014ee <HAL_ADC_ConfigChannel+0x18a>
  MODIFY_REG(*preg,
 800155a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800155c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001560:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8001562:	e7c6      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x18e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001568:	b112      	cbz	r2, 8001570 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800156a:	fab2 f282 	clz	r2, r2
 800156e:	e7cb      	b.n	8001508 <HAL_ADC_ConfigChannel+0x1a4>
    return 32U;
 8001570:	2220      	movs	r2, #32
 8001572:	e7c9      	b.n	8001508 <HAL_ADC_ConfigChannel+0x1a4>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001574:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001576:	680a      	ldr	r2, [r1, #0]
 8001578:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800157c:	2e00      	cmp	r6, #0
 800157e:	d135      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x288>
 8001580:	0e90      	lsrs	r0, r2, #26
 8001582:	3001      	adds	r0, #1
 8001584:	f000 001f 	and.w	r0, r0, #31
 8001588:	2809      	cmp	r0, #9
 800158a:	bf8c      	ite	hi
 800158c:	2000      	movhi	r0, #0
 800158e:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001590:	2800      	cmp	r0, #0
 8001592:	d062      	beq.n	800165a <HAL_ADC_ConfigChannel+0x2f6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001594:	2e00      	cmp	r6, #0
 8001596:	d138      	bne.n	800160a <HAL_ADC_ConfigChannel+0x2a6>
 8001598:	0e94      	lsrs	r4, r2, #26
 800159a:	3401      	adds	r4, #1
 800159c:	06a4      	lsls	r4, r4, #26
 800159e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80015a2:	2e00      	cmp	r6, #0
 80015a4:	d13d      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x2be>
 80015a6:	0e90      	lsrs	r0, r2, #26
 80015a8:	3001      	adds	r0, #1
 80015aa:	f000 071f 	and.w	r7, r0, #31
 80015ae:	2001      	movs	r0, #1
 80015b0:	40b8      	lsls	r0, r7
 80015b2:	4304      	orrs	r4, r0
 80015b4:	2e00      	cmp	r6, #0
 80015b6:	d142      	bne.n	800163e <HAL_ADC_ConfigChannel+0x2da>
 80015b8:	0e92      	lsrs	r2, r2, #26
 80015ba:	3201      	adds	r2, #1
 80015bc:	f002 021f 	and.w	r2, r2, #31
 80015c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80015c4:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015c6:	4322      	orrs	r2, r4
 80015c8:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015ca:	3514      	adds	r5, #20
 80015cc:	0e50      	lsrs	r0, r2, #25
 80015ce:	0080      	lsls	r0, r0, #2
 80015d0:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 80015d4:	582e      	ldr	r6, [r5, r0]
 80015d6:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80015da:	2707      	movs	r7, #7
 80015dc:	4097      	lsls	r7, r2
 80015de:	ea26 0607 	bic.w	r6, r6, r7
 80015e2:	fa04 f202 	lsl.w	r2, r4, r2
 80015e6:	4332      	orrs	r2, r6
 80015e8:	502a      	str	r2, [r5, r0]
}
 80015ea:	e73f      	b.n	800146c <HAL_ADC_ConfigChannel+0x108>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80015f0:	b148      	cbz	r0, 8001606 <HAL_ADC_ConfigChannel+0x2a2>
  return __builtin_clz(value);
 80015f2:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80015f6:	3001      	adds	r0, #1
 80015f8:	f000 001f 	and.w	r0, r0, #31
 80015fc:	2809      	cmp	r0, #9
 80015fe:	bf8c      	ite	hi
 8001600:	2000      	movhi	r0, #0
 8001602:	2001      	movls	r0, #1
 8001604:	e7c4      	b.n	8001590 <HAL_ADC_ConfigChannel+0x22c>
    return 32U;
 8001606:	2020      	movs	r0, #32
 8001608:	e7f5      	b.n	80015f6 <HAL_ADC_ConfigChannel+0x292>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 800160e:	b134      	cbz	r4, 800161e <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8001610:	fab4 f484 	clz	r4, r4
 8001614:	3401      	adds	r4, #1
 8001616:	06a4      	lsls	r4, r4, #26
 8001618:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800161c:	e7c1      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 800161e:	2420      	movs	r4, #32
 8001620:	e7f8      	b.n	8001614 <HAL_ADC_ConfigChannel+0x2b0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001622:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001626:	b140      	cbz	r0, 800163a <HAL_ADC_ConfigChannel+0x2d6>
  return __builtin_clz(value);
 8001628:	fab0 f080 	clz	r0, r0
 800162c:	3001      	adds	r0, #1
 800162e:	f000 001f 	and.w	r0, r0, #31
 8001632:	2701      	movs	r7, #1
 8001634:	fa07 f000 	lsl.w	r0, r7, r0
 8001638:	e7bb      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x24e>
    return 32U;
 800163a:	2020      	movs	r0, #32
 800163c:	e7f6      	b.n	800162c <HAL_ADC_ConfigChannel+0x2c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001642:	b142      	cbz	r2, 8001656 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001644:	fab2 f282 	clz	r2, r2
 8001648:	3201      	adds	r2, #1
 800164a:	f002 021f 	and.w	r2, r2, #31
 800164e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001652:	0512      	lsls	r2, r2, #20
 8001654:	e7b7      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x262>
    return 32U;
 8001656:	2220      	movs	r2, #32
 8001658:	e7f6      	b.n	8001648 <HAL_ADC_ConfigChannel+0x2e4>
 800165a:	b9ce      	cbnz	r6, 8001690 <HAL_ADC_ConfigChannel+0x32c>
 800165c:	0e94      	lsrs	r4, r2, #26
 800165e:	3401      	adds	r4, #1
 8001660:	06a4      	lsls	r4, r4, #26
 8001662:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001666:	b9fe      	cbnz	r6, 80016a8 <HAL_ADC_ConfigChannel+0x344>
 8001668:	0e90      	lsrs	r0, r2, #26
 800166a:	3001      	adds	r0, #1
 800166c:	f000 071f 	and.w	r7, r0, #31
 8001670:	2001      	movs	r0, #1
 8001672:	40b8      	lsls	r0, r7
 8001674:	4304      	orrs	r4, r0
 8001676:	bb2e      	cbnz	r6, 80016c4 <HAL_ADC_ConfigChannel+0x360>
 8001678:	0e90      	lsrs	r0, r2, #26
 800167a:	3001      	adds	r0, #1
 800167c:	f000 001f 	and.w	r0, r0, #31
 8001680:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001684:	3a1e      	subs	r2, #30
 8001686:	0512      	lsls	r2, r2, #20
 8001688:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800168c:	4322      	orrs	r2, r4
 800168e:	e79b      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x264>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8001694:	b134      	cbz	r4, 80016a4 <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 8001696:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800169a:	3401      	adds	r4, #1
 800169c:	06a4      	lsls	r4, r4, #26
 800169e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80016a2:	e7e0      	b.n	8001666 <HAL_ADC_ConfigChannel+0x302>
    return 32U;
 80016a4:	2420      	movs	r4, #32
 80016a6:	e7f8      	b.n	800169a <HAL_ADC_ConfigChannel+0x336>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80016ac:	b140      	cbz	r0, 80016c0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80016ae:	fab0 f080 	clz	r0, r0
 80016b2:	3001      	adds	r0, #1
 80016b4:	f000 001f 	and.w	r0, r0, #31
 80016b8:	2701      	movs	r7, #1
 80016ba:	fa07 f000 	lsl.w	r0, r7, r0
 80016be:	e7d9      	b.n	8001674 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80016c0:	2020      	movs	r0, #32
 80016c2:	e7f6      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80016c8:	b15a      	cbz	r2, 80016e2 <HAL_ADC_ConfigChannel+0x37e>
  return __builtin_clz(value);
 80016ca:	fab2 f082 	clz	r0, r2
 80016ce:	3001      	adds	r0, #1
 80016d0:	f000 001f 	and.w	r0, r0, #31
 80016d4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80016d8:	3a1e      	subs	r2, #30
 80016da:	0512      	lsls	r2, r2, #20
 80016dc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80016e0:	e7d4      	b.n	800168c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80016e2:	2020      	movs	r0, #32
 80016e4:	e7f3      	b.n	80016ce <HAL_ADC_ConfigChannel+0x36a>
 80016e6:	bf00      	nop
 80016e8:	03fff000 	.word	0x03fff000
 80016ec:	0007ffff 	.word	0x0007ffff
 80016f0:	407f0000 	.word	0x407f0000
 80016f4:	80080000 	.word	0x80080000
 80016f8:	50040300 	.word	0x50040300
 80016fc:	50040000 	.word	0x50040000
 8001700:	c7520000 	.word	0xc7520000
 8001704:	cb840000 	.word	0xcb840000
 8001708:	80000001 	.word	0x80000001
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800170e:	f042 0220 	orr.w	r2, r2, #32
 8001712:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8001714:	2001      	movs	r0, #1
 8001716:	e63c      	b.n	8001392 <HAL_ADC_ConfigChannel+0x2e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001718:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 800171c:	f47f aeb9 	bne.w	8001492 <HAL_ADC_ConfigChannel+0x12e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001720:	6819      	ldr	r1, [r3, #0]
 8001722:	4a28      	ldr	r2, [pc, #160]	; (80017c4 <HAL_ADC_ConfigChannel+0x460>)
 8001724:	4291      	cmp	r1, r2
 8001726:	d001      	beq.n	800172c <HAL_ADC_ConfigChannel+0x3c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001728:	2000      	movs	r0, #0
 800172a:	e632      	b.n	8001392 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800172c:	f444 0200 	orr.w	r2, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001730:	4825      	ldr	r0, [pc, #148]	; (80017c8 <HAL_ADC_ConfigChannel+0x464>)
 8001732:	6881      	ldr	r1, [r0, #8]
 8001734:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001738:	430a      	orrs	r2, r1
 800173a:	6082      	str	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800173c:	4a23      	ldr	r2, [pc, #140]	; (80017cc <HAL_ADC_ConfigChannel+0x468>)
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	0992      	lsrs	r2, r2, #6
 8001742:	4923      	ldr	r1, [pc, #140]	; (80017d0 <HAL_ADC_ConfigChannel+0x46c>)
 8001744:	fba1 1202 	umull	r1, r2, r1, r2
 8001748:	0992      	lsrs	r2, r2, #6
 800174a:	3201      	adds	r2, #1
 800174c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001750:	0092      	lsls	r2, r2, #2
 8001752:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8001754:	e002      	b.n	800175c <HAL_ADC_ConfigChannel+0x3f8>
                wait_loop_index--;
 8001756:	9a01      	ldr	r2, [sp, #4]
 8001758:	3a01      	subs	r2, #1
 800175a:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 800175c:	9a01      	ldr	r2, [sp, #4]
 800175e:	2a00      	cmp	r2, #0
 8001760:	d1f9      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x3f2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001762:	2000      	movs	r0, #0
 8001764:	e615      	b.n	8001392 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001766:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 800176a:	f47f ae96 	bne.w	800149a <HAL_ADC_ConfigChannel+0x136>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <HAL_ADC_ConfigChannel+0x460>)
 8001772:	4291      	cmp	r1, r2
 8001774:	d001      	beq.n	800177a <HAL_ADC_ConfigChannel+0x416>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001776:	2000      	movs	r0, #0
 8001778:	e60b      	b.n	8001392 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800177a:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 800177e:	4812      	ldr	r0, [pc, #72]	; (80017c8 <HAL_ADC_ConfigChannel+0x464>)
 8001780:	6881      	ldr	r1, [r0, #8]
 8001782:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001786:	430a      	orrs	r2, r1
 8001788:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178a:	2000      	movs	r0, #0
}
 800178c:	e601      	b.n	8001392 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800178e:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8001792:	d113      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x458>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <HAL_ADC_ConfigChannel+0x460>)
 8001798:	4291      	cmp	r1, r2
 800179a:	d001      	beq.n	80017a0 <HAL_ADC_ConfigChannel+0x43c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179c:	2000      	movs	r0, #0
 800179e:	e5f8      	b.n	8001392 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80017a0:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <HAL_ADC_ConfigChannel+0x464>)
 80017a6:	6881      	ldr	r1, [r0, #8]
 80017a8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80017ac:	430a      	orrs	r2, r1
 80017ae:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b0:	2000      	movs	r0, #0
}
 80017b2:	e5ee      	b.n	8001392 <HAL_ADC_ConfigChannel+0x2e>
 80017b4:	2000      	movs	r0, #0
 80017b6:	e5ec      	b.n	8001392 <HAL_ADC_ConfigChannel+0x2e>
 80017b8:	2000      	movs	r0, #0
 80017ba:	e5ea      	b.n	8001392 <HAL_ADC_ConfigChannel+0x2e>
 80017bc:	2000      	movs	r0, #0
 80017be:	e5e8      	b.n	8001392 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 80017c0:	2002      	movs	r0, #2
 80017c2:	e5e9      	b.n	8001398 <HAL_ADC_ConfigChannel+0x34>
 80017c4:	50040000 	.word	0x50040000
 80017c8:	50040300 	.word	0x50040300
 80017cc:	20000010 	.word	0x20000010
 80017d0:	053e2d63 	.word	0x053e2d63

080017d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017dc:	041b      	lsls	r3, r3, #16
 80017de:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e0:	0200      	lsls	r0, r0, #8
 80017e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80017e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80017f0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_NVIC_SetPriority+0x60>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001802:	f1c3 0407 	rsb	r4, r3, #7
 8001806:	2c04      	cmp	r4, #4
 8001808:	bf28      	it	cs
 800180a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180c:	1d1d      	adds	r5, r3, #4
 800180e:	2d06      	cmp	r5, #6
 8001810:	d918      	bls.n	8001844 <HAL_NVIC_SetPriority+0x4c>
 8001812:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001818:	fa05 f404 	lsl.w	r4, r5, r4
 800181c:	ea21 0104 	bic.w	r1, r1, r4
 8001820:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001822:	fa05 f303 	lsl.w	r3, r5, r3
 8001826:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800182c:	2800      	cmp	r0, #0
 800182e:	db0b      	blt.n	8001848 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	0109      	lsls	r1, r1, #4
 8001832:	b2c9      	uxtb	r1, r1
 8001834:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001838:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800183c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001840:	bc30      	pop	{r4, r5}
 8001842:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001844:	2300      	movs	r3, #0
 8001846:	e7e5      	b.n	8001814 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	f000 000f 	and.w	r0, r0, #15
 800184c:	0109      	lsls	r1, r1, #4
 800184e:	b2c9      	uxtb	r1, r1
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <HAL_NVIC_SetPriority+0x64>)
 8001852:	5419      	strb	r1, [r3, r0]
 8001854:	e7f4      	b.n	8001840 <HAL_NVIC_SetPriority+0x48>
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00
 800185c:	e000ed14 	.word	0xe000ed14

08001860 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001860:	2800      	cmp	r0, #0
 8001862:	db07      	blt.n	8001874 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001864:	f000 021f 	and.w	r2, r0, #31
 8001868:	0940      	lsrs	r0, r0, #5
 800186a:	2301      	movs	r3, #1
 800186c:	4093      	lsls	r3, r2
 800186e:	4a02      	ldr	r2, [pc, #8]	; (8001878 <HAL_NVIC_EnableIRQ+0x18>)
 8001870:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 800187e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001880:	e05f      	b.n	8001942 <HAL_GPIO_Init+0xc6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001882:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001884:	005f      	lsls	r7, r3, #1
 8001886:	2503      	movs	r5, #3
 8001888:	40bd      	lsls	r5, r7
 800188a:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800188e:	68cd      	ldr	r5, [r1, #12]
 8001890:	40bd      	lsls	r5, r7
 8001892:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001894:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001896:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001898:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189c:	684d      	ldr	r5, [r1, #4]
 800189e:	f3c5 1400 	ubfx	r4, r5, #4, #1
 80018a2:	409c      	lsls	r4, r3
 80018a4:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 80018a6:	6044      	str	r4, [r0, #4]
 80018a8:	e059      	b.n	800195e <HAL_GPIO_Init+0xe2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018aa:	08dd      	lsrs	r5, r3, #3
 80018ac:	3508      	adds	r5, #8
 80018ae:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018b2:	f003 0407 	and.w	r4, r3, #7
 80018b6:	00a6      	lsls	r6, r4, #2
 80018b8:	240f      	movs	r4, #15
 80018ba:	40b4      	lsls	r4, r6
 80018bc:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018c0:	690c      	ldr	r4, [r1, #16]
 80018c2:	40b4      	lsls	r4, r6
 80018c4:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 80018c6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80018ca:	e05c      	b.n	8001986 <HAL_GPIO_Init+0x10a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018cc:	2404      	movs	r4, #4
 80018ce:	e000      	b.n	80018d2 <HAL_GPIO_Init+0x56>
 80018d0:	2400      	movs	r4, #0
 80018d2:	40b4      	lsls	r4, r6
 80018d4:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018d6:	3502      	adds	r5, #2
 80018d8:	4e47      	ldr	r6, [pc, #284]	; (80019f8 <HAL_GPIO_Init+0x17c>)
 80018da:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018de:	4c47      	ldr	r4, [pc, #284]	; (80019fc <HAL_GPIO_Init+0x180>)
 80018e0:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80018e2:	43d4      	mvns	r4, r2
 80018e4:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018e8:	684f      	ldr	r7, [r1, #4]
 80018ea:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80018ee:	d001      	beq.n	80018f4 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 80018f0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80018f4:	4d41      	ldr	r5, [pc, #260]	; (80019fc <HAL_GPIO_Init+0x180>)
 80018f6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80018f8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80018fa:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018fe:	684f      	ldr	r7, [r1, #4]
 8001900:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8001904:	d001      	beq.n	800190a <HAL_GPIO_Init+0x8e>
        {
          temp |= iocurrent;
 8001906:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800190a:	4d3c      	ldr	r5, [pc, #240]	; (80019fc <HAL_GPIO_Init+0x180>)
 800190c:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800190e:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 8001912:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001916:	684f      	ldr	r7, [r1, #4]
 8001918:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800191c:	d001      	beq.n	8001922 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800191e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8001922:	4d36      	ldr	r5, [pc, #216]	; (80019fc <HAL_GPIO_Init+0x180>)
 8001924:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80

        temp = EXTI->EMR1;
 8001928:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 800192c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800192e:	684e      	ldr	r6, [r1, #4]
 8001930:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001934:	d001      	beq.n	800193a <HAL_GPIO_Init+0xbe>
        {
          temp |= iocurrent;
 8001936:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->EMR1 = temp;
 800193a:	4a30      	ldr	r2, [pc, #192]	; (80019fc <HAL_GPIO_Init+0x180>)
 800193c:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
      }
    }

    position++;
 8001940:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001942:	680a      	ldr	r2, [r1, #0]
 8001944:	fa32 f403 	lsrs.w	r4, r2, r3
 8001948:	d054      	beq.n	80019f4 <HAL_GPIO_Init+0x178>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800194a:	2401      	movs	r4, #1
 800194c:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 800194e:	4022      	ands	r2, r4
 8001950:	d0f6      	beq.n	8001940 <HAL_GPIO_Init+0xc4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001952:	684d      	ldr	r5, [r1, #4]
 8001954:	f005 0503 	and.w	r5, r5, #3
 8001958:	3d01      	subs	r5, #1
 800195a:	2d01      	cmp	r5, #1
 800195c:	d991      	bls.n	8001882 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800195e:	684c      	ldr	r4, [r1, #4]
 8001960:	f004 0403 	and.w	r4, r4, #3
 8001964:	2c03      	cmp	r4, #3
 8001966:	d009      	beq.n	800197c <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 8001968:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800196a:	005e      	lsls	r6, r3, #1
 800196c:	2403      	movs	r4, #3
 800196e:	40b4      	lsls	r4, r6
 8001970:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001974:	688c      	ldr	r4, [r1, #8]
 8001976:	40b4      	lsls	r4, r6
 8001978:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800197a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197c:	684c      	ldr	r4, [r1, #4]
 800197e:	f004 0403 	and.w	r4, r4, #3
 8001982:	2c02      	cmp	r4, #2
 8001984:	d091      	beq.n	80018aa <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8001986:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001988:	005e      	lsls	r6, r3, #1
 800198a:	2403      	movs	r4, #3
 800198c:	40b4      	lsls	r4, r6
 800198e:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001992:	684c      	ldr	r4, [r1, #4]
 8001994:	f004 0403 	and.w	r4, r4, #3
 8001998:	40b4      	lsls	r4, r6
 800199a:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800199c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800199e:	684c      	ldr	r4, [r1, #4]
 80019a0:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80019a4:	d0cc      	beq.n	8001940 <HAL_GPIO_Init+0xc4>
        temp = SYSCFG->EXTICR[position >> 2u];
 80019a6:	089d      	lsrs	r5, r3, #2
 80019a8:	1cae      	adds	r6, r5, #2
 80019aa:	4c13      	ldr	r4, [pc, #76]	; (80019f8 <HAL_GPIO_Init+0x17c>)
 80019ac:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019b0:	f003 0403 	and.w	r4, r3, #3
 80019b4:	00a6      	lsls	r6, r4, #2
 80019b6:	240f      	movs	r4, #15
 80019b8:	40b4      	lsls	r4, r6
 80019ba:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019be:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80019c2:	d085      	beq.n	80018d0 <HAL_GPIO_Init+0x54>
 80019c4:	4c0e      	ldr	r4, [pc, #56]	; (8001a00 <HAL_GPIO_Init+0x184>)
 80019c6:	42a0      	cmp	r0, r4
 80019c8:	d00e      	beq.n	80019e8 <HAL_GPIO_Init+0x16c>
 80019ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019ce:	42a0      	cmp	r0, r4
 80019d0:	d00c      	beq.n	80019ec <HAL_GPIO_Init+0x170>
 80019d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019d6:	42a0      	cmp	r0, r4
 80019d8:	d00a      	beq.n	80019f0 <HAL_GPIO_Init+0x174>
 80019da:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019de:	42a0      	cmp	r0, r4
 80019e0:	f43f af74 	beq.w	80018cc <HAL_GPIO_Init+0x50>
 80019e4:	2407      	movs	r4, #7
 80019e6:	e774      	b.n	80018d2 <HAL_GPIO_Init+0x56>
 80019e8:	2401      	movs	r4, #1
 80019ea:	e772      	b.n	80018d2 <HAL_GPIO_Init+0x56>
 80019ec:	2402      	movs	r4, #2
 80019ee:	e770      	b.n	80018d2 <HAL_GPIO_Init+0x56>
 80019f0:	2403      	movs	r4, #3
 80019f2:	e76e      	b.n	80018d2 <HAL_GPIO_Init+0x56>
  }
}
 80019f4:	bcf0      	pop	{r4, r5, r6, r7}
 80019f6:	4770      	bx	lr
 80019f8:	40010000 	.word	0x40010000
 80019fc:	58000800 	.word	0x58000800
 8001a00:	48000400 	.word	0x48000400

08001a04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a04:	b10a      	cbz	r2, 8001a0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a06:	6181      	str	r1, [r0, #24]
 8001a08:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a0a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001a0c:	4770      	bx	lr

08001a0e <HAL_HSEM_FreeCallback>:
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_HSEM_IRQHandler>:
{
 8001a10:	b508      	push	{r3, lr}
  statusreg = HSEM_COMMON->MISR;
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_HSEM_IRQHandler+0x18>)
 8001a14:	68d8      	ldr	r0, [r3, #12]
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	ea22 0200 	bic.w	r2, r2, r0
 8001a1c:	601a      	str	r2, [r3, #0]
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001a1e:	6058      	str	r0, [r3, #4]
  HAL_HSEM_FreeCallback(statusreg);
 8001a20:	f7ff fff5 	bl	8001a0e <HAL_HSEM_FreeCallback>
}
 8001a24:	bd08      	pop	{r3, pc}
 8001a26:	bf00      	nop
 8001a28:	58001500 	.word	0x58001500

08001a2c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a2c:	6803      	ldr	r3, [r0, #0]
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	f012 0f02 	tst.w	r2, #2
 8001a34:	d001      	beq.n	8001a3a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a36:	2200      	movs	r2, #0
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a3a:	6803      	ldr	r3, [r0, #0]
 8001a3c:	699a      	ldr	r2, [r3, #24]
 8001a3e:	f012 0f01 	tst.w	r2, #1
 8001a42:	d103      	bne.n	8001a4c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a44:	699a      	ldr	r2, [r3, #24]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	619a      	str	r2, [r3, #24]
  }
}
 8001a4c:	4770      	bx	lr

08001a4e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a4e:	b410      	push	{r4}
 8001a50:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a52:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001a56:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a5a:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a5c:	4321      	orrs	r1, r4
 8001a5e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a62:	6802      	ldr	r2, [r0, #0]
 8001a64:	6853      	ldr	r3, [r2, #4]
 8001a66:	0d64      	lsrs	r4, r4, #21
 8001a68:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001a6c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001a70:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001a74:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001a78:	f044 0403 	orr.w	r4, r4, #3
 8001a7c:	ea23 0404 	bic.w	r4, r3, r4
 8001a80:	4321      	orrs	r1, r4
 8001a82:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <I2C_IsErrorOccurred>:
{
 8001a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a8e:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a90:	6803      	ldr	r3, [r0, #0]
 8001a92:	699d      	ldr	r5, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a94:	f015 0510 	ands.w	r5, r5, #16
 8001a98:	d064      	beq.n	8001b64 <I2C_IsErrorOccurred+0xda>
 8001a9a:	460e      	mov	r6, r1
 8001a9c:	4690      	mov	r8, r2
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001aa4:	d103      	bne.n	8001aae <I2C_IsErrorOccurred+0x24>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001aac:	605a      	str	r2, [r3, #4]
          status = HAL_ERROR;
 8001aae:	2500      	movs	r5, #0
 8001ab0:	462f      	mov	r7, r5
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	6998      	ldr	r0, [r3, #24]
 8001ab6:	f010 0f20 	tst.w	r0, #32
 8001aba:	d10f      	bne.n	8001adc <I2C_IsErrorOccurred+0x52>
 8001abc:	b977      	cbnz	r7, 8001adc <I2C_IsErrorOccurred+0x52>
      if (Timeout != HAL_MAX_DELAY)
 8001abe:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8001ac2:	d0f6      	beq.n	8001ab2 <I2C_IsErrorOccurred+0x28>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac4:	f7ff fb54 	bl	8001170 <HAL_GetTick>
 8001ac8:	eba0 0008 	sub.w	r0, r0, r8
 8001acc:	42b0      	cmp	r0, r6
 8001ace:	d801      	bhi.n	8001ad4 <I2C_IsErrorOccurred+0x4a>
 8001ad0:	2e00      	cmp	r6, #0
 8001ad2:	d1ee      	bne.n	8001ab2 <I2C_IsErrorOccurred+0x28>
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ad4:	f045 0520 	orr.w	r5, r5, #32
          status = HAL_ERROR;
 8001ad8:	2701      	movs	r7, #1
 8001ada:	e7ea      	b.n	8001ab2 <I2C_IsErrorOccurred+0x28>
    if (status == HAL_OK)
 8001adc:	b90f      	cbnz	r7, 8001ae2 <I2C_IsErrorOccurred+0x58>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ade:	2220      	movs	r2, #32
 8001ae0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	2210      	movs	r2, #16
 8001ae6:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8001ae8:	f045 0504 	orr.w	r5, r5, #4
    status = HAL_ERROR;
 8001aec:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 8001aee:	6822      	ldr	r2, [r4, #0]
 8001af0:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001af2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001af6:	d005      	beq.n	8001b04 <I2C_IsErrorOccurred+0x7a>
    error_code |= HAL_I2C_ERROR_BERR;
 8001af8:	f045 0501 	orr.w	r5, r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001afc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b00:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001b02:	2601      	movs	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b04:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001b08:	d006      	beq.n	8001b18 <I2C_IsErrorOccurred+0x8e>
    error_code |= HAL_I2C_ERROR_OVR;
 8001b0a:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b0e:	6822      	ldr	r2, [r4, #0]
 8001b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b14:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001b16:	2601      	movs	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b18:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001b1c:	d024      	beq.n	8001b68 <I2C_IsErrorOccurred+0xde>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b1e:	f045 0502 	orr.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b28:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8001b2a:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7ff ff7d 	bl	8001a2c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001b32:	6822      	ldr	r2, [r4, #0]
 8001b34:	6853      	ldr	r3, [r2, #4]
 8001b36:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001b3a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001b3e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8001b48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b4a:	431d      	orrs	r5, r3
 8001b4c:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	2320      	movs	r3, #32
 8001b50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001b5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001b5e:	4630      	mov	r0, r6
 8001b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001b64:	2600      	movs	r6, #0
 8001b66:	e7c2      	b.n	8001aee <I2C_IsErrorOccurred+0x64>
  if (status != HAL_OK)
 8001b68:	2e00      	cmp	r6, #0
 8001b6a:	d0f8      	beq.n	8001b5e <I2C_IsErrorOccurred+0xd4>
 8001b6c:	e7de      	b.n	8001b2c <I2C_IsErrorOccurred+0xa2>

08001b6e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001b6e:	b570      	push	{r4, r5, r6, lr}
 8001b70:	4604      	mov	r4, r0
 8001b72:	460d      	mov	r5, r1
 8001b74:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f013 0f02 	tst.w	r3, #2
 8001b7e:	d11d      	bne.n	8001bbc <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b80:	4632      	mov	r2, r6
 8001b82:	4629      	mov	r1, r5
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7ff ff80 	bl	8001a8a <I2C_IsErrorOccurred>
 8001b8a:	b9c8      	cbnz	r0, 8001bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8001b8c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001b90:	d0f1      	beq.n	8001b76 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b92:	f7ff faed 	bl	8001170 <HAL_GetTick>
 8001b96:	1b80      	subs	r0, r0, r6
 8001b98:	42a8      	cmp	r0, r5
 8001b9a:	d801      	bhi.n	8001ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001b9c:	2d00      	cmp	r5, #0
 8001b9e:	d1ea      	bne.n	8001b76 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ba0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ba2:	f043 0320 	orr.w	r3, r3, #32
 8001ba6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001bb4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001bb8:	2001      	movs	r0, #1
 8001bba:	e000      	b.n	8001bbe <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8001bbc:	2000      	movs	r0, #0
}
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	e7fc      	b.n	8001bbe <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08001bc4 <I2C_WaitOnFlagUntilTimeout>:
{
 8001bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bc8:	4606      	mov	r6, r0
 8001bca:	4688      	mov	r8, r1
 8001bcc:	4617      	mov	r7, r2
 8001bce:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bd0:	6834      	ldr	r4, [r6, #0]
 8001bd2:	69a4      	ldr	r4, [r4, #24]
 8001bd4:	ea38 0304 	bics.w	r3, r8, r4
 8001bd8:	bf0c      	ite	eq
 8001bda:	2401      	moveq	r4, #1
 8001bdc:	2400      	movne	r4, #0
 8001bde:	42bc      	cmp	r4, r7
 8001be0:	d118      	bne.n	8001c14 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001be2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001be6:	d0f3      	beq.n	8001bd0 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be8:	f7ff fac2 	bl	8001170 <HAL_GetTick>
 8001bec:	9b06      	ldr	r3, [sp, #24]
 8001bee:	1ac0      	subs	r0, r0, r3
 8001bf0:	42a8      	cmp	r0, r5
 8001bf2:	d801      	bhi.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x34>
 8001bf4:	2d00      	cmp	r5, #0
 8001bf6:	d1eb      	bne.n	8001bd0 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bf8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001bfa:	f043 0320 	orr.w	r3, r3, #32
 8001bfe:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c00:	2320      	movs	r3, #32
 8001c02:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001c0c:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8001c10:	2001      	movs	r0, #1
 8001c12:	e000      	b.n	8001c16 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8001c14:	2000      	movs	r0, #0
}
 8001c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001c1c <I2C_RequestMemoryWrite>:
{
 8001c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	4604      	mov	r4, r0
 8001c24:	4690      	mov	r8, r2
 8001c26:	461d      	mov	r5, r3
 8001c28:	9e08      	ldr	r6, [sp, #32]
 8001c2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <I2C_RequestMemoryWrite+0x78>)
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c34:	b2ea      	uxtb	r2, r5
 8001c36:	f7ff ff0a 	bl	8001a4e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3a:	463a      	mov	r2, r7
 8001c3c:	4631      	mov	r1, r6
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff ff95 	bl	8001b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001c44:	b9f8      	cbnz	r0, 8001c86 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c46:	2d01      	cmp	r5, #1
 8001c48:	d10e      	bne.n	8001c68 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	fa5f f288 	uxtb.w	r2, r8
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c52:	9700      	str	r7, [sp, #0]
 8001c54:	4633      	mov	r3, r6
 8001c56:	2200      	movs	r2, #0
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7ff ffb2 	bl	8001bc4 <I2C_WaitOnFlagUntilTimeout>
 8001c60:	b9a8      	cbnz	r0, 8001c8e <I2C_RequestMemoryWrite+0x72>
}
 8001c62:	b002      	add	sp, #8
 8001c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c70:	463a      	mov	r2, r7
 8001c72:	4631      	mov	r1, r6
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff ff7a 	bl	8001b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001c7a:	b930      	cbnz	r0, 8001c8a <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	fa5f f288 	uxtb.w	r2, r8
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
 8001c84:	e7e5      	b.n	8001c52 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8001c86:	2001      	movs	r0, #1
 8001c88:	e7eb      	b.n	8001c62 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	e7e9      	b.n	8001c62 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8001c8e:	2001      	movs	r0, #1
 8001c90:	e7e7      	b.n	8001c62 <I2C_RequestMemoryWrite+0x46>
 8001c92:	bf00      	nop
 8001c94:	80002000 	.word	0x80002000

08001c98 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	4605      	mov	r5, r0
 8001c9c:	460c      	mov	r4, r1
 8001c9e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ca0:	682b      	ldr	r3, [r5, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f013 0f20 	tst.w	r3, #32
 8001ca8:	d11a      	bne.n	8001ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001caa:	4632      	mov	r2, r6
 8001cac:	4621      	mov	r1, r4
 8001cae:	4628      	mov	r0, r5
 8001cb0:	f7ff feeb 	bl	8001a8a <I2C_IsErrorOccurred>
 8001cb4:	b9b0      	cbnz	r0, 8001ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb6:	f7ff fa5b 	bl	8001170 <HAL_GetTick>
 8001cba:	1b80      	subs	r0, r0, r6
 8001cbc:	42a0      	cmp	r0, r4
 8001cbe:	d801      	bhi.n	8001cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8001cc0:	2c00      	cmp	r4, #0
 8001cc2:	d1ed      	bne.n	8001ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cc4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001cc6:	f043 0320 	orr.w	r3, r3, #32
 8001cca:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001cd8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8001cdc:	2001      	movs	r0, #1
}
 8001cde:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	e7fc      	b.n	8001cde <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	e7fa      	b.n	8001cde <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08001ce8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001ce8:	2800      	cmp	r0, #0
 8001cea:	d059      	beq.n	8001da0 <HAL_I2C_Init+0xb8>
{
 8001cec:	b510      	push	{r4, lr}
 8001cee:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cf0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d043      	beq.n	8001d80 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf8:	2324      	movs	r3, #36	; 0x24
 8001cfa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001cfe:	6822      	ldr	r2, [r4, #0]
 8001d00:	6813      	ldr	r3, [r2, #0]
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d08:	6863      	ldr	r3, [r4, #4]
 8001d0a:	6822      	ldr	r2, [r4, #0]
 8001d0c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001d10:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d12:	6822      	ldr	r2, [r4, #0]
 8001d14:	6893      	ldr	r3, [r2, #8]
 8001d16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d1a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d1c:	68e3      	ldr	r3, [r4, #12]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d033      	beq.n	8001d8a <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d22:	68a3      	ldr	r3, [r4, #8]
 8001d24:	6822      	ldr	r2, [r4, #0]
 8001d26:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001d2a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d2c:	68e3      	ldr	r3, [r4, #12]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d031      	beq.n	8001d96 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d32:	6822      	ldr	r2, [r4, #0]
 8001d34:	6853      	ldr	r3, [r2, #4]
 8001d36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d3e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d40:	6822      	ldr	r2, [r4, #0]
 8001d42:	68d3      	ldr	r3, [r2, #12]
 8001d44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d48:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d4a:	6923      	ldr	r3, [r4, #16]
 8001d4c:	6962      	ldr	r2, [r4, #20]
 8001d4e:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d50:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d52:	6822      	ldr	r2, [r4, #0]
 8001d54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d58:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d5a:	69e3      	ldr	r3, [r4, #28]
 8001d5c:	6a21      	ldr	r1, [r4, #32]
 8001d5e:	6822      	ldr	r2, [r4, #0]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001d64:	6822      	ldr	r2, [r4, #0]
 8001d66:	6813      	ldr	r3, [r2, #0]
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6e:	2000      	movs	r0, #0
 8001d70:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	2320      	movs	r3, #32
 8001d74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d78:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001d7e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001d80:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001d84:	f7fe fbde 	bl	8000544 <HAL_I2C_MspInit>
 8001d88:	e7b6      	b.n	8001cf8 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d8a:	68a3      	ldr	r3, [r4, #8]
 8001d8c:	6822      	ldr	r2, [r4, #0]
 8001d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d92:	6093      	str	r3, [r2, #8]
 8001d94:	e7ca      	b.n	8001d2c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	e7c8      	b.n	8001d32 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001da0:	2001      	movs	r0, #1
}
 8001da2:	4770      	bx	lr

08001da4 <HAL_I2C_Mem_Write>:
{
 8001da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da8:	b083      	sub	sp, #12
 8001daa:	460e      	mov	r6, r1
 8001dac:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001db0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001db6:	b2c9      	uxtb	r1, r1
 8001db8:	2920      	cmp	r1, #32
 8001dba:	f040 80bb 	bne.w	8001f34 <HAL_I2C_Mem_Write+0x190>
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	4690      	mov	r8, r2
 8001dc2:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8001dc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001dc6:	b1cb      	cbz	r3, 8001dfc <HAL_I2C_Mem_Write+0x58>
 8001dc8:	f1ba 0f00 	cmp.w	sl, #0
 8001dcc:	d016      	beq.n	8001dfc <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8001dce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	f000 80b2 	beq.w	8001f3c <HAL_I2C_Mem_Write+0x198>
 8001dd8:	f04f 0b01 	mov.w	fp, #1
 8001ddc:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001de0:	f7ff f9c6 	bl	8001170 <HAL_GetTick>
 8001de4:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001de6:	9000      	str	r0, [sp, #0]
 8001de8:	2319      	movs	r3, #25
 8001dea:	465a      	mov	r2, fp
 8001dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001df0:	4620      	mov	r0, r4
 8001df2:	f7ff fee7 	bl	8001bc4 <I2C_WaitOnFlagUntilTimeout>
 8001df6:	b130      	cbz	r0, 8001e06 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8001df8:	2001      	movs	r0, #1
 8001dfa:	e09c      	b.n	8001f36 <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e00:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8001e02:	2001      	movs	r0, #1
 8001e04:	e097      	b.n	8001f36 <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e06:	2321      	movs	r3, #33	; 0x21
 8001e08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e0c:	2340      	movs	r3, #64	; 0x40
 8001e0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001e18:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e1a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e1e:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e20:	9701      	str	r7, [sp, #4]
 8001e22:	9500      	str	r5, [sp, #0]
 8001e24:	464b      	mov	r3, r9
 8001e26:	4642      	mov	r2, r8
 8001e28:	4631      	mov	r1, r6
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7ff fef6 	bl	8001c1c <I2C_RequestMemoryWrite>
 8001e30:	b970      	cbnz	r0, 8001e50 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2bff      	cmp	r3, #255	; 0xff
 8001e38:	d90f      	bls.n	8001e5a <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e3a:	22ff      	movs	r2, #255	; 0xff
 8001e3c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e3e:	2300      	movs	r3, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e46:	4631      	mov	r1, r6
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f7ff fe00 	bl	8001a4e <I2C_TransferConfig>
 8001e4e:	e021      	b.n	8001e94 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 8001e50:	2300      	movs	r3, #0
 8001e52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001e56:	4658      	mov	r0, fp
 8001e58:	e06d      	b.n	8001f36 <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 8001e5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e5c:	b292      	uxth	r2, r2
 8001e5e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e60:	2300      	movs	r3, #0
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	4631      	mov	r1, r6
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f7ff fdee 	bl	8001a4e <I2C_TransferConfig>
 8001e72:	e00f      	b.n	8001e94 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8001e74:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e76:	b292      	uxth	r2, r2
 8001e78:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	4631      	mov	r1, r6
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7ff fde1 	bl	8001a4e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001e8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d033      	beq.n	8001efc <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e94:	463a      	mov	r2, r7
 8001e96:	4629      	mov	r1, r5
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7ff fe68 	bl	8001b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d14e      	bne.n	8001f40 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ea2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001eac:	3301      	adds	r3, #1
 8001eae:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001eb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001eba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ec2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ec4:	b292      	uxth	r2, r2
 8001ec6:	2a00      	cmp	r2, #0
 8001ec8:	d0e0      	beq.n	8001e8c <HAL_I2C_Mem_Write+0xe8>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1de      	bne.n	8001e8c <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ece:	9700      	str	r7, [sp, #0]
 8001ed0:	462b      	mov	r3, r5
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f7ff fe74 	bl	8001bc4 <I2C_WaitOnFlagUntilTimeout>
 8001edc:	bb90      	cbnz	r0, 8001f44 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ede:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2bff      	cmp	r3, #255	; 0xff
 8001ee4:	d9c6      	bls.n	8001e74 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ee6:	22ff      	movs	r2, #255	; 0xff
 8001ee8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001eea:	2300      	movs	r3, #0
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ef2:	4631      	mov	r1, r6
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff fdaa 	bl	8001a4e <I2C_TransferConfig>
 8001efa:	e7c7      	b.n	8001e8c <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efc:	463a      	mov	r2, r7
 8001efe:	4629      	mov	r1, r5
 8001f00:	4620      	mov	r0, r4
 8001f02:	f7ff fec9 	bl	8001c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f06:	b9f8      	cbnz	r0, 8001f48 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001f0e:	6821      	ldr	r1, [r4, #0]
 8001f10:	684b      	ldr	r3, [r1, #4]
 8001f12:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001f16:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001f1a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001f1e:	f023 0301 	bic.w	r3, r3, #1
 8001f22:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f24:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001f2e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001f32:	e000      	b.n	8001f36 <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8001f34:	2002      	movs	r0, #2
}
 8001f36:	b003      	add	sp, #12
 8001f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001f3c:	2002      	movs	r0, #2
 8001f3e:	e7fa      	b.n	8001f36 <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 8001f40:	2001      	movs	r0, #1
 8001f42:	e7f8      	b.n	8001f36 <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8001f44:	2001      	movs	r0, #1
 8001f46:	e7f6      	b.n	8001f36 <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 8001f48:	2001      	movs	r0, #1
 8001f4a:	e7f4      	b.n	8001f36 <HAL_I2C_Mem_Write+0x192>

08001f4c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b20      	cmp	r3, #32
 8001f54:	d124      	bne.n	8001fa0 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f56:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d022      	beq.n	8001fa4 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f64:	2324      	movs	r3, #36	; 0x24
 8001f66:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f6a:	6802      	ldr	r2, [r0, #0]
 8001f6c:	6813      	ldr	r3, [r2, #0]
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f74:	6802      	ldr	r2, [r0, #0]
 8001f76:	6813      	ldr	r3, [r2, #0]
 8001f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f7c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f7e:	6802      	ldr	r2, [r0, #0]
 8001f80:	6813      	ldr	r3, [r2, #0]
 8001f82:	4319      	orrs	r1, r3
 8001f84:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f86:	6802      	ldr	r2, [r0, #0]
 8001f88:	6813      	ldr	r3, [r2, #0]
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	2320      	movs	r3, #32
 8001f92:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f96:	2300      	movs	r3, #0
 8001f98:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2002      	movs	r0, #2
 8001fa2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001fa4:	2002      	movs	r0, #2
  }
}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d122      	bne.n	8001ff8 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d020      	beq.n	8001ffc <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc0:	2324      	movs	r3, #36	; 0x24
 8001fc2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fc6:	6802      	ldr	r2, [r0, #0]
 8001fc8:	6813      	ldr	r3, [r2, #0]
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fd0:	6802      	ldr	r2, [r0, #0]
 8001fd2:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fd8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fdc:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fde:	6802      	ldr	r2, [r0, #0]
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001ffc:	2002      	movs	r0, #2
  }
}
 8001ffe:	4770      	bx	lr

08002000 <HAL_IPCC_RxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002000:	4770      	bx	lr

08002002 <HAL_IPCC_TxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002002:	4770      	bx	lr

08002004 <IPCC_SetDefaultCallbacks>:
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	2b05      	cmp	r3, #5
 8002008:	d80a      	bhi.n	8002020 <IPCC_SetDefaultCallbacks+0x1c>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800200a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800200e:	4905      	ldr	r1, [pc, #20]	; (8002024 <IPCC_SetDefaultCallbacks+0x20>)
 8002010:	6051      	str	r1, [r2, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002012:	1d9a      	adds	r2, r3, #6
 8002014:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002018:	4903      	ldr	r1, [pc, #12]	; (8002028 <IPCC_SetDefaultCallbacks+0x24>)
 800201a:	6051      	str	r1, [r2, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800201c:	3301      	adds	r3, #1
 800201e:	e7f2      	b.n	8002006 <IPCC_SetDefaultCallbacks+0x2>
  }
}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	08002001 	.word	0x08002001
 8002028:	08002003 	.word	0x08002003

0800202c <IPCC_Reset_Register>:
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800202c:	2300      	movs	r3, #0
 800202e:	6003      	str	r3, [r0, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002030:	f04f 133f 	mov.w	r3, #4128831	; 0x3f003f
 8002034:	6043      	str	r3, [r0, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002036:	233f      	movs	r3, #63	; 0x3f
 8002038:	6083      	str	r3, [r0, #8]
}
 800203a:	4770      	bx	lr

0800203c <HAL_IPCC_Init>:
  if (hipcc != NULL)
 800203c:	b1c0      	cbz	r0, 8002070 <HAL_IPCC_Init+0x34>
{
 800203e:	b538      	push	{r3, r4, r5, lr}
 8002040:	4604      	mov	r4, r0
    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002042:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002046:	b183      	cbz	r3, 800206a <HAL_IPCC_Init+0x2e>
    IPCC_Reset_Register(currentInstance);
 8002048:	4d0a      	ldr	r5, [pc, #40]	; (8002074 <HAL_IPCC_Init+0x38>)
 800204a:	4628      	mov	r0, r5
 800204c:	f7ff ffee 	bl	800202c <IPCC_Reset_Register>
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002050:	682b      	ldr	r3, [r5, #0]
 8002052:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002056:	602b      	str	r3, [r5, #0]
    IPCC_SetDefaultCallbacks(hipcc);
 8002058:	4620      	mov	r0, r4
 800205a:	f7ff ffd3 	bl	8002004 <IPCC_SetDefaultCallbacks>
    hipcc->callbackRequest = 0;
 800205e:	2000      	movs	r0, #0
 8002060:	6360      	str	r0, [r4, #52]	; 0x34
    hipcc->State = HAL_IPCC_STATE_READY;
 8002062:	2301      	movs	r3, #1
 8002064:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8002068:	bd38      	pop	{r3, r4, r5, pc}
      HAL_IPCC_MspInit(hipcc);
 800206a:	f7fe faf7 	bl	800065c <HAL_IPCC_MspInit>
 800206e:	e7eb      	b.n	8002048 <HAL_IPCC_Init+0xc>
    err = HAL_ERROR;
 8002070:	2001      	movs	r0, #1
}
 8002072:	4770      	bx	lr
 8002074:	58000c00 	.word	0x58000c00

08002078 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002078:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800207a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800207e:	d041      	beq.n	8002104 <HAL_PCD_EP_DB_Receive+0x8c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002080:	6804      	ldr	r4, [r0, #0]
 8002082:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002086:	780d      	ldrb	r5, [r1, #0]
 8002088:	00ee      	lsls	r6, r5, #3
 800208a:	fa16 f383 	uxtah	r3, r6, r3
 800208e:	4423      	add	r3, r4
 8002090:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8002094:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8002098:	698b      	ldr	r3, [r1, #24]
 800209a:	42a3      	cmp	r3, r4
 800209c:	d328      	bcc.n	80020f0 <HAL_PCD_EP_DB_Receive+0x78>
    {
      ep->xfer_len -= count;
 800209e:	1b1b      	subs	r3, r3, r4
 80020a0:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 80020a2:	698b      	ldr	r3, [r1, #24]
 80020a4:	b97b      	cbnz	r3, 80020c6 <HAL_PCD_EP_DB_Receive+0x4e>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020a6:	6806      	ldr	r6, [r0, #0]
 80020a8:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c2:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020c6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020ca:	d00e      	beq.n	80020ea <HAL_PCD_EP_DB_Receive+0x72>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020cc:	6802      	ldr	r2, [r0, #0]
 80020ce:	780d      	ldrb	r5, [r1, #0]
 80020d0:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020e6:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 80020ea:	b924      	cbnz	r4, 80020f6 <HAL_PCD_EP_DB_Receive+0x7e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 80020ec:	4620      	mov	r0, r4
 80020ee:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	618b      	str	r3, [r1, #24]
 80020f4:	e7d5      	b.n	80020a2 <HAL_PCD_EP_DB_Receive+0x2a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020f6:	4623      	mov	r3, r4
 80020f8:	890a      	ldrh	r2, [r1, #8]
 80020fa:	6949      	ldr	r1, [r1, #20]
 80020fc:	6800      	ldr	r0, [r0, #0]
 80020fe:	f004 fb34 	bl	800676a <USB_ReadPMA>
 8002102:	e7f3      	b.n	80020ec <HAL_PCD_EP_DB_Receive+0x74>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002104:	6804      	ldr	r4, [r0, #0]
 8002106:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800210a:	780d      	ldrb	r5, [r1, #0]
 800210c:	00ee      	lsls	r6, r5, #3
 800210e:	fa16 f383 	uxtah	r3, r6, r3
 8002112:	4423      	add	r3, r4
 8002114:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 8002118:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 800211c:	698b      	ldr	r3, [r1, #24]
 800211e:	42a3      	cmp	r3, r4
 8002120:	d32e      	bcc.n	8002180 <HAL_PCD_EP_DB_Receive+0x108>
      ep->xfer_len -= count;
 8002122:	1b1b      	subs	r3, r3, r4
 8002124:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8002126:	698b      	ldr	r3, [r1, #24]
 8002128:	b97b      	cbnz	r3, 800214a <HAL_PCD_EP_DB_Receive+0xd2>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800212a:	6806      	ldr	r6, [r0, #0]
 800212c:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8002130:	b29b      	uxth	r3, r3
 8002132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800213e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002146:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800214a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800214e:	d10e      	bne.n	800216e <HAL_PCD_EP_DB_Receive+0xf6>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002150:	6802      	ldr	r2, [r0, #0]
 8002152:	780d      	ldrb	r5, [r1, #0]
 8002154:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8002158:	b29b      	uxth	r3, r3
 800215a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800215e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002166:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800216a:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    if (count != 0U)
 800216e:	2c00      	cmp	r4, #0
 8002170:	d0bc      	beq.n	80020ec <HAL_PCD_EP_DB_Receive+0x74>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002172:	4623      	mov	r3, r4
 8002174:	894a      	ldrh	r2, [r1, #10]
 8002176:	6949      	ldr	r1, [r1, #20]
 8002178:	6800      	ldr	r0, [r0, #0]
 800217a:	f004 faf6 	bl	800676a <USB_ReadPMA>
 800217e:	e7b5      	b.n	80020ec <HAL_PCD_EP_DB_Receive+0x74>
      ep->xfer_len = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	618b      	str	r3, [r1, #24]
 8002184:	e7cf      	b.n	8002126 <HAL_PCD_EP_DB_Receive+0xae>

08002186 <HAL_PCD_Init>:
  if (hpcd == NULL)
 8002186:	2800      	cmp	r0, #0
 8002188:	d068      	beq.n	800225c <HAL_PCD_Init+0xd6>
{
 800218a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218c:	b087      	sub	sp, #28
 800218e:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002190:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8002194:	b323      	cbz	r3, 80021e0 <HAL_PCD_Init+0x5a>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002196:	2303      	movs	r3, #3
 8002198:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800219c:	6820      	ldr	r0, [r4, #0]
 800219e:	f003 fbdb 	bl	8005958 <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	6860      	ldr	r0, [r4, #4]
 80021a6:	4283      	cmp	r3, r0
 80021a8:	d21f      	bcs.n	80021ea <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].is_in = 1U;
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80021b0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80021b4:	2001      	movs	r0, #1
 80021b6:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 80021b8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80021bc:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021c0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80021c4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80021c8:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021ca:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 80021ce:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80021d2:	2000      	movs	r0, #0
 80021d4:	70e8      	strb	r0, [r5, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021d6:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021d8:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80021da:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021dc:	b2d3      	uxtb	r3, r2
 80021de:	e7e1      	b.n	80021a4 <HAL_PCD_Init+0x1e>
    hpcd->Lock = HAL_UNLOCKED;
 80021e0:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80021e4:	f007 fcd8 	bl	8009b98 <HAL_PCD_MspInit>
 80021e8:	e7d5      	b.n	8002196 <HAL_PCD_Init+0x10>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	e016      	b.n	800221c <HAL_PCD_Init+0x96>
    hpcd->OUT_ep[i].is_in = 0U;
 80021ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80021f2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80021f6:	2100      	movs	r1, #0
 80021f8:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80021fc:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002200:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002204:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002208:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800220c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002210:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002214:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002218:	3301      	adds	r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	4298      	cmp	r0, r3
 800221e:	d8e6      	bhi.n	80021ee <HAL_PCD_Init+0x68>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002220:	4625      	mov	r5, r4
 8002222:	f855 7b10 	ldr.w	r7, [r5], #16
 8002226:	466e      	mov	r6, sp
 8002228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800222a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800222c:	682b      	ldr	r3, [r5, #0]
 800222e:	6033      	str	r3, [r6, #0]
 8002230:	1d23      	adds	r3, r4, #4
 8002232:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002234:	4638      	mov	r0, r7
 8002236:	f003 fb99 	bl	800596c <USB_DevInit>
  hpcd->USB_Address = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002240:	2301      	movs	r3, #1
 8002242:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 8002246:	69e3      	ldr	r3, [r4, #28]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d002      	beq.n	8002252 <HAL_PCD_Init+0xcc>
  return HAL_OK;
 800224c:	2000      	movs	r0, #0
}
 800224e:	b007      	add	sp, #28
 8002250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002252:	4620      	mov	r0, r4
 8002254:	f000 fee1 	bl	800301a <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 8002258:	2000      	movs	r0, #0
 800225a:	e7f8      	b.n	800224e <HAL_PCD_Init+0xc8>
    return HAL_ERROR;
 800225c:	2001      	movs	r0, #1
}
 800225e:	4770      	bx	lr

08002260 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8002260:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002264:	2b01      	cmp	r3, #1
 8002266:	d00e      	beq.n	8002286 <HAL_PCD_Start+0x26>
{
 8002268:	b510      	push	{r4, lr}
 800226a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800226c:	2301      	movs	r3, #1
 800226e:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002272:	6800      	ldr	r0, [r0, #0]
 8002274:	f003 fb67 	bl	8005946 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002278:	6820      	ldr	r0, [r4, #0]
 800227a:	f003 fea4 	bl	8005fc6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800227e:	2000      	movs	r0, #0
 8002280:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002284:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002286:	2002      	movs	r0, #2
}
 8002288:	4770      	bx	lr

0800228a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800228a:	b570      	push	{r4, r5, r6, lr}
 800228c:	4605      	mov	r5, r0
 800228e:	460c      	mov	r4, r1
 8002290:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002292:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002296:	f000 8109 	beq.w	80024ac <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800229a:	6802      	ldr	r2, [r0, #0]
 800229c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80022a0:	7809      	ldrb	r1, [r1, #0]
 80022a2:	00c8      	lsls	r0, r1, #3
 80022a4:	fa10 f383 	uxtah	r3, r0, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80022ae:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 80022b2:	69a3      	ldr	r3, [r4, #24]
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d951      	bls.n	800235c <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxPctSize;
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022bc:	69a3      	ldr	r3, [r4, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d168      	bne.n	8002394 <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022c2:	7863      	ldrb	r3, [r4, #1]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d14c      	bne.n	8002362 <HAL_PCD_EP_DB_Transmit+0xd8>
 80022c8:	682a      	ldr	r2, [r5, #0]
 80022ca:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80022ce:	fa12 f383 	uxtah	r3, r2, r3
 80022d2:	4403      	add	r3, r0
 80022d4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80022d8:	b292      	uxth	r2, r2
 80022da:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80022de:	b292      	uxth	r2, r2
 80022e0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80022e4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80022e8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80022ec:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80022f0:	b292      	uxth	r2, r2
 80022f2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022f6:	6829      	ldr	r1, [r5, #0]
 80022f8:	7862      	ldrb	r2, [r4, #1]
 80022fa:	2a00      	cmp	r2, #0
 80022fc:	d13d      	bne.n	800237a <HAL_PCD_EP_DB_Transmit+0xf0>
 80022fe:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002302:	fa11 f383 	uxtah	r3, r1, r3
 8002306:	7822      	ldrb	r2, [r4, #0]
 8002308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800230c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002310:	b292      	uxth	r2, r2
 8002312:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002316:	b292      	uxth	r2, r2
 8002318:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800231c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002320:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002324:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002328:	b292      	uxth	r2, r2
 800232a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800232e:	7821      	ldrb	r1, [r4, #0]
 8002330:	4628      	mov	r0, r5
 8002332:	f007 fc97 	bl	8009c64 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002336:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800233a:	d040      	beq.n	80023be <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800233c:	682a      	ldr	r2, [r5, #0]
 800233e:	7821      	ldrb	r1, [r4, #0]
 8002340:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002344:	b29b      	uxth	r3, r3
 8002346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800234a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002356:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800235a:	e030      	b.n	80023be <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	61a3      	str	r3, [r4, #24]
 8002360:	e7ac      	b.n	80022bc <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002362:	2b01      	cmp	r3, #1
 8002364:	d1c7      	bne.n	80022f6 <HAL_PCD_EP_DB_Transmit+0x6c>
 8002366:	682a      	ldr	r2, [r5, #0]
 8002368:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800236c:	fa12 f383 	uxtah	r3, r2, r3
 8002370:	4403      	add	r3, r0
 8002372:	2200      	movs	r2, #0
 8002374:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002378:	e7bd      	b.n	80022f6 <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800237a:	2a01      	cmp	r2, #1
 800237c:	d1d7      	bne.n	800232e <HAL_PCD_EP_DB_Transmit+0xa4>
 800237e:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002382:	fa11 f383 	uxtah	r3, r1, r3
 8002386:	7821      	ldrb	r1, [r4, #0]
 8002388:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800238c:	2200      	movs	r2, #0
 800238e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002392:	e7cc      	b.n	800232e <HAL_PCD_EP_DB_Transmit+0xa4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002394:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002398:	d00d      	beq.n	80023b6 <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800239a:	6828      	ldr	r0, [r5, #0]
 800239c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023b6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d012      	beq.n	80023e4 <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80023be:	682a      	ldr	r2, [r5, #0]
 80023c0:	7821      	ldrb	r1, [r4, #0]
 80023c2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023d0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80023d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023dc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 80023e0:	2000      	movs	r0, #0
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 80023e4:	6963      	ldr	r3, [r4, #20]
 80023e6:	4413      	add	r3, r2
 80023e8:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 80023ea:	69e3      	ldr	r3, [r4, #28]
 80023ec:	4413      	add	r3, r2
 80023ee:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 80023f0:	6a21      	ldr	r1, [r4, #32]
 80023f2:	6923      	ldr	r3, [r4, #16]
 80023f4:	4299      	cmp	r1, r3
 80023f6:	d31b      	bcc.n	8002430 <HAL_PCD_EP_DB_Transmit+0x1a6>
          ep->xfer_len_db -= len;
 80023f8:	1ac9      	subs	r1, r1, r3
 80023fa:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023fc:	7862      	ldrb	r2, [r4, #1]
 80023fe:	2a00      	cmp	r2, #0
 8002400:	d13f      	bne.n	8002482 <HAL_PCD_EP_DB_Transmit+0x1f8>
 8002402:	6829      	ldr	r1, [r5, #0]
 8002404:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002408:	fa11 f282 	uxtah	r2, r1, r2
 800240c:	7821      	ldrb	r1, [r4, #0]
 800240e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002412:	2b3e      	cmp	r3, #62	; 0x3e
 8002414:	d918      	bls.n	8002448 <HAL_PCD_EP_DB_Transmit+0x1be>
 8002416:	0959      	lsrs	r1, r3, #5
 8002418:	f013 0f1f 	tst.w	r3, #31
 800241c:	d100      	bne.n	8002420 <HAL_PCD_EP_DB_Transmit+0x196>
 800241e:	3901      	subs	r1, #1
 8002420:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002424:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002428:	b289      	uxth	r1, r1
 800242a:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800242e:	e02a      	b.n	8002486 <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 8002430:	b921      	cbnz	r1, 800243c <HAL_PCD_EP_DB_Transmit+0x1b2>
          ep->xfer_fill_db = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8002438:	4613      	mov	r3, r2
 800243a:	e7df      	b.n	80023fc <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8002442:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8002444:	460b      	mov	r3, r1
 8002446:	e7d9      	b.n	80023fc <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002448:	b98b      	cbnz	r3, 800246e <HAL_PCD_EP_DB_Transmit+0x1e4>
 800244a:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800244e:	b289      	uxth	r1, r1
 8002450:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002454:	b289      	uxth	r1, r1
 8002456:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800245a:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800245e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002462:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002466:	b289      	uxth	r1, r1
 8002468:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800246c:	e00b      	b.n	8002486 <HAL_PCD_EP_DB_Transmit+0x1fc>
 800246e:	0859      	lsrs	r1, r3, #1
 8002470:	f013 0f01 	tst.w	r3, #1
 8002474:	d000      	beq.n	8002478 <HAL_PCD_EP_DB_Transmit+0x1ee>
 8002476:	3101      	adds	r1, #1
 8002478:	0289      	lsls	r1, r1, #10
 800247a:	b289      	uxth	r1, r1
 800247c:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8002480:	e001      	b.n	8002486 <HAL_PCD_EP_DB_Transmit+0x1fc>
 8002482:	2a01      	cmp	r2, #1
 8002484:	d006      	beq.n	8002494 <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002486:	b29b      	uxth	r3, r3
 8002488:	8922      	ldrh	r2, [r4, #8]
 800248a:	6961      	ldr	r1, [r4, #20]
 800248c:	6828      	ldr	r0, [r5, #0]
 800248e:	f003 fda9 	bl	8005fe4 <USB_WritePMA>
 8002492:	e794      	b.n	80023be <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002494:	6829      	ldr	r1, [r5, #0]
 8002496:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800249a:	fa11 f282 	uxtah	r2, r1, r2
 800249e:	7821      	ldrb	r1, [r4, #0]
 80024a0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80024a4:	b299      	uxth	r1, r3
 80024a6:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80024aa:	e7ec      	b.n	8002486 <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024ac:	6802      	ldr	r2, [r0, #0]
 80024ae:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80024b2:	7809      	ldrb	r1, [r1, #0]
 80024b4:	00c8      	lsls	r0, r1, #3
 80024b6:	fa10 f383 	uxtah	r3, r0, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80024c0:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 80024c4:	69a3      	ldr	r3, [r4, #24]
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d352      	bcc.n	8002570 <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxPctSize;
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 80024ce:	69a3      	ldr	r3, [r4, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d169      	bne.n	80025a8 <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024d4:	7863      	ldrb	r3, [r4, #1]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d14d      	bne.n	8002576 <HAL_PCD_EP_DB_Transmit+0x2ec>
 80024da:	682a      	ldr	r2, [r5, #0]
 80024dc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80024e0:	fa12 f383 	uxtah	r3, r2, r3
 80024e4:	4418      	add	r0, r3
 80024e6:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 80024f6:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 80024fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002502:	b29b      	uxth	r3, r3
 8002504:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002508:	6829      	ldr	r1, [r5, #0]
 800250a:	7862      	ldrb	r2, [r4, #1]
 800250c:	2a00      	cmp	r2, #0
 800250e:	d13e      	bne.n	800258e <HAL_PCD_EP_DB_Transmit+0x304>
 8002510:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002514:	fa11 f383 	uxtah	r3, r1, r3
 8002518:	7822      	ldrb	r2, [r4, #0]
 800251a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800251e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002522:	b292      	uxth	r2, r2
 8002524:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002528:	b292      	uxth	r2, r2
 800252a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800252e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002532:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002536:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800253a:	b292      	uxth	r2, r2
 800253c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002540:	7821      	ldrb	r1, [r4, #0]
 8002542:	4628      	mov	r0, r5
 8002544:	f007 fb8e 	bl	8009c64 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002548:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800254c:	f47f af37 	bne.w	80023be <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002550:	682a      	ldr	r2, [r5, #0]
 8002552:	7821      	ldrb	r1, [r4, #0]
 8002554:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002558:	b29b      	uxth	r3, r3
 800255a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800255e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800256e:	e726      	b.n	80023be <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	61a3      	str	r3, [r4, #24]
 8002574:	e7ab      	b.n	80024ce <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002576:	2b01      	cmp	r3, #1
 8002578:	d1c6      	bne.n	8002508 <HAL_PCD_EP_DB_Transmit+0x27e>
 800257a:	682a      	ldr	r2, [r5, #0]
 800257c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002580:	fa12 f383 	uxtah	r3, r2, r3
 8002584:	4418      	add	r0, r3
 8002586:	2300      	movs	r3, #0
 8002588:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 800258c:	e7bc      	b.n	8002508 <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800258e:	2a01      	cmp	r2, #1
 8002590:	d1d6      	bne.n	8002540 <HAL_PCD_EP_DB_Transmit+0x2b6>
 8002592:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002596:	fa11 f383 	uxtah	r3, r1, r3
 800259a:	7821      	ldrb	r1, [r4, #0]
 800259c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80025a0:	2200      	movs	r2, #0
 80025a2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80025a6:	e7cb      	b.n	8002540 <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025a8:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80025ac:	d10d      	bne.n	80025ca <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025ae:	6828      	ldr	r0, [r5, #0]
 80025b0:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c6:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80025ca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	f47f aef5 	bne.w	80023be <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 80025d4:	6963      	ldr	r3, [r4, #20]
 80025d6:	4413      	add	r3, r2
 80025d8:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 80025da:	69e3      	ldr	r3, [r4, #28]
 80025dc:	4413      	add	r3, r2
 80025de:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 80025e0:	6a21      	ldr	r1, [r4, #32]
 80025e2:	6923      	ldr	r3, [r4, #16]
 80025e4:	4299      	cmp	r1, r3
 80025e6:	d31b      	bcc.n	8002620 <HAL_PCD_EP_DB_Transmit+0x396>
          ep->xfer_len_db -= len;
 80025e8:	1ac9      	subs	r1, r1, r3
 80025ea:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025ec:	6829      	ldr	r1, [r5, #0]
 80025ee:	7862      	ldrb	r2, [r4, #1]
 80025f0:	2a00      	cmp	r2, #0
 80025f2:	d13e      	bne.n	8002672 <HAL_PCD_EP_DB_Transmit+0x3e8>
 80025f4:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80025f8:	fa11 f282 	uxtah	r2, r1, r2
 80025fc:	7821      	ldrb	r1, [r4, #0]
 80025fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002602:	2b3e      	cmp	r3, #62	; 0x3e
 8002604:	d918      	bls.n	8002638 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8002606:	0959      	lsrs	r1, r3, #5
 8002608:	f013 0f1f 	tst.w	r3, #31
 800260c:	d100      	bne.n	8002610 <HAL_PCD_EP_DB_Transmit+0x386>
 800260e:	3901      	subs	r1, #1
 8002610:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002614:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002618:	b289      	uxth	r1, r1
 800261a:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 800261e:	e02a      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 8002620:	b921      	cbnz	r1, 800262c <HAL_PCD_EP_DB_Transmit+0x3a2>
          ep->xfer_fill_db = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8002628:	4613      	mov	r3, r2
 800262a:	e7df      	b.n	80025ec <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8002630:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8002634:	460b      	mov	r3, r1
 8002636:	e7d9      	b.n	80025ec <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002638:	b98b      	cbnz	r3, 800265e <HAL_PCD_EP_DB_Transmit+0x3d4>
 800263a:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 800263e:	b289      	uxth	r1, r1
 8002640:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002644:	b289      	uxth	r1, r1
 8002646:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 800264a:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 800264e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002652:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002656:	b289      	uxth	r1, r1
 8002658:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 800265c:	e00b      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x3ec>
 800265e:	0859      	lsrs	r1, r3, #1
 8002660:	f013 0f01 	tst.w	r3, #1
 8002664:	d000      	beq.n	8002668 <HAL_PCD_EP_DB_Transmit+0x3de>
 8002666:	3101      	adds	r1, #1
 8002668:	0289      	lsls	r1, r1, #10
 800266a:	b289      	uxth	r1, r1
 800266c:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002670:	e001      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8002672:	2a01      	cmp	r2, #1
 8002674:	d006      	beq.n	8002684 <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002676:	b29b      	uxth	r3, r3
 8002678:	8962      	ldrh	r2, [r4, #10]
 800267a:	6961      	ldr	r1, [r4, #20]
 800267c:	6828      	ldr	r0, [r5, #0]
 800267e:	f003 fcb1 	bl	8005fe4 <USB_WritePMA>
 8002682:	e69c      	b.n	80023be <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002684:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002688:	fa11 f282 	uxtah	r2, r1, r2
 800268c:	7821      	ldrb	r1, [r4, #0]
 800268e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002692:	b299      	uxth	r1, r3
 8002694:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002698:	e7ed      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x3ec>

0800269a <PCD_EP_ISR_Handler>:
{
 800269a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800269e:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026a0:	e0ca      	b.n	8002838 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026a2:	8803      	ldrh	r3, [r0, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026ba:	6829      	ldr	r1, [r5, #0]
 80026bc:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80026c0:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80026c4:	00d2      	lsls	r2, r2, #3
 80026c6:	fa12 f383 	uxtah	r3, r2, r3
 80026ca:	440b      	add	r3, r1
 80026cc:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80026d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d4:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80026d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80026d8:	4413      	add	r3, r2
 80026da:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80026dc:	2100      	movs	r1, #0
 80026de:	4628      	mov	r0, r5
 80026e0:	f007 fac0 	bl	8009c64 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80026e4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a5 	beq.w	8002838 <PCD_EP_ISR_Handler+0x19e>
 80026ee:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f040 80a1 	bne.w	8002838 <PCD_EP_ISR_Handler+0x19e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80026f6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80026fa:	682a      	ldr	r2, [r5, #0]
 80026fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002700:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800270a:	e095      	b.n	8002838 <PCD_EP_ISR_Handler+0x19e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800270c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002710:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8002714:	00d2      	lsls	r2, r2, #3
 8002716:	fa12 f383 	uxtah	r3, r2, r3
 800271a:	4403      	add	r3, r0
 800271c:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8002720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002724:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002728:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 800272c:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8002730:	f004 f81b 	bl	800676a <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002734:	682a      	ldr	r2, [r5, #0]
 8002736:	8813      	ldrh	r3, [r2, #0]
 8002738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273c:	051b      	lsls	r3, r3, #20
 800273e:	0d1b      	lsrs	r3, r3, #20
 8002740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002744:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002746:	4628      	mov	r0, r5
 8002748:	f007 fa78 	bl	8009c3c <HAL_PCD_SetupStageCallback>
 800274c:	e074      	b.n	8002838 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800274e:	b989      	cbnz	r1, 8002774 <PCD_EP_ISR_Handler+0xda>
 8002750:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002754:	b292      	uxth	r2, r2
 8002756:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800275a:	b292      	uxth	r2, r2
 800275c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002760:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002764:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002768:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800276c:	b292      	uxth	r2, r2
 800276e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002772:	e0bf      	b.n	80028f4 <PCD_EP_ISR_Handler+0x25a>
 8002774:	084a      	lsrs	r2, r1, #1
 8002776:	f011 0f01 	tst.w	r1, #1
 800277a:	d000      	beq.n	800277e <PCD_EP_ISR_Handler+0xe4>
 800277c:	3201      	adds	r2, #1
 800277e:	0292      	lsls	r2, r2, #10
 8002780:	b292      	uxth	r2, r2
 8002782:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002786:	e0b5      	b.n	80028f4 <PCD_EP_ISR_Handler+0x25a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002788:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800278c:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800278e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002792:	f040 80be 	bne.w	8002912 <PCD_EP_ISR_Handler+0x278>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002796:	f016 0f80 	tst.w	r6, #128	; 0x80
 800279a:	d04d      	beq.n	8002838 <PCD_EP_ISR_Handler+0x19e>
        ep = &hpcd->IN_ep[epindex];
 800279c:	1c62      	adds	r2, r4, #1
 800279e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80027a2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80027a6:	6828      	ldr	r0, [r5, #0]
 80027a8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 80027c4:	78cb      	ldrb	r3, [r1, #3]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	f000 81a7 	beq.w	8002b1a <PCD_EP_ISR_Handler+0x480>
          ep->xfer_len = 0U;
 80027cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80027d0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80027d4:	2200      	movs	r2, #0
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 80027d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027dc:	b323      	cbz	r3, 8002828 <PCD_EP_ISR_Handler+0x18e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027de:	f016 0f40 	tst.w	r6, #64	; 0x40
 80027e2:	f000 8163 	beq.w	8002aac <PCD_EP_ISR_Handler+0x412>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027e6:	784b      	ldrb	r3, [r1, #1]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 814c 	bne.w	8002a86 <PCD_EP_ISR_Handler+0x3ec>
 80027ee:	682a      	ldr	r2, [r5, #0]
 80027f0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80027f4:	fa12 f383 	uxtah	r3, r2, r3
 80027f8:	1c62      	adds	r2, r4, #1
 80027fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80027fe:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8002802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002806:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800280a:	b292      	uxth	r2, r2
 800280c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002810:	b292      	uxth	r2, r2
 8002812:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002816:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800281a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800281e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002822:	b292      	uxth	r2, r2
 8002824:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002828:	3401      	adds	r4, #1
 800282a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800282e:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8002832:	4628      	mov	r0, r5
 8002834:	f007 fa16 	bl	8009c64 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002838:	6828      	ldr	r0, [r5, #0]
 800283a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800283e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002842:	f000 81b2 	beq.w	8002baa <PCD_EP_ISR_Handler+0x510>
    wIstr = hpcd->Instance->ISTR;
 8002846:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 800284a:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 800284c:	f014 040f 	ands.w	r4, r4, #15
 8002850:	d19a      	bne.n	8002788 <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002852:	f013 0f10 	tst.w	r3, #16
 8002856:	f43f af24 	beq.w	80026a2 <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800285a:	8803      	ldrh	r3, [r0, #0]
 800285c:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800285e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002862:	f47f af53 	bne.w	800270c <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002866:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800286a:	d0e5      	beq.n	8002838 <PCD_EP_ISR_Handler+0x19e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800286c:	8803      	ldrh	r3, [r0, #0]
 800286e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002872:	051b      	lsls	r3, r3, #20
 8002874:	0d1b      	lsrs	r3, r3, #20
 8002876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800287c:	6828      	ldr	r0, [r5, #0]
 800287e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002882:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8002886:	00d2      	lsls	r2, r2, #3
 8002888:	fa12 f383 	uxtah	r3, r2, r3
 800288c:	4403      	add	r3, r0
 800288e:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8002892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002896:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800289a:	b18b      	cbz	r3, 80028c0 <PCD_EP_ISR_Handler+0x226>
 800289c:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 80028a0:	b171      	cbz	r1, 80028c0 <PCD_EP_ISR_Handler+0x226>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028a2:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80028a6:	f003 ff60 	bl	800676a <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80028aa:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 80028ae:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 80028b2:	4413      	add	r3, r2
 80028b4:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80028b8:	2100      	movs	r1, #0
 80028ba:	4628      	mov	r0, r5
 80028bc:	f007 f9c6 	bl	8009c4c <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80028c0:	682b      	ldr	r3, [r5, #0]
 80028c2:	881a      	ldrh	r2, [r3, #0]
 80028c4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80028c8:	d1b6      	bne.n	8002838 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80028ca:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80028ce:	fa13 f382 	uxtah	r3, r3, r2
 80028d2:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 80028d6:	293e      	cmp	r1, #62	; 0x3e
 80028d8:	f67f af39 	bls.w	800274e <PCD_EP_ISR_Handler+0xb4>
 80028dc:	094a      	lsrs	r2, r1, #5
 80028de:	f011 0f1f 	tst.w	r1, #31
 80028e2:	d100      	bne.n	80028e6 <PCD_EP_ISR_Handler+0x24c>
 80028e4:	3a01      	subs	r2, #1
 80028e6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80028ea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80028ee:	b292      	uxth	r2, r2
 80028f0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80028f4:	682a      	ldr	r2, [r5, #0]
 80028f6:	8813      	ldrh	r3, [r2, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002902:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290e:	8013      	strh	r3, [r2, #0]
 8002910:	e792      	b.n	8002838 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002912:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	051b      	lsls	r3, r3, #20
 800291c:	0d1b      	lsrs	r3, r3, #20
 800291e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002922:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8002926:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800292a:	00c9      	lsls	r1, r1, #3
 800292c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002930:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8002934:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002938:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800293c:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8002940:	2b00      	cmp	r3, #0
 8002942:	d140      	bne.n	80029c6 <PCD_EP_ISR_Handler+0x32c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002944:	6828      	ldr	r0, [r5, #0]
 8002946:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800294a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800294e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002952:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8002956:	00d2      	lsls	r2, r2, #3
 8002958:	fa12 f383 	uxtah	r3, r2, r3
 800295c:	4403      	add	r3, r0
 800295e:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8002962:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8002966:	bb17      	cbnz	r7, 80029ae <PCD_EP_ISR_Handler+0x314>
        ep->xfer_count += count;
 8002968:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800296c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002970:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002974:	443a      	add	r2, r7
 8002976:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800297a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800297e:	443a      	add	r2, r7
 8002980:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002984:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002988:	b13b      	cbz	r3, 800299a <PCD_EP_ISR_Handler+0x300>
 800298a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800298e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002992:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002996:	429f      	cmp	r7, r3
 8002998:	d270      	bcs.n	8002a7c <PCD_EP_ISR_Handler+0x3e2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800299a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800299e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80029a2:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80029a6:	4628      	mov	r0, r5
 80029a8:	f007 f950 	bl	8009c4c <HAL_PCD_DataOutStageCallback>
 80029ac:	e6f3      	b.n	8002796 <PCD_EP_ISR_Handler+0xfc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80029ae:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80029b2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80029b6:	463b      	mov	r3, r7
 80029b8:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 80029bc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80029c0:	f003 fed3 	bl	800676a <USB_ReadPMA>
 80029c4:	e7d0      	b.n	8002968 <PCD_EP_ISR_Handler+0x2ce>
          if (ep->type == EP_TYPE_BULK)
 80029c6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80029ca:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80029ce:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d033      	beq.n	8002a3e <PCD_EP_ISR_Handler+0x3a4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029d6:	6829      	ldr	r1, [r5, #0]
 80029d8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80029dc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80029e0:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 80029e4:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029fa:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029fe:	6828      	ldr	r0, [r5, #0]
 8002a00:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 8002a04:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002a08:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002a0c:	d01e      	beq.n	8002a4c <PCD_EP_ISR_Handler+0x3b2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a0e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	fa13 f382 	uxtah	r3, r3, r2
 8002a18:	4403      	add	r3, r0
 8002a1a:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8002a1e:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8002a22:	2f00      	cmp	r7, #0
 8002a24:	d0a0      	beq.n	8002968 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a26:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002a2a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002a2e:	463b      	mov	r3, r7
 8002a30:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002a34:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002a38:	f003 fe97 	bl	800676a <USB_ReadPMA>
 8002a3c:	e794      	b.n	8002968 <PCD_EP_ISR_Handler+0x2ce>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002a3e:	4632      	mov	r2, r6
 8002a40:	4641      	mov	r1, r8
 8002a42:	4628      	mov	r0, r5
 8002a44:	f7ff fb18 	bl	8002078 <HAL_PCD_EP_DB_Receive>
 8002a48:	4607      	mov	r7, r0
 8002a4a:	e78d      	b.n	8002968 <PCD_EP_ISR_Handler+0x2ce>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a4c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	fa13 f382 	uxtah	r3, r3, r2
 8002a56:	4403      	add	r3, r0
 8002a58:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8002a5c:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8002a60:	2f00      	cmp	r7, #0
 8002a62:	d081      	beq.n	8002968 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a64:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002a68:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002a72:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002a76:	f003 fe78 	bl	800676a <USB_ReadPMA>
 8002a7a:	e775      	b.n	8002968 <PCD_EP_ISR_Handler+0x2ce>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	6828      	ldr	r0, [r5, #0]
 8002a80:	f003 fac3 	bl	800600a <USB_EPStartXfer>
 8002a84:	e687      	b.n	8002796 <PCD_EP_ISR_Handler+0xfc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	f47f aece 	bne.w	8002828 <PCD_EP_ISR_Handler+0x18e>
 8002a8c:	682a      	ldr	r2, [r5, #0]
 8002a8e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002a92:	fa12 f383 	uxtah	r3, r2, r3
 8002a96:	1c62      	adds	r2, r4, #1
 8002a98:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a9c:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8002aa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002aaa:	e6bd      	b.n	8002828 <PCD_EP_ISR_Handler+0x18e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aac:	6829      	ldr	r1, [r5, #0]
 8002aae:	1c63      	adds	r3, r4, #1
 8002ab0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ab4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ab8:	785a      	ldrb	r2, [r3, #1]
 8002aba:	b9e2      	cbnz	r2, 8002af6 <PCD_EP_ISR_Handler+0x45c>
 8002abc:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002ac0:	fa11 f383 	uxtah	r3, r1, r3
 8002ac4:	1c62      	adds	r2, r4, #1
 8002ac6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002aca:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8002ace:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ad2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002ad6:	b292      	uxth	r2, r2
 8002ad8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002adc:	b292      	uxth	r2, r2
 8002ade:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002ae2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002ae6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002aea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002aee:	b292      	uxth	r2, r2
 8002af0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002af4:	e698      	b.n	8002828 <PCD_EP_ISR_Handler+0x18e>
 8002af6:	2a01      	cmp	r2, #1
 8002af8:	f47f ae96 	bne.w	8002828 <PCD_EP_ISR_Handler+0x18e>
 8002afc:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002b00:	fa11 f383 	uxtah	r3, r1, r3
 8002b04:	1c62      	adds	r2, r4, #1
 8002b06:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b0a:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8002b0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b12:	2200      	movs	r2, #0
 8002b14:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002b18:	e686      	b.n	8002828 <PCD_EP_ISR_Handler+0x18e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002b1a:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002b1e:	d13f      	bne.n	8002ba0 <PCD_EP_ISR_Handler+0x506>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b20:	6828      	ldr	r0, [r5, #0]
 8002b22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b26:	1c62      	adds	r2, r4, #1
 8002b28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b2c:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8002b30:	00d2      	lsls	r2, r2, #3
 8002b32:	fa12 f383 	uxtah	r3, r2, r3
 8002b36:	4403      	add	r3, r0
 8002b38:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8002b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8002b40:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002b44:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002b48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d914      	bls.n	8002b78 <PCD_EP_ISR_Handler+0x4de>
              ep->xfer_len -= TxPctSize;
 8002b4e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8002b52:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8002b56:	1ad2      	subs	r2, r2, r3
 8002b58:	6432      	str	r2, [r6, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8002b5a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002b5e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002b62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b64:	b97a      	cbnz	r2, 8002b86 <PCD_EP_ISR_Handler+0x4ec>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b66:	3401      	adds	r4, #1
 8002b68:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002b6c:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8002b70:	4628      	mov	r0, r5
 8002b72:	f007 f877 	bl	8009c64 <HAL_PCD_DataInStageCallback>
 8002b76:	e65f      	b.n	8002838 <PCD_EP_ISR_Handler+0x19e>
              ep->xfer_len = 0U;
 8002b78:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002b7c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002b80:	2600      	movs	r6, #0
 8002b82:	6416      	str	r6, [r2, #64]	; 0x40
 8002b84:	e7e9      	b.n	8002b5a <PCD_EP_ISR_Handler+0x4c0>
              ep->xfer_buff += TxPctSize;
 8002b86:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002b8a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002b8e:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8002b90:	441e      	add	r6, r3
 8002b92:	63d6      	str	r6, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8002b94:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002b96:	4423      	add	r3, r4
 8002b98:	6453      	str	r3, [r2, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b9a:	f003 fa36 	bl	800600a <USB_EPStartXfer>
 8002b9e:	e64b      	b.n	8002838 <PCD_EP_ISR_Handler+0x19e>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ba0:	4632      	mov	r2, r6
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f7ff fb71 	bl	800228a <HAL_PCD_EP_DB_Transmit>
 8002ba8:	e646      	b.n	8002838 <PCD_EP_ISR_Handler+0x19e>
}
 8002baa:	2000      	movs	r0, #0
 8002bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002bb0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002bb0:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_PCD_SetAddress+0x24>
{
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002bc2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bc6:	6800      	ldr	r0, [r0, #0]
 8002bc8:	f003 f9f7 	bl	8005fba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002bd2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002bd4:	2002      	movs	r0, #2
}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_PCD_IRQHandler>:
{
 8002bd8:	b510      	push	{r4, lr}
 8002bda:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002bdc:	6800      	ldr	r0, [r0, #0]
 8002bde:	f003 f9fd 	bl	8005fdc <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002be2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002be6:	d123      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002be8:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8002bec:	d124      	bne.n	8002c38 <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002bee:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8002bf2:	d132      	bne.n	8002c5a <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002bf4:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8002bf8:	d139      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002bfa:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002bfe:	d140      	bne.n	8002c82 <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002c00:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8002c04:	d167      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002c06:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002c0a:	f040 8081 	bne.w	8002d10 <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002c0e:	f410 7f00 	tst.w	r0, #512	; 0x200
 8002c12:	f040 80ad 	bne.w	8002d70 <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002c16:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002c1a:	d027      	beq.n	8002c6c <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c1c:	6822      	ldr	r2, [r4, #0]
 8002c1e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8002c2e:	e01d      	b.n	8002c6c <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7ff fd32 	bl	800269a <PCD_EP_ISR_Handler>
    return;
 8002c36:	e019      	b.n	8002c6c <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c38:	6822      	ldr	r2, [r4, #0]
 8002c3a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f007 f81b 	bl	8009c86 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c50:	2100      	movs	r1, #0
 8002c52:	4620      	mov	r0, r4
 8002c54:	f7ff ffac 	bl	8002bb0 <HAL_PCD_SetAddress>
    return;
 8002c58:	e008      	b.n	8002c6c <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c5a:	6822      	ldr	r2, [r4, #0]
 8002c5c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8002c6c:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c6e:	6822      	ldr	r2, [r4, #0]
 8002c70:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8002c80:	e7f4      	b.n	8002c6c <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002c82:	6822      	ldr	r2, [r4, #0]
 8002c84:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f023 0304 	bic.w	r3, r3, #4
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c94:	6822      	ldr	r2, [r4, #0]
 8002c96:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	f023 0308 	bic.w	r3, r3, #8
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8002ca6:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d00c      	beq.n	8002cc8 <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f007 f80c 	bl	8009ccc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002cb4:	6822      	ldr	r2, [r4, #0]
 8002cb6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8002cc6:	e7d1      	b.n	8002c6c <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 8002cc8:	2100      	movs	r1, #0
 8002cca:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f007 f8b8 	bl	8009e44 <HAL_PCDEx_LPM_Callback>
 8002cd4:	e7eb      	b.n	8002cae <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002cd6:	6822      	ldr	r2, [r4, #0]
 8002cd8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f043 0308 	orr.w	r3, r3, #8
 8002ce2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002cf8:	6822      	ldr	r2, [r4, #0]
 8002cfa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f006 ffcf 	bl	8009cac <HAL_PCD_SuspendCallback>
    return;
 8002d0e:	e7ad      	b.n	8002c6c <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002d10:	6822      	ldr	r2, [r4, #0]
 8002d12:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002d22:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8002d26:	b9fb      	cbnz	r3, 8002d68 <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002d28:	6822      	ldr	r2, [r4, #0]
 8002d2a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d38:	6822      	ldr	r2, [r4, #0]
 8002d3a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8002d48:	2101      	movs	r1, #1
 8002d4a:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d54:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8002d58:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002d5c:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002d60:	4620      	mov	r0, r4
 8002d62:	f007 f86f 	bl	8009e44 <HAL_PCDEx_LPM_Callback>
 8002d66:	e781      	b.n	8002c6c <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f006 ff9f 	bl	8009cac <HAL_PCD_SuspendCallback>
    return;
 8002d6e:	e77d      	b.n	8002c6c <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d70:	6822      	ldr	r2, [r4, #0]
 8002d72:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002d82:	4620      	mov	r0, r4
 8002d84:	f006 ff79 	bl	8009c7a <HAL_PCD_SOFCallback>
    return;
 8002d88:	e770      	b.n	8002c6c <HAL_PCD_IRQHandler+0x94>

08002d8a <HAL_PCD_EP_Open>:
{
 8002d8a:	b570      	push	{r4, r5, r6, lr}
 8002d8c:	4605      	mov	r5, r0
 8002d8e:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002d90:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d94:	d126      	bne.n	8002de4 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d96:	f001 0007 	and.w	r0, r1, #7
 8002d9a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8002d9e:	00c9      	lsls	r1, r1, #3
 8002da0:	f501 76b4 	add.w	r6, r1, #360	; 0x168
 8002da4:	19a9      	adds	r1, r5, r6
    ep->is_in = 0U;
 8002da6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002daa:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002dae:	2600      	movs	r6, #0
 8002db0:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db4:	f004 0407 	and.w	r4, r4, #7
 8002db8:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8002dba:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8002dbc:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8002dbe:	784a      	ldrb	r2, [r1, #1]
 8002dc0:	b102      	cbz	r2, 8002dc4 <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 8002dc2:	81cc      	strh	r4, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d017      	beq.n	8002df8 <HAL_PCD_EP_Open+0x6e>
  __HAL_LOCK(hpcd);
 8002dc8:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d016      	beq.n	8002dfe <HAL_PCD_EP_Open+0x74>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dd6:	6828      	ldr	r0, [r5, #0]
 8002dd8:	f002 fddc 	bl	8005994 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de4:	f001 0007 	and.w	r0, r1, #7
 8002de8:	3001      	adds	r0, #1
 8002dea:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8002dee:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    ep->is_in = 1U;
 8002df2:	2601      	movs	r6, #1
 8002df4:	704e      	strb	r6, [r1, #1]
 8002df6:	e7dd      	b.n	8002db4 <HAL_PCD_EP_Open+0x2a>
    ep->data_pid_start = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	710b      	strb	r3, [r1, #4]
 8002dfc:	e7e4      	b.n	8002dc8 <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 8002dfe:	2002      	movs	r0, #2
 8002e00:	e7ef      	b.n	8002de2 <HAL_PCD_EP_Open+0x58>

08002e02 <HAL_PCD_EP_Close>:
{
 8002e02:	b510      	push	{r4, lr}
 8002e04:	4604      	mov	r4, r0
 8002e06:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002e08:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002e0c:	d11f      	bne.n	8002e4e <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e0e:	f001 0207 	and.w	r2, r1, #7
 8002e12:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002e16:	00c9      	lsls	r1, r1, #3
 8002e18:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002e1c:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002e1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e22:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002e26:	2000      	movs	r0, #0
 8002e28:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002e32:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d013      	beq.n	8002e62 <HAL_PCD_EP_Close+0x60>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e40:	6820      	ldr	r0, [r4, #0]
 8002e42:	f002 ff59 	bl	8005cf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002e4c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e4e:	f001 0207 	and.w	r2, r1, #7
 8002e52:	3201      	adds	r2, #1
 8002e54:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002e58:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	7048      	strb	r0, [r1, #1]
 8002e60:	e7e4      	b.n	8002e2c <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8002e62:	2002      	movs	r0, #2
 8002e64:	e7f2      	b.n	8002e4c <HAL_PCD_EP_Close+0x4a>

08002e66 <HAL_PCD_EP_Receive>:
{
 8002e66:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e68:	f001 0407 	and.w	r4, r1, #7
 8002e6c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002e70:	00c9      	lsls	r1, r1, #3
 8002e72:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002e76:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8002e78:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8002e7c:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8002e80:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 8002e84:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8002e8e:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e92:	f885 4168 	strb.w	r4, [r5, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e96:	b924      	cbnz	r4, 8002ea2 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e98:	6800      	ldr	r0, [r0, #0]
 8002e9a:	f003 f8b6 	bl	800600a <USB_EPStartXfer>
}
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ea2:	6800      	ldr	r0, [r0, #0]
 8002ea4:	f003 f8b1 	bl	800600a <USB_EPStartXfer>
 8002ea8:	e7f9      	b.n	8002e9e <HAL_PCD_EP_Receive+0x38>

08002eaa <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002eaa:	f001 0107 	and.w	r1, r1, #7
 8002eae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002eb2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8002eb6:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8002eba:	4770      	bx	lr

08002ebc <HAL_PCD_EP_Transmit>:
{
 8002ebc:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ebe:	f001 0507 	and.w	r5, r1, #7
 8002ec2:	1c6c      	adds	r4, r5, #1
 8002ec4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002ec8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8002ecc:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8002ed0:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8002ed4:	63f2      	str	r2, [r6, #60]	; 0x3c
  ep->xfer_len = len;
 8002ed6:	6433      	str	r3, [r6, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
  ep->xfer_len_db = len;
 8002ede:	64b3      	str	r3, [r6, #72]	; 0x48
  ep->xfer_count = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	6473      	str	r3, [r6, #68]	; 0x44
  ep->is_in = 1U;
 8002ee4:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002eea:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eee:	b925      	cbnz	r5, 8002efa <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ef0:	6800      	ldr	r0, [r0, #0]
 8002ef2:	f003 f88a 	bl	800600a <USB_EPStartXfer>
}
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002efa:	6800      	ldr	r0, [r0, #0]
 8002efc:	f003 f885 	bl	800600a <USB_EPStartXfer>
 8002f00:	e7f9      	b.n	8002ef6 <HAL_PCD_EP_Transmit+0x3a>

08002f02 <HAL_PCD_EP_SetStall>:
{
 8002f02:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f04:	f001 0207 	and.w	r2, r1, #7
 8002f08:	6841      	ldr	r1, [r0, #4]
 8002f0a:	428a      	cmp	r2, r1
 8002f0c:	d82a      	bhi.n	8002f64 <HAL_PCD_EP_SetStall+0x62>
{
 8002f0e:	b510      	push	{r4, lr}
 8002f10:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8002f12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f16:	d11d      	bne.n	8002f54 <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 8002f18:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002f1c:	00c9      	lsls	r1, r1, #3
 8002f1e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002f22:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002f24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f28:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8002f32:	2301      	movs	r3, #1
 8002f34:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f36:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002f38:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d013      	beq.n	8002f68 <HAL_PCD_EP_SetStall+0x66>
 8002f40:	2301      	movs	r3, #1
 8002f42:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f46:	6820      	ldr	r0, [r4, #0]
 8002f48:	f002 ffc1 	bl	8005ece <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002f52:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f54:	1c53      	adds	r3, r2, #1
 8002f56:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002f5a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8002f5e:	2001      	movs	r0, #1
 8002f60:	7048      	strb	r0, [r1, #1]
 8002f62:	e7e6      	b.n	8002f32 <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 8002f64:	2001      	movs	r0, #1
}
 8002f66:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8002f68:	2002      	movs	r0, #2
 8002f6a:	e7f2      	b.n	8002f52 <HAL_PCD_EP_SetStall+0x50>

08002f6c <HAL_PCD_EP_ClrStall>:
{
 8002f6c:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f6e:	f001 010f 	and.w	r1, r1, #15
 8002f72:	6842      	ldr	r2, [r0, #4]
 8002f74:	4291      	cmp	r1, r2
 8002f76:	d830      	bhi.n	8002fda <HAL_PCD_EP_ClrStall+0x6e>
{
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8002f7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f80:	d121      	bne.n	8002fc6 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f82:	f003 0207 	and.w	r2, r3, #7
 8002f86:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002f8a:	00c9      	lsls	r1, r1, #3
 8002f8c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002f90:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002f92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f96:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002faa:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d015      	beq.n	8002fde <HAL_PCD_EP_ClrStall+0x72>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fb8:	6820      	ldr	r0, [r4, #0]
 8002fba:	f002 ffad 	bl	8005f18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002fc4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc6:	f003 0207 	and.w	r2, r3, #7
 8002fca:	3201      	adds	r2, #1
 8002fcc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002fd0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	7048      	strb	r0, [r1, #1]
 8002fd8:	e7e2      	b.n	8002fa0 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8002fda:	2001      	movs	r0, #1
}
 8002fdc:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8002fde:	2002      	movs	r0, #2
 8002fe0:	e7f0      	b.n	8002fc4 <HAL_PCD_EP_ClrStall+0x58>

08002fe2 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002fe2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002fe6:	d00b      	beq.n	8003000 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe8:	f001 0107 	and.w	r1, r1, #7
 8002fec:	3101      	adds	r1, #1
 8002fee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002ff2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ff6:	b952      	cbnz	r2, 800300e <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ff8:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ffa:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003000:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003004:	00c9      	lsls	r1, r1, #3
 8003006:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800300a:	4401      	add	r1, r0
 800300c:	e7f3      	b.n	8002ff6 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 800300e:	2201      	movs	r2, #1
 8003010:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003012:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	814b      	strh	r3, [r1, #10]
 8003018:	e7f0      	b.n	8002ffc <HAL_PCDEx_PMAConfig+0x1a>

0800301a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800301a:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 800301c:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 800301e:	2101      	movs	r1, #1
 8003020:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003024:	2000      	movs	r0, #0
 8003026:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800302a:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800302e:	b29b      	uxth	r3, r3
 8003030:	430b      	orrs	r3, r1
 8003032:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003036:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800303a:	b29b      	uxth	r3, r3
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003044:	4770      	bx	lr
	...

08003048 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003048:	4a02      	ldr	r2, [pc, #8]	; (8003054 <HAL_PWR_EnableBkUpAccess+0xc>)
 800304a:	6813      	ldr	r3, [r2, #0]
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	6013      	str	r3, [r2, #0]
}
 8003052:	4770      	bx	lr
 8003054:	58000400 	.word	0x58000400

08003058 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003058:	4b02      	ldr	r3, [pc, #8]	; (8003064 <HAL_PWREx_GetVoltageRange+0xc>)
 800305a:	6818      	ldr	r0, [r3, #0]
}
 800305c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	58000400 	.word	0x58000400

08003068 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003068:	4a02      	ldr	r2, [pc, #8]	; (8003074 <HAL_PWREx_EnableVddUSB+0xc>)
 800306a:	6853      	ldr	r3, [r2, #4]
 800306c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003070:	6053      	str	r3, [r2, #4]
}
 8003072:	4770      	bx	lr
 8003074:	58000400 	.word	0x58000400

08003078 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307a:	b08d      	sub	sp, #52	; 0x34
 800307c:	4605      	mov	r5, r0
 800307e:	460f      	mov	r7, r1
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003080:	4c2a      	ldr	r4, [pc, #168]	; (800312c <RCC_SetFlashLatency+0xb4>)
 8003082:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003086:	ae0c      	add	r6, sp, #48	; 0x30
 8003088:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800308c:	ab05      	add	r3, sp, #20
 800308e:	f104 0210 	add.w	r2, r4, #16
 8003092:	ca07      	ldmia	r2, {r0, r1, r2}
 8003094:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003098:	ae01      	add	r6, sp, #4
 800309a:	341c      	adds	r4, #28
 800309c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030a0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030a4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80030a8:	d01b      	beq.n	80030e2 <RCC_SetFlashLatency+0x6a>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d822      	bhi.n	80030f6 <RCC_SetFlashLatency+0x7e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80030b0:	aa0c      	add	r2, sp, #48	; 0x30
 80030b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80030b6:	f852 2c1c 	ldr.w	r2, [r2, #-28]
 80030ba:	42aa      	cmp	r2, r5
 80030bc:	d215      	bcs.n	80030ea <RCC_SetFlashLatency+0x72>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80030be:	3301      	adds	r3, #1
 80030c0:	e7f4      	b.n	80030ac <RCC_SetFlashLatency+0x34>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80030c2:	3301      	adds	r3, #1
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d80e      	bhi.n	80030e6 <RCC_SetFlashLatency+0x6e>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80030c8:	aa0c      	add	r2, sp, #48	; 0x30
 80030ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80030ce:	f852 2c10 	ldr.w	r2, [r2, #-16]
 80030d2:	42aa      	cmp	r2, r5
 80030d4:	d3f5      	bcc.n	80030c2 <RCC_SetFlashLatency+0x4a>
        latency = FLASH_LATENCY_RANGE[index];
 80030d6:	aa0c      	add	r2, sp, #48	; 0x30
 80030d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80030dc:	f853 5c2c 	ldr.w	r5, [r3, #-44]
        break;
 80030e0:	e00a      	b.n	80030f8 <RCC_SetFlashLatency+0x80>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	e7ee      	b.n	80030c4 <RCC_SetFlashLatency+0x4c>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80030e6:	2500      	movs	r5, #0
 80030e8:	e006      	b.n	80030f8 <RCC_SetFlashLatency+0x80>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80030ea:	aa0c      	add	r2, sp, #48	; 0x30
 80030ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80030f0:	f853 5c2c 	ldr.w	r5, [r3, #-44]
        break;
 80030f4:	e000      	b.n	80030f8 <RCC_SetFlashLatency+0x80>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80030f6:	2500      	movs	r5, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80030f8:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <RCC_SetFlashLatency+0xb8>)
 80030fa:	6813      	ldr	r3, [r2, #0]
 80030fc:	f023 0307 	bic.w	r3, r3, #7
 8003100:	432b      	orrs	r3, r5
 8003102:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003104:	f7fe f834 	bl	8001170 <HAL_GetTick>
 8003108:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800310a:	4b09      	ldr	r3, [pc, #36]	; (8003130 <RCC_SetFlashLatency+0xb8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	42ab      	cmp	r3, r5
 8003114:	d006      	beq.n	8003124 <RCC_SetFlashLatency+0xac>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003116:	f7fe f82b 	bl	8001170 <HAL_GetTick>
 800311a:	1b00      	subs	r0, r0, r4
 800311c:	2802      	cmp	r0, #2
 800311e:	d9f4      	bls.n	800310a <RCC_SetFlashLatency+0x92>
    {
      return HAL_TIMEOUT;
 8003120:	2003      	movs	r0, #3
 8003122:	e000      	b.n	8003126 <RCC_SetFlashLatency+0xae>
    }
  }
  return HAL_OK;
 8003124:	2000      	movs	r0, #0
}
 8003126:	b00d      	add	sp, #52	; 0x34
 8003128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800312a:	bf00      	nop
 800312c:	08009f24 	.word	0x08009f24
 8003130:	58004000 	.word	0x58004000

08003134 <RCC_SetFlashLatencyFromMSIRange>:
{
 8003134:	b510      	push	{r4, lr}
  if (MSI_Range > RCC_MSIRANGE_11)
 8003136:	28b0      	cmp	r0, #176	; 0xb0
 8003138:	d916      	bls.n	8003168 <RCC_SetFlashLatencyFromMSIRange+0x34>
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 800313c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800313e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003142:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	4a0b      	ldr	r2, [pc, #44]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0x44>)
 800314c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003150:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003154:	f7ff ff80 	bl	8003058 <HAL_PWREx_GetVoltageRange>
 8003158:	4601      	mov	r1, r0
 800315a:	4808      	ldr	r0, [pc, #32]	; (800317c <RCC_SetFlashLatencyFromMSIRange+0x48>)
 800315c:	fba0 3004 	umull	r3, r0, r0, r4
 8003160:	0c80      	lsrs	r0, r0, #18
 8003162:	f7ff ff89 	bl	8003078 <RCC_SetFlashLatency>
}
 8003166:	bd10      	pop	{r4, pc}
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003168:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800316c:	4b01      	ldr	r3, [pc, #4]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 800316e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8003172:	e7e4      	b.n	800313e <RCC_SetFlashLatencyFromMSIRange+0xa>
 8003174:	0800a080 	.word	0x0800a080
 8003178:	0800a020 	.word	0x0800a020
 800317c:	431bde83 	.word	0x431bde83

08003180 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	689b      	ldr	r3, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003186:	f013 030c 	ands.w	r3, r3, #12
 800318a:	d10d      	bne.n	80031a8 <HAL_RCC_GetSysClockFreq+0x28>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003196:	2bb0      	cmp	r3, #176	; 0xb0
 8003198:	d804      	bhi.n	80031a4 <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	4a25      	ldr	r2, [pc, #148]	; (8003234 <HAL_RCC_GetSysClockFreq+0xb4>)
 800319e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80031a2:	4770      	bx	lr
    msiRange = LL_RCC_MSIRANGE_11;
 80031a4:	23b0      	movs	r3, #176	; 0xb0
 80031a6:	e7f8      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x1a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d03e      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0xaa>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d010      	beq.n	80031d2 <HAL_RCC_GetSysClockFreq+0x52>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80031b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d01f      	beq.n	80031fe <HAL_RCC_GetSysClockFreq+0x7e>
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d10f      	bne.n	80031e2 <HAL_RCC_GetSysClockFreq+0x62>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80031c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80031cc:	d12b      	bne.n	8003226 <HAL_RCC_GetSysClockFreq+0xa6>
          pllinputfreq = HSE_VALUE;
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d0:	e016      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x80>
 80031d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80031dc:	d027      	beq.n	800322e <HAL_RCC_GetSysClockFreq+0xae>
      sysclockfreq = HSE_VALUE / 2U;
 80031de:	4817      	ldr	r0, [pc, #92]	; (800323c <HAL_RCC_GetSysClockFreq+0xbc>)
 80031e0:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 80031ec:	2bb0      	cmp	r3, #176	; 0xb0
 80031ee:	d804      	bhi.n	80031fa <HAL_RCC_GetSysClockFreq+0x7a>
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	4a10      	ldr	r2, [pc, #64]	; (8003234 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        break;
 80031f8:	e002      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x80>
    msiRange = LL_RCC_MSIRANGE_11;
 80031fa:	23b0      	movs	r3, #176	; 0xb0
 80031fc:	e7f8      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x70>
    switch (pllsource)
 80031fe:	4b0f      	ldr	r3, [pc, #60]	; (800323c <HAL_RCC_GetSysClockFreq+0xbc>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003204:	68d0      	ldr	r0, [r2, #12]
 8003206:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800320a:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800320e:	68d3      	ldr	r3, [r2, #12]
 8003210:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003214:	3301      	adds	r3, #1
 8003216:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800321a:	68d3      	ldr	r3, [r2, #12]
 800321c:	0f5b      	lsrs	r3, r3, #29
 800321e:	3301      	adds	r3, #1
 8003220:	fbb0 f0f3 	udiv	r0, r0, r3
 8003224:	4770      	bx	lr
          pllinputfreq = HSE_VALUE / 2U;
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003228:	e7ea      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x80>
    sysclockfreq = HSI_VALUE;
 800322a:	4804      	ldr	r0, [pc, #16]	; (800323c <HAL_RCC_GetSysClockFreq+0xbc>)
 800322c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800322e:	4802      	ldr	r0, [pc, #8]	; (8003238 <HAL_RCC_GetSysClockFreq+0xb8>)
}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	0800a080 	.word	0x0800a080
 8003238:	01e84800 	.word	0x01e84800
 800323c:	00f42400 	.word	0x00f42400

08003240 <HAL_RCC_GetHCLKFreq>:
{
 8003240:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003242:	f7ff ff9d 	bl	8003180 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003250:	4a02      	ldr	r2, [pc, #8]	; (800325c <HAL_RCC_GetHCLKFreq+0x1c>)
 8003252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003256:	fbb0 f0f3 	udiv	r0, r0, r3
 800325a:	bd08      	pop	{r3, pc}
 800325c:	0800a020 	.word	0x0800a020

08003260 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003260:	2800      	cmp	r0, #0
 8003262:	f000 837e 	beq.w	8003962 <HAL_RCC_OscConfig+0x702>
{
 8003266:	b538      	push	{r3, r4, r5, lr}
 8003268:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800326a:	6803      	ldr	r3, [r0, #0]
 800326c:	f013 0f20 	tst.w	r3, #32
 8003270:	d07f      	beq.n	8003372 <HAL_RCC_OscConfig+0x112>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003276:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003278:	68d2      	ldr	r2, [r2, #12]
 800327a:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800327e:	f013 030c 	ands.w	r3, r3, #12
 8003282:	d01d      	beq.n	80032c0 <HAL_RCC_OscConfig+0x60>
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d019      	beq.n	80032bc <HAL_RCC_OscConfig+0x5c>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003288:	69e3      	ldr	r3, [r4, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 809e 	beq.w	80033cc <HAL_RCC_OscConfig+0x16c>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003294:	6813      	ldr	r3, [r2, #0]
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800329c:	f7fd ff68 	bl	8001170 <HAL_GetTick>
 80032a0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f013 0f02 	tst.w	r3, #2
 80032ac:	d152      	bne.n	8003354 <HAL_RCC_OscConfig+0xf4>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ae:	f7fd ff5f 	bl	8001170 <HAL_GetTick>
 80032b2:	1b40      	subs	r0, r0, r5
 80032b4:	2802      	cmp	r0, #2
 80032b6:	d9f4      	bls.n	80032a2 <HAL_RCC_OscConfig+0x42>
            return HAL_TIMEOUT;
 80032b8:	2003      	movs	r0, #3
 80032ba:	e35d      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80032bc:	2a01      	cmp	r2, #1
 80032be:	d1e3      	bne.n	8003288 <HAL_RCC_OscConfig+0x28>
 80032c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f013 0f02 	tst.w	r3, #2
 80032ca:	d003      	beq.n	80032d4 <HAL_RCC_OscConfig+0x74>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032cc:	69e3      	ldr	r3, [r4, #28]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8349 	beq.w	8003966 <HAL_RCC_OscConfig+0x706>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80032d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 80032e0:	2bb0      	cmp	r3, #176	; 0xb0
 80032e2:	d820      	bhi.n	8003326 <HAL_RCC_OscConfig+0xc6>
 80032e4:	4298      	cmp	r0, r3
 80032e6:	d920      	bls.n	800332a <HAL_RCC_OscConfig+0xca>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032e8:	f7ff ff24 	bl	8003134 <RCC_SetFlashLatencyFromMSIRange>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	f040 833c 	bne.w	800396a <HAL_RCC_OscConfig+0x70a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80032f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f8:	6811      	ldr	r1, [r2, #0]
 80032fa:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80032fe:	430b      	orrs	r3, r1
 8003300:	6013      	str	r3, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003302:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003304:	6853      	ldr	r3, [r2, #4]
 8003306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800330a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800330e:	6053      	str	r3, [r2, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003310:	f7ff ff96 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003314:	4bc4      	ldr	r3, [pc, #784]	; (8003628 <HAL_RCC_OscConfig+0x3c8>)
 8003316:	6018      	str	r0, [r3, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003318:	4bc4      	ldr	r3, [pc, #784]	; (800362c <HAL_RCC_OscConfig+0x3cc>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	f7fd fd76 	bl	8000e0c <HAL_InitTick>
 8003320:	b338      	cbz	r0, 8003372 <HAL_RCC_OscConfig+0x112>
          return HAL_ERROR;
 8003322:	2001      	movs	r0, #1
 8003324:	e328      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
    msiRange = LL_RCC_MSIRANGE_11;
 8003326:	23b0      	movs	r3, #176	; 0xb0
 8003328:	e7dc      	b.n	80032e4 <HAL_RCC_OscConfig+0x84>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800332a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800332e:	6813      	ldr	r3, [r2, #0]
 8003330:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003334:	4318      	orrs	r0, r3
 8003336:	6010      	str	r0, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003338:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800333a:	6853      	ldr	r3, [r2, #4]
 800333c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003340:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003344:	6053      	str	r3, [r2, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003346:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003348:	f7ff fef4 	bl	8003134 <RCC_SetFlashLatencyFromMSIRange>
 800334c:	2800      	cmp	r0, #0
 800334e:	d0df      	beq.n	8003310 <HAL_RCC_OscConfig+0xb0>
            return HAL_ERROR;
 8003350:	2001      	movs	r0, #1
 8003352:	e311      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003354:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003356:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800335a:	6811      	ldr	r1, [r2, #0]
 800335c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8003360:	430b      	orrs	r3, r1
 8003362:	6013      	str	r3, [r2, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003364:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003366:	6853      	ldr	r3, [r2, #4]
 8003368:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800336c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003370:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	f013 0f01 	tst.w	r3, #1
 8003378:	d04a      	beq.n	8003410 <HAL_RCC_OscConfig+0x1b0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800337a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800337e:	6893      	ldr	r3, [r2, #8]
 8003380:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003384:	68d2      	ldr	r2, [r2, #12]
 8003386:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800338a:	2b08      	cmp	r3, #8
 800338c:	d036      	beq.n	80033fc <HAL_RCC_OscConfig+0x19c>
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d032      	beq.n	80033f8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003392:	6863      	ldr	r3, [r4, #4]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d063      	beq.n	8003462 <HAL_RCC_OscConfig+0x202>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800339a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800339e:	6813      	ldr	r3, [r2, #0]
 80033a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a6:	6863      	ldr	r3, [r4, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d061      	beq.n	8003470 <HAL_RCC_OscConfig+0x210>
        tickstart = HAL_GetTick();
 80033ac:	f7fd fee0 	bl	8001170 <HAL_GetTick>
 80033b0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80033bc:	d128      	bne.n	8003410 <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033be:	f7fd fed7 	bl	8001170 <HAL_GetTick>
 80033c2:	1b40      	subs	r0, r0, r5
 80033c4:	2864      	cmp	r0, #100	; 0x64
 80033c6:	d9f4      	bls.n	80033b2 <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 80033c8:	2003      	movs	r0, #3
 80033ca:	e2d5      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80033cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033d0:	6813      	ldr	r3, [r2, #0]
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033d8:	f7fd feca 	bl	8001170 <HAL_GetTick>
 80033dc:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80033de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f013 0f02 	tst.w	r3, #2
 80033e8:	d0c3      	beq.n	8003372 <HAL_RCC_OscConfig+0x112>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033ea:	f7fd fec1 	bl	8001170 <HAL_GetTick>
 80033ee:	1b40      	subs	r0, r0, r5
 80033f0:	2802      	cmp	r0, #2
 80033f2:	d9f4      	bls.n	80033de <HAL_RCC_OscConfig+0x17e>
            return HAL_TIMEOUT;
 80033f4:	2003      	movs	r0, #3
 80033f6:	e2bf      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80033f8:	2a03      	cmp	r2, #3
 80033fa:	d1ca      	bne.n	8003392 <HAL_RCC_OscConfig+0x132>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80033fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003406:	d003      	beq.n	8003410 <HAL_RCC_OscConfig+0x1b0>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	6863      	ldr	r3, [r4, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 82af 	beq.w	800396e <HAL_RCC_OscConfig+0x70e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	f013 0f02 	tst.w	r3, #2
 8003416:	d050      	beq.n	80034ba <HAL_RCC_OscConfig+0x25a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003418:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800341c:	6893      	ldr	r3, [r2, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003422:	68d2      	ldr	r2, [r2, #12]
 8003424:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003428:	2b04      	cmp	r3, #4
 800342a:	d033      	beq.n	8003494 <HAL_RCC_OscConfig+0x234>
 800342c:	2b0c      	cmp	r3, #12
 800342e:	d02f      	beq.n	8003490 <HAL_RCC_OscConfig+0x230>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003430:	68e3      	ldr	r3, [r4, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d077      	beq.n	8003526 <HAL_RCC_OscConfig+0x2c6>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800343a:	6813      	ldr	r3, [r2, #0]
 800343c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003440:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003442:	f7fd fe95 	bl	8001170 <HAL_GetTick>
 8003446:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003452:	d15e      	bne.n	8003512 <HAL_RCC_OscConfig+0x2b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003454:	f7fd fe8c 	bl	8001170 <HAL_GetTick>
 8003458:	1b40      	subs	r0, r0, r5
 800345a:	2802      	cmp	r0, #2
 800345c:	d9f4      	bls.n	8003448 <HAL_RCC_OscConfig+0x1e8>
            return HAL_TIMEOUT;
 800345e:	2003      	movs	r0, #3
 8003460:	e28a      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003462:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003466:	6813      	ldr	r3, [r2, #0]
 8003468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346c:	6013      	str	r3, [r2, #0]
}
 800346e:	e79a      	b.n	80033a6 <HAL_RCC_OscConfig+0x146>
        tickstart = HAL_GetTick();
 8003470:	f7fd fe7e 	bl	8001170 <HAL_GetTick>
 8003474:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003480:	d0c6      	beq.n	8003410 <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003482:	f7fd fe75 	bl	8001170 <HAL_GetTick>
 8003486:	1b40      	subs	r0, r0, r5
 8003488:	2864      	cmp	r0, #100	; 0x64
 800348a:	d9f4      	bls.n	8003476 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 800348c:	2003      	movs	r0, #3
 800348e:	e273      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003490:	2a02      	cmp	r2, #2
 8003492:	d1cd      	bne.n	8003430 <HAL_RCC_OscConfig+0x1d0>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800349e:	d003      	beq.n	80034a8 <HAL_RCC_OscConfig+0x248>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034a0:	68e3      	ldr	r3, [r4, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8265 	beq.w	8003972 <HAL_RCC_OscConfig+0x712>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a8:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80034aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ae:	6853      	ldr	r3, [r2, #4]
 80034b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80034b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80034b8:	6053      	str	r3, [r2, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	f013 0f18 	tst.w	r3, #24
 80034c0:	f000 80e8 	beq.w	8003694 <HAL_RCC_OscConfig+0x434>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034c4:	6962      	ldr	r2, [r4, #20]
 80034c6:	2a00      	cmp	r2, #0
 80034c8:	f000 80b2 	beq.w	8003630 <HAL_RCC_OscConfig+0x3d0>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80034cc:	f013 0f10 	tst.w	r3, #16
 80034d0:	d07a      	beq.n	80035c8 <HAL_RCC_OscConfig+0x368>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80034d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034da:	f013 0f02 	tst.w	r3, #2
 80034de:	d138      	bne.n	8003552 <HAL_RCC_OscConfig+0x2f2>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80034e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 80034f0:	f7fd fe3e 	bl	8001170 <HAL_GetTick>
 80034f4:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80034f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fe:	f013 0f02 	tst.w	r3, #2
 8003502:	d126      	bne.n	8003552 <HAL_RCC_OscConfig+0x2f2>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003504:	f7fd fe34 	bl	8001170 <HAL_GetTick>
 8003508:	1b40      	subs	r0, r0, r5
 800350a:	2802      	cmp	r0, #2
 800350c:	d9f3      	bls.n	80034f6 <HAL_RCC_OscConfig+0x296>
              return HAL_TIMEOUT;
 800350e:	2003      	movs	r0, #3
 8003510:	e232      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003512:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003518:	6853      	ldr	r3, [r2, #4]
 800351a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800351e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003522:	6053      	str	r3, [r2, #4]
}
 8003524:	e7c9      	b.n	80034ba <HAL_RCC_OscConfig+0x25a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800352a:	6813      	ldr	r3, [r2, #0]
 800352c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003530:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003532:	f7fd fe1d 	bl	8001170 <HAL_GetTick>
 8003536:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003542:	d0ba      	beq.n	80034ba <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003544:	f7fd fe14 	bl	8001170 <HAL_GetTick>
 8003548:	1b40      	subs	r0, r0, r5
 800354a:	2802      	cmp	r0, #2
 800354c:	d9f4      	bls.n	8003538 <HAL_RCC_OscConfig+0x2d8>
            return HAL_TIMEOUT;
 800354e:	2003      	movs	r0, #3
 8003550:	e212      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003556:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800355a:	f043 0304 	orr.w	r3, r3, #4
 800355e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 8003562:	f7fd fe05 	bl	8001170 <HAL_GetTick>
 8003566:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003570:	f013 0f08 	tst.w	r3, #8
 8003574:	d106      	bne.n	8003584 <HAL_RCC_OscConfig+0x324>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003576:	f7fd fdfb 	bl	8001170 <HAL_GetTick>
 800357a:	1b40      	subs	r0, r0, r5
 800357c:	2803      	cmp	r0, #3
 800357e:	d9f3      	bls.n	8003568 <HAL_RCC_OscConfig+0x308>
            return HAL_TIMEOUT;
 8003580:	2003      	movs	r0, #3
 8003582:	e1f9      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003584:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800358a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800358e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003592:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003596:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800359a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 80035a6:	f7fd fde3 	bl	8001170 <HAL_GetTick>
 80035aa:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80035ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b4:	f013 0f02 	tst.w	r3, #2
 80035b8:	d06c      	beq.n	8003694 <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035ba:	f7fd fdd9 	bl	8001170 <HAL_GetTick>
 80035be:	1b40      	subs	r0, r0, r5
 80035c0:	2802      	cmp	r0, #2
 80035c2:	d9f3      	bls.n	80035ac <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80035c4:	2003      	movs	r0, #3
 80035c6:	e1d7      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80035c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035cc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 80035d8:	f7fd fdca 	bl	8001170 <HAL_GetTick>
 80035dc:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80035de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035e6:	f013 0f02 	tst.w	r3, #2
 80035ea:	d106      	bne.n	80035fa <HAL_RCC_OscConfig+0x39a>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035ec:	f7fd fdc0 	bl	8001170 <HAL_GetTick>
 80035f0:	1b40      	subs	r0, r0, r5
 80035f2:	2802      	cmp	r0, #2
 80035f4:	d9f3      	bls.n	80035de <HAL_RCC_OscConfig+0x37e>
            return HAL_TIMEOUT;
 80035f6:	2003      	movs	r0, #3
 80035f8:	e1be      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80035fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035fe:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003602:	f023 0304 	bic.w	r3, r3, #4
 8003606:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800360a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003612:	f013 0f08 	tst.w	r3, #8
 8003616:	d03d      	beq.n	8003694 <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003618:	f7fd fdaa 	bl	8001170 <HAL_GetTick>
 800361c:	1b40      	subs	r0, r0, r5
 800361e:	2803      	cmp	r0, #3
 8003620:	d9f3      	bls.n	800360a <HAL_RCC_OscConfig+0x3aa>
            return HAL_TIMEOUT;
 8003622:	2003      	movs	r0, #3
 8003624:	e1a8      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
 8003626:	bf00      	nop
 8003628:	20000010 	.word	0x20000010
 800362c:	20000018 	.word	0x20000018
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003634:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003640:	f7fd fd96 	bl	8001170 <HAL_GetTick>
 8003644:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364e:	f013 0f08 	tst.w	r3, #8
 8003652:	d118      	bne.n	8003686 <HAL_RCC_OscConfig+0x426>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003658:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003664:	f7fd fd84 	bl	8001170 <HAL_GetTick>
 8003668:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800366a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003672:	f013 0f02 	tst.w	r3, #2
 8003676:	d00d      	beq.n	8003694 <HAL_RCC_OscConfig+0x434>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003678:	f7fd fd7a 	bl	8001170 <HAL_GetTick>
 800367c:	1b40      	subs	r0, r0, r5
 800367e:	2802      	cmp	r0, #2
 8003680:	d9f3      	bls.n	800366a <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8003682:	2003      	movs	r0, #3
 8003684:	e178      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003686:	f7fd fd73 	bl	8001170 <HAL_GetTick>
 800368a:	1b40      	subs	r0, r0, r5
 800368c:	2803      	cmp	r0, #3
 800368e:	d9da      	bls.n	8003646 <HAL_RCC_OscConfig+0x3e6>
          return HAL_TIMEOUT;
 8003690:	2003      	movs	r0, #3
 8003692:	e171      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	f013 0f04 	tst.w	r3, #4
 800369a:	d068      	beq.n	800376e <HAL_RCC_OscConfig+0x50e>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800369c:	4bb9      	ldr	r3, [pc, #740]	; (8003984 <HAL_RCC_OscConfig+0x724>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80036a4:	d027      	beq.n	80036f6 <HAL_RCC_OscConfig+0x496>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a6:	68a3      	ldr	r3, [r4, #8]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d035      	beq.n	8003718 <HAL_RCC_OscConfig+0x4b8>
 80036ac:	2b05      	cmp	r3, #5
 80036ae:	d03c      	beq.n	800372a <HAL_RCC_OscConfig+0x4ca>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80036c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80036c4:	f022 0204 	bic.w	r2, r2, #4
 80036c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036cc:	68a3      	ldr	r3, [r4, #8]
 80036ce:	b3db      	cbz	r3, 8003748 <HAL_RCC_OscConfig+0x4e8>
      tickstart = HAL_GetTick();
 80036d0:	f7fd fd4e 	bl	8001170 <HAL_GetTick>
 80036d4:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80036d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f013 0f02 	tst.w	r3, #2
 80036e2:	d144      	bne.n	800376e <HAL_RCC_OscConfig+0x50e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e4:	f7fd fd44 	bl	8001170 <HAL_GetTick>
 80036e8:	1b40      	subs	r0, r0, r5
 80036ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80036ee:	4298      	cmp	r0, r3
 80036f0:	d9f1      	bls.n	80036d6 <HAL_RCC_OscConfig+0x476>
          return HAL_TIMEOUT;
 80036f2:	2003      	movs	r0, #3
 80036f4:	e140      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
      HAL_PWR_EnableBkUpAccess();
 80036f6:	f7ff fca7 	bl	8003048 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80036fa:	f7fd fd39 	bl	8001170 <HAL_GetTick>
 80036fe:	4605      	mov	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003700:	4ba0      	ldr	r3, [pc, #640]	; (8003984 <HAL_RCC_OscConfig+0x724>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003708:	d1cd      	bne.n	80036a6 <HAL_RCC_OscConfig+0x446>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370a:	f7fd fd31 	bl	8001170 <HAL_GetTick>
 800370e:	1b40      	subs	r0, r0, r5
 8003710:	2802      	cmp	r0, #2
 8003712:	d9f5      	bls.n	8003700 <HAL_RCC_OscConfig+0x4a0>
          return HAL_TIMEOUT;
 8003714:	2003      	movs	r0, #3
 8003716:	e12f      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800371c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003728:	e7d0      	b.n	80036cc <HAL_RCC_OscConfig+0x46c>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800372a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003732:	f042 0204 	orr.w	r2, r2, #4
 8003736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800373a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8003746:	e7c1      	b.n	80036cc <HAL_RCC_OscConfig+0x46c>
      tickstart = HAL_GetTick();
 8003748:	f7fd fd12 	bl	8001170 <HAL_GetTick>
 800374c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800374e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f013 0f02 	tst.w	r3, #2
 800375a:	d008      	beq.n	800376e <HAL_RCC_OscConfig+0x50e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375c:	f7fd fd08 	bl	8001170 <HAL_GetTick>
 8003760:	1b40      	subs	r0, r0, r5
 8003762:	f241 3388 	movw	r3, #5000	; 0x1388
 8003766:	4298      	cmp	r0, r3
 8003768:	d9f1      	bls.n	800374e <HAL_RCC_OscConfig+0x4ee>
          return HAL_TIMEOUT;
 800376a:	2003      	movs	r0, #3
 800376c:	e104      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003774:	d033      	beq.n	80037de <HAL_RCC_OscConfig+0x57e>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003776:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003778:	b1c3      	cbz	r3, 80037ac <HAL_RCC_OscConfig+0x54c>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800377a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800377e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800378a:	f7fd fcf1 	bl	8001170 <HAL_GetTick>
 800378e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003798:	f013 0f02 	tst.w	r3, #2
 800379c:	d11f      	bne.n	80037de <HAL_RCC_OscConfig+0x57e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800379e:	f7fd fce7 	bl	8001170 <HAL_GetTick>
 80037a2:	1b40      	subs	r0, r0, r5
 80037a4:	2802      	cmp	r0, #2
 80037a6:	d9f3      	bls.n	8003790 <HAL_RCC_OscConfig+0x530>
          return HAL_TIMEOUT;
 80037a8:	2003      	movs	r0, #3
 80037aa:	e0e5      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80037ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80037bc:	f7fd fcd8 	bl	8001170 <HAL_GetTick>
 80037c0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80037c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ca:	f013 0f02 	tst.w	r3, #2
 80037ce:	d006      	beq.n	80037de <HAL_RCC_OscConfig+0x57e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037d0:	f7fd fcce 	bl	8001170 <HAL_GetTick>
 80037d4:	1b40      	subs	r0, r0, r5
 80037d6:	2802      	cmp	r0, #2
 80037d8:	d9f3      	bls.n	80037c2 <HAL_RCC_OscConfig+0x562>
          return HAL_TIMEOUT;
 80037da:	2003      	movs	r0, #3
 80037dc:	e0cc      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80c8 	beq.w	8003976 <HAL_RCC_OscConfig+0x716>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80037e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ea:	6891      	ldr	r1, [r2, #8]
 80037ec:	f001 010c 	and.w	r1, r1, #12
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80037f0:	68d2      	ldr	r2, [r2, #12]
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d023      	beq.n	800383e <HAL_RCC_OscConfig+0x5de>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f6:	290c      	cmp	r1, #12
 80037f8:	f000 80c1 	beq.w	800397e <HAL_RCC_OscConfig+0x71e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80037fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003806:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	f022 0203 	bic.w	r2, r2, #3
 800380e:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8003816:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800381a:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 800381c:	f7fd fca8 	bl	8001170 <HAL_GetTick>
 8003820:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800382c:	f000 8097 	beq.w	800395e <HAL_RCC_OscConfig+0x6fe>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fd fc9e 	bl	8001170 <HAL_GetTick>
 8003834:	1b00      	subs	r0, r0, r4
 8003836:	2802      	cmp	r0, #2
 8003838:	d9f3      	bls.n	8003822 <HAL_RCC_OscConfig+0x5c2>
            return HAL_TIMEOUT;
 800383a:	2003      	movs	r0, #3
 800383c:	e09c      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383e:	f002 0303 	and.w	r3, r2, #3
 8003842:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003844:	4283      	cmp	r3, r0
 8003846:	d00a      	beq.n	800385e <HAL_RCC_OscConfig+0x5fe>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003848:	290c      	cmp	r1, #12
 800384a:	f000 8096 	beq.w	800397a <HAL_RCC_OscConfig+0x71a>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800384e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8003858:	d022      	beq.n	80038a0 <HAL_RCC_OscConfig+0x640>
            return HAL_ERROR;
 800385a:	2001      	movs	r0, #1
 800385c:	e08c      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800385e:	f002 0370 	and.w	r3, r2, #112	; 0x70
 8003862:	6b60      	ldr	r0, [r4, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003864:	4283      	cmp	r3, r0
 8003866:	d1ef      	bne.n	8003848 <HAL_RCC_OscConfig+0x5e8>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003868:	f3c2 2306 	ubfx	r3, r2, #8, #7
 800386c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800386e:	4283      	cmp	r3, r0
 8003870:	d1ea      	bne.n	8003848 <HAL_RCC_OscConfig+0x5e8>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003872:	f402 1378 	and.w	r3, r2, #4063232	; 0x3e0000
 8003876:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003878:	4283      	cmp	r3, r0
 800387a:	d1e5      	bne.n	8003848 <HAL_RCC_OscConfig+0x5e8>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800387c:	f002 6360 	and.w	r3, r2, #234881024	; 0xe000000
 8003880:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003882:	4283      	cmp	r3, r0
 8003884:	d1e0      	bne.n	8003848 <HAL_RCC_OscConfig+0x5e8>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003886:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 800388a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d1db      	bne.n	8003848 <HAL_RCC_OscConfig+0x5e8>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800389a:	d044      	beq.n	8003926 <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 800389c:	2000      	movs	r0, #0
 800389e:	e06b      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
 80038a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a4:	6813      	ldr	r3, [r2, #0]
 80038a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038aa:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 80038ac:	f7fd fc60 	bl	8001170 <HAL_GetTick>
 80038b0:	4605      	mov	r5, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038bc:	d006      	beq.n	80038cc <HAL_RCC_OscConfig+0x66c>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038be:	f7fd fc57 	bl	8001170 <HAL_GetTick>
 80038c2:	1b40      	subs	r0, r0, r5
 80038c4:	2802      	cmp	r0, #2
 80038c6:	d9f4      	bls.n	80038b2 <HAL_RCC_OscConfig+0x652>
                return HAL_TIMEOUT;
 80038c8:	2003      	movs	r0, #3
 80038ca:	e055      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d0:	68d3      	ldr	r3, [r2, #12]
 80038d2:	492d      	ldr	r1, [pc, #180]	; (8003988 <HAL_RCC_OscConfig+0x728>)
 80038d4:	4019      	ands	r1, r3
 80038d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80038da:	4303      	orrs	r3, r0
 80038dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80038de:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80038e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80038e4:	4303      	orrs	r3, r0
 80038e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80038e8:	4303      	orrs	r3, r0
 80038ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80038ec:	4303      	orrs	r3, r0
 80038ee:	430b      	orrs	r3, r1
 80038f0:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80038f2:	6813      	ldr	r3, [r2, #0]
 80038f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f8:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038fa:	68d3      	ldr	r3, [r2, #12]
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003900:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8003902:	f7fd fc35 	bl	8001170 <HAL_GetTick>
 8003906:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x6c2>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd fc2c 	bl	8001170 <HAL_GetTick>
 8003918:	1b00      	subs	r0, r0, r4
 800391a:	2802      	cmp	r0, #2
 800391c:	d9f4      	bls.n	8003908 <HAL_RCC_OscConfig+0x6a8>
                return HAL_TIMEOUT;
 800391e:	2003      	movs	r0, #3
 8003920:	e02a      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
  return HAL_OK;
 8003922:	2000      	movs	r0, #0
 8003924:	e028      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
 8003926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003930:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003938:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800393a:	f7fd fc19 	bl	8001170 <HAL_GetTick>
 800393e:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x6fa>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394c:	f7fd fc10 	bl	8001170 <HAL_GetTick>
 8003950:	1b03      	subs	r3, r0, r4
 8003952:	2b02      	cmp	r3, #2
 8003954:	d9f4      	bls.n	8003940 <HAL_RCC_OscConfig+0x6e0>
              return HAL_TIMEOUT;
 8003956:	2003      	movs	r0, #3
 8003958:	e00e      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
  return HAL_OK;
 800395a:	2000      	movs	r0, #0
 800395c:	e00c      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
 800395e:	2000      	movs	r0, #0
 8003960:	e00a      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
    return HAL_ERROR;
 8003962:	2001      	movs	r0, #1
}
 8003964:	4770      	bx	lr
        return HAL_ERROR;
 8003966:	2001      	movs	r0, #1
 8003968:	e006      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
            return HAL_ERROR;
 800396a:	2001      	movs	r0, #1
 800396c:	e004      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
        return HAL_ERROR;
 800396e:	2001      	movs	r0, #1
 8003970:	e002      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
        return HAL_ERROR;
 8003972:	2001      	movs	r0, #1
 8003974:	e000      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
  return HAL_OK;
 8003976:	2000      	movs	r0, #0
}
 8003978:	bd38      	pop	{r3, r4, r5, pc}
          return HAL_ERROR;
 800397a:	2001      	movs	r0, #1
 800397c:	e7fc      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
        return HAL_ERROR;
 800397e:	2001      	movs	r0, #1
 8003980:	e7fa      	b.n	8003978 <HAL_RCC_OscConfig+0x718>
 8003982:	bf00      	nop
 8003984:	58000400 	.word	0x58000400
 8003988:	11c1808c 	.word	0x11c1808c

0800398c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800398c:	2800      	cmp	r0, #0
 800398e:	f000 8127 	beq.w	8003be0 <HAL_RCC_ClockConfig+0x254>
{
 8003992:	b570      	push	{r4, r5, r6, lr}
 8003994:	460c      	mov	r4, r1
 8003996:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003998:	4b93      	ldr	r3, [pc, #588]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	428b      	cmp	r3, r1
 80039a2:	d32d      	bcc.n	8003a00 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	f013 0f02 	tst.w	r3, #2
 80039aa:	d13f      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80039ac:	682b      	ldr	r3, [r5, #0]
 80039ae:	f013 0f20 	tst.w	r3, #32
 80039b2:	d153      	bne.n	8003a5c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80039ba:	d16a      	bne.n	8003a92 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	f013 0f04 	tst.w	r3, #4
 80039c2:	f040 8083 	bne.w	8003acc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c6:	682b      	ldr	r3, [r5, #0]
 80039c8:	f013 0f08 	tst.w	r3, #8
 80039cc:	f040 8097 	bne.w	8003afe <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d0:	682b      	ldr	r3, [r5, #0]
 80039d2:	f013 0f01 	tst.w	r3, #1
 80039d6:	f000 80de 	beq.w	8003b96 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039da:	686b      	ldr	r3, [r5, #4]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	f000 80a8 	beq.w	8003b32 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	f000 80ad 	beq.w	8003b42 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f040 80b2 	bne.w	8003b52 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80039ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	f012 0f02 	tst.w	r2, #2
 80039f8:	f040 80b1 	bne.w	8003b5e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80039fc:	2001      	movs	r0, #1
 80039fe:	e0ee      	b.n	8003bde <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a00:	4a79      	ldr	r2, [pc, #484]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003a02:	6813      	ldr	r3, [r2, #0]
 8003a04:	f023 0307 	bic.w	r3, r3, #7
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003a0c:	f7fd fbb0 	bl	8001170 <HAL_GetTick>
 8003a10:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b75      	ldr	r3, [pc, #468]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	42a3      	cmp	r3, r4
 8003a1c:	d0c2      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a1e:	f7fd fba7 	bl	8001170 <HAL_GetTick>
 8003a22:	1b80      	subs	r0, r0, r6
 8003a24:	2802      	cmp	r0, #2
 8003a26:	d9f4      	bls.n	8003a12 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8003a28:	2003      	movs	r0, #3
 8003a2a:	e0d8      	b.n	8003bde <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003a2c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a32:	688a      	ldr	r2, [r1, #8]
 8003a34:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003a3c:	f7fd fb98 	bl	8001170 <HAL_GetTick>
 8003a40:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003a4c:	d1ae      	bne.n	80039ac <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a4e:	f7fd fb8f 	bl	8001170 <HAL_GetTick>
 8003a52:	1b80      	subs	r0, r0, r6
 8003a54:	2802      	cmp	r0, #2
 8003a56:	d9f4      	bls.n	8003a42 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8003a58:	2003      	movs	r0, #3
 8003a5a:	e0c0      	b.n	8003bde <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003a5c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a62:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8003a66:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003a70:	f7fd fb7e 	bl	8001170 <HAL_GetTick>
 8003a74:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a82:	d197      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a84:	f7fd fb74 	bl	8001170 <HAL_GetTick>
 8003a88:	1b80      	subs	r0, r0, r6
 8003a8a:	2802      	cmp	r0, #2
 8003a8c:	d9f3      	bls.n	8003a76 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8003a8e:	2003      	movs	r0, #3
 8003a90:	e0a5      	b.n	8003bde <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003a92:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a98:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8003a9c:	f023 030f 	bic.w	r3, r3, #15
 8003aa0:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8003aa4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003aa8:	f7fd fb62 	bl	8001170 <HAL_GetTick>
 8003aac:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ab6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003aba:	f47f af7f 	bne.w	80039bc <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003abe:	f7fd fb57 	bl	8001170 <HAL_GetTick>
 8003ac2:	1b80      	subs	r0, r0, r6
 8003ac4:	2802      	cmp	r0, #2
 8003ac6:	d9f2      	bls.n	8003aae <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8003ac8:	2003      	movs	r0, #3
 8003aca:	e088      	b.n	8003bde <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003acc:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ad2:	688a      	ldr	r2, [r1, #8]
 8003ad4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003adc:	f7fd fb48 	bl	8001170 <HAL_GetTick>
 8003ae0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003aec:	f47f af6b 	bne.w	80039c6 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003af0:	f7fd fb3e 	bl	8001170 <HAL_GetTick>
 8003af4:	1b80      	subs	r0, r0, r6
 8003af6:	2802      	cmp	r0, #2
 8003af8:	d9f3      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8003afa:	2003      	movs	r0, #3
 8003afc:	e06f      	b.n	8003bde <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003afe:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b04:	6893      	ldr	r3, [r2, #8]
 8003b06:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003b0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b0e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003b10:	f7fd fb2e 	bl	8001170 <HAL_GetTick>
 8003b14:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003b20:	f47f af56 	bne.w	80039d0 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b24:	f7fd fb24 	bl	8001170 <HAL_GetTick>
 8003b28:	1b80      	subs	r0, r0, r6
 8003b2a:	2802      	cmp	r0, #2
 8003b2c:	d9f3      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8003b2e:	2003      	movs	r0, #3
 8003b30:	e055      	b.n	8003bde <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003b3c:	d10f      	bne.n	8003b5e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003b3e:	2001      	movs	r0, #1
 8003b40:	e04d      	b.n	8003bde <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003b4e:	2001      	movs	r0, #1
 8003b50:	e045      	b.n	8003bde <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003b5c:	d042      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b62:	688a      	ldr	r2, [r1, #8]
 8003b64:	f022 0203 	bic.w	r2, r2, #3
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003b6c:	f7fd fb00 	bl	8001170 <HAL_GetTick>
 8003b70:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7c:	686a      	ldr	r2, [r5, #4]
 8003b7e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003b82:	d008      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b84:	f7fd faf4 	bl	8001170 <HAL_GetTick>
 8003b88:	1b80      	subs	r0, r0, r6
 8003b8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b8e:	4298      	cmp	r0, r3
 8003b90:	d9ef      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8003b92:	2003      	movs	r0, #3
 8003b94:	e023      	b.n	8003bde <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b96:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	42a3      	cmp	r3, r4
 8003ba0:	d915      	bls.n	8003bce <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003ba4:	6813      	ldr	r3, [r2, #0]
 8003ba6:	f023 0307 	bic.w	r3, r3, #7
 8003baa:	4323      	orrs	r3, r4
 8003bac:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003bae:	f7fd fadf 	bl	8001170 <HAL_GetTick>
 8003bb2:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	d006      	beq.n	8003bce <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003bc0:	f7fd fad6 	bl	8001170 <HAL_GetTick>
 8003bc4:	1b40      	subs	r0, r0, r5
 8003bc6:	2802      	cmp	r0, #2
 8003bc8:	d9f4      	bls.n	8003bb4 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8003bca:	2003      	movs	r0, #3
 8003bcc:	e007      	b.n	8003bde <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003bce:	f7ff fb37 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003bd4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 8003bd6:	f7fd fad1 	bl	800117c <HAL_GetTickPrio>
 8003bda:	f7fd f917 	bl	8000e0c <HAL_InitTick>
}
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003be0:	2001      	movs	r0, #1
}
 8003be2:	4770      	bx	lr
        return HAL_ERROR;
 8003be4:	2001      	movs	r0, #1
 8003be6:	e7fa      	b.n	8003bde <HAL_RCC_ClockConfig+0x252>
 8003be8:	58004000 	.word	0x58004000
 8003bec:	20000010 	.word	0x20000010

08003bf0 <HAL_RCC_GetPCLK2Freq>:
{
 8003bf0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003bf2:	f7ff fb25 	bl	8003240 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003c00:	4a03      	ldr	r2, [pc, #12]	; (8003c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	f003 031f 	and.w	r3, r3, #31
}
 8003c0a:	40d8      	lsrs	r0, r3
 8003c0c:	bd08      	pop	{r3, pc}
 8003c0e:	bf00      	nop
 8003c10:	0800a060 	.word	0x0800a060

08003c14 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8003c14:	236f      	movs	r3, #111	; 0x6f
 8003c16:	6003      	str	r3, [r0, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	f002 020c 	and.w	r2, r2, #12
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8003c22:	6042      	str	r2, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8003c2a:	6082      	str	r2, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8003c32:	60c2      	str	r2, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	f402 5260 	and.w	r2, r2, #14336	; 0x3800
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8003c3a:	6102      	str	r2, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8003c3c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003c40:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8003c44:	6142      	str	r2, [r0, #20]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003c46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	b2db      	uxtb	r3, r3
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8003c4e:	6183      	str	r3, [r0, #24]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c50:	4b02      	ldr	r3, [pc, #8]	; (8003c5c <HAL_RCC_GetClockConfig+0x48>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	600b      	str	r3, [r1, #0]
}
 8003c5a:	4770      	bx	lr
 8003c5c:	58004000 	.word	0x58004000

08003c60 <RCC_PLL_GetFreqDomain_P>:
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d03a      	beq.n	8003ce4 <RCC_PLL_GetFreqDomain_P+0x84>
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d02e      	beq.n	8003cd0 <RCC_PLL_GetFreqDomain_P+0x70>
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d00b      	beq.n	8003c8e <RCC_PLL_GetFreqDomain_P+0x2e>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003c80:	2bb0      	cmp	r3, #176	; 0xb0
 8003c82:	d82d      	bhi.n	8003ce0 <RCC_PLL_GetFreqDomain_P+0x80>
        pllinputfreq = HSE_VALUE;
      }
      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	4a19      	ldr	r2, [pc, #100]	; (8003cec <RCC_PLL_GetFreqDomain_P+0x8c>)
 8003c88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
      break;
 8003c8c:	e00a      	b.n	8003ca4 <RCC_PLL_GetFreqDomain_P+0x44>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003c98:	2bb0      	cmp	r3, #176	; 0xb0
 8003c9a:	d817      	bhi.n	8003ccc <RCC_PLL_GetFreqDomain_P+0x6c>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	4a13      	ldr	r2, [pc, #76]	; (8003cec <RCC_PLL_GetFreqDomain_P+0x8c>)
 8003ca0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca8:	68d3      	ldr	r3, [r2, #12]
 8003caa:	f3c3 2306 	ubfx	r3, r3, #8, #7
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003cae:	fb03 f300 	mul.w	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003cb2:	68d0      	ldr	r0, [r2, #12]
 8003cb4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8003cb8:	3001      	adds	r0, #1
 8003cba:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003cbe:	68d0      	ldr	r0, [r2, #12]
 8003cc0:	f3c0 4044 	ubfx	r0, r0, #17, #5
 8003cc4:	3001      	adds	r0, #1
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8003cc6:	fbb3 f0f0 	udiv	r0, r3, r0
 8003cca:	4770      	bx	lr
    msiRange = LL_RCC_MSIRANGE_11;
 8003ccc:	23b0      	movs	r3, #176	; 0xb0
 8003cce:	e7e5      	b.n	8003c9c <RCC_PLL_GetFreqDomain_P+0x3c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003cda:	d005      	beq.n	8003ce8 <RCC_PLL_GetFreqDomain_P+0x88>
        pllinputfreq = HSE_VALUE / 2U;
 8003cdc:	4804      	ldr	r0, [pc, #16]	; (8003cf0 <RCC_PLL_GetFreqDomain_P+0x90>)
 8003cde:	e7e1      	b.n	8003ca4 <RCC_PLL_GetFreqDomain_P+0x44>
    msiRange = LL_RCC_MSIRANGE_11;
 8003ce0:	23b0      	movs	r3, #176	; 0xb0
 8003ce2:	e7cf      	b.n	8003c84 <RCC_PLL_GetFreqDomain_P+0x24>
  switch (pllsource)
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <RCC_PLL_GetFreqDomain_P+0x90>)
 8003ce6:	e7dd      	b.n	8003ca4 <RCC_PLL_GetFreqDomain_P+0x44>
        pllinputfreq = HSE_VALUE;
 8003ce8:	4802      	ldr	r0, [pc, #8]	; (8003cf4 <RCC_PLL_GetFreqDomain_P+0x94>)
 8003cea:	e7db      	b.n	8003ca4 <RCC_PLL_GetFreqDomain_P+0x44>
 8003cec:	0800a080 	.word	0x0800a080
 8003cf0:	00f42400 	.word	0x00f42400
 8003cf4:	01e84800 	.word	0x01e84800

08003cf8 <RCC_PLL_GetFreqDomain_Q>:
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d03a      	beq.n	8003d7c <RCC_PLL_GetFreqDomain_Q+0x84>
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d02e      	beq.n	8003d68 <RCC_PLL_GetFreqDomain_Q+0x70>
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d00b      	beq.n	8003d26 <RCC_PLL_GetFreqDomain_Q+0x2e>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003d18:	2bb0      	cmp	r3, #176	; 0xb0
 8003d1a:	d82d      	bhi.n	8003d78 <RCC_PLL_GetFreqDomain_Q+0x80>
      }

      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	4a19      	ldr	r2, [pc, #100]	; (8003d84 <RCC_PLL_GetFreqDomain_Q+0x8c>)
 8003d20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
      break;
 8003d24:	e00a      	b.n	8003d3c <RCC_PLL_GetFreqDomain_Q+0x44>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003d30:	2bb0      	cmp	r3, #176	; 0xb0
 8003d32:	d817      	bhi.n	8003d64 <RCC_PLL_GetFreqDomain_Q+0x6c>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <RCC_PLL_GetFreqDomain_Q+0x8c>)
 8003d38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d40:	68d3      	ldr	r3, [r2, #12]
 8003d42:	f3c3 2306 	ubfx	r3, r3, #8, #7
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003d46:	fb03 f300 	mul.w	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003d4a:	68d0      	ldr	r0, [r2, #12]
 8003d4c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8003d50:	3001      	adds	r0, #1
 8003d52:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8003d56:	68d0      	ldr	r0, [r2, #12]
 8003d58:	f3c0 6042 	ubfx	r0, r0, #25, #3
 8003d5c:	3001      	adds	r0, #1
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8003d5e:	fbb3 f0f0 	udiv	r0, r3, r0
 8003d62:	4770      	bx	lr
    msiRange = LL_RCC_MSIRANGE_11;
 8003d64:	23b0      	movs	r3, #176	; 0xb0
 8003d66:	e7e5      	b.n	8003d34 <RCC_PLL_GetFreqDomain_Q+0x3c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003d72:	d005      	beq.n	8003d80 <RCC_PLL_GetFreqDomain_Q+0x88>
        pllinputfreq = HSE_VALUE / 2U;
 8003d74:	4804      	ldr	r0, [pc, #16]	; (8003d88 <RCC_PLL_GetFreqDomain_Q+0x90>)
 8003d76:	e7e1      	b.n	8003d3c <RCC_PLL_GetFreqDomain_Q+0x44>
    msiRange = LL_RCC_MSIRANGE_11;
 8003d78:	23b0      	movs	r3, #176	; 0xb0
 8003d7a:	e7cf      	b.n	8003d1c <RCC_PLL_GetFreqDomain_Q+0x24>
  switch (pllsource)
 8003d7c:	4802      	ldr	r0, [pc, #8]	; (8003d88 <RCC_PLL_GetFreqDomain_Q+0x90>)
 8003d7e:	e7dd      	b.n	8003d3c <RCC_PLL_GetFreqDomain_Q+0x44>
        pllinputfreq = HSE_VALUE;
 8003d80:	4802      	ldr	r0, [pc, #8]	; (8003d8c <RCC_PLL_GetFreqDomain_Q+0x94>)
 8003d82:	e7db      	b.n	8003d3c <RCC_PLL_GetFreqDomain_Q+0x44>
 8003d84:	0800a080 	.word	0x0800a080
 8003d88:	00f42400 	.word	0x00f42400
 8003d8c:	01e84800 	.word	0x01e84800

08003d90 <RCC_PLLSAI1_GetFreqDomain_R>:
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0303 	and.w	r3, r3, #3

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d039      	beq.n	8003e12 <RCC_PLLSAI1_GetFreqDomain_R+0x82>
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d02d      	beq.n	8003dfe <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d00b      	beq.n	8003dbe <RCC_PLLSAI1_GetFreqDomain_R+0x2e>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003db0:	2bb0      	cmp	r3, #176	; 0xb0
 8003db2:	d82c      	bhi.n	8003e0e <RCC_PLLSAI1_GetFreqDomain_R+0x7e>
        pllinputfreq = HSE_VALUE;
      }
      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	4a19      	ldr	r2, [pc, #100]	; (8003e1c <RCC_PLLSAI1_GetFreqDomain_R+0x8c>)
 8003db8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
      break;
 8003dbc:	e00a      	b.n	8003dd4 <RCC_PLLSAI1_GetFreqDomain_R+0x44>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003dc8:	2bb0      	cmp	r3, #176	; 0xb0
 8003dca:	d816      	bhi.n	8003dfa <RCC_PLLSAI1_GetFreqDomain_R+0x6a>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	4a13      	ldr	r2, [pc, #76]	; (8003e1c <RCC_PLLSAI1_GetFreqDomain_R+0x8c>)
 8003dd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8003dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd8:	6913      	ldr	r3, [r2, #16]
 8003dda:	f3c3 2306 	ubfx	r3, r3, #8, #7
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003dde:	fb03 f300 	mul.w	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003de2:	68d0      	ldr	r0, [r2, #12]
 8003de4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8003de8:	3001      	adds	r0, #1
 8003dea:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8003dee:	6910      	ldr	r0, [r2, #16]
 8003df0:	0f40      	lsrs	r0, r0, #29
 8003df2:	3001      	adds	r0, #1
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 8003df4:	fbb3 f0f0 	udiv	r0, r3, r0
 8003df8:	4770      	bx	lr
    msiRange = LL_RCC_MSIRANGE_11;
 8003dfa:	23b0      	movs	r3, #176	; 0xb0
 8003dfc:	e7e6      	b.n	8003dcc <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003e08:	d005      	beq.n	8003e16 <RCC_PLLSAI1_GetFreqDomain_R+0x86>
        pllinputfreq = HSE_VALUE / 2U;
 8003e0a:	4805      	ldr	r0, [pc, #20]	; (8003e20 <RCC_PLLSAI1_GetFreqDomain_R+0x90>)
 8003e0c:	e7e2      	b.n	8003dd4 <RCC_PLLSAI1_GetFreqDomain_R+0x44>
    msiRange = LL_RCC_MSIRANGE_11;
 8003e0e:	23b0      	movs	r3, #176	; 0xb0
 8003e10:	e7d0      	b.n	8003db4 <RCC_PLLSAI1_GetFreqDomain_R+0x24>
  switch (pllsource)
 8003e12:	4803      	ldr	r0, [pc, #12]	; (8003e20 <RCC_PLLSAI1_GetFreqDomain_R+0x90>)
 8003e14:	e7de      	b.n	8003dd4 <RCC_PLLSAI1_GetFreqDomain_R+0x44>
        pllinputfreq = HSE_VALUE;
 8003e16:	4803      	ldr	r0, [pc, #12]	; (8003e24 <RCC_PLLSAI1_GetFreqDomain_R+0x94>)
 8003e18:	e7dc      	b.n	8003dd4 <RCC_PLLSAI1_GetFreqDomain_R+0x44>
 8003e1a:	bf00      	nop
 8003e1c:	0800a080 	.word	0x0800a080
 8003e20:	00f42400 	.word	0x00f42400
 8003e24:	01e84800 	.word	0x01e84800

08003e28 <RCC_PLLSAI1_GetFreqDomain_P>:
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0303 	and.w	r3, r3, #3

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d03a      	beq.n	8003eac <RCC_PLLSAI1_GetFreqDomain_P+0x84>
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d02e      	beq.n	8003e98 <RCC_PLLSAI1_GetFreqDomain_P+0x70>
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d00b      	beq.n	8003e56 <RCC_PLLSAI1_GetFreqDomain_P+0x2e>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003e48:	2bb0      	cmp	r3, #176	; 0xb0
 8003e4a:	d82d      	bhi.n	8003ea8 <RCC_PLLSAI1_GetFreqDomain_P+0x80>
        pllinputfreq = HSE_VALUE;
      }
      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	4a19      	ldr	r2, [pc, #100]	; (8003eb4 <RCC_PLLSAI1_GetFreqDomain_P+0x8c>)
 8003e50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
      break;
 8003e54:	e00a      	b.n	8003e6c <RCC_PLLSAI1_GetFreqDomain_P+0x44>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003e60:	2bb0      	cmp	r3, #176	; 0xb0
 8003e62:	d817      	bhi.n	8003e94 <RCC_PLLSAI1_GetFreqDomain_P+0x6c>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	4a13      	ldr	r2, [pc, #76]	; (8003eb4 <RCC_PLLSAI1_GetFreqDomain_P+0x8c>)
 8003e68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8003e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e70:	6913      	ldr	r3, [r2, #16]
 8003e72:	f3c3 2306 	ubfx	r3, r3, #8, #7
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003e76:	fb03 f300 	mul.w	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003e7a:	68d0      	ldr	r0, [r2, #12]
 8003e7c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8003e80:	3001      	adds	r0, #1
 8003e82:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8003e86:	6910      	ldr	r0, [r2, #16]
 8003e88:	f3c0 4044 	ubfx	r0, r0, #17, #5
 8003e8c:	3001      	adds	r0, #1
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 8003e8e:	fbb3 f0f0 	udiv	r0, r3, r0
 8003e92:	4770      	bx	lr
    msiRange = LL_RCC_MSIRANGE_11;
 8003e94:	23b0      	movs	r3, #176	; 0xb0
 8003e96:	e7e5      	b.n	8003e64 <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003ea2:	d005      	beq.n	8003eb0 <RCC_PLLSAI1_GetFreqDomain_P+0x88>
        pllinputfreq = HSE_VALUE / 2U;
 8003ea4:	4804      	ldr	r0, [pc, #16]	; (8003eb8 <RCC_PLLSAI1_GetFreqDomain_P+0x90>)
 8003ea6:	e7e1      	b.n	8003e6c <RCC_PLLSAI1_GetFreqDomain_P+0x44>
    msiRange = LL_RCC_MSIRANGE_11;
 8003ea8:	23b0      	movs	r3, #176	; 0xb0
 8003eaa:	e7cf      	b.n	8003e4c <RCC_PLLSAI1_GetFreqDomain_P+0x24>
  switch (pllsource)
 8003eac:	4802      	ldr	r0, [pc, #8]	; (8003eb8 <RCC_PLLSAI1_GetFreqDomain_P+0x90>)
 8003eae:	e7dd      	b.n	8003e6c <RCC_PLLSAI1_GetFreqDomain_P+0x44>
        pllinputfreq = HSE_VALUE;
 8003eb0:	4802      	ldr	r0, [pc, #8]	; (8003ebc <RCC_PLLSAI1_GetFreqDomain_P+0x94>)
 8003eb2:	e7db      	b.n	8003e6c <RCC_PLLSAI1_GetFreqDomain_P+0x44>
 8003eb4:	0800a080 	.word	0x0800a080
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	01e84800 	.word	0x01e84800

08003ec0 <RCC_PLLSAI1_GetFreqDomain_Q>:
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0303 	and.w	r3, r3, #3

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d03a      	beq.n	8003f44 <RCC_PLLSAI1_GetFreqDomain_Q+0x84>
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d02e      	beq.n	8003f30 <RCC_PLLSAI1_GetFreqDomain_Q+0x70>
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d00b      	beq.n	8003eee <RCC_PLLSAI1_GetFreqDomain_Q+0x2e>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003ee0:	2bb0      	cmp	r3, #176	; 0xb0
 8003ee2:	d82d      	bhi.n	8003f40 <RCC_PLLSAI1_GetFreqDomain_Q+0x80>
        pllinputfreq = HSE_VALUE;
      }
      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <RCC_PLLSAI1_GetFreqDomain_Q+0x8c>)
 8003ee8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
      break;
 8003eec:	e00a      	b.n	8003f04 <RCC_PLLSAI1_GetFreqDomain_Q+0x44>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003ef8:	2bb0      	cmp	r3, #176	; 0xb0
 8003efa:	d817      	bhi.n	8003f2c <RCC_PLLSAI1_GetFreqDomain_Q+0x6c>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <RCC_PLLSAI1_GetFreqDomain_Q+0x8c>)
 8003f00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8003f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f08:	6913      	ldr	r3, [r2, #16]
 8003f0a:	f3c3 2306 	ubfx	r3, r3, #8, #7
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003f0e:	fb03 f300 	mul.w	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003f12:	68d0      	ldr	r0, [r2, #12]
 8003f14:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8003f18:	3001      	adds	r0, #1
 8003f1a:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8003f1e:	6910      	ldr	r0, [r2, #16]
 8003f20:	f3c0 6042 	ubfx	r0, r0, #25, #3
 8003f24:	3001      	adds	r0, #1
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8003f26:	fbb3 f0f0 	udiv	r0, r3, r0
 8003f2a:	4770      	bx	lr
    msiRange = LL_RCC_MSIRANGE_11;
 8003f2c:	23b0      	movs	r3, #176	; 0xb0
 8003f2e:	e7e5      	b.n	8003efc <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003f3a:	d005      	beq.n	8003f48 <RCC_PLLSAI1_GetFreqDomain_Q+0x88>
        pllinputfreq = HSE_VALUE / 2U;
 8003f3c:	4804      	ldr	r0, [pc, #16]	; (8003f50 <RCC_PLLSAI1_GetFreqDomain_Q+0x90>)
 8003f3e:	e7e1      	b.n	8003f04 <RCC_PLLSAI1_GetFreqDomain_Q+0x44>
    msiRange = LL_RCC_MSIRANGE_11;
 8003f40:	23b0      	movs	r3, #176	; 0xb0
 8003f42:	e7cf      	b.n	8003ee4 <RCC_PLLSAI1_GetFreqDomain_Q+0x24>
  switch (pllsource)
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <RCC_PLLSAI1_GetFreqDomain_Q+0x90>)
 8003f46:	e7dd      	b.n	8003f04 <RCC_PLLSAI1_GetFreqDomain_Q+0x44>
        pllinputfreq = HSE_VALUE;
 8003f48:	4802      	ldr	r0, [pc, #8]	; (8003f54 <RCC_PLLSAI1_GetFreqDomain_Q+0x94>)
 8003f4a:	e7db      	b.n	8003f04 <RCC_PLLSAI1_GetFreqDomain_Q+0x44>
 8003f4c:	0800a080 	.word	0x0800a080
 8003f50:	00f42400 	.word	0x00f42400
 8003f54:	01e84800 	.word	0x01e84800

08003f58 <RCCEx_PLLSAI1_ConfigNP>:
{
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f60:	6813      	ldr	r3, [r2, #0]
 8003f62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f66:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003f68:	f7fd f902 	bl	8001170 <HAL_GetTick>
 8003f6c:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003f78:	d006      	beq.n	8003f88 <RCCEx_PLLSAI1_ConfigNP+0x30>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f7a:	f7fd f8f9 	bl	8001170 <HAL_GetTick>
 8003f7e:	1b00      	subs	r0, r0, r4
 8003f80:	2802      	cmp	r0, #2
 8003f82:	d9f4      	bls.n	8003f6e <RCCEx_PLLSAI1_ConfigNP+0x16>
      status = HAL_TIMEOUT;
 8003f84:	2403      	movs	r4, #3
 8003f86:	e000      	b.n	8003f8a <RCCEx_PLLSAI1_ConfigNP+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8003f88:	2400      	movs	r4, #0
  if (status == HAL_OK)
 8003f8a:	b10c      	cbz	r4, 8003f90 <RCCEx_PLLSAI1_ConfigNP+0x38>
}
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003f9a:	6829      	ldr	r1, [r5, #0]
 8003f9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003fa0:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	f422 1278 	bic.w	r2, r2, #4063232	; 0x3e0000
 8003fa8:	6869      	ldr	r1, [r5, #4]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003fb4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003fb6:	f7fd f8db 	bl	8001170 <HAL_GetTick>
 8003fba:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003fc6:	d105      	bne.n	8003fd4 <RCCEx_PLLSAI1_ConfigNP+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fc8:	f7fd f8d2 	bl	8001170 <HAL_GetTick>
 8003fcc:	1b80      	subs	r0, r0, r6
 8003fce:	2802      	cmp	r0, #2
 8003fd0:	d9f4      	bls.n	8003fbc <RCCEx_PLLSAI1_ConfigNP+0x64>
        status = HAL_TIMEOUT;
 8003fd2:	2403      	movs	r4, #3
    if (status == HAL_OK)
 8003fd4:	2c00      	cmp	r4, #0
 8003fd6:	d1d9      	bne.n	8003f8c <RCCEx_PLLSAI1_ConfigNP+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fdc:	6913      	ldr	r3, [r2, #16]
 8003fde:	6929      	ldr	r1, [r5, #16]
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6113      	str	r3, [r2, #16]
 8003fe4:	e7d2      	b.n	8003f8c <RCCEx_PLLSAI1_ConfigNP+0x34>

08003fe6 <RCCEx_PLLSAI1_ConfigNQ>:
{
 8003fe6:	b570      	push	{r4, r5, r6, lr}
 8003fe8:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fee:	6813      	ldr	r3, [r2, #0]
 8003ff0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ff4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003ff6:	f7fd f8bb 	bl	8001170 <HAL_GetTick>
 8003ffa:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004006:	d006      	beq.n	8004016 <RCCEx_PLLSAI1_ConfigNQ+0x30>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004008:	f7fd f8b2 	bl	8001170 <HAL_GetTick>
 800400c:	1b00      	subs	r0, r0, r4
 800400e:	2802      	cmp	r0, #2
 8004010:	d9f4      	bls.n	8003ffc <RCCEx_PLLSAI1_ConfigNQ+0x16>
      status = HAL_TIMEOUT;
 8004012:	2403      	movs	r4, #3
 8004014:	e000      	b.n	8004018 <RCCEx_PLLSAI1_ConfigNQ+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8004016:	2400      	movs	r4, #0
  if (status == HAL_OK)
 8004018:	b10c      	cbz	r4, 800401e <RCCEx_PLLSAI1_ConfigNQ+0x38>
}
 800401a:	4620      	mov	r0, r4
 800401c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800401e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8004028:	6829      	ldr	r1, [r5, #0]
 800402a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800402e:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8004036:	68a9      	ldr	r1, [r5, #8]
 8004038:	430a      	orrs	r2, r1
 800403a:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004042:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004044:	f7fd f894 	bl	8001170 <HAL_GetTick>
 8004048:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800404a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004054:	d105      	bne.n	8004062 <RCCEx_PLLSAI1_ConfigNQ+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004056:	f7fd f88b 	bl	8001170 <HAL_GetTick>
 800405a:	1b80      	subs	r0, r0, r6
 800405c:	2802      	cmp	r0, #2
 800405e:	d9f4      	bls.n	800404a <RCCEx_PLLSAI1_ConfigNQ+0x64>
        status = HAL_TIMEOUT;
 8004060:	2403      	movs	r4, #3
    if (status == HAL_OK)
 8004062:	2c00      	cmp	r4, #0
 8004064:	d1d9      	bne.n	800401a <RCCEx_PLLSAI1_ConfigNQ+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800406a:	6913      	ldr	r3, [r2, #16]
 800406c:	6929      	ldr	r1, [r5, #16]
 800406e:	430b      	orrs	r3, r1
 8004070:	6113      	str	r3, [r2, #16]
 8004072:	e7d2      	b.n	800401a <RCCEx_PLLSAI1_ConfigNQ+0x34>

08004074 <RCCEx_PLLSAI1_ConfigNR>:
{
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800407c:	6813      	ldr	r3, [r2, #0]
 800407e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004082:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8004084:	f7fd f874 	bl	8001170 <HAL_GetTick>
 8004088:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800408a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004094:	d006      	beq.n	80040a4 <RCCEx_PLLSAI1_ConfigNR+0x30>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004096:	f7fd f86b 	bl	8001170 <HAL_GetTick>
 800409a:	1b00      	subs	r0, r0, r4
 800409c:	2802      	cmp	r0, #2
 800409e:	d9f4      	bls.n	800408a <RCCEx_PLLSAI1_ConfigNR+0x16>
      status = HAL_TIMEOUT;
 80040a0:	2403      	movs	r4, #3
 80040a2:	e000      	b.n	80040a6 <RCCEx_PLLSAI1_ConfigNR+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 80040a4:	2400      	movs	r4, #0
  if (status == HAL_OK)
 80040a6:	b10c      	cbz	r4, 80040ac <RCCEx_PLLSAI1_ConfigNR+0x38>
}
 80040a8:	4620      	mov	r0, r4
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80040ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80040b6:	6829      	ldr	r1, [r5, #0]
 80040b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80040bc:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80040c4:	68e9      	ldr	r1, [r5, #12]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80040d0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80040d2:	f7fd f84d 	bl	8001170 <HAL_GetTick>
 80040d6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80040d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80040e2:	d105      	bne.n	80040f0 <RCCEx_PLLSAI1_ConfigNR+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e4:	f7fd f844 	bl	8001170 <HAL_GetTick>
 80040e8:	1b80      	subs	r0, r0, r6
 80040ea:	2802      	cmp	r0, #2
 80040ec:	d9f4      	bls.n	80040d8 <RCCEx_PLLSAI1_ConfigNR+0x64>
        status = HAL_TIMEOUT;
 80040ee:	2403      	movs	r4, #3
    if (status == HAL_OK)
 80040f0:	2c00      	cmp	r4, #0
 80040f2:	d1d9      	bne.n	80040a8 <RCCEx_PLLSAI1_ConfigNR+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80040f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040f8:	6913      	ldr	r3, [r2, #16]
 80040fa:	6929      	ldr	r1, [r5, #16]
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6113      	str	r3, [r2, #16]
 8004100:	e7d2      	b.n	80040a8 <RCCEx_PLLSAI1_ConfigNR+0x34>

08004102 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004102:	b570      	push	{r4, r5, r6, lr}
 8004104:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004106:	6803      	ldr	r3, [r0, #0]
 8004108:	f013 0f40 	tst.w	r3, #64	; 0x40
 800410c:	d02f      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch (PeriphClkInit->Sai1ClockSelection)
 800410e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004114:	d021      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004116:	d80a      	bhi.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8004118:	b933      	cbnz	r3, 8004128 <HAL_RCCEx_PeriphCLKConfig+0x26>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800411a:	3004      	adds	r0, #4
 800411c:	f7ff ff1c 	bl	8003f58 <RCCEx_PLLSAI1_ConfigNP>
    if (ret == HAL_OK)
 8004120:	4606      	mov	r6, r0
 8004122:	b158      	cbz	r0, 800413c <HAL_RCCEx_PeriphCLKConfig+0x3a>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004124:	4605      	mov	r5, r0
 8004126:	e024      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004128:	2501      	movs	r5, #1
 800412a:	462e      	mov	r6, r5
 800412c:	e021      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800412e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004132:	d01a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004134:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004138:	d10c      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800413a:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800413c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800413e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004142:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004146:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004150:	2500      	movs	r5, #0
}
 8004152:	e00e      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004154:	2501      	movs	r5, #1
 8004156:	462e      	mov	r6, r5
 8004158:	e00b      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x70>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800415a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800415e:	68d3      	ldr	r3, [r2, #12]
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004166:	2600      	movs	r6, #0
 8004168:	e7e8      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch (PeriphClkInit->Sai1ClockSelection)
 800416a:	2600      	movs	r6, #0
 800416c:	e7e6      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3a>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800416e:	2500      	movs	r5, #0
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004170:	462e      	mov	r6, r5
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800417a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417e:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8004182:	f405 7540 	and.w	r5, r5, #768	; 0x300
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004188:	42ab      	cmp	r3, r5
 800418a:	f040 80d5 	bne.w	8004338 <HAL_RCCEx_PeriphCLKConfig+0x236>
      status = ret;
 800418e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	f013 0f01 	tst.w	r3, #1
 8004196:	d009      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xaa>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004198:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800419a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800419e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041a2:	f022 0203 	bic.w	r2, r2, #3
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	f013 0f02 	tst.w	r3, #2
 80041b2:	d009      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041b4:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80041b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	f013 0f10 	tst.w	r3, #16
 80041ce:	d00c      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xe8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80041d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80041da:	0c02      	lsrs	r2, r0, #16
 80041dc:	0412      	lsls	r2, r2, #16
 80041de:	ea23 0302 	bic.w	r3, r3, r2
 80041e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	f013 0f20 	tst.w	r3, #32
 80041f0:	d00c      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x10a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80041f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041f8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80041fc:	0c02      	lsrs	r2, r0, #16
 80041fe:	0412      	lsls	r2, r2, #16
 8004200:	ea23 0302 	bic.w	r3, r3, r2
 8004204:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	f013 0f04 	tst.w	r3, #4
 8004212:	d00f      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x132>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004214:	6a23      	ldr	r3, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004216:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800421a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800421e:	0919      	lsrs	r1, r3, #4
 8004220:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004224:	ea22 0201 	bic.w	r2, r2, r1
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	f013 0f08 	tst.w	r3, #8
 800423a:	d00f      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x15a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800423c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800423e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004242:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004246:	0919      	lsrs	r1, r3, #4
 8004248:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800424c:	ea22 0201 	bic.w	r2, r2, r1
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004262:	d013      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004264:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800426a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800426e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004278:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800427a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427e:	f000 809c 	beq.w	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004282:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004288:	f000 809c 	beq.w	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004292:	d017      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004294:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429a:	d005      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800429c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042a0:	d002      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f040 8096 	bne.w	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80042a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80042b0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042bc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80042c0:	f000 809a 	beq.w	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80042ca:	d013      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80042ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80042d6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80042e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80042e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042e6:	f000 808e 	beq.w	8004406 <HAL_RCCEx_PeriphCLKConfig+0x304>
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80042ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042f0:	f000 808e 	beq.w	8004410 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80042fa:	d009      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80042fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80042fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004302:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8004306:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004316:	d00d      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004318:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800431a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004320:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8004324:	430a      	orrs	r2, r1
 8004326:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004328:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800432a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800432c:	f021 0103 	bic.w	r1, r1, #3
 8004330:	430a      	orrs	r2, r1
 8004332:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004334:	4628      	mov	r0, r5
 8004336:	bd70      	pop	{r4, r5, r6, pc}
      HAL_PWR_EnableBkUpAccess();
 8004338:	f7fe fe86 	bl	8003048 <HAL_PWR_EnableBkUpAccess>
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800433c:	b95d      	cbnz	r5, 8004356 <HAL_RCCEx_PeriphCLKConfig+0x254>
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800433e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004340:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004344:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004348:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004352:	4635      	mov	r5, r6
 8004354:	e71c      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x8e>
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800435e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004362:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004366:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800436a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800436e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004372:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004376:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800437a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800437c:	430a      	orrs	r2, r1
        LL_RCC_WriteReg(BDCR, bdcr);
 800437e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004386:	f013 0f01 	tst.w	r3, #1
 800438a:	d012      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
          tickstart = HAL_GetTick();
 800438c:	f7fc fef0 	bl	8001170 <HAL_GetTick>
 8004390:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	f013 0f02 	tst.w	r3, #2
 800439e:	d10a      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a0:	f7fc fee6 	bl	8001170 <HAL_GetTick>
 80043a4:	1b40      	subs	r0, r0, r5
 80043a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80043aa:	4298      	cmp	r0, r3
 80043ac:	d9f1      	bls.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x290>
              ret = HAL_TIMEOUT;
 80043ae:	2503      	movs	r5, #3
 80043b0:	e6ee      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80043b2:	4635      	mov	r5, r6
 80043b4:	e6ec      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80043b6:	4635      	mov	r5, r6
 80043b8:	e6ea      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80043ba:	68cb      	ldr	r3, [r1, #12]
 80043bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c0:	60cb      	str	r3, [r1, #12]
 80043c2:	e75e      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x180>
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80043c4:	1d20      	adds	r0, r4, #4
 80043c6:	f7ff fe0e 	bl	8003fe6 <RCCEx_PLLSAI1_ConfigNQ>
    if (ret != HAL_OK)
 80043ca:	2800      	cmp	r0, #0
 80043cc:	f43f af5e 	beq.w	800428c <HAL_RCCEx_PeriphCLKConfig+0x18a>
      status = ret;
 80043d0:	4605      	mov	r5, r0
 80043d2:	e75b      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80043d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043dc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80043e0:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80043e4:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80043e8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80043ec:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80043f0:	430b      	orrs	r3, r1
 80043f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80043f6:	e760      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80043f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043fc:	68d3      	ldr	r3, [r2, #12]
 80043fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004402:	60d3      	str	r3, [r2, #12]
 8004404:	e75e      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004406:	68cb      	ldr	r3, [r1, #12]
 8004408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440c:	60cb      	str	r3, [r1, #12]
 800440e:	e76c      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004410:	1d20      	adds	r0, r4, #4
 8004412:	f7ff fe2f 	bl	8004074 <RCCEx_PLLSAI1_ConfigNR>
    if (ret != HAL_OK)
 8004416:	2800      	cmp	r0, #0
 8004418:	f43f af6c 	beq.w	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      status = ret;
 800441c:	4605      	mov	r5, r0
 800441e:	e769      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1f2>

08004420 <HAL_RCCEx_GetRngCLKSource>:
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 8004420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004424:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 8004428:	f010 4040 	ands.w	r0, r0, #3221225472	; 0xc0000000
 800442c:	d105      	bne.n	800443a <HAL_RCCEx_GetRngCLKSource+0x1a>
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 800442e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8004432:	f000 6040 	and.w	r0, r0, #201326592	; 0xc000000
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 8004436:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
}
 800443a:	4770      	bx	lr

0800443c <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800443c:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 800443e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 8004444:	f3c3 1301 	ubfx	r3, r3, #4, #2
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004448:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800444c:	d029      	beq.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800444e:	2840      	cmp	r0, #64	; 0x40
 8004450:	d05b      	beq.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8004452:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004456:	f000 8081 	beq.w	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 800445a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800445e:	f000 80e6 	beq.w	800462e <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004462:	2801      	cmp	r0, #1
 8004464:	f000 8123 	beq.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004468:	2802      	cmp	r0, #2
 800446a:	f000 8159 	beq.w	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800446e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004472:	f000 8191 	beq.w	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004476:	2804      	cmp	r0, #4
 8004478:	f000 81b6 	beq.w	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800447c:	2808      	cmp	r0, #8
 800447e:	f000 81f5 	beq.w	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004482:	2810      	cmp	r0, #16
 8004484:	f000 8224 	beq.w	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8004488:	2820      	cmp	r0, #32
 800448a:	f000 8276 	beq.w	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 800448e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004492:	f000 82c7 	beq.w	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 8004496:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800449a:	f000 82dd 	beq.w	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
  uint32_t frequency = 0U;
 800449e:	2000      	movs	r0, #0
 80044a0:	e041      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 80044ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b2:	d008      	beq.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 80044b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b8:	d00f      	beq.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 80044ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044be:	f000 833b 	beq.w	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
  uint32_t frequency = 0U;
 80044c2:	2000      	movs	r0, #0
 80044c4:	e02f      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80044c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ca:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80044ce:	f010 0002 	ands.w	r0, r0, #2
 80044d2:	d028      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSE_VALUE;
 80044d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80044d8:	e025      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80044da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e2:	f013 0302 	ands.w	r3, r3, #2
 80044e6:	d000      	beq.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 80044e8:	2301      	movs	r3, #1
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80044ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ee:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
 80044f2:	f010 0008 	ands.w	r0, r0, #8
 80044f6:	d000      	beq.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80044f8:	2001      	movs	r0, #1
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	f000 8319 	beq.w	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
 8004500:	2801      	cmp	r0, #1
 8004502:	d110      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSI_VALUE;
 8004504:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8004508:	e00d      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 800450a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 8004516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800451a:	d016      	beq.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800451c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004520:	d002      	beq.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004522:	b14b      	cbz	r3, 8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
 8004524:	48c9      	ldr	r0, [pc, #804]	; (800484c <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
}
 8004526:	bd08      	pop	{r3, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004532:	d0f8      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = HSI_VALUE;
 8004534:	48c6      	ldr	r0, [pc, #792]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 8004536:	e7f6      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004542:	d0f0      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = RCC_PLLSAI1_GetFreqDomain_P();
 8004544:	f7ff fc70 	bl	8003e28 <RCC_PLLSAI1_GetFreqDomain_P>
 8004548:	e7ed      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800454a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004554:	d0e7      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = RCC_PLL_GetFreqDomain_P();
 8004556:	f7ff fb83 	bl	8003c60 <RCC_PLL_GetFreqDomain_P>
 800455a:	e7e4      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 800455c:	f7ff ff60 	bl	8004420 <HAL_RCCEx_GetRngCLKSource>
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 8004560:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004564:	d014      	beq.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 8004566:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800456a:	d029      	beq.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 800456c:	f1b0 5fc0 	cmp.w	r0, #402653184	; 0x18000000
 8004570:	d030      	beq.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 8004572:	f1b0 5fe0 	cmp.w	r0, #469762048	; 0x1c000000
 8004576:	d03a      	beq.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 8004578:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
 800457c:	d04d      	beq.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800457e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004582:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8004586:	f010 0002 	ands.w	r0, r0, #2
 800458a:	d0cc      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = HSI48_VALUE / 3U;
 800458c:	48b0      	ldr	r0, [pc, #704]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 800458e:	e7ca      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004598:	f013 0302 	ands.w	r3, r3, #2
 800459c:	d000      	beq.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 800459e:	2301      	movs	r3, #1
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80045a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045a4:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
 80045a8:	f010 0008 	ands.w	r0, r0, #8
 80045ac:	d000      	beq.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80045ae:	2001      	movs	r0, #1
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	f000 82c3 	beq.w	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80045b6:	2801      	cmp	r0, #1
 80045b8:	d1b5      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSI_VALUE;
 80045ba:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 80045be:	e7b2      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80045c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80045c8:	f010 0002 	ands.w	r0, r0, #2
 80045cc:	d0ab      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSE_VALUE;
 80045ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80045d2:	e7a8      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80045d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80045de:	d0a2      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 80045e0:	f7ff fb8a 	bl	8003cf8 <RCC_PLL_GetFreqDomain_Q>
 80045e4:	4b9b      	ldr	r3, [pc, #620]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 80045e6:	fba3 3000 	umull	r3, r0, r3, r0
 80045ea:	0840      	lsrs	r0, r0, #1
 80045ec:	e79b      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80045ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	f010 0002 	ands.w	r0, r0, #2
 80045f8:	d095      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004600:	2bb0      	cmp	r3, #176	; 0xb0
 8004602:	d808      	bhi.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	4a94      	ldr	r2, [pc, #592]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 8004608:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800460c:	4b91      	ldr	r3, [pc, #580]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 800460e:	fba3 3000 	umull	r3, r0, r3, r0
 8004612:	0840      	lsrs	r0, r0, #1
 8004614:	e787      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    msiRange = LL_RCC_MSIRANGE_11;
 8004616:	23b0      	movs	r3, #176	; 0xb0
 8004618:	e7f4      	b.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800461a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004624:	f43f af7f 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8004628:	f7ff fc4a 	bl	8003ec0 <RCC_PLLSAI1_GetFreqDomain_Q>
 800462c:	e77b      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 800462e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 800463a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463e:	d019      	beq.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8004640:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004644:	d020      	beq.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8004646:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800464a:	d009      	beq.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800464c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004650:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8004654:	f010 0002 	ands.w	r0, r0, #2
 8004658:	f43f af65 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = HSI48_VALUE;
 800465c:	487f      	ldr	r0, [pc, #508]	; (800485c <HAL_RCCEx_GetPeriphCLKFreq+0x420>)
 800465e:	e762      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800466a:	f43f af5c 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 800466e:	f7ff fc27 	bl	8003ec0 <RCC_PLLSAI1_GetFreqDomain_Q>
 8004672:	e758      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800467e:	f43f af52 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = RCC_PLL_GetFreqDomain_Q();
 8004682:	f7ff fb39 	bl	8003cf8 <RCC_PLL_GetFreqDomain_Q>
 8004686:	e74e      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	f010 0002 	ands.w	r0, r0, #2
 8004692:	f43f af48 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 800469c:	2bb0      	cmp	r3, #176	; 0xb0
 800469e:	d804      	bhi.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	4a6d      	ldr	r2, [pc, #436]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 80046a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046a8:	e73d      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    msiRange = LL_RCC_MSIRANGE_11;
 80046aa:	23b0      	movs	r3, #176	; 0xb0
 80046ac:	e7f8      	b.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80046ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	f003 0303 	and.w	r3, r3, #3
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d01c      	beq.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d023      	beq.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d015      	beq.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b6>
      frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80046c6:	f7fe fd5b 	bl	8003180 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80046ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ce:	6893      	ldr	r3, [r2, #8]
 80046d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80046d4:	4962      	ldr	r1, [pc, #392]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x424>)
 80046d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80046da:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80046de:	6893      	ldr	r3, [r2, #8]
 80046e0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80046e4:	4a5f      	ldr	r2, [pc, #380]	; (8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x428>)
 80046e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	40d8      	lsrs	r0, r3
      break;
 80046f0:	e719      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
      frequency = HAL_RCC_GetSysClockFreq();
 80046f2:	f7fe fd45 	bl	8003180 <HAL_RCC_GetSysClockFreq>
      break;
 80046f6:	e716      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80046f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004702:	f43f af10 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = HSI_VALUE;
 8004706:	4852      	ldr	r0, [pc, #328]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 8004708:	e70d      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800470a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8004712:	f010 0002 	ands.w	r0, r0, #2
 8004716:	f43f af06 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSE_VALUE;
 800471a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800471e:	e702      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 800472c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004730:	d01e      	beq.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8004732:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004736:	d024      	beq.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473c:	d015      	beq.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800473e:	f7fe fd1f 	bl	8003180 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004746:	6893      	ldr	r3, [r2, #8]
 8004748:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800474c:	4944      	ldr	r1, [pc, #272]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x424>)
 800474e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004752:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004756:	6893      	ldr	r3, [r2, #8]
 8004758:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800475c:	4a41      	ldr	r2, [pc, #260]	; (8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x428>)
 800475e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	40d8      	lsrs	r0, r3
      break;
 8004768:	e6dd      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
      frequency = HAL_RCC_GetSysClockFreq();
 800476a:	f7fe fd09 	bl	8003180 <HAL_RCC_GetSysClockFreq>
      break;
 800476e:	e6da      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800477a:	f43f aed4 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = HSI_VALUE;
 800477e:	4834      	ldr	r0, [pc, #208]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 8004780:	e6d1      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004786:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800478a:	f010 0002 	ands.w	r0, r0, #2
 800478e:	f43f aeca 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSE_VALUE;
 8004792:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004796:	e6c6      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 80047a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a8:	d014      	beq.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80047aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047ae:	d00e      	beq.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x392>
 80047b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b4:	d001      	beq.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80047b6:	2000      	movs	r0, #0
 80047b8:	e6b5      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80047ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80047c4:	f43f aeaf 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = RCC_PLLSAI1_GetFreqDomain_R();
 80047c8:	f7ff fae2 	bl	8003d90 <RCC_PLLSAI1_GetFreqDomain_R>
 80047cc:	e6ab      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
      frequency = HAL_RCC_GetSysClockFreq();
 80047ce:	f7fe fcd7 	bl	8003180 <HAL_RCC_GetSysClockFreq>
      break;
 80047d2:	e6a8      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80047d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80047de:	f43f aea2 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = RCC_PLL_GetFreqDomain_P();
 80047e2:	f7ff fa3d 	bl	8003c60 <RCC_PLL_GetFreqDomain_P>
 80047e6:	e69e      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 80047fa:	4a1b      	ldr	r2, [pc, #108]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d019      	beq.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8004800:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004804:	4293      	cmp	r3, r2
 8004806:	d018      	beq.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8004808:	f7fe fcba 	bl	8003180 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800480c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004810:	6893      	ldr	r3, [r2, #8]
 8004812:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004816:	4912      	ldr	r1, [pc, #72]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x424>)
 8004818:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800481c:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004820:	6893      	ldr	r3, [r2, #8]
 8004822:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004826:	4a0f      	ldr	r2, [pc, #60]	; (8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x428>)
 8004828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	40d8      	lsrs	r0, r3
      break;
 8004832:	e678      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
      frequency = HAL_RCC_GetSysClockFreq();
 8004834:	f7fe fca4 	bl	8003180 <HAL_RCC_GetSysClockFreq>
      break;
 8004838:	e675      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800483a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004844:	f43f ae6f 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = HSI_VALUE;
 8004848:	4801      	ldr	r0, [pc, #4]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 800484a:	e66c      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800484c:	001fff68 	.word	0x001fff68
 8004850:	00f42400 	.word	0x00f42400
 8004854:	aaaaaaab 	.word	0xaaaaaaab
 8004858:	0800a080 	.word	0x0800a080
 800485c:	02dc6c00 	.word	0x02dc6c00
 8004860:	0800a020 	.word	0x0800a020
 8004864:	0800a060 	.word	0x0800a060
 8004868:	00030100 	.word	0x00030100
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 800486c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800487a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 800487e:	4ab5      	ldr	r2, [pc, #724]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x718>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d019      	beq.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>
 8004884:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004888:	4293      	cmp	r3, r2
 800488a:	d018      	beq.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800488c:	f7fe fc78 	bl	8003180 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004894:	6893      	ldr	r3, [r2, #8]
 8004896:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800489a:	49af      	ldr	r1, [pc, #700]	; (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>)
 800489c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048a0:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80048a4:	6893      	ldr	r3, [r2, #8]
 80048a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80048aa:	4aac      	ldr	r2, [pc, #688]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x720>)
 80048ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	40d8      	lsrs	r0, r3
      break;
 80048b6:	e636      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
      frequency = HAL_RCC_GetSysClockFreq();
 80048b8:	f7fe fc62 	bl	8003180 <HAL_RCC_GetSysClockFreq>
      break;
 80048bc:	e633      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80048be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80048c8:	f43f ae2d 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = HSI_VALUE;
 80048cc:	48a4      	ldr	r0, [pc, #656]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x724>)
 80048ce:	e62a      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	0c1b      	lsrs	r3, r3, #16
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 80048e2:	4aa0      	ldr	r2, [pc, #640]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x728>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d010      	beq.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 80048e8:	4a9f      	ldr	r2, [pc, #636]	; (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d026      	beq.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 80048ee:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80048f2:	d12c      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80048f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80048fc:	f010 0002 	ands.w	r0, r0, #2
 8004900:	f43f ae11 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSE_VALUE;
 8004904:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004908:	e60d      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800490a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004912:	f013 0302 	ands.w	r3, r3, #2
 8004916:	d000      	beq.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004918:	2301      	movs	r3, #1
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800491a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800491e:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
 8004922:	f010 0008 	ands.w	r0, r0, #8
 8004926:	d000      	beq.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8004928:	2001      	movs	r0, #1
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800492a:	2b01      	cmp	r3, #1
 800492c:	f000 8109 	beq.w	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8004930:	2801      	cmp	r0, #1
 8004932:	f47f adf8 	bne.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSI_VALUE;
 8004936:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800493a:	e5f4      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800493c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004946:	f43f adee 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = HSI_VALUE;
 800494a:	4885      	ldr	r0, [pc, #532]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x724>)
 800494c:	e5eb      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 800494e:	f7fe fc17 	bl	8003180 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004952:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004956:	6893      	ldr	r3, [r2, #8]
 8004958:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800495c:	497e      	ldr	r1, [pc, #504]	; (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>)
 800495e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004962:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004966:	6893      	ldr	r3, [r2, #8]
 8004968:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800496c:	4a7b      	ldr	r2, [pc, #492]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x720>)
 800496e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004972:	f003 031f 	and.w	r3, r3, #31
 8004976:	40d8      	lsrs	r0, r3
 8004978:	e5d5      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	0c1b      	lsrs	r3, r3, #16
 8004984:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004988:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 800498c:	4a77      	ldr	r2, [pc, #476]	; (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d010      	beq.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 8004992:	4a77      	ldr	r2, [pc, #476]	; (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x734>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d026      	beq.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8004998:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800499c:	d12c      	bne.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800499e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80049a6:	f010 0002 	ands.w	r0, r0, #2
 80049aa:	f43f adbc 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSE_VALUE;
 80049ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80049b2:	e5b8      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049bc:	f013 0302 	ands.w	r3, r3, #2
 80049c0:	d000      	beq.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
 80049c2:	2301      	movs	r3, #1
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80049c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049c8:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
 80049cc:	f010 0008 	ands.w	r0, r0, #8
 80049d0:	d000      	beq.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80049d2:	2001      	movs	r0, #1
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	f000 80b7 	beq.w	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 80049da:	2801      	cmp	r0, #1
 80049dc:	f47f ada3 	bne.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSI_VALUE;
 80049e0:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 80049e4:	e59f      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80049e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80049f0:	f43f ad99 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = HSI_VALUE;
 80049f4:	485a      	ldr	r0, [pc, #360]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x724>)
 80049f6:	e596      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 80049f8:	f7fe fbc2 	bl	8003180 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80049fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a00:	6893      	ldr	r3, [r2, #8]
 8004a02:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a06:	4954      	ldr	r1, [pc, #336]	; (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>)
 8004a08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a0c:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004a10:	6893      	ldr	r3, [r2, #8]
 8004a12:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004a16:	4a51      	ldr	r2, [pc, #324]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x720>)
 8004a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	40d8      	lsrs	r0, r3
 8004a22:	e580      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 8004a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 8004a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a34:	d005      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 8004a36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a3a:	f000 8088 	beq.w	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x712>
  uint32_t frequency = 0U;
 8004a3e:	2000      	movs	r0, #0
 8004a40:	e571      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a46:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8004a4a:	f010 0002 	ands.w	r0, r0, #2
 8004a4e:	f43f ad6a 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSE_VALUE;
 8004a52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a56:	e566      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8004a58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 8004a5e:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8004a62:	d110      	bne.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a68:	6810      	ldr	r0, [r2, #0]
 8004a6a:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004a6e:	f43f ad5a 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 8004a72:	2218      	movs	r2, #24
 8004a74:	fb02 f303 	mul.w	r3, r2, r3
 8004a78:	4a3e      	ldr	r2, [pc, #248]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x738>)
 8004a7a:	58d3      	ldr	r3, [r2, r3]
 8004a7c:	4838      	ldr	r0, [pc, #224]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x724>)
 8004a7e:	fbb0 f0f3 	udiv	r0, r0, r3
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8004a82:	0840      	lsrs	r0, r0, #1
 8004a84:	e54f      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8004a86:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004a8a:	d004      	beq.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8004a8c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004a90:	d012      	beq.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
  uint32_t frequency = 0U;
 8004a92:	2000      	movs	r0, #0
  return (frequency);
 8004a94:	e547      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a9a:	6810      	ldr	r0, [r2, #0]
 8004a9c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004aa0:	f43f ad41 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 8004aa4:	4933      	ldr	r1, [pc, #204]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x738>)
 8004aa6:	2218      	movs	r2, #24
 8004aa8:	fb02 1303 	mla	r3, r2, r3, r1
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	4832      	ldr	r0, [pc, #200]	; (8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>)
 8004ab0:	fbb0 f0f3 	udiv	r0, r0, r3
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8004ab4:	0840      	lsrs	r0, r0, #1
 8004ab6:	e536      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004ac2:	2ab0      	cmp	r2, #176	; 0xb0
 8004ac4:	d814      	bhi.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
      switch (LL_RCC_MSI_GetRange())
 8004ac6:	2aa0      	cmp	r2, #160	; 0xa0
 8004ac8:	d029      	beq.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8004aca:	d80f      	bhi.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8004acc:	2a80      	cmp	r2, #128	; 0x80
 8004ace:	d01c      	beq.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8004ad0:	2a90      	cmp	r2, #144	; 0x90
 8004ad2:	d109      	bne.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 8004ad4:	4a29      	ldr	r2, [pc, #164]	; (8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x740>)
 8004ad6:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004ad8:	4926      	ldr	r1, [pc, #152]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x738>)
 8004ada:	2218      	movs	r2, #24
 8004adc:	fb02 1303 	mla	r3, r2, r3, r1
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8004ae6:	e00c      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
      switch (LL_RCC_MSI_GetRange())
 8004ae8:	2000      	movs	r0, #0
 8004aea:	e00a      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8004aec:	2ab0      	cmp	r2, #176	; 0xb0
 8004aee:	d10a      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8004af0:	4a22      	ldr	r2, [pc, #136]	; (8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x740>)
 8004af2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8004af4:	4a1f      	ldr	r2, [pc, #124]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x738>)
 8004af6:	2118      	movs	r1, #24
 8004af8:	fb01 2303 	mla	r3, r1, r3, r2
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	fbb0 f0f3 	udiv	r0, r0, r3
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 8004b02:	0840      	lsrs	r0, r0, #1
 8004b04:	e50f      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
      switch (LL_RCC_MSI_GetRange())
 8004b06:	2000      	movs	r0, #0
 8004b08:	e7fb      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 8004b0a:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x740>)
 8004b0c:	6a10      	ldr	r0, [r2, #32]
 8004b0e:	4919      	ldr	r1, [pc, #100]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x738>)
 8004b10:	2218      	movs	r2, #24
 8004b12:	fb02 1303 	mla	r3, r2, r3, r1
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8004b1c:	e7f1      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 8004b1e:	4a17      	ldr	r2, [pc, #92]	; (8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x740>)
 8004b20:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004b22:	4914      	ldr	r1, [pc, #80]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x738>)
 8004b24:	2218      	movs	r2, #24
 8004b26:	fb02 1303 	mla	r3, r2, r3, r1
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8004b30:	e7e7      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
        frequency = LSI_VALUE;
 8004b32:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8004b36:	e4f6      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
      frequency = HSE_VALUE / 32U;
 8004b38:	4811      	ldr	r0, [pc, #68]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x744>)
 8004b3a:	e4f4      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSI_VALUE;
 8004b3c:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8004b40:	e4f1      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSI_VALUE;
 8004b42:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8004b46:	e4ee      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = LSI_VALUE;
 8004b48:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8004b4c:	e4eb      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
      frequency = HSE_VALUE / 1024U;
 8004b4e:	f647 2012 	movw	r0, #31250	; 0x7a12
 8004b52:	e4e8      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8004b54:	00301000 	.word	0x00301000
 8004b58:	0800a020 	.word	0x0800a020
 8004b5c:	0800a060 	.word	0x0800a060
 8004b60:	00f42400 	.word	0x00f42400
 8004b64:	000c0004 	.word	0x000c0004
 8004b68:	000c0008 	.word	0x000c0008
 8004b6c:	00300010 	.word	0x00300010
 8004b70:	00300020 	.word	0x00300020
 8004b74:	0800a0c0 	.word	0x0800a0c0
 8004b78:	01e84800 	.word	0x01e84800
 8004b7c:	0800a080 	.word	0x0800a080
 8004b80:	000f4240 	.word	0x000f4240

08004b84 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b88:	6813      	ldr	r3, [r2, #0]
 8004b8a:	f043 0304 	orr.w	r3, r3, #4
 8004b8e:	6013      	str	r3, [r2, #0]
}
 8004b90:	4770      	bx	lr

08004b92 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b92:	b538      	push	{r3, r4, r5, lr}
 8004b94:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b96:	6802      	ldr	r2, [r0, #0]
 8004b98:	68d3      	ldr	r3, [r2, #12]
 8004b9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b9e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004ba0:	f7fc fae6 	bl	8001170 <HAL_GetTick>
 8004ba4:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f013 0f20 	tst.w	r3, #32
 8004bae:	d107      	bne.n	8004bc0 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bb0:	f7fc fade 	bl	8001170 <HAL_GetTick>
 8004bb4:	1b40      	subs	r0, r0, r5
 8004bb6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004bba:	d9f4      	bls.n	8004ba6 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8004bbc:	2003      	movs	r0, #3
 8004bbe:	e000      	b.n	8004bc2 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8004bc0:	2000      	movs	r0, #0
}
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}

08004bc4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bc4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004bc6:	6803      	ldr	r3, [r0, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004bce:	d001      	beq.n	8004bd4 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004bd0:	2000      	movs	r0, #0
}
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004bd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bda:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004bdc:	f7fc fac8 	bl	8001170 <HAL_GetTick>
 8004be0:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004bea:	d107      	bne.n	8004bfc <RTC_EnterInitMode+0x38>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004bec:	f7fc fac0 	bl	8001170 <HAL_GetTick>
 8004bf0:	1b43      	subs	r3, r0, r5
 8004bf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bf6:	d9f4      	bls.n	8004be2 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8004bf8:	2003      	movs	r0, #3
 8004bfa:	e7ea      	b.n	8004bd2 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	e7e8      	b.n	8004bd2 <RTC_EnterInitMode+0xe>

08004c00 <HAL_RTC_Init>:
{
 8004c00:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d067      	beq.n	8004cd6 <HAL_RTC_Init+0xd6>
 8004c06:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c08:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d045      	beq.n	8004c9c <HAL_RTC_Init+0x9c>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c10:	2302      	movs	r3, #2
 8004c12:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	22ca      	movs	r2, #202	; 0xca
 8004c1a:	625a      	str	r2, [r3, #36]	; 0x24
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	2253      	movs	r2, #83	; 0x53
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c22:	4620      	mov	r0, r4
 8004c24:	f7ff ffce 	bl	8004bc4 <RTC_EnterInitMode>
 8004c28:	4605      	mov	r5, r0
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	d13b      	bne.n	8004ca6 <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c2e:	6822      	ldr	r2, [r4, #0]
 8004c30:	6893      	ldr	r3, [r2, #8]
 8004c32:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c3c:	6821      	ldr	r1, [r4, #0]
 8004c3e:	688a      	ldr	r2, [r1, #8]
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	6920      	ldr	r0, [r4, #16]
 8004c44:	4303      	orrs	r3, r0
 8004c46:	69a0      	ldr	r0, [r4, #24]
 8004c48:	4303      	orrs	r3, r0
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	68e2      	ldr	r2, [r4, #12]
 8004c52:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004c54:	6822      	ldr	r2, [r4, #0]
 8004c56:	6913      	ldr	r3, [r2, #16]
 8004c58:	68a1      	ldr	r1, [r4, #8]
 8004c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004c5e:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	68d3      	ldr	r3, [r2, #12]
 8004c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c68:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004c6a:	6822      	ldr	r2, [r4, #0]
 8004c6c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004c6e:	f023 0303 	bic.w	r3, r3, #3
 8004c72:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c74:	6821      	ldr	r1, [r4, #0]
 8004c76:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8004c78:	69e2      	ldr	r2, [r4, #28]
 8004c7a:	6960      	ldr	r0, [r4, #20]
 8004c7c:	4302      	orrs	r2, r0
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	64cb      	str	r3, [r1, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f013 0f20 	tst.w	r3, #32
 8004c8a:	d014      	beq.n	8004cb6 <HAL_RTC_Init+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	22ff      	movs	r2, #255	; 0xff
 8004c90:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004c92:	2301      	movs	r3, #1
 8004c94:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8004c98:	4628      	mov	r0, r5
 8004c9a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8004c9c:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8004ca0:	f7fb ff38 	bl	8000b14 <HAL_RTC_MspInit>
 8004ca4:	e7b4      	b.n	8004c10 <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	22ff      	movs	r2, #255	; 0xff
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cac:	2304      	movs	r3, #4
 8004cae:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 8004cb2:	2501      	movs	r5, #1
 8004cb4:	e7f0      	b.n	8004c98 <HAL_RTC_Init+0x98>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f7ff ff6b 	bl	8004b92 <HAL_RTC_WaitForSynchro>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d0e5      	beq.n	8004c8c <HAL_RTC_Init+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	22ff      	movs	r2, #255	; 0xff
 8004cc4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004cc6:	2304      	movs	r3, #4
 8004cc8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8004cd2:	2501      	movs	r5, #1
 8004cd4:	e7e0      	b.n	8004c98 <HAL_RTC_Init+0x98>
    return HAL_ERROR;
 8004cd6:	2501      	movs	r5, #1
 8004cd8:	e7de      	b.n	8004c98 <HAL_RTC_Init+0x98>

08004cda <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004cda:	b430      	push	{r4, r5}
 8004cdc:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004cde:	2000      	movs	r0, #0
 8004ce0:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004ce2:	64e0      	str	r0, [r4, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ce4:	6860      	ldr	r0, [r4, #4]
 8004ce6:	b120      	cbz	r0, 8004cf2 <SAI_InitI2S+0x18>
 8004ce8:	2802      	cmp	r0, #2
 8004cea:	d002      	beq.n	8004cf2 <SAI_InitI2S+0x18>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004cec:	2001      	movs	r0, #1
 8004cee:	6520      	str	r0, [r4, #80]	; 0x50
 8004cf0:	e001      	b.n	8004cf6 <SAI_InitI2S+0x1c>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	6520      	str	r0, [r4, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004cf6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004cfa:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004cfc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004d00:	6760      	str	r0, [r4, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8004d02:	2000      	movs	r0, #0
 8004d04:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8004d06:	6723      	str	r3, [r4, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004d08:	f013 0f01 	tst.w	r3, #1
 8004d0c:	d14a      	bne.n	8004da4 <SAI_InitI2S+0xca>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 8004d0e:	b949      	cbnz	r1, 8004d24 <SAI_InitI2S+0x4a>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004d10:	6620      	str	r0, [r4, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004d12:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004d16:	6660      	str	r0, [r4, #100]	; 0x64
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 8004d18:	2a03      	cmp	r2, #3
 8004d1a:	d837      	bhi.n	8004d8c <SAI_InitI2S+0xb2>
 8004d1c:	e8df f002 	tbb	[pc, r2]
 8004d20:	2b201608 	.word	0x2b201608
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004d24:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004d28:	6620      	str	r0, [r4, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	6660      	str	r0, [r4, #100]	; 0x64
 8004d2e:	e7f3      	b.n	8004d18 <SAI_InitI2S+0x3e>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004d30:	2080      	movs	r0, #128	; 0x80
 8004d32:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	0158      	lsls	r0, r3, #5
 8004d38:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	65a3      	str	r3, [r4, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004d3e:	2340      	movs	r3, #64	; 0x40
 8004d40:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004d42:	2000      	movs	r0, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004d44:	2902      	cmp	r1, #2
 8004d46:	d023      	beq.n	8004d90 <SAI_InitI2S+0xb6>
    {
      hsai->SlotInit.FirstBitOffset = 8;
    }
  }
  return status;
}
 8004d48:	bc30      	pop	{r4, r5}
 8004d4a:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004d4c:	2080      	movs	r0, #128	; 0x80
 8004d4e:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004d50:	085b      	lsrs	r3, r3, #1
 8004d52:	019d      	lsls	r5, r3, #6
 8004d54:	6565      	str	r5, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004d56:	015b      	lsls	r3, r3, #5
 8004d58:	65a3      	str	r3, [r4, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004d5a:	66e0      	str	r0, [r4, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004d5c:	2000      	movs	r0, #0
      break;
 8004d5e:	e7f1      	b.n	8004d44 <SAI_InitI2S+0x6a>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004d60:	20c0      	movs	r0, #192	; 0xc0
 8004d62:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004d64:	085b      	lsrs	r3, r3, #1
 8004d66:	0198      	lsls	r0, r3, #6
 8004d68:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004d6a:	015b      	lsls	r3, r3, #5
 8004d6c:	65a3      	str	r3, [r4, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004d6e:	2380      	movs	r3, #128	; 0x80
 8004d70:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004d72:	2000      	movs	r0, #0
      break;
 8004d74:	e7e6      	b.n	8004d44 <SAI_InitI2S+0x6a>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004d76:	20e0      	movs	r0, #224	; 0xe0
 8004d78:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004d7a:	085b      	lsrs	r3, r3, #1
 8004d7c:	0198      	lsls	r0, r3, #6
 8004d7e:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004d80:	015b      	lsls	r3, r3, #5
 8004d82:	65a3      	str	r3, [r4, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004d88:	2000      	movs	r0, #0
      break;
 8004d8a:	e7db      	b.n	8004d44 <SAI_InitI2S+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	e7d9      	b.n	8004d44 <SAI_InitI2S+0x6a>
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004d90:	2a01      	cmp	r2, #1
 8004d92:	d004      	beq.n	8004d9e <SAI_InitI2S+0xc4>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004d94:	2a02      	cmp	r2, #2
 8004d96:	d1d7      	bne.n	8004d48 <SAI_InitI2S+0x6e>
      hsai->SlotInit.FirstBitOffset = 8;
 8004d98:	2308      	movs	r3, #8
 8004d9a:	66a3      	str	r3, [r4, #104]	; 0x68
 8004d9c:	e7d4      	b.n	8004d48 <SAI_InitI2S+0x6e>
      hsai->SlotInit.FirstBitOffset = 16;
 8004d9e:	2310      	movs	r3, #16
 8004da0:	66a3      	str	r3, [r4, #104]	; 0x68
 8004da2:	e7f7      	b.n	8004d94 <SAI_InitI2S+0xba>
    return HAL_ERROR;
 8004da4:	2001      	movs	r0, #1
 8004da6:	e7cf      	b.n	8004d48 <SAI_InitI2S+0x6e>

08004da8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004da8:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004daa:	2400      	movs	r4, #0
 8004dac:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004dae:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004db0:	6844      	ldr	r4, [r0, #4]
 8004db2:	b124      	cbz	r4, 8004dbe <SAI_InitPCM+0x16>
 8004db4:	2c02      	cmp	r4, #2
 8004db6:	d002      	beq.n	8004dbe <SAI_InitPCM+0x16>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004db8:	2400      	movs	r4, #0
 8004dba:	6504      	str	r4, [r0, #80]	; 0x50
 8004dbc:	e001      	b.n	8004dc2 <SAI_InitPCM+0x1a>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004dbe:	2401      	movs	r4, #1
 8004dc0:	6504      	str	r4, [r0, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004dc2:	2400      	movs	r4, #0
 8004dc4:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004dc6:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8004dca:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004dcc:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8004dd0:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8004dd2:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8004dd4:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004dd6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004dda:	6744      	str	r4, [r0, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8004ddc:	2904      	cmp	r1, #4
 8004dde:	d007      	beq.n	8004df0 <SAI_InitPCM+0x48>
    hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004de0:	210d      	movs	r1, #13
 8004de2:	6581      	str	r1, [r0, #88]	; 0x58
  }

  switch (datasize)
 8004de4:	2a03      	cmp	r2, #3
 8004de6:	d826      	bhi.n	8004e36 <SAI_InitPCM+0x8e>
 8004de8:	e8df f002 	tbb	[pc, r2]
 8004dec:	1d150e05 	.word	0x1d150e05
    hsai->FrameInit.ActiveFrameLength = 1;
 8004df0:	2101      	movs	r1, #1
 8004df2:	6581      	str	r1, [r0, #88]	; 0x58
 8004df4:	e7f6      	b.n	8004de4 <SAI_InitPCM+0x3c>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004df6:	2280      	movs	r2, #128	; 0x80
 8004df8:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004dfe:	2340      	movs	r3, #64	; 0x40
 8004e00:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004e02:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8004e04:	bc30      	pop	{r4, r5}
 8004e06:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004e08:	2280      	movs	r2, #128	; 0x80
 8004e0a:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004e0c:	015b      	lsls	r3, r3, #5
 8004e0e:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004e10:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004e12:	2000      	movs	r0, #0
      break;
 8004e14:	e7f6      	b.n	8004e04 <SAI_InitPCM+0x5c>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004e16:	22c0      	movs	r2, #192	; 0xc0
 8004e18:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004e1a:	015b      	lsls	r3, r3, #5
 8004e1c:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004e1e:	2380      	movs	r3, #128	; 0x80
 8004e20:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004e22:	2000      	movs	r0, #0
      break;
 8004e24:	e7ee      	b.n	8004e04 <SAI_InitPCM+0x5c>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004e26:	22e0      	movs	r2, #224	; 0xe0
 8004e28:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004e2a:	015b      	lsls	r3, r3, #5
 8004e2c:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004e2e:	2380      	movs	r3, #128	; 0x80
 8004e30:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004e32:	2000      	movs	r0, #0
      break;
 8004e34:	e7e6      	b.n	8004e04 <SAI_InitPCM+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 8004e36:	2001      	movs	r0, #1
 8004e38:	e7e4      	b.n	8004e04 <SAI_InitPCM+0x5c>
	...

08004e3c <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <SAI_Disable+0x3c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a0e      	ldr	r2, [pc, #56]	; (8004e7c <SAI_Disable+0x40>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	0b1b      	lsrs	r3, r3, #12
 8004e48:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004e4a:	6801      	ldr	r1, [r0, #0]
 8004e4c:	680a      	ldr	r2, [r1, #0]
 8004e4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e52:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004e54:	b13b      	cbz	r3, 8004e66 <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 8004e56:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004e58:	6802      	ldr	r2, [r0, #0]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004e60:	d1f8      	bne.n	8004e54 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004e62:	2000      	movs	r0, #0

  return status;
}
 8004e64:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004e66:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8004e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e6e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 8004e72:	2003      	movs	r0, #3
      break;
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000010 	.word	0x20000010
 8004e7c:	95cbec1b 	.word	0x95cbec1b

08004e80 <HAL_SAI_Init>:
{
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hsai == NULL)
 8004e82:	2800      	cmp	r0, #0
 8004e84:	f000 8103 	beq.w	800508e <HAL_SAI_Init+0x20e>
 8004e88:	4604      	mov	r4, r0
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004e8a:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 8004e8e:	2d01      	cmp	r5, #1
 8004e90:	d020      	beq.n	8004ed4 <HAL_SAI_Init+0x54>
  if (hsai->State == HAL_SAI_STATE_RESET)
 8004e92:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8004e96:	b353      	cbz	r3, 8004eee <HAL_SAI_Init+0x6e>
  if (SAI_Disable(hsai) != HAL_OK)
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f7ff ffcf 	bl	8004e3c <SAI_Disable>
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	f040 80f6 	bne.w	8005092 <HAL_SAI_Init+0x212>
  hsai->State = HAL_SAI_STATE_BUSY;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.Synchro)
 8004eac:	68a3      	ldr	r3, [r4, #8]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d023      	beq.n	8004efa <HAL_SAI_Init+0x7a>
      syncen_bits = 0;
 8004eb2:	2600      	movs	r6, #0
  SAI1->GCR = 0;
 8004eb4:	4b78      	ldr	r3, [pc, #480]	; (8005098 <HAL_SAI_Init+0x218>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004eba:	6a23      	ldr	r3, [r4, #32]
 8004ebc:	bb03      	cbnz	r3, 8004f00 <HAL_SAI_Init+0x80>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ebe:	6863      	ldr	r3, [r4, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d05c      	beq.n	8004f7e <HAL_SAI_Init+0xfe>
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d05a      	beq.n	8004f7e <HAL_SAI_Init+0xfe>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004ec8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	f000 80c7 	beq.w	800505e <HAL_SAI_Init+0x1de>
 8004ed0:	2700      	movs	r7, #0
 8004ed2:	e059      	b.n	8004f88 <HAL_SAI_Init+0x108>
    if ((hsai->Instance != SAI1_Block_A) ||
 8004ed4:	6802      	ldr	r2, [r0, #0]
 8004ed6:	4b71      	ldr	r3, [pc, #452]	; (800509c <HAL_SAI_Init+0x21c>)
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	f040 80bc 	bne.w	8005056 <HAL_SAI_Init+0x1d6>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004ede:	6843      	ldr	r3, [r0, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	f040 80b8 	bne.w	8005056 <HAL_SAI_Init+0x1d6>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004ee6:	6c43      	ldr	r3, [r0, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0d2      	beq.n	8004e92 <HAL_SAI_Init+0x12>
 8004eec:	e0b3      	b.n	8005056 <HAL_SAI_Init+0x1d6>
    hsai->Lock = HAL_UNLOCKED;
 8004eee:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f7fb fe60 	bl	8000bb8 <HAL_SAI_MspInit>
 8004ef8:	e7ce      	b.n	8004e98 <HAL_SAI_Init+0x18>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004efa:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004efe:	e7d9      	b.n	8004eb4 <HAL_SAI_Init+0x34>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004f00:	2040      	movs	r0, #64	; 0x40
 8004f02:	f7ff fa9b 	bl	800443c <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004f06:	69a3      	ldr	r3, [r4, #24]
 8004f08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f0c:	d021      	beq.n	8004f52 <HAL_SAI_Init+0xd2>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004f0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f14:	d031      	beq.n	8004f7a <HAL_SAI_Init+0xfa>
 8004f16:	2201      	movs	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004f18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f1c:	0043      	lsls	r3, r0, #1
 8004f1e:	6a21      	ldr	r1, [r4, #32]
 8004f20:	fb02 f201 	mul.w	r2, r2, r1
 8004f24:	0212      	lsls	r2, r2, #8
 8004f26:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 8004f2a:	4a5d      	ldr	r2, [pc, #372]	; (80050a0 <HAL_SAI_Init+0x220>)
 8004f2c:	fba2 1203 	umull	r1, r2, r2, r3
 8004f30:	08d2      	lsrs	r2, r2, #3
 8004f32:	6262      	str	r2, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
 8004f34:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004f38:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d901      	bls.n	8004f44 <HAL_SAI_Init+0xc4>
      hsai->Init.Mckdiv += 1U;
 8004f40:	3201      	adds	r2, #1
 8004f42:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004f44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d1b9      	bne.n	8004ebe <HAL_SAI_Init+0x3e>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	6263      	str	r3, [r4, #36]	; 0x24
 8004f50:	e7b5      	b.n	8004ebe <HAL_SAI_Init+0x3e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004f52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d00b      	beq.n	8004f70 <HAL_SAI_Init+0xf0>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d00b      	beq.n	8004f74 <HAL_SAI_Init+0xf4>
        tmpframelength = hsai->FrameInit.FrameLength;
 8004f5c:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004f5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f62:	0043      	lsls	r3, r0, #1
 8004f64:	6a21      	ldr	r1, [r4, #32]
 8004f66:	fb02 f201 	mul.w	r2, r2, r1
 8004f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f6e:	e7dc      	b.n	8004f2a <HAL_SAI_Init+0xaa>
        tmpframelength = 64U;
 8004f70:	2240      	movs	r2, #64	; 0x40
 8004f72:	e7f4      	b.n	8004f5e <HAL_SAI_Init+0xde>
        tmpframelength = 256U;
 8004f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f78:	e7f1      	b.n	8004f5e <HAL_SAI_Init+0xde>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	e7cc      	b.n	8004f18 <HAL_SAI_Init+0x98>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004f7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d06a      	beq.n	800505a <HAL_SAI_Init+0x1da>
 8004f84:	f44f 7700 	mov.w	r7, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004f88:	6821      	ldr	r1, [r4, #0]
 8004f8a:	680b      	ldr	r3, [r1, #0]
 8004f8c:	4a45      	ldr	r2, [pc, #276]	; (80050a4 <HAL_SAI_Init+0x224>)
 8004f8e:	401a      	ands	r2, r3
 8004f90:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f92:	6821      	ldr	r1, [r4, #0]
 8004f94:	680a      	ldr	r2, [r1, #0]
 8004f96:	6863      	ldr	r3, [r4, #4]
 8004f98:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004f9a:	4303      	orrs	r3, r0
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f9c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f9e:	4303      	orrs	r3, r0
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004fa0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004fa2:	4303      	orrs	r3, r0
 8004fa4:	433b      	orrs	r3, r7
                          ckstr_bits | syncen_bits |                             \
 8004fa6:	4333      	orrs	r3, r6
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004fa8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8004faa:	4303      	orrs	r3, r0
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004fac:	6960      	ldr	r0, [r4, #20]
 8004fae:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004fb0:	69a0      	ldr	r0, [r4, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004fb2:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004fb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004fb6:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8004fba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004fbc:	4303      	orrs	r3, r0
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8004fbe:	6920      	ldr	r0, [r4, #16]
 8004fc0:	4303      	orrs	r3, r0
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004fc6:	6822      	ldr	r2, [r4, #0]
 8004fc8:	6853      	ldr	r3, [r2, #4]
 8004fca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004fce:	f023 030f 	bic.w	r3, r3, #15
 8004fd2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004fd4:	6821      	ldr	r1, [r4, #0]
 8004fd6:	684a      	ldr	r2, [r1, #4]
 8004fd8:	69e3      	ldr	r3, [r4, #28]
 8004fda:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004fdc:	4303      	orrs	r3, r0
 8004fde:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004fe0:	4303      	orrs	r3, r0
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	6891      	ldr	r1, [r2, #8]
 8004fea:	4b2f      	ldr	r3, [pc, #188]	; (80050a8 <HAL_SAI_Init+0x228>)
 8004fec:	400b      	ands	r3, r1
 8004fee:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	6882      	ldr	r2, [r0, #8]
 8004ff4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ff6:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 8004ff8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ffa:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 8004ffc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8004ffe:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 8005000:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8005002:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005004:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005006:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 8005008:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800500c:	4313      	orrs	r3, r2
 800500e:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005010:	6822      	ldr	r2, [r4, #0]
 8005012:	68d3      	ldr	r3, [r2, #12]
 8005014:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8005018:	f023 030f 	bic.w	r3, r3, #15
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	0c1b      	lsrs	r3, r3, #16
 8005020:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005022:	6820      	ldr	r0, [r4, #0]
 8005024:	68c2      	ldr	r2, [r0, #12]
 8005026:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005028:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800502a:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800502c:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800502e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005032:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005034:	3901      	subs	r1, #1
 8005036:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800503a:	4313      	orrs	r3, r2
 800503c:	60c3      	str	r3, [r0, #12]
  if (hsai->Instance == SAI1_Block_A)
 800503e:	6822      	ldr	r2, [r4, #0]
 8005040:	4b16      	ldr	r3, [pc, #88]	; (800509c <HAL_SAI_Init+0x21c>)
 8005042:	429a      	cmp	r2, r3
 8005044:	d00e      	beq.n	8005064 <HAL_SAI_Init+0x1e4>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005046:	2300      	movs	r3, #0
 8005048:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 800504c:	2201      	movs	r2, #1
 800504e:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8005052:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8005056:	4628      	mov	r0, r5
 8005058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800505a:	2700      	movs	r7, #0
 800505c:	e794      	b.n	8004f88 <HAL_SAI_Init+0x108>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800505e:	f44f 7700 	mov.w	r7, #512	; 0x200
 8005062:	e791      	b.n	8004f88 <HAL_SAI_Init+0x108>
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005064:	4a0c      	ldr	r2, [pc, #48]	; (8005098 <HAL_SAI_Init+0x218>)
 8005066:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800506e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005072:	2b01      	cmp	r3, #1
 8005074:	d1e7      	bne.n	8005046 <HAL_SAI_Init+0x1c6>
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005076:	6c23      	ldr	r3, [r4, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8005078:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800507a:	3a01      	subs	r2, #1
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800507c:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 8005080:	4b05      	ldr	r3, [pc, #20]	; (8005098 <HAL_SAI_Init+0x218>)
 8005082:	645a      	str	r2, [r3, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8005084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	645a      	str	r2, [r3, #68]	; 0x44
 800508c:	e7db      	b.n	8005046 <HAL_SAI_Init+0x1c6>
    return HAL_ERROR;
 800508e:	2501      	movs	r5, #1
 8005090:	e7e1      	b.n	8005056 <HAL_SAI_Init+0x1d6>
    return HAL_ERROR;
 8005092:	2501      	movs	r5, #1
 8005094:	e7df      	b.n	8005056 <HAL_SAI_Init+0x1d6>
 8005096:	bf00      	nop
 8005098:	40015400 	.word	0x40015400
 800509c:	40015404 	.word	0x40015404
 80050a0:	cccccccd 	.word	0xcccccccd
 80050a4:	f005c010 	.word	0xf005c010
 80050a8:	fff88000 	.word	0xfff88000

080050ac <HAL_SAI_InitProtocol>:
{
 80050ac:	b510      	push	{r4, lr}
 80050ae:	4604      	mov	r4, r0
  switch (protocol)
 80050b0:	2902      	cmp	r1, #2
 80050b2:	d906      	bls.n	80050c2 <HAL_SAI_InitProtocol+0x16>
 80050b4:	1ec8      	subs	r0, r1, #3
 80050b6:	2801      	cmp	r0, #1
 80050b8:	d80b      	bhi.n	80050d2 <HAL_SAI_InitProtocol+0x26>
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80050ba:	4620      	mov	r0, r4
 80050bc:	f7ff fe74 	bl	8004da8 <SAI_InitPCM>
      break;
 80050c0:	e001      	b.n	80050c6 <HAL_SAI_InitProtocol+0x1a>
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80050c2:	f7ff fe0a 	bl	8004cda <SAI_InitI2S>
  if (status == HAL_OK)
 80050c6:	b100      	cbz	r0, 80050ca <HAL_SAI_InitProtocol+0x1e>
}
 80050c8:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
 80050ca:	4620      	mov	r0, r4
 80050cc:	f7ff fed8 	bl	8004e80 <HAL_SAI_Init>
 80050d0:	e7fa      	b.n	80050c8 <HAL_SAI_InitProtocol+0x1c>
  switch (protocol)
 80050d2:	2001      	movs	r0, #1
 80050d4:	e7f8      	b.n	80050c8 <HAL_SAI_InitProtocol+0x1c>

080050d6 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d06a      	beq.n	80051b0 <HAL_SPI_Init+0xda>
{
 80050da:	b510      	push	{r4, lr}
 80050dc:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050e0:	b933      	cbnz	r3, 80050f0 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050e2:	6843      	ldr	r3, [r0, #4]
 80050e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e8:	d005      	beq.n	80050f6 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61c3      	str	r3, [r0, #28]
 80050ee:	e002      	b.n	80050f6 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050f0:	2300      	movs	r3, #0
 80050f2:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050f4:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f6:	2300      	movs	r3, #0
 80050f8:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050fa:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d04d      	beq.n	800519e <HAL_SPI_Init+0xc8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005102:	2302      	movs	r3, #2
 8005104:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005110:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005112:	68e3      	ldr	r3, [r4, #12]
 8005114:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005118:	d947      	bls.n	80051aa <HAL_SPI_Init+0xd4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800511a:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800511c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005120:	d004      	beq.n	800512c <HAL_SPI_Init+0x56>
 8005122:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005126:	d001      	beq.n	800512c <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005128:	2300      	movs	r3, #0
 800512a:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800512c:	6863      	ldr	r3, [r4, #4]
 800512e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005132:	68a1      	ldr	r1, [r4, #8]
 8005134:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8005138:	430b      	orrs	r3, r1
 800513a:	6921      	ldr	r1, [r4, #16]
 800513c:	f001 0102 	and.w	r1, r1, #2
 8005140:	430b      	orrs	r3, r1
 8005142:	6961      	ldr	r1, [r4, #20]
 8005144:	f001 0101 	and.w	r1, r1, #1
 8005148:	430b      	orrs	r3, r1
 800514a:	69a1      	ldr	r1, [r4, #24]
 800514c:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8005150:	430b      	orrs	r3, r1
 8005152:	69e1      	ldr	r1, [r4, #28]
 8005154:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8005158:	430b      	orrs	r3, r1
 800515a:	6a21      	ldr	r1, [r4, #32]
 800515c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005160:	430b      	orrs	r3, r1
 8005162:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005164:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8005168:	6820      	ldr	r0, [r4, #0]
 800516a:	430b      	orrs	r3, r1
 800516c:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800516e:	8b63      	ldrh	r3, [r4, #26]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005176:	f001 0110 	and.w	r1, r1, #16
 800517a:	430b      	orrs	r3, r1
 800517c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800517e:	f001 0108 	and.w	r1, r1, #8
 8005182:	430b      	orrs	r3, r1
 8005184:	68e1      	ldr	r1, [r4, #12]
 8005186:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800518a:	430b      	orrs	r3, r1
 800518c:	6821      	ldr	r1, [r4, #0]
 800518e:	4313      	orrs	r3, r2
 8005190:	604b      	str	r3, [r1, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005192:	2000      	movs	r0, #0
 8005194:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005196:	2301      	movs	r3, #1
 8005198:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 800519c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800519e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80051a2:	4620      	mov	r0, r4
 80051a4:	f7fb fd8e 	bl	8000cc4 <HAL_SPI_MspInit>
 80051a8:	e7ab      	b.n	8005102 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051ae:	e7b5      	b.n	800511c <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 80051b0:	2001      	movs	r0, #1
}
 80051b2:	4770      	bx	lr

080051b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051b6:	6a03      	ldr	r3, [r0, #32]
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051c2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051c8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051cc:	680d      	ldr	r5, [r1, #0]
 80051ce:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051d0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051d4:	688d      	ldr	r5, [r1, #8]
 80051d6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051d8:	4d14      	ldr	r5, [pc, #80]	; (800522c <TIM_OC1_SetConfig+0x78>)
 80051da:	42a8      	cmp	r0, r5
 80051dc:	d007      	beq.n	80051ee <TIM_OC1_SetConfig+0x3a>
 80051de:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80051e2:	42a8      	cmp	r0, r5
 80051e4:	d003      	beq.n	80051ee <TIM_OC1_SetConfig+0x3a>
 80051e6:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 80051ea:	42a8      	cmp	r0, r5
 80051ec:	d105      	bne.n	80051fa <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051ee:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051f2:	68cd      	ldr	r5, [r1, #12]
 80051f4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051f6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fa:	4d0c      	ldr	r5, [pc, #48]	; (800522c <TIM_OC1_SetConfig+0x78>)
 80051fc:	42a8      	cmp	r0, r5
 80051fe:	d007      	beq.n	8005210 <TIM_OC1_SetConfig+0x5c>
 8005200:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8005204:	42a8      	cmp	r0, r5
 8005206:	d003      	beq.n	8005210 <TIM_OC1_SetConfig+0x5c>
 8005208:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800520c:	42a8      	cmp	r0, r5
 800520e:	d105      	bne.n	800521c <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005210:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005214:	694c      	ldr	r4, [r1, #20]
 8005216:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005218:	698d      	ldr	r5, [r1, #24]
 800521a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005220:	684a      	ldr	r2, [r1, #4]
 8005222:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005224:	6203      	str	r3, [r0, #32]
}
 8005226:	bc30      	pop	{r4, r5}
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40012c00 	.word	0x40012c00

08005230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005230:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005232:	6a03      	ldr	r3, [r0, #32]
 8005234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005238:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800523c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005240:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005244:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005248:	680d      	ldr	r5, [r1, #0]
 800524a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800524c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005250:	688d      	ldr	r5, [r1, #8]
 8005252:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005256:	4d12      	ldr	r5, [pc, #72]	; (80052a0 <TIM_OC3_SetConfig+0x70>)
 8005258:	42a8      	cmp	r0, r5
 800525a:	d019      	beq.n	8005290 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525c:	4d10      	ldr	r5, [pc, #64]	; (80052a0 <TIM_OC3_SetConfig+0x70>)
 800525e:	42a8      	cmp	r0, r5
 8005260:	d007      	beq.n	8005272 <TIM_OC3_SetConfig+0x42>
 8005262:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8005266:	42a8      	cmp	r0, r5
 8005268:	d003      	beq.n	8005272 <TIM_OC3_SetConfig+0x42>
 800526a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800526e:	42a8      	cmp	r0, r5
 8005270:	d107      	bne.n	8005282 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005272:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005276:	694d      	ldr	r5, [r1, #20]
 8005278:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800527c:	698d      	ldr	r5, [r1, #24]
 800527e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005282:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005284:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005286:	684a      	ldr	r2, [r1, #4]
 8005288:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528a:	6203      	str	r3, [r0, #32]
}
 800528c:	bc30      	pop	{r4, r5}
 800528e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8005290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005294:	68cd      	ldr	r5, [r1, #12]
 8005296:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800529a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800529e:	e7dd      	b.n	800525c <TIM_OC3_SetConfig+0x2c>
 80052a0:	40012c00 	.word	0x40012c00

080052a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052a6:	6a03      	ldr	r3, [r0, #32]
 80052a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052b2:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052b8:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052bc:	680d      	ldr	r5, [r1, #0]
 80052be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052c6:	688d      	ldr	r5, [r1, #8]
 80052c8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052cc:	4d0b      	ldr	r5, [pc, #44]	; (80052fc <TIM_OC4_SetConfig+0x58>)
 80052ce:	42a8      	cmp	r0, r5
 80052d0:	d007      	beq.n	80052e2 <TIM_OC4_SetConfig+0x3e>
 80052d2:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 80052d6:	42a8      	cmp	r0, r5
 80052d8:	d003      	beq.n	80052e2 <TIM_OC4_SetConfig+0x3e>
 80052da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052de:	42a8      	cmp	r0, r5
 80052e0:	d104      	bne.n	80052ec <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052e2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052e6:	694d      	ldr	r5, [r1, #20]
 80052e8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ee:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052f0:	684b      	ldr	r3, [r1, #4]
 80052f2:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f4:	6202      	str	r2, [r0, #32]
}
 80052f6:	bc30      	pop	{r4, r5}
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40012c00 	.word	0x40012c00

08005300 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005300:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005302:	6a03      	ldr	r3, [r0, #32]
 8005304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005308:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800530c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800530e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005310:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005314:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005318:	680d      	ldr	r5, [r1, #0]
 800531a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800531c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005320:	688d      	ldr	r5, [r1, #8]
 8005322:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005326:	4d0b      	ldr	r5, [pc, #44]	; (8005354 <TIM_OC5_SetConfig+0x54>)
 8005328:	42a8      	cmp	r0, r5
 800532a:	d007      	beq.n	800533c <TIM_OC5_SetConfig+0x3c>
 800532c:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8005330:	42a8      	cmp	r0, r5
 8005332:	d003      	beq.n	800533c <TIM_OC5_SetConfig+0x3c>
 8005334:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005338:	42a8      	cmp	r0, r5
 800533a:	d104      	bne.n	8005346 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800533c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005340:	694d      	ldr	r5, [r1, #20]
 8005342:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005346:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005348:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800534a:	684a      	ldr	r2, [r1, #4]
 800534c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534e:	6203      	str	r3, [r0, #32]
}
 8005350:	bc30      	pop	{r4, r5}
 8005352:	4770      	bx	lr
 8005354:	40012c00 	.word	0x40012c00

08005358 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005358:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800535a:	6a03      	ldr	r3, [r0, #32]
 800535c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005360:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005366:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800536c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005370:	680d      	ldr	r5, [r1, #0]
 8005372:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005376:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800537a:	688d      	ldr	r5, [r1, #8]
 800537c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005380:	4d0b      	ldr	r5, [pc, #44]	; (80053b0 <TIM_OC6_SetConfig+0x58>)
 8005382:	42a8      	cmp	r0, r5
 8005384:	d007      	beq.n	8005396 <TIM_OC6_SetConfig+0x3e>
 8005386:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 800538a:	42a8      	cmp	r0, r5
 800538c:	d003      	beq.n	8005396 <TIM_OC6_SetConfig+0x3e>
 800538e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005392:	42a8      	cmp	r0, r5
 8005394:	d104      	bne.n	80053a0 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005396:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800539a:	694d      	ldr	r5, [r1, #20]
 800539c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053a2:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053a4:	684b      	ldr	r3, [r1, #4]
 80053a6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a8:	6202      	str	r2, [r0, #32]
}
 80053aa:	bc30      	pop	{r4, r5}
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40012c00 	.word	0x40012c00

080053b4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80053b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d122      	bne.n	8005404 <HAL_TIM_Base_Start_IT+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80053be:	2302      	movs	r3, #2
 80053c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053c4:	6802      	ldr	r2, [r0, #0]
 80053c6:	68d3      	ldr	r3, [r2, #12]
 80053c8:	f043 0301 	orr.w	r3, r3, #1
 80053cc:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ce:	6803      	ldr	r3, [r0, #0]
 80053d0:	4a0f      	ldr	r2, [pc, #60]	; (8005410 <HAL_TIM_Base_Start_IT+0x5c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d008      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x34>
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053da:	d005      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x34>
    __HAL_TIM_ENABLE(htim);
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80053e4:	2000      	movs	r0, #0
 80053e6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e8:	6899      	ldr	r1, [r3, #8]
 80053ea:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <HAL_TIM_Base_Start_IT+0x60>)
 80053ec:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ee:	2a06      	cmp	r2, #6
 80053f0:	d00a      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0x54>
 80053f2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80053f6:	d009      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x58>
      __HAL_TIM_ENABLE(htim);
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005400:	2000      	movs	r0, #0
 8005402:	4770      	bx	lr
    return HAL_ERROR;
 8005404:	2001      	movs	r0, #1
 8005406:	4770      	bx	lr
  return HAL_OK;
 8005408:	2000      	movs	r0, #0
 800540a:	4770      	bx	lr
 800540c:	2000      	movs	r0, #0
}
 800540e:	4770      	bx	lr
 8005410:	40012c00 	.word	0x40012c00
 8005414:	00010007 	.word	0x00010007

08005418 <HAL_TIM_PWM_MspInit>:
}
 8005418:	4770      	bx	lr

0800541a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800541a:	4770      	bx	lr

0800541c <HAL_TIM_IC_CaptureCallback>:
}
 800541c:	4770      	bx	lr

0800541e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800541e:	4770      	bx	lr

08005420 <HAL_TIM_TriggerCallback>:
}
 8005420:	4770      	bx	lr

08005422 <HAL_TIM_IRQHandler>:
{
 8005422:	b510      	push	{r4, lr}
 8005424:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005426:	6803      	ldr	r3, [r0, #0]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	f012 0f02 	tst.w	r2, #2
 800542e:	d011      	beq.n	8005454 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	f012 0f02 	tst.w	r2, #2
 8005436:	d00d      	beq.n	8005454 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005438:	f06f 0202 	mvn.w	r2, #2
 800543c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800543e:	2301      	movs	r3, #1
 8005440:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005442:	6803      	ldr	r3, [r0, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	f013 0f03 	tst.w	r3, #3
 800544a:	d079      	beq.n	8005540 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800544c:	f7ff ffe6 	bl	800541c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005450:	2300      	movs	r3, #0
 8005452:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	f012 0f04 	tst.w	r2, #4
 800545c:	d012      	beq.n	8005484 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	f012 0f04 	tst.w	r2, #4
 8005464:	d00e      	beq.n	8005484 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005466:	f06f 0204 	mvn.w	r2, #4
 800546a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800546c:	2302      	movs	r3, #2
 800546e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005478:	d068      	beq.n	800554c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800547a:	4620      	mov	r0, r4
 800547c:	f7ff ffce 	bl	800541c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005480:	2300      	movs	r3, #0
 8005482:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	f012 0f08 	tst.w	r2, #8
 800548c:	d012      	beq.n	80054b4 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	f012 0f08 	tst.w	r2, #8
 8005494:	d00e      	beq.n	80054b4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005496:	f06f 0208 	mvn.w	r2, #8
 800549a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800549c:	2304      	movs	r3, #4
 800549e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	f013 0f03 	tst.w	r3, #3
 80054a8:	d057      	beq.n	800555a <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80054aa:	4620      	mov	r0, r4
 80054ac:	f7ff ffb6 	bl	800541c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b0:	2300      	movs	r3, #0
 80054b2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	f012 0f10 	tst.w	r2, #16
 80054bc:	d012      	beq.n	80054e4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	f012 0f10 	tst.w	r2, #16
 80054c4:	d00e      	beq.n	80054e4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054c6:	f06f 0210 	mvn.w	r2, #16
 80054ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054cc:	2308      	movs	r3, #8
 80054ce:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80054d8:	d046      	beq.n	8005568 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80054da:	4620      	mov	r0, r4
 80054dc:	f7ff ff9e 	bl	800541c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e0:	2300      	movs	r3, #0
 80054e2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	f012 0f01 	tst.w	r2, #1
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	f012 0f01 	tst.w	r2, #1
 80054f4:	d13f      	bne.n	8005576 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80054fe:	d003      	beq.n	8005508 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005506:	d13d      	bne.n	8005584 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005510:	d003      	beq.n	800551a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005518:	d13b      	bne.n	8005592 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005522:	d003      	beq.n	800552c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	f012 0f40 	tst.w	r2, #64	; 0x40
 800552a:	d139      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	f012 0f20 	tst.w	r2, #32
 8005534:	d003      	beq.n	800553e <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	f012 0f20 	tst.w	r2, #32
 800553c:	d137      	bne.n	80055ae <HAL_TIM_IRQHandler+0x18c>
}
 800553e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005540:	f7ff ff6b 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005544:	4620      	mov	r0, r4
 8005546:	f7ff ff6a 	bl	800541e <HAL_TIM_PWM_PulseFinishedCallback>
 800554a:	e781      	b.n	8005450 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554c:	4620      	mov	r0, r4
 800554e:	f7ff ff64 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005552:	4620      	mov	r0, r4
 8005554:	f7ff ff63 	bl	800541e <HAL_TIM_PWM_PulseFinishedCallback>
 8005558:	e792      	b.n	8005480 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	4620      	mov	r0, r4
 800555c:	f7ff ff5d 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	4620      	mov	r0, r4
 8005562:	f7ff ff5c 	bl	800541e <HAL_TIM_PWM_PulseFinishedCallback>
 8005566:	e7a3      	b.n	80054b0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005568:	4620      	mov	r0, r4
 800556a:	f7ff ff56 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556e:	4620      	mov	r0, r4
 8005570:	f7ff ff55 	bl	800541e <HAL_TIM_PWM_PulseFinishedCallback>
 8005574:	e7b4      	b.n	80054e0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005576:	f06f 0201 	mvn.w	r2, #1
 800557a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800557c:	4620      	mov	r0, r4
 800557e:	f7fb f9e5 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
 8005582:	e7b8      	b.n	80054f6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005584:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005588:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800558a:	4620      	mov	r0, r4
 800558c:	f000 f9d9 	bl	8005942 <HAL_TIMEx_BreakCallback>
 8005590:	e7ba      	b.n	8005508 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005592:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005596:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005598:	4620      	mov	r0, r4
 800559a:	f000 f9d3 	bl	8005944 <HAL_TIMEx_Break2Callback>
 800559e:	e7bc      	b.n	800551a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80055a6:	4620      	mov	r0, r4
 80055a8:	f7ff ff3a 	bl	8005420 <HAL_TIM_TriggerCallback>
 80055ac:	e7be      	b.n	800552c <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055ae:	f06f 0220 	mvn.w	r2, #32
 80055b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80055b4:	4620      	mov	r0, r4
 80055b6:	f000 f9c3 	bl	8005940 <HAL_TIMEx_CommutCallback>
}
 80055ba:	e7c0      	b.n	800553e <HAL_TIM_IRQHandler+0x11c>

080055bc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80055bc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055be:	4a1a      	ldr	r2, [pc, #104]	; (8005628 <TIM_Base_SetConfig+0x6c>)
 80055c0:	4290      	cmp	r0, r2
 80055c2:	d002      	beq.n	80055ca <TIM_Base_SetConfig+0xe>
 80055c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055c8:	d103      	bne.n	80055d2 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80055ce:	684a      	ldr	r2, [r1, #4]
 80055d0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055d2:	4a15      	ldr	r2, [pc, #84]	; (8005628 <TIM_Base_SetConfig+0x6c>)
 80055d4:	4290      	cmp	r0, r2
 80055d6:	d00a      	beq.n	80055ee <TIM_Base_SetConfig+0x32>
 80055d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055dc:	d007      	beq.n	80055ee <TIM_Base_SetConfig+0x32>
 80055de:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 80055e2:	4290      	cmp	r0, r2
 80055e4:	d003      	beq.n	80055ee <TIM_Base_SetConfig+0x32>
 80055e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ea:	4290      	cmp	r0, r2
 80055ec:	d103      	bne.n	80055f6 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055f2:	68ca      	ldr	r2, [r1, #12]
 80055f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055fa:	694a      	ldr	r2, [r1, #20]
 80055fc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80055fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005600:	688b      	ldr	r3, [r1, #8]
 8005602:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005604:	680b      	ldr	r3, [r1, #0]
 8005606:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005608:	4b07      	ldr	r3, [pc, #28]	; (8005628 <TIM_Base_SetConfig+0x6c>)
 800560a:	4298      	cmp	r0, r3
 800560c:	d007      	beq.n	800561e <TIM_Base_SetConfig+0x62>
 800560e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8005612:	4298      	cmp	r0, r3
 8005614:	d003      	beq.n	800561e <TIM_Base_SetConfig+0x62>
 8005616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800561a:	4298      	cmp	r0, r3
 800561c:	d101      	bne.n	8005622 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 800561e:	690b      	ldr	r3, [r1, #16]
 8005620:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005622:	2301      	movs	r3, #1
 8005624:	6143      	str	r3, [r0, #20]
}
 8005626:	4770      	bx	lr
 8005628:	40012c00 	.word	0x40012c00

0800562c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800562c:	b360      	cbz	r0, 8005688 <HAL_TIM_Base_Init+0x5c>
{
 800562e:	b510      	push	{r4, lr}
 8005630:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005632:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005636:	b313      	cbz	r3, 800567e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005638:	2302      	movs	r3, #2
 800563a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563e:	4621      	mov	r1, r4
 8005640:	f851 0b04 	ldr.w	r0, [r1], #4
 8005644:	f7ff ffba 	bl	80055bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005648:	2301      	movs	r3, #1
 800564a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800564e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005652:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005656:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800565a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800565e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005666:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800566a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800566e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005672:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005676:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800567a:	2000      	movs	r0, #0
}
 800567c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800567e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005682:	f7fb fc79 	bl	8000f78 <HAL_TIM_Base_MspInit>
 8005686:	e7d7      	b.n	8005638 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005688:	2001      	movs	r0, #1
}
 800568a:	4770      	bx	lr

0800568c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800568c:	b360      	cbz	r0, 80056e8 <HAL_TIM_PWM_Init+0x5c>
{
 800568e:	b510      	push	{r4, lr}
 8005690:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005692:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005696:	b313      	cbz	r3, 80056de <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005698:	2302      	movs	r3, #2
 800569a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800569e:	4621      	mov	r1, r4
 80056a0:	f851 0b04 	ldr.w	r0, [r1], #4
 80056a4:	f7ff ff8a 	bl	80055bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80056b2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80056b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80056ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80056be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80056ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056ce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80056d2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80056d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80056da:	2000      	movs	r0, #0
}
 80056dc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80056de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80056e2:	f7ff fe99 	bl	8005418 <HAL_TIM_PWM_MspInit>
 80056e6:	e7d7      	b.n	8005698 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80056e8:	2001      	movs	r0, #1
}
 80056ea:	4770      	bx	lr

080056ec <TIM_OC2_SetConfig>:
{
 80056ec:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ee:	6a03      	ldr	r3, [r0, #32]
 80056f0:	f023 0310 	bic.w	r3, r3, #16
 80056f4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80056f6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80056f8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80056fa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056fc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005700:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005704:	680d      	ldr	r5, [r1, #0]
 8005706:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800570a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800570e:	688d      	ldr	r5, [r1, #8]
 8005710:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005714:	4d12      	ldr	r5, [pc, #72]	; (8005760 <TIM_OC2_SetConfig+0x74>)
 8005716:	42a8      	cmp	r0, r5
 8005718:	d019      	beq.n	800574e <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571a:	4d11      	ldr	r5, [pc, #68]	; (8005760 <TIM_OC2_SetConfig+0x74>)
 800571c:	42a8      	cmp	r0, r5
 800571e:	d007      	beq.n	8005730 <TIM_OC2_SetConfig+0x44>
 8005720:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8005724:	42a8      	cmp	r0, r5
 8005726:	d003      	beq.n	8005730 <TIM_OC2_SetConfig+0x44>
 8005728:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800572c:	42a8      	cmp	r0, r5
 800572e:	d107      	bne.n	8005740 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005730:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005734:	694d      	ldr	r5, [r1, #20]
 8005736:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800573a:	698d      	ldr	r5, [r1, #24]
 800573c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8005740:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005742:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005744:	684a      	ldr	r2, [r1, #4]
 8005746:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005748:	6203      	str	r3, [r0, #32]
}
 800574a:	bc30      	pop	{r4, r5}
 800574c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800574e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005752:	68cd      	ldr	r5, [r1, #12]
 8005754:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800575c:	e7dd      	b.n	800571a <TIM_OC2_SetConfig+0x2e>
 800575e:	bf00      	nop
 8005760:	40012c00 	.word	0x40012c00

08005764 <HAL_TIM_PWM_ConfigChannel>:
{
 8005764:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005766:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800576a:	2b01      	cmp	r3, #1
 800576c:	f000 8095 	beq.w	800589a <HAL_TIM_PWM_ConfigChannel+0x136>
 8005770:	4604      	mov	r4, r0
 8005772:	460d      	mov	r5, r1
 8005774:	2301      	movs	r3, #1
 8005776:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800577a:	2a14      	cmp	r2, #20
 800577c:	f200 8088 	bhi.w	8005890 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8005780:	e8df f002 	tbb	[pc, r2]
 8005784:	8686860b 	.word	0x8686860b
 8005788:	8686861f 	.word	0x8686861f
 800578c:	86868634 	.word	0x86868634
 8005790:	86868648 	.word	0x86868648
 8005794:	8686865d 	.word	0x8686865d
 8005798:	71          	.byte	0x71
 8005799:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800579a:	6800      	ldr	r0, [r0, #0]
 800579c:	f7ff fd0a 	bl	80051b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057a0:	6822      	ldr	r2, [r4, #0]
 80057a2:	6993      	ldr	r3, [r2, #24]
 80057a4:	f043 0308 	orr.w	r3, r3, #8
 80057a8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	6993      	ldr	r3, [r2, #24]
 80057ae:	f023 0304 	bic.w	r3, r3, #4
 80057b2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057b4:	6822      	ldr	r2, [r4, #0]
 80057b6:	6993      	ldr	r3, [r2, #24]
 80057b8:	6929      	ldr	r1, [r5, #16]
 80057ba:	430b      	orrs	r3, r1
 80057bc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80057be:	2000      	movs	r0, #0
      break;
 80057c0:	e067      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	f7ff ff92 	bl	80056ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057c8:	6822      	ldr	r2, [r4, #0]
 80057ca:	6993      	ldr	r3, [r2, #24]
 80057cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057d0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	6993      	ldr	r3, [r2, #24]
 80057d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057da:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057dc:	6822      	ldr	r2, [r4, #0]
 80057de:	6993      	ldr	r3, [r2, #24]
 80057e0:	6929      	ldr	r1, [r5, #16]
 80057e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80057e6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80057e8:	2000      	movs	r0, #0
      break;
 80057ea:	e052      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057ec:	6800      	ldr	r0, [r0, #0]
 80057ee:	f7ff fd1f 	bl	8005230 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057f2:	6822      	ldr	r2, [r4, #0]
 80057f4:	69d3      	ldr	r3, [r2, #28]
 80057f6:	f043 0308 	orr.w	r3, r3, #8
 80057fa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057fc:	6822      	ldr	r2, [r4, #0]
 80057fe:	69d3      	ldr	r3, [r2, #28]
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005806:	6822      	ldr	r2, [r4, #0]
 8005808:	69d3      	ldr	r3, [r2, #28]
 800580a:	6929      	ldr	r1, [r5, #16]
 800580c:	430b      	orrs	r3, r1
 800580e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005810:	2000      	movs	r0, #0
      break;
 8005812:	e03e      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005814:	6800      	ldr	r0, [r0, #0]
 8005816:	f7ff fd45 	bl	80052a4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800581a:	6822      	ldr	r2, [r4, #0]
 800581c:	69d3      	ldr	r3, [r2, #28]
 800581e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005822:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005824:	6822      	ldr	r2, [r4, #0]
 8005826:	69d3      	ldr	r3, [r2, #28]
 8005828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800582c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800582e:	6822      	ldr	r2, [r4, #0]
 8005830:	69d3      	ldr	r3, [r2, #28]
 8005832:	6929      	ldr	r1, [r5, #16]
 8005834:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005838:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800583a:	2000      	movs	r0, #0
      break;
 800583c:	e029      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800583e:	6800      	ldr	r0, [r0, #0]
 8005840:	f7ff fd5e 	bl	8005300 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005844:	6822      	ldr	r2, [r4, #0]
 8005846:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005848:	f043 0308 	orr.w	r3, r3, #8
 800584c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800584e:	6822      	ldr	r2, [r4, #0]
 8005850:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005852:	f023 0304 	bic.w	r3, r3, #4
 8005856:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005858:	6822      	ldr	r2, [r4, #0]
 800585a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800585c:	6929      	ldr	r1, [r5, #16]
 800585e:	430b      	orrs	r3, r1
 8005860:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8005862:	2000      	movs	r0, #0
      break;
 8005864:	e015      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005866:	6800      	ldr	r0, [r0, #0]
 8005868:	f7ff fd76 	bl	8005358 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800586c:	6822      	ldr	r2, [r4, #0]
 800586e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005870:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005874:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005876:	6822      	ldr	r2, [r4, #0]
 8005878:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800587a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800587e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005880:	6822      	ldr	r2, [r4, #0]
 8005882:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005884:	6929      	ldr	r1, [r5, #16]
 8005886:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800588a:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800588c:	2000      	movs	r0, #0
      break;
 800588e:	e000      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x12e>
  __HAL_LOCK(htim);
 8005890:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005892:	2300      	movs	r3, #0
 8005894:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005898:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800589a:	2002      	movs	r0, #2
 800589c:	e7fc      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x134>
	...

080058a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d047      	beq.n	8005938 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
{
 80058a8:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80058aa:	2301      	movs	r3, #1
 80058ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058b0:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b6:	688a      	ldr	r2, [r1, #8]
 80058b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058be:	684a      	ldr	r2, [r1, #4]
 80058c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c6:	680a      	ldr	r2, [r1, #0]
 80058c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058ce:	690a      	ldr	r2, [r1, #16]
 80058d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d6:	694a      	ldr	r2, [r1, #20]
 80058d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058de:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80058e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058e2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80058e6:	698a      	ldr	r2, [r1, #24]
 80058e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80058ec:	6802      	ldr	r2, [r0, #0]
 80058ee:	4c13      	ldr	r4, [pc, #76]	; (800593c <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 80058f0:	42a2      	cmp	r2, r4
 80058f2:	d00a      	beq.n	800590a <HAL_TIMEx_ConfigBreakDeadTime+0x6a>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058f4:	4c11      	ldr	r4, [pc, #68]	; (800593c <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 80058f6:	42a2      	cmp	r2, r4
 80058f8:	d00c      	beq.n	8005914 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058fa:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80058fc:	2300      	movs	r3, #0
 80058fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005902:	4618      	mov	r0, r3
}
 8005904:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005908:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800590a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800590e:	69cc      	ldr	r4, [r1, #28]
 8005910:	4323      	orrs	r3, r4
 8005912:	e7ef      	b.n	80058f4 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005914:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005918:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800591a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800591e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005922:	6a0c      	ldr	r4, [r1, #32]
 8005924:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005926:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800592a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800592c:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800592e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005932:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8005934:	430b      	orrs	r3, r1
 8005936:	e7e0      	b.n	80058fa <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  __HAL_LOCK(htim);
 8005938:	2002      	movs	r0, #2
}
 800593a:	4770      	bx	lr
 800593c:	40012c00 	.word	0x40012c00

08005940 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005940:	4770      	bx	lr

08005942 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005942:	4770      	bx	lr

08005944 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005944:	4770      	bx	lr

08005946 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005946:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005948:	2000      	movs	r0, #0
 800594a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800594e:	f64b 7280 	movw	r2, #49024	; 0xbf80
 8005952:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8005956:	4770      	bx	lr

08005958 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005958:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800595c:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8005960:	045b      	lsls	r3, r3, #17
 8005962:	0c5b      	lsrs	r3, r3, #17
 8005964:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8005968:	2000      	movs	r0, #0
 800596a:	4770      	bx	lr

0800596c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800596c:	b084      	sub	sp, #16
 800596e:	b410      	push	{r4}
 8005970:	4604      	mov	r4, r0
 8005972:	a802      	add	r0, sp, #8
 8005974:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005978:	2301      	movs	r3, #1
 800597a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800597e:	2000      	movs	r0, #0
 8005980:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005984:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005988:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 800598c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005990:	b004      	add	sp, #16
 8005992:	4770      	bx	lr

08005994 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005994:	b430      	push	{r4, r5}
 8005996:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005998:	780a      	ldrb	r2, [r1, #0]
 800599a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 800599e:	b2a4      	uxth	r4, r4
 80059a0:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80059a4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80059a8:	b2a4      	uxth	r4, r4

  /* initialize Endpoint */
  switch (ep->type)
 80059aa:	78c8      	ldrb	r0, [r1, #3]
 80059ac:	2803      	cmp	r0, #3
 80059ae:	d85b      	bhi.n	8005a68 <USB_ActivateEndpoint+0xd4>
 80059b0:	e8df f000 	tbb	[pc, r0]
 80059b4:	5202564f 	.word	0x5202564f
 80059b8:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80059ba:	f248 0580 	movw	r5, #32896	; 0x8080
 80059be:	432c      	orrs	r4, r5
 80059c0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80059c4:	780c      	ldrb	r4, [r1, #0]
 80059c6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80059ca:	b212      	sxth	r2, r2
 80059cc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80059d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80059d4:	4322      	orrs	r2, r4
 80059d6:	b292      	uxth	r2, r2
 80059d8:	432a      	orrs	r2, r5
 80059da:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 80059de:	7b0a      	ldrb	r2, [r1, #12]
 80059e0:	2a00      	cmp	r2, #0
 80059e2:	f040 80b6 	bne.w	8005b52 <USB_ActivateEndpoint+0x1be>
  {
    if (ep->is_in != 0U)
 80059e6:	784a      	ldrb	r2, [r1, #1]
 80059e8:	2a00      	cmp	r2, #0
 80059ea:	d04e      	beq.n	8005a8a <USB_ActivateEndpoint+0xf6>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059ec:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80059f0:	fa13 f282 	uxtah	r2, r3, r2
 80059f4:	780c      	ldrb	r4, [r1, #0]
 80059f6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80059fa:	88cc      	ldrh	r4, [r1, #6]
 80059fc:	0864      	lsrs	r4, r4, #1
 80059fe:	0064      	lsls	r4, r4, #1
 8005a00:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a04:	780c      	ldrb	r4, [r1, #0]
 8005a06:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005a0a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005a0e:	d00c      	beq.n	8005a2a <USB_ActivateEndpoint+0x96>
 8005a10:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005a14:	b292      	uxth	r2, r2
 8005a16:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005a1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a22:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005a26:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005a2a:	78ca      	ldrb	r2, [r1, #3]
 8005a2c:	2a01      	cmp	r2, #1
 8005a2e:	d01d      	beq.n	8005a6c <USB_ActivateEndpoint+0xd8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a30:	7809      	ldrb	r1, [r1, #0]
 8005a32:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005a36:	b292      	uxth	r2, r2
 8005a38:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a40:	f082 0220 	eor.w	r2, r2, #32
 8005a44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a4c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005a50:	e060      	b.n	8005b14 <USB_ActivateEndpoint+0x180>
      wEpRegVal |= USB_EP_CONTROL;
 8005a52:	f444 7400 	orr.w	r4, r4, #512	; 0x200
      break;
 8005a56:	e7b0      	b.n	80059ba <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8005a58:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8005a5c:	2000      	movs	r0, #0
      break;
 8005a5e:	e7ac      	b.n	80059ba <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005a60:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8005a64:	2000      	movs	r0, #0
      break;
 8005a66:	e7a8      	b.n	80059ba <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 8005a68:	2001      	movs	r0, #1
 8005a6a:	e7a6      	b.n	80059ba <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a6c:	7809      	ldrb	r1, [r1, #0]
 8005a6e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005a72:	b292      	uxth	r2, r2
 8005a74:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a84:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005a88:	e044      	b.n	8005b14 <USB_ActivateEndpoint+0x180>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a8a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005a8e:	fa13 f282 	uxtah	r2, r3, r2
 8005a92:	780c      	ldrb	r4, [r1, #0]
 8005a94:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005a98:	88cc      	ldrh	r4, [r1, #6]
 8005a9a:	0864      	lsrs	r4, r4, #1
 8005a9c:	0064      	lsls	r4, r4, #1
 8005a9e:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005aa2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005aa6:	fa13 f282 	uxtah	r2, r3, r2
 8005aaa:	780c      	ldrb	r4, [r1, #0]
 8005aac:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005ab0:	690d      	ldr	r5, [r1, #16]
 8005ab2:	2d3e      	cmp	r5, #62	; 0x3e
 8005ab4:	d930      	bls.n	8005b18 <USB_ActivateEndpoint+0x184>
 8005ab6:	096c      	lsrs	r4, r5, #5
 8005ab8:	f015 0f1f 	tst.w	r5, #31
 8005abc:	d100      	bne.n	8005ac0 <USB_ActivateEndpoint+0x12c>
 8005abe:	3c01      	subs	r4, #1
 8005ac0:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8005ac4:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8005ac8:	b2a4      	uxth	r4, r4
 8005aca:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ace:	780c      	ldrb	r4, [r1, #0]
 8005ad0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005ad4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005ad8:	d00c      	beq.n	8005af4 <USB_ActivateEndpoint+0x160>
 8005ada:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005ade:	b292      	uxth	r2, r2
 8005ae0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005ae4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005ae8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005aec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005af0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005af4:	7809      	ldrb	r1, [r1, #0]
 8005af6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005afa:	b292      	uxth	r2, r2
 8005afc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b04:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8005b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b10:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8005b14:	bc30      	pop	{r4, r5}
 8005b16:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b18:	b98d      	cbnz	r5, 8005b3e <USB_ActivateEndpoint+0x1aa>
 8005b1a:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8005b1e:	b2a4      	uxth	r4, r4
 8005b20:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8005b24:	b2a4      	uxth	r4, r4
 8005b26:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8005b2a:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8005b2e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8005b32:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8005b36:	b2a4      	uxth	r4, r4
 8005b38:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8005b3c:	e7c7      	b.n	8005ace <USB_ActivateEndpoint+0x13a>
 8005b3e:	086c      	lsrs	r4, r5, #1
 8005b40:	f015 0f01 	tst.w	r5, #1
 8005b44:	d000      	beq.n	8005b48 <USB_ActivateEndpoint+0x1b4>
 8005b46:	3401      	adds	r4, #1
 8005b48:	02a4      	lsls	r4, r4, #10
 8005b4a:	b2a4      	uxth	r4, r4
 8005b4c:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8005b50:	e7bd      	b.n	8005ace <USB_ActivateEndpoint+0x13a>
    if (ep->type == EP_TYPE_BULK)
 8005b52:	78ca      	ldrb	r2, [r1, #3]
 8005b54:	2a02      	cmp	r2, #2
 8005b56:	d069      	beq.n	8005c2c <USB_ActivateEndpoint+0x298>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005b58:	780c      	ldrb	r4, [r1, #0]
 8005b5a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005b5e:	b292      	uxth	r2, r2
 8005b60:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8005b64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b70:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b74:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005b78:	fa13 f282 	uxtah	r2, r3, r2
 8005b7c:	780c      	ldrb	r4, [r1, #0]
 8005b7e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005b82:	890c      	ldrh	r4, [r1, #8]
 8005b84:	0864      	lsrs	r4, r4, #1
 8005b86:	0064      	lsls	r4, r4, #1
 8005b88:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 8005b8c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005b90:	fa13 f282 	uxtah	r2, r3, r2
 8005b94:	780c      	ldrb	r4, [r1, #0]
 8005b96:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005b9a:	894c      	ldrh	r4, [r1, #10]
 8005b9c:	0864      	lsrs	r4, r4, #1
 8005b9e:	0064      	lsls	r4, r4, #1
 8005ba0:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 8005ba4:	784a      	ldrb	r2, [r1, #1]
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	d14f      	bne.n	8005c4a <USB_ActivateEndpoint+0x2b6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005baa:	780c      	ldrb	r4, [r1, #0]
 8005bac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005bb0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005bb4:	d00c      	beq.n	8005bd0 <USB_ActivateEndpoint+0x23c>
 8005bb6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005bba:	b292      	uxth	r2, r2
 8005bbc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005bc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005bc4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005bc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bcc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bd0:	780c      	ldrb	r4, [r1, #0]
 8005bd2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005bd6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005bda:	d00c      	beq.n	8005bf6 <USB_ActivateEndpoint+0x262>
 8005bdc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005be0:	b292      	uxth	r2, r2
 8005be2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005be6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bee:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005bf2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bf6:	780d      	ldrb	r5, [r1, #0]
 8005bf8:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8005bfc:	b292      	uxth	r2, r2
 8005bfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c06:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8005c0a:	f248 0480 	movw	r4, #32896	; 0x8080
 8005c0e:	4322      	orrs	r2, r4
 8005c10:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c14:	7809      	ldrb	r1, [r1, #0]
 8005c16:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005c1a:	b292      	uxth	r2, r2
 8005c1c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c24:	4322      	orrs	r2, r4
 8005c26:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005c2a:	e773      	b.n	8005b14 <USB_ActivateEndpoint+0x180>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c2c:	780c      	ldrb	r4, [r1, #0]
 8005c2e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c32:	b292      	uxth	r2, r2
 8005c34:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005c38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c3c:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8005c40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c44:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8005c48:	e794      	b.n	8005b74 <USB_ActivateEndpoint+0x1e0>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c4a:	780c      	ldrb	r4, [r1, #0]
 8005c4c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c50:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005c54:	d00c      	beq.n	8005c70 <USB_ActivateEndpoint+0x2dc>
 8005c56:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c5a:	b292      	uxth	r2, r2
 8005c5c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005c60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c64:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005c68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c6c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c70:	780c      	ldrb	r4, [r1, #0]
 8005c72:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c76:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005c7a:	d00c      	beq.n	8005c96 <USB_ActivateEndpoint+0x302>
 8005c7c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c80:	b292      	uxth	r2, r2
 8005c82:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005c86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c8e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005c92:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8005c96:	78ca      	ldrb	r2, [r1, #3]
 8005c98:	2a01      	cmp	r2, #1
 8005c9a:	d01e      	beq.n	8005cda <USB_ActivateEndpoint+0x346>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c9c:	780c      	ldrb	r4, [r1, #0]
 8005c9e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005ca2:	b292      	uxth	r2, r2
 8005ca4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cac:	f082 0220 	eor.w	r2, r2, #32
 8005cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cb8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cbc:	7809      	ldrb	r1, [r1, #0]
 8005cbe:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005cc2:	b292      	uxth	r2, r2
 8005cc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cc8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005ccc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cd4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005cd8:	e71c      	b.n	8005b14 <USB_ActivateEndpoint+0x180>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cda:	780c      	ldrb	r4, [r1, #0]
 8005cdc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005ce0:	b292      	uxth	r2, r2
 8005ce2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cf2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8005cf6:	e7e1      	b.n	8005cbc <USB_ActivateEndpoint+0x328>

08005cf8 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005cf8:	7b0b      	ldrb	r3, [r1, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d146      	bne.n	8005d8c <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8005cfe:	784b      	ldrb	r3, [r1, #1]
 8005d00:	b313      	cbz	r3, 8005d48 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d02:	780a      	ldrb	r2, [r1, #0]
 8005d04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d08:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d0c:	d00c      	beq.n	8005d28 <USB_DeactivateEndpoint+0x30>
 8005d0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d28:	780a      	ldrb	r2, [r1, #0]
 8005d2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005d44:	2000      	movs	r0, #0
 8005d46:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d48:	780a      	ldrb	r2, [r1, #0]
 8005d4a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d4e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005d52:	d00c      	beq.n	8005d6e <USB_DeactivateEndpoint+0x76>
 8005d54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d6e:	780a      	ldrb	r2, [r1, #0]
 8005d70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005d8a:	e7db      	b.n	8005d44 <USB_DeactivateEndpoint+0x4c>
{
 8005d8c:	b410      	push	{r4}
    if (ep->is_in == 0U)
 8005d8e:	784b      	ldrb	r3, [r1, #1]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d14f      	bne.n	8005e34 <USB_DeactivateEndpoint+0x13c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d94:	780a      	ldrb	r2, [r1, #0]
 8005d96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d9a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005d9e:	d00c      	beq.n	8005dba <USB_DeactivateEndpoint+0xc2>
 8005da0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dba:	780a      	ldrb	r2, [r1, #0]
 8005dbc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005dc0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005dc4:	d00c      	beq.n	8005de0 <USB_DeactivateEndpoint+0xe8>
 8005dc6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ddc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8005de0:	780a      	ldrb	r2, [r1, #0]
 8005de2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005df8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dfc:	780b      	ldrb	r3, [r1, #0]
 8005dfe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e02:	b292      	uxth	r2, r2
 8005e04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e0c:	f248 0480 	movw	r4, #32896	; 0x8080
 8005e10:	4322      	orrs	r2, r4
 8005e12:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e16:	780a      	ldrb	r2, [r1, #0]
 8005e18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e26:	4323      	orrs	r3, r4
 8005e28:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e32:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e34:	780a      	ldrb	r2, [r1, #0]
 8005e36:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e3a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005e3e:	d00c      	beq.n	8005e5a <USB_DeactivateEndpoint+0x162>
 8005e40:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e56:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e5a:	780a      	ldrb	r2, [r1, #0]
 8005e5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e64:	d00c      	beq.n	8005e80 <USB_DeactivateEndpoint+0x188>
 8005e66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005e80:	780a      	ldrb	r2, [r1, #0]
 8005e82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e98:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e9c:	780b      	ldrb	r3, [r1, #0]
 8005e9e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005ea2:	b292      	uxth	r2, r2
 8005ea4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eac:	f248 0480 	movw	r4, #32896	; 0x8080
 8005eb0:	4322      	orrs	r2, r4
 8005eb2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005eb6:	780a      	ldrb	r2, [r1, #0]
 8005eb8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	4323      	orrs	r3, r4
 8005ec8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005ecc:	e7ae      	b.n	8005e2c <USB_DeactivateEndpoint+0x134>

08005ece <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005ece:	784b      	ldrb	r3, [r1, #1]
 8005ed0:	b18b      	cbz	r3, 8005ef6 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ed2:	780a      	ldrb	r2, [r1, #0]
 8005ed4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee2:	f083 0310 	eor.w	r3, r3, #16
 8005ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005ef6:	780a      	ldrb	r2, [r1, #0]
 8005ef8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f12:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005f16:	e7ec      	b.n	8005ef2 <USB_EPSetStall+0x24>

08005f18 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005f18:	7b0b      	ldrb	r3, [r1, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d14b      	bne.n	8005fb6 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8005f1e:	784b      	ldrb	r3, [r1, #1]
 8005f20:	b333      	cbz	r3, 8005f70 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f22:	780a      	ldrb	r2, [r1, #0]
 8005f24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f2c:	d00c      	beq.n	8005f48 <USB_EPClearStall+0x30>
 8005f2e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f44:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005f48:	78cb      	ldrb	r3, [r1, #3]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d033      	beq.n	8005fb6 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f4e:	780a      	ldrb	r2, [r1, #0]
 8005f50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f5e:	f083 0320 	eor.w	r3, r3, #32
 8005f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005f6e:	e022      	b.n	8005fb6 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f70:	780a      	ldrb	r2, [r1, #0]
 8005f72:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f76:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005f7a:	d00c      	beq.n	8005f96 <USB_EPClearStall+0x7e>
 8005f7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f92:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f96:	780a      	ldrb	r2, [r1, #0]
 8005f98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	4770      	bx	lr

08005fba <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8005fba:	b911      	cbnz	r1, 8005fc2 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	4770      	bx	lr

08005fc6 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005fc6:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8005fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8005fd8:	2000      	movs	r0, #0
 8005fda:	4770      	bx	lr

08005fdc <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005fdc:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8005fe0:	b280      	uxth	r0, r0
 8005fe2:	4770      	bx	lr

08005fe4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fe4:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005fe6:	1c5c      	adds	r4, r3, #1
 8005fe8:	0864      	lsrs	r4, r4, #1
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005fea:	4402      	add	r2, r0
 8005fec:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8005ff0:	b144      	cbz	r4, 8006004 <USB_WritePMA+0x20>
  {
    temp1 = *pBuf;
 8005ff2:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005ff4:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8005ff6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005ffa:	f822 3b02 	strh.w	r3, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005ffe:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8006000:	3c01      	subs	r4, #1
 8006002:	e7f5      	b.n	8005ff0 <USB_WritePMA+0xc>
  }
}
 8006004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006008:	4770      	bx	lr

0800600a <USB_EPStartXfer>:
{
 800600a:	b570      	push	{r4, r5, r6, lr}
 800600c:	4605      	mov	r5, r0
 800600e:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8006010:	784a      	ldrb	r2, [r1, #1]
 8006012:	2a01      	cmp	r2, #1
 8006014:	d032      	beq.n	800607c <USB_EPStartXfer+0x72>
    if (ep->doublebuffer == 0U)
 8006016:	7b0b      	ldrb	r3, [r1, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f040 8283 	bne.w	8006524 <USB_EPStartXfer+0x51a>
      if (ep->xfer_len > ep->maxpacket)
 800601e:	698b      	ldr	r3, [r1, #24]
 8006020:	690a      	ldr	r2, [r1, #16]
 8006022:	4293      	cmp	r3, r2
 8006024:	f240 825d 	bls.w	80064e2 <USB_EPStartXfer+0x4d8>
        ep->xfer_len -= len;
 8006028:	1a9b      	subs	r3, r3, r2
 800602a:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800602c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006030:	fa15 f383 	uxtah	r3, r5, r3
 8006034:	7821      	ldrb	r1, [r4, #0]
 8006036:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800603a:	2a3e      	cmp	r2, #62	; 0x3e
 800603c:	f240 8255 	bls.w	80064ea <USB_EPStartXfer+0x4e0>
 8006040:	0951      	lsrs	r1, r2, #5
 8006042:	f012 0f1f 	tst.w	r2, #31
 8006046:	d100      	bne.n	800604a <USB_EPStartXfer+0x40>
 8006048:	3901      	subs	r1, #1
 800604a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800604e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8006052:	b289      	uxth	r1, r1
 8006054:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006058:	7822      	ldrb	r2, [r4, #0]
 800605a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800605e:	b29b      	uxth	r3, r3
 8006060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006068:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800606c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006074:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8006078:	2000      	movs	r0, #0
}
 800607a:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 800607c:	698e      	ldr	r6, [r1, #24]
 800607e:	6909      	ldr	r1, [r1, #16]
 8006080:	428e      	cmp	r6, r1
 8006082:	d900      	bls.n	8006086 <USB_EPStartXfer+0x7c>
      len = ep->maxpacket;
 8006084:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 8006086:	7b23      	ldrb	r3, [r4, #12]
 8006088:	b32b      	cbz	r3, 80060d6 <USB_EPStartXfer+0xcc>
      if (ep->type == EP_TYPE_BULK)
 800608a:	78e3      	ldrb	r3, [r4, #3]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d044      	beq.n	800611a <USB_EPStartXfer+0x110>
        ep->xfer_len_db -= len;
 8006090:	6a23      	ldr	r3, [r4, #32]
 8006092:	1b9b      	subs	r3, r3, r6
 8006094:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006096:	7823      	ldrb	r3, [r4, #0]
 8006098:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
 800609c:	f011 0f40 	tst.w	r1, #64	; 0x40
 80060a0:	f000 81dc 	beq.w	800645c <USB_EPStartXfer+0x452>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060a4:	2a00      	cmp	r2, #0
 80060a6:	f040 81c9 	bne.w	800643c <USB_EPStartXfer+0x432>
 80060aa:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80060ae:	fa15 f282 	uxtah	r2, r5, r2
 80060b2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060b6:	2e3e      	cmp	r6, #62	; 0x3e
 80060b8:	f240 81a3 	bls.w	8006402 <USB_EPStartXfer+0x3f8>
 80060bc:	0972      	lsrs	r2, r6, #5
 80060be:	f016 0f1f 	tst.w	r6, #31
 80060c2:	d100      	bne.n	80060c6 <USB_EPStartXfer+0xbc>
 80060c4:	3a01      	subs	r2, #1
 80060c6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80060ca:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80060ce:	b292      	uxth	r2, r2
 80060d0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80060d4:	e1bb      	b.n	800644e <USB_EPStartXfer+0x444>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80060d6:	b2b6      	uxth	r6, r6
 80060d8:	4633      	mov	r3, r6
 80060da:	88e2      	ldrh	r2, [r4, #6]
 80060dc:	6961      	ldr	r1, [r4, #20]
 80060de:	4628      	mov	r0, r5
 80060e0:	f7ff ff80 	bl	8005fe4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060e4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80060e8:	fa15 f383 	uxtah	r3, r5, r3
 80060ec:	7822      	ldrb	r2, [r4, #0]
 80060ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060f2:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80060f6:	7822      	ldrb	r2, [r4, #0]
 80060f8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006106:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800610a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006112:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8006116:	2000      	movs	r0, #0
 8006118:	e7af      	b.n	800607a <USB_EPStartXfer+0x70>
        if (ep->xfer_len_db > ep->maxpacket)
 800611a:	6a23      	ldr	r3, [r4, #32]
 800611c:	4299      	cmp	r1, r3
 800611e:	f080 8152 	bcs.w	80063c6 <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006122:	7822      	ldrb	r2, [r4, #0]
 8006124:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006128:	b29b      	uxth	r3, r3
 800612a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006132:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 800613e:	6a23      	ldr	r3, [r4, #32]
 8006140:	1b9b      	subs	r3, r3, r6
 8006142:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006144:	7823      	ldrb	r3, [r4, #0]
 8006146:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 800614a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800614e:	f000 809d 	beq.w	800628c <USB_EPStartXfer+0x282>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006152:	7862      	ldrb	r2, [r4, #1]
 8006154:	bb8a      	cbnz	r2, 80061ba <USB_EPStartXfer+0x1b0>
 8006156:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800615a:	fa15 f282 	uxtah	r2, r5, r2
 800615e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006162:	2e3e      	cmp	r6, #62	; 0x3e
 8006164:	d90c      	bls.n	8006180 <USB_EPStartXfer+0x176>
 8006166:	0972      	lsrs	r2, r6, #5
 8006168:	f016 0f1f 	tst.w	r6, #31
 800616c:	d100      	bne.n	8006170 <USB_EPStartXfer+0x166>
 800616e:	3a01      	subs	r2, #1
 8006170:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006174:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006178:	b292      	uxth	r2, r2
 800617a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800617e:	e01e      	b.n	80061be <USB_EPStartXfer+0x1b4>
 8006180:	b98e      	cbnz	r6, 80061a6 <USB_EPStartXfer+0x19c>
 8006182:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006186:	b292      	uxth	r2, r2
 8006188:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800618c:	b292      	uxth	r2, r2
 800618e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006192:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006196:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800619a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800619e:	b292      	uxth	r2, r2
 80061a0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80061a4:	e00b      	b.n	80061be <USB_EPStartXfer+0x1b4>
 80061a6:	0872      	lsrs	r2, r6, #1
 80061a8:	f016 0f01 	tst.w	r6, #1
 80061ac:	d000      	beq.n	80061b0 <USB_EPStartXfer+0x1a6>
 80061ae:	3201      	adds	r2, #1
 80061b0:	0292      	lsls	r2, r2, #10
 80061b2:	b292      	uxth	r2, r2
 80061b4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80061b8:	e001      	b.n	80061be <USB_EPStartXfer+0x1b4>
 80061ba:	2a01      	cmp	r2, #1
 80061bc:	d027      	beq.n	800620e <USB_EPStartXfer+0x204>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061be:	b2b3      	uxth	r3, r6
 80061c0:	8962      	ldrh	r2, [r4, #10]
 80061c2:	6961      	ldr	r1, [r4, #20]
 80061c4:	4628      	mov	r0, r5
 80061c6:	f7ff ff0d 	bl	8005fe4 <USB_WritePMA>
            ep->xfer_buff += len;
 80061ca:	6963      	ldr	r3, [r4, #20]
 80061cc:	4433      	add	r3, r6
 80061ce:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80061d0:	6a23      	ldr	r3, [r4, #32]
 80061d2:	6922      	ldr	r2, [r4, #16]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d924      	bls.n	8006222 <USB_EPStartXfer+0x218>
              ep->xfer_len_db -= len;
 80061d8:	1b9b      	subs	r3, r3, r6
 80061da:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061dc:	7863      	ldrb	r3, [r4, #1]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d140      	bne.n	8006264 <USB_EPStartXfer+0x25a>
 80061e2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80061e6:	fa15 f383 	uxtah	r3, r5, r3
 80061ea:	7822      	ldrb	r2, [r4, #0]
 80061ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061f0:	2e3e      	cmp	r6, #62	; 0x3e
 80061f2:	d91a      	bls.n	800622a <USB_EPStartXfer+0x220>
 80061f4:	0972      	lsrs	r2, r6, #5
 80061f6:	f016 0f1f 	tst.w	r6, #31
 80061fa:	d100      	bne.n	80061fe <USB_EPStartXfer+0x1f4>
 80061fc:	3a01      	subs	r2, #1
 80061fe:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006202:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006206:	b292      	uxth	r2, r2
 8006208:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800620c:	e02c      	b.n	8006268 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800620e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006212:	fa15 f282 	uxtah	r2, r5, r2
 8006216:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800621a:	b2b2      	uxth	r2, r6
 800621c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006220:	e7cd      	b.n	80061be <USB_EPStartXfer+0x1b4>
              ep->xfer_len_db = 0U;
 8006222:	2200      	movs	r2, #0
 8006224:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8006226:	461e      	mov	r6, r3
 8006228:	e7d8      	b.n	80061dc <USB_EPStartXfer+0x1d2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800622a:	b98e      	cbnz	r6, 8006250 <USB_EPStartXfer+0x246>
 800622c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8006230:	b292      	uxth	r2, r2
 8006232:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006236:	b292      	uxth	r2, r2
 8006238:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800623c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8006240:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006244:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006248:	b292      	uxth	r2, r2
 800624a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800624e:	e00b      	b.n	8006268 <USB_EPStartXfer+0x25e>
 8006250:	0872      	lsrs	r2, r6, #1
 8006252:	f016 0f01 	tst.w	r6, #1
 8006256:	d000      	beq.n	800625a <USB_EPStartXfer+0x250>
 8006258:	3201      	adds	r2, #1
 800625a:	0292      	lsls	r2, r2, #10
 800625c:	b292      	uxth	r2, r2
 800625e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006262:	e001      	b.n	8006268 <USB_EPStartXfer+0x25e>
 8006264:	2b01      	cmp	r3, #1
 8006266:	d006      	beq.n	8006276 <USB_EPStartXfer+0x26c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006268:	b2b3      	uxth	r3, r6
 800626a:	8922      	ldrh	r2, [r4, #8]
 800626c:	6961      	ldr	r1, [r4, #20]
 800626e:	4628      	mov	r0, r5
 8006270:	f7ff feb8 	bl	8005fe4 <USB_WritePMA>
 8006274:	e73f      	b.n	80060f6 <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006276:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800627a:	fa15 f383 	uxtah	r3, r5, r3
 800627e:	7822      	ldrb	r2, [r4, #0]
 8006280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006284:	b2b2      	uxth	r2, r6
 8006286:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800628a:	e7ed      	b.n	8006268 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800628c:	7862      	ldrb	r2, [r4, #1]
 800628e:	bb8a      	cbnz	r2, 80062f4 <USB_EPStartXfer+0x2ea>
 8006290:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006294:	fa15 f282 	uxtah	r2, r5, r2
 8006298:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800629c:	2e3e      	cmp	r6, #62	; 0x3e
 800629e:	d90c      	bls.n	80062ba <USB_EPStartXfer+0x2b0>
 80062a0:	0972      	lsrs	r2, r6, #5
 80062a2:	f016 0f1f 	tst.w	r6, #31
 80062a6:	d100      	bne.n	80062aa <USB_EPStartXfer+0x2a0>
 80062a8:	3a01      	subs	r2, #1
 80062aa:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80062ae:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80062b2:	b292      	uxth	r2, r2
 80062b4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80062b8:	e01e      	b.n	80062f8 <USB_EPStartXfer+0x2ee>
 80062ba:	b98e      	cbnz	r6, 80062e0 <USB_EPStartXfer+0x2d6>
 80062bc:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80062c0:	b292      	uxth	r2, r2
 80062c2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80062c6:	b292      	uxth	r2, r2
 80062c8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80062cc:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80062d0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80062d4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80062d8:	b292      	uxth	r2, r2
 80062da:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80062de:	e00b      	b.n	80062f8 <USB_EPStartXfer+0x2ee>
 80062e0:	0872      	lsrs	r2, r6, #1
 80062e2:	f016 0f01 	tst.w	r6, #1
 80062e6:	d000      	beq.n	80062ea <USB_EPStartXfer+0x2e0>
 80062e8:	3201      	adds	r2, #1
 80062ea:	0292      	lsls	r2, r2, #10
 80062ec:	b292      	uxth	r2, r2
 80062ee:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80062f2:	e001      	b.n	80062f8 <USB_EPStartXfer+0x2ee>
 80062f4:	2a01      	cmp	r2, #1
 80062f6:	d027      	beq.n	8006348 <USB_EPStartXfer+0x33e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062f8:	b2b3      	uxth	r3, r6
 80062fa:	8922      	ldrh	r2, [r4, #8]
 80062fc:	6961      	ldr	r1, [r4, #20]
 80062fe:	4628      	mov	r0, r5
 8006300:	f7ff fe70 	bl	8005fe4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006304:	6963      	ldr	r3, [r4, #20]
 8006306:	4433      	add	r3, r6
 8006308:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800630a:	6a23      	ldr	r3, [r4, #32]
 800630c:	6922      	ldr	r2, [r4, #16]
 800630e:	4293      	cmp	r3, r2
 8006310:	d924      	bls.n	800635c <USB_EPStartXfer+0x352>
              ep->xfer_len_db -= len;
 8006312:	1b9b      	subs	r3, r3, r6
 8006314:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006316:	7863      	ldrb	r3, [r4, #1]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d140      	bne.n	800639e <USB_EPStartXfer+0x394>
 800631c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006320:	fa15 f383 	uxtah	r3, r5, r3
 8006324:	7822      	ldrb	r2, [r4, #0]
 8006326:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800632a:	2e3e      	cmp	r6, #62	; 0x3e
 800632c:	d91a      	bls.n	8006364 <USB_EPStartXfer+0x35a>
 800632e:	0972      	lsrs	r2, r6, #5
 8006330:	f016 0f1f 	tst.w	r6, #31
 8006334:	d100      	bne.n	8006338 <USB_EPStartXfer+0x32e>
 8006336:	3a01      	subs	r2, #1
 8006338:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800633c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006340:	b292      	uxth	r2, r2
 8006342:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006346:	e02c      	b.n	80063a2 <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006348:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800634c:	fa15 f282 	uxtah	r2, r5, r2
 8006350:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006354:	b2b2      	uxth	r2, r6
 8006356:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800635a:	e7cd      	b.n	80062f8 <USB_EPStartXfer+0x2ee>
              ep->xfer_len_db = 0U;
 800635c:	2200      	movs	r2, #0
 800635e:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8006360:	461e      	mov	r6, r3
 8006362:	e7d8      	b.n	8006316 <USB_EPStartXfer+0x30c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006364:	b98e      	cbnz	r6, 800638a <USB_EPStartXfer+0x380>
 8006366:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800636a:	b292      	uxth	r2, r2
 800636c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006370:	b292      	uxth	r2, r2
 8006372:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006376:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800637a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800637e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006382:	b292      	uxth	r2, r2
 8006384:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006388:	e00b      	b.n	80063a2 <USB_EPStartXfer+0x398>
 800638a:	0872      	lsrs	r2, r6, #1
 800638c:	f016 0f01 	tst.w	r6, #1
 8006390:	d000      	beq.n	8006394 <USB_EPStartXfer+0x38a>
 8006392:	3201      	adds	r2, #1
 8006394:	0292      	lsls	r2, r2, #10
 8006396:	b292      	uxth	r2, r2
 8006398:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800639c:	e001      	b.n	80063a2 <USB_EPStartXfer+0x398>
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d006      	beq.n	80063b0 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063a2:	b2b3      	uxth	r3, r6
 80063a4:	8962      	ldrh	r2, [r4, #10]
 80063a6:	6961      	ldr	r1, [r4, #20]
 80063a8:	4628      	mov	r0, r5
 80063aa:	f7ff fe1b 	bl	8005fe4 <USB_WritePMA>
 80063ae:	e6a2      	b.n	80060f6 <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063b0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80063b4:	fa15 f383 	uxtah	r3, r5, r3
 80063b8:	7822      	ldrb	r2, [r4, #0]
 80063ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063be:	b2b2      	uxth	r2, r6
 80063c0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80063c4:	e7ed      	b.n	80063a2 <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80063c6:	7821      	ldrb	r1, [r4, #0]
 80063c8:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 80063cc:	b292      	uxth	r2, r2
 80063ce:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80063d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80063d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063de:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063e2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80063e6:	fa15 f282 	uxtah	r2, r5, r2
 80063ea:	7821      	ldrb	r1, [r4, #0]
 80063ec:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063f6:	8922      	ldrh	r2, [r4, #8]
 80063f8:	6961      	ldr	r1, [r4, #20]
 80063fa:	4628      	mov	r0, r5
 80063fc:	f7ff fdf2 	bl	8005fe4 <USB_WritePMA>
 8006400:	e679      	b.n	80060f6 <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006402:	b98e      	cbnz	r6, 8006428 <USB_EPStartXfer+0x41e>
 8006404:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006408:	b292      	uxth	r2, r2
 800640a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800640e:	b292      	uxth	r2, r2
 8006410:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006414:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006418:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800641c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006420:	b292      	uxth	r2, r2
 8006422:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006426:	e012      	b.n	800644e <USB_EPStartXfer+0x444>
 8006428:	0872      	lsrs	r2, r6, #1
 800642a:	f016 0f01 	tst.w	r6, #1
 800642e:	d000      	beq.n	8006432 <USB_EPStartXfer+0x428>
 8006430:	3201      	adds	r2, #1
 8006432:	0292      	lsls	r2, r2, #10
 8006434:	b292      	uxth	r2, r2
 8006436:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800643a:	e008      	b.n	800644e <USB_EPStartXfer+0x444>
 800643c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006440:	fa15 f282 	uxtah	r2, r5, r2
 8006444:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006448:	b2b2      	uxth	r2, r6
 800644a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800644e:	b2b3      	uxth	r3, r6
 8006450:	8962      	ldrh	r2, [r4, #10]
 8006452:	6961      	ldr	r1, [r4, #20]
 8006454:	4628      	mov	r0, r5
 8006456:	f7ff fdc5 	bl	8005fe4 <USB_WritePMA>
 800645a:	e64c      	b.n	80060f6 <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800645c:	bb8a      	cbnz	r2, 80064c2 <USB_EPStartXfer+0x4b8>
 800645e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006462:	fa15 f282 	uxtah	r2, r5, r2
 8006466:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800646a:	2e3e      	cmp	r6, #62	; 0x3e
 800646c:	d90c      	bls.n	8006488 <USB_EPStartXfer+0x47e>
 800646e:	0972      	lsrs	r2, r6, #5
 8006470:	f016 0f1f 	tst.w	r6, #31
 8006474:	d100      	bne.n	8006478 <USB_EPStartXfer+0x46e>
 8006476:	3a01      	subs	r2, #1
 8006478:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800647c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006480:	b292      	uxth	r2, r2
 8006482:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006486:	e025      	b.n	80064d4 <USB_EPStartXfer+0x4ca>
 8006488:	b98e      	cbnz	r6, 80064ae <USB_EPStartXfer+0x4a4>
 800648a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800648e:	b292      	uxth	r2, r2
 8006490:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006494:	b292      	uxth	r2, r2
 8006496:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800649a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800649e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80064a2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80064a6:	b292      	uxth	r2, r2
 80064a8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80064ac:	e012      	b.n	80064d4 <USB_EPStartXfer+0x4ca>
 80064ae:	0872      	lsrs	r2, r6, #1
 80064b0:	f016 0f01 	tst.w	r6, #1
 80064b4:	d000      	beq.n	80064b8 <USB_EPStartXfer+0x4ae>
 80064b6:	3201      	adds	r2, #1
 80064b8:	0292      	lsls	r2, r2, #10
 80064ba:	b292      	uxth	r2, r2
 80064bc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80064c0:	e008      	b.n	80064d4 <USB_EPStartXfer+0x4ca>
 80064c2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80064c6:	fa15 f282 	uxtah	r2, r5, r2
 80064ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064ce:	b2b2      	uxth	r2, r6
 80064d0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064d4:	b2b3      	uxth	r3, r6
 80064d6:	8922      	ldrh	r2, [r4, #8]
 80064d8:	6961      	ldr	r1, [r4, #20]
 80064da:	4628      	mov	r0, r5
 80064dc:	f7ff fd82 	bl	8005fe4 <USB_WritePMA>
 80064e0:	e609      	b.n	80060f6 <USB_EPStartXfer+0xec>
        ep->xfer_len = 0U;
 80064e2:	2200      	movs	r2, #0
 80064e4:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 80064e6:	461a      	mov	r2, r3
 80064e8:	e5a0      	b.n	800602c <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80064ea:	b98a      	cbnz	r2, 8006510 <USB_EPStartXfer+0x506>
 80064ec:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80064f0:	b292      	uxth	r2, r2
 80064f2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80064f6:	b292      	uxth	r2, r2
 80064f8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80064fc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006500:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006504:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006508:	b292      	uxth	r2, r2
 800650a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800650e:	e5a3      	b.n	8006058 <USB_EPStartXfer+0x4e>
 8006510:	0851      	lsrs	r1, r2, #1
 8006512:	f012 0f01 	tst.w	r2, #1
 8006516:	d000      	beq.n	800651a <USB_EPStartXfer+0x510>
 8006518:	3101      	adds	r1, #1
 800651a:	0289      	lsls	r1, r1, #10
 800651c:	b289      	uxth	r1, r1
 800651e:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8006522:	e599      	b.n	8006058 <USB_EPStartXfer+0x4e>
      if (ep->type == EP_TYPE_BULK)
 8006524:	78cb      	ldrb	r3, [r1, #3]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d03b      	beq.n	80065a2 <USB_EPStartXfer+0x598>
      else if (ep->type == EP_TYPE_ISOC)
 800652a:	2b01      	cmp	r3, #1
 800652c:	f040 811b 	bne.w	8006766 <USB_EPStartXfer+0x75c>
        if (ep->xfer_len > ep->maxpacket)
 8006530:	6989      	ldr	r1, [r1, #24]
 8006532:	6923      	ldr	r3, [r4, #16]
 8006534:	4299      	cmp	r1, r3
 8006536:	f240 80ca 	bls.w	80066ce <USB_EPStartXfer+0x6c4>
          ep->xfer_len -= len;
 800653a:	1ac9      	subs	r1, r1, r3
 800653c:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800653e:	b9aa      	cbnz	r2, 800656c <USB_EPStartXfer+0x562>
 8006540:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006544:	fa15 f282 	uxtah	r2, r5, r2
 8006548:	7821      	ldrb	r1, [r4, #0]
 800654a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800654e:	2b3e      	cmp	r3, #62	; 0x3e
 8006550:	f240 80c1 	bls.w	80066d6 <USB_EPStartXfer+0x6cc>
 8006554:	0959      	lsrs	r1, r3, #5
 8006556:	f013 0f1f 	tst.w	r3, #31
 800655a:	d100      	bne.n	800655e <USB_EPStartXfer+0x554>
 800655c:	3901      	subs	r1, #1
 800655e:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8006562:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8006566:	b289      	uxth	r1, r1
 8006568:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800656c:	7862      	ldrb	r2, [r4, #1]
 800656e:	2a00      	cmp	r2, #0
 8006570:	f040 80eb 	bne.w	800674a <USB_EPStartXfer+0x740>
 8006574:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006578:	fa15 f282 	uxtah	r2, r5, r2
 800657c:	7821      	ldrb	r1, [r4, #0]
 800657e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006582:	2b3e      	cmp	r3, #62	; 0x3e
 8006584:	f240 80c4 	bls.w	8006710 <USB_EPStartXfer+0x706>
 8006588:	0959      	lsrs	r1, r3, #5
 800658a:	f013 0f1f 	tst.w	r3, #31
 800658e:	d100      	bne.n	8006592 <USB_EPStartXfer+0x588>
 8006590:	3901      	subs	r1, #1
 8006592:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 8006596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659a:	b29b      	uxth	r3, r3
 800659c:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80065a0:	e55a      	b.n	8006058 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80065a2:	b9aa      	cbnz	r2, 80065d0 <USB_EPStartXfer+0x5c6>
 80065a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80065a8:	fa10 f383 	uxtah	r3, r0, r3
 80065ac:	780a      	ldrb	r2, [r1, #0]
 80065ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065b2:	6909      	ldr	r1, [r1, #16]
 80065b4:	293e      	cmp	r1, #62	; 0x3e
 80065b6:	d925      	bls.n	8006604 <USB_EPStartXfer+0x5fa>
 80065b8:	094a      	lsrs	r2, r1, #5
 80065ba:	f011 0f1f 	tst.w	r1, #31
 80065be:	d100      	bne.n	80065c2 <USB_EPStartXfer+0x5b8>
 80065c0:	3a01      	subs	r2, #1
 80065c2:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80065c6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80065ca:	b292      	uxth	r2, r2
 80065cc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80065d0:	7863      	ldrb	r3, [r4, #1]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d150      	bne.n	8006678 <USB_EPStartXfer+0x66e>
 80065d6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80065da:	fa15 f383 	uxtah	r3, r5, r3
 80065de:	7822      	ldrb	r2, [r4, #0]
 80065e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065e4:	6921      	ldr	r1, [r4, #16]
 80065e6:	293e      	cmp	r1, #62	; 0x3e
 80065e8:	d929      	bls.n	800663e <USB_EPStartXfer+0x634>
 80065ea:	094a      	lsrs	r2, r1, #5
 80065ec:	f011 0f1f 	tst.w	r1, #31
 80065f0:	d100      	bne.n	80065f4 <USB_EPStartXfer+0x5ea>
 80065f2:	3a01      	subs	r2, #1
 80065f4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80065f8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80065fc:	b292      	uxth	r2, r2
 80065fe:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006602:	e03b      	b.n	800667c <USB_EPStartXfer+0x672>
 8006604:	b989      	cbnz	r1, 800662a <USB_EPStartXfer+0x620>
 8006606:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800660a:	b292      	uxth	r2, r2
 800660c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006610:	b292      	uxth	r2, r2
 8006612:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006616:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800661a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800661e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006622:	b292      	uxth	r2, r2
 8006624:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006628:	e7d2      	b.n	80065d0 <USB_EPStartXfer+0x5c6>
 800662a:	084a      	lsrs	r2, r1, #1
 800662c:	f011 0f01 	tst.w	r1, #1
 8006630:	d000      	beq.n	8006634 <USB_EPStartXfer+0x62a>
 8006632:	3201      	adds	r2, #1
 8006634:	0292      	lsls	r2, r2, #10
 8006636:	b292      	uxth	r2, r2
 8006638:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800663c:	e7c8      	b.n	80065d0 <USB_EPStartXfer+0x5c6>
 800663e:	b989      	cbnz	r1, 8006664 <USB_EPStartXfer+0x65a>
 8006640:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006644:	b292      	uxth	r2, r2
 8006646:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800664a:	b292      	uxth	r2, r2
 800664c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006650:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006654:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006658:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800665c:	b292      	uxth	r2, r2
 800665e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006662:	e00b      	b.n	800667c <USB_EPStartXfer+0x672>
 8006664:	084a      	lsrs	r2, r1, #1
 8006666:	f011 0f01 	tst.w	r1, #1
 800666a:	d000      	beq.n	800666e <USB_EPStartXfer+0x664>
 800666c:	3201      	adds	r2, #1
 800666e:	0292      	lsls	r2, r2, #10
 8006670:	b292      	uxth	r2, r2
 8006672:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006676:	e001      	b.n	800667c <USB_EPStartXfer+0x672>
 8006678:	2b01      	cmp	r3, #1
 800667a:	d01d      	beq.n	80066b8 <USB_EPStartXfer+0x6ae>
        if (ep->xfer_count != 0U)
 800667c:	69e3      	ldr	r3, [r4, #28]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f43f acea 	beq.w	8006058 <USB_EPStartXfer+0x4e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006684:	7822      	ldrb	r2, [r4, #0]
 8006686:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800668a:	f244 0340 	movw	r3, #16448	; 0x4040
 800668e:	ea03 0001 	and.w	r0, r3, r1
 8006692:	438b      	bics	r3, r1
 8006694:	d002      	beq.n	800669c <USB_EPStartXfer+0x692>
 8006696:	2800      	cmp	r0, #0
 8006698:	f47f acde 	bne.w	8006058 <USB_EPStartXfer+0x4e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800669c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066b2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80066b6:	e4cf      	b.n	8006058 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80066b8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80066bc:	fa15 f383 	uxtah	r3, r5, r3
 80066c0:	7822      	ldrb	r2, [r4, #0]
 80066c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066c6:	8a22      	ldrh	r2, [r4, #16]
 80066c8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80066cc:	e7d6      	b.n	800667c <USB_EPStartXfer+0x672>
          ep->xfer_len = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 80066d2:	460b      	mov	r3, r1
 80066d4:	e733      	b.n	800653e <USB_EPStartXfer+0x534>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80066d6:	b98b      	cbnz	r3, 80066fc <USB_EPStartXfer+0x6f2>
 80066d8:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80066dc:	b289      	uxth	r1, r1
 80066de:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80066e2:	b289      	uxth	r1, r1
 80066e4:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80066e8:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80066ec:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80066f0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80066f4:	b289      	uxth	r1, r1
 80066f6:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80066fa:	e737      	b.n	800656c <USB_EPStartXfer+0x562>
 80066fc:	0859      	lsrs	r1, r3, #1
 80066fe:	f013 0f01 	tst.w	r3, #1
 8006702:	d000      	beq.n	8006706 <USB_EPStartXfer+0x6fc>
 8006704:	3101      	adds	r1, #1
 8006706:	0289      	lsls	r1, r1, #10
 8006708:	b289      	uxth	r1, r1
 800670a:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800670e:	e72d      	b.n	800656c <USB_EPStartXfer+0x562>
 8006710:	b98b      	cbnz	r3, 8006736 <USB_EPStartXfer+0x72c>
 8006712:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 8006716:	b29b      	uxth	r3, r3
 8006718:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800671c:	b29b      	uxth	r3, r3
 800671e:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8006722:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 8006726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800672a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672e:	b29b      	uxth	r3, r3
 8006730:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8006734:	e490      	b.n	8006058 <USB_EPStartXfer+0x4e>
 8006736:	0859      	lsrs	r1, r3, #1
 8006738:	f013 0f01 	tst.w	r3, #1
 800673c:	d000      	beq.n	8006740 <USB_EPStartXfer+0x736>
 800673e:	3101      	adds	r1, #1
 8006740:	028b      	lsls	r3, r1, #10
 8006742:	b29b      	uxth	r3, r3
 8006744:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8006748:	e486      	b.n	8006058 <USB_EPStartXfer+0x4e>
 800674a:	2a01      	cmp	r2, #1
 800674c:	f47f ac84 	bne.w	8006058 <USB_EPStartXfer+0x4e>
 8006750:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006754:	fa15 f282 	uxtah	r2, r5, r2
 8006758:	7821      	ldrb	r1, [r4, #0]
 800675a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800675e:	b29b      	uxth	r3, r3
 8006760:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8006764:	e478      	b.n	8006058 <USB_EPStartXfer+0x4e>
        return HAL_ERROR;
 8006766:	2001      	movs	r0, #1
 8006768:	e487      	b.n	800607a <USB_EPStartXfer+0x70>

0800676a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800676a:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 800676c:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800676e:	4410      	add	r0, r2
 8006770:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8006774:	b144      	cbz	r4, 8006788 <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006776:	f830 2b02 	ldrh.w	r2, [r0], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800677a:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800677c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8006780:	704a      	strb	r2, [r1, #1]
    pBuf++;
 8006782:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8006784:	3c01      	subs	r4, #1
 8006786:	e7f5      	b.n	8006774 <USB_ReadPMA+0xa>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006788:	f013 0f01 	tst.w	r3, #1
 800678c:	d001      	beq.n	8006792 <USB_ReadPMA+0x28>
  {
    temp = *pdwVal;
 800678e:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006790:	700b      	strb	r3, [r1, #0]
  }
}
 8006792:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006798:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800679a:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800679e:	b184      	cbz	r4, 80067c2 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067a0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80067a4:	b17b      	cbz	r3, 80067c6 <USBD_CDC_EP0_RxReady+0x2e>
 80067a6:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80067aa:	28ff      	cmp	r0, #255	; 0xff
 80067ac:	d00d      	beq.n	80067ca <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80067b4:	4621      	mov	r1, r4
 80067b6:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80067b8:	23ff      	movs	r3, #255	; 0xff
 80067ba:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80067be:	2000      	movs	r0, #0
}
 80067c0:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80067c2:	2003      	movs	r0, #3
 80067c4:	e7fc      	b.n	80067c0 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 80067c6:	2000      	movs	r0, #0
 80067c8:	e7fa      	b.n	80067c0 <USBD_CDC_EP0_RxReady+0x28>
 80067ca:	2000      	movs	r0, #0
 80067cc:	e7f8      	b.n	80067c0 <USBD_CDC_EP0_RxReady+0x28>
	...

080067d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80067d0:	2343      	movs	r3, #67	; 0x43
 80067d2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 80067d4:	4800      	ldr	r0, [pc, #0]	; (80067d8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80067d6:	4770      	bx	lr
 80067d8:	20000054 	.word	0x20000054

080067dc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80067dc:	2343      	movs	r3, #67	; 0x43
 80067de:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 80067e0:	4800      	ldr	r0, [pc, #0]	; (80067e4 <USBD_CDC_GetHSCfgDesc+0x8>)
 80067e2:	4770      	bx	lr
 80067e4:	20000098 	.word	0x20000098

080067e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80067e8:	2343      	movs	r3, #67	; 0x43
 80067ea:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80067ec:	4800      	ldr	r0, [pc, #0]	; (80067f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80067ee:	4770      	bx	lr
 80067f0:	200000e8 	.word	0x200000e8

080067f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80067f4:	230a      	movs	r3, #10
 80067f6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80067f8:	4800      	ldr	r0, [pc, #0]	; (80067fc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80067fa:	4770      	bx	lr
 80067fc:	200000dc 	.word	0x200000dc

08006800 <USBD_CDC_DataOut>:
{
 8006800:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006802:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8006806:	b175      	cbz	r5, 8006826 <USBD_CDC_DataOut+0x26>
 8006808:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800680a:	f003 fb15 	bl	8009e38 <USBD_LL_GetRxDataSize>
 800680e:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006812:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800681c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8006820:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8006822:	2000      	movs	r0, #0
}
 8006824:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8006826:	2003      	movs	r0, #3
 8006828:	e7fc      	b.n	8006824 <USBD_CDC_DataOut+0x24>

0800682a <USBD_CDC_DataIn>:
{
 800682a:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800682c:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8006830:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8006834:	b353      	cbz	r3, 800688c <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006836:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800683a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800683e:	6992      	ldr	r2, [r2, #24]
 8006840:	b14a      	cbz	r2, 8006856 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006842:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8006846:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800684a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800684c:	fbb2 f4f5 	udiv	r4, r2, r5
 8006850:	fb05 2214 	mls	r2, r5, r4, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006854:	b172      	cbz	r2, 8006874 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 8006856:	2200      	movs	r2, #0
 8006858:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800685c:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8006860:	6914      	ldr	r4, [r2, #16]
 8006862:	b1ac      	cbz	r4, 8006890 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006864:	460a      	mov	r2, r1
 8006866:	f503 7104 	add.w	r1, r3, #528	; 0x210
 800686a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800686e:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8006870:	2000      	movs	r0, #0
}
 8006872:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 8006874:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006878:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800687c:	2400      	movs	r4, #0
 800687e:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006880:	4623      	mov	r3, r4
 8006882:	4622      	mov	r2, r4
 8006884:	f003 fac8 	bl	8009e18 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8006888:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800688a:	e7f2      	b.n	8006872 <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 800688c:	2003      	movs	r0, #3
 800688e:	e7f0      	b.n	8006872 <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8006890:	2000      	movs	r0, #0
 8006892:	e7ee      	b.n	8006872 <USBD_CDC_DataIn+0x48>

08006894 <USBD_CDC_Setup>:
{
 8006894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006896:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006898:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80068a2:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 80068a6:	2e00      	cmp	r6, #0
 80068a8:	d06c      	beq.n	8006984 <USBD_CDC_Setup+0xf0>
 80068aa:	4607      	mov	r7, r0
 80068ac:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068ae:	780b      	ldrb	r3, [r1, #0]
 80068b0:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 80068b4:	d02a      	beq.n	800690c <USBD_CDC_Setup+0x78>
 80068b6:	2d20      	cmp	r5, #32
 80068b8:	d15e      	bne.n	8006978 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 80068ba:	88ca      	ldrh	r2, [r1, #6]
 80068bc:	b1f2      	cbz	r2, 80068fc <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 80068be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80068c2:	d00f      	beq.n	80068e4 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068c4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	4631      	mov	r1, r6
 80068cc:	7860      	ldrb	r0, [r4, #1]
 80068ce:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068d0:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068d2:	2a07      	cmp	r2, #7
 80068d4:	bf28      	it	cs
 80068d6:	2207      	movcs	r2, #7
 80068d8:	4631      	mov	r1, r6
 80068da:	4638      	mov	r0, r7
 80068dc:	f000 fdd2 	bl	8007484 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80068e0:	2500      	movs	r5, #0
 80068e2:	e04c      	b.n	800697e <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 80068e4:	784b      	ldrb	r3, [r1, #1]
 80068e6:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80068ea:	798b      	ldrb	r3, [r1, #6]
 80068ec:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80068f0:	88ca      	ldrh	r2, [r1, #6]
 80068f2:	4631      	mov	r1, r6
 80068f4:	f000 fddb 	bl	80074ae <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80068f8:	2500      	movs	r5, #0
 80068fa:	e040      	b.n	800697e <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068fc:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2200      	movs	r2, #0
 8006904:	7848      	ldrb	r0, [r1, #1]
 8006906:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8006908:	2500      	movs	r5, #0
 800690a:	e038      	b.n	800697e <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 800690c:	784e      	ldrb	r6, [r1, #1]
 800690e:	2e0b      	cmp	r6, #11
 8006910:	d82e      	bhi.n	8006970 <USBD_CDC_Setup+0xdc>
 8006912:	e8df f006 	tbb	[pc, r6]
 8006916:	3406      	.short	0x3406
 8006918:	2d2d2d2d 	.word	0x2d2d2d2d
 800691c:	2d2d2d2d 	.word	0x2d2d2d2d
 8006920:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006922:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b03      	cmp	r3, #3
 800692a:	d003      	beq.n	8006934 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 800692c:	f000 fa71 	bl	8006e12 <USBD_CtlError>
            ret = USBD_FAIL;
 8006930:	2503      	movs	r5, #3
 8006932:	e024      	b.n	800697e <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006934:	2202      	movs	r2, #2
 8006936:	a901      	add	r1, sp, #4
 8006938:	f000 fda4 	bl	8007484 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800693c:	4635      	mov	r5, r6
 800693e:	e01e      	b.n	800697e <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006940:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b03      	cmp	r3, #3
 8006948:	d003      	beq.n	8006952 <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 800694a:	f000 fa62 	bl	8006e12 <USBD_CtlError>
            ret = USBD_FAIL;
 800694e:	2503      	movs	r5, #3
 8006950:	e015      	b.n	800697e <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006952:	2201      	movs	r2, #1
 8006954:	f10d 0107 	add.w	r1, sp, #7
 8006958:	f000 fd94 	bl	8007484 <USBD_CtlSendData>
 800695c:	e00f      	b.n	800697e <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800695e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b03      	cmp	r3, #3
 8006966:	d00a      	beq.n	800697e <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 8006968:	f000 fa53 	bl	8006e12 <USBD_CtlError>
            ret = USBD_FAIL;
 800696c:	2503      	movs	r5, #3
 800696e:	e006      	b.n	800697e <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 8006970:	f000 fa4f 	bl	8006e12 <USBD_CtlError>
          ret = USBD_FAIL;
 8006974:	2503      	movs	r5, #3
          break;
 8006976:	e002      	b.n	800697e <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 8006978:	f000 fa4b 	bl	8006e12 <USBD_CtlError>
      ret = USBD_FAIL;
 800697c:	2503      	movs	r5, #3
}
 800697e:	4628      	mov	r0, r5
 8006980:	b003      	add	sp, #12
 8006982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8006984:	2503      	movs	r5, #3
 8006986:	e7fa      	b.n	800697e <USBD_CDC_Setup+0xea>

08006988 <USBD_CDC_DeInit>:
{
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800698c:	2181      	movs	r1, #129	; 0x81
 800698e:	f003 fa0c 	bl	8009daa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006992:	2500      	movs	r5, #0
 8006994:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006996:	2101      	movs	r1, #1
 8006998:	4620      	mov	r0, r4
 800699a:	f003 fa06 	bl	8009daa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800699e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80069a2:	2182      	movs	r1, #130	; 0x82
 80069a4:	4620      	mov	r0, r4
 80069a6:	f003 fa00 	bl	8009daa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80069aa:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80069ae:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 80069b2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80069b6:	b14b      	cbz	r3, 80069cc <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80069b8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80069c0:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 80069c4:	f003 fa66 	bl	8009e94 <USBD_static_free>
    pdev->pClassData = NULL;
 80069c8:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 80069cc:	2000      	movs	r0, #0
 80069ce:	bd38      	pop	{r3, r4, r5, pc}

080069d0 <USBD_CDC_Init>:
{
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80069d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80069d8:	f003 fa58 	bl	8009e8c <USBD_static_malloc>
  if (hcdc == NULL)
 80069dc:	b3b8      	cbz	r0, 8006a4e <USBD_CDC_Init+0x7e>
 80069de:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 80069e0:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069e4:	7c23      	ldrb	r3, [r4, #16]
 80069e6:	bbbb      	cbnz	r3, 8006a58 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069ec:	2202      	movs	r2, #2
 80069ee:	2181      	movs	r1, #129	; 0x81
 80069f0:	4620      	mov	r0, r4
 80069f2:	f003 f9cf 	bl	8009d94 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069f6:	2501      	movs	r5, #1
 80069f8:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069fe:	2202      	movs	r2, #2
 8006a00:	4629      	mov	r1, r5
 8006a02:	4620      	mov	r0, r4
 8006a04:	f003 f9c6 	bl	8009d94 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a08:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a0c:	2310      	movs	r3, #16
 8006a0e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a12:	2308      	movs	r3, #8
 8006a14:	2203      	movs	r2, #3
 8006a16:	2182      	movs	r1, #130	; 0x82
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f003 f9bb 	bl	8009d94 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a24:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4798      	blx	r3
  hcdc->TxState = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 8006a32:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a36:	7c25      	ldrb	r5, [r4, #16]
 8006a38:	bb15      	cbnz	r5, 8006a80 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a3e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8006a42:	2101      	movs	r1, #1
 8006a44:	4620      	mov	r0, r4
 8006a46:	f003 f9ef 	bl	8009e28 <USBD_LL_PrepareReceive>
}
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a54:	2502      	movs	r5, #2
 8006a56:	e7f8      	b.n	8006a4a <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a58:	2340      	movs	r3, #64	; 0x40
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	2181      	movs	r1, #129	; 0x81
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f003 f998 	bl	8009d94 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a64:	2501      	movs	r5, #1
 8006a66:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a68:	2340      	movs	r3, #64	; 0x40
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f003 f990 	bl	8009d94 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a74:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a78:	2310      	movs	r3, #16
 8006a7a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8006a7e:	e7c8      	b.n	8006a12 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a80:	2340      	movs	r3, #64	; 0x40
 8006a82:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8006a86:	2101      	movs	r1, #1
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f003 f9cd 	bl	8009e28 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8006a8e:	2500      	movs	r5, #0
 8006a90:	e7db      	b.n	8006a4a <USBD_CDC_Init+0x7a>

08006a92 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8006a92:	b119      	cbz	r1, 8006a9c <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8006a94:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006a98:	2000      	movs	r0, #0
 8006a9a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006a9c:	2003      	movs	r0, #3
}
 8006a9e:	4770      	bx	lr

08006aa0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aa0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8006aa4:	b12b      	cbz	r3, 8006ab2 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8006aa6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006aaa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006aae:	2000      	movs	r0, #0
 8006ab0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006ab2:	2003      	movs	r0, #3
}
 8006ab4:	4770      	bx	lr

08006ab6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ab6:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8006aba:	b11b      	cbz	r3, 8006ac4 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8006abc:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006ac4:	2003      	movs	r0, #3
}
 8006ac6:	4770      	bx	lr

08006ac8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ac8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aca:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8006ace:	b192      	cbz	r2, 8006af6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ad0:	7c04      	ldrb	r4, [r0, #16]
 8006ad2:	b944      	cbnz	r4, 8006ae6 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ad8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8006adc:	2101      	movs	r1, #1
 8006ade:	f003 f9a3 	bl	8009e28 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ae6:	2340      	movs	r3, #64	; 0x40
 8006ae8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8006aec:	2101      	movs	r1, #1
 8006aee:	f003 f99b 	bl	8009e28 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8006af2:	2400      	movs	r4, #0
 8006af4:	e7f5      	b.n	8006ae2 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8006af6:	2403      	movs	r4, #3
 8006af8:	e7f3      	b.n	8006ae2 <USBD_CDC_ReceivePacket+0x1a>

08006afa <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006afa:	b198      	cbz	r0, 8006b24 <USBD_Init+0x2a>
{
 8006afc:	b508      	push	{r3, lr}
 8006afe:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006b00:	2000      	movs	r0, #0
 8006b02:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006b06:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006b0a:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b0e:	b109      	cbz	r1, 8006b14 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8006b10:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b14:	2101      	movs	r1, #1
 8006b16:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f003 f8e9 	bl	8009cf4 <USBD_LL_Init>

  return ret;
}
 8006b22:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006b24:	2003      	movs	r0, #3
}
 8006b26:	4770      	bx	lr

08006b28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8006b32:	b161      	cbz	r1, 8006b4e <USBD_RegisterClass+0x26>
 8006b34:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006b36:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006b3a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006b3c:	b14b      	cbz	r3, 8006b52 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006b3e:	f10d 0006 	add.w	r0, sp, #6
 8006b42:	4798      	blx	r3
 8006b44:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006b48:	2000      	movs	r0, #0
}
 8006b4a:	b002      	add	sp, #8
 8006b4c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8006b4e:	2003      	movs	r0, #3
 8006b50:	e7fb      	b.n	8006b4a <USBD_RegisterClass+0x22>
  return USBD_OK;
 8006b52:	2000      	movs	r0, #0
 8006b54:	e7f9      	b.n	8006b4a <USBD_RegisterClass+0x22>

08006b56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b56:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006b58:	f003 f914 	bl	8009d84 <USBD_LL_Start>
}
 8006b5c:	bd08      	pop	{r3, pc}

08006b5e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b5e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006b60:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006b64:	b113      	cbz	r3, 8006b6c <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4798      	blx	r3
  }

  return ret;
}
 8006b6a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006b6c:	2003      	movs	r0, #3
 8006b6e:	e7fc      	b.n	8006b6a <USBD_SetClassConfig+0xc>

08006b70 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b70:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006b72:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006b76:	b10b      	cbz	r3, 8006b7c <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	bd08      	pop	{r3, pc}

08006b80 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b84:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f000 f92e 	bl	8006dea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b94:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8006b98:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b9c:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8006ba0:	f001 031f 	and.w	r3, r1, #31
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d00d      	beq.n	8006bc4 <USBD_LL_SetupStage+0x44>
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d010      	beq.n	8006bce <USBD_LL_SetupStage+0x4e>
 8006bac:	b12b      	cbz	r3, 8006bba <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bae:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f003 f901 	bl	8009dba <USBD_LL_StallEP>
      break;
 8006bb8:	e003      	b.n	8006bc2 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006bba:	4629      	mov	r1, r5
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f000 fae4 	bl	800718a <USBD_StdDevReq>
  }

  return ret;
}
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006bc4:	4629      	mov	r1, r5
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f000 fb17 	bl	80071fa <USBD_StdItfReq>
      break;
 8006bcc:	e7f9      	b.n	8006bc2 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006bce:	4629      	mov	r1, r5
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 fb46 	bl	8007262 <USBD_StdEPReq>
      break;
 8006bd6:	e7f4      	b.n	8006bc2 <USBD_LL_SetupStage+0x42>

08006bd8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006bdc:	460d      	mov	r5, r1
 8006bde:	bb41      	cbnz	r1, 8006c32 <USBD_LL_DataOutStage+0x5a>
 8006be0:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006be2:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006be6:	2a03      	cmp	r2, #3
 8006be8:	d001      	beq.n	8006bee <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 8006bea:	4608      	mov	r0, r1
}
 8006bec:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006bee:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8006bf2:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8006bf6:	4291      	cmp	r1, r2
 8006bf8:	d809      	bhi.n	8006c0e <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d00f      	beq.n	8006c24 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 8006c04:	4620      	mov	r0, r4
 8006c06:	f000 fc69 	bl	80074dc <USBD_CtlSendStatus>
  return USBD_OK;
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	e7ee      	b.n	8006bec <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8006c0e:	1a89      	subs	r1, r1, r2
 8006c10:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c14:	428a      	cmp	r2, r1
 8006c16:	bf28      	it	cs
 8006c18:	460a      	movcs	r2, r1
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	f000 fc56 	bl	80074cc <USBD_CtlContinueRx>
  return USBD_OK;
 8006c20:	4628      	mov	r0, r5
 8006c22:	e7e3      	b.n	8006bec <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8006c24:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0ea      	beq.n	8006c04 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 8006c2e:	4798      	blx	r3
 8006c30:	e7e8      	b.n	8006c04 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c32:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d001      	beq.n	8006c40 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	e7d5      	b.n	8006bec <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 8006c40:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	b10b      	cbz	r3, 8006c4c <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006c48:	4798      	blx	r3
        if (ret != USBD_OK)
 8006c4a:	e7cf      	b.n	8006bec <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	e7cd      	b.n	8006bec <USBD_LL_DataOutStage+0x14>

08006c50 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c54:	460d      	mov	r5, r1
 8006c56:	2900      	cmp	r1, #0
 8006c58:	d14a      	bne.n	8006cf0 <USBD_LL_DataInStage+0xa0>
 8006c5a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c5c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006c60:	2a02      	cmp	r2, #2
 8006c62:	d005      	beq.n	8006c70 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006c64:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d03c      	beq.n	8006ce6 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 8006c6c:	4628      	mov	r0, r5
}
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006c70:	69c2      	ldr	r2, [r0, #28]
 8006c72:	6a01      	ldr	r1, [r0, #32]
 8006c74:	428a      	cmp	r2, r1
 8006c76:	d80e      	bhi.n	8006c96 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 8006c78:	428a      	cmp	r2, r1
 8006c7a:	d018      	beq.n	8006cae <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c7c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d027      	beq.n	8006cd6 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c86:	2180      	movs	r1, #128	; 0x80
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f003 f896 	bl	8009dba <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f000 fc2f 	bl	80074f2 <USBD_CtlReceiveStatus>
 8006c94:	e7e6      	b.n	8006c64 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8006c96:	1a52      	subs	r2, r2, r1
 8006c98:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	f000 fbff 	bl	800749e <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f003 f8be 	bl	8009e28 <USBD_LL_PrepareReceive>
 8006cac:	e7da      	b.n	8006c64 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8006cae:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8006cb0:	4299      	cmp	r1, r3
 8006cb2:	d8e3      	bhi.n	8006c7c <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8006cb4:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d2df      	bcs.n	8006c7c <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	f000 fbed 	bl	800749e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cca:	460b      	mov	r3, r1
 8006ccc:	460a      	mov	r2, r1
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f003 f8aa 	bl	8009e28 <USBD_LL_PrepareReceive>
 8006cd4:	e7c6      	b.n	8006c64 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 8006cd6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0d2      	beq.n	8006c86 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	4798      	blx	r3
 8006ce4:	e7cf      	b.n	8006c86 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8006cec:	4628      	mov	r0, r5
 8006cee:	e7be      	b.n	8006c6e <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d001      	beq.n	8006cfe <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	e7b7      	b.n	8006c6e <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 8006cfe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	b10b      	cbz	r3, 8006d0a <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006d06:	4798      	blx	r3
        if (ret != USBD_OK)
 8006d08:	e7b1      	b.n	8006c6e <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	e7af      	b.n	8006c6e <USBD_LL_DataInStage+0x1e>

08006d0e <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d14:	2300      	movs	r3, #0
 8006d16:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d1a:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d1c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006d20:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006d24:	b1f3      	cbz	r3, 8006d64 <USBD_LL_Reset+0x56>
{
 8006d26:	b570      	push	{r4, r5, r6, lr}
 8006d28:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8006d2a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8006d2e:	b11a      	cbz	r2, 8006d38 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	b10b      	cbz	r3, 8006d38 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d34:	2100      	movs	r1, #0
 8006d36:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d38:	2340      	movs	r3, #64	; 0x40
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f003 f828 	bl	8009d94 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d44:	2601      	movs	r6, #1
 8006d46:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d4a:	2540      	movs	r5, #64	; 0x40
 8006d4c:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d50:	462b      	mov	r3, r5
 8006d52:	2200      	movs	r2, #0
 8006d54:	2180      	movs	r1, #128	; 0x80
 8006d56:	4620      	mov	r0, r4
 8006d58:	f003 f81c 	bl	8009d94 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d5c:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d5e:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8006d60:	2000      	movs	r0, #0
}
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8006d64:	2003      	movs	r0, #3
}
 8006d66:	4770      	bx	lr

08006d68 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006d68:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	4770      	bx	lr

08006d6e <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8006d6e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d78:	2304      	movs	r3, #4
 8006d7a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8006d7e:	2000      	movs	r0, #0
 8006d80:	4770      	bx	lr

08006d82 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d82:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d001      	beq.n	8006d90 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8006d90:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8006d9a:	e7f7      	b.n	8006d8c <USBD_LL_Resume+0xa>

08006d9c <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8006d9c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8006da0:	b162      	cbz	r2, 8006dbc <USBD_LL_SOF+0x20>
{
 8006da2:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d001      	beq.n	8006db2 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8006dae:	2000      	movs	r0, #0
}
 8006db0:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8006db2:	69d3      	ldr	r3, [r2, #28]
 8006db4:	b123      	cbz	r3, 8006dc0 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 8006db6:	4798      	blx	r3
  return USBD_OK;
 8006db8:	2000      	movs	r0, #0
 8006dba:	e7f9      	b.n	8006db0 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 8006dbc:	2003      	movs	r0, #3
}
 8006dbe:	4770      	bx	lr
  return USBD_OK;
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	e7f5      	b.n	8006db0 <USBD_LL_SOF+0x14>

08006dc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006dc4:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8006dc6:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8006dc8:	781a      	ldrb	r2, [r3, #0]
 8006dca:	b11a      	cbz	r2, 8006dd4 <USBD_GetLen+0x10>
  {
    len++;
 8006dcc:	3001      	adds	r0, #1
 8006dce:	b2c0      	uxtb	r0, r0
    pbuff++;
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	e7f9      	b.n	8006dc8 <USBD_GetLen+0x4>
  }

  return len;
}
 8006dd4:	4770      	bx	lr

08006dd6 <USBD_SetFeature>:
{
 8006dd6:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dd8:	884b      	ldrh	r3, [r1, #2]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d000      	beq.n	8006de0 <USBD_SetFeature+0xa>
}
 8006dde:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8006de0:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006de4:	f000 fb7a 	bl	80074dc <USBD_CtlSendStatus>
}
 8006de8:	e7f9      	b.n	8006dde <USBD_SetFeature+0x8>

08006dea <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8006dea:	780b      	ldrb	r3, [r1, #0]
 8006dec:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8006dee:	784b      	ldrb	r3, [r1, #1]
 8006df0:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8006df2:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8006df4:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006df6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8006dfa:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8006dfc:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8006dfe:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8006e04:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8006e06:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e08:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8006e0e:	80c3      	strh	r3, [r0, #6]
}
 8006e10:	4770      	bx	lr

08006e12 <USBD_CtlError>:
{
 8006e12:	b510      	push	{r4, lr}
 8006e14:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e16:	2180      	movs	r1, #128	; 0x80
 8006e18:	f002 ffcf 	bl	8009dba <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f002 ffcb 	bl	8009dba <USBD_LL_StallEP>
}
 8006e24:	bd10      	pop	{r4, pc}

08006e26 <USBD_GetDescriptor>:
{
 8006e26:	b530      	push	{r4, r5, lr}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8006e34:	884a      	ldrh	r2, [r1, #2]
 8006e36:	0a13      	lsrs	r3, r2, #8
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	2b0e      	cmp	r3, #14
 8006e3c:	f200 80bc 	bhi.w	8006fb8 <USBD_GetDescriptor+0x192>
 8006e40:	e8df f003 	tbb	[pc, r3]
 8006e44:	ba443015 	.word	0xba443015
 8006e48:	baab9eba 	.word	0xbaab9eba
 8006e4c:	babababa 	.word	0xbabababa
 8006e50:	baba      	.short	0xbaba
 8006e52:	08          	.byte	0x08
 8006e53:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006e54:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	b123      	cbz	r3, 8006e66 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006e5c:	f10d 0106 	add.w	r1, sp, #6
 8006e60:	7c00      	ldrb	r0, [r0, #16]
 8006e62:	4798      	blx	r3
  if (err != 0U)
 8006e64:	e00a      	b.n	8006e7c <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8006e66:	4629      	mov	r1, r5
 8006e68:	f7ff ffd3 	bl	8006e12 <USBD_CtlError>
  if (err != 0U)
 8006e6c:	e018      	b.n	8006ea0 <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e6e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f10d 0106 	add.w	r1, sp, #6
 8006e78:	7c00      	ldrb	r0, [r0, #16]
 8006e7a:	4798      	blx	r3
  if (req->wLength != 0U)
 8006e7c:	88ea      	ldrh	r2, [r5, #6]
 8006e7e:	2a00      	cmp	r2, #0
 8006e80:	f000 80a3 	beq.w	8006fca <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 8006e84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8099 	beq.w	8006fc0 <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	bf28      	it	cs
 8006e92:	461a      	movcs	r2, r3
 8006e94:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e98:	4601      	mov	r1, r0
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f000 faf2 	bl	8007484 <USBD_CtlSendData>
}
 8006ea0:	b003      	add	sp, #12
 8006ea2:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ea4:	7c03      	ldrb	r3, [r0, #16]
 8006ea6:	b943      	cbnz	r3, 8006eba <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ea8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eae:	f10d 0006 	add.w	r0, sp, #6
 8006eb2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006eb8:	e7e0      	b.n	8006e7c <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006eba:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	f10d 0006 	add.w	r0, sp, #6
 8006ec4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006eca:	e7d7      	b.n	8006e7c <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	2a05      	cmp	r2, #5
 8006ed0:	d852      	bhi.n	8006f78 <USBD_GetDescriptor+0x152>
 8006ed2:	e8df f002 	tbb	[pc, r2]
 8006ed6:	1003      	.short	0x1003
 8006ed8:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006edc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	b123      	cbz	r3, 8006eee <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ee4:	f10d 0106 	add.w	r1, sp, #6
 8006ee8:	7c00      	ldrb	r0, [r0, #16]
 8006eea:	4798      	blx	r3
  if (err != 0U)
 8006eec:	e7c6      	b.n	8006e7c <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8006eee:	4629      	mov	r1, r5
 8006ef0:	f7ff ff8f 	bl	8006e12 <USBD_CtlError>
  if (err != 0U)
 8006ef4:	e7d4      	b.n	8006ea0 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ef6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	b123      	cbz	r3, 8006f08 <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006efe:	f10d 0106 	add.w	r1, sp, #6
 8006f02:	7c00      	ldrb	r0, [r0, #16]
 8006f04:	4798      	blx	r3
  if (err != 0U)
 8006f06:	e7b9      	b.n	8006e7c <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8006f08:	4629      	mov	r1, r5
 8006f0a:	f7ff ff82 	bl	8006e12 <USBD_CtlError>
  if (err != 0U)
 8006f0e:	e7c7      	b.n	8006ea0 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f10:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	b123      	cbz	r3, 8006f22 <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f18:	f10d 0106 	add.w	r1, sp, #6
 8006f1c:	7c00      	ldrb	r0, [r0, #16]
 8006f1e:	4798      	blx	r3
  if (err != 0U)
 8006f20:	e7ac      	b.n	8006e7c <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8006f22:	4629      	mov	r1, r5
 8006f24:	f7ff ff75 	bl	8006e12 <USBD_CtlError>
  if (err != 0U)
 8006f28:	e7ba      	b.n	8006ea0 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f2a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	b123      	cbz	r3, 8006f3c <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f32:	f10d 0106 	add.w	r1, sp, #6
 8006f36:	7c00      	ldrb	r0, [r0, #16]
 8006f38:	4798      	blx	r3
  if (err != 0U)
 8006f3a:	e79f      	b.n	8006e7c <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	f7ff ff68 	bl	8006e12 <USBD_CtlError>
  if (err != 0U)
 8006f42:	e7ad      	b.n	8006ea0 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f44:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	b123      	cbz	r3, 8006f56 <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f4c:	f10d 0106 	add.w	r1, sp, #6
 8006f50:	7c00      	ldrb	r0, [r0, #16]
 8006f52:	4798      	blx	r3
  if (err != 0U)
 8006f54:	e792      	b.n	8006e7c <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8006f56:	4629      	mov	r1, r5
 8006f58:	f7ff ff5b 	bl	8006e12 <USBD_CtlError>
  if (err != 0U)
 8006f5c:	e7a0      	b.n	8006ea0 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f5e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	b123      	cbz	r3, 8006f70 <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f66:	f10d 0106 	add.w	r1, sp, #6
 8006f6a:	7c00      	ldrb	r0, [r0, #16]
 8006f6c:	4798      	blx	r3
  if (err != 0U)
 8006f6e:	e785      	b.n	8006e7c <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8006f70:	4629      	mov	r1, r5
 8006f72:	f7ff ff4e 	bl	8006e12 <USBD_CtlError>
  if (err != 0U)
 8006f76:	e793      	b.n	8006ea0 <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f7ff ff4a 	bl	8006e12 <USBD_CtlError>
  if (err != 0U)
 8006f7e:	e78f      	b.n	8006ea0 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f80:	7c03      	ldrb	r3, [r0, #16]
 8006f82:	b933      	cbnz	r3, 8006f92 <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f84:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	f10d 0006 	add.w	r0, sp, #6
 8006f8e:	4798      	blx	r3
  if (err != 0U)
 8006f90:	e774      	b.n	8006e7c <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8006f92:	4629      	mov	r1, r5
 8006f94:	f7ff ff3d 	bl	8006e12 <USBD_CtlError>
  if (err != 0U)
 8006f98:	e782      	b.n	8006ea0 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f9a:	7c03      	ldrb	r3, [r0, #16]
 8006f9c:	b943      	cbnz	r3, 8006fb0 <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f9e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa4:	f10d 0006 	add.w	r0, sp, #6
 8006fa8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006faa:	2307      	movs	r3, #7
 8006fac:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006fae:	e765      	b.n	8006e7c <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	f7ff ff2e 	bl	8006e12 <USBD_CtlError>
  if (err != 0U)
 8006fb6:	e773      	b.n	8006ea0 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f7ff ff2a 	bl	8006e12 <USBD_CtlError>
    return;
 8006fbe:	e76f      	b.n	8006ea0 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f7ff ff25 	bl	8006e12 <USBD_CtlError>
 8006fc8:	e76a      	b.n	8006ea0 <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f000 fa86 	bl	80074dc <USBD_CtlSendStatus>
 8006fd0:	e766      	b.n	8006ea0 <USBD_GetDescriptor+0x7a>

08006fd2 <USBD_SetAddress>:
{
 8006fd2:	b538      	push	{r3, r4, r5, lr}
 8006fd4:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fd6:	888b      	ldrh	r3, [r1, #4]
 8006fd8:	b9fb      	cbnz	r3, 800701a <USBD_SetAddress+0x48>
 8006fda:	88cb      	ldrh	r3, [r1, #6]
 8006fdc:	b9eb      	cbnz	r3, 800701a <USBD_SetAddress+0x48>
 8006fde:	884b      	ldrh	r3, [r1, #2]
 8006fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe2:	d81a      	bhi.n	800701a <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fe4:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d00c      	beq.n	800700c <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8006ff2:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	f002 ff06 	bl	8009e08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f000 fa6d 	bl	80074dc <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8007002:	b135      	cbz	r5, 8007012 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007004:	2302      	movs	r3, #2
 8007006:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800700a:	e009      	b.n	8007020 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800700c:	f7ff ff01 	bl	8006e12 <USBD_CtlError>
 8007010:	e006      	b.n	8007020 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007012:	2301      	movs	r3, #1
 8007014:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007018:	e002      	b.n	8007020 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800701a:	4620      	mov	r0, r4
 800701c:	f7ff fef9 	bl	8006e12 <USBD_CtlError>
}
 8007020:	bd38      	pop	{r3, r4, r5, pc}
	...

08007024 <USBD_SetConfig>:
{
 8007024:	b570      	push	{r4, r5, r6, lr}
 8007026:	4604      	mov	r4, r0
 8007028:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800702a:	788d      	ldrb	r5, [r1, #2]
 800702c:	4b2e      	ldr	r3, [pc, #184]	; (80070e8 <USBD_SetConfig+0xc4>)
 800702e:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007030:	2d01      	cmp	r5, #1
 8007032:	d810      	bhi.n	8007056 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8007034:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d00f      	beq.n	800705e <USBD_SetConfig+0x3a>
 800703e:	2b03      	cmp	r3, #3
 8007040:	d023      	beq.n	800708a <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 8007042:	f7ff fee6 	bl	8006e12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007046:	4b28      	ldr	r3, [pc, #160]	; (80070e8 <USBD_SetConfig+0xc4>)
 8007048:	7819      	ldrb	r1, [r3, #0]
 800704a:	4620      	mov	r0, r4
 800704c:	f7ff fd90 	bl	8006b70 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007050:	2503      	movs	r5, #3
}
 8007052:	4628      	mov	r0, r5
 8007054:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8007056:	f7ff fedc 	bl	8006e12 <USBD_CtlError>
    return USBD_FAIL;
 800705a:	2503      	movs	r5, #3
 800705c:	e7f9      	b.n	8007052 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800705e:	b18d      	cbz	r5, 8007084 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 8007060:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007062:	4629      	mov	r1, r5
 8007064:	f7ff fd7b 	bl	8006b5e <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8007068:	4605      	mov	r5, r0
 800706a:	b120      	cbz	r0, 8007076 <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800706c:	4631      	mov	r1, r6
 800706e:	4620      	mov	r0, r4
 8007070:	f7ff fecf 	bl	8006e12 <USBD_CtlError>
 8007074:	e7ed      	b.n	8007052 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8007076:	4620      	mov	r0, r4
 8007078:	f000 fa30 	bl	80074dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800707c:	2303      	movs	r3, #3
 800707e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007082:	e7e6      	b.n	8007052 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8007084:	f000 fa2a 	bl	80074dc <USBD_CtlSendStatus>
 8007088:	e7e3      	b.n	8007052 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800708a:	b1cd      	cbz	r5, 80070c0 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800708c:	6841      	ldr	r1, [r0, #4]
 800708e:	428d      	cmp	r5, r1
 8007090:	d025      	beq.n	80070de <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007092:	b2c9      	uxtb	r1, r1
 8007094:	f7ff fd6c 	bl	8006b70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007098:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <USBD_SetConfig+0xc4>)
 800709a:	7819      	ldrb	r1, [r3, #0]
 800709c:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800709e:	4620      	mov	r0, r4
 80070a0:	f7ff fd5d 	bl	8006b5e <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80070a4:	4605      	mov	r5, r0
 80070a6:	b1b0      	cbz	r0, 80070d6 <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 80070a8:	4631      	mov	r1, r6
 80070aa:	4620      	mov	r0, r4
 80070ac:	f7ff feb1 	bl	8006e12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070b0:	7921      	ldrb	r1, [r4, #4]
 80070b2:	4620      	mov	r0, r4
 80070b4:	f7ff fd5c 	bl	8006b70 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070b8:	2302      	movs	r3, #2
 80070ba:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80070be:	e7c8      	b.n	8007052 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070c0:	2302      	movs	r3, #2
 80070c2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80070c6:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070c8:	4629      	mov	r1, r5
 80070ca:	f7ff fd51 	bl	8006b70 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80070ce:	4620      	mov	r0, r4
 80070d0:	f000 fa04 	bl	80074dc <USBD_CtlSendStatus>
 80070d4:	e7bd      	b.n	8007052 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 fa00 	bl	80074dc <USBD_CtlSendStatus>
 80070dc:	e7b9      	b.n	8007052 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80070de:	f000 f9fd 	bl	80074dc <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80070e2:	2500      	movs	r5, #0
 80070e4:	e7b5      	b.n	8007052 <USBD_SetConfig+0x2e>
 80070e6:	bf00      	nop
 80070e8:	20000290 	.word	0x20000290

080070ec <USBD_GetConfig>:
{
 80070ec:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80070ee:	88cb      	ldrh	r3, [r1, #6]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d10b      	bne.n	800710c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80070f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d909      	bls.n	8007112 <USBD_GetConfig+0x26>
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d109      	bne.n	8007116 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007102:	2201      	movs	r2, #1
 8007104:	1d01      	adds	r1, r0, #4
 8007106:	f000 f9bd 	bl	8007484 <USBD_CtlSendData>
        break;
 800710a:	e001      	b.n	8007110 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800710c:	f7ff fe81 	bl	8006e12 <USBD_CtlError>
}
 8007110:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8007112:	b25b      	sxtb	r3, r3
 8007114:	b913      	cbnz	r3, 800711c <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 8007116:	f7ff fe7c 	bl	8006e12 <USBD_CtlError>
}
 800711a:	e7f9      	b.n	8007110 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800711c:	4601      	mov	r1, r0
 800711e:	2300      	movs	r3, #0
 8007120:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007124:	2201      	movs	r2, #1
 8007126:	f000 f9ad 	bl	8007484 <USBD_CtlSendData>
        break;
 800712a:	e7f1      	b.n	8007110 <USBD_GetConfig+0x24>

0800712c <USBD_GetStatus>:
{
 800712c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800712e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007132:	3b01      	subs	r3, #1
 8007134:	2b02      	cmp	r3, #2
 8007136:	d812      	bhi.n	800715e <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8007138:	88cb      	ldrh	r3, [r1, #6]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d10c      	bne.n	8007158 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800713e:	2301      	movs	r3, #1
 8007140:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8007142:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8007146:	b10b      	cbz	r3, 800714c <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007148:	2303      	movs	r3, #3
 800714a:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800714c:	2202      	movs	r2, #2
 800714e:	f100 010c 	add.w	r1, r0, #12
 8007152:	f000 f997 	bl	8007484 <USBD_CtlSendData>
}
 8007156:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8007158:	f7ff fe5b 	bl	8006e12 <USBD_CtlError>
        break;
 800715c:	e7fb      	b.n	8007156 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800715e:	f7ff fe58 	bl	8006e12 <USBD_CtlError>
}
 8007162:	e7f8      	b.n	8007156 <USBD_GetStatus+0x2a>

08007164 <USBD_ClrFeature>:
{
 8007164:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8007166:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800716a:	3b01      	subs	r3, #1
 800716c:	2b02      	cmp	r3, #2
 800716e:	d809      	bhi.n	8007184 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007170:	884b      	ldrh	r3, [r1, #2]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d000      	beq.n	8007178 <USBD_ClrFeature+0x14>
}
 8007176:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800717e:	f000 f9ad 	bl	80074dc <USBD_CtlSendStatus>
 8007182:	e7f8      	b.n	8007176 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8007184:	f7ff fe45 	bl	8006e12 <USBD_CtlError>
}
 8007188:	e7f5      	b.n	8007176 <USBD_ClrFeature+0x12>

0800718a <USBD_StdDevReq>:
{
 800718a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800718c:	780c      	ldrb	r4, [r1, #0]
 800718e:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8007192:	2c20      	cmp	r4, #32
 8007194:	d006      	beq.n	80071a4 <USBD_StdDevReq+0x1a>
 8007196:	2c40      	cmp	r4, #64	; 0x40
 8007198:	d004      	beq.n	80071a4 <USBD_StdDevReq+0x1a>
 800719a:	b154      	cbz	r4, 80071b2 <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800719c:	f7ff fe39 	bl	8006e12 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80071a0:	2400      	movs	r4, #0
      break;
 80071a2:	e004      	b.n	80071ae <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071a4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	4798      	blx	r3
 80071ac:	4604      	mov	r4, r0
}
 80071ae:	4620      	mov	r0, r4
 80071b0:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 80071b2:	784d      	ldrb	r5, [r1, #1]
 80071b4:	2d09      	cmp	r5, #9
 80071b6:	d81d      	bhi.n	80071f4 <USBD_StdDevReq+0x6a>
 80071b8:	e8df f005 	tbb	[pc, r5]
 80071bc:	161c1912 	.word	0x161c1912
 80071c0:	1c05081c 	.word	0x1c05081c
 80071c4:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 80071c6:	f7ff fe2e 	bl	8006e26 <USBD_GetDescriptor>
          break;
 80071ca:	e7f0      	b.n	80071ae <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 80071cc:	f7ff ff01 	bl	8006fd2 <USBD_SetAddress>
          break;
 80071d0:	e7ed      	b.n	80071ae <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 80071d2:	f7ff ff27 	bl	8007024 <USBD_SetConfig>
 80071d6:	4604      	mov	r4, r0
          break;
 80071d8:	e7e9      	b.n	80071ae <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 80071da:	f7ff ff87 	bl	80070ec <USBD_GetConfig>
          break;
 80071de:	e7e6      	b.n	80071ae <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 80071e0:	f7ff ffa4 	bl	800712c <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80071e4:	462c      	mov	r4, r5
          break;
 80071e6:	e7e2      	b.n	80071ae <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 80071e8:	f7ff fdf5 	bl	8006dd6 <USBD_SetFeature>
          break;
 80071ec:	e7df      	b.n	80071ae <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 80071ee:	f7ff ffb9 	bl	8007164 <USBD_ClrFeature>
          break;
 80071f2:	e7dc      	b.n	80071ae <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 80071f4:	f7ff fe0d 	bl	8006e12 <USBD_CtlError>
          break;
 80071f8:	e7d9      	b.n	80071ae <USBD_StdDevReq+0x24>

080071fa <USBD_StdItfReq>:
{
 80071fa:	b570      	push	{r4, r5, r6, lr}
 80071fc:	4605      	mov	r5, r0
 80071fe:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007200:	780b      	ldrb	r3, [r1, #0]
 8007202:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007206:	2b20      	cmp	r3, #32
 8007208:	d007      	beq.n	800721a <USBD_StdItfReq+0x20>
 800720a:	2b40      	cmp	r3, #64	; 0x40
 800720c:	d005      	beq.n	800721a <USBD_StdItfReq+0x20>
 800720e:	b123      	cbz	r3, 800721a <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8007210:	f7ff fdff 	bl	8006e12 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007214:	2600      	movs	r6, #0
}
 8007216:	4630      	mov	r0, r6
 8007218:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800721a:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800721e:	3b01      	subs	r3, #1
 8007220:	2b02      	cmp	r3, #2
 8007222:	d818      	bhi.n	8007256 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007224:	7923      	ldrb	r3, [r4, #4]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d80f      	bhi.n	800724a <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800722a:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	4621      	mov	r1, r4
 8007232:	4628      	mov	r0, r5
 8007234:	4798      	blx	r3
 8007236:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007238:	88e3      	ldrh	r3, [r4, #6]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1eb      	bne.n	8007216 <USBD_StdItfReq+0x1c>
 800723e:	2800      	cmp	r0, #0
 8007240:	d1e9      	bne.n	8007216 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8007242:	4628      	mov	r0, r5
 8007244:	f000 f94a 	bl	80074dc <USBD_CtlSendStatus>
 8007248:	e7e5      	b.n	8007216 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800724a:	4621      	mov	r1, r4
 800724c:	4628      	mov	r0, r5
 800724e:	f7ff fde0 	bl	8006e12 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007252:	2600      	movs	r6, #0
 8007254:	e7df      	b.n	8007216 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 8007256:	4621      	mov	r1, r4
 8007258:	4628      	mov	r0, r5
 800725a:	f7ff fdda 	bl	8006e12 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800725e:	2600      	movs	r6, #0
          break;
 8007260:	e7d9      	b.n	8007216 <USBD_StdItfReq+0x1c>

08007262 <USBD_StdEPReq>:
{
 8007262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007264:	4606      	mov	r6, r0
 8007266:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8007268:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800726a:	780c      	ldrb	r4, [r1, #0]
 800726c:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8007270:	2c20      	cmp	r4, #32
 8007272:	d008      	beq.n	8007286 <USBD_StdEPReq+0x24>
 8007274:	b2d9      	uxtb	r1, r3
 8007276:	2c40      	cmp	r4, #64	; 0x40
 8007278:	d005      	beq.n	8007286 <USBD_StdEPReq+0x24>
 800727a:	b16c      	cbz	r4, 8007298 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800727c:	4629      	mov	r1, r5
 800727e:	f7ff fdc8 	bl	8006e12 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007282:	2400      	movs	r4, #0
      break;
 8007284:	e006      	b.n	8007294 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007286:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	4629      	mov	r1, r5
 800728e:	4630      	mov	r0, r6
 8007290:	4798      	blx	r3
 8007292:	4604      	mov	r4, r0
}
 8007294:	4620      	mov	r0, r4
 8007296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 8007298:	786f      	ldrb	r7, [r5, #1]
 800729a:	2f01      	cmp	r7, #1
 800729c:	d02f      	beq.n	80072fe <USBD_StdEPReq+0x9c>
 800729e:	2f03      	cmp	r7, #3
 80072a0:	d005      	beq.n	80072ae <USBD_StdEPReq+0x4c>
 80072a2:	2f00      	cmp	r7, #0
 80072a4:	d059      	beq.n	800735a <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 80072a6:	4629      	mov	r1, r5
 80072a8:	f7ff fdb3 	bl	8006e12 <USBD_CtlError>
          break;
 80072ac:	e7f2      	b.n	8007294 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80072ae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d005      	beq.n	80072c4 <USBD_StdEPReq+0x62>
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d012      	beq.n	80072e2 <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 80072bc:	4629      	mov	r1, r5
 80072be:	f7ff fda8 	bl	8006e12 <USBD_CtlError>
              break;
 80072c2:	e7e7      	b.n	8007294 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072c4:	b109      	cbz	r1, 80072ca <USBD_StdEPReq+0x68>
 80072c6:	2980      	cmp	r1, #128	; 0x80
 80072c8:	d104      	bne.n	80072d4 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 80072ca:	4629      	mov	r1, r5
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff fda0 	bl	8006e12 <USBD_CtlError>
 80072d2:	e7df      	b.n	8007294 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072d4:	f002 fd71 	bl	8009dba <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072d8:	2180      	movs	r1, #128	; 0x80
 80072da:	4630      	mov	r0, r6
 80072dc:	f002 fd6d 	bl	8009dba <USBD_LL_StallEP>
 80072e0:	e7d8      	b.n	8007294 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072e2:	886b      	ldrh	r3, [r5, #2]
 80072e4:	b923      	cbnz	r3, 80072f0 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072e6:	b119      	cbz	r1, 80072f0 <USBD_StdEPReq+0x8e>
 80072e8:	2980      	cmp	r1, #128	; 0x80
 80072ea:	d001      	beq.n	80072f0 <USBD_StdEPReq+0x8e>
 80072ec:	88eb      	ldrh	r3, [r5, #6]
 80072ee:	b11b      	cbz	r3, 80072f8 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 80072f0:	4630      	mov	r0, r6
 80072f2:	f000 f8f3 	bl	80074dc <USBD_CtlSendStatus>
              break;
 80072f6:	e7cd      	b.n	8007294 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80072f8:	f002 fd5f 	bl	8009dba <USBD_LL_StallEP>
 80072fc:	e7f8      	b.n	80072f0 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 80072fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b02      	cmp	r3, #2
 8007306:	d005      	beq.n	8007314 <USBD_StdEPReq+0xb2>
 8007308:	2b03      	cmp	r3, #3
 800730a:	d012      	beq.n	8007332 <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800730c:	4629      	mov	r1, r5
 800730e:	f7ff fd80 	bl	8006e12 <USBD_CtlError>
              break;
 8007312:	e7bf      	b.n	8007294 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007314:	b109      	cbz	r1, 800731a <USBD_StdEPReq+0xb8>
 8007316:	2980      	cmp	r1, #128	; 0x80
 8007318:	d104      	bne.n	8007324 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800731a:	4629      	mov	r1, r5
 800731c:	4630      	mov	r0, r6
 800731e:	f7ff fd78 	bl	8006e12 <USBD_CtlError>
 8007322:	e7b7      	b.n	8007294 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007324:	f002 fd49 	bl	8009dba <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007328:	2180      	movs	r1, #128	; 0x80
 800732a:	4630      	mov	r0, r6
 800732c:	f002 fd45 	bl	8009dba <USBD_LL_StallEP>
 8007330:	e7b0      	b.n	8007294 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007332:	886b      	ldrh	r3, [r5, #2]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1ad      	bne.n	8007294 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007338:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800733c:	d10a      	bne.n	8007354 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800733e:	4630      	mov	r0, r6
 8007340:	f000 f8cc 	bl	80074dc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007344:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	4629      	mov	r1, r5
 800734c:	4630      	mov	r0, r6
 800734e:	4798      	blx	r3
 8007350:	4604      	mov	r4, r0
 8007352:	e79f      	b.n	8007294 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007354:	f002 fd39 	bl	8009dca <USBD_LL_ClearStallEP>
 8007358:	e7f1      	b.n	800733e <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800735a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	2a02      	cmp	r2, #2
 8007362:	d006      	beq.n	8007372 <USBD_StdEPReq+0x110>
 8007364:	2a03      	cmp	r2, #3
 8007366:	d029      	beq.n	80073bc <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 8007368:	4629      	mov	r1, r5
 800736a:	f7ff fd52 	bl	8006e12 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800736e:	463c      	mov	r4, r7
              break;
 8007370:	e790      	b.n	8007294 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007372:	b109      	cbz	r1, 8007378 <USBD_StdEPReq+0x116>
 8007374:	2980      	cmp	r1, #128	; 0x80
 8007376:	d113      	bne.n	80073a0 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007378:	f013 0f80 	tst.w	r3, #128	; 0x80
 800737c:	d115      	bne.n	80073aa <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800737e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007382:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007386:	0089      	lsls	r1, r1, #2
 8007388:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800738c:	4431      	add	r1, r6
 800738e:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8007390:	2300      	movs	r3, #0
 8007392:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007394:	2202      	movs	r2, #2
 8007396:	4630      	mov	r0, r6
 8007398:	f000 f874 	bl	8007484 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800739c:	463c      	mov	r4, r7
              break;
 800739e:	e779      	b.n	8007294 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 80073a0:	4629      	mov	r1, r5
 80073a2:	f7ff fd36 	bl	8006e12 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80073a6:	463c      	mov	r4, r7
                break;
 80073a8:	e774      	b.n	8007294 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073aa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80073ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80073b2:	0089      	lsls	r1, r1, #2
 80073b4:	3110      	adds	r1, #16
 80073b6:	4431      	add	r1, r6
 80073b8:	3104      	adds	r1, #4
 80073ba:	e7e9      	b.n	8007390 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 80073bc:	b25b      	sxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	db1f      	blt.n	8007402 <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073c2:	f001 020f 	and.w	r2, r1, #15
 80073c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80073ca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80073ce:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 80073d2:	b322      	cbz	r2, 800741e <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	db27      	blt.n	8007428 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073d8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073e0:	009c      	lsls	r4, r3, #2
 80073e2:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 80073e6:	4434      	add	r4, r6
 80073e8:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073ea:	b109      	cbz	r1, 80073f0 <USBD_StdEPReq+0x18e>
 80073ec:	2980      	cmp	r1, #128	; 0x80
 80073ee:	d124      	bne.n	800743a <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073f4:	2202      	movs	r2, #2
 80073f6:	4621      	mov	r1, r4
 80073f8:	4630      	mov	r0, r6
 80073fa:	f000 f843 	bl	8007484 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80073fe:	463c      	mov	r4, r7
              break;
 8007400:	e748      	b.n	8007294 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007402:	f001 020f 	and.w	r2, r1, #15
 8007406:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800740a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800740e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007410:	2a00      	cmp	r2, #0
 8007412:	d1df      	bne.n	80073d4 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 8007414:	4629      	mov	r1, r5
 8007416:	f7ff fcfc 	bl	8006e12 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800741a:	463c      	mov	r4, r7
                  break;
 800741c:	e73a      	b.n	8007294 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800741e:	4629      	mov	r1, r5
 8007420:	f7ff fcf7 	bl	8006e12 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007424:	463c      	mov	r4, r7
                  break;
 8007426:	e735      	b.n	8007294 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007428:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800742c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007430:	009c      	lsls	r4, r3, #2
 8007432:	3410      	adds	r4, #16
 8007434:	4434      	add	r4, r6
 8007436:	3404      	adds	r4, #4
 8007438:	e7d7      	b.n	80073ea <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800743a:	4630      	mov	r0, r6
 800743c:	f002 fccd 	bl	8009dda <USBD_LL_IsStallEP>
 8007440:	b110      	cbz	r0, 8007448 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 8007442:	2301      	movs	r3, #1
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	e7d5      	b.n	80073f4 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 8007448:	2300      	movs	r3, #0
 800744a:	6023      	str	r3, [r4, #0]
 800744c:	e7d2      	b.n	80073f4 <USBD_StdEPReq+0x192>

0800744e <USBD_GetString>:
  if (desc == NULL)
 800744e:	b1c0      	cbz	r0, 8007482 <USBD_GetString+0x34>
{
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	460d      	mov	r5, r1
 8007454:	4616      	mov	r6, r2
 8007456:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007458:	f7ff fcb4 	bl	8006dc4 <USBD_GetLen>
 800745c:	3001      	adds	r0, #1
 800745e:	0040      	lsls	r0, r0, #1
 8007460:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8007462:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007464:	2303      	movs	r3, #3
 8007466:	706b      	strb	r3, [r5, #1]
  idx++;
 8007468:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800746a:	7822      	ldrb	r2, [r4, #0]
 800746c:	b142      	cbz	r2, 8007480 <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 800746e:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8007470:	3401      	adds	r4, #1
    idx++;
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8007476:	2100      	movs	r1, #0
 8007478:	54a9      	strb	r1, [r5, r2]
    idx++;
 800747a:	3302      	adds	r3, #2
 800747c:	b2db      	uxtb	r3, r3
 800747e:	e7f4      	b.n	800746a <USBD_GetString+0x1c>
}
 8007480:	bd70      	pop	{r4, r5, r6, pc}
 8007482:	4770      	bx	lr

08007484 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007484:	b510      	push	{r4, lr}
 8007486:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007488:	2202      	movs	r2, #2
 800748a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800748e:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007490:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007492:	460a      	mov	r2, r1
 8007494:	2100      	movs	r1, #0
 8007496:	f002 fcbf 	bl	8009e18 <USBD_LL_Transmit>

  return USBD_OK;
}
 800749a:	2000      	movs	r0, #0
 800749c:	bd10      	pop	{r4, pc}

0800749e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800749e:	b508      	push	{r3, lr}
 80074a0:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074a2:	460a      	mov	r2, r1
 80074a4:	2100      	movs	r1, #0
 80074a6:	f002 fcb7 	bl	8009e18 <USBD_LL_Transmit>

  return USBD_OK;
}
 80074aa:	2000      	movs	r0, #0
 80074ac:	bd08      	pop	{r3, pc}

080074ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80074ae:	b510      	push	{r4, lr}
 80074b0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80074b2:	2203      	movs	r2, #3
 80074b4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80074b8:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80074bc:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074c0:	460a      	mov	r2, r1
 80074c2:	2100      	movs	r1, #0
 80074c4:	f002 fcb0 	bl	8009e28 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80074c8:	2000      	movs	r0, #0
 80074ca:	bd10      	pop	{r4, pc}

080074cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80074cc:	b508      	push	{r3, lr}
 80074ce:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074d0:	460a      	mov	r2, r1
 80074d2:	2100      	movs	r1, #0
 80074d4:	f002 fca8 	bl	8009e28 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80074d8:	2000      	movs	r0, #0
 80074da:	bd08      	pop	{r3, pc}

080074dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074dc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074de:	2204      	movs	r2, #4
 80074e0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074e4:	2300      	movs	r3, #0
 80074e6:	461a      	mov	r2, r3
 80074e8:	4619      	mov	r1, r3
 80074ea:	f002 fc95 	bl	8009e18 <USBD_LL_Transmit>

  return USBD_OK;
}
 80074ee:	2000      	movs	r0, #0
 80074f0:	bd08      	pop	{r3, pc}

080074f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074f2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074f4:	2205      	movs	r2, #5
 80074f6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074fa:	2300      	movs	r3, #0
 80074fc:	461a      	mov	r2, r3
 80074fe:	4619      	mov	r1, r3
 8007500:	f002 fc92 	bl	8009e28 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007504:	2000      	movs	r0, #0
 8007506:	bd08      	pop	{r3, pc}

08007508 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007508:	4601      	mov	r1, r0
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800750a:	4807      	ldr	r0, [pc, #28]	; (8007528 <OTP_Read+0x20>)

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800750c:	79c3      	ldrb	r3, [r0, #7]
 800750e:	428b      	cmp	r3, r1
 8007510:	d004      	beq.n	800751c <OTP_Read+0x14>
 8007512:	4a06      	ldr	r2, [pc, #24]	; (800752c <OTP_Read+0x24>)
 8007514:	4290      	cmp	r0, r2
 8007516:	d001      	beq.n	800751c <OTP_Read+0x14>
  {
    p_id -= 8 ;
 8007518:	3808      	subs	r0, #8
 800751a:	e7f7      	b.n	800750c <OTP_Read+0x4>
  }

  if((*( p_id + 7 )) != id)
 800751c:	428b      	cmp	r3, r1
 800751e:	d100      	bne.n	8007522 <OTP_Read+0x1a>
  {
    p_id = 0 ;
  }

  return p_id ;
}
 8007520:	4770      	bx	lr
    p_id = 0 ;
 8007522:	2000      	movs	r0, #0
  return p_id ;
 8007524:	e7fc      	b.n	8007520 <OTP_Read+0x18>
 8007526:	bf00      	nop
 8007528:	1fff73f8 	.word	0x1fff73f8
 800752c:	1fff7000 	.word	0x1fff7000

08007530 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007530:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8007532:	4b05      	ldr	r3, [pc, #20]	; (8007548 <SysTick_Handler+0x18>)
 8007534:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007536:	f001 fc35 	bl	8008da4 <xTaskGetSchedulerState>
 800753a:	2801      	cmp	r0, #1
 800753c:	d100      	bne.n	8007540 <SysTick_Handler+0x10>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800753e:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8007540:	f002 f838 	bl	80095b4 <xPortSysTickHandler>
}
 8007544:	e7fb      	b.n	800753e <SysTick_Handler+0xe>
 8007546:	bf00      	nop
 8007548:	e000e010 	.word	0xe000e010

0800754c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800754c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8007550:	b92b      	cbnz	r3, 800755e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <osKernelInitialize+0x20>)
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	b928      	cbnz	r0, 8007564 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007558:	2201      	movs	r2, #1
 800755a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800755c:	4770      	bx	lr
    stat = osErrorISR;
 800755e:	f06f 0005 	mvn.w	r0, #5
 8007562:	4770      	bx	lr
    } else {
      stat = osError;
 8007564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	200004f0 	.word	0x200004f0

08007570 <osKernelStart>:
 8007570:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8007574:	b973      	cbnz	r3, 8007594 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8007576:	4b0a      	ldr	r3, [pc, #40]	; (80075a0 <osKernelStart+0x30>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d10d      	bne.n	800759a <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800757e:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007580:	2400      	movs	r4, #0
 8007582:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <osKernelStart+0x34>)
 8007584:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007586:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <osKernelStart+0x30>)
 8007588:	2202      	movs	r2, #2
 800758a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800758c:	f001 f968 	bl	8008860 <vTaskStartScheduler>
      stat = osOK;
 8007590:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8007592:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8007594:	f06f 0005 	mvn.w	r0, #5
 8007598:	4770      	bx	lr
      stat = osError;
 800759a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800759e:	4770      	bx	lr
 80075a0:	200004f0 	.word	0x200004f0
 80075a4:	e000ed00 	.word	0xe000ed00

080075a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075aa:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075ac:	2400      	movs	r4, #0
 80075ae:	9405      	str	r4, [sp, #20]
 80075b0:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80075b4:	bb74      	cbnz	r4, 8007614 <osThreadNew+0x6c>
 80075b6:	b368      	cbz	r0, 8007614 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80075b8:	b322      	cbz	r2, 8007604 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 80075ba:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80075bc:	6993      	ldr	r3, [r2, #24]
 80075be:	b903      	cbnz	r3, 80075c2 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 80075c0:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075c2:	1e5c      	subs	r4, r3, #1
 80075c4:	2c37      	cmp	r4, #55	; 0x37
 80075c6:	d849      	bhi.n	800765c <osThreadNew+0xb4>
 80075c8:	6854      	ldr	r4, [r2, #4]
 80075ca:	f014 0f01 	tst.w	r4, #1
 80075ce:	d147      	bne.n	8007660 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80075d0:	6956      	ldr	r6, [r2, #20]
 80075d2:	b16e      	cbz	r6, 80075f0 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80075d4:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075d8:	6894      	ldr	r4, [r2, #8]
 80075da:	b12c      	cbz	r4, 80075e8 <osThreadNew+0x40>
 80075dc:	68d7      	ldr	r7, [r2, #12]
 80075de:	2f5b      	cmp	r7, #91	; 0x5b
 80075e0:	d902      	bls.n	80075e8 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075e2:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075e4:	b107      	cbz	r7, 80075e8 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075e6:	b9c6      	cbnz	r6, 800761a <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075e8:	b12c      	cbz	r4, 80075f6 <osThreadNew+0x4e>
    mem  = -1;
 80075ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80075ee:	e00e      	b.n	800760e <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 80075f0:	f04f 0c80 	mov.w	ip, #128	; 0x80
 80075f4:	e7f0      	b.n	80075d8 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075f6:	68d4      	ldr	r4, [r2, #12]
 80075f8:	b98c      	cbnz	r4, 800761e <osThreadNew+0x76>
 80075fa:	6914      	ldr	r4, [r2, #16]
 80075fc:	b194      	cbz	r4, 8007624 <osThreadNew+0x7c>
    mem  = -1;
 80075fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007602:	e004      	b.n	800760e <osThreadNew+0x66>
    name = NULL;
 8007604:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8007606:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8007608:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800760a:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 800760e:	2c01      	cmp	r4, #1
 8007610:	d00a      	beq.n	8007628 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8007612:	b1ac      	cbz	r4, 8007640 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007614:	9805      	ldr	r0, [sp, #20]
}
 8007616:	b007      	add	sp, #28
 8007618:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800761a:	2401      	movs	r4, #1
 800761c:	e7f7      	b.n	800760e <osThreadNew+0x66>
    mem  = -1;
 800761e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007622:	e7f4      	b.n	800760e <osThreadNew+0x66>
          mem = 0;
 8007624:	2400      	movs	r4, #0
 8007626:	e7f2      	b.n	800760e <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007628:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800762a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800762c:	9202      	str	r2, [sp, #8]
 800762e:	9401      	str	r4, [sp, #4]
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	460b      	mov	r3, r1
 8007634:	4662      	mov	r2, ip
 8007636:	4629      	mov	r1, r5
 8007638:	f001 f8a4 	bl	8008784 <xTaskCreateStatic>
 800763c:	9005      	str	r0, [sp, #20]
 800763e:	e7e9      	b.n	8007614 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007640:	aa05      	add	r2, sp, #20
 8007642:	9201      	str	r2, [sp, #4]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	460b      	mov	r3, r1
 8007648:	fa1f f28c 	uxth.w	r2, ip
 800764c:	4629      	mov	r1, r5
 800764e:	f001 f8d3 	bl	80087f8 <xTaskCreate>
 8007652:	2801      	cmp	r0, #1
 8007654:	d0de      	beq.n	8007614 <osThreadNew+0x6c>
            hTask = NULL;
 8007656:	2300      	movs	r3, #0
 8007658:	9305      	str	r3, [sp, #20]
 800765a:	e7db      	b.n	8007614 <osThreadNew+0x6c>
        return (NULL);
 800765c:	2000      	movs	r0, #0
 800765e:	e7da      	b.n	8007616 <osThreadNew+0x6e>
 8007660:	2000      	movs	r0, #0
 8007662:	e7d8      	b.n	8007616 <osThreadNew+0x6e>

08007664 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007664:	b508      	push	{r3, lr}
 8007666:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800766a:	b933      	cbnz	r3, 800767a <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800766c:	b908      	cbnz	r0, 8007672 <osDelay+0xe>
    stat = osOK;
 800766e:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8007670:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8007672:	f001 fa57 	bl	8008b24 <vTaskDelay>
    stat = osOK;
 8007676:	2000      	movs	r0, #0
 8007678:	e7fa      	b.n	8007670 <osDelay+0xc>
    stat = osErrorISR;
 800767a:	f06f 0005 	mvn.w	r0, #5
 800767e:	e7f7      	b.n	8007670 <osDelay+0xc>

08007680 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8007686:	2b00      	cmp	r3, #0
 8007688:	d13f      	bne.n	800770a <osMutexNew+0x8a>
 800768a:	4604      	mov	r4, r0
    if (attr != NULL) {
 800768c:	b100      	cbz	r0, 8007690 <osMutexNew+0x10>
      type = attr->attr_bits;
 800768e:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007690:	f013 0601 	ands.w	r6, r3, #1
 8007694:	d000      	beq.n	8007698 <osMutexNew+0x18>
      rmtx = 1U;
 8007696:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007698:	f013 0f08 	tst.w	r3, #8
 800769c:	d138      	bne.n	8007710 <osMutexNew+0x90>
      mem = -1;

      if (attr != NULL) {
 800769e:	b34c      	cbz	r4, 80076f4 <osMutexNew+0x74>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80076a0:	68a1      	ldr	r1, [r4, #8]
 80076a2:	b111      	cbz	r1, 80076aa <osMutexNew+0x2a>
 80076a4:	68e3      	ldr	r3, [r4, #12]
 80076a6:	2b4f      	cmp	r3, #79	; 0x4f
 80076a8:	d819      	bhi.n	80076de <osMutexNew+0x5e>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80076aa:	b199      	cbz	r1, 80076d4 <osMutexNew+0x54>
      mem = -1;
 80076ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 80076b0:	bb4b      	cbnz	r3, 8007706 <osMutexNew+0x86>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80076b2:	b31e      	cbz	r6, 80076fc <osMutexNew+0x7c>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80076b4:	2004      	movs	r0, #4
 80076b6:	f000 fbf3 	bl	8007ea0 <xQueueCreateMutex>
 80076ba:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80076bc:	b12d      	cbz	r5, 80076ca <osMutexNew+0x4a>
        if (attr != NULL) {
 80076be:	b104      	cbz	r4, 80076c2 <osMutexNew+0x42>
          name = attr->name;
 80076c0:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80076c2:	4621      	mov	r1, r4
 80076c4:	4628      	mov	r0, r5
 80076c6:	f000 fe9d 	bl	8008404 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80076ca:	b1fd      	cbz	r5, 800770c <osMutexNew+0x8c>
 80076cc:	b1f6      	cbz	r6, 800770c <osMutexNew+0x8c>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80076ce:	f045 0501 	orr.w	r5, r5, #1
 80076d2:	e01b      	b.n	800770c <osMutexNew+0x8c>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80076d4:	68e3      	ldr	r3, [r4, #12]
 80076d6:	b17b      	cbz	r3, 80076f8 <osMutexNew+0x78>
      mem = -1;
 80076d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076dc:	e7e8      	b.n	80076b0 <osMutexNew+0x30>
          if (rmtx != 0U) {
 80076de:	b126      	cbz	r6, 80076ea <osMutexNew+0x6a>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80076e0:	2004      	movs	r0, #4
 80076e2:	f000 fbe8 	bl	8007eb6 <xQueueCreateMutexStatic>
 80076e6:	4605      	mov	r5, r0
 80076e8:	e7e8      	b.n	80076bc <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80076ea:	2001      	movs	r0, #1
 80076ec:	f000 fbe3 	bl	8007eb6 <xQueueCreateMutexStatic>
 80076f0:	4605      	mov	r5, r0
 80076f2:	e7e3      	b.n	80076bc <osMutexNew+0x3c>
        mem = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	e7db      	b.n	80076b0 <osMutexNew+0x30>
            mem = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	e7d9      	b.n	80076b0 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 80076fc:	2001      	movs	r0, #1
 80076fe:	f000 fbcf 	bl	8007ea0 <xQueueCreateMutex>
 8007702:	4605      	mov	r5, r0
 8007704:	e7da      	b.n	80076bc <osMutexNew+0x3c>
  hMutex = NULL;
 8007706:	2500      	movs	r5, #0
 8007708:	e7df      	b.n	80076ca <osMutexNew+0x4a>
 800770a:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800770c:	4628      	mov	r0, r5
 800770e:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8007710:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8007712:	e7fb      	b.n	800770c <osMutexNew+0x8c>

08007714 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007714:	b310      	cbz	r0, 800775c <osSemaphoreAcquire+0x48>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007716:	b530      	push	{r4, r5, lr}
 8007718:	b083      	sub	sp, #12
 800771a:	460c      	mov	r4, r1
 800771c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007720:	b1a3      	cbz	r3, 800774c <osSemaphoreAcquire+0x38>
    if (timeout != 0U) {
 8007722:	b9f1      	cbnz	r1, 8007762 <osSemaphoreAcquire+0x4e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8007724:	2100      	movs	r1, #0
 8007726:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007728:	aa01      	add	r2, sp, #4
 800772a:	f000 fe15 	bl	8008358 <xQueueReceiveFromISR>
 800772e:	2801      	cmp	r0, #1
 8007730:	d11a      	bne.n	8007768 <osSemaphoreAcquire+0x54>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8007732:	9801      	ldr	r0, [sp, #4]
 8007734:	b140      	cbz	r0, 8007748 <osSemaphoreAcquire+0x34>
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <osSemaphoreAcquire+0x64>)
 8007738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8007746:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8007748:	b003      	add	sp, #12
 800774a:	bd30      	pop	{r4, r5, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800774c:	f000 fd32 	bl	80081b4 <xQueueSemaphoreTake>
 8007750:	2801      	cmp	r0, #1
 8007752:	d00c      	beq.n	800776e <osSemaphoreAcquire+0x5a>
      if (timeout != 0U) {
 8007754:	b16c      	cbz	r4, 8007772 <osSemaphoreAcquire+0x5e>
        stat = osErrorTimeout;
 8007756:	f06f 0001 	mvn.w	r0, #1
 800775a:	e7f5      	b.n	8007748 <osSemaphoreAcquire+0x34>
    stat = osErrorParameter;
 800775c:	f06f 0003 	mvn.w	r0, #3
}
 8007760:	4770      	bx	lr
      stat = osErrorParameter;
 8007762:	f06f 0003 	mvn.w	r0, #3
 8007766:	e7ef      	b.n	8007748 <osSemaphoreAcquire+0x34>
        stat = osErrorResource;
 8007768:	f06f 0002 	mvn.w	r0, #2
 800776c:	e7ec      	b.n	8007748 <osSemaphoreAcquire+0x34>
  stat = osOK;
 800776e:	2000      	movs	r0, #0
 8007770:	e7ea      	b.n	8007748 <osSemaphoreAcquire+0x34>
        stat = osErrorResource;
 8007772:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8007776:	e7e7      	b.n	8007748 <osSemaphoreAcquire+0x34>
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800777c:	b308      	cbz	r0, 80077c2 <osSemaphoreRelease+0x46>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800777e:	b510      	push	{r4, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007786:	b193      	cbz	r3, 80077ae <osSemaphoreRelease+0x32>
    yield = pdFALSE;
 8007788:	2300      	movs	r3, #0
 800778a:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800778c:	a901      	add	r1, sp, #4
 800778e:	f000 fc09 	bl	8007fa4 <xQueueGiveFromISR>
 8007792:	2801      	cmp	r0, #1
 8007794:	d118      	bne.n	80077c8 <osSemaphoreRelease+0x4c>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8007796:	9801      	ldr	r0, [sp, #4]
 8007798:	b188      	cbz	r0, 80077be <osSemaphoreRelease+0x42>
 800779a:	4b0e      	ldr	r3, [pc, #56]	; (80077d4 <osSemaphoreRelease+0x58>)
 800779c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80077aa:	2000      	movs	r0, #0
 80077ac:	e007      	b.n	80077be <osSemaphoreRelease+0x42>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80077ae:	2300      	movs	r3, #0
 80077b0:	461a      	mov	r2, r3
 80077b2:	4619      	mov	r1, r3
 80077b4:	f000 faa8 	bl	8007d08 <xQueueGenericSend>
 80077b8:	2801      	cmp	r0, #1
 80077ba:	d108      	bne.n	80077ce <osSemaphoreRelease+0x52>
  stat = osOK;
 80077bc:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80077be:	b002      	add	sp, #8
 80077c0:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 80077c2:	f06f 0003 	mvn.w	r0, #3
}
 80077c6:	4770      	bx	lr
      stat = osErrorResource;
 80077c8:	f06f 0002 	mvn.w	r0, #2
 80077cc:	e7f7      	b.n	80077be <osSemaphoreRelease+0x42>
      stat = osErrorResource;
 80077ce:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80077d2:	e7f4      	b.n	80077be <osSemaphoreRelease+0x42>
 80077d4:	e000ed04 	.word	0xe000ed04

080077d8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d13a      	bne.n	800785a <osMessageQueueNew+0x82>
 80077e4:	4614      	mov	r4, r2
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d03b      	beq.n	8007862 <osMessageQueueNew+0x8a>
 80077ea:	2900      	cmp	r1, #0
 80077ec:	d03b      	beq.n	8007866 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 80077ee:	b36a      	cbz	r2, 800784c <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80077f0:	6893      	ldr	r3, [r2, #8]
 80077f2:	b14b      	cbz	r3, 8007808 <osMessageQueueNew+0x30>
 80077f4:	68d2      	ldr	r2, [r2, #12]
 80077f6:	2a4f      	cmp	r2, #79	; 0x4f
 80077f8:	d906      	bls.n	8007808 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80077fa:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80077fc:	b122      	cbz	r2, 8007808 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80077fe:	6966      	ldr	r6, [r4, #20]
 8007800:	fb01 f500 	mul.w	r5, r1, r0
 8007804:	42ae      	cmp	r6, r5
 8007806:	d21b      	bcs.n	8007840 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007808:	b173      	cbz	r3, 8007828 <osMessageQueueNew+0x50>
    mem = -1;
 800780a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800780e:	bb63      	cbnz	r3, 800786a <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007810:	2200      	movs	r2, #0
 8007812:	f000 fa54 	bl	8007cbe <xQueueGenericCreate>
 8007816:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007818:	b305      	cbz	r5, 800785c <osMessageQueueNew+0x84>
      if (attr != NULL) {
 800781a:	b104      	cbz	r4, 800781e <osMessageQueueNew+0x46>
        name = attr->name;
 800781c:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800781e:	4621      	mov	r1, r4
 8007820:	4628      	mov	r0, r5
 8007822:	f000 fdef 	bl	8008404 <vQueueAddToRegistry>
 8007826:	e019      	b.n	800785c <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007828:	68e3      	ldr	r3, [r4, #12]
 800782a:	b98b      	cbnz	r3, 8007850 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800782c:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800782e:	b113      	cbz	r3, 8007836 <osMessageQueueNew+0x5e>
    mem = -1;
 8007830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007834:	e7eb      	b.n	800780e <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007836:	6963      	ldr	r3, [r4, #20]
 8007838:	b16b      	cbz	r3, 8007856 <osMessageQueueNew+0x7e>
    mem = -1;
 800783a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800783e:	e7e6      	b.n	800780e <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007840:	2500      	movs	r5, #0
 8007842:	9500      	str	r5, [sp, #0]
 8007844:	f000 f9f1 	bl	8007c2a <xQueueGenericCreateStatic>
 8007848:	4605      	mov	r5, r0
 800784a:	e7e5      	b.n	8007818 <osMessageQueueNew+0x40>
      mem = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	e7de      	b.n	800780e <osMessageQueueNew+0x36>
    mem = -1;
 8007850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007854:	e7db      	b.n	800780e <osMessageQueueNew+0x36>
          mem = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	e7d9      	b.n	800780e <osMessageQueueNew+0x36>
  hQueue = NULL;
 800785a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800785c:	4628      	mov	r0, r5
 800785e:	b002      	add	sp, #8
 8007860:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8007862:	2500      	movs	r5, #0
 8007864:	e7fa      	b.n	800785c <osMessageQueueNew+0x84>
 8007866:	2500      	movs	r5, #0
 8007868:	e7f8      	b.n	800785c <osMessageQueueNew+0x84>
 800786a:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800786c:	e7f6      	b.n	800785c <osMessageQueueNew+0x84>
	...

08007870 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007870:	b510      	push	{r4, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	461c      	mov	r4, r3
 8007876:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800787a:	b1b3      	cbz	r3, 80078aa <osMessageQueuePut+0x3a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800787c:	b308      	cbz	r0, 80078c2 <osMessageQueuePut+0x52>
 800787e:	b319      	cbz	r1, 80078c8 <osMessageQueuePut+0x58>
 8007880:	bb2c      	cbnz	r4, 80078ce <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8007882:	2300      	movs	r3, #0
 8007884:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007886:	aa01      	add	r2, sp, #4
 8007888:	f000 fb24 	bl	8007ed4 <xQueueGenericSendFromISR>
 800788c:	2801      	cmp	r0, #1
 800788e:	d121      	bne.n	80078d4 <osMessageQueuePut+0x64>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8007890:	9801      	ldr	r0, [sp, #4]
 8007892:	b140      	cbz	r0, 80078a6 <osMessageQueuePut+0x36>
 8007894:	4b16      	ldr	r3, [pc, #88]	; (80078f0 <osMessageQueuePut+0x80>)
 8007896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80078a4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80078a6:	b002      	add	sp, #8
 80078a8:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80078aa:	b1b0      	cbz	r0, 80078da <osMessageQueuePut+0x6a>
 80078ac:	b1c1      	cbz	r1, 80078e0 <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80078ae:	2300      	movs	r3, #0
 80078b0:	4622      	mov	r2, r4
 80078b2:	f000 fa29 	bl	8007d08 <xQueueGenericSend>
 80078b6:	2801      	cmp	r0, #1
 80078b8:	d015      	beq.n	80078e6 <osMessageQueuePut+0x76>
        if (timeout != 0U) {
 80078ba:	b1b4      	cbz	r4, 80078ea <osMessageQueuePut+0x7a>
          stat = osErrorTimeout;
 80078bc:	f06f 0001 	mvn.w	r0, #1
 80078c0:	e7f1      	b.n	80078a6 <osMessageQueuePut+0x36>
      stat = osErrorParameter;
 80078c2:	f06f 0003 	mvn.w	r0, #3
 80078c6:	e7ee      	b.n	80078a6 <osMessageQueuePut+0x36>
 80078c8:	f06f 0003 	mvn.w	r0, #3
 80078cc:	e7eb      	b.n	80078a6 <osMessageQueuePut+0x36>
 80078ce:	f06f 0003 	mvn.w	r0, #3
 80078d2:	e7e8      	b.n	80078a6 <osMessageQueuePut+0x36>
        stat = osErrorResource;
 80078d4:	f06f 0002 	mvn.w	r0, #2
 80078d8:	e7e5      	b.n	80078a6 <osMessageQueuePut+0x36>
      stat = osErrorParameter;
 80078da:	f06f 0003 	mvn.w	r0, #3
 80078de:	e7e2      	b.n	80078a6 <osMessageQueuePut+0x36>
 80078e0:	f06f 0003 	mvn.w	r0, #3
 80078e4:	e7df      	b.n	80078a6 <osMessageQueuePut+0x36>
  stat = osOK;
 80078e6:	2000      	movs	r0, #0
 80078e8:	e7dd      	b.n	80078a6 <osMessageQueuePut+0x36>
          stat = osErrorResource;
 80078ea:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80078ee:	e7da      	b.n	80078a6 <osMessageQueuePut+0x36>
 80078f0:	e000ed04 	.word	0xe000ed04

080078f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80078f4:	b510      	push	{r4, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	461c      	mov	r4, r3
 80078fa:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80078fe:	b1b3      	cbz	r3, 800792e <osMessageQueueGet+0x3a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007900:	b300      	cbz	r0, 8007944 <osMessageQueueGet+0x50>
 8007902:	b311      	cbz	r1, 800794a <osMessageQueueGet+0x56>
 8007904:	bb24      	cbnz	r4, 8007950 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8007906:	2300      	movs	r3, #0
 8007908:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800790a:	aa01      	add	r2, sp, #4
 800790c:	f000 fd24 	bl	8008358 <xQueueReceiveFromISR>
 8007910:	2801      	cmp	r0, #1
 8007912:	d120      	bne.n	8007956 <osMessageQueueGet+0x62>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8007914:	9801      	ldr	r0, [sp, #4]
 8007916:	b140      	cbz	r0, 800792a <osMessageQueueGet+0x36>
 8007918:	4b16      	ldr	r3, [pc, #88]	; (8007974 <osMessageQueueGet+0x80>)
 800791a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8007928:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800792a:	b002      	add	sp, #8
 800792c:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800792e:	b1a8      	cbz	r0, 800795c <osMessageQueueGet+0x68>
 8007930:	b1b9      	cbz	r1, 8007962 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007932:	4622      	mov	r2, r4
 8007934:	f000 fb90 	bl	8008058 <xQueueReceive>
 8007938:	2801      	cmp	r0, #1
 800793a:	d015      	beq.n	8007968 <osMessageQueueGet+0x74>
        if (timeout != 0U) {
 800793c:	b1b4      	cbz	r4, 800796c <osMessageQueueGet+0x78>
          stat = osErrorTimeout;
 800793e:	f06f 0001 	mvn.w	r0, #1
 8007942:	e7f2      	b.n	800792a <osMessageQueueGet+0x36>
      stat = osErrorParameter;
 8007944:	f06f 0003 	mvn.w	r0, #3
 8007948:	e7ef      	b.n	800792a <osMessageQueueGet+0x36>
 800794a:	f06f 0003 	mvn.w	r0, #3
 800794e:	e7ec      	b.n	800792a <osMessageQueueGet+0x36>
 8007950:	f06f 0003 	mvn.w	r0, #3
 8007954:	e7e9      	b.n	800792a <osMessageQueueGet+0x36>
        stat = osErrorResource;
 8007956:	f06f 0002 	mvn.w	r0, #2
 800795a:	e7e6      	b.n	800792a <osMessageQueueGet+0x36>
      stat = osErrorParameter;
 800795c:	f06f 0003 	mvn.w	r0, #3
 8007960:	e7e3      	b.n	800792a <osMessageQueueGet+0x36>
 8007962:	f06f 0003 	mvn.w	r0, #3
 8007966:	e7e0      	b.n	800792a <osMessageQueueGet+0x36>
  stat = osOK;
 8007968:	2000      	movs	r0, #0
 800796a:	e7de      	b.n	800792a <osMessageQueueGet+0x36>
          stat = osErrorResource;
 800796c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8007970:	e7db      	b.n	800792a <osMessageQueueGet+0x36>
 8007972:	bf00      	nop
 8007974:	e000ed04 	.word	0xe000ed04

08007978 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007978:	4b03      	ldr	r3, [pc, #12]	; (8007988 <vApplicationGetIdleTaskMemory+0x10>)
 800797a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800797c:	4b03      	ldr	r3, [pc, #12]	; (800798c <vApplicationGetIdleTaskMemory+0x14>)
 800797e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007980:	2380      	movs	r3, #128	; 0x80
 8007982:	6013      	str	r3, [r2, #0]
}
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	20000494 	.word	0x20000494
 800798c:	20000294 	.word	0x20000294

08007990 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007990:	4b03      	ldr	r3, [pc, #12]	; (80079a0 <vApplicationGetTimerTaskMemory+0x10>)
 8007992:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007994:	4b03      	ldr	r3, [pc, #12]	; (80079a4 <vApplicationGetTimerTaskMemory+0x14>)
 8007996:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800799c:	6013      	str	r3, [r2, #0]
}
 800799e:	4770      	bx	lr
 80079a0:	200008f4 	.word	0x200008f4
 80079a4:	200004f4 	.word	0x200004f4

080079a8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079a8:	f100 0308 	add.w	r3, r0, #8
 80079ac:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079b2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079b4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079b6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079bc:	4770      	bx	lr

080079be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079c2:	4770      	bx	lr

080079c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80079c4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079c6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079cc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079ce:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079d0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80079d2:	6803      	ldr	r3, [r0, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	6003      	str	r3, [r0, #0]
}
 80079d8:	4770      	bx	lr

080079da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079da:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079dc:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079de:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80079e2:	d011      	beq.n	8007a08 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079e4:	f100 0308 	add.w	r3, r0, #8
 80079e8:	461c      	mov	r4, r3
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	42aa      	cmp	r2, r5
 80079f0:	d9fa      	bls.n	80079e8 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079f2:	6863      	ldr	r3, [r4, #4]
 80079f4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079f6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079f8:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80079fa:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079fc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80079fe:	6803      	ldr	r3, [r0, #0]
 8007a00:	3301      	adds	r3, #1
 8007a02:	6003      	str	r3, [r0, #0]
}
 8007a04:	bc30      	pop	{r4, r5}
 8007a06:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a08:	6904      	ldr	r4, [r0, #16]
 8007a0a:	e7f2      	b.n	80079f2 <vListInsert+0x18>

08007a0c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a0c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a0e:	6841      	ldr	r1, [r0, #4]
 8007a10:	6882      	ldr	r2, [r0, #8]
 8007a12:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a14:	6841      	ldr	r1, [r0, #4]
 8007a16:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	4282      	cmp	r2, r0
 8007a1c:	d006      	beq.n	8007a2c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a1e:	2200      	movs	r2, #0
 8007a20:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	3a01      	subs	r2, #1
 8007a26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a28:	6818      	ldr	r0, [r3, #0]
}
 8007a2a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a2c:	6882      	ldr	r2, [r0, #8]
 8007a2e:	605a      	str	r2, [r3, #4]
 8007a30:	e7f5      	b.n	8007a1e <uxListRemove+0x12>

08007a32 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007a32:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007a34:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007a36:	b118      	cbz	r0, 8007a40 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	6818      	ldr	r0, [r3, #0]
 8007a3c:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8007a40:	4770      	bx	lr

08007a42 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a42:	b510      	push	{r4, lr}
 8007a44:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a46:	f001 fd45 	bl	80094d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007a4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d004      	beq.n	8007a5c <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8007a52:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8007a54:	f001 fd60 	bl	8009518 <vPortExitCritical>

	return xReturn;
}
 8007a58:	4620      	mov	r0, r4
 8007a5a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007a5c:	2401      	movs	r4, #1
 8007a5e:	e7f9      	b.n	8007a54 <prvIsQueueFull+0x12>

08007a60 <prvIsQueueEmpty>:
{
 8007a60:	b510      	push	{r4, lr}
 8007a62:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007a64:	f001 fd36 	bl	80094d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a6a:	b923      	cbnz	r3, 8007a76 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8007a6c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8007a6e:	f001 fd53 	bl	8009518 <vPortExitCritical>
}
 8007a72:	4620      	mov	r0, r4
 8007a74:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8007a76:	2400      	movs	r4, #0
 8007a78:	e7f9      	b.n	8007a6e <prvIsQueueEmpty+0xe>

08007a7a <prvCopyDataToQueue>:
{
 8007a7a:	b570      	push	{r4, r5, r6, lr}
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a80:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a82:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007a84:	b95a      	cbnz	r2, 8007a9e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a86:	6803      	ldr	r3, [r0, #0]
 8007a88:	b11b      	cbz	r3, 8007a92 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8007a8a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a8c:	3601      	adds	r6, #1
 8007a8e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007a90:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a92:	6880      	ldr	r0, [r0, #8]
 8007a94:	f001 f9e2 	bl	8008e5c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60a3      	str	r3, [r4, #8]
 8007a9c:	e7f6      	b.n	8007a8c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8007a9e:	b96d      	cbnz	r5, 8007abc <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007aa0:	6840      	ldr	r0, [r0, #4]
 8007aa2:	f002 fa1d 	bl	8009ee0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007aa6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007aa8:	6863      	ldr	r3, [r4, #4]
 8007aaa:	4413      	add	r3, r2
 8007aac:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007aae:	68a2      	ldr	r2, [r4, #8]
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d319      	bcc.n	8007ae8 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8007ab8:	4628      	mov	r0, r5
 8007aba:	e7e7      	b.n	8007a8c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007abc:	68c0      	ldr	r0, [r0, #12]
 8007abe:	f002 fa0f 	bl	8009ee0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ac2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007ac4:	4251      	negs	r1, r2
 8007ac6:	68e3      	ldr	r3, [r4, #12]
 8007ac8:	1a9b      	subs	r3, r3, r2
 8007aca:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007acc:	6822      	ldr	r2, [r4, #0]
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d202      	bcs.n	8007ad8 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ad2:	68a3      	ldr	r3, [r4, #8]
 8007ad4:	440b      	add	r3, r1
 8007ad6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007ad8:	2d02      	cmp	r5, #2
 8007ada:	d001      	beq.n	8007ae0 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8007adc:	2000      	movs	r0, #0
 8007ade:	e7d5      	b.n	8007a8c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ae0:	b126      	cbz	r6, 8007aec <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8007ae2:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	e7d1      	b.n	8007a8c <prvCopyDataToQueue+0x12>
 8007ae8:	4628      	mov	r0, r5
 8007aea:	e7cf      	b.n	8007a8c <prvCopyDataToQueue+0x12>
 8007aec:	2000      	movs	r0, #0
 8007aee:	e7cd      	b.n	8007a8c <prvCopyDataToQueue+0x12>

08007af0 <prvCopyDataFromQueue>:
{
 8007af0:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007af2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007af4:	b16a      	cbz	r2, 8007b12 <prvCopyDataFromQueue+0x22>
{
 8007af6:	b510      	push	{r4, lr}
 8007af8:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007afa:	68d9      	ldr	r1, [r3, #12]
 8007afc:	4411      	add	r1, r2
 8007afe:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b00:	689c      	ldr	r4, [r3, #8]
 8007b02:	42a1      	cmp	r1, r4
 8007b04:	d301      	bcc.n	8007b0a <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b06:	6819      	ldr	r1, [r3, #0]
 8007b08:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b0a:	68d9      	ldr	r1, [r3, #12]
 8007b0c:	f002 f9e8 	bl	8009ee0 <memcpy>
}
 8007b10:	bd10      	pop	{r4, pc}
 8007b12:	4770      	bx	lr

08007b14 <prvUnlockQueue>:
{
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8007b18:	f001 fcdc 	bl	80094d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007b1c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8007b20:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b22:	e003      	b.n	8007b2c <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8007b24:	f001 f938 	bl	8008d98 <vTaskMissedYield>
			--cTxLock;
 8007b28:	3c01      	subs	r4, #1
 8007b2a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b2c:	2c00      	cmp	r4, #0
 8007b2e:	dd08      	ble.n	8007b42 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b32:	b133      	cbz	r3, 8007b42 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b34:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007b38:	f001 f89a 	bl	8008c70 <xTaskRemoveFromEventList>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d0f3      	beq.n	8007b28 <prvUnlockQueue+0x14>
 8007b40:	e7f0      	b.n	8007b24 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8007b42:	23ff      	movs	r3, #255	; 0xff
 8007b44:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007b48:	f001 fce6 	bl	8009518 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007b4c:	f001 fcc2 	bl	80094d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007b50:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8007b54:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b56:	e003      	b.n	8007b60 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8007b58:	f001 f91e 	bl	8008d98 <vTaskMissedYield>
				--cRxLock;
 8007b5c:	3c01      	subs	r4, #1
 8007b5e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b60:	2c00      	cmp	r4, #0
 8007b62:	dd08      	ble.n	8007b76 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b64:	692b      	ldr	r3, [r5, #16]
 8007b66:	b133      	cbz	r3, 8007b76 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b68:	f105 0010 	add.w	r0, r5, #16
 8007b6c:	f001 f880 	bl	8008c70 <xTaskRemoveFromEventList>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d0f3      	beq.n	8007b5c <prvUnlockQueue+0x48>
 8007b74:	e7f0      	b.n	8007b58 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8007b76:	23ff      	movs	r3, #255	; 0xff
 8007b78:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007b7c:	f001 fccc 	bl	8009518 <vPortExitCritical>
}
 8007b80:	bd38      	pop	{r3, r4, r5, pc}
	...

08007b84 <xQueueGenericReset>:
{
 8007b84:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8007b86:	b1e0      	cbz	r0, 8007bc2 <xQueueGenericReset+0x3e>
 8007b88:	460d      	mov	r5, r1
 8007b8a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007b8c:	f001 fca2 	bl	80094d4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b90:	6821      	ldr	r1, [r4, #0]
 8007b92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b96:	fb03 1002 	mla	r0, r3, r2, r1
 8007b9a:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ba0:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ba2:	3a01      	subs	r2, #1
 8007ba4:	fb02 1303 	mla	r3, r2, r3, r1
 8007ba8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007baa:	23ff      	movs	r3, #255	; 0xff
 8007bac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007bb4:	b9ed      	cbnz	r5, 8007bf2 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	b963      	cbnz	r3, 8007bd4 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8007bba:	f001 fcad 	bl	8009518 <vPortExitCritical>
}
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007bd2:	e7fe      	b.n	8007bd2 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bd4:	f104 0010 	add.w	r0, r4, #16
 8007bd8:	f001 f84a 	bl	8008c70 <xTaskRemoveFromEventList>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d0ec      	beq.n	8007bba <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8007be0:	4b08      	ldr	r3, [pc, #32]	; (8007c04 <xQueueGenericReset+0x80>)
 8007be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	e7e3      	b.n	8007bba <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bf2:	f104 0010 	add.w	r0, r4, #16
 8007bf6:	f7ff fed7 	bl	80079a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bfa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007bfe:	f7ff fed3 	bl	80079a8 <vListInitialise>
 8007c02:	e7da      	b.n	8007bba <xQueueGenericReset+0x36>
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <prvInitialiseNewQueue>:
{
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	461d      	mov	r5, r3
 8007c0c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c0e:	460b      	mov	r3, r1
 8007c10:	b949      	cbnz	r1, 8007c26 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c12:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8007c14:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c16:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c18:	2101      	movs	r1, #1
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f7ff ffb2 	bl	8007b84 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007c20:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8007c24:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c26:	6022      	str	r2, [r4, #0]
 8007c28:	e7f4      	b.n	8007c14 <prvInitialiseNewQueue+0xc>

08007c2a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c2a:	b940      	cbnz	r0, 8007c3e <xQueueGenericCreateStatic+0x14>
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	e7fe      	b.n	8007c3c <xQueueGenericCreateStatic+0x12>
	{
 8007c3e:	b530      	push	{r4, r5, lr}
 8007c40:	b085      	sub	sp, #20
 8007c42:	461c      	mov	r4, r3
 8007c44:	4605      	mov	r5, r0
		configASSERT( pxStaticQueue != NULL );
 8007c46:	b153      	cbz	r3, 8007c5e <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c48:	b192      	cbz	r2, 8007c70 <xQueueGenericCreateStatic+0x46>
 8007c4a:	b989      	cbnz	r1, 8007c70 <xQueueGenericCreateStatic+0x46>
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	e7fe      	b.n	8007c5c <xQueueGenericCreateStatic+0x32>
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8007c6e:	e7fe      	b.n	8007c6e <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c70:	b16a      	cbz	r2, 8007c8e <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c72:	2350      	movs	r3, #80	; 0x50
 8007c74:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c76:	9b03      	ldr	r3, [sp, #12]
 8007c78:	2b50      	cmp	r3, #80	; 0x50
 8007c7a:	d013      	beq.n	8007ca4 <xQueueGenericCreateStatic+0x7a>
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	e7fe      	b.n	8007c8c <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	d0ef      	beq.n	8007c72 <xQueueGenericCreateStatic+0x48>
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	e7fe      	b.n	8007ca2 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ca4:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cac:	9400      	str	r4, [sp, #0]
 8007cae:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f7ff ffa8 	bl	8007c08 <prvInitialiseNewQueue>
	}
 8007cb8:	4620      	mov	r0, r4
 8007cba:	b005      	add	sp, #20
 8007cbc:	bd30      	pop	{r4, r5, pc}

08007cbe <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cbe:	b940      	cbnz	r0, 8007cd2 <xQueueGenericCreate+0x14>
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	e7fe      	b.n	8007cd0 <xQueueGenericCreate+0x12>
	{
 8007cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	460d      	mov	r5, r1
 8007cd8:	4616      	mov	r6, r2
 8007cda:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cdc:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ce0:	3050      	adds	r0, #80	; 0x50
 8007ce2:	f001 fdad 	bl	8009840 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	b150      	cbz	r0, 8007d00 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007cea:	2300      	movs	r3, #0
 8007cec:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cf0:	9000      	str	r0, [sp, #0]
 8007cf2:	4633      	mov	r3, r6
 8007cf4:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	f7ff ff84 	bl	8007c08 <prvInitialiseNewQueue>
	}
 8007d00:	4620      	mov	r0, r4
 8007d02:	b003      	add	sp, #12
 8007d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007d08 <xQueueGenericSend>:
{
 8007d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007d0e:	b188      	cbz	r0, 8007d34 <xQueueGenericSend+0x2c>
 8007d10:	460e      	mov	r6, r1
 8007d12:	461d      	mov	r5, r3
 8007d14:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d16:	b1b1      	cbz	r1, 8007d46 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d18:	2d02      	cmp	r5, #2
 8007d1a:	d120      	bne.n	8007d5e <xQueueGenericSend+0x56>
 8007d1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d01d      	beq.n	8007d5e <xQueueGenericSend+0x56>
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	e7fe      	b.n	8007d32 <xQueueGenericSend+0x2a>
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007d44:	e7fe      	b.n	8007d44 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d46:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d0e5      	beq.n	8007d18 <xQueueGenericSend+0x10>
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	e7fe      	b.n	8007d5c <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d5e:	f001 f821 	bl	8008da4 <xTaskGetSchedulerState>
 8007d62:	4607      	mov	r7, r0
 8007d64:	b958      	cbnz	r0, 8007d7e <xQueueGenericSend+0x76>
 8007d66:	9b01      	ldr	r3, [sp, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d044      	beq.n	8007df6 <xQueueGenericSend+0xee>
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	e7fe      	b.n	8007d7c <xQueueGenericSend+0x74>
 8007d7e:	2700      	movs	r7, #0
 8007d80:	e039      	b.n	8007df6 <xQueueGenericSend+0xee>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d82:	462a      	mov	r2, r5
 8007d84:	4631      	mov	r1, r6
 8007d86:	4620      	mov	r0, r4
 8007d88:	f7ff fe77 	bl	8007a7a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d8e:	b96a      	cbnz	r2, 8007dac <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 8007d90:	b138      	cbz	r0, 8007da2 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8007d92:	4b3c      	ldr	r3, [pc, #240]	; (8007e84 <xQueueGenericSend+0x17c>)
 8007d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007da2:	f001 fbb9 	bl	8009518 <vPortExitCritical>
				return pdPASS;
 8007da6:	2001      	movs	r0, #1
}
 8007da8:	b005      	add	sp, #20
 8007daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007db0:	f000 ff5e 	bl	8008c70 <xTaskRemoveFromEventList>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d0f4      	beq.n	8007da2 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 8007db8:	4b32      	ldr	r3, [pc, #200]	; (8007e84 <xQueueGenericSend+0x17c>)
 8007dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	e7eb      	b.n	8007da2 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 8007dca:	f001 fba5 	bl	8009518 <vPortExitCritical>
					return errQUEUE_FULL;
 8007dce:	2000      	movs	r0, #0
 8007dd0:	e7ea      	b.n	8007da8 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dd2:	a802      	add	r0, sp, #8
 8007dd4:	f000 ff92 	bl	8008cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dd8:	2701      	movs	r7, #1
 8007dda:	e019      	b.n	8007e10 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007de2:	e021      	b.n	8007e28 <xQueueGenericSend+0x120>
 8007de4:	2300      	movs	r3, #0
 8007de6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dea:	e023      	b.n	8007e34 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7ff fe91 	bl	8007b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007df2:	f000 fe1b 	bl	8008a2c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8007df6:	f001 fb6d 	bl	80094d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dfa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007dfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d3bf      	bcc.n	8007d82 <xQueueGenericSend+0x7a>
 8007e02:	2d02      	cmp	r5, #2
 8007e04:	d0bd      	beq.n	8007d82 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0de      	beq.n	8007dca <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 8007e0c:	2f00      	cmp	r7, #0
 8007e0e:	d0e0      	beq.n	8007dd2 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 8007e10:	f001 fb82 	bl	8009518 <vPortExitCritical>
		vTaskSuspendAll();
 8007e14:	f000 fd6e 	bl	80088f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e18:	f001 fb5c 	bl	80094d4 <vPortEnterCritical>
 8007e1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007e20:	b25b      	sxtb	r3, r3
 8007e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e26:	d0d9      	beq.n	8007ddc <xQueueGenericSend+0xd4>
 8007e28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007e2c:	b25b      	sxtb	r3, r3
 8007e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e32:	d0d7      	beq.n	8007de4 <xQueueGenericSend+0xdc>
 8007e34:	f001 fb70 	bl	8009518 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e38:	a901      	add	r1, sp, #4
 8007e3a:	a802      	add	r0, sp, #8
 8007e3c:	f000 ff6a 	bl	8008d14 <xTaskCheckForTimeOut>
 8007e40:	b9c8      	cbnz	r0, 8007e76 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e42:	4620      	mov	r0, r4
 8007e44:	f7ff fdfd 	bl	8007a42 <prvIsQueueFull>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d0cf      	beq.n	8007dec <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e4c:	9901      	ldr	r1, [sp, #4]
 8007e4e:	f104 0010 	add.w	r0, r4, #16
 8007e52:	f000 fed9 	bl	8008c08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e56:	4620      	mov	r0, r4
 8007e58:	f7ff fe5c 	bl	8007b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e5c:	f000 fde6 	bl	8008a2c <xTaskResumeAll>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d1c8      	bne.n	8007df6 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8007e64:	4b07      	ldr	r3, [pc, #28]	; (8007e84 <xQueueGenericSend+0x17c>)
 8007e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	e7bf      	b.n	8007df6 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 8007e76:	4620      	mov	r0, r4
 8007e78:	f7ff fe4c 	bl	8007b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e7c:	f000 fdd6 	bl	8008a2c <xTaskResumeAll>
			return errQUEUE_FULL;
 8007e80:	2000      	movs	r0, #0
 8007e82:	e791      	b.n	8007da8 <xQueueGenericSend+0xa0>
 8007e84:	e000ed04 	.word	0xe000ed04

08007e88 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8007e88:	b148      	cbz	r0, 8007e9e <prvInitialiseMutex+0x16>
	{
 8007e8a:	b510      	push	{r4, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007e90:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007e92:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e94:	460b      	mov	r3, r1
 8007e96:	460a      	mov	r2, r1
 8007e98:	f7ff ff36 	bl	8007d08 <xQueueGenericSend>
	}
 8007e9c:	bd10      	pop	{r4, pc}
 8007e9e:	4770      	bx	lr

08007ea0 <xQueueCreateMutex>:
	{
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	2001      	movs	r0, #1
 8007ea8:	f7ff ff09 	bl	8007cbe <xQueueGenericCreate>
 8007eac:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007eae:	f7ff ffeb 	bl	8007e88 <prvInitialiseMutex>
	}
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	bd10      	pop	{r4, pc}

08007eb6 <xQueueCreateMutexStatic>:
	{
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007ebc:	9000      	str	r0, [sp, #0]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	2001      	movs	r0, #1
 8007ec4:	f7ff feb1 	bl	8007c2a <xQueueGenericCreateStatic>
 8007ec8:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007eca:	f7ff ffdd 	bl	8007e88 <prvInitialiseMutex>
	}
 8007ece:	4620      	mov	r0, r4
 8007ed0:	b002      	add	sp, #8
 8007ed2:	bd10      	pop	{r4, pc}

08007ed4 <xQueueGenericSendFromISR>:
{
 8007ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8007ed8:	b190      	cbz	r0, 8007f00 <xQueueGenericSendFromISR+0x2c>
 8007eda:	4689      	mov	r9, r1
 8007edc:	4690      	mov	r8, r2
 8007ede:	461f      	mov	r7, r3
 8007ee0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ee2:	b1b1      	cbz	r1, 8007f12 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ee4:	2f02      	cmp	r7, #2
 8007ee6:	d120      	bne.n	8007f2a <xQueueGenericSendFromISR+0x56>
 8007ee8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d01d      	beq.n	8007f2a <xQueueGenericSendFromISR+0x56>
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	e7fe      	b.n	8007efe <xQueueGenericSendFromISR+0x2a>
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007f10:	e7fe      	b.n	8007f10 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0e5      	beq.n	8007ee4 <xQueueGenericSendFromISR+0x10>
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	e7fe      	b.n	8007f28 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f2a:	f001 fbfd 	bl	8009728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f2e:	f3ef 8611 	mrs	r6, BASEPRI
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007f44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d306      	bcc.n	8007f58 <xQueueGenericSendFromISR+0x84>
 8007f4a:	2f02      	cmp	r7, #2
 8007f4c:	d004      	beq.n	8007f58 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8007f4e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f50:	f386 8811 	msr	BASEPRI, r6
}
 8007f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f58:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8007f5c:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f60:	463a      	mov	r2, r7
 8007f62:	4649      	mov	r1, r9
 8007f64:	4620      	mov	r0, r4
 8007f66:	f7ff fd88 	bl	8007a7a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007f6a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007f6e:	d005      	beq.n	8007f7c <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f70:	1c6b      	adds	r3, r5, #1
 8007f72:	b25b      	sxtb	r3, r3
 8007f74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8007f78:	2001      	movs	r0, #1
 8007f7a:	e7e9      	b.n	8007f50 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f7e:	b90b      	cbnz	r3, 8007f84 <xQueueGenericSendFromISR+0xb0>
			xReturn = pdPASS;
 8007f80:	2001      	movs	r0, #1
 8007f82:	e7e5      	b.n	8007f50 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f88:	f000 fe72 	bl	8008c70 <xTaskRemoveFromEventList>
 8007f8c:	b130      	cbz	r0, 8007f9c <xQueueGenericSendFromISR+0xc8>
							if( pxHigherPriorityTaskWoken != NULL )
 8007f8e:	f1b8 0f00 	cmp.w	r8, #0
 8007f92:	d005      	beq.n	8007fa0 <xQueueGenericSendFromISR+0xcc>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f94:	2001      	movs	r0, #1
 8007f96:	f8c8 0000 	str.w	r0, [r8]
 8007f9a:	e7d9      	b.n	8007f50 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8007f9c:	2001      	movs	r0, #1
 8007f9e:	e7d7      	b.n	8007f50 <xQueueGenericSendFromISR+0x7c>
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	e7d5      	b.n	8007f50 <xQueueGenericSendFromISR+0x7c>

08007fa4 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8007fa4:	b168      	cbz	r0, 8007fc2 <xQueueGiveFromISR+0x1e>
{
 8007fa6:	b570      	push	{r4, r5, r6, lr}
 8007fa8:	460e      	mov	r6, r1
 8007faa:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8007fac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007fae:	b18b      	cbz	r3, 8007fd4 <xQueueGiveFromISR+0x30>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	e7fe      	b.n	8007fc0 <xQueueGiveFromISR+0x1c>
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007fd2:	e7fe      	b.n	8007fd2 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007fd4:	6803      	ldr	r3, [r0, #0]
 8007fd6:	b1eb      	cbz	r3, 8008014 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fd8:	f001 fba6 	bl	8009728 <vPortValidateInterruptPriority>
	__asm volatile
 8007fdc:	f3ef 8511 	mrs	r5, BASEPRI
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ff0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007ff2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d926      	bls.n	8008046 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ff8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007ffc:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ffe:	3201      	adds	r2, #1
 8008000:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8008002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008006:	d011      	beq.n	800802c <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008008:	3301      	adds	r3, #1
 800800a:	b25b      	sxtb	r3, r3
 800800c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8008010:	2001      	movs	r0, #1
 8008012:	e019      	b.n	8008048 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008014:	6883      	ldr	r3, [r0, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0de      	beq.n	8007fd8 <xQueueGiveFromISR+0x34>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	e7fe      	b.n	800802a <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800802c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800802e:	b90b      	cbnz	r3, 8008034 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8008030:	2001      	movs	r0, #1
 8008032:	e009      	b.n	8008048 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008034:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008038:	f000 fe1a 	bl	8008c70 <xTaskRemoveFromEventList>
 800803c:	b138      	cbz	r0, 800804e <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800803e:	b146      	cbz	r6, 8008052 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008040:	2001      	movs	r0, #1
 8008042:	6030      	str	r0, [r6, #0]
 8008044:	e000      	b.n	8008048 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 8008046:	2000      	movs	r0, #0
	__asm volatile
 8008048:	f385 8811 	msr	BASEPRI, r5
}
 800804c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800804e:	2001      	movs	r0, #1
 8008050:	e7fa      	b.n	8008048 <xQueueGiveFromISR+0xa4>
 8008052:	2001      	movs	r0, #1
 8008054:	e7f8      	b.n	8008048 <xQueueGiveFromISR+0xa4>
	...

08008058 <xQueueReceive>:
{
 8008058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800805a:	b085      	sub	sp, #20
 800805c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800805e:	b190      	cbz	r0, 8008086 <xQueueReceive+0x2e>
 8008060:	460e      	mov	r6, r1
 8008062:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008064:	b1c1      	cbz	r1, 8008098 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008066:	f000 fe9d 	bl	8008da4 <xTaskGetSchedulerState>
 800806a:	4607      	mov	r7, r0
 800806c:	bb00      	cbnz	r0, 80080b0 <xQueueReceive+0x58>
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d05c      	beq.n	800812e <xQueueReceive+0xd6>
	__asm volatile
 8008074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	e7fe      	b.n	8008084 <xQueueReceive+0x2c>
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8008096:	e7fe      	b.n	8008096 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008098:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800809a:	2b00      	cmp	r3, #0
 800809c:	d0e3      	beq.n	8008066 <xQueueReceive+0xe>
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	e7fe      	b.n	80080ae <xQueueReceive+0x56>
 80080b0:	2700      	movs	r7, #0
 80080b2:	e03c      	b.n	800812e <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080b4:	4631      	mov	r1, r6
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7ff fd1a 	bl	8007af0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080bc:	3d01      	subs	r5, #1
 80080be:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	b923      	cbnz	r3, 80080ce <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80080c4:	f001 fa28 	bl	8009518 <vPortExitCritical>
				return pdPASS;
 80080c8:	2001      	movs	r0, #1
}
 80080ca:	b005      	add	sp, #20
 80080cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080ce:	f104 0010 	add.w	r0, r4, #16
 80080d2:	f000 fdcd 	bl	8008c70 <xTaskRemoveFromEventList>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d0f4      	beq.n	80080c4 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80080da:	4b35      	ldr	r3, [pc, #212]	; (80081b0 <xQueueReceive+0x158>)
 80080dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e0:	601a      	str	r2, [r3, #0]
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	e7eb      	b.n	80080c4 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80080ec:	f001 fa14 	bl	8009518 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80080f0:	2000      	movs	r0, #0
 80080f2:	e7ea      	b.n	80080ca <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080f4:	a802      	add	r0, sp, #8
 80080f6:	f000 fe01 	bl	8008cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080fa:	2701      	movs	r7, #1
 80080fc:	e021      	b.n	8008142 <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
 80080fe:	2300      	movs	r3, #0
 8008100:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008104:	e029      	b.n	800815a <xQueueReceive+0x102>
 8008106:	2300      	movs	r3, #0
 8008108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800810c:	e02b      	b.n	8008166 <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
 800810e:	4620      	mov	r0, r4
 8008110:	f7ff fd00 	bl	8007b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008114:	f000 fc8a 	bl	8008a2c <xTaskResumeAll>
 8008118:	e009      	b.n	800812e <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800811a:	4620      	mov	r0, r4
 800811c:	f7ff fcfa 	bl	8007b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008120:	f000 fc84 	bl	8008a2c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008124:	4620      	mov	r0, r4
 8008126:	f7ff fc9b 	bl	8007a60 <prvIsQueueEmpty>
 800812a:	2800      	cmp	r0, #0
 800812c:	d13d      	bne.n	80081aa <xQueueReceive+0x152>
		taskENTER_CRITICAL();
 800812e:	f001 f9d1 	bl	80094d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008132:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008134:	2d00      	cmp	r5, #0
 8008136:	d1bd      	bne.n	80080b4 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008138:	9b01      	ldr	r3, [sp, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0d6      	beq.n	80080ec <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
 800813e:	2f00      	cmp	r7, #0
 8008140:	d0d8      	beq.n	80080f4 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
 8008142:	f001 f9e9 	bl	8009518 <vPortExitCritical>
		vTaskSuspendAll();
 8008146:	f000 fbd5 	bl	80088f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800814a:	f001 f9c3 	bl	80094d4 <vPortEnterCritical>
 800814e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008152:	b25b      	sxtb	r3, r3
 8008154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008158:	d0d1      	beq.n	80080fe <xQueueReceive+0xa6>
 800815a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800815e:	b25b      	sxtb	r3, r3
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008164:	d0cf      	beq.n	8008106 <xQueueReceive+0xae>
 8008166:	f001 f9d7 	bl	8009518 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800816a:	a901      	add	r1, sp, #4
 800816c:	a802      	add	r0, sp, #8
 800816e:	f000 fdd1 	bl	8008d14 <xTaskCheckForTimeOut>
 8008172:	2800      	cmp	r0, #0
 8008174:	d1d1      	bne.n	800811a <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008176:	4620      	mov	r0, r4
 8008178:	f7ff fc72 	bl	8007a60 <prvIsQueueEmpty>
 800817c:	2800      	cmp	r0, #0
 800817e:	d0c6      	beq.n	800810e <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008180:	9901      	ldr	r1, [sp, #4]
 8008182:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008186:	f000 fd3f 	bl	8008c08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800818a:	4620      	mov	r0, r4
 800818c:	f7ff fcc2 	bl	8007b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008190:	f000 fc4c 	bl	8008a2c <xTaskResumeAll>
 8008194:	2800      	cmp	r0, #0
 8008196:	d1ca      	bne.n	800812e <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8008198:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <xQueueReceive+0x158>)
 800819a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	e7c1      	b.n	800812e <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
 80081aa:	2000      	movs	r0, #0
 80081ac:	e78d      	b.n	80080ca <xQueueReceive+0x72>
 80081ae:	bf00      	nop
 80081b0:	e000ed04 	.word	0xe000ed04

080081b4 <xQueueSemaphoreTake>:
{
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80081ba:	b158      	cbz	r0, 80081d4 <xQueueSemaphoreTake+0x20>
 80081bc:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80081be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80081c0:	b18b      	cbz	r3, 80081e6 <xQueueSemaphoreTake+0x32>
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	e7fe      	b.n	80081d2 <xQueueSemaphoreTake+0x1e>
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80081e4:	e7fe      	b.n	80081e4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081e6:	f000 fddd 	bl	8008da4 <xTaskGetSchedulerState>
 80081ea:	4606      	mov	r6, r0
 80081ec:	b950      	cbnz	r0, 8008204 <xQueueSemaphoreTake+0x50>
 80081ee:	9b01      	ldr	r3, [sp, #4]
 80081f0:	b15b      	cbz	r3, 800820a <xQueueSemaphoreTake+0x56>
 80081f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	e7fe      	b.n	8008202 <xQueueSemaphoreTake+0x4e>
 8008204:	2500      	movs	r5, #0
 8008206:	462e      	mov	r6, r5
 8008208:	e053      	b.n	80082b2 <xQueueSemaphoreTake+0xfe>
 800820a:	4605      	mov	r5, r0
 800820c:	e051      	b.n	80082b2 <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800820e:	3b01      	subs	r3, #1
 8008210:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	b13b      	cbz	r3, 8008226 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008216:	6923      	ldr	r3, [r4, #16]
 8008218:	b94b      	cbnz	r3, 800822e <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800821a:	f001 f97d 	bl	8009518 <vPortExitCritical>
				return pdPASS;
 800821e:	2501      	movs	r5, #1
}
 8008220:	4628      	mov	r0, r5
 8008222:	b004      	add	sp, #16
 8008224:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008226:	f000 feb3 	bl	8008f90 <pvTaskIncrementMutexHeldCount>
 800822a:	60a0      	str	r0, [r4, #8]
 800822c:	e7f3      	b.n	8008216 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800822e:	f104 0010 	add.w	r0, r4, #16
 8008232:	f000 fd1d 	bl	8008c70 <xTaskRemoveFromEventList>
 8008236:	2800      	cmp	r0, #0
 8008238:	d0ef      	beq.n	800821a <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800823a:	4b46      	ldr	r3, [pc, #280]	; (8008354 <xQueueSemaphoreTake+0x1a0>)
 800823c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	e7e6      	b.n	800821a <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800824c:	b145      	cbz	r5, 8008260 <xQueueSemaphoreTake+0xac>
 800824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	e7fe      	b.n	800825e <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
 8008260:	f001 f95a 	bl	8009518 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008264:	e7dc      	b.n	8008220 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008266:	a802      	add	r0, sp, #8
 8008268:	f000 fd48 	bl	8008cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800826c:	2601      	movs	r6, #1
 800826e:	e02a      	b.n	80082c6 <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
 8008270:	2300      	movs	r3, #0
 8008272:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008276:	e032      	b.n	80082de <xQueueSemaphoreTake+0x12a>
 8008278:	2300      	movs	r3, #0
 800827a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800827e:	e034      	b.n	80082ea <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
 8008280:	f001 f928 	bl	80094d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008284:	68a0      	ldr	r0, [r4, #8]
 8008286:	f000 fd9d 	bl	8008dc4 <xTaskPriorityInherit>
 800828a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800828c:	f001 f944 	bl	8009518 <vPortExitCritical>
 8008290:	e03b      	b.n	800830a <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
 8008292:	4620      	mov	r0, r4
 8008294:	f7ff fc3e 	bl	8007b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008298:	f000 fbc8 	bl	8008a2c <xTaskResumeAll>
 800829c:	e009      	b.n	80082b2 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 800829e:	4620      	mov	r0, r4
 80082a0:	f7ff fc38 	bl	8007b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082a4:	f000 fbc2 	bl	8008a2c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082a8:	4620      	mov	r0, r4
 80082aa:	f7ff fbd9 	bl	8007a60 <prvIsQueueEmpty>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d140      	bne.n	8008334 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
 80082b2:	f001 f90f 	bl	80094d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80082b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1a8      	bne.n	800820e <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80082bc:	9b01      	ldr	r3, [sp, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0c4      	beq.n	800824c <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80082c2:	2e00      	cmp	r6, #0
 80082c4:	d0cf      	beq.n	8008266 <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
 80082c6:	f001 f927 	bl	8009518 <vPortExitCritical>
		vTaskSuspendAll();
 80082ca:	f000 fb13 	bl	80088f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082ce:	f001 f901 	bl	80094d4 <vPortEnterCritical>
 80082d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80082d6:	b25b      	sxtb	r3, r3
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082dc:	d0c8      	beq.n	8008270 <xQueueSemaphoreTake+0xbc>
 80082de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80082e2:	b25b      	sxtb	r3, r3
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082e8:	d0c6      	beq.n	8008278 <xQueueSemaphoreTake+0xc4>
 80082ea:	f001 f915 	bl	8009518 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082ee:	a901      	add	r1, sp, #4
 80082f0:	a802      	add	r0, sp, #8
 80082f2:	f000 fd0f 	bl	8008d14 <xTaskCheckForTimeOut>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d1d1      	bne.n	800829e <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082fa:	4620      	mov	r0, r4
 80082fc:	f7ff fbb0 	bl	8007a60 <prvIsQueueEmpty>
 8008300:	2800      	cmp	r0, #0
 8008302:	d0c6      	beq.n	8008292 <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0ba      	beq.n	8008280 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800830a:	9901      	ldr	r1, [sp, #4]
 800830c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008310:	f000 fc7a 	bl	8008c08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008314:	4620      	mov	r0, r4
 8008316:	f7ff fbfd 	bl	8007b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800831a:	f000 fb87 	bl	8008a2c <xTaskResumeAll>
 800831e:	2800      	cmp	r0, #0
 8008320:	d1c7      	bne.n	80082b2 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 8008322:	4b0c      	ldr	r3, [pc, #48]	; (8008354 <xQueueSemaphoreTake+0x1a0>)
 8008324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	e7be      	b.n	80082b2 <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 8008334:	b90d      	cbnz	r5, 800833a <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
 8008336:	2500      	movs	r5, #0
 8008338:	e772      	b.n	8008220 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800833a:	f001 f8cb 	bl	80094d4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800833e:	4620      	mov	r0, r4
 8008340:	f7ff fb77 	bl	8007a32 <prvGetDisinheritPriorityAfterTimeout>
 8008344:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008346:	68a0      	ldr	r0, [r4, #8]
 8008348:	f000 fdd0 	bl	8008eec <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800834c:	f001 f8e4 	bl	8009518 <vPortExitCritical>
 8008350:	e7f1      	b.n	8008336 <xQueueSemaphoreTake+0x182>
 8008352:	bf00      	nop
 8008354:	e000ed04 	.word	0xe000ed04

08008358 <xQueueReceiveFromISR>:
{
 8008358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800835c:	b1c8      	cbz	r0, 8008392 <xQueueReceiveFromISR+0x3a>
 800835e:	4689      	mov	r9, r1
 8008360:	4617      	mov	r7, r2
 8008362:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008364:	b1f1      	cbz	r1, 80083a4 <xQueueReceiveFromISR+0x4c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008366:	f001 f9df 	bl	8009728 <vPortValidateInterruptPriority>
	__asm volatile
 800836a:	f3ef 8611 	mrs	r6, BASEPRI
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800837e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008382:	f1b8 0f00 	cmp.w	r8, #0
 8008386:	d119      	bne.n	80083bc <xQueueReceiveFromISR+0x64>
			xReturn = pdFAIL;
 8008388:	2000      	movs	r0, #0
	__asm volatile
 800838a:	f386 8811 	msr	BASEPRI, r6
}
 800838e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80083a2:	e7fe      	b.n	80083a2 <xQueueReceiveFromISR+0x4a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0dd      	beq.n	8008366 <xQueueReceiveFromISR+0xe>
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	e7fe      	b.n	80083ba <xQueueReceiveFromISR+0x62>
			const int8_t cRxLock = pxQueue->cRxLock;
 80083bc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80083c0:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083c2:	4649      	mov	r1, r9
 80083c4:	4620      	mov	r0, r4
 80083c6:	f7ff fb93 	bl	8007af0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083ca:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80083ce:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80083d0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80083d4:	d005      	beq.n	80083e2 <xQueueReceiveFromISR+0x8a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80083d6:	1c6b      	adds	r3, r5, #1
 80083d8:	b25b      	sxtb	r3, r3
 80083da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80083de:	2001      	movs	r0, #1
 80083e0:	e7d3      	b.n	800838a <xQueueReceiveFromISR+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083e2:	6923      	ldr	r3, [r4, #16]
 80083e4:	b90b      	cbnz	r3, 80083ea <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 80083e6:	2001      	movs	r0, #1
 80083e8:	e7cf      	b.n	800838a <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083ea:	f104 0010 	add.w	r0, r4, #16
 80083ee:	f000 fc3f 	bl	8008c70 <xTaskRemoveFromEventList>
 80083f2:	b118      	cbz	r0, 80083fc <xQueueReceiveFromISR+0xa4>
						if( pxHigherPriorityTaskWoken != NULL )
 80083f4:	b127      	cbz	r7, 8008400 <xQueueReceiveFromISR+0xa8>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80083f6:	2001      	movs	r0, #1
 80083f8:	6038      	str	r0, [r7, #0]
 80083fa:	e7c6      	b.n	800838a <xQueueReceiveFromISR+0x32>
			xReturn = pdPASS;
 80083fc:	2001      	movs	r0, #1
 80083fe:	e7c4      	b.n	800838a <xQueueReceiveFromISR+0x32>
 8008400:	2001      	movs	r0, #1
 8008402:	e7c2      	b.n	800838a <xQueueReceiveFromISR+0x32>

08008404 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008404:	2300      	movs	r3, #0
 8008406:	e000      	b.n	800840a <vQueueAddToRegistry+0x6>
 8008408:	3301      	adds	r3, #1
 800840a:	2b07      	cmp	r3, #7
 800840c:	d80b      	bhi.n	8008426 <vQueueAddToRegistry+0x22>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800840e:	4a06      	ldr	r2, [pc, #24]	; (8008428 <vQueueAddToRegistry+0x24>)
 8008410:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008414:	2a00      	cmp	r2, #0
 8008416:	d1f7      	bne.n	8008408 <vQueueAddToRegistry+0x4>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008418:	4a03      	ldr	r2, [pc, #12]	; (8008428 <vQueueAddToRegistry+0x24>)
 800841a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800841e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008422:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008424:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008426:	4770      	bx	lr
 8008428:	2000216c 	.word	0x2000216c

0800842c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	4604      	mov	r4, r0
 8008430:	460d      	mov	r5, r1
 8008432:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008434:	f001 f84e 	bl	80094d4 <vPortEnterCritical>
 8008438:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800843c:	b25b      	sxtb	r3, r3
 800843e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008442:	d00d      	beq.n	8008460 <vQueueWaitForMessageRestricted+0x34>
 8008444:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008448:	b25b      	sxtb	r3, r3
 800844a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800844e:	d00b      	beq.n	8008468 <vQueueWaitForMessageRestricted+0x3c>
 8008450:	f001 f862 	bl	8009518 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008454:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008456:	b15b      	cbz	r3, 8008470 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008458:	4620      	mov	r0, r4
 800845a:	f7ff fb5b 	bl	8007b14 <prvUnlockQueue>
	}
 800845e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8008460:	2300      	movs	r3, #0
 8008462:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008466:	e7ed      	b.n	8008444 <vQueueWaitForMessageRestricted+0x18>
 8008468:	2300      	movs	r3, #0
 800846a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800846e:	e7ef      	b.n	8008450 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008470:	4632      	mov	r2, r6
 8008472:	4629      	mov	r1, r5
 8008474:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008478:	f000 fbde 	bl	8008c38 <vTaskPlaceOnEventListRestricted>
 800847c:	e7ec      	b.n	8008458 <vQueueWaitForMessageRestricted+0x2c>
	...

08008480 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008480:	4b08      	ldr	r3, [pc, #32]	; (80084a4 <prvResetNextTaskUnblockTime+0x24>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	b923      	cbnz	r3, 8008492 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008488:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <prvResetNextTaskUnblockTime+0x28>)
 800848a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008492:	4b04      	ldr	r3, [pc, #16]	; (80084a4 <prvResetNextTaskUnblockTime+0x24>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <prvResetNextTaskUnblockTime+0x28>)
 800849e:	601a      	str	r2, [r3, #0]
	}
}
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	20000954 	.word	0x20000954
 80084a8:	20000df8 	.word	0x20000df8

080084ac <prvInitialiseNewTask>:
{
 80084ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b0:	4680      	mov	r8, r0
 80084b2:	460d      	mov	r5, r1
 80084b4:	4617      	mov	r7, r2
 80084b6:	4699      	mov	r9, r3
 80084b8:	9e08      	ldr	r6, [sp, #32]
 80084ba:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80084be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084c0:	0092      	lsls	r2, r2, #2
 80084c2:	21a5      	movs	r1, #165	; 0xa5
 80084c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80084c6:	f001 fd19 	bl	8009efc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80084cc:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80084d0:	3a01      	subs	r2, #1
 80084d2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084d6:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 80084da:	b385      	cbz	r5, 800853e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084dc:	2200      	movs	r2, #0
 80084de:	2a0f      	cmp	r2, #15
 80084e0:	d807      	bhi.n	80084f2 <prvInitialiseNewTask+0x46>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084e2:	5ca9      	ldrb	r1, [r5, r2]
 80084e4:	18a3      	adds	r3, r4, r2
 80084e6:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80084ea:	5cab      	ldrb	r3, [r5, r2]
 80084ec:	b10b      	cbz	r3, 80084f2 <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084ee:	3201      	adds	r2, #1
 80084f0:	e7f5      	b.n	80084de <prvInitialiseNewTask+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084f2:	2300      	movs	r3, #0
 80084f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084f8:	2e37      	cmp	r6, #55	; 0x37
 80084fa:	d900      	bls.n	80084fe <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084fc:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80084fe:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008500:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008502:	2500      	movs	r5, #0
 8008504:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008506:	1d20      	adds	r0, r4, #4
 8008508:	f7ff fa59 	bl	80079be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800850c:	f104 0018 	add.w	r0, r4, #24
 8008510:	f7ff fa55 	bl	80079be <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008514:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008516:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800851a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800851c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800851e:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008520:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008524:	464a      	mov	r2, r9
 8008526:	4641      	mov	r1, r8
 8008528:	4638      	mov	r0, r7
 800852a:	f000 ffa7 	bl	800947c <pxPortInitialiseStack>
 800852e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008530:	f1ba 0f00 	cmp.w	sl, #0
 8008534:	d001      	beq.n	800853a <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008536:	f8ca 4000 	str.w	r4, [sl]
}
 800853a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800853e:	2300      	movs	r3, #0
 8008540:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008544:	e7d8      	b.n	80084f8 <prvInitialiseNewTask+0x4c>
	...

08008548 <prvInitialiseTaskLists>:
{
 8008548:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800854a:	2400      	movs	r4, #0
 800854c:	2c37      	cmp	r4, #55	; 0x37
 800854e:	d808      	bhi.n	8008562 <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008550:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008554:	0093      	lsls	r3, r2, #2
 8008556:	480e      	ldr	r0, [pc, #56]	; (8008590 <prvInitialiseTaskLists+0x48>)
 8008558:	4418      	add	r0, r3
 800855a:	f7ff fa25 	bl	80079a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800855e:	3401      	adds	r4, #1
 8008560:	e7f4      	b.n	800854c <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
 8008562:	4d0c      	ldr	r5, [pc, #48]	; (8008594 <prvInitialiseTaskLists+0x4c>)
 8008564:	4628      	mov	r0, r5
 8008566:	f7ff fa1f 	bl	80079a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800856a:	4c0b      	ldr	r4, [pc, #44]	; (8008598 <prvInitialiseTaskLists+0x50>)
 800856c:	4620      	mov	r0, r4
 800856e:	f7ff fa1b 	bl	80079a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008572:	480a      	ldr	r0, [pc, #40]	; (800859c <prvInitialiseTaskLists+0x54>)
 8008574:	f7ff fa18 	bl	80079a8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008578:	4809      	ldr	r0, [pc, #36]	; (80085a0 <prvInitialiseTaskLists+0x58>)
 800857a:	f7ff fa15 	bl	80079a8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800857e:	4809      	ldr	r0, [pc, #36]	; (80085a4 <prvInitialiseTaskLists+0x5c>)
 8008580:	f7ff fa12 	bl	80079a8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008584:	4b08      	ldr	r3, [pc, #32]	; (80085a8 <prvInitialiseTaskLists+0x60>)
 8008586:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008588:	4b08      	ldr	r3, [pc, #32]	; (80085ac <prvInitialiseTaskLists+0x64>)
 800858a:	601c      	str	r4, [r3, #0]
}
 800858c:	bd38      	pop	{r3, r4, r5, pc}
 800858e:	bf00      	nop
 8008590:	2000095c 	.word	0x2000095c
 8008594:	20000dd0 	.word	0x20000dd0
 8008598:	20000de4 	.word	0x20000de4
 800859c:	20000e04 	.word	0x20000e04
 80085a0:	20000e30 	.word	0x20000e30
 80085a4:	20000e1c 	.word	0x20000e1c
 80085a8:	20000954 	.word	0x20000954
 80085ac:	20000958 	.word	0x20000958

080085b0 <prvAddNewTaskToReadyList>:
{
 80085b0:	b510      	push	{r4, lr}
 80085b2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80085b4:	f000 ff8e 	bl	80094d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80085b8:	4a21      	ldr	r2, [pc, #132]	; (8008640 <prvAddNewTaskToReadyList+0x90>)
 80085ba:	6813      	ldr	r3, [r2, #0]
 80085bc:	3301      	adds	r3, #1
 80085be:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085c0:	4b20      	ldr	r3, [pc, #128]	; (8008644 <prvAddNewTaskToReadyList+0x94>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	b15b      	cbz	r3, 80085de <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80085c6:	4b20      	ldr	r3, [pc, #128]	; (8008648 <prvAddNewTaskToReadyList+0x98>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	b96b      	cbnz	r3, 80085e8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085cc:	4b1d      	ldr	r3, [pc, #116]	; (8008644 <prvAddNewTaskToReadyList+0x94>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d807      	bhi.n	80085e8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80085d8:	4b1a      	ldr	r3, [pc, #104]	; (8008644 <prvAddNewTaskToReadyList+0x94>)
 80085da:	601c      	str	r4, [r3, #0]
 80085dc:	e004      	b.n	80085e8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80085de:	4b19      	ldr	r3, [pc, #100]	; (8008644 <prvAddNewTaskToReadyList+0x94>)
 80085e0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085e2:	6813      	ldr	r3, [r2, #0]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d027      	beq.n	8008638 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 80085e8:	4a18      	ldr	r2, [pc, #96]	; (800864c <prvAddNewTaskToReadyList+0x9c>)
 80085ea:	6813      	ldr	r3, [r2, #0]
 80085ec:	3301      	adds	r3, #1
 80085ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80085f0:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80085f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80085f4:	4b16      	ldr	r3, [pc, #88]	; (8008650 <prvAddNewTaskToReadyList+0xa0>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4298      	cmp	r0, r3
 80085fa:	d901      	bls.n	8008600 <prvAddNewTaskToReadyList+0x50>
 80085fc:	4b14      	ldr	r3, [pc, #80]	; (8008650 <prvAddNewTaskToReadyList+0xa0>)
 80085fe:	6018      	str	r0, [r3, #0]
 8008600:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008604:	1d21      	adds	r1, r4, #4
 8008606:	4b13      	ldr	r3, [pc, #76]	; (8008654 <prvAddNewTaskToReadyList+0xa4>)
 8008608:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800860c:	f7ff f9da 	bl	80079c4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008610:	f000 ff82 	bl	8009518 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008614:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <prvAddNewTaskToReadyList+0x98>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	b16b      	cbz	r3, 8008636 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800861a:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <prvAddNewTaskToReadyList+0x94>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008620:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008622:	429a      	cmp	r2, r3
 8008624:	d207      	bcs.n	8008636 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 8008626:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <prvAddNewTaskToReadyList+0xa8>)
 8008628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	f3bf 8f6f 	isb	sy
}
 8008636:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8008638:	f7ff ff86 	bl	8008548 <prvInitialiseTaskLists>
 800863c:	e7d4      	b.n	80085e8 <prvAddNewTaskToReadyList+0x38>
 800863e:	bf00      	nop
 8008640:	20000dbc 	.word	0x20000dbc
 8008644:	20000950 	.word	0x20000950
 8008648:	20000e18 	.word	0x20000e18
 800864c:	20000dc8 	.word	0x20000dc8
 8008650:	20000dcc 	.word	0x20000dcc
 8008654:	2000095c 	.word	0x2000095c
 8008658:	e000ed04 	.word	0xe000ed04

0800865c <prvDeleteTCB>:
	{
 800865c:	b510      	push	{r4, lr}
 800865e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008660:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8008664:	b163      	cbz	r3, 8008680 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008666:	2b01      	cmp	r3, #1
 8008668:	d011      	beq.n	800868e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800866a:	2b02      	cmp	r3, #2
 800866c:	d00e      	beq.n	800868c <prvDeleteTCB+0x30>
 800866e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	e7fe      	b.n	800867e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8008680:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008682:	f001 f95b 	bl	800993c <vPortFree>
				vPortFree( pxTCB );
 8008686:	4620      	mov	r0, r4
 8008688:	f001 f958 	bl	800993c <vPortFree>
	}
 800868c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800868e:	f001 f955 	bl	800993c <vPortFree>
 8008692:	e7fb      	b.n	800868c <prvDeleteTCB+0x30>

08008694 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008694:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <prvCheckTasksWaitingTermination+0x40>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	b1d3      	cbz	r3, 80086d0 <prvCheckTasksWaitingTermination+0x3c>
{
 800869a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800869c:	f000 ff1a 	bl	80094d4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086a0:	4b0d      	ldr	r3, [pc, #52]	; (80086d8 <prvCheckTasksWaitingTermination+0x44>)
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086a6:	1d20      	adds	r0, r4, #4
 80086a8:	f7ff f9b0 	bl	8007a0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086ac:	4a0b      	ldr	r2, [pc, #44]	; (80086dc <prvCheckTasksWaitingTermination+0x48>)
 80086ae:	6813      	ldr	r3, [r2, #0]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086b4:	4a07      	ldr	r2, [pc, #28]	; (80086d4 <prvCheckTasksWaitingTermination+0x40>)
 80086b6:	6813      	ldr	r3, [r2, #0]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80086bc:	f000 ff2c 	bl	8009518 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80086c0:	4620      	mov	r0, r4
 80086c2:	f7ff ffcb 	bl	800865c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086c6:	4b03      	ldr	r3, [pc, #12]	; (80086d4 <prvCheckTasksWaitingTermination+0x40>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e6      	bne.n	800869c <prvCheckTasksWaitingTermination+0x8>
}
 80086ce:	bd10      	pop	{r4, pc}
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	20000dc0 	.word	0x20000dc0
 80086d8:	20000e30 	.word	0x20000e30
 80086dc:	20000dbc 	.word	0x20000dbc

080086e0 <prvIdleTask>:
{
 80086e0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80086e2:	f7ff ffd7 	bl	8008694 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086e6:	4b06      	ldr	r3, [pc, #24]	; (8008700 <prvIdleTask+0x20>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d9f9      	bls.n	80086e2 <prvIdleTask+0x2>
				taskYIELD();
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <prvIdleTask+0x24>)
 80086f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	e7f0      	b.n	80086e2 <prvIdleTask+0x2>
 8008700:	2000095c 	.word	0x2000095c
 8008704:	e000ed04 	.word	0xe000ed04

08008708 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008708:	b570      	push	{r4, r5, r6, lr}
 800870a:	4604      	mov	r4, r0
 800870c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800870e:	4b17      	ldr	r3, [pc, #92]	; (800876c <prvAddCurrentTaskToDelayedList+0x64>)
 8008710:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008712:	4b17      	ldr	r3, [pc, #92]	; (8008770 <prvAddCurrentTaskToDelayedList+0x68>)
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	3004      	adds	r0, #4
 8008718:	f7ff f978 	bl	8007a0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800871c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8008720:	d00d      	beq.n	800873e <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008722:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008724:	4b12      	ldr	r3, [pc, #72]	; (8008770 <prvAddCurrentTaskToDelayedList+0x68>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800872a:	42a6      	cmp	r6, r4
 800872c:	d910      	bls.n	8008750 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800872e:	4b11      	ldr	r3, [pc, #68]	; (8008774 <prvAddCurrentTaskToDelayedList+0x6c>)
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	4b0f      	ldr	r3, [pc, #60]	; (8008770 <prvAddCurrentTaskToDelayedList+0x68>)
 8008734:	6819      	ldr	r1, [r3, #0]
 8008736:	3104      	adds	r1, #4
 8008738:	f7ff f94f 	bl	80079da <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800873c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800873e:	2d00      	cmp	r5, #0
 8008740:	d0ef      	beq.n	8008722 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008742:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <prvAddCurrentTaskToDelayedList+0x68>)
 8008744:	6819      	ldr	r1, [r3, #0]
 8008746:	3104      	adds	r1, #4
 8008748:	480b      	ldr	r0, [pc, #44]	; (8008778 <prvAddCurrentTaskToDelayedList+0x70>)
 800874a:	f7ff f93b 	bl	80079c4 <vListInsertEnd>
 800874e:	e7f5      	b.n	800873c <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008750:	4b0a      	ldr	r3, [pc, #40]	; (800877c <prvAddCurrentTaskToDelayedList+0x74>)
 8008752:	6818      	ldr	r0, [r3, #0]
 8008754:	4b06      	ldr	r3, [pc, #24]	; (8008770 <prvAddCurrentTaskToDelayedList+0x68>)
 8008756:	6819      	ldr	r1, [r3, #0]
 8008758:	3104      	adds	r1, #4
 800875a:	f7ff f93e 	bl	80079da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800875e:	4b08      	ldr	r3, [pc, #32]	; (8008780 <prvAddCurrentTaskToDelayedList+0x78>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	42a3      	cmp	r3, r4
 8008764:	d9ea      	bls.n	800873c <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8008766:	4b06      	ldr	r3, [pc, #24]	; (8008780 <prvAddCurrentTaskToDelayedList+0x78>)
 8008768:	601c      	str	r4, [r3, #0]
}
 800876a:	e7e7      	b.n	800873c <prvAddCurrentTaskToDelayedList+0x34>
 800876c:	20000e44 	.word	0x20000e44
 8008770:	20000950 	.word	0x20000950
 8008774:	20000958 	.word	0x20000958
 8008778:	20000e1c 	.word	0x20000e1c
 800877c:	20000954 	.word	0x20000954
 8008780:	20000df8 	.word	0x20000df8

08008784 <xTaskCreateStatic>:
	{
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800878a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800878c:	b175      	cbz	r5, 80087ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800878e:	b1b4      	cbz	r4, 80087be <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008790:	265c      	movs	r6, #92	; 0x5c
 8008792:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008794:	9e04      	ldr	r6, [sp, #16]
 8008796:	2e5c      	cmp	r6, #92	; 0x5c
 8008798:	d01a      	beq.n	80087d0 <xTaskCreateStatic+0x4c>
 800879a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	e7fe      	b.n	80087aa <xTaskCreateStatic+0x26>
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80087bc:	e7fe      	b.n	80087bc <xTaskCreateStatic+0x38>
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80087ce:	e7fe      	b.n	80087ce <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80087d0:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087d2:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087d4:	2502      	movs	r5, #2
 80087d6:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087da:	2500      	movs	r5, #0
 80087dc:	9503      	str	r5, [sp, #12]
 80087de:	9402      	str	r4, [sp, #8]
 80087e0:	ad05      	add	r5, sp, #20
 80087e2:	9501      	str	r5, [sp, #4]
 80087e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087e6:	9500      	str	r5, [sp, #0]
 80087e8:	f7ff fe60 	bl	80084ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087ec:	4620      	mov	r0, r4
 80087ee:	f7ff fedf 	bl	80085b0 <prvAddNewTaskToReadyList>
	}
 80087f2:	9805      	ldr	r0, [sp, #20]
 80087f4:	b006      	add	sp, #24
 80087f6:	bd70      	pop	{r4, r5, r6, pc}

080087f8 <xTaskCreate>:
	{
 80087f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087fc:	b085      	sub	sp, #20
 80087fe:	4607      	mov	r7, r0
 8008800:	4688      	mov	r8, r1
 8008802:	4614      	mov	r4, r2
 8008804:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008806:	0090      	lsls	r0, r2, #2
 8008808:	f001 f81a 	bl	8009840 <pvPortMalloc>
			if( pxStack != NULL )
 800880c:	b300      	cbz	r0, 8008850 <xTaskCreate+0x58>
 800880e:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008810:	205c      	movs	r0, #92	; 0x5c
 8008812:	f001 f815 	bl	8009840 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008816:	4605      	mov	r5, r0
 8008818:	b1b0      	cbz	r0, 8008848 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800881a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800881e:	b1e5      	cbz	r5, 800885a <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008820:	2300      	movs	r3, #0
 8008822:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008826:	9303      	str	r3, [sp, #12]
 8008828:	9502      	str	r5, [sp, #8]
 800882a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	4633      	mov	r3, r6
 8008834:	4622      	mov	r2, r4
 8008836:	4641      	mov	r1, r8
 8008838:	4638      	mov	r0, r7
 800883a:	f7ff fe37 	bl	80084ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800883e:	4628      	mov	r0, r5
 8008840:	f7ff feb6 	bl	80085b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008844:	2001      	movs	r0, #1
 8008846:	e005      	b.n	8008854 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8008848:	4648      	mov	r0, r9
 800884a:	f001 f877 	bl	800993c <vPortFree>
 800884e:	e7e6      	b.n	800881e <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8008854:	b005      	add	sp, #20
 8008856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800885a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800885e:	e7f9      	b.n	8008854 <xTaskCreate+0x5c>

08008860 <vTaskStartScheduler>:
{
 8008860:	b510      	push	{r4, lr}
 8008862:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008864:	2400      	movs	r4, #0
 8008866:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008868:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800886a:	aa07      	add	r2, sp, #28
 800886c:	a906      	add	r1, sp, #24
 800886e:	a805      	add	r0, sp, #20
 8008870:	f7ff f882 	bl	8007978 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008874:	9b05      	ldr	r3, [sp, #20]
 8008876:	9302      	str	r3, [sp, #8]
 8008878:	9b06      	ldr	r3, [sp, #24]
 800887a:	9301      	str	r3, [sp, #4]
 800887c:	9400      	str	r4, [sp, #0]
 800887e:	4623      	mov	r3, r4
 8008880:	9a07      	ldr	r2, [sp, #28]
 8008882:	4917      	ldr	r1, [pc, #92]	; (80088e0 <vTaskStartScheduler+0x80>)
 8008884:	4817      	ldr	r0, [pc, #92]	; (80088e4 <vTaskStartScheduler+0x84>)
 8008886:	f7ff ff7d 	bl	8008784 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800888a:	b148      	cbz	r0, 80088a0 <vTaskStartScheduler+0x40>
			xReturn = xTimerCreateTimerTask();
 800888c:	f000 fbfa 	bl	8009084 <xTimerCreateTimerTask>
 8008890:	4603      	mov	r3, r0
	if( xReturn == pdPASS )
 8008892:	2b01      	cmp	r3, #1
 8008894:	d006      	beq.n	80088a4 <vTaskStartScheduler+0x44>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800889a:	d018      	beq.n	80088ce <vTaskStartScheduler+0x6e>
}
 800889c:	b008      	add	sp, #32
 800889e:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80088a0:	2300      	movs	r3, #0
 80088a2:	e7f6      	b.n	8008892 <vTaskStartScheduler+0x32>
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80088b4:	4b0c      	ldr	r3, [pc, #48]	; (80088e8 <vTaskStartScheduler+0x88>)
 80088b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088bc:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <vTaskStartScheduler+0x8c>)
 80088be:	2201      	movs	r2, #1
 80088c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088c2:	4b0b      	ldr	r3, [pc, #44]	; (80088f0 <vTaskStartScheduler+0x90>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80088c8:	f000 fea6 	bl	8009618 <xPortStartScheduler>
 80088cc:	e7e6      	b.n	800889c <vTaskStartScheduler+0x3c>
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088de:	e7fe      	b.n	80088de <vTaskStartScheduler+0x7e>
 80088e0:	0800a120 	.word	0x0800a120
 80088e4:	080086e1 	.word	0x080086e1
 80088e8:	20000df8 	.word	0x20000df8
 80088ec:	20000e18 	.word	0x20000e18
 80088f0:	20000e44 	.word	0x20000e44

080088f4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80088f4:	4a02      	ldr	r2, [pc, #8]	; (8008900 <vTaskSuspendAll+0xc>)
 80088f6:	6813      	ldr	r3, [r2, #0]
 80088f8:	3301      	adds	r3, #1
 80088fa:	6013      	str	r3, [r2, #0]
}
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	20000dc4 	.word	0x20000dc4

08008904 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008904:	4b01      	ldr	r3, [pc, #4]	; (800890c <xTaskGetTickCount+0x8>)
 8008906:	6818      	ldr	r0, [r3, #0]
}
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	20000e44 	.word	0x20000e44

08008910 <xTaskIncrementTick>:
{
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008912:	4b3b      	ldr	r3, [pc, #236]	; (8008a00 <xTaskIncrementTick+0xf0>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d16a      	bne.n	80089f0 <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800891a:	4b3a      	ldr	r3, [pc, #232]	; (8008a04 <xTaskIncrementTick+0xf4>)
 800891c:	681d      	ldr	r5, [r3, #0]
 800891e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008920:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008922:	b9c5      	cbnz	r5, 8008956 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008924:	4b38      	ldr	r3, [pc, #224]	; (8008a08 <xTaskIncrementTick+0xf8>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	b143      	cbz	r3, 800893e <xTaskIncrementTick+0x2e>
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	e7fe      	b.n	800893c <xTaskIncrementTick+0x2c>
 800893e:	4a32      	ldr	r2, [pc, #200]	; (8008a08 <xTaskIncrementTick+0xf8>)
 8008940:	6811      	ldr	r1, [r2, #0]
 8008942:	4b32      	ldr	r3, [pc, #200]	; (8008a0c <xTaskIncrementTick+0xfc>)
 8008944:	6818      	ldr	r0, [r3, #0]
 8008946:	6010      	str	r0, [r2, #0]
 8008948:	6019      	str	r1, [r3, #0]
 800894a:	4a31      	ldr	r2, [pc, #196]	; (8008a10 <xTaskIncrementTick+0x100>)
 800894c:	6813      	ldr	r3, [r2, #0]
 800894e:	3301      	adds	r3, #1
 8008950:	6013      	str	r3, [r2, #0]
 8008952:	f7ff fd95 	bl	8008480 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008956:	4b2f      	ldr	r3, [pc, #188]	; (8008a14 <xTaskIncrementTick+0x104>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	42ab      	cmp	r3, r5
 800895c:	d911      	bls.n	8008982 <xTaskIncrementTick+0x72>
BaseType_t xSwitchRequired = pdFALSE;
 800895e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008960:	4b2d      	ldr	r3, [pc, #180]	; (8008a18 <xTaskIncrementTick+0x108>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008966:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800896a:	009a      	lsls	r2, r3, #2
 800896c:	4b2b      	ldr	r3, [pc, #172]	; (8008a1c <xTaskIncrementTick+0x10c>)
 800896e:	589b      	ldr	r3, [r3, r2]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d900      	bls.n	8008976 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8008974:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 8008976:	4b2a      	ldr	r3, [pc, #168]	; (8008a20 <xTaskIncrementTick+0x110>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d03d      	beq.n	80089fa <xTaskIncrementTick+0xea>
				xSwitchRequired = pdTRUE;
 800897e:	2401      	movs	r4, #1
	return xSwitchRequired;
 8008980:	e03b      	b.n	80089fa <xTaskIncrementTick+0xea>
BaseType_t xSwitchRequired = pdFALSE;
 8008982:	2400      	movs	r4, #0
 8008984:	e016      	b.n	80089b4 <xTaskIncrementTick+0xa4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008986:	4b23      	ldr	r3, [pc, #140]	; (8008a14 <xTaskIncrementTick+0x104>)
 8008988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800898c:	601a      	str	r2, [r3, #0]
					break;
 800898e:	e7e7      	b.n	8008960 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8008990:	4a20      	ldr	r2, [pc, #128]	; (8008a14 <xTaskIncrementTick+0x104>)
 8008992:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008994:	e7e4      	b.n	8008960 <xTaskIncrementTick+0x50>
					prvAddTaskToReadyList( pxTCB );
 8008996:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800899a:	009a      	lsls	r2, r3, #2
 800899c:	4639      	mov	r1, r7
 800899e:	481f      	ldr	r0, [pc, #124]	; (8008a1c <xTaskIncrementTick+0x10c>)
 80089a0:	4410      	add	r0, r2
 80089a2:	f7ff f80f 	bl	80079c4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089a6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80089a8:	4b1b      	ldr	r3, [pc, #108]	; (8008a18 <xTaskIncrementTick+0x108>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d300      	bcc.n	80089b4 <xTaskIncrementTick+0xa4>
							xSwitchRequired = pdTRUE;
 80089b2:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089b4:	4b14      	ldr	r3, [pc, #80]	; (8008a08 <xTaskIncrementTick+0xf8>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0e3      	beq.n	8008986 <xTaskIncrementTick+0x76>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089be:	4b12      	ldr	r3, [pc, #72]	; (8008a08 <xTaskIncrementTick+0xf8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089c6:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80089c8:	429d      	cmp	r5, r3
 80089ca:	d3e1      	bcc.n	8008990 <xTaskIncrementTick+0x80>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089cc:	1d37      	adds	r7, r6, #4
 80089ce:	4638      	mov	r0, r7
 80089d0:	f7ff f81c 	bl	8007a0c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089d4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80089d6:	b11b      	cbz	r3, 80089e0 <xTaskIncrementTick+0xd0>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089d8:	f106 0018 	add.w	r0, r6, #24
 80089dc:	f7ff f816 	bl	8007a0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089e0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80089e2:	4a10      	ldr	r2, [pc, #64]	; (8008a24 <xTaskIncrementTick+0x114>)
 80089e4:	6812      	ldr	r2, [r2, #0]
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d9d5      	bls.n	8008996 <xTaskIncrementTick+0x86>
 80089ea:	4a0e      	ldr	r2, [pc, #56]	; (8008a24 <xTaskIncrementTick+0x114>)
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	e7d2      	b.n	8008996 <xTaskIncrementTick+0x86>
		++xPendedTicks;
 80089f0:	4a0d      	ldr	r2, [pc, #52]	; (8008a28 <xTaskIncrementTick+0x118>)
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	3301      	adds	r3, #1
 80089f6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80089f8:	2400      	movs	r4, #0
}
 80089fa:	4620      	mov	r0, r4
 80089fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20000dc4 	.word	0x20000dc4
 8008a04:	20000e44 	.word	0x20000e44
 8008a08:	20000954 	.word	0x20000954
 8008a0c:	20000958 	.word	0x20000958
 8008a10:	20000dfc 	.word	0x20000dfc
 8008a14:	20000df8 	.word	0x20000df8
 8008a18:	20000950 	.word	0x20000950
 8008a1c:	2000095c 	.word	0x2000095c
 8008a20:	20000e48 	.word	0x20000e48
 8008a24:	20000dcc 	.word	0x20000dcc
 8008a28:	20000e00 	.word	0x20000e00

08008a2c <xTaskResumeAll>:
{
 8008a2c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8008a2e:	4b34      	ldr	r3, [pc, #208]	; (8008b00 <xTaskResumeAll+0xd4>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	b943      	cbnz	r3, 8008a46 <xTaskResumeAll+0x1a>
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	e7fe      	b.n	8008a44 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8008a46:	f000 fd45 	bl	80094d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008a4a:	4b2d      	ldr	r3, [pc, #180]	; (8008b00 <xTaskResumeAll+0xd4>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	3a01      	subs	r2, #1
 8008a50:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d14d      	bne.n	8008af4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a58:	4b2a      	ldr	r3, [pc, #168]	; (8008b04 <xTaskResumeAll+0xd8>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	b90b      	cbnz	r3, 8008a62 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008a5e:	2400      	movs	r4, #0
 8008a60:	e049      	b.n	8008af6 <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
 8008a62:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a64:	4b28      	ldr	r3, [pc, #160]	; (8008b08 <xTaskResumeAll+0xdc>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	b31b      	cbz	r3, 8008ab2 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a6a:	4b27      	ldr	r3, [pc, #156]	; (8008b08 <xTaskResumeAll+0xdc>)
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a70:	f104 0018 	add.w	r0, r4, #24
 8008a74:	f7fe ffca 	bl	8007a0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a78:	1d25      	adds	r5, r4, #4
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f7fe ffc6 	bl	8007a0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a80:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008a82:	4b22      	ldr	r3, [pc, #136]	; (8008b0c <xTaskResumeAll+0xe0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4298      	cmp	r0, r3
 8008a88:	d901      	bls.n	8008a8e <xTaskResumeAll+0x62>
 8008a8a:	4b20      	ldr	r3, [pc, #128]	; (8008b0c <xTaskResumeAll+0xe0>)
 8008a8c:	6018      	str	r0, [r3, #0]
 8008a8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008a92:	4629      	mov	r1, r5
 8008a94:	4b1e      	ldr	r3, [pc, #120]	; (8008b10 <xTaskResumeAll+0xe4>)
 8008a96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a9a:	f7fe ff93 	bl	80079c4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008aa0:	4b1c      	ldr	r3, [pc, #112]	; (8008b14 <xTaskResumeAll+0xe8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d3dc      	bcc.n	8008a64 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8008aaa:	4b1b      	ldr	r3, [pc, #108]	; (8008b18 <xTaskResumeAll+0xec>)
 8008aac:	2201      	movs	r2, #1
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	e7d8      	b.n	8008a64 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8008ab2:	b10c      	cbz	r4, 8008ab8 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8008ab4:	f7ff fce4 	bl	8008480 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ab8:	4b18      	ldr	r3, [pc, #96]	; (8008b1c <xTaskResumeAll+0xf0>)
 8008aba:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8008abc:	b974      	cbnz	r4, 8008adc <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
 8008abe:	4b16      	ldr	r3, [pc, #88]	; (8008b18 <xTaskResumeAll+0xec>)
 8008ac0:	681c      	ldr	r4, [r3, #0]
 8008ac2:	b1c4      	cbz	r4, 8008af6 <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8008ac4:	4b16      	ldr	r3, [pc, #88]	; (8008b20 <xTaskResumeAll+0xf4>)
 8008ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008ad4:	2401      	movs	r4, #1
 8008ad6:	e00e      	b.n	8008af6 <xTaskResumeAll+0xca>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ad8:	3c01      	subs	r4, #1
 8008ada:	d007      	beq.n	8008aec <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
 8008adc:	f7ff ff18 	bl	8008910 <xTaskIncrementTick>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d0f9      	beq.n	8008ad8 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8008ae4:	4b0c      	ldr	r3, [pc, #48]	; (8008b18 <xTaskResumeAll+0xec>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	e7f5      	b.n	8008ad8 <xTaskResumeAll+0xac>
						xPendedTicks = 0;
 8008aec:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <xTaskResumeAll+0xf0>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	e7e4      	b.n	8008abe <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8008af4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008af6:	f000 fd0f 	bl	8009518 <vPortExitCritical>
}
 8008afa:	4620      	mov	r0, r4
 8008afc:	bd38      	pop	{r3, r4, r5, pc}
 8008afe:	bf00      	nop
 8008b00:	20000dc4 	.word	0x20000dc4
 8008b04:	20000dbc 	.word	0x20000dbc
 8008b08:	20000e04 	.word	0x20000e04
 8008b0c:	20000dcc 	.word	0x20000dcc
 8008b10:	2000095c 	.word	0x2000095c
 8008b14:	20000950 	.word	0x20000950
 8008b18:	20000e48 	.word	0x20000e48
 8008b1c:	20000e00 	.word	0x20000e00
 8008b20:	e000ed04 	.word	0xe000ed04

08008b24 <vTaskDelay>:
	{
 8008b24:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b26:	b1a8      	cbz	r0, 8008b54 <vTaskDelay+0x30>
 8008b28:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8008b2a:	4b0f      	ldr	r3, [pc, #60]	; (8008b68 <vTaskDelay+0x44>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	b143      	cbz	r3, 8008b42 <vTaskDelay+0x1e>
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	e7fe      	b.n	8008b40 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8008b42:	f7ff fed7 	bl	80088f4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b46:	2100      	movs	r1, #0
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f7ff fddd 	bl	8008708 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008b4e:	f7ff ff6d 	bl	8008a2c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008b52:	b938      	cbnz	r0, 8008b64 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8008b54:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <vTaskDelay+0x48>)
 8008b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	f3bf 8f6f 	isb	sy
	}
 8008b64:	bd10      	pop	{r4, pc}
 8008b66:	bf00      	nop
 8008b68:	20000dc4 	.word	0x20000dc4
 8008b6c:	e000ed04 	.word	0xe000ed04

08008b70 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b70:	4b20      	ldr	r3, [pc, #128]	; (8008bf4 <vTaskSwitchContext+0x84>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	b11b      	cbz	r3, 8008b7e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8008b76:	4b20      	ldr	r3, [pc, #128]	; (8008bf8 <vTaskSwitchContext+0x88>)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8008b7e:	4b1e      	ldr	r3, [pc, #120]	; (8008bf8 <vTaskSwitchContext+0x88>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b84:	4b1d      	ldr	r3, [pc, #116]	; (8008bfc <vTaskSwitchContext+0x8c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008b8c:	008a      	lsls	r2, r1, #2
 8008b8e:	491c      	ldr	r1, [pc, #112]	; (8008c00 <vTaskSwitchContext+0x90>)
 8008b90:	588a      	ldr	r2, [r1, r2]
 8008b92:	b95a      	cbnz	r2, 8008bac <vTaskSwitchContext+0x3c>
 8008b94:	b10b      	cbz	r3, 8008b9a <vTaskSwitchContext+0x2a>
 8008b96:	3b01      	subs	r3, #1
 8008b98:	e7f6      	b.n	8008b88 <vTaskSwitchContext+0x18>
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	e7fe      	b.n	8008baa <vTaskSwitchContext+0x3a>
{
 8008bac:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bae:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8008bb2:	0082      	lsls	r2, r0, #2
 8008bb4:	440a      	add	r2, r1
 8008bb6:	6850      	ldr	r0, [r2, #4]
 8008bb8:	6840      	ldr	r0, [r0, #4]
 8008bba:	6050      	str	r0, [r2, #4]
 8008bbc:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8008bc0:	00a2      	lsls	r2, r4, #2
 8008bc2:	4614      	mov	r4, r2
 8008bc4:	3208      	adds	r2, #8
 8008bc6:	4411      	add	r1, r2
 8008bc8:	4288      	cmp	r0, r1
 8008bca:	d00d      	beq.n	8008be8 <vTaskSwitchContext+0x78>
 8008bcc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008bd0:	0091      	lsls	r1, r2, #2
 8008bd2:	4a0b      	ldr	r2, [pc, #44]	; (8008c00 <vTaskSwitchContext+0x90>)
 8008bd4:	440a      	add	r2, r1
 8008bd6:	6852      	ldr	r2, [r2, #4]
 8008bd8:	68d1      	ldr	r1, [r2, #12]
 8008bda:	4a0a      	ldr	r2, [pc, #40]	; (8008c04 <vTaskSwitchContext+0x94>)
 8008bdc:	6011      	str	r1, [r2, #0]
 8008bde:	4a07      	ldr	r2, [pc, #28]	; (8008bfc <vTaskSwitchContext+0x8c>)
 8008be0:	6013      	str	r3, [r2, #0]
}
 8008be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008be6:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be8:	6840      	ldr	r0, [r0, #4]
 8008bea:	4a05      	ldr	r2, [pc, #20]	; (8008c00 <vTaskSwitchContext+0x90>)
 8008bec:	4422      	add	r2, r4
 8008bee:	6050      	str	r0, [r2, #4]
 8008bf0:	e7ec      	b.n	8008bcc <vTaskSwitchContext+0x5c>
 8008bf2:	bf00      	nop
 8008bf4:	20000dc4 	.word	0x20000dc4
 8008bf8:	20000e48 	.word	0x20000e48
 8008bfc:	20000dcc 	.word	0x20000dcc
 8008c00:	2000095c 	.word	0x2000095c
 8008c04:	20000950 	.word	0x20000950

08008c08 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8008c08:	b158      	cbz	r0, 8008c22 <vTaskPlaceOnEventList+0x1a>
{
 8008c0a:	b510      	push	{r4, lr}
 8008c0c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c0e:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <vTaskPlaceOnEventList+0x2c>)
 8008c10:	6819      	ldr	r1, [r3, #0]
 8008c12:	3118      	adds	r1, #24
 8008c14:	f7fe fee1 	bl	80079da <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c18:	2101      	movs	r1, #1
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f7ff fd74 	bl	8008708 <prvAddCurrentTaskToDelayedList>
}
 8008c20:	bd10      	pop	{r4, pc}
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8008c32:	e7fe      	b.n	8008c32 <vTaskPlaceOnEventList+0x2a>
 8008c34:	20000950 	.word	0x20000950

08008c38 <vTaskPlaceOnEventListRestricted>:
	{
 8008c38:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8008c3a:	b170      	cbz	r0, 8008c5a <vTaskPlaceOnEventListRestricted+0x22>
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c40:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <vTaskPlaceOnEventListRestricted+0x34>)
 8008c42:	6819      	ldr	r1, [r3, #0]
 8008c44:	3118      	adds	r1, #24
 8008c46:	f7fe febd 	bl	80079c4 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8008c4a:	b10d      	cbz	r5, 8008c50 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8008c4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c50:	4629      	mov	r1, r5
 8008c52:	4620      	mov	r0, r4
 8008c54:	f7ff fd58 	bl	8008708 <prvAddCurrentTaskToDelayedList>
	}
 8008c58:	bd38      	pop	{r3, r4, r5, pc}
 8008c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8008c6a:	e7fe      	b.n	8008c6a <vTaskPlaceOnEventListRestricted+0x32>
 8008c6c:	20000950 	.word	0x20000950

08008c70 <xTaskRemoveFromEventList>:
{
 8008c70:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c72:	68c3      	ldr	r3, [r0, #12]
 8008c74:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008c76:	b324      	cbz	r4, 8008cc2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c78:	f104 0518 	add.w	r5, r4, #24
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	f7fe fec5 	bl	8007a0c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c82:	4b18      	ldr	r3, [pc, #96]	; (8008ce4 <xTaskRemoveFromEventList+0x74>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	bb2b      	cbnz	r3, 8008cd4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c88:	1d25      	adds	r5, r4, #4
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f7fe febe 	bl	8007a0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008c92:	4b15      	ldr	r3, [pc, #84]	; (8008ce8 <xTaskRemoveFromEventList+0x78>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4298      	cmp	r0, r3
 8008c98:	d901      	bls.n	8008c9e <xTaskRemoveFromEventList+0x2e>
 8008c9a:	4b13      	ldr	r3, [pc, #76]	; (8008ce8 <xTaskRemoveFromEventList+0x78>)
 8008c9c:	6018      	str	r0, [r3, #0]
 8008c9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	4b11      	ldr	r3, [pc, #68]	; (8008cec <xTaskRemoveFromEventList+0x7c>)
 8008ca6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008caa:	f7fe fe8b 	bl	80079c4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008cb0:	4b0f      	ldr	r3, [pc, #60]	; (8008cf0 <xTaskRemoveFromEventList+0x80>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d911      	bls.n	8008cde <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8008cba:	2001      	movs	r0, #1
 8008cbc:	4b0d      	ldr	r3, [pc, #52]	; (8008cf4 <xTaskRemoveFromEventList+0x84>)
 8008cbe:	6018      	str	r0, [r3, #0]
 8008cc0:	e00e      	b.n	8008ce0 <xTaskRemoveFromEventList+0x70>
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8008cd2:	e7fe      	b.n	8008cd2 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	4808      	ldr	r0, [pc, #32]	; (8008cf8 <xTaskRemoveFromEventList+0x88>)
 8008cd8:	f7fe fe74 	bl	80079c4 <vListInsertEnd>
 8008cdc:	e7e7      	b.n	8008cae <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8008cde:	2000      	movs	r0, #0
}
 8008ce0:	bd38      	pop	{r3, r4, r5, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000dc4 	.word	0x20000dc4
 8008ce8:	20000dcc 	.word	0x20000dcc
 8008cec:	2000095c 	.word	0x2000095c
 8008cf0:	20000950 	.word	0x20000950
 8008cf4:	20000e48 	.word	0x20000e48
 8008cf8:	20000e04 	.word	0x20000e04

08008cfc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cfc:	4b03      	ldr	r3, [pc, #12]	; (8008d0c <vTaskInternalSetTimeOutState+0x10>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d02:	4b03      	ldr	r3, [pc, #12]	; (8008d10 <vTaskInternalSetTimeOutState+0x14>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6043      	str	r3, [r0, #4]
}
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	20000dfc 	.word	0x20000dfc
 8008d10:	20000e44 	.word	0x20000e44

08008d14 <xTaskCheckForTimeOut>:
{
 8008d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8008d16:	b1c8      	cbz	r0, 8008d4c <xTaskCheckForTimeOut+0x38>
 8008d18:	460c      	mov	r4, r1
 8008d1a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8008d1c:	b1f9      	cbz	r1, 8008d5e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8008d1e:	f000 fbd9 	bl	80094d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008d22:	4b1b      	ldr	r3, [pc, #108]	; (8008d90 <xTaskCheckForTimeOut+0x7c>)
 8008d24:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d26:	686b      	ldr	r3, [r5, #4]
 8008d28:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8008d2a:	6822      	ldr	r2, [r4, #0]
 8008d2c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008d30:	d026      	beq.n	8008d80 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d32:	682f      	ldr	r7, [r5, #0]
 8008d34:	4e17      	ldr	r6, [pc, #92]	; (8008d94 <xTaskCheckForTimeOut+0x80>)
 8008d36:	6836      	ldr	r6, [r6, #0]
 8008d38:	42b7      	cmp	r7, r6
 8008d3a:	d001      	beq.n	8008d40 <xTaskCheckForTimeOut+0x2c>
 8008d3c:	428b      	cmp	r3, r1
 8008d3e:	d924      	bls.n	8008d8a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d40:	4282      	cmp	r2, r0
 8008d42:	d815      	bhi.n	8008d70 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008d48:	2401      	movs	r4, #1
 8008d4a:	e01a      	b.n	8008d82 <xTaskCheckForTimeOut+0x6e>
 8008d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d50:	f383 8811 	msr	BASEPRI, r3
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8008d5c:	e7fe      	b.n	8008d5c <xTaskCheckForTimeOut+0x48>
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8008d6e:	e7fe      	b.n	8008d6e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8008d70:	1a5b      	subs	r3, r3, r1
 8008d72:	4413      	add	r3, r2
 8008d74:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d76:	4628      	mov	r0, r5
 8008d78:	f7ff ffc0 	bl	8008cfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d7c:	2400      	movs	r4, #0
 8008d7e:	e000      	b.n	8008d82 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8008d80:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008d82:	f000 fbc9 	bl	8009518 <vPortExitCritical>
}
 8008d86:	4620      	mov	r0, r4
 8008d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8008d8a:	2401      	movs	r4, #1
 8008d8c:	e7f9      	b.n	8008d82 <xTaskCheckForTimeOut+0x6e>
 8008d8e:	bf00      	nop
 8008d90:	20000e44 	.word	0x20000e44
 8008d94:	20000dfc 	.word	0x20000dfc

08008d98 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008d98:	4b01      	ldr	r3, [pc, #4]	; (8008da0 <vTaskMissedYield+0x8>)
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	601a      	str	r2, [r3, #0]
}
 8008d9e:	4770      	bx	lr
 8008da0:	20000e48 	.word	0x20000e48

08008da4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008da4:	4b05      	ldr	r3, [pc, #20]	; (8008dbc <xTaskGetSchedulerState+0x18>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	b133      	cbz	r3, 8008db8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008daa:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <xTaskGetSchedulerState+0x1c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	b10b      	cbz	r3, 8008db4 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8008db0:	2000      	movs	r0, #0
	}
 8008db2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8008db4:	2002      	movs	r0, #2
 8008db6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008db8:	2001      	movs	r0, #1
 8008dba:	4770      	bx	lr
 8008dbc:	20000e18 	.word	0x20000e18
 8008dc0:	20000dc4 	.word	0x20000dc4

08008dc4 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d03e      	beq.n	8008e46 <xTaskPriorityInherit+0x82>
	{
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008dcc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008dce:	4a20      	ldr	r2, [pc, #128]	; (8008e50 <xTaskPriorityInherit+0x8c>)
 8008dd0:	6812      	ldr	r2, [r2, #0]
 8008dd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d22e      	bcs.n	8008e36 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dd8:	6982      	ldr	r2, [r0, #24]
 8008dda:	2a00      	cmp	r2, #0
 8008ddc:	db05      	blt.n	8008dea <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dde:	4a1c      	ldr	r2, [pc, #112]	; (8008e50 <xTaskPriorityInherit+0x8c>)
 8008de0:	6812      	ldr	r2, [r2, #0]
 8008de2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008de4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008de8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008dea:	6961      	ldr	r1, [r4, #20]
 8008dec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008df0:	4a18      	ldr	r2, [pc, #96]	; (8008e54 <xTaskPriorityInherit+0x90>)
 8008df2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008df6:	4299      	cmp	r1, r3
 8008df8:	d005      	beq.n	8008e06 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008dfa:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <xTaskPriorityInherit+0x8c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8008e02:	2001      	movs	r0, #1
	}
 8008e04:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e06:	1d25      	adds	r5, r4, #4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f7fe fdff 	bl	8007a0c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e0e:	4b10      	ldr	r3, [pc, #64]	; (8008e50 <xTaskPriorityInherit+0x8c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008e14:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e16:	4b10      	ldr	r3, [pc, #64]	; (8008e58 <xTaskPriorityInherit+0x94>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4298      	cmp	r0, r3
 8008e1c:	d901      	bls.n	8008e22 <xTaskPriorityInherit+0x5e>
 8008e1e:	4b0e      	ldr	r3, [pc, #56]	; (8008e58 <xTaskPriorityInherit+0x94>)
 8008e20:	6018      	str	r0, [r3, #0]
 8008e22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008e26:	4629      	mov	r1, r5
 8008e28:	4b0a      	ldr	r3, [pc, #40]	; (8008e54 <xTaskPriorityInherit+0x90>)
 8008e2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008e2e:	f7fe fdc9 	bl	80079c4 <vListInsertEnd>
				xReturn = pdTRUE;
 8008e32:	2001      	movs	r0, #1
 8008e34:	e7e6      	b.n	8008e04 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e36:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008e38:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <xTaskPriorityInherit+0x8c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d303      	bcc.n	8008e4a <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 8008e42:	2000      	movs	r0, #0
 8008e44:	e7de      	b.n	8008e04 <xTaskPriorityInherit+0x40>
 8008e46:	2000      	movs	r0, #0
	}
 8008e48:	4770      	bx	lr
					xReturn = pdTRUE;
 8008e4a:	2001      	movs	r0, #1
		return xReturn;
 8008e4c:	e7da      	b.n	8008e04 <xTaskPriorityInherit+0x40>
 8008e4e:	bf00      	nop
 8008e50:	20000950 	.word	0x20000950
 8008e54:	2000095c 	.word	0x2000095c
 8008e58:	20000dcc 	.word	0x20000dcc

08008e5c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d03b      	beq.n	8008ed8 <xTaskPriorityDisinherit+0x7c>
	{
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8008e64:	4b1e      	ldr	r3, [pc, #120]	; (8008ee0 <xTaskPriorityDisinherit+0x84>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4283      	cmp	r3, r0
 8008e6a:	d008      	beq.n	8008e7e <xTaskPriorityDisinherit+0x22>
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	e7fe      	b.n	8008e7c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e7e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008e80:	b943      	cbnz	r3, 8008e94 <xTaskPriorityDisinherit+0x38>
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	e7fe      	b.n	8008e92 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8008e94:	3b01      	subs	r3, #1
 8008e96:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e98:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008e9a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008e9c:	4291      	cmp	r1, r2
 8008e9e:	d01d      	beq.n	8008edc <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ea0:	b10b      	cbz	r3, 8008ea6 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8008ea2:	2000      	movs	r0, #0
	}
 8008ea4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ea6:	1d05      	adds	r5, r0, #4
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f7fe fdaf 	bl	8007a0c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008eae:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008eb0:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eb2:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8008eb6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008eb8:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <xTaskPriorityDisinherit+0x88>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4298      	cmp	r0, r3
 8008ebe:	d901      	bls.n	8008ec4 <xTaskPriorityDisinherit+0x68>
 8008ec0:	4b08      	ldr	r3, [pc, #32]	; (8008ee4 <xTaskPriorityDisinherit+0x88>)
 8008ec2:	6018      	str	r0, [r3, #0]
 8008ec4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008ec8:	4629      	mov	r1, r5
 8008eca:	4b07      	ldr	r3, [pc, #28]	; (8008ee8 <xTaskPriorityDisinherit+0x8c>)
 8008ecc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ed0:	f7fe fd78 	bl	80079c4 <vListInsertEnd>
					xReturn = pdTRUE;
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	e7e5      	b.n	8008ea4 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8008ed8:	2000      	movs	r0, #0
	}
 8008eda:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8008edc:	2000      	movs	r0, #0
 8008ede:	e7e1      	b.n	8008ea4 <xTaskPriorityDisinherit+0x48>
 8008ee0:	20000950 	.word	0x20000950
 8008ee4:	20000dcc 	.word	0x20000dcc
 8008ee8:	2000095c 	.word	0x2000095c

08008eec <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d047      	beq.n	8008f80 <vTaskPriorityDisinheritAfterTimeout+0x94>
	{
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	460a      	mov	r2, r1
 8008ef4:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8008ef6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008ef8:	b941      	cbnz	r1, 8008f0c <vTaskPriorityDisinheritAfterTimeout+0x20>
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	e7fe      	b.n	8008f0a <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008f0c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d200      	bcs.n	8008f14 <vTaskPriorityDisinheritAfterTimeout+0x28>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008f12:	4613      	mov	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008f14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d001      	beq.n	8008f1e <vTaskPriorityDisinheritAfterTimeout+0x32>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008f1a:	2901      	cmp	r1, #1
 8008f1c:	d000      	beq.n	8008f20 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8008f20:	4918      	ldr	r1, [pc, #96]	; (8008f84 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8008f22:	6809      	ldr	r1, [r1, #0]
 8008f24:	42a1      	cmp	r1, r4
 8008f26:	d022      	beq.n	8008f6e <vTaskPriorityDisinheritAfterTimeout+0x82>
					pxTCB->uxPriority = uxPriorityToUse;
 8008f28:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f2a:	69a1      	ldr	r1, [r4, #24]
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	db02      	blt.n	8008f36 <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f30:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008f34:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f36:	6961      	ldr	r1, [r4, #20]
 8008f38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008f3c:	4b12      	ldr	r3, [pc, #72]	; (8008f88 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8008f3e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008f42:	4291      	cmp	r1, r2
 8008f44:	d1eb      	bne.n	8008f1e <vTaskPriorityDisinheritAfterTimeout+0x32>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f46:	1d25      	adds	r5, r4, #4
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f7fe fd5f 	bl	8007a0c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008f4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008f50:	4b0e      	ldr	r3, [pc, #56]	; (8008f8c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4298      	cmp	r0, r3
 8008f56:	d901      	bls.n	8008f5c <vTaskPriorityDisinheritAfterTimeout+0x70>
 8008f58:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8008f5a:	6018      	str	r0, [r3, #0]
 8008f5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008f60:	4629      	mov	r1, r5
 8008f62:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8008f64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008f68:	f7fe fd2c 	bl	80079c4 <vListInsertEnd>
	}
 8008f6c:	e7d7      	b.n	8008f1e <vTaskPriorityDisinheritAfterTimeout+0x32>
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8008f7e:	e7fe      	b.n	8008f7e <vTaskPriorityDisinheritAfterTimeout+0x92>
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	20000950 	.word	0x20000950
 8008f88:	2000095c 	.word	0x2000095c
 8008f8c:	20000dcc 	.word	0x20000dcc

08008f90 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008f90:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <pvTaskIncrementMutexHeldCount+0x18>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	b123      	cbz	r3, 8008fa0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f96:	4b04      	ldr	r3, [pc, #16]	; (8008fa8 <pvTaskIncrementMutexHeldCount+0x18>)
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8008fa0:	4b01      	ldr	r3, [pc, #4]	; (8008fa8 <pvTaskIncrementMutexHeldCount+0x18>)
 8008fa2:	6818      	ldr	r0, [r3, #0]
	}
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	20000950 	.word	0x20000950

08008fac <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fac:	4b06      	ldr	r3, [pc, #24]	; (8008fc8 <prvGetNextExpireTime+0x1c>)
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	6813      	ldr	r3, [r2, #0]
 8008fb2:	b92b      	cbnz	r3, 8008fc0 <prvGetNextExpireTime+0x14>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008fb8:	b923      	cbnz	r3, 8008fc4 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fba:	68d3      	ldr	r3, [r2, #12]
 8008fbc:	6818      	ldr	r0, [r3, #0]
 8008fbe:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	e7f8      	b.n	8008fb6 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008fc4:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8008fc6:	4770      	bx	lr
 8008fc8:	20000e4c 	.word	0x20000e4c

08008fcc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008fcc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008fce:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fd0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008fd2:	4291      	cmp	r1, r2
 8008fd4:	d80c      	bhi.n	8008ff0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd6:	1ad2      	subs	r2, r2, r3
 8008fd8:	6983      	ldr	r3, [r0, #24]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d301      	bcc.n	8008fe2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008fde:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8008fe0:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008fe2:	1d01      	adds	r1, r0, #4
 8008fe4:	4b09      	ldr	r3, [pc, #36]	; (800900c <prvInsertTimerInActiveList+0x40>)
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	f7fe fcf7 	bl	80079da <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008fec:	2000      	movs	r0, #0
 8008fee:	e7f7      	b.n	8008fe0 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d201      	bcs.n	8008ff8 <prvInsertTimerInActiveList+0x2c>
 8008ff4:	4299      	cmp	r1, r3
 8008ff6:	d206      	bcs.n	8009006 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ff8:	1d01      	adds	r1, r0, #4
 8008ffa:	4b05      	ldr	r3, [pc, #20]	; (8009010 <prvInsertTimerInActiveList+0x44>)
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	f7fe fcec 	bl	80079da <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009002:	2000      	movs	r0, #0
 8009004:	e7ec      	b.n	8008fe0 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8009006:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009008:	e7ea      	b.n	8008fe0 <prvInsertTimerInActiveList+0x14>
 800900a:	bf00      	nop
 800900c:	20000e50 	.word	0x20000e50
 8009010:	20000e4c 	.word	0x20000e4c

08009014 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009014:	b530      	push	{r4, r5, lr}
 8009016:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009018:	f000 fa5c 	bl	80094d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800901c:	4b11      	ldr	r3, [pc, #68]	; (8009064 <prvCheckForValidListAndQueue+0x50>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	b11b      	cbz	r3, 800902a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009022:	f000 fa79 	bl	8009518 <vPortExitCritical>
}
 8009026:	b003      	add	sp, #12
 8009028:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800902a:	4d0f      	ldr	r5, [pc, #60]	; (8009068 <prvCheckForValidListAndQueue+0x54>)
 800902c:	4628      	mov	r0, r5
 800902e:	f7fe fcbb 	bl	80079a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009032:	4c0e      	ldr	r4, [pc, #56]	; (800906c <prvCheckForValidListAndQueue+0x58>)
 8009034:	4620      	mov	r0, r4
 8009036:	f7fe fcb7 	bl	80079a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800903a:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <prvCheckForValidListAndQueue+0x5c>)
 800903c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800903e:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <prvCheckForValidListAndQueue+0x60>)
 8009040:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009042:	2300      	movs	r3, #0
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <prvCheckForValidListAndQueue+0x64>)
 8009048:	4a0c      	ldr	r2, [pc, #48]	; (800907c <prvCheckForValidListAndQueue+0x68>)
 800904a:	2110      	movs	r1, #16
 800904c:	200a      	movs	r0, #10
 800904e:	f7fe fdec 	bl	8007c2a <xQueueGenericCreateStatic>
 8009052:	4b04      	ldr	r3, [pc, #16]	; (8009064 <prvCheckForValidListAndQueue+0x50>)
 8009054:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8009056:	2800      	cmp	r0, #0
 8009058:	d0e3      	beq.n	8009022 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800905a:	4909      	ldr	r1, [pc, #36]	; (8009080 <prvCheckForValidListAndQueue+0x6c>)
 800905c:	f7ff f9d2 	bl	8008404 <vQueueAddToRegistry>
 8009060:	e7df      	b.n	8009022 <prvCheckForValidListAndQueue+0xe>
 8009062:	bf00      	nop
 8009064:	20000f70 	.word	0x20000f70
 8009068:	20000ef4 	.word	0x20000ef4
 800906c:	20000f08 	.word	0x20000f08
 8009070:	20000e4c 	.word	0x20000e4c
 8009074:	20000e50 	.word	0x20000e50
 8009078:	20000f20 	.word	0x20000f20
 800907c:	20000e54 	.word	0x20000e54
 8009080:	0800a128 	.word	0x0800a128

08009084 <xTimerCreateTimerTask>:
{
 8009084:	b510      	push	{r4, lr}
 8009086:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009088:	f7ff ffc4 	bl	8009014 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800908c:	4b12      	ldr	r3, [pc, #72]	; (80090d8 <xTimerCreateTimerTask+0x54>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	b1cb      	cbz	r3, 80090c6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009092:	2400      	movs	r4, #0
 8009094:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009096:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009098:	aa07      	add	r2, sp, #28
 800909a:	a906      	add	r1, sp, #24
 800909c:	a805      	add	r0, sp, #20
 800909e:	f7fe fc77 	bl	8007990 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090a2:	9b05      	ldr	r3, [sp, #20]
 80090a4:	9302      	str	r3, [sp, #8]
 80090a6:	9b06      	ldr	r3, [sp, #24]
 80090a8:	9301      	str	r3, [sp, #4]
 80090aa:	2302      	movs	r3, #2
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	4623      	mov	r3, r4
 80090b0:	9a07      	ldr	r2, [sp, #28]
 80090b2:	490a      	ldr	r1, [pc, #40]	; (80090dc <xTimerCreateTimerTask+0x58>)
 80090b4:	480a      	ldr	r0, [pc, #40]	; (80090e0 <xTimerCreateTimerTask+0x5c>)
 80090b6:	f7ff fb65 	bl	8008784 <xTaskCreateStatic>
 80090ba:	4a0a      	ldr	r2, [pc, #40]	; (80090e4 <xTimerCreateTimerTask+0x60>)
 80090bc:	6010      	str	r0, [r2, #0]
			if( xTimerTaskHandle != NULL )
 80090be:	b110      	cbz	r0, 80090c6 <xTimerCreateTimerTask+0x42>
}
 80090c0:	2001      	movs	r0, #1
 80090c2:	b008      	add	sp, #32
 80090c4:	bd10      	pop	{r4, pc}
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80090d6:	e7fe      	b.n	80090d6 <xTimerCreateTimerTask+0x52>
 80090d8:	20000f70 	.word	0x20000f70
 80090dc:	0800a130 	.word	0x0800a130
 80090e0:	080093e9 	.word	0x080093e9
 80090e4:	20000f74 	.word	0x20000f74

080090e8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80090e8:	b1c0      	cbz	r0, 800911c <xTimerGenericCommand+0x34>
{
 80090ea:	b510      	push	{r4, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	4614      	mov	r4, r2
 80090f0:	461a      	mov	r2, r3
 80090f2:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80090f4:	4816      	ldr	r0, [pc, #88]	; (8009150 <xTimerGenericCommand+0x68>)
 80090f6:	6800      	ldr	r0, [r0, #0]
 80090f8:	b338      	cbz	r0, 800914a <xTimerGenericCommand+0x62>
		xMessage.xMessageID = xCommandID;
 80090fa:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80090fc:	9401      	str	r4, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80090fe:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009100:	2905      	cmp	r1, #5
 8009102:	dc1c      	bgt.n	800913e <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009104:	f7ff fe4e 	bl	8008da4 <xTaskGetSchedulerState>
 8009108:	2802      	cmp	r0, #2
 800910a:	d010      	beq.n	800912e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800910c:	2300      	movs	r3, #0
 800910e:	461a      	mov	r2, r3
 8009110:	4669      	mov	r1, sp
 8009112:	480f      	ldr	r0, [pc, #60]	; (8009150 <xTimerGenericCommand+0x68>)
 8009114:	6800      	ldr	r0, [r0, #0]
 8009116:	f7fe fdf7 	bl	8007d08 <xQueueGenericSend>
 800911a:	e014      	b.n	8009146 <xTimerGenericCommand+0x5e>
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800912c:	e7fe      	b.n	800912c <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800912e:	2300      	movs	r3, #0
 8009130:	9a06      	ldr	r2, [sp, #24]
 8009132:	4669      	mov	r1, sp
 8009134:	4806      	ldr	r0, [pc, #24]	; (8009150 <xTimerGenericCommand+0x68>)
 8009136:	6800      	ldr	r0, [r0, #0]
 8009138:	f7fe fde6 	bl	8007d08 <xQueueGenericSend>
 800913c:	e003      	b.n	8009146 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800913e:	2300      	movs	r3, #0
 8009140:	4669      	mov	r1, sp
 8009142:	f7fe fec7 	bl	8007ed4 <xQueueGenericSendFromISR>
}
 8009146:	b004      	add	sp, #16
 8009148:	bd10      	pop	{r4, pc}
BaseType_t xReturn = pdFAIL;
 800914a:	2000      	movs	r0, #0
	return xReturn;
 800914c:	e7fb      	b.n	8009146 <xTimerGenericCommand+0x5e>
 800914e:	bf00      	nop
 8009150:	20000f70 	.word	0x20000f70

08009154 <prvSwitchTimerLists>:
{
 8009154:	b570      	push	{r4, r5, r6, lr}
 8009156:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009158:	4b1b      	ldr	r3, [pc, #108]	; (80091c8 <prvSwitchTimerLists+0x74>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	b362      	cbz	r2, 80091ba <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009164:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009166:	1d25      	adds	r5, r4, #4
 8009168:	4628      	mov	r0, r5
 800916a:	f7fe fc4f 	bl	8007a0c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800916e:	6a23      	ldr	r3, [r4, #32]
 8009170:	4620      	mov	r0, r4
 8009172:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009174:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009178:	f013 0f04 	tst.w	r3, #4
 800917c:	d0ec      	beq.n	8009158 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800917e:	69a3      	ldr	r3, [r4, #24]
 8009180:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009182:	429e      	cmp	r6, r3
 8009184:	d207      	bcs.n	8009196 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009186:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009188:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800918a:	4629      	mov	r1, r5
 800918c:	4b0e      	ldr	r3, [pc, #56]	; (80091c8 <prvSwitchTimerLists+0x74>)
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	f7fe fc23 	bl	80079da <vListInsert>
 8009194:	e7e0      	b.n	8009158 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009196:	2100      	movs	r1, #0
 8009198:	9100      	str	r1, [sp, #0]
 800919a:	460b      	mov	r3, r1
 800919c:	4632      	mov	r2, r6
 800919e:	4620      	mov	r0, r4
 80091a0:	f7ff ffa2 	bl	80090e8 <xTimerGenericCommand>
				configASSERT( xResult );
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d1d7      	bne.n	8009158 <prvSwitchTimerLists+0x4>
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	e7fe      	b.n	80091b8 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 80091ba:	4a04      	ldr	r2, [pc, #16]	; (80091cc <prvSwitchTimerLists+0x78>)
 80091bc:	6810      	ldr	r0, [r2, #0]
 80091be:	4902      	ldr	r1, [pc, #8]	; (80091c8 <prvSwitchTimerLists+0x74>)
 80091c0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80091c2:	6013      	str	r3, [r2, #0]
}
 80091c4:	b002      	add	sp, #8
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	20000e4c 	.word	0x20000e4c
 80091cc:	20000e50 	.word	0x20000e50

080091d0 <prvSampleTimeNow>:
{
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80091d4:	f7ff fb96 	bl	8008904 <xTaskGetTickCount>
 80091d8:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80091da:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <prvSampleTimeNow+0x28>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4283      	cmp	r3, r0
 80091e0:	d805      	bhi.n	80091ee <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 80091e2:	2300      	movs	r3, #0
 80091e4:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 80091e6:	4b04      	ldr	r3, [pc, #16]	; (80091f8 <prvSampleTimeNow+0x28>)
 80091e8:	601c      	str	r4, [r3, #0]
}
 80091ea:	4620      	mov	r0, r4
 80091ec:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 80091ee:	f7ff ffb1 	bl	8009154 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091f2:	2301      	movs	r3, #1
 80091f4:	602b      	str	r3, [r5, #0]
 80091f6:	e7f6      	b.n	80091e6 <prvSampleTimeNow+0x16>
 80091f8:	20000f1c 	.word	0x20000f1c

080091fc <prvProcessExpiredTimer>:
{
 80091fc:	b570      	push	{r4, r5, r6, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	4605      	mov	r5, r0
 8009202:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009204:	4b17      	ldr	r3, [pc, #92]	; (8009264 <prvProcessExpiredTimer+0x68>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800920c:	1d20      	adds	r0, r4, #4
 800920e:	f7fe fbfd 	bl	8007a0c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009212:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009216:	f013 0f04 	tst.w	r3, #4
 800921a:	d108      	bne.n	800922e <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800921c:	f023 0301 	bic.w	r3, r3, #1
 8009220:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009224:	6a23      	ldr	r3, [r4, #32]
 8009226:	4620      	mov	r0, r4
 8009228:	4798      	blx	r3
}
 800922a:	b002      	add	sp, #8
 800922c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800922e:	69a1      	ldr	r1, [r4, #24]
 8009230:	462b      	mov	r3, r5
 8009232:	4632      	mov	r2, r6
 8009234:	4429      	add	r1, r5
 8009236:	4620      	mov	r0, r4
 8009238:	f7ff fec8 	bl	8008fcc <prvInsertTimerInActiveList>
 800923c:	2800      	cmp	r0, #0
 800923e:	d0f1      	beq.n	8009224 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009240:	2100      	movs	r1, #0
 8009242:	9100      	str	r1, [sp, #0]
 8009244:	460b      	mov	r3, r1
 8009246:	462a      	mov	r2, r5
 8009248:	4620      	mov	r0, r4
 800924a:	f7ff ff4d 	bl	80090e8 <xTimerGenericCommand>
			configASSERT( xResult );
 800924e:	2800      	cmp	r0, #0
 8009250:	d1e8      	bne.n	8009224 <prvProcessExpiredTimer+0x28>
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	e7fe      	b.n	8009262 <prvProcessExpiredTimer+0x66>
 8009264:	20000e4c 	.word	0x20000e4c

08009268 <prvProcessTimerOrBlockTask>:
{
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	4606      	mov	r6, r0
 800926e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8009270:	f7ff fb40 	bl	80088f4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009274:	a801      	add	r0, sp, #4
 8009276:	f7ff ffab 	bl	80091d0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800927a:	9b01      	ldr	r3, [sp, #4]
 800927c:	bb23      	cbnz	r3, 80092c8 <prvProcessTimerOrBlockTask+0x60>
 800927e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009280:	b90c      	cbnz	r4, 8009286 <prvProcessTimerOrBlockTask+0x1e>
 8009282:	42b0      	cmp	r0, r6
 8009284:	d217      	bcs.n	80092b6 <prvProcessTimerOrBlockTask+0x4e>
				if( xListWasEmpty != pdFALSE )
 8009286:	b124      	cbz	r4, 8009292 <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009288:	4a11      	ldr	r2, [pc, #68]	; (80092d0 <prvProcessTimerOrBlockTask+0x68>)
 800928a:	6812      	ldr	r2, [r2, #0]
 800928c:	6812      	ldr	r2, [r2, #0]
 800928e:	b9ca      	cbnz	r2, 80092c4 <prvProcessTimerOrBlockTask+0x5c>
 8009290:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009292:	4622      	mov	r2, r4
 8009294:	1b71      	subs	r1, r6, r5
 8009296:	4b0f      	ldr	r3, [pc, #60]	; (80092d4 <prvProcessTimerOrBlockTask+0x6c>)
 8009298:	6818      	ldr	r0, [r3, #0]
 800929a:	f7ff f8c7 	bl	800842c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800929e:	f7ff fbc5 	bl	8008a2c <xTaskResumeAll>
 80092a2:	b998      	cbnz	r0, 80092cc <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 80092a4:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <prvProcessTimerOrBlockTask+0x70>)
 80092a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	e00a      	b.n	80092cc <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
 80092b6:	f7ff fbb9 	bl	8008a2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092ba:	4629      	mov	r1, r5
 80092bc:	4630      	mov	r0, r6
 80092be:	f7ff ff9d 	bl	80091fc <prvProcessExpiredTimer>
 80092c2:	e003      	b.n	80092cc <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092c4:	461c      	mov	r4, r3
 80092c6:	e7e4      	b.n	8009292 <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 80092c8:	f7ff fbb0 	bl	8008a2c <xTaskResumeAll>
}
 80092cc:	b002      	add	sp, #8
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
 80092d0:	20000e50 	.word	0x20000e50
 80092d4:	20000f70 	.word	0x20000f70
 80092d8:	e000ed04 	.word	0xe000ed04

080092dc <prvProcessReceivedCommands>:
{
 80092dc:	b510      	push	{r4, lr}
 80092de:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092e0:	e006      	b.n	80092f0 <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092e2:	9907      	ldr	r1, [sp, #28]
 80092e4:	9806      	ldr	r0, [sp, #24]
 80092e6:	9b05      	ldr	r3, [sp, #20]
 80092e8:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092ea:	9b04      	ldr	r3, [sp, #16]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	da0b      	bge.n	8009308 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092f0:	2200      	movs	r2, #0
 80092f2:	a904      	add	r1, sp, #16
 80092f4:	4b3b      	ldr	r3, [pc, #236]	; (80093e4 <prvProcessReceivedCommands+0x108>)
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	f7fe feae 	bl	8008058 <xQueueReceive>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d06f      	beq.n	80093e0 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009300:	9b04      	ldr	r3, [sp, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	daf1      	bge.n	80092ea <prvProcessReceivedCommands+0xe>
 8009306:	e7ec      	b.n	80092e2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009308:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800930a:	6963      	ldr	r3, [r4, #20]
 800930c:	b113      	cbz	r3, 8009314 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800930e:	1d20      	adds	r0, r4, #4
 8009310:	f7fe fb7c 	bl	8007a0c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009314:	a803      	add	r0, sp, #12
 8009316:	f7ff ff5b 	bl	80091d0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800931a:	9b04      	ldr	r3, [sp, #16]
 800931c:	2b09      	cmp	r3, #9
 800931e:	d8e7      	bhi.n	80092f0 <prvProcessReceivedCommands+0x14>
 8009320:	e8df f003 	tbb	[pc, r3]
 8009324:	30050505 	.word	0x30050505
 8009328:	05055037 	.word	0x05055037
 800932c:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800932e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009332:	f043 0301 	orr.w	r3, r3, #1
 8009336:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800933a:	9b05      	ldr	r3, [sp, #20]
 800933c:	69a1      	ldr	r1, [r4, #24]
 800933e:	4602      	mov	r2, r0
 8009340:	4419      	add	r1, r3
 8009342:	4620      	mov	r0, r4
 8009344:	f7ff fe42 	bl	8008fcc <prvInsertTimerInActiveList>
 8009348:	2800      	cmp	r0, #0
 800934a:	d0d1      	beq.n	80092f0 <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800934c:	6a23      	ldr	r3, [r4, #32]
 800934e:	4620      	mov	r0, r4
 8009350:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009352:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009356:	f013 0f04 	tst.w	r3, #4
 800935a:	d0c9      	beq.n	80092f0 <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800935c:	69a2      	ldr	r2, [r4, #24]
 800935e:	2100      	movs	r1, #0
 8009360:	9100      	str	r1, [sp, #0]
 8009362:	460b      	mov	r3, r1
 8009364:	9805      	ldr	r0, [sp, #20]
 8009366:	4402      	add	r2, r0
 8009368:	4620      	mov	r0, r4
 800936a:	f7ff febd 	bl	80090e8 <xTimerGenericCommand>
							configASSERT( xResult );
 800936e:	2800      	cmp	r0, #0
 8009370:	d1be      	bne.n	80092f0 <prvProcessReceivedCommands+0x14>
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	e7fe      	b.n	8009382 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009384:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009388:	f023 0301 	bic.w	r3, r3, #1
 800938c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8009390:	e7ae      	b.n	80092f0 <prvProcessReceivedCommands+0x14>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009392:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009396:	f043 0301 	orr.w	r3, r3, #1
 800939a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800939e:	9905      	ldr	r1, [sp, #20]
 80093a0:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093a2:	b131      	cbz	r1, 80093b2 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093a4:	4603      	mov	r3, r0
 80093a6:	4602      	mov	r2, r0
 80093a8:	4401      	add	r1, r0
 80093aa:	4620      	mov	r0, r4
 80093ac:	f7ff fe0e 	bl	8008fcc <prvInsertTimerInActiveList>
					break;
 80093b0:	e79e      	b.n	80092f0 <prvProcessReceivedCommands+0x14>
 80093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093c2:	e7fe      	b.n	80093c2 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80093c4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80093c8:	f013 0f02 	tst.w	r3, #2
 80093cc:	d004      	beq.n	80093d8 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093ce:	f023 0301 	bic.w	r3, r3, #1
 80093d2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80093d6:	e78b      	b.n	80092f0 <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 faaf 	bl	800993c <vPortFree>
 80093de:	e787      	b.n	80092f0 <prvProcessReceivedCommands+0x14>
}
 80093e0:	b008      	add	sp, #32
 80093e2:	bd10      	pop	{r4, pc}
 80093e4:	20000f70 	.word	0x20000f70

080093e8 <prvTimerTask>:
{
 80093e8:	b500      	push	{lr}
 80093ea:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093ec:	a801      	add	r0, sp, #4
 80093ee:	f7ff fddd 	bl	8008fac <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093f2:	9901      	ldr	r1, [sp, #4]
 80093f4:	f7ff ff38 	bl	8009268 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80093f8:	f7ff ff70 	bl	80092dc <prvProcessReceivedCommands>
	for( ;; )
 80093fc:	e7f6      	b.n	80093ec <prvTimerTask+0x4>
	...

08009400 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009400:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009402:	2300      	movs	r3, #0
 8009404:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009406:	4b0d      	ldr	r3, [pc, #52]	; (800943c <prvTaskExitError+0x3c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800940e:	d008      	beq.n	8009422 <prvTaskExitError+0x22>
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	e7fe      	b.n	8009420 <prvTaskExitError+0x20>
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009432:	9b01      	ldr	r3, [sp, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d0fc      	beq.n	8009432 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009438:	b002      	add	sp, #8
 800943a:	4770      	bx	lr
 800943c:	2000012c 	.word	0x2000012c

08009440 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009440:	4808      	ldr	r0, [pc, #32]	; (8009464 <prvPortStartFirstTask+0x24>)
 8009442:	6800      	ldr	r0, [r0, #0]
 8009444:	6800      	ldr	r0, [r0, #0]
 8009446:	f380 8808 	msr	MSP, r0
 800944a:	f04f 0000 	mov.w	r0, #0
 800944e:	f380 8814 	msr	CONTROL, r0
 8009452:	b662      	cpsie	i
 8009454:	b661      	cpsie	f
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	df00      	svc	0
 8009460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009462:	0000      	.short	0x0000
 8009464:	e000ed08 	.word	0xe000ed08

08009468 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009468:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009478 <vPortEnableVFP+0x10>
 800946c:	6801      	ldr	r1, [r0, #0]
 800946e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009472:	6001      	str	r1, [r0, #0]
 8009474:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009476:	0000      	.short	0x0000
 8009478:	e000ed88 	.word	0xe000ed88

0800947c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800947c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009480:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009484:	f021 0101 	bic.w	r1, r1, #1
 8009488:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800948c:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <pxPortInitialiseStack+0x28>)
 800948e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009492:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009496:	f06f 0302 	mvn.w	r3, #2
 800949a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800949e:	3844      	subs	r0, #68	; 0x44
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	08009401 	.word	0x08009401
	...

080094b0 <SVC_Handler>:
	__asm volatile (
 80094b0:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <pxCurrentTCBConst2>)
 80094b2:	6819      	ldr	r1, [r3, #0]
 80094b4:	6808      	ldr	r0, [r1, #0]
 80094b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ba:	f380 8809 	msr	PSP, r0
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f04f 0000 	mov.w	r0, #0
 80094c6:	f380 8811 	msr	BASEPRI, r0
 80094ca:	4770      	bx	lr
 80094cc:	f3af 8000 	nop.w

080094d0 <pxCurrentTCBConst2>:
 80094d0:	20000950 	.word	0x20000950

080094d4 <vPortEnterCritical>:
 80094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80094e4:	4a0a      	ldr	r2, [pc, #40]	; (8009510 <vPortEnterCritical+0x3c>)
 80094e6:	6813      	ldr	r3, [r2, #0]
 80094e8:	3301      	adds	r3, #1
 80094ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d000      	beq.n	80094f2 <vPortEnterCritical+0x1e>
}
 80094f0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094f2:	4b08      	ldr	r3, [pc, #32]	; (8009514 <vPortEnterCritical+0x40>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094fa:	d0f9      	beq.n	80094f0 <vPortEnterCritical+0x1c>
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	e7fe      	b.n	800950c <vPortEnterCritical+0x38>
 800950e:	bf00      	nop
 8009510:	2000012c 	.word	0x2000012c
 8009514:	e000ed04 	.word	0xe000ed04

08009518 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009518:	4b09      	ldr	r3, [pc, #36]	; (8009540 <vPortExitCritical+0x28>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	b943      	cbnz	r3, 8009530 <vPortExitCritical+0x18>
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	e7fe      	b.n	800952e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009530:	3b01      	subs	r3, #1
 8009532:	4a03      	ldr	r2, [pc, #12]	; (8009540 <vPortExitCritical+0x28>)
 8009534:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009536:	b90b      	cbnz	r3, 800953c <vPortExitCritical+0x24>
	__asm volatile
 8009538:	f383 8811 	msr	BASEPRI, r3
}
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	2000012c 	.word	0x2000012c
	...

08009550 <PendSV_Handler>:
	__asm volatile
 8009550:	f3ef 8009 	mrs	r0, PSP
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	4b15      	ldr	r3, [pc, #84]	; (80095b0 <pxCurrentTCBConst>)
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	f01e 0f10 	tst.w	lr, #16
 8009560:	bf08      	it	eq
 8009562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956a:	6010      	str	r0, [r2, #0]
 800956c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009574:	f380 8811 	msr	BASEPRI, r0
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f7ff faf6 	bl	8008b70 <vTaskSwitchContext>
 8009584:	f04f 0000 	mov.w	r0, #0
 8009588:	f380 8811 	msr	BASEPRI, r0
 800958c:	bc09      	pop	{r0, r3}
 800958e:	6819      	ldr	r1, [r3, #0]
 8009590:	6808      	ldr	r0, [r1, #0]
 8009592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009596:	f01e 0f10 	tst.w	lr, #16
 800959a:	bf08      	it	eq
 800959c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095a0:	f380 8809 	msr	PSP, r0
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	f3af 8000 	nop.w

080095b0 <pxCurrentTCBConst>:
 80095b0:	20000950 	.word	0x20000950

080095b4 <xPortSysTickHandler>:
{
 80095b4:	b508      	push	{r3, lr}
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80095c6:	f7ff f9a3 	bl	8008910 <xTaskIncrementTick>
 80095ca:	b118      	cbz	r0, 80095d4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095cc:	4b03      	ldr	r3, [pc, #12]	; (80095dc <xPortSysTickHandler+0x28>)
 80095ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80095d4:	2300      	movs	r3, #0
 80095d6:	f383 8811 	msr	BASEPRI, r3
}
 80095da:	bd08      	pop	{r3, pc}
 80095dc:	e000ed04 	.word	0xe000ed04

080095e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095e0:	4a08      	ldr	r2, [pc, #32]	; (8009604 <vPortSetupTimerInterrupt+0x24>)
 80095e2:	2300      	movs	r3, #0
 80095e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095e6:	4908      	ldr	r1, [pc, #32]	; (8009608 <vPortSetupTimerInterrupt+0x28>)
 80095e8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095ea:	4b08      	ldr	r3, [pc, #32]	; (800960c <vPortSetupTimerInterrupt+0x2c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4908      	ldr	r1, [pc, #32]	; (8009610 <vPortSetupTimerInterrupt+0x30>)
 80095f0:	fba1 1303 	umull	r1, r3, r1, r3
 80095f4:	099b      	lsrs	r3, r3, #6
 80095f6:	3b01      	subs	r3, #1
 80095f8:	4906      	ldr	r1, [pc, #24]	; (8009614 <vPortSetupTimerInterrupt+0x34>)
 80095fa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095fc:	2307      	movs	r3, #7
 80095fe:	6013      	str	r3, [r2, #0]
}
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	e000e010 	.word	0xe000e010
 8009608:	e000e018 	.word	0xe000e018
 800960c:	20000010 	.word	0x20000010
 8009610:	10624dd3 	.word	0x10624dd3
 8009614:	e000e014 	.word	0xe000e014

08009618 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009618:	4b3a      	ldr	r3, [pc, #232]	; (8009704 <xPortStartScheduler+0xec>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	4b3a      	ldr	r3, [pc, #232]	; (8009708 <xPortStartScheduler+0xf0>)
 800961e:	429a      	cmp	r2, r3
 8009620:	d029      	beq.n	8009676 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009622:	4b38      	ldr	r3, [pc, #224]	; (8009704 <xPortStartScheduler+0xec>)
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	4b39      	ldr	r3, [pc, #228]	; (800970c <xPortStartScheduler+0xf4>)
 8009628:	429a      	cmp	r2, r3
 800962a:	d02d      	beq.n	8009688 <xPortStartScheduler+0x70>
{
 800962c:	b510      	push	{r4, lr}
 800962e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009630:	4b37      	ldr	r3, [pc, #220]	; (8009710 <xPortStartScheduler+0xf8>)
 8009632:	781a      	ldrb	r2, [r3, #0]
 8009634:	b2d2      	uxtb	r2, r2
 8009636:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009638:	22ff      	movs	r2, #255	; 0xff
 800963a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009644:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009648:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800964c:	4a31      	ldr	r2, [pc, #196]	; (8009714 <xPortStartScheduler+0xfc>)
 800964e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009650:	4b31      	ldr	r3, [pc, #196]	; (8009718 <xPortStartScheduler+0x100>)
 8009652:	2207      	movs	r2, #7
 8009654:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009656:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800965a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800965e:	d01c      	beq.n	800969a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8009660:	4a2d      	ldr	r2, [pc, #180]	; (8009718 <xPortStartScheduler+0x100>)
 8009662:	6813      	ldr	r3, [r2, #0]
 8009664:	3b01      	subs	r3, #1
 8009666:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009668:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800966c:	005b      	lsls	r3, r3, #1
 800966e:	b2db      	uxtb	r3, r3
 8009670:	f88d 3003 	strb.w	r3, [sp, #3]
 8009674:	e7ef      	b.n	8009656 <xPortStartScheduler+0x3e>
	__asm volatile
 8009676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009686:	e7fe      	b.n	8009686 <xPortStartScheduler+0x6e>
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009698:	e7fe      	b.n	8009698 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800969a:	4b1f      	ldr	r3, [pc, #124]	; (8009718 <xPortStartScheduler+0x100>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d008      	beq.n	80096b4 <xPortStartScheduler+0x9c>
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	e7fe      	b.n	80096b2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80096b4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096ba:	4a17      	ldr	r2, [pc, #92]	; (8009718 <xPortStartScheduler+0x100>)
 80096bc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80096be:	9b01      	ldr	r3, [sp, #4]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	4a13      	ldr	r2, [pc, #76]	; (8009710 <xPortStartScheduler+0xf8>)
 80096c4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096c6:	4b15      	ldr	r3, [pc, #84]	; (800971c <xPortStartScheduler+0x104>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80096ce:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80096d6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80096d8:	f7ff ff82 	bl	80095e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80096dc:	2400      	movs	r4, #0
 80096de:	4b10      	ldr	r3, [pc, #64]	; (8009720 <xPortStartScheduler+0x108>)
 80096e0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80096e2:	f7ff fec1 	bl	8009468 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80096e6:	4a0f      	ldr	r2, [pc, #60]	; (8009724 <xPortStartScheduler+0x10c>)
 80096e8:	6813      	ldr	r3, [r2, #0]
 80096ea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80096ee:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80096f0:	f7ff fea6 	bl	8009440 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80096f4:	f7ff fa3c 	bl	8008b70 <vTaskSwitchContext>
	prvTaskExitError();
 80096f8:	f7ff fe82 	bl	8009400 <prvTaskExitError>
}
 80096fc:	4620      	mov	r0, r4
 80096fe:	b002      	add	sp, #8
 8009700:	bd10      	pop	{r4, pc}
 8009702:	bf00      	nop
 8009704:	e000ed00 	.word	0xe000ed00
 8009708:	410fc271 	.word	0x410fc271
 800970c:	410fc270 	.word	0x410fc270
 8009710:	e000e400 	.word	0xe000e400
 8009714:	20000f78 	.word	0x20000f78
 8009718:	20000f7c 	.word	0x20000f7c
 800971c:	e000ed20 	.word	0xe000ed20
 8009720:	2000012c 	.word	0x2000012c
 8009724:	e000ef34 	.word	0xe000ef34

08009728 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009728:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800972c:	2b0f      	cmp	r3, #15
 800972e:	d90f      	bls.n	8009750 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009730:	4a10      	ldr	r2, [pc, #64]	; (8009774 <vPortValidateInterruptPriority+0x4c>)
 8009732:	5c9b      	ldrb	r3, [r3, r2]
 8009734:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009736:	4a10      	ldr	r2, [pc, #64]	; (8009778 <vPortValidateInterruptPriority+0x50>)
 8009738:	7812      	ldrb	r2, [r2, #0]
 800973a:	429a      	cmp	r2, r3
 800973c:	d908      	bls.n	8009750 <vPortValidateInterruptPriority+0x28>
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	e7fe      	b.n	800974e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009750:	4b0a      	ldr	r3, [pc, #40]	; (800977c <vPortValidateInterruptPriority+0x54>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009758:	4a09      	ldr	r2, [pc, #36]	; (8009780 <vPortValidateInterruptPriority+0x58>)
 800975a:	6812      	ldr	r2, [r2, #0]
 800975c:	4293      	cmp	r3, r2
 800975e:	d908      	bls.n	8009772 <vPortValidateInterruptPriority+0x4a>
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	e7fe      	b.n	8009770 <vPortValidateInterruptPriority+0x48>
	}
 8009772:	4770      	bx	lr
 8009774:	e000e3f0 	.word	0xe000e3f0
 8009778:	20000f78 	.word	0x20000f78
 800977c:	e000ed0c 	.word	0xe000ed0c
 8009780:	20000f7c 	.word	0x20000f7c

08009784 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009784:	4a12      	ldr	r2, [pc, #72]	; (80097d0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009786:	f012 0f07 	tst.w	r2, #7
 800978a:	d01e      	beq.n	80097ca <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800978c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800978e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009792:	f5c1 6340 	rsb	r3, r1, #3072	; 0xc00
 8009796:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009798:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800979a:	480e      	ldr	r0, [pc, #56]	; (80097d4 <prvHeapInit+0x50>)
 800979c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800979e:	2100      	movs	r1, #0
 80097a0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097a2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80097a4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097a6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80097aa:	480b      	ldr	r0, [pc, #44]	; (80097d8 <prvHeapInit+0x54>)
 80097ac:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80097ae:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097b0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097b2:	1a99      	subs	r1, r3, r2
 80097b4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097b6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097b8:	4b08      	ldr	r3, [pc, #32]	; (80097dc <prvHeapInit+0x58>)
 80097ba:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097bc:	4b08      	ldr	r3, [pc, #32]	; (80097e0 <prvHeapInit+0x5c>)
 80097be:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097c0:	4b08      	ldr	r3, [pc, #32]	; (80097e4 <prvHeapInit+0x60>)
 80097c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097c6:	601a      	str	r2, [r3, #0]
}
 80097c8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80097ce:	e7e4      	b.n	800979a <prvHeapInit+0x16>
 80097d0:	20000f84 	.word	0x20000f84
 80097d4:	20001b98 	.word	0x20001b98
 80097d8:	20000f80 	.word	0x20000f80
 80097dc:	20001b8c 	.word	0x20001b8c
 80097e0:	20001b88 	.word	0x20001b88
 80097e4:	20001b84 	.word	0x20001b84

080097e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097e8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097ea:	4b13      	ldr	r3, [pc, #76]	; (8009838 <prvInsertBlockIntoFreeList+0x50>)
 80097ec:	461a      	mov	r2, r3
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4283      	cmp	r3, r0
 80097f2:	d3fb      	bcc.n	80097ec <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80097f4:	6851      	ldr	r1, [r2, #4]
 80097f6:	1854      	adds	r4, r2, r1
 80097f8:	4284      	cmp	r4, r0
 80097fa:	d00a      	beq.n	8009812 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097fc:	6841      	ldr	r1, [r0, #4]
 80097fe:	1844      	adds	r4, r0, r1
 8009800:	42a3      	cmp	r3, r4
 8009802:	d00b      	beq.n	800981c <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009804:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009806:	4290      	cmp	r0, r2
 8009808:	d000      	beq.n	800980c <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800980a:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800980c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009810:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009812:	6840      	ldr	r0, [r0, #4]
 8009814:	4401      	add	r1, r0
 8009816:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8009818:	4610      	mov	r0, r2
 800981a:	e7ef      	b.n	80097fc <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800981c:	4c07      	ldr	r4, [pc, #28]	; (800983c <prvInsertBlockIntoFreeList+0x54>)
 800981e:	6824      	ldr	r4, [r4, #0]
 8009820:	42a3      	cmp	r3, r4
 8009822:	d006      	beq.n	8009832 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	4419      	add	r1, r3
 8009828:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800982a:	6813      	ldr	r3, [r2, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6003      	str	r3, [r0, #0]
 8009830:	e7e9      	b.n	8009806 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009832:	6004      	str	r4, [r0, #0]
 8009834:	e7e7      	b.n	8009806 <prvInsertBlockIntoFreeList+0x1e>
 8009836:	bf00      	nop
 8009838:	20001b98 	.word	0x20001b98
 800983c:	20000f80 	.word	0x20000f80

08009840 <pvPortMalloc>:
{
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009844:	f7ff f856 	bl	80088f4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009848:	4b36      	ldr	r3, [pc, #216]	; (8009924 <pvPortMalloc+0xe4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	b1a3      	cbz	r3, 8009878 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800984e:	4b36      	ldr	r3, [pc, #216]	; (8009928 <pvPortMalloc+0xe8>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	421c      	tst	r4, r3
 8009854:	d14e      	bne.n	80098f4 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8009856:	b134      	cbz	r4, 8009866 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8009858:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800985a:	f014 0f07 	tst.w	r4, #7
 800985e:	d002      	beq.n	8009866 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009860:	f024 0407 	bic.w	r4, r4, #7
 8009864:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009866:	2c00      	cmp	r4, #0
 8009868:	d046      	beq.n	80098f8 <pvPortMalloc+0xb8>
 800986a:	4b30      	ldr	r3, [pc, #192]	; (800992c <pvPortMalloc+0xec>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	42a3      	cmp	r3, r4
 8009870:	d351      	bcc.n	8009916 <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 8009872:	4b2f      	ldr	r3, [pc, #188]	; (8009930 <pvPortMalloc+0xf0>)
 8009874:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009876:	e004      	b.n	8009882 <pvPortMalloc+0x42>
			prvHeapInit();
 8009878:	f7ff ff84 	bl	8009784 <prvHeapInit>
 800987c:	e7e7      	b.n	800984e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800987e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8009880:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009882:	686a      	ldr	r2, [r5, #4]
 8009884:	42a2      	cmp	r2, r4
 8009886:	d202      	bcs.n	800988e <pvPortMalloc+0x4e>
 8009888:	682a      	ldr	r2, [r5, #0]
 800988a:	2a00      	cmp	r2, #0
 800988c:	d1f7      	bne.n	800987e <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800988e:	4a25      	ldr	r2, [pc, #148]	; (8009924 <pvPortMalloc+0xe4>)
 8009890:	6812      	ldr	r2, [r2, #0]
 8009892:	42aa      	cmp	r2, r5
 8009894:	d041      	beq.n	800991a <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009896:	681e      	ldr	r6, [r3, #0]
 8009898:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800989a:	682a      	ldr	r2, [r5, #0]
 800989c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800989e:	686b      	ldr	r3, [r5, #4]
 80098a0:	1b1b      	subs	r3, r3, r4
 80098a2:	2b10      	cmp	r3, #16
 80098a4:	d910      	bls.n	80098c8 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80098a6:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098a8:	f010 0f07 	tst.w	r0, #7
 80098ac:	d008      	beq.n	80098c0 <pvPortMalloc+0x80>
 80098ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	e7fe      	b.n	80098be <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098c0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098c2:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098c4:	f7ff ff90 	bl	80097e8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098c8:	686a      	ldr	r2, [r5, #4]
 80098ca:	4918      	ldr	r1, [pc, #96]	; (800992c <pvPortMalloc+0xec>)
 80098cc:	680b      	ldr	r3, [r1, #0]
 80098ce:	1a9b      	subs	r3, r3, r2
 80098d0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098d2:	4918      	ldr	r1, [pc, #96]	; (8009934 <pvPortMalloc+0xf4>)
 80098d4:	6809      	ldr	r1, [r1, #0]
 80098d6:	428b      	cmp	r3, r1
 80098d8:	d201      	bcs.n	80098de <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098da:	4916      	ldr	r1, [pc, #88]	; (8009934 <pvPortMalloc+0xf4>)
 80098dc:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098de:	4b12      	ldr	r3, [pc, #72]	; (8009928 <pvPortMalloc+0xe8>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098e6:	2300      	movs	r3, #0
 80098e8:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 80098ea:	4a13      	ldr	r2, [pc, #76]	; (8009938 <pvPortMalloc+0xf8>)
 80098ec:	6813      	ldr	r3, [r2, #0]
 80098ee:	3301      	adds	r3, #1
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	e002      	b.n	80098fa <pvPortMalloc+0xba>
void *pvReturn = NULL;
 80098f4:	2600      	movs	r6, #0
 80098f6:	e000      	b.n	80098fa <pvPortMalloc+0xba>
 80098f8:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 80098fa:	f7ff f897 	bl	8008a2c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098fe:	f016 0f07 	tst.w	r6, #7
 8009902:	d00c      	beq.n	800991e <pvPortMalloc+0xde>
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	e7fe      	b.n	8009914 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 8009916:	2600      	movs	r6, #0
 8009918:	e7ef      	b.n	80098fa <pvPortMalloc+0xba>
 800991a:	2600      	movs	r6, #0
 800991c:	e7ed      	b.n	80098fa <pvPortMalloc+0xba>
}
 800991e:	4630      	mov	r0, r6
 8009920:	bd70      	pop	{r4, r5, r6, pc}
 8009922:	bf00      	nop
 8009924:	20000f80 	.word	0x20000f80
 8009928:	20001b84 	.word	0x20001b84
 800992c:	20001b88 	.word	0x20001b88
 8009930:	20001b98 	.word	0x20001b98
 8009934:	20001b8c 	.word	0x20001b8c
 8009938:	20001b90 	.word	0x20001b90

0800993c <vPortFree>:
	if( pv != NULL )
 800993c:	2800      	cmp	r0, #0
 800993e:	d034      	beq.n	80099aa <vPortFree+0x6e>
{
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8009944:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009948:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800994c:	4a17      	ldr	r2, [pc, #92]	; (80099ac <vPortFree+0x70>)
 800994e:	6812      	ldr	r2, [r2, #0]
 8009950:	4213      	tst	r3, r2
 8009952:	d108      	bne.n	8009966 <vPortFree+0x2a>
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	e7fe      	b.n	8009964 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009966:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800996a:	b141      	cbz	r1, 800997e <vPortFree+0x42>
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	e7fe      	b.n	800997c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800997e:	ea23 0302 	bic.w	r3, r3, r2
 8009982:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009986:	f7fe ffb5 	bl	80088f4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800998a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800998e:	4a08      	ldr	r2, [pc, #32]	; (80099b0 <vPortFree+0x74>)
 8009990:	6813      	ldr	r3, [r2, #0]
 8009992:	440b      	add	r3, r1
 8009994:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009996:	4628      	mov	r0, r5
 8009998:	f7ff ff26 	bl	80097e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800999c:	4a05      	ldr	r2, [pc, #20]	; (80099b4 <vPortFree+0x78>)
 800999e:	6813      	ldr	r3, [r2, #0]
 80099a0:	3301      	adds	r3, #1
 80099a2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80099a4:	f7ff f842 	bl	8008a2c <xTaskResumeAll>
}
 80099a8:	bd38      	pop	{r3, r4, r5, pc}
 80099aa:	4770      	bx	lr
 80099ac:	20001b84 	.word	0x20001b84
 80099b0:	20001b88 	.word	0x20001b88
 80099b4:	20001b94 	.word	0x20001b94

080099b8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80099b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80099ba:	2200      	movs	r2, #0
 80099bc:	490f      	ldr	r1, [pc, #60]	; (80099fc <MX_USB_Device_Init+0x44>)
 80099be:	4810      	ldr	r0, [pc, #64]	; (8009a00 <MX_USB_Device_Init+0x48>)
 80099c0:	f7fd f89b 	bl	8006afa <USBD_Init>
 80099c4:	b970      	cbnz	r0, 80099e4 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80099c6:	490f      	ldr	r1, [pc, #60]	; (8009a04 <MX_USB_Device_Init+0x4c>)
 80099c8:	480d      	ldr	r0, [pc, #52]	; (8009a00 <MX_USB_Device_Init+0x48>)
 80099ca:	f7fd f8ad 	bl	8006b28 <USBD_RegisterClass>
 80099ce:	b960      	cbnz	r0, 80099ea <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80099d0:	490d      	ldr	r1, [pc, #52]	; (8009a08 <MX_USB_Device_Init+0x50>)
 80099d2:	480b      	ldr	r0, [pc, #44]	; (8009a00 <MX_USB_Device_Init+0x48>)
 80099d4:	f7fd f85d 	bl	8006a92 <USBD_CDC_RegisterInterface>
 80099d8:	b950      	cbnz	r0, 80099f0 <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80099da:	4809      	ldr	r0, [pc, #36]	; (8009a00 <MX_USB_Device_Init+0x48>)
 80099dc:	f7fd f8bb 	bl	8006b56 <USBD_Start>
 80099e0:	b948      	cbnz	r0, 80099f6 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80099e2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80099e4:	f7f6 ffbe 	bl	8000964 <Error_Handler>
 80099e8:	e7ed      	b.n	80099c6 <MX_USB_Device_Init+0xe>
    Error_Handler();
 80099ea:	f7f6 ffbb 	bl	8000964 <Error_Handler>
 80099ee:	e7ef      	b.n	80099d0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80099f0:	f7f6 ffb8 	bl	8000964 <Error_Handler>
 80099f4:	e7f1      	b.n	80099da <MX_USB_Device_Init+0x22>
    Error_Handler();
 80099f6:	f7f6 ffb5 	bl	8000964 <Error_Handler>
}
 80099fa:	e7f2      	b.n	80099e2 <MX_USB_Device_Init+0x2a>
 80099fc:	20000144 	.word	0x20000144
 8009a00:	200021ac 	.word	0x200021ac
 8009a04:	2000001c 	.word	0x2000001c
 8009a08:	20000130 	.word	0x20000130

08009a0c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	4770      	bx	lr

08009a10 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8009a10:	2000      	movs	r0, #0
 8009a12:	4770      	bx	lr

08009a14 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8009a14:	2000      	movs	r0, #0
 8009a16:	4770      	bx	lr

08009a18 <CDC_Receive_FS>:
{
 8009a18:	b510      	push	{r4, lr}
 8009a1a:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a1c:	4c04      	ldr	r4, [pc, #16]	; (8009a30 <CDC_Receive_FS+0x18>)
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f7fd f849 	bl	8006ab6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a24:	4620      	mov	r0, r4
 8009a26:	f7fd f84f 	bl	8006ac8 <USBD_CDC_ReceivePacket>
}
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	bd10      	pop	{r4, pc}
 8009a2e:	bf00      	nop
 8009a30:	200021ac 	.word	0x200021ac

08009a34 <CDC_Init_FS>:
{
 8009a34:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a36:	4c06      	ldr	r4, [pc, #24]	; (8009a50 <CDC_Init_FS+0x1c>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	4906      	ldr	r1, [pc, #24]	; (8009a54 <CDC_Init_FS+0x20>)
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f7fd f82f 	bl	8006aa0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a42:	4905      	ldr	r1, [pc, #20]	; (8009a58 <CDC_Init_FS+0x24>)
 8009a44:	4620      	mov	r0, r4
 8009a46:	f7fd f836 	bl	8006ab6 <USBD_CDC_SetRxBuffer>
}
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	bd10      	pop	{r4, pc}
 8009a4e:	bf00      	nop
 8009a50:	200021ac 	.word	0x200021ac
 8009a54:	20002c7c 	.word	0x20002c7c
 8009a58:	2000247c 	.word	0x2000247c

08009a5c <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009a5c:	2312      	movs	r3, #18
 8009a5e:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 8009a60:	4800      	ldr	r0, [pc, #0]	; (8009a64 <USBD_CDC_DeviceDescriptor+0x8>)
 8009a62:	4770      	bx	lr
 8009a64:	20000164 	.word	0x20000164

08009a68 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a68:	2304      	movs	r3, #4
 8009a6a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8009a6c:	4800      	ldr	r0, [pc, #0]	; (8009a70 <USBD_CDC_LangIDStrDescriptor+0x8>)
 8009a6e:	4770      	bx	lr
 8009a70:	20000178 	.word	0x20000178

08009a74 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8009a74:	2300      	movs	r3, #0
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d217      	bcs.n	8009aaa <IntToUnicode+0x36>
{
 8009a7a:	b430      	push	{r4, r5}
 8009a7c:	e00b      	b.n	8009a96 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a7e:	3437      	adds	r4, #55	; 0x37
 8009a80:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8009a84:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8009a86:	005c      	lsls	r4, r3, #1
 8009a88:	3401      	adds	r4, #1
 8009a8a:	2500      	movs	r5, #0
 8009a8c:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8009a8e:	3301      	adds	r3, #1
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d207      	bcs.n	8009aa6 <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 8009a96:	0f04      	lsrs	r4, r0, #28
 8009a98:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8009a9c:	d2ef      	bcs.n	8009a7e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a9e:	3430      	adds	r4, #48	; 0x30
 8009aa0:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8009aa4:	e7ee      	b.n	8009a84 <IntToUnicode+0x10>
  }
}
 8009aa6:	bc30      	pop	{r4, r5}
 8009aa8:	4770      	bx	lr
 8009aaa:	4770      	bx	lr

08009aac <Get_SerialNum>:
{
 8009aac:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009aae:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <Get_SerialNum+0x2c>)
 8009ab0:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8009aba:	18c0      	adds	r0, r0, r3
 8009abc:	d100      	bne.n	8009ac0 <Get_SerialNum+0x14>
}
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ac0:	4d06      	ldr	r5, [pc, #24]	; (8009adc <Get_SerialNum+0x30>)
 8009ac2:	2208      	movs	r2, #8
 8009ac4:	1ca9      	adds	r1, r5, #2
 8009ac6:	f7ff ffd5 	bl	8009a74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009aca:	2204      	movs	r2, #4
 8009acc:	f105 0112 	add.w	r1, r5, #18
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f7ff ffcf 	bl	8009a74 <IntToUnicode>
}
 8009ad6:	e7f2      	b.n	8009abe <Get_SerialNum+0x12>
 8009ad8:	1fff7590 	.word	0x1fff7590
 8009adc:	2000017c 	.word	0x2000017c

08009ae0 <USBD_CDC_SerialStrDescriptor>:
{
 8009ae0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8009ae2:	231a      	movs	r3, #26
 8009ae4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8009ae6:	f7ff ffe1 	bl	8009aac <Get_SerialNum>
}
 8009aea:	4801      	ldr	r0, [pc, #4]	; (8009af0 <USBD_CDC_SerialStrDescriptor+0x10>)
 8009aec:	bd08      	pop	{r3, pc}
 8009aee:	bf00      	nop
 8009af0:	2000017c 	.word	0x2000017c

08009af4 <USBD_CDC_ProductStrDescriptor>:
{
 8009af4:	b508      	push	{r3, lr}
 8009af6:	460a      	mov	r2, r1
  if(speed == 0)
 8009af8:	b928      	cbnz	r0, 8009b06 <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009afa:	4905      	ldr	r1, [pc, #20]	; (8009b10 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8009afc:	4805      	ldr	r0, [pc, #20]	; (8009b14 <USBD_CDC_ProductStrDescriptor+0x20>)
 8009afe:	f7fd fca6 	bl	800744e <USBD_GetString>
}
 8009b02:	4803      	ldr	r0, [pc, #12]	; (8009b10 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8009b04:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009b06:	4902      	ldr	r1, [pc, #8]	; (8009b10 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8009b08:	4802      	ldr	r0, [pc, #8]	; (8009b14 <USBD_CDC_ProductStrDescriptor+0x20>)
 8009b0a:	f7fd fca0 	bl	800744e <USBD_GetString>
 8009b0e:	e7f8      	b.n	8009b02 <USBD_CDC_ProductStrDescriptor+0xe>
 8009b10:	2000347c 	.word	0x2000347c
 8009b14:	0800a138 	.word	0x0800a138

08009b18 <USBD_CDC_ManufacturerStrDescriptor>:
{
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b1c:	4c03      	ldr	r4, [pc, #12]	; (8009b2c <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 8009b1e:	4621      	mov	r1, r4
 8009b20:	4803      	ldr	r0, [pc, #12]	; (8009b30 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 8009b22:	f7fd fc94 	bl	800744e <USBD_GetString>
}
 8009b26:	4620      	mov	r0, r4
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	bf00      	nop
 8009b2c:	2000347c 	.word	0x2000347c
 8009b30:	0800a150 	.word	0x0800a150

08009b34 <USBD_CDC_ConfigStrDescriptor>:
{
 8009b34:	b508      	push	{r3, lr}
 8009b36:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8009b38:	b928      	cbnz	r0, 8009b46 <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009b3a:	4905      	ldr	r1, [pc, #20]	; (8009b50 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8009b3c:	4805      	ldr	r0, [pc, #20]	; (8009b54 <USBD_CDC_ConfigStrDescriptor+0x20>)
 8009b3e:	f7fd fc86 	bl	800744e <USBD_GetString>
}
 8009b42:	4803      	ldr	r0, [pc, #12]	; (8009b50 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8009b44:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009b46:	4902      	ldr	r1, [pc, #8]	; (8009b50 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8009b48:	4802      	ldr	r0, [pc, #8]	; (8009b54 <USBD_CDC_ConfigStrDescriptor+0x20>)
 8009b4a:	f7fd fc80 	bl	800744e <USBD_GetString>
 8009b4e:	e7f8      	b.n	8009b42 <USBD_CDC_ConfigStrDescriptor+0xe>
 8009b50:	2000347c 	.word	0x2000347c
 8009b54:	0800a164 	.word	0x0800a164

08009b58 <USBD_CDC_InterfaceStrDescriptor>:
{
 8009b58:	b508      	push	{r3, lr}
 8009b5a:	460a      	mov	r2, r1
  if(speed == 0)
 8009b5c:	b928      	cbnz	r0, 8009b6a <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009b5e:	4905      	ldr	r1, [pc, #20]	; (8009b74 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8009b60:	4805      	ldr	r0, [pc, #20]	; (8009b78 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 8009b62:	f7fd fc74 	bl	800744e <USBD_GetString>
}
 8009b66:	4803      	ldr	r0, [pc, #12]	; (8009b74 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8009b68:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009b6a:	4902      	ldr	r1, [pc, #8]	; (8009b74 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8009b6c:	4802      	ldr	r0, [pc, #8]	; (8009b78 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 8009b6e:	f7fd fc6e 	bl	800744e <USBD_GetString>
 8009b72:	e7f8      	b.n	8009b66 <USBD_CDC_InterfaceStrDescriptor+0xe>
 8009b74:	2000347c 	.word	0x2000347c
 8009b78:	0800a170 	.word	0x0800a170

08009b7c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8009b7c:	2803      	cmp	r0, #3
 8009b7e:	d805      	bhi.n	8009b8c <USBD_Get_USB_Status+0x10>
 8009b80:	e8df f000 	tbb	[pc, r0]
 8009b84:	05020405 	.word	0x05020405
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b88:	2001      	movs	r0, #1
    break;
 8009b8a:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8009b8c:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8009b8e:	4770      	bx	lr

08009b90 <SystemClockConfig_Resume>:
{
 8009b90:	b508      	push	{r3, lr}
  SystemClock_Config();
 8009b92:	f7f6 fee9 	bl	8000968 <SystemClock_Config>
}
 8009b96:	bd08      	pop	{r3, pc}

08009b98 <HAL_PCD_MspInit>:
{
 8009b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b9a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9303      	str	r3, [sp, #12]
 8009ba0:	9304      	str	r3, [sp, #16]
 8009ba2:	9305      	str	r3, [sp, #20]
 8009ba4:	9306      	str	r3, [sp, #24]
 8009ba6:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB)
 8009ba8:	6802      	ldr	r2, [r0, #0]
 8009baa:	4b22      	ldr	r3, [pc, #136]	; (8009c34 <HAL_PCD_MspInit+0x9c>)
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d001      	beq.n	8009bb4 <HAL_PCD_MspInit+0x1c>
}
 8009bb0:	b009      	add	sp, #36	; 0x24
 8009bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009bb4:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8009bb8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009bba:	f043 0301 	orr.w	r3, r3, #1
 8009bbe:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009bc0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8009bc8:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009bca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009bcc:	f043 0304 	orr.w	r3, r3, #4
 8009bd0:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009bd2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009bd4:	f003 0304 	and.w	r3, r3, #4
 8009bd8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8009bda:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8009bdc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009be0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009be2:	2702      	movs	r7, #2
 8009be4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009be6:	2500      	movs	r5, #0
 8009be8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bea:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8009bec:	260a      	movs	r6, #10
 8009bee:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bf0:	a903      	add	r1, sp, #12
 8009bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bf6:	f7f7 fe41 	bl	800187c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bfe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c00:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c02:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c04:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8009c06:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c08:	a903      	add	r1, sp, #12
 8009c0a:	480b      	ldr	r0, [pc, #44]	; (8009c38 <HAL_PCD_MspInit+0xa0>)
 8009c0c:	f7f7 fe36 	bl	800187c <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009c10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c16:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009c18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c1e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8009c20:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8009c22:	462a      	mov	r2, r5
 8009c24:	2105      	movs	r1, #5
 8009c26:	2014      	movs	r0, #20
 8009c28:	f7f7 fde6 	bl	80017f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009c2c:	2014      	movs	r0, #20
 8009c2e:	f7f7 fe17 	bl	8001860 <HAL_NVIC_EnableIRQ>
}
 8009c32:	e7bd      	b.n	8009bb0 <HAL_PCD_MspInit+0x18>
 8009c34:	40006800 	.word	0x40006800
 8009c38:	48000800 	.word	0x48000800

08009c3c <HAL_PCD_SetupStageCallback>:
{
 8009c3c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c3e:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8009c42:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8009c46:	f7fc ff9b 	bl	8006b80 <USBD_LL_SetupStage>
}
 8009c4a:	bd08      	pop	{r3, pc}

08009c4c <HAL_PCD_DataOutStageCallback>:
{
 8009c4c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c4e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009c52:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8009c56:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8009c5a:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8009c5e:	f7fc ffbb 	bl	8006bd8 <USBD_LL_DataOutStage>
}
 8009c62:	bd08      	pop	{r3, pc}

08009c64 <HAL_PCD_DataInStageCallback>:
{
 8009c64:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c66:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009c6a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8009c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c70:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8009c74:	f7fc ffec 	bl	8006c50 <USBD_LL_DataInStage>
}
 8009c78:	bd08      	pop	{r3, pc}

08009c7a <HAL_PCD_SOFCallback>:
{
 8009c7a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c7c:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8009c80:	f7fd f88c 	bl	8006d9c <USBD_LL_SOF>
}
 8009c84:	bd08      	pop	{r3, pc}

08009c86 <HAL_PCD_ResetCallback>:
{
 8009c86:	b510      	push	{r4, lr}
 8009c88:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c8a:	6883      	ldr	r3, [r0, #8]
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d109      	bne.n	8009ca4 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c90:	2101      	movs	r1, #1
 8009c92:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8009c96:	f7fd f867 	bl	8006d68 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c9a:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8009c9e:	f7fd f836 	bl	8006d0e <USBD_LL_Reset>
}
 8009ca2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8009ca4:	f7f6 fe5e 	bl	8000964 <Error_Handler>
 8009ca8:	e7f2      	b.n	8009c90 <HAL_PCD_ResetCallback+0xa>
	...

08009cac <HAL_PCD_SuspendCallback>:
{
 8009cac:	b510      	push	{r4, lr}
 8009cae:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009cb0:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8009cb4:	f7fd f85b 	bl	8006d6e <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8009cb8:	69a3      	ldr	r3, [r4, #24]
 8009cba:	b123      	cbz	r3, 8009cc6 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cbc:	4a02      	ldr	r2, [pc, #8]	; (8009cc8 <HAL_PCD_SuspendCallback+0x1c>)
 8009cbe:	6913      	ldr	r3, [r2, #16]
 8009cc0:	f043 0306 	orr.w	r3, r3, #6
 8009cc4:	6113      	str	r3, [r2, #16]
}
 8009cc6:	bd10      	pop	{r4, pc}
 8009cc8:	e000ed00 	.word	0xe000ed00

08009ccc <HAL_PCD_ResumeCallback>:
{
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8009cd0:	6983      	ldr	r3, [r0, #24]
 8009cd2:	b923      	cbnz	r3, 8009cde <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cd4:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8009cd8:	f7fd f853 	bl	8006d82 <USBD_LL_Resume>
}
 8009cdc:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cde:	4a04      	ldr	r2, [pc, #16]	; (8009cf0 <HAL_PCD_ResumeCallback+0x24>)
 8009ce0:	6913      	ldr	r3, [r2, #16]
 8009ce2:	f023 0306 	bic.w	r3, r3, #6
 8009ce6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009ce8:	f7ff ff52 	bl	8009b90 <SystemClockConfig_Resume>
 8009cec:	e7f2      	b.n	8009cd4 <HAL_PCD_ResumeCallback+0x8>
 8009cee:	bf00      	nop
 8009cf0:	e000ed00 	.word	0xe000ed00

08009cf4 <USBD_LL_Init>:
{
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4605      	mov	r5, r0
  hpcd_USB_FS.pData = pdev;
 8009cf8:	4c20      	ldr	r4, [pc, #128]	; (8009d7c <USBD_LL_Init+0x88>)
 8009cfa:	f8c4 02f0 	str.w	r0, [r4, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8009cfe:	f8c0 42c4 	str.w	r4, [r0, #708]	; 0x2c4
  HAL_PWREx_EnableVddUSB();
 8009d02:	f7f9 f9b1 	bl	8003068 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.Instance = USB;
 8009d06:	4b1e      	ldr	r3, [pc, #120]	; (8009d80 <USBD_LL_Init+0x8c>)
 8009d08:	6023      	str	r3, [r4, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009d0a:	2308      	movs	r3, #8
 8009d0c:	6063      	str	r3, [r4, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009d0e:	2302      	movs	r3, #2
 8009d10:	60a3      	str	r3, [r4, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d12:	6123      	str	r3, [r4, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009d14:	2300      	movs	r3, #0
 8009d16:	6163      	str	r3, [r4, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009d18:	61a3      	str	r3, [r4, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009d1a:	61e3      	str	r3, [r4, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009d1c:	6223      	str	r3, [r4, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7f8 fa31 	bl	8002186 <HAL_PCD_Init>
 8009d24:	bb30      	cbnz	r0, 8009d74 <USBD_LL_Init+0x80>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d26:	2318      	movs	r3, #24
 8009d28:	2200      	movs	r2, #0
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	f8d5 02c4 	ldr.w	r0, [r5, #708]	; 0x2c4
 8009d30:	f7f9 f957 	bl	8002fe2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009d34:	2358      	movs	r3, #88	; 0x58
 8009d36:	2200      	movs	r2, #0
 8009d38:	2180      	movs	r1, #128	; 0x80
 8009d3a:	f8d5 02c4 	ldr.w	r0, [r5, #708]	; 0x2c4
 8009d3e:	f7f9 f950 	bl	8002fe2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009d42:	23c0      	movs	r3, #192	; 0xc0
 8009d44:	2200      	movs	r2, #0
 8009d46:	2181      	movs	r1, #129	; 0x81
 8009d48:	f8d5 02c4 	ldr.w	r0, [r5, #708]	; 0x2c4
 8009d4c:	f7f9 f949 	bl	8002fe2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009d50:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009d54:	2200      	movs	r2, #0
 8009d56:	2101      	movs	r1, #1
 8009d58:	f8d5 02c4 	ldr.w	r0, [r5, #708]	; 0x2c4
 8009d5c:	f7f9 f941 	bl	8002fe2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d64:	2200      	movs	r2, #0
 8009d66:	2182      	movs	r1, #130	; 0x82
 8009d68:	f8d5 02c4 	ldr.w	r0, [r5, #708]	; 0x2c4
 8009d6c:	f7f9 f939 	bl	8002fe2 <HAL_PCDEx_PMAConfig>
}
 8009d70:	2000      	movs	r0, #0
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8009d74:	f7f6 fdf6 	bl	8000964 <Error_Handler>
 8009d78:	e7d5      	b.n	8009d26 <USBD_LL_Init+0x32>
 8009d7a:	bf00      	nop
 8009d7c:	2000367c 	.word	0x2000367c
 8009d80:	40006800 	.word	0x40006800

08009d84 <USBD_LL_Start>:
{
 8009d84:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8009d86:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009d8a:	f7f8 fa69 	bl	8002260 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d8e:	f7ff fef5 	bl	8009b7c <USBD_Get_USB_Status>
}
 8009d92:	bd08      	pop	{r3, pc}

08009d94 <USBD_LL_OpenEP>:
{
 8009d94:	b510      	push	{r4, lr}
 8009d96:	4614      	mov	r4, r2
 8009d98:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d9a:	4623      	mov	r3, r4
 8009d9c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009da0:	f7f8 fff3 	bl	8002d8a <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009da4:	f7ff feea 	bl	8009b7c <USBD_Get_USB_Status>
}
 8009da8:	bd10      	pop	{r4, pc}

08009daa <USBD_LL_CloseEP>:
{
 8009daa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009dac:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009db0:	f7f9 f827 	bl	8002e02 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009db4:	f7ff fee2 	bl	8009b7c <USBD_Get_USB_Status>
}
 8009db8:	bd08      	pop	{r3, pc}

08009dba <USBD_LL_StallEP>:
{
 8009dba:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009dbc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009dc0:	f7f9 f89f 	bl	8002f02 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc4:	f7ff feda 	bl	8009b7c <USBD_Get_USB_Status>
}
 8009dc8:	bd08      	pop	{r3, pc}

08009dca <USBD_LL_ClearStallEP>:
{
 8009dca:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009dcc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009dd0:	f7f9 f8cc 	bl	8002f6c <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd4:	f7ff fed2 	bl	8009b7c <USBD_Get_USB_Status>
}
 8009dd8:	bd08      	pop	{r3, pc}

08009dda <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009dda:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8009dde:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009de2:	d108      	bne.n	8009df6 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009de4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009de8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009dec:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009df0:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8009df4:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009df6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009dfa:	3101      	adds	r1, #1
 8009dfc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009e00:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009e04:	7888      	ldrb	r0, [r1, #2]
 8009e06:	4770      	bx	lr

08009e08 <USBD_LL_SetUSBAddress>:
{
 8009e08:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e0a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009e0e:	f7f8 fecf 	bl	8002bb0 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e12:	f7ff feb3 	bl	8009b7c <USBD_Get_USB_Status>
}
 8009e16:	bd08      	pop	{r3, pc}

08009e18 <USBD_LL_Transmit>:
{
 8009e18:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e1a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009e1e:	f7f9 f84d 	bl	8002ebc <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e22:	f7ff feab 	bl	8009b7c <USBD_Get_USB_Status>
}
 8009e26:	bd08      	pop	{r3, pc}

08009e28 <USBD_LL_PrepareReceive>:
{
 8009e28:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e2a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009e2e:	f7f9 f81a 	bl	8002e66 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e32:	f7ff fea3 	bl	8009b7c <USBD_Get_USB_Status>
}
 8009e36:	bd08      	pop	{r3, pc}

08009e38 <USBD_LL_GetRxDataSize>:
{
 8009e38:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e3a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009e3e:	f7f9 f834 	bl	8002eaa <HAL_PCD_EP_GetRxCount>
}
 8009e42:	bd08      	pop	{r3, pc}

08009e44 <HAL_PCDEx_LPM_Callback>:
{
 8009e44:	b510      	push	{r4, lr}
 8009e46:	4604      	mov	r4, r0
  switch (msg)
 8009e48:	b111      	cbz	r1, 8009e50 <HAL_PCDEx_LPM_Callback+0xc>
 8009e4a:	2901      	cmp	r1, #1
 8009e4c:	d00f      	beq.n	8009e6e <HAL_PCDEx_LPM_Callback+0x2a>
}
 8009e4e:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8009e50:	6983      	ldr	r3, [r0, #24]
 8009e52:	b923      	cbnz	r3, 8009e5e <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 8009e54:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8009e58:	f7fc ff93 	bl	8006d82 <USBD_LL_Resume>
    break;
 8009e5c:	e7f7      	b.n	8009e4e <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 8009e5e:	f7ff fe97 	bl	8009b90 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e62:	4a09      	ldr	r2, [pc, #36]	; (8009e88 <HAL_PCDEx_LPM_Callback+0x44>)
 8009e64:	6913      	ldr	r3, [r2, #16]
 8009e66:	f023 0306 	bic.w	r3, r3, #6
 8009e6a:	6113      	str	r3, [r2, #16]
 8009e6c:	e7f2      	b.n	8009e54 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 8009e6e:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8009e72:	f7fc ff7c 	bl	8006d6e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009e76:	69a3      	ldr	r3, [r4, #24]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d0e8      	beq.n	8009e4e <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e7c:	4a02      	ldr	r2, [pc, #8]	; (8009e88 <HAL_PCDEx_LPM_Callback+0x44>)
 8009e7e:	6913      	ldr	r3, [r2, #16]
 8009e80:	f043 0306 	orr.w	r3, r3, #6
 8009e84:	6113      	str	r3, [r2, #16]
}
 8009e86:	e7e2      	b.n	8009e4e <HAL_PCDEx_LPM_Callback+0xa>
 8009e88:	e000ed00 	.word	0xe000ed00

08009e8c <USBD_static_malloc>:
}
 8009e8c:	4800      	ldr	r0, [pc, #0]	; (8009e90 <USBD_static_malloc+0x4>)
 8009e8e:	4770      	bx	lr
 8009e90:	20001ba0 	.word	0x20001ba0

08009e94 <USBD_static_free>:
}
 8009e94:	4770      	bx	lr
	...

08009e98 <__libc_init_array>:
 8009e98:	b570      	push	{r4, r5, r6, lr}
 8009e9a:	4d0d      	ldr	r5, [pc, #52]	; (8009ed0 <__libc_init_array+0x38>)
 8009e9c:	4c0d      	ldr	r4, [pc, #52]	; (8009ed4 <__libc_init_array+0x3c>)
 8009e9e:	1b64      	subs	r4, r4, r5
 8009ea0:	10a4      	asrs	r4, r4, #2
 8009ea2:	2600      	movs	r6, #0
 8009ea4:	42a6      	cmp	r6, r4
 8009ea6:	d109      	bne.n	8009ebc <__libc_init_array+0x24>
 8009ea8:	4d0b      	ldr	r5, [pc, #44]	; (8009ed8 <__libc_init_array+0x40>)
 8009eaa:	4c0c      	ldr	r4, [pc, #48]	; (8009edc <__libc_init_array+0x44>)
 8009eac:	f000 f82e 	bl	8009f0c <_init>
 8009eb0:	1b64      	subs	r4, r4, r5
 8009eb2:	10a4      	asrs	r4, r4, #2
 8009eb4:	2600      	movs	r6, #0
 8009eb6:	42a6      	cmp	r6, r4
 8009eb8:	d105      	bne.n	8009ec6 <__libc_init_array+0x2e>
 8009eba:	bd70      	pop	{r4, r5, r6, pc}
 8009ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ec0:	4798      	blx	r3
 8009ec2:	3601      	adds	r6, #1
 8009ec4:	e7ee      	b.n	8009ea4 <__libc_init_array+0xc>
 8009ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eca:	4798      	blx	r3
 8009ecc:	3601      	adds	r6, #1
 8009ece:	e7f2      	b.n	8009eb6 <__libc_init_array+0x1e>
 8009ed0:	0800a180 	.word	0x0800a180
 8009ed4:	0800a180 	.word	0x0800a180
 8009ed8:	0800a180 	.word	0x0800a180
 8009edc:	0800a188 	.word	0x0800a188

08009ee0 <memcpy>:
 8009ee0:	440a      	add	r2, r1
 8009ee2:	4291      	cmp	r1, r2
 8009ee4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009ee8:	d100      	bne.n	8009eec <memcpy+0xc>
 8009eea:	4770      	bx	lr
 8009eec:	b510      	push	{r4, lr}
 8009eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ef6:	4291      	cmp	r1, r2
 8009ef8:	d1f9      	bne.n	8009eee <memcpy+0xe>
 8009efa:	bd10      	pop	{r4, pc}

08009efc <memset>:
 8009efc:	4402      	add	r2, r0
 8009efe:	4603      	mov	r3, r0
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d100      	bne.n	8009f06 <memset+0xa>
 8009f04:	4770      	bx	lr
 8009f06:	f803 1b01 	strb.w	r1, [r3], #1
 8009f0a:	e7f9      	b.n	8009f00 <memset+0x4>

08009f0c <_init>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	bf00      	nop
 8009f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f12:	bc08      	pop	{r3}
 8009f14:	469e      	mov	lr, r3
 8009f16:	4770      	bx	lr

08009f18 <_fini>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	bf00      	nop
 8009f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1e:	bc08      	pop	{r3}
 8009f20:	469e      	mov	lr, r3
 8009f22:	4770      	bx	lr
