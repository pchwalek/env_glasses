import serial
from os.path import exists
import time
import _thread as thread
import threading
import queue
import struct as struct
from socket import gethostbyname
import time
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# from sensorClass import *
from thermopile import *
from sht4x import *
from sgp import *
from bme import *
from lux import *
from spec import *
from blink import *


# gasSpec_serial = '/dev/cu.usbserial-014A1C56'
gasSpec_serial = 'COM4'

SIM_DATA_DIR = "simData/"
DATA_DIR = "data/"
filename_noext = 'logfile'
filename_prefix = ''
filename_extension = ".csv"
temp_header = "temp_1, temp_2, temp_3, ambient_temp, ardu_millis, epoch\n"
hr_header = "heart_rate, epoch\n"

HOST = "127.0.0.1"  # Standard loopback interface address (localhost)
# HOST = gethostbyname('')
PORT = 65432  # Port to listen on (non-privileged ports are > 1023)

def start_experiment():

    print("Starting experiment")

    print("Header size: " + str(headerStructSize))
    # find filename
    filename_idx = 0
    # while True:
    #     filename = DATA_DIR + filename_noext + "_" + str(filename_idx) + "_temp" + filename_extension
    #     print(filename)
    #     if not exists(filename):
    #         filename_prefix = DATA_DIR + filename_noext + "_" + str(filename_idx)
    #         break
    #     filename_idx += 1
    #
    # print("Filename prefix: " + filename_prefix)

    msgQueue = queue.Queue(maxsize=20)

    try:
        print("Starting threads")
        thermopile_thread = airSpecSimulator(1, "Thermopile", SIM_DATA_DIR + "thermopile.csv", 0.2, msgQueue);
        spec_thread = airSpecSimulator(1, "Spec", SIM_DATA_DIR + "spec.csv", 5, msgQueue);
        bme_thread = airSpecSimulator(1, "BME", SIM_DATA_DIR + "bme.csv", 5/9.0, msgQueue);
        sht45_thread = airSpecSimulator(1, "SHT45", SIM_DATA_DIR + "sht45.csv", 5, msgQueue);
        sgp_thread = airSpecSimulator(1, "SGP", SIM_DATA_DIR + "sgp.csv", 2, msgQueue);
        socket_thread = socketMessage(2, "socket_thread", HOST, PORT, msgQueue)

        socket_thread.start()
        thermopile_thread.start()
        spec_thread.start()
        bme_thread.start()
        sht45_thread.start()
        sgp_thread.start()
    except KeyboardInterrupt:
        print("Keyboard interrupt detected")
        print("Closing threads")

        thermopile_thread.join()
        spec_thread.join()
        bme_thread.join()
        sht45_thread.join()
        sgp_thread.join()

        socket_thread.join()

    # # grab data
    # try:
    #     while True:
    #         ardu_string = ardu_ser.readline().decode("utf-8")
    #         print(ardu_string)
    #         with open(filename, 'a+') as f:
    #             f.write(ardu_string)
    # except:
    #     ardu_ser.close()
    #     # hr_ser.close()

class socketMessage (threading.Thread):
    def __init__(self, threadID, name, host, port, queue):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.host = host
        self.port = port
        self.queue = queue

    def run(self):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind((self.host, self.port))
            s.listen()
            while True:
                conn, addr = s.accept()

                # flush queue
                while not self.queue.empty():
                    try:
                        self.queue.get(False)
                    except queue.Empty:
                        continue

                with conn:
                    print(f"Connected by {addr}")
                    while True:
                        message = self.queue.get(block=True, timeout=None)
                        try:
                            conn.sendall(message.encode())
                        except (ConnectionAbortedError, ConnectionResetError):
                            print("conn aborted")
                            break

class airSpecSimulator (threading.Thread):
    def __init__(self, threadID, name, file_path, period, queue):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.file_path = file_path
        self.period = period
        self.queue = queue

    def run(self):
        self.df = pd.read_csv(self.file_path)

        while(True):
            for index, row in self.df.iterrows():
                try:
                    self.queue.put_nowait(json.dumps([self.name] + row.tolist()[1:]))
                except queue.Full:
                    continue
                time.sleep(self.period)



if __name__ == '__main__':
    start_experiment()
    # time.sleep(3);
    # log_experiment()

# See PyCharm help at https://www.jetbrains.com/help/pycharm/